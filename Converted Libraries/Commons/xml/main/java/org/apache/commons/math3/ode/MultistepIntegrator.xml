<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator"/>
        <import package="org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator"/>
        <import package="org.apache.commons.math3.ode.sampling.StepHandler"/>
        <import package="org.apache.commons.math3.ode.sampling.StepInterpolator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="MultistepIntegrator" line="32">
            <extends class="AdaptiveStepsizeIntegrator"/>
            <javadoc line="32">
                This class is the base class for multistep integrators for Ordinary
                  Differential Equations.
                  &lt;p&gt;We define scaled derivatives s&lt;sub&gt;i&lt;/sub&gt;(n) at step n as:
                  &lt;pre&gt;
                  s&lt;sub&gt;1&lt;/sub&gt;(n) = h y&apos;&lt;sub&gt;n&lt;/sub&gt; for first derivative
                  s&lt;sub&gt;2&lt;/sub&gt;(n) = h&lt;sup&gt;2&lt;/sup&gt;/2 y&apos;&apos;&lt;sub&gt;n&lt;/sub&gt; for second derivative
                  s&lt;sub&gt;3&lt;/sub&gt;(n) = h&lt;sup&gt;3&lt;/sup&gt;/6 y&apos;&apos;&apos;&lt;sub&gt;n&lt;/sub&gt; for third derivative
                  ...
                  s&lt;sub&gt;k&lt;/sub&gt;(n) = h&lt;sup&gt;k&lt;/sup&gt;/k! y&lt;sup&gt;(k)&lt;/sup&gt;&lt;sub&gt;n&lt;/sub&gt; for k&lt;sup&gt;th&lt;/sup&gt; derivative
                  &lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;Rather than storing several previous steps separately, this implementation uses
                  the Nordsieck vector with higher degrees scaled derivatives all taken at the same
                  step (y&lt;sub&gt;n&lt;/sub&gt;, s&lt;sub&gt;1&lt;/sub&gt;(n) and r&lt;sub&gt;n&lt;/sub&gt;) where r&lt;sub&gt;n&lt;/sub&gt; is defined as:
                  &lt;pre&gt;
                  r&lt;sub&gt;n&lt;/sub&gt; = [ s&lt;sub&gt;2&lt;/sub&gt;(n), s&lt;sub&gt;3&lt;/sub&gt;(n) ... s&lt;sub&gt;k&lt;/sub&gt;(n) ]&lt;sup&gt;T&lt;/sup&gt;
                  &lt;/pre&gt;
                  (we omit the k index in the notation for clarity)&lt;/p&gt;
                  &lt;p&gt;
                  Multistep integrators with Nordsieck representation are highly sensitive to
                  large step changes because when the step is multiplied by factor a, the
                  k&lt;sup&gt;th&lt;/sup&gt; component of the Nordsieck vector is multiplied by a&lt;sup&gt;k&lt;/sup&gt;
                  and the last components are the least accurate ones. The default max growth
                  factor is therefore set to a quite low value: 2&lt;sup&gt;1/order&lt;/sup&gt;.
                  &lt;/p&gt;                
                <see>
                    org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator                    
                </see>
                <see>
                    org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator                    
                </see>
                <version>
                    $Id: MultistepIntegrator.java 1463684 2013-04-02 19:04:13Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="scaled" type="double[]" line="65"/>
            <javadoc line="65">
                First scaled derivative (h y&apos;).                
            </javadoc>
            <declaration name="nordsieck" type="Array2DRowRealMatrix" line="68"/>
            <javadoc line="68">
                Nordsieck matrix of the higher scaled derivatives.
                  &lt;p&gt;(h&lt;sup&gt;2&lt;/sup&gt;/2 y&apos;&apos;, h&lt;sup&gt;3&lt;/sup&gt;/6 y&apos;&apos;&apos; ..., h&lt;sup&gt;k&lt;/sup&gt;/k! y&lt;sup&gt;(k)&lt;/sup&gt;)&lt;/p&gt;                
            </javadoc>
            <declaration name="starter" type="FirstOrderIntegrator" line="73"/>
            <javadoc line="73">
                Starter integrator.                
            </javadoc>
            <declaration name="nSteps" type="int" line="76"/>
            <javadoc line="76">
                Number of steps of the multistep method (excluding the one being computed).                
            </javadoc>
            <declaration name="exp" type="double" line="79"/>
            <javadoc line="79">
                Stepsize control exponent.                
            </javadoc>
            <declaration name="safety" type="double" line="82"/>
            <javadoc line="82">
                Safety factor for stepsize control.                
            </javadoc>
            <declaration name="minReduction" type="double" line="85"/>
            <javadoc line="85">
                Minimal reduction factor for stepsize control.                
            </javadoc>
            <declaration name="maxGrowth" type="double" line="88"/>
            <javadoc line="88">
                Maximal growth factor for stepsize control.                
            </javadoc>
            <javadoc line="91">
                Build a multistep integrator with the given stepsize bounds.
                  &lt;p&gt;The default starter integrator is set to the {@link DormandPrince853Integrator Dormand-Prince 8(5,3)} integrator with
                  some defaults settings.&lt;/p&gt;
                  &lt;p&gt;
                  The default max growth factor is set to a quite low value: 2&lt;sup&gt;1/order&lt;/sup&gt;.
                  &lt;/p&gt;                
                <param>
                    name name of the method                    
                </param>
                <param>
                    nSteps number of steps of the multistep method
                      (excluding the one being computed)                    
                </param>
                <param>
                    order order of the method                    
                </param>
                <param>
                    minStep minimal step (must be positive even for backward
                      integration), the last step can be smaller than this                    
                </param>
                <param>
                    maxStep maximal step (must be positive even for backward
                      integration)                    
                </param>
                <param>
                    scalAbsoluteTolerance allowed absolute error                    
                </param>
                <param>
                    scalRelativeTolerance allowed relative error                    
                </param>
                <exception>
                    NumberIsTooSmallException if number of steps is smaller than 2                    
                </exception>
            </javadoc>
            <method name="MultistepIntegrator" type="constructor" line="116">
                <params>
                    <param name="name" type="String"/>
                    <param name="nSteps" type="int"/>
                    <param name="order" type="int"/>
                    <param name="minStep" type="double"/>
                    <param name="maxStep" type="double"/>
                    <param name="scalAbsoluteTolerance" type="double"/>
                    <param name="scalRelativeTolerance" type="double"/>
                </params>
                <comment line="134">
                    set the default values of the algorithm control parameters                    
                </comment>
                <scope line="120"/>
            </method>
            <javadoc line="140">
                Build a multistep integrator with the given stepsize bounds.
                  &lt;p&gt;The default starter integrator is set to the {@link DormandPrince853Integrator Dormand-Prince 8(5,3)} integrator with
                  some defaults settings.&lt;/p&gt;
                  &lt;p&gt;
                  The default max growth factor is set to a quite low value: 2&lt;sup&gt;1/order&lt;/sup&gt;.
                  &lt;/p&gt;                
                <param>
                    name name of the method                    
                </param>
                <param>
                    nSteps number of steps of the multistep method
                      (excluding the one being computed)                    
                </param>
                <param>
                    order order of the method                    
                </param>
                <param>
                    minStep minimal step (must be positive even for backward
                      integration), the last step can be smaller than this                    
                </param>
                <param>
                    maxStep maximal step (must be positive even for backward
                      integration)                    
                </param>
                <param>
                    vecAbsoluteTolerance allowed absolute error                    
                </param>
                <param>
                    vecRelativeTolerance allowed relative error                    
                </param>
            </javadoc>
            <method name="MultistepIntegrator" type="constructor" line="163">
                <params>
                    <param name="name" type="String"/>
                    <param name="nSteps" type="int"/>
                    <param name="order" type="int"/>
                    <param name="minStep" type="double"/>
                    <param name="maxStep" type="double"/>
                    <param name="vecAbsoluteTolerance" type="double[]"/>
                    <param name="vecRelativeTolerance" type="double[]"/>
                </params>
                <comment line="173">
                    set the default values of the algorithm control parameters                    
                </comment>
            </method>
            <javadoc line="179">
                Get the starter integrator.                
                <return>
                    starter integrator                    
                </return>
            </javadoc>
            <method name="getStarterIntegrator" type="ODEIntegrator" line="183"/>
            <javadoc line="187">
                Set the starter integrator.
                  &lt;p&gt;The various step and event handlers for this starter integrator
                  will be managed automatically by the multi-step integrator. Any
                  user configuration for these elements will be cleared before use.&lt;/p&gt;                
                <param>
                    starterIntegrator starter integrator                    
                </param>
            </javadoc>
            <method name="setStarterIntegrator" type="void" line="194">
                <params>
                    <param name="starterIntegrator" type="FirstOrderIntegrator"/>
                </params>
            </method>
            <javadoc line="198">
                Start the integration.
                  &lt;p&gt;This method computes one step using the underlying starter integrator,
                  and initializes the Nordsieck vector at step start. The starter integrator
                  purpose is only to establish initial conditions, it does not really change
                  time by itself. The top level multistep integrator remains in charge of
                  handling time propagation and events handling as it will starts its own
                  computation right from the beginning. In a sense, the starter integrator
                  can be seen as a dummy one and so it will never trigger any user event nor
                  call any user step handler.&lt;/p&gt;                
                <param>
                    t0 initial time                    
                </param>
                <param>
                    y0 initial value of the state vector at t0                    
                </param>
                <param>
                    t target time for the integration
                      (can be set to a value smaller than &lt;code&gt;t0&lt;/code&gt; for backward integration)                    
                </param>
                <exception>
                    DimensionMismatchException if arrays dimension do not match equations settings                    
                </exception>
                <exception>
                    NumberIsTooSmallException if integration step is too small                    
                </exception>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded                    
                </exception>
                <exception>
                    NoBracketingException if the location of an event cannot be bracketed                    
                </exception>
            </javadoc>
            <method name="start" type="void" line="218">
                <params>
                    <param name="t0" type="double"/>
                    <param name="y0" type="double[]"/>
                    <param name="t" type="double"/>
                </params>
                <comment line="221">
                    make sure NO user event nor user step handler is triggered,
                     this is the task of the top level integrator, not the task
                     of the starter integrator                    
                </comment>
                <comment line="227">
                    set up one specific step handler to extract initial Nordsieck vector                    
                </comment>
                <comment line="230">
                    start integration, expecting a InitializationCompletedMarkerException                    
                </comment>
                <comment line="251">
                    NOPMD                    
                </comment>
                <comment line="252">
                    this is the expected nominal interruption of the start integrator                    
                </comment>
                <comment line="254">
                    count the evaluations used by the starter                    
                </comment>
                <comment line="259">
                    remove the specific step handler                    
                </comment>
                <scope line="230">
                    <scope line="232"/>
                    <scope line="234">
                        <anonymous_class line="235">
                            <javadoc line="237">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="getDimension" type="int" line="238"/>
                            <javadoc line="242">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="computeDerivatives" type="void" line="243">
                                <params>
                                    <param name="t" type="double"/>
                                    <param name="y" type="double[]"/>
                                    <param name="yDot" type="double[]"/>
                                </params>
                            </method>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="250"/>
            </method>
            <method name="initializeHighOrderDerivatives" type="Array2DRowRealMatrix" line="263"/>
            <javadoc line="263">
                Initialize the high order scaled derivatives at step start.                
                <param>
                    h step size to use for scaling                    
                </param>
                <param>
                    t first steps times                    
                </param>
                <param>
                    y first steps states                    
                </param>
                <param>
                    yDot first steps derivatives                    
                </param>
                <return>
                    Nordieck vector at first step (h&lt;sup&gt;2&lt;/sup&gt;/2 y&apos;&apos;&lt;sub&gt;n&lt;/sub&gt;,
                      h&lt;sup&gt;3&lt;/sup&gt;/6 y&apos;&apos;&apos;&lt;sub&gt;n&lt;/sub&gt; ... h&lt;sup&gt;k&lt;/sup&gt;/k! y&lt;sup&gt;(k)&lt;/sup&gt;&lt;sub&gt;n&lt;/sub&gt;)                    
                </return>
            </javadoc>
            <javadoc line="275">
                Get the minimal reduction factor for stepsize control.                
                <return>
                    minimal reduction factor                    
                </return>
            </javadoc>
            <method name="getMinReduction" type="double" line="278"/>
            <javadoc line="282">
                Set the minimal reduction factor for stepsize control.                
                <param>
                    minReduction minimal reduction factor                    
                </param>
            </javadoc>
            <method name="setMinReduction" type="void" line="285">
                <params>
                    <param name="minReduction" type="double"/>
                </params>
            </method>
            <javadoc line="289">
                Get the maximal growth factor for stepsize control.                
                <return>
                    maximal growth factor                    
                </return>
            </javadoc>
            <method name="getMaxGrowth" type="double" line="292"/>
            <javadoc line="296">
                Set the maximal growth factor for stepsize control.                
                <param>
                    maxGrowth maximal growth factor                    
                </param>
            </javadoc>
            <method name="setMaxGrowth" type="void" line="299">
                <params>
                    <param name="maxGrowth" type="double"/>
                </params>
            </method>
            <javadoc line="303">
                Get the safety factor for stepsize control.                
                <return>
                    safety factor                    
                </return>
            </javadoc>
            <method name="getSafety" type="double" line="306"/>
            <javadoc line="310">
                Set the safety factor for stepsize control.                
                <param>
                    safety safety factor                    
                </param>
            </javadoc>
            <method name="setSafety" type="void" line="313">
                <params>
                    <param name="safety" type="double"/>
                </params>
            </method>
            <javadoc line="317">
                Compute step grow/shrink factor according to normalized error.                
                <param>
                    error normalized error of the current step                    
                </param>
                <return>
                    grow/shrink factor for next step                    
                </return>
            </javadoc>
            <method name="computeStepGrowShrinkFactor" type="double" line="321">
                <params>
                    <param name="error" type="double"/>
                </params>
            </method>
            <interface name="NordsieckTransformer">
                <javadoc line="325">
                    Transformer used to convert the first step to Nordsieck representation.                    
                </javadoc>
                <method name="initializeHighOrderDerivatives" type="Array2DRowRealMatrix" line="327"/>
                <javadoc line="327">
                    Initialize the high order scaled derivatives at step start.                    
                    <param>
                        h step size to use for scaling                        
                    </param>
                    <param>
                        t first steps times                        
                    </param>
                    <param>
                        y first steps states                        
                    </param>
                    <param>
                        yDot first steps derivatives                        
                    </param>
                    <return>
                        Nordieck vector at first step (h&lt;sup&gt;2&lt;/sup&gt;/2 y&apos;&apos;&lt;sub&gt;n&lt;/sub&gt;,
                          h&lt;sup&gt;3&lt;/sup&gt;/6 y&apos;&apos;&apos;&lt;sub&gt;n&lt;/sub&gt; ... h&lt;sup&gt;k&lt;/sup&gt;/k! y&lt;sup&gt;(k)&lt;/sup&gt;&lt;sub&gt;n&lt;/sub&gt;)                        
                    </return>
                </javadoc>
            </interface>
            <class name="NordsieckInitializer" line="340">
                <implements interface="StepHandler"/>
                <javadoc line="340">
                    Specialized step handler storing the first step.                    
                </javadoc>
                <declaration name="count" type="int" line="343"/>
                <javadoc line="343">
                    Steps counter.                    
                </javadoc>
                <declaration name="t" type="double[]" line="346"/>
                <javadoc line="346">
                    First steps times.                    
                </javadoc>
                <declaration name="y" type="double[][]" line="349"/>
                <javadoc line="349">
                    First steps states.                    
                </javadoc>
                <declaration name="yDot" type="double[][]" line="352"/>
                <javadoc line="352">
                    First steps derivatives.                    
                </javadoc>
                <javadoc line="355">
                    Simple constructor.                    
                    <param>
                        nSteps number of steps of the multistep method (excluding the one being computed)                        
                    </param>
                    <param>
                        n problem dimension                        
                    </param>
                </javadoc>
                <method name="NordsieckInitializer" type="constructor" line="359">
                    <params>
                        <param name="nSteps" type="int"/>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <javadoc line="366">
                    {@inheritDoc}                    
                </javadoc>
                <method name="handleStep" type="void" line="368">
                    <params>
                        <param name="interpolator" type="StepInterpolator"/>
                        <param name="isLast" type="boolean"/>
                    </params>
                    <comment line="375">
                        first step, we need to store also the beginning of the step                        
                    </comment>
                    <comment line="390">
                        store the end of the step                        
                    </comment>
                    <comment line="408">
                        this was the last step we needed, we can compute the derivatives                        
                    </comment>
                    <comment line="412">
                        first scaled derivative                        
                    </comment>
                    <comment line="418">
                        higher order derivatives                        
                    </comment>
                    <comment line="421">
                        stop the integrator now that all needed steps have been handled                        
                    </comment>
                    <declaration name="prev" type="double" line="370"/>
                    <declaration name="curr" type="double" line="371"/>
                    <scope line="373">
                        <declaration name="expandable" type="ExpandableStatefulODE" line="377"/>
                        <declaration name="primary" type="EquationsMapper" line="378"/>
                        <declaration name="index" type="int" line="381"/>
                        <scope line="382"/>
                    </scope>
                    <declaration name="expandable" type="ExpandableStatefulODE" line="394"/>
                    <declaration name="primary" type="EquationsMapper" line="395"/>
                    <declaration name="index" type="int" line="398"/>
                    <scope line="399"/>
                    <scope line="405">
                        <scope line="413"/>
                    </scope>
                </method>
                <javadoc line="427">
                    {@inheritDoc}                    
                </javadoc>
                <method name="init" type="void" line="428">
                    <params>
                        <param name="t0" type="double"/>
                        <param name="y0" type="double[]"/>
                        <param name="time" type="double"/>
                    </params>
                    <comment line="430">
                        nothing to do                        
                    </comment>
                </method>
            </class>
            <class name="InitializationCompletedMarkerException" line="434">
                <extends class="RuntimeException"/>
                <javadoc line="434">
                    Marker exception used ONLY to stop the starter integrator after first step.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="438"/>
                <javadoc line="438">
                    Serializable version identifier.                    
                </javadoc>
                <javadoc line="441">
                    Simple constructor.                    
                </javadoc>
                <method name="InitializationCompletedMarkerException" type="constructor" line="442"/>
            </class>
        </class>
    </source>