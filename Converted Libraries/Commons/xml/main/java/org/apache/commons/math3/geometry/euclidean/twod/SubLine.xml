<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Interval"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Vector1D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTree"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Hyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Region"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Region.Location"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Side"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="SubLine" line="37">
            <extends class="AbstractSubHyperplane">
                <type_params>
                    <type_param name="Euclidean2D"/>
                    <type_param name="Euclidean1D"/>
                </type_params>
            </extends>
            <javadoc line="37">
                This class represents a sub-hyperplane for {@link Line}.                
                <version>
                    $Id: SubLine.java 1555176 2014-01-03 18:07:59Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_TOLERANCE" type="double" line="43"/>
            <javadoc line="43">
                Default value for tolerance.                
            </javadoc>
            <javadoc line="46">
                Simple constructor.                
                <param>
                    hyperplane underlying hyperplane                    
                </param>
                <param>
                    remainingRegion remaining region of the hyperplane                    
                </param>
            </javadoc>
            <method name="SubLine" type="constructor" line="51">
                <params>
                    <param name="hyperplane" type="Hyperplane&lt;Euclidean2D&gt;"/>
                    <param name="remainingRegion" type="Region&lt;Euclidean1D&gt;"/>
                </params>
            </method>
            <javadoc line="55">
                Create a sub-line from two endpoints.                
                <param>
                    start start point                    
                </param>
                <param>
                    end end point                    
                </param>
                <param>
                    tolerance tolerance below which points are considered identical                    
                </param>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="SubLine" type="constructor" line="61">
                <params>
                    <param name="start" type="Vector2D"/>
                    <param name="end" type="Vector2D"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="65">
                Create a sub-line from two endpoints.                
                <param>
                    start start point                    
                </param>
                <param>
                    end end point                    
                </param>
                <deprecated>
                    as of 3.3, replaced with {@link #SubLine(Vector2D,Vector2D,double)}                    
                </deprecated>
            </javadoc>
            <method name="SubLine" type="constructor" line="71">
                <params>
                    <param name="start" type="Vector2D"/>
                    <param name="end" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="75">
                Create a sub-line from a segment.                
                <param>
                    segment single segment forming the sub-line                    
                </param>
            </javadoc>
            <method name="SubLine" type="constructor" line="78">
                <params>
                    <param name="segment" type="Segment"/>
                </params>
            </method>
            <javadoc line="83">
                Get the endpoints of the sub-line.
                  &lt;p&gt;
                  A subline may be any arbitrary number of disjoints segments, so the endpoints
                  are provided as a list of endpoint pairs. Each element of the list represents
                  one segment, and each segment contains a start point at index 0 and an end point
                  at index 1. If the sub-line is unbounded in the negative infinity direction,
                  the start point of the first segment will have infinite coordinates. If the
                  sub-line is unbounded in the positive infinity direction, the end point of the
                  last segment will have infinite coordinates. So a sub-line covering the whole
                  line will contain just one row and both elements of this row will have infinite
                  coordinates. If the sub-line is empty, the returned list will contain 0 segments.
                  &lt;/p&gt;                
                <return>
                    list of segments endpoints                    
                </return>
            </javadoc>
            <method name="getSegments" type="List&lt;Segment&gt;" line="97">
                <declaration name="line" type="Line" line="99"/>
                <declaration name="list" type="List&amp;lt;Interval&amp;gt;" line="100"/>
                <declaration name="segments" type="List&amp;lt;Segment&amp;gt;" line="101"/>
                <scope line="103">
                    <declaration name="start" type="Vector2D" line="104"/>
                    <declaration name="end" type="Vector2D" line="105"/>
                </scope>
            </method>
            <javadoc line="113">
                Get the intersection of the instance and another sub-line.
                  &lt;p&gt;
                  This method is related to the {@link Line#intersection(Line)intersection} method in the {@link Line Line} class, but in addition
                  to compute the point along infinite lines, it also checks the point
                  lies on both sub-line ranges.
                  &lt;/p&gt;                
                <param>
                    subLine other sub-line which may intersect instance                    
                </param>
                <param>
                    includeEndPoints if true, endpoints are considered to belong to
                      instance (i.e. they are closed sets) and may be returned, otherwise endpoints
                      are considered to not belong to instance (i.e. they are open sets) and intersection
                      occurring on endpoints lead to null being returned                    
                </param>
                <return>
                    the intersection point if there is one, null if the sub-lines don&apos;t intersect                    
                </return>
            </javadoc>
            <method name="intersection" type="Vector2D" line="127">
                <params>
                    <param name="subLine" type="SubLine"/>
                    <param name="includeEndPoints" type="boolean"/>
                </params>
                <comment line="130">
                    retrieve the underlying lines                    
                </comment>
                <comment line="134">
                    compute the intersection on infinite line                    
                </comment>
                <comment line="140">
                    check location of point with respect to first sub-line                    
                </comment>
                <comment line="143">
                    check location of point with respect to second sub-line                    
                </comment>
                <declaration name="line1" type="Line" line="130"/>
                <declaration name="line2" type="Line" line="131"/>
                <declaration name="v2D" type="Vector2D" line="134"/>
                <scope line="135"/>
                <declaration name="loc1" type="Location" line="140"/>
                <declaration name="loc2" type="Location" line="143"/>
                <scope line="145"/>
                <scope line="147"/>
            </method>
            <javadoc line="153">
                Build an interval set from two points.                
                <param>
                    start start point                    
                </param>
                <param>
                    end end point                    
                </param>
                <param>
                    tolerance tolerance below which points are considered identical                    
                </param>
                <return>
                    an interval set                    
                </return>
            </javadoc>
            <method name="buildIntervalSet" type="IntervalsSet" line="159">
                <params>
                    <param name="start" type="Vector2D"/>
                    <param name="end" type="Vector2D"/>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="line" type="Line" line="160"/>
            </method>
            <javadoc line="166">
                {@inheritDoc}                
            </javadoc>
            <method name="buildNew" type="AbstractSubHyperplane&lt;Euclidean2D,Euclidean1D&gt;" line="169">
                <params>
                    <param name="hyperplane" type="Hyperplane&lt;Euclidean2D&gt;"/>
                    <param name="remainingRegion" type="Region&lt;Euclidean1D&gt;"/>
                </params>
            </method>
            <javadoc line="173">
                {@inheritDoc}                
            </javadoc>
            <method name="side" type="Side" line="175">
                <params>
                    <param name="hyperplane" type="Hyperplane&lt;Euclidean2D&gt;"/>
                </params>
                <comment line="183">
                    the lines are parallel,                    
                </comment>
                <comment line="188">
                    the lines do intersect                    
                </comment>
                <declaration name="thisLine" type="Line" line="177"/>
                <declaration name="otherLine" type="Line" line="178"/>
                <declaration name="crossing" type="Vector2D" line="179"/>
                <scope line="181">
                    <declaration name="global" type="double" line="183"/>
                </scope>
                <declaration name="direct" type="boolean" line="188"/>
                <declaration name="x" type="Vector1D" line="189"/>
            </method>
            <javadoc line="194">
                {@inheritDoc}                
            </javadoc>
            <method name="split" type="SplitSubHyperplane&lt;Euclidean2D&gt;" line="196">
                <params>
                    <param name="hyperplane" type="Hyperplane&lt;Euclidean2D&gt;"/>
                </params>
                <comment line="205">
                    the lines are parallel                    
                </comment>
                <comment line="212">
                    the lines do intersect                    
                </comment>
                <declaration name="thisLine" type="Line" line="198"/>
                <declaration name="otherLine" type="Line" line="199"/>
                <declaration name="crossing" type="Vector2D" line="200"/>
                <declaration name="tolerance" type="double" line="201"/>
                <scope line="203">
                    <declaration name="global" type="double" line="205"/>
                </scope>
                <declaration name="direct" type="boolean" line="212"/>
                <declaration name="x" type="Vector1D" line="213"/>
                <declaration name="subPlus" type="SubHyperplane&amp;lt;Euclidean1D&amp;gt;" line="214"/>
                <declaration name="subMinus" type="SubHyperplane&amp;lt;Euclidean1D&amp;gt;" line="216"/>
                <declaration name="splitTree" type="BSPTree&amp;lt;Euclidean1D&amp;gt;" line="219"/>
                <declaration name="plusTree" type="BSPTree&amp;lt;Euclidean1D&amp;gt;" line="220"/>
                <declaration name="minusTree" type="BSPTree&amp;lt;Euclidean1D&amp;gt;" line="224"/>
            </method>
        </class>
    </source>