<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.io.PrintStream"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <class name="FastMathCalc" line="23">
            <comment line="34">
                1073741824L                
            </comment>
            <javadoc line="23">
                Class used to compute the classical functions tables.                
                <version>
                    $Id: FastMathCalc.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="HEX_40000000" type="long" line="29"/>
            <javadoc line="29">
                0x40000000 - used to split a double into two parts, both with the low order bits cleared.
                  Equivalent to 2^30.                
            </javadoc>
            <declaration name="FACT" type="double" line="35"/>
            <javadoc line="35">
                Factorial table, for Taylor series expansions. 0!, 1!, 2!, ... 19!                
            </javadoc>
            <declaration name="LN_SPLIT_COEF" type="double" line="60"/>
            <javadoc line="60">
                Coefficients for slowLog.                
            </javadoc>
            <declaration name="TABLE_START_DECL" type="String" line="80"/>
            <javadoc line="80">
                Table start declaration.                
            </javadoc>
            <declaration name="TABLE_END_DECL" type="String" line="83"/>
            <javadoc line="83">
                Table end declaration.                
            </javadoc>
            <javadoc line="86">
                Private Constructor.                
            </javadoc>
            <method name="FastMathCalc" type="constructor" line="89"/>
            <javadoc line="92">
                Build the sine and cosine tables.                
                <param>
                    SINE_TABLE_A table of the most significant part of the sines                    
                </param>
                <param>
                    SINE_TABLE_B table of the least significant part of the sines                    
                </param>
                <param>
                    COSINE_TABLE_A table of the most significant part of the cosines                    
                </param>
                <param>
                    COSINE_TABLE_B table of the most significant part of the cosines                    
                </param>
                <param>
                    SINE_TABLE_LEN length of the tables                    
                </param>
                <param>
                    TANGENT_TABLE_A table of the most significant part of the tangents                    
                </param>
                <param>
                    TANGENT_TABLE_B table of the most significant part of the tangents                    
                </param>
            </javadoc>
            <method name="buildSinCosTables" type="void" line="104">
                <params>
                    <param name="SINE_TABLE_A" type="double[]"/>
                    <param name="SINE_TABLE_B" type="double[]"/>
                    <param name="COSINE_TABLE_A" type="double[]"/>
                    <param name="COSINE_TABLE_B" type="double[]"/>
                    <param name="SINE_TABLE_LEN" type="int"/>
                    <param name="TANGENT_TABLE_A" type="double[]"/>
                    <param name="TANGENT_TABLE_B" type="double[]"/>
                </params>
                <comment line="108">
                                        
                </comment>
                <comment line="121">
                                        
                </comment>
                <comment line="130">
                    Even, use double angle                    
                </comment>
                <comment line="136">
                                        
                </comment>
                <comment line="141">
                                        
                </comment>
                <comment line="159">
                                        
                </comment>
                <comment line="166">
                                        
                </comment>
                <comment line="177">
                                        
                </comment>
                <declaration name="result" type="double" line="105"/>
                <scope line="108">
                    <declaration name="x" type="double" line="109"/>
                </scope>
                <scope line="121">
                    <declaration name="xs" type="double" line="122"/>
                    <declaration name="ys" type="double" line="123"/>
                    <declaration name="as" type="double" line="124"/>
                    <declaration name="bs" type="double" line="125"/>
                    <declaration name="temps" type="double" line="126"/>
                    <scope line="128"/>
                    <scope line="148"/>
                </scope>
                <scope line="177">
                    <declaration name="xs" type="double" line="178"/>
                    <declaration name="ys" type="double" line="179"/>
                    <declaration name="as" type="double" line="180"/>
                </scope>
            </method>
            <javadoc line="198">
                For x between 0 and pi/4 compute cosine using Talor series
                  cos(x) = 1 - x^2/2! + x^4/4! ...                
                <param>
                    x number from which cosine is requested                    
                </param>
                <param>
                    result placeholder where to put the result in extended precision
                      (may be null)                    
                </param>
                <return>
                    cos(x)                    
                </return>
            </javadoc>
            <method name="slowCos" type="double" line="206">
                <params>
                    <param name="x" type="double"/>
                    <param name="result" type="double"/>
                </params>
                <comment line="220">
                    skip odd entries                    
                </comment>
                <comment line="227">
                    alternate terms are negative                    
                </comment>
                <declaration name="xs" type="double" line="208"/>
                <declaration name="ys" type="double" line="209"/>
                <declaration name="facts" type="double" line="210"/>
                <declaration name="as" type="double" line="211"/>
                <scope line="215">
                    <scope line="219"/>
                    <scope line="226"/>
                </scope>
                <scope line="235"/>
            </method>
            <javadoc line="243">
                For x between 0 and pi/4 compute sine using Taylor expansion:
                  sin(x) = x - x^3/3! + x^5/5! - x^7/7! ...                
                <param>
                    x number from which sine is requested                    
                </param>
                <param>
                    result placeholder where to put the result in extended precision
                      (may be null)                    
                </param>
                <return>
                    sin(x)                    
                </return>
            </javadoc>
            <method name="slowSin" type="double" line="251">
                <params>
                    <param name="x" type="double"/>
                    <param name="result" type="double"/>
                </params>
                <comment line="264">
                    Ignore even numbers                    
                </comment>
                <comment line="271">
                    alternate terms are negative                    
                </comment>
                <declaration name="xs" type="double" line="252"/>
                <declaration name="ys" type="double" line="253"/>
                <declaration name="facts" type="double" line="254"/>
                <declaration name="as" type="double" line="255"/>
                <scope line="259">
                    <scope line="263"/>
                    <scope line="270"/>
                </scope>
                <scope line="279"/>
            </method>
            <javadoc line="288">
                For x between 0 and 1, returns exp(x), uses extended precision                
                <param>
                    x argument of exponential                    
                </param>
                <param>
                    result placeholder where to place exp(x) split in two terms
                      for extra precision (i.e. exp(x) = result[0] + result[1]                    
                </param>
                <return>
                    exp(x)                    
                </return>
            </javadoc>
            <method name="slowexp" type="double" line="295">
                <params>
                    <param name="x" type="double"/>
                    <param name="result" type="double"/>
                </params>
                <declaration name="xs" type="double" line="296"/>
                <declaration name="ys" type="double" line="297"/>
                <declaration name="facts" type="double" line="298"/>
                <declaration name="as" type="double" line="299"/>
                <scope line="303"/>
                <scope line="316"/>
            </method>
            <javadoc line="324">
                Compute split[0], split[1] such that their sum is equal to d,
                  and split[0] has its 30 least significant bits as zero.                
                <param>
                    d number to split                    
                </param>
                <param>
                    split placeholder where to place the result                    
                </param>
            </javadoc>
            <method name="split" type="void" line="329">
                <params>
                    <param name="d" type="double"/>
                    <param name="split" type="double"/>
                </params>
                <scope line="330">
                    <declaration name="a" type="double" line="331"/>
                </scope>
                <scope line="334">
                    <declaration name="a" type="double" line="335"/>
                </scope>
            </method>
            <javadoc line="341">
                Recompute a split.                
                <param>
                    a input/out array containing the split, changed
                      on output                    
                </param>
            </javadoc>
            <method name="resplit" type="void" line="345">
                <params>
                    <param name="a" type="double"/>
                </params>
                <comment line="350">
                    MAGIC NUMBER                    
                </comment>
                <declaration name="c" type="double" line="346"/>
                <declaration name="d" type="double" line="347"/>
                <scope line="349">
                    <declaration name="z" type="double" line="350"/>
                </scope>
                <scope line="353">
                    <declaration name="z" type="double" line="354"/>
                </scope>
            </method>
            <javadoc line="360">
                Multiply two numbers in split form.                
                <param>
                    a first term of multiplication                    
                </param>
                <param>
                    b second term of multiplication                    
                </param>
                <param>
                    ans placeholder where to put the result                    
                </param>
            </javadoc>
            <method name="splitMult" type="void" line="365">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="ans" type="double"/>
                </params>
                <comment line="370">
                                        
                </comment>
            </method>
            <javadoc line="373">
                Add two numbers in split form.                
                <param>
                    a first term of addition                    
                </param>
                <param>
                    b second term of addition                    
                </param>
                <param>
                    ans placeholder where to put the result                    
                </param>
            </javadoc>
            <method name="splitAdd" type="void" line="378">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="ans" type="double"/>
                </params>
            </method>
            <javadoc line="385">
                Compute the reciprocal of in.  Use the following algorithm.
                  in = c + d.
                  want to find x + y such that x+y = 1/(c+d) and x is much
                  larger than y and x has several zero bits on the right.
                  Set b = 1/(2^22),  a = 1 - b.  Thus (a+b) = 1.
                  Use following identity to compute (a+b)/(c+d)
                  (a+b)/(c+d)  =   a/c   +    (bc - ad) / (c^2 + cd)
                  set x = a/c  and y = (bc - ad) / (c^2 + cd)
                  This will be close to the right answer, but there will be
                  some rounding in the calculation of X.  So by carefully
                  computing 1 - (c+d)(x+y) we can compute an error and
                  add that back in.   This is done carefully so that terms
                  of similar size are subtracted first.                
                <param>
                    in initial number, in split form                    
                </param>
                <param>
                    result placeholder where to put the result                    
                </param>
            </javadoc>
            <method name="splitReciprocal" type="void" line="403">
                <params>
                    <param name="in" type="double"/>
                    <param name="result" type="double"/>
                </params>
                <comment line="416">
                    can happen if result[1] is NAN                    
                </comment>
                <comment line="420">
                                        
                </comment>
                <comment line="424">
                                        
                </comment>
                <comment line="427">
                                        
                </comment>
                <comment line="429">
                                        
                </comment>
                <declaration name="b" type="double" line="404"/>
                <declaration name="a" type="double" line="405"/>
                <scope line="407"/>
                <scope line="415"/>
                <scope line="422">
                    <declaration name="err" type="double" line="424"/>
                </scope>
            </method>
            <javadoc line="433">
                Compute (a[0] + a[1])  (b[0] + b[1]) in extended precision.                
                <param>
                    a first term of the multiplication                    
                </param>
                <param>
                    b second term of the multiplication                    
                </param>
                <param>
                    result placeholder where to put the result                    
                </param>
            </javadoc>
            <method name="quadMult" type="void" line="438">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="result" type="double"/>
                </params>
                <comment line="444">
                                        
                </comment>
                <comment line="452">
                                        
                </comment>
                <comment line="463">
                                        
                </comment>
                <comment line="475">
                                        
                </comment>
                <declaration name="xs" type="double" line="439"/>
                <declaration name="ys" type="double" line="440"/>
                <declaration name="zs" type="double" line="441"/>
                <declaration name="tmp" type="double" line="455"/>
            </method>
            <javadoc line="487">
                Compute exp(p) for a integer p in extended precision.                
                <param>
                    p integer whose exponential is requested                    
                </param>
                <param>
                    result placeholder where to put the result in extended precision                    
                </param>
                <return>
                    exp(p) in standard precision (equal to result[0] + result[1])                    
                </return>
            </javadoc>
            <method name="expint" type="double" line="492">
                <params>
                    <param name="p" type="int"/>
                    <param name="result" type="double"/>
                </params>
                <comment line="494">
                    double x = M_E;                    
                </comment>
                <comment line="498">
                    split(x, xs);
                    xs[1] = (double)(2.7182818284590452353602874713526625L - xs[0]);
                    xs[0] = 2.71827697753906250000;
                    xs[1] = 4.85091998273542816811e-06;
                    xs[0] = Double.longBitsToDouble(0x4005bf0800000000L);
                    xs[1] = Double.longBitsToDouble(0x3ed458a2bb4a9b00L);                    
                </comment>
                <comment line="505">
                                        
                </comment>
                <declaration name="xs" type="double" line="494"/>
                <declaration name="as" type="double" line="495"/>
                <declaration name="ys" type="double" line="496"/>
                <scope line="510">
                    <scope line="511"/>
                </scope>
                <scope line="522"/>
            </method>
            <javadoc line="531">
                xi in the range of [1, 2].
                  3        5        7
                  x+1           /          x        x        x          \
                  ln ----- =   2   |  x  +   ----  +  ----  +  ---- + ...  |
                  1-x           \          3        5        7          /
                  So, compute a Remez approximation of the following function
                  ln ((sqrt(x)+1)/(1-sqrt(x)))  /  x
                  This will be an even function with only positive coefficents.
                  x is in the range [0 - 1/3].
                  Transform xi for input to the above function by setting
                  x = (xi-1)/(xi+1).   Input to the polynomial is x^2, then
                  the result is multiplied by x.                
                <param>
                    xi number from which log is requested                    
                </param>
                <return>
                    log(xi)                    
                </return>
            </javadoc>
            <method name="slowLog" type="double[]" line="550">
                <params>
                    <param name="xi" type="double"/>
                </params>
                <comment line="559">
                                        
                </comment>
                <comment line="569">
                                        
                </comment>
                <comment line="573">
                    x[0] -= 1.0;
                    resplit(x);                    
                </comment>
                <declaration name="x" type="double" line="551"/>
                <declaration name="x2" type="double" line="552"/>
                <declaration name="y" type="double" line="553"/>
                <declaration name="a" type="double" line="554"/>
                <scope line="578"/>
            </method>
            <javadoc line="595">
                Print an array.                
                <param>
                    out text output stream where output should be printed                    
                </param>
                <param>
                    name array name                    
                </param>
                <param>
                    expectedLen expected length of the array                    
                </param>
                <param>
                    array2d array data                    
                </param>
            </javadoc>
            <method name="printarray" type="void" line="602">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="name" type="String"/>
                    <param name="expectedLen" type="int"/>
                    <param name="array2d" type="double[][]"/>
                </params>
                <comment line="608">
                    &quot;double array[]&quot; causes PMD parsing error                    
                </comment>
                <comment line="610">
                    assume inner array has very few entries                    
                </comment>
                <comment line="611">
                    multiple entries per line                    
                </comment>
                <declaration name="i" type="int" line="606"/>
                <scope line="607">
                    <scope line="609"/>
                </scope>
            </method>
            <javadoc line="617">
                Print an array.                
                <param>
                    out text output stream where output should be printed                    
                </param>
                <param>
                    name array name                    
                </param>
                <param>
                    expectedLen expected length of the array                    
                </param>
                <param>
                    array array data                    
                </param>
            </javadoc>
            <method name="printarray" type="void" line="624">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="name" type="String"/>
                    <param name="expectedLen" type="int"/>
                    <param name="array" type="double[]"/>
                </params>
                <comment line="630">
                    one entry per line                    
                </comment>
                <scope line="628"/>
            </method>
            <javadoc line="634">
                Format a double.                
                <param>
                    d double number to format                    
                </param>
                <return>
                    formatted number                    
                </return>
            </javadoc>
            <method name="format" type="String" line="638">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="639"/>
                <scope line="641"/>
            </method>
            <javadoc line="646">
                Check two lengths are equal.                
                <param>
                    expectedLen expected length                    
                </param>
                <param>
                    actual actual length                    
                </param>
                <exception>
                    DimensionMismatchException if the two lengths are not equal                    
                </exception>
            </javadoc>
            <method name="checkLen" type="void" line="653">
                <params>
                    <param name="expectedLen" type="int"/>
                    <param name="actual" type="int"/>
                </params>
                <scope line="654"/>
            </method>
        </class>
    </source>