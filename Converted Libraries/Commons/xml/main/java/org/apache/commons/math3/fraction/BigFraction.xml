<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.BigInteger"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="BigFraction" line="33">
            <extends class="Number"/>
            <implements interface="FieldElement">
                <type_params>
                    <type_param name="BigFraction"/>
                </type_params>
            </implements>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="BigFraction"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="33">
                Representation of a rational number without any overflow. This class is
                  immutable.                
                <version>
                    $Id: BigFraction.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="TWO" type="BigFraction" line="44"/>
            <javadoc line="44">
                A fraction representing &quot;2 / 1&quot;.                
            </javadoc>
            <declaration name="ONE" type="BigFraction" line="47"/>
            <javadoc line="47">
                A fraction representing &quot;1&quot;.                
            </javadoc>
            <declaration name="ZERO" type="BigFraction" line="50"/>
            <javadoc line="50">
                A fraction representing &quot;0&quot;.                
            </javadoc>
            <declaration name="MINUS_ONE" type="BigFraction" line="53"/>
            <javadoc line="53">
                A fraction representing &quot;-1 / 1&quot;.                
            </javadoc>
            <declaration name="FOUR_FIFTHS" type="BigFraction" line="56"/>
            <javadoc line="56">
                A fraction representing &quot;4/5&quot;.                
            </javadoc>
            <declaration name="ONE_FIFTH" type="BigFraction" line="59"/>
            <javadoc line="59">
                A fraction representing &quot;1/5&quot;.                
            </javadoc>
            <declaration name="ONE_HALF" type="BigFraction" line="62"/>
            <javadoc line="62">
                A fraction representing &quot;1/2&quot;.                
            </javadoc>
            <declaration name="ONE_QUARTER" type="BigFraction" line="65"/>
            <javadoc line="65">
                A fraction representing &quot;1/4&quot;.                
            </javadoc>
            <declaration name="ONE_THIRD" type="BigFraction" line="68"/>
            <javadoc line="68">
                A fraction representing &quot;1/3&quot;.                
            </javadoc>
            <declaration name="THREE_FIFTHS" type="BigFraction" line="71"/>
            <javadoc line="71">
                A fraction representing &quot;3/5&quot;.                
            </javadoc>
            <declaration name="THREE_QUARTERS" type="BigFraction" line="74"/>
            <javadoc line="74">
                A fraction representing &quot;3/4&quot;.                
            </javadoc>
            <declaration name="TWO_FIFTHS" type="BigFraction" line="77"/>
            <javadoc line="77">
                A fraction representing &quot;2/5&quot;.                
            </javadoc>
            <declaration name="TWO_QUARTERS" type="BigFraction" line="80"/>
            <javadoc line="80">
                A fraction representing &quot;2/4&quot;.                
            </javadoc>
            <declaration name="TWO_THIRDS" type="BigFraction" line="83"/>
            <javadoc line="83">
                A fraction representing &quot;2/3&quot;.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="86"/>
            <javadoc line="86">
                Serializable version identifier.                
            </javadoc>
            <declaration name="ONE_HUNDRED" type="BigInteger" line="89"/>
            <javadoc line="89">
                &lt;code&gt;BigInteger&lt;/code&gt; representation of 100.                
            </javadoc>
            <declaration name="numerator" type="BigInteger" line="92"/>
            <javadoc line="92">
                The numerator.                
            </javadoc>
            <declaration name="denominator" type="BigInteger" line="95"/>
            <javadoc line="95">
                The denominator.                
            </javadoc>
            <javadoc line="98">
                &lt;p&gt;
                  Create a {@link BigFraction} equivalent to the passed &lt;tt&gt;BigInteger&lt;/tt&gt;, ie
                  &quot;num / 1&quot;.
                  &lt;/p&gt;                
                <param>
                    numthe numerator.                    
                </param>
            </javadoc>
            <method name="BigFraction" type="constructor" line="107">
                <params>
                    <param name="num" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="111">
                Create a {@link BigFraction} given the numerator and denominator as{@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.                
                <param>
                    num the numerator, must not be {@code null}.                    
                </param>
                <param>
                    den the denominator, must not be {@code null}.                    
                </param>
                <throws>
                    ZeroException if the denominator is zero.                    
                </throws>
                <throws>
                    NullArgumentException if either of the arguments is null                    
                </throws>
            </javadoc>
            <method name="BigFraction" type="constructor" line="120">
                <params>
                    <param name="num" type="BigInteger"/>
                    <param name="den" type="BigInteger"/>
                </params>
                <comment line="132">
                    reduce numerator and denominator by greatest common denominator                    
                </comment>
                <comment line="139">
                    move sign to numerator                    
                </comment>
                <comment line="145">
                    store the values in the final fields                    
                </comment>
                <scope line="123"/>
                <scope line="126"/>
                <scope line="129">
                    <declaration name="gcd" type="BigInteger" line="132"/>
                    <scope line="133"/>
                    <scope line="139"/>
                </scope>
            </method>
            <javadoc line="151">
                Create a fraction given the double value.
                  &lt;p&gt;
                  This constructor behaves &lt;em&gt;differently&lt;/em&gt; from{@link #BigFraction(double,double,int)}. It converts the double value
                  exactly, considering its internal bits representation. This works for all
                  values except NaN and infinities and does not requires any loop or
                  convergence threshold.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Since this conversion is exact and since double numbers are sometimes
                  approximated, the fraction created may seem strange in some cases. For example,
                  calling &lt;code&gt;new BigFraction(1.0 / 3.0)&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; create
                  the fraction 1/3, but the fraction 6004799503160661 / 18014398509481984
                  because the double number passed to the constructor is not exactly 1/3
                  (this number cannot be stored exactly in IEEE754).
                  &lt;/p&gt;                
                <see>
                    #BigFraction(double,double,int)                    
                </see>
                <param>
                    value the double value to convert to a fraction.                    
                </param>
                <exception>
                    MathIllegalArgumentException if value is NaN or infinite                    
                </exception>
            </javadoc>
            <method name="BigFraction" type="constructor" line="172">
                <params>
                    <param name="value" type="double"/>
                </params>
                <comment line="181">
                    compute m and k such that value = m * 2^k                    
                </comment>
                <comment line="187">
                    this was a normalized number, add the implicit most significant bit                    
                </comment>
                <scope line="173"/>
                <scope line="176"/>
                <declaration name="bits" type="long" line="181"/>
                <declaration name="sign" type="long" line="182"/>
                <declaration name="exponent" type="long" line="183"/>
                <declaration name="m" type="long" line="184"/>
                <scope line="185"/>
                <scope line="189"/>
                <declaration name="k" type="int" line="192"/>
                <scope line="193"/>
                <scope line="198"/>
                <scope line="201"/>
            </method>
            <javadoc line="208">
                Create a fraction given the double value and maximum error allowed.
                  &lt;p&gt;
                  References:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/ContinuedFraction.html&quot;&gt;
                  Continued Fraction&lt;/a&gt; equations (11) and (22)-(26)&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    valuethe double value to convert to a fraction.                    
                </param>
                <param>
                    epsilonmaximum error allowed. The resulting fraction is within
                      &lt;code&gt;epsilon&lt;/code&gt; of &lt;code&gt;value&lt;/code&gt;, in absolute terms.                    
                </param>
                <param>
                    maxIterationsmaximum number of convergents.                    
                </param>
                <throws>
                    FractionConversionExceptionif the continued fraction failed to converge.                    
                </throws>
                <see>
                    #BigFraction(double)                    
                </see>
            </javadoc>
            <method name="BigFraction" type="constructor" line="231">
                <params>
                    <param name="value" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="235">
                Create a fraction given the double value and either the maximum error
                  allowed or the maximum number of denominator digits.
                  &lt;p&gt;
                  NOTE: This constructor is called with EITHER - a valid epsilon value and
                  the maxDenominator set to Integer.MAX_VALUE (that way the maxDenominator
                  has no effect). OR - a valid maxDenominator value and the epsilon value
                  set to zero (that way epsilon only has effect if there is an exact match
                  before the maxDenominator value is reached).
                  &lt;/p&gt;
                  &lt;p&gt;
                  It has been done this way so that the same code can be (re)used for both
                  scenarios. However this could be confusing to users if it were part of
                  the public API and this constructor should therefore remain PRIVATE.
                  &lt;/p&gt;
                  See JIRA issue ticket MATH-181 for more details:
                  https://issues.apache.org/jira/browse/MATH-181                
                <param>
                    valuethe double value to convert to a fraction.                    
                </param>
                <param>
                    epsilonmaximum error allowed. The resulting fraction is within
                      &lt;code&gt;epsilon&lt;/code&gt; of &lt;code&gt;value&lt;/code&gt;, in absolute terms.                    
                </param>
                <param>
                    maxDenominatormaximum denominator value allowed.                    
                </param>
                <param>
                    maxIterationsmaximum number of convergents.                    
                </param>
                <throws>
                    FractionConversionExceptionif the continued fraction failed to converge.                    
                </throws>
            </javadoc>
            <method name="BigFraction" type="constructor" line="271">
                <params>
                    <param name="value" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxDenominator" type="int"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <comment line="280">
                    check for (almost) integer arguments, which should not go
                     to iterations.                    
                </comment>
                <declaration name="overflow" type="long" line="272"/>
                <declaration name="r0" type="double" line="273"/>
                <declaration name="a0" type="long" line="274"/>
                <scope line="275"/>
                <scope line="281"/>
                <declaration name="p0" type="long" line="287"/>
                <declaration name="q0" type="long" line="288"/>
                <declaration name="p1" type="long" line="289"/>
                <declaration name="q1" type="long" line="290"/>
                <declaration name="p2" type="long" line="292"/>
                <declaration name="q2" type="long" line="293"/>
                <declaration name="n" type="int" line="295"/>
                <declaration name="stop" type="boolean" line="296"/>
                <scope line="297">
                    <declaration name="r1" type="double" line="299"/>
                    <declaration name="a1" type="long" line="300"/>
                    <scope line="303"/>
                    <declaration name="convergent" type="double" line="307"/>
                    <scope line="310"/>
                    <scope line="317"/>
                </scope>
                <scope line="322"/>
                <scope line="326"/>
                <scope line="329"/>
            </method>
            <javadoc line="335">
                Create a fraction given the double value and maximum denominator.
                  &lt;p&gt;
                  References:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/ContinuedFraction.html&quot;&gt;
                  Continued Fraction&lt;/a&gt; equations (11) and (22)-(26)&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    valuethe double value to convert to a fraction.                    
                </param>
                <param>
                    maxDenominatorThe maximum allowed value for denominator.                    
                </param>
                <throws>
                    FractionConversionExceptionif the continued fraction failed to converge.                    
                </throws>
            </javadoc>
            <method name="BigFraction" type="constructor" line="353">
                <params>
                    <param name="value" type="double"/>
                    <param name="maxDenominator" type="int"/>
                </params>
            </method>
            <javadoc line="357">
                &lt;p&gt;
                  Create a {@link BigFraction} equivalent to the passed &lt;tt&gt;int&lt;/tt&gt;, ie
                  &quot;num / 1&quot;.
                  &lt;/p&gt;                
                <param>
                    numthe numerator.                    
                </param>
            </javadoc>
            <method name="BigFraction" type="constructor" line="366">
                <params>
                    <param name="num" type="int"/>
                </params>
            </method>
            <javadoc line="370">
                &lt;p&gt;
                  Create a {@link BigFraction} given the numerator and denominator as simple
                  &lt;tt&gt;int&lt;/tt&gt;. The {@link BigFraction} is reduced to lowest terms.
                  &lt;/p&gt;                
                <param>
                    numthe numerator.                    
                </param>
                <param>
                    denthe denominator.                    
                </param>
            </javadoc>
            <method name="BigFraction" type="constructor" line="381">
                <params>
                    <param name="num" type="int"/>
                    <param name="den" type="int"/>
                </params>
            </method>
            <javadoc line="385">
                &lt;p&gt;
                  Create a {@link BigFraction} equivalent to the passed long, ie &quot;num / 1&quot;.
                  &lt;/p&gt;                
                <param>
                    numthe numerator.                    
                </param>
            </javadoc>
            <method name="BigFraction" type="constructor" line="393">
                <params>
                    <param name="num" type="long"/>
                </params>
            </method>
            <javadoc line="397">
                &lt;p&gt;
                  Create a {@link BigFraction} given the numerator and denominator as simple
                  &lt;tt&gt;long&lt;/tt&gt;. The {@link BigFraction} is reduced to lowest terms.
                  &lt;/p&gt;                
                <param>
                    numthe numerator.                    
                </param>
                <param>
                    denthe denominator.                    
                </param>
            </javadoc>
            <method name="BigFraction" type="constructor" line="408">
                <params>
                    <param name="num" type="long"/>
                    <param name="den" type="long"/>
                </params>
            </method>
            <javadoc line="412">
                &lt;p&gt;
                  Creates a &lt;code&gt;BigFraction&lt;/code&gt; instance with the 2 parts of a fraction
                  Y/Z.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Any negative signs are resolved to be on the numerator.
                  &lt;/p&gt;                
                <param>
                    numeratorthe numerator, for example the three in &apos;three sevenths&apos;.                    
                </param>
                <param>
                    denominatorthe denominator, for example the seven in &apos;three sevenths&apos;.                    
                </param>
                <return>
                    a new fraction instance, with the numerator and denominator
                      reduced.                    
                </return>
                <throws>
                    ArithmeticExceptionif the denominator is &lt;code&gt;zero&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="getReducedFraction" type="BigFraction" line="432">
                <params>
                    <param name="numerator" type="int"/>
                    <param name="denominator" type="int"/>
                </params>
                <comment line="435">
                    normalize zero.                    
                </comment>
                <scope line="433"/>
            </method>
            <javadoc line="440">
                &lt;p&gt;
                  Returns the absolute value of this {@link BigFraction}.
                  &lt;/p&gt;                
                <return>
                    the absolute value as a {@link BigFraction}.                    
                </return>
            </javadoc>
            <method name="abs" type="BigFraction" line="447"/>
            <javadoc line="451">
                &lt;p&gt;
                  Adds the value of this fraction to the passed {@link BigInteger},
                  returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    bgthe {@link BigInteger} to add, must&apos;nt be &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    a &lt;code&gt;BigFraction&lt;/code&gt; instance with the resulting values.                    
                </return>
                <throws>
                    NullArgumentExceptionif the {@link BigInteger} is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="add" type="BigFraction" line="463">
                <params>
                    <param name="bg" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="468">
                &lt;p&gt;
                  Adds the value of this fraction to the passed &lt;tt&gt;integer&lt;/tt&gt;, returning
                  the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    ithe &lt;tt&gt;integer&lt;/tt&gt; to add.                    
                </param>
                <return>
                    a &lt;code&gt;BigFraction&lt;/code&gt; instance with the resulting values.                    
                </return>
            </javadoc>
            <method name="add" type="BigFraction" line="478">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="482">
                &lt;p&gt;
                  Adds the value of this fraction to the passed &lt;tt&gt;long&lt;/tt&gt;, returning
                  the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    lthe &lt;tt&gt;long&lt;/tt&gt; to add.                    
                </param>
                <return>
                    a &lt;code&gt;BigFraction&lt;/code&gt; instance with the resulting values.                    
                </return>
            </javadoc>
            <method name="add" type="BigFraction" line="492">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="496">
                &lt;p&gt;
                  Adds the value of this fraction to another, returning the result in
                  reduced form.
                  &lt;/p&gt;                
                <param>
                    fractionthe {@link BigFraction} to add, must not be &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    a {@link BigFraction} instance with the resulting values.                    
                </return>
                <throws>
                    NullArgumentException if the {@link BigFraction} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="add" type="BigFraction" line="507">
                <params>
                    <param name="fraction" type="BigFraction"/>
                </params>
                <scope line="508"/>
                <scope line="511"/>
                <declaration name="num" type="BigInteger" line="515"/>
                <declaration name="den" type="BigInteger" line="516"/>
                <scope line="518"/>
                <scope line="521"/>
            </method>
            <javadoc line="529">
                &lt;p&gt;
                  Gets the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt;. This calculates the
                  fraction as the numerator divided by denominator.
                  &lt;/p&gt;                
                <return>
                    the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt;.                    
                </return>
                <throws>
                    ArithmeticExceptionif the exact quotient does not have a terminating decimal
                      expansion.                    
                </throws>
                <see>
                    BigDecimal                    
                </see>
            </javadoc>
            <method name="bigDecimalValue" type="BigDecimal" line="541"/>
            <javadoc line="545">
                &lt;p&gt;
                  Gets the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt; following the passed
                  rounding mode. This calculates the fraction as the numerator divided by
                  denominator.
                  &lt;/p&gt;                
                <param>
                    roundingModerounding mode to apply. see {@link BigDecimal} constants.                    
                </param>
                <return>
                    the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt;.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif &lt;tt&gt;roundingMode&lt;/tt&gt; does not represent a valid rounding
                      mode.                    
                </throws>
                <see>
                    BigDecimal                    
                </see>
            </javadoc>
            <method name="bigDecimalValue" type="BigDecimal" line="560">
                <params>
                    <param name="roundingMode" type="int"/>
                </params>
            </method>
            <javadoc line="564">
                &lt;p&gt;
                  Gets the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt; following the passed scale
                  and rounding mode. This calculates the fraction as the numerator divided
                  by denominator.
                  &lt;/p&gt;                
                <param>
                    scalescale of the &lt;code&gt;BigDecimal&lt;/code&gt; quotient to be returned.
                      see {@link BigDecimal} for more information.                    
                </param>
                <param>
                    roundingModerounding mode to apply. see {@link BigDecimal} constants.                    
                </param>
                <return>
                    the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt;.                    
                </return>
                <see>
                    BigDecimal                    
                </see>
            </javadoc>
            <method name="bigDecimalValue" type="BigDecimal" line="579">
                <params>
                    <param name="scale" type="int"/>
                    <param name="roundingMode" type="int"/>
                </params>
            </method>
            <javadoc line="583">
                &lt;p&gt;
                  Compares this object to another based on size.
                  &lt;/p&gt;                
                <param>
                    objectthe object to compare to, must not be &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    -1 if this is less than &lt;tt&gt;object&lt;/tt&gt;, +1 if this is greater
                      than &lt;tt&gt;object&lt;/tt&gt;, 0 if they are equal.                    
                </return>
                <see>
                    java.lang.Comparable#compareTo(java.lang.Object)                    
                </see>
            </javadoc>
            <method name="compareTo" type="int" line="594">
                <params>
                    <param name="object" type="BigFraction"/>
                </params>
                <declaration name="nOd" type="BigInteger" line="595"/>
                <declaration name="dOn" type="BigInteger" line="596"/>
            </method>
            <javadoc line="600">
                &lt;p&gt;
                  Divide the value of this fraction by the passed {@code BigInteger},
                  ie {@code this  1 / bg}, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    bg the {@code BigInteger} to divide by, must not be {@code null}                    
                </param>
                <return>
                    a {@link BigFraction} instance with the resulting values                    
                </return>
                <throws>
                    NullArgumentException if the {@code BigInteger} is {@code null}                    
                </throws>
                <throws>
                    MathArithmeticException if the fraction to divide by is zero                    
                </throws>
            </javadoc>
            <method name="divide" type="BigFraction" line="611">
                <params>
                    <param name="bg" type="BigInteger"/>
                </params>
                <scope line="612"/>
                <scope line="615"/>
            </method>
            <javadoc line="621">
                &lt;p&gt;
                  Divide the value of this fraction by the passed {@code int}, ie{@code this  1 / i}, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    i the {@code int} to divide by                    
                </param>
                <return>
                    a {@link BigFraction} instance with the resulting values                    
                </return>
                <throws>
                    MathArithmeticException if the fraction to divide by is zero                    
                </throws>
            </javadoc>
            <method name="divide" type="BigFraction" line="631">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="635">
                &lt;p&gt;
                  Divide the value of this fraction by the passed {@code long}, ie{@code this  1 / l}, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    l the {@code long} to divide by                    
                </param>
                <return>
                    a {@link BigFraction} instance with the resulting values                    
                </return>
                <throws>
                    MathArithmeticException if the fraction to divide by is zero                    
                </throws>
            </javadoc>
            <method name="divide" type="BigFraction" line="645">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="649">
                &lt;p&gt;
                  Divide the value of this fraction by another, returning the result in
                  reduced form.
                  &lt;/p&gt;                
                <param>
                    fraction Fraction to divide by, must not be {@code null}.                    
                </param>
                <return>
                    a {@link BigFraction} instance with the resulting values.                    
                </return>
                <throws>
                    NullArgumentException if the {@code fraction} is {@code null}.                    
                </throws>
                <throws>
                    MathArithmeticException if the fraction to divide by is zero                    
                </throws>
            </javadoc>
            <method name="divide" type="BigFraction" line="660">
                <params>
                    <param name="fraction" type="BigFraction"/>
                </params>
                <scope line="661"/>
                <scope line="664"/>
            </method>
            <javadoc line="671">
                &lt;p&gt;
                  Gets the fraction as a &lt;tt&gt;double&lt;/tt&gt;. This calculates the fraction as
                  the numerator divided by denominator.
                  &lt;/p&gt;                
                <return>
                    the fraction as a &lt;tt&gt;double&lt;/tt&gt;                    
                </return>
                <see>
                    java.lang.Number#doubleValue()                    
                </see>
            </javadoc>
            <method name="doubleValue" type="double" line="681">
                <comment line="685">
                    Numerator and/or denominator must be out of range:
                     Calculate how far to shift them to put them in range.                    
                </comment>
                <declaration name="result" type="double" line="682"/>
                <scope line="683">
                    <declaration name="shift" type="int" line="686"/>
                </scope>
            </method>
            <javadoc line="694">
                &lt;p&gt;
                  Test for the equality of two fractions. If the lowest term numerator and
                  denominators are the same for both fractions, the two fractions are
                  considered to be equal.
                  &lt;/p&gt;                
                <param>
                    otherfraction to test for equality to this fraction, can be
                      &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    true if two fractions are equal, false if object is
                      &lt;code&gt;null&lt;/code&gt;, not an instance of {@link BigFraction}, or not
                      equal to this fraction instance.                    
                </return>
                <see>
                    java.lang.Object#equals(java.lang.Object)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="710">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <declaration name="ret" type="boolean" line="711"/>
                <scope line="713"/>
                <scope line="715">
                    <declaration name="rhs" type="BigFraction" line="716"/>
                    <declaration name="thisOne" type="BigFraction" line="717"/>
                </scope>
            </method>
            <javadoc line="724">
                &lt;p&gt;
                  Gets the fraction as a &lt;tt&gt;float&lt;/tt&gt;. This calculates the fraction as
                  the numerator divided by denominator.
                  &lt;/p&gt;                
                <return>
                    the fraction as a &lt;tt&gt;float&lt;/tt&gt;.                    
                </return>
                <see>
                    java.lang.Number#floatValue()                    
                </see>
            </javadoc>
            <method name="floatValue" type="float" line="734">
                <comment line="738">
                    Numerator and/or denominator must be out of range:
                     Calculate how far to shift them to put them in range.                    
                </comment>
                <declaration name="result" type="float" line="735"/>
                <scope line="736">
                    <declaration name="shift" type="int" line="739"/>
                </scope>
            </method>
            <javadoc line="747">
                &lt;p&gt;
                  Access the denominator as a &lt;code&gt;BigInteger&lt;/code&gt;.
                  &lt;/p&gt;                
                <return>
                    the denominator as a &lt;code&gt;BigInteger&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getDenominator" type="BigInteger" line="754"/>
            <javadoc line="758">
                &lt;p&gt;
                  Access the denominator as a &lt;tt&gt;int&lt;/tt&gt;.
                  &lt;/p&gt;                
                <return>
                    the denominator as a &lt;tt&gt;int&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="getDenominatorAsInt" type="int" line="765"/>
            <javadoc line="769">
                &lt;p&gt;
                  Access the denominator as a &lt;tt&gt;long&lt;/tt&gt;.
                  &lt;/p&gt;                
                <return>
                    the denominator as a &lt;tt&gt;long&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="getDenominatorAsLong" type="long" line="776"/>
            <javadoc line="780">
                &lt;p&gt;
                  Access the numerator as a &lt;code&gt;BigInteger&lt;/code&gt;.
                  &lt;/p&gt;                
                <return>
                    the numerator as a &lt;code&gt;BigInteger&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getNumerator" type="BigInteger" line="787"/>
            <javadoc line="791">
                &lt;p&gt;
                  Access the numerator as a &lt;tt&gt;int&lt;/tt&gt;.
                  &lt;/p&gt;                
                <return>
                    the numerator as a &lt;tt&gt;int&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="getNumeratorAsInt" type="int" line="798"/>
            <javadoc line="802">
                &lt;p&gt;
                  Access the numerator as a &lt;tt&gt;long&lt;/tt&gt;.
                  &lt;/p&gt;                
                <return>
                    the numerator as a &lt;tt&gt;long&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="getNumeratorAsLong" type="long" line="809"/>
            <javadoc line="813">
                &lt;p&gt;
                  Gets a hashCode for the fraction.
                  &lt;/p&gt;                
                <return>
                    a hash code value for this object.                    
                </return>
                <see>
                    java.lang.Object#hashCode()                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="822"/>
            <javadoc line="826">
                &lt;p&gt;
                  Gets the fraction as an &lt;tt&gt;int&lt;/tt&gt;. This returns the whole number part
                  of the fraction.
                  &lt;/p&gt;                
                <return>
                    the whole number fraction part.                    
                </return>
                <see>
                    java.lang.Number#intValue()                    
                </see>
            </javadoc>
            <method name="intValue" type="int" line="836"/>
            <javadoc line="840">
                &lt;p&gt;
                  Gets the fraction as a &lt;tt&gt;long&lt;/tt&gt;. This returns the whole number part
                  of the fraction.
                  &lt;/p&gt;                
                <return>
                    the whole number fraction part.                    
                </return>
                <see>
                    java.lang.Number#longValue()                    
                </see>
            </javadoc>
            <method name="longValue" type="long" line="850"/>
            <javadoc line="854">
                &lt;p&gt;
                  Multiplies the value of this fraction by the passed
                  &lt;code&gt;BigInteger&lt;/code&gt;, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    bg the {@code BigInteger} to multiply by.                    
                </param>
                <return>
                    a {@code BigFraction} instance with the resulting values.                    
                </return>
                <throws>
                    NullArgumentException if {@code bg} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="multiply" type="BigFraction" line="864">
                <params>
                    <param name="bg" type="BigInteger"/>
                </params>
                <scope line="865"/>
            </method>
            <javadoc line="871">
                &lt;p&gt;
                  Multiply the value of this fraction by the passed &lt;tt&gt;int&lt;/tt&gt;, returning
                  the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    ithe &lt;tt&gt;int&lt;/tt&gt; to multiply by.                    
                </param>
                <return>
                    a {@link BigFraction} instance with the resulting values.                    
                </return>
            </javadoc>
            <method name="multiply" type="BigFraction" line="881">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="885">
                &lt;p&gt;
                  Multiply the value of this fraction by the passed &lt;tt&gt;long&lt;/tt&gt;,
                  returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    lthe &lt;tt&gt;long&lt;/tt&gt; to multiply by.                    
                </param>
                <return>
                    a {@link BigFraction} instance with the resulting values.                    
                </return>
            </javadoc>
            <method name="multiply" type="BigFraction" line="895">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="899">
                &lt;p&gt;
                  Multiplies the value of this fraction by another, returning the result in
                  reduced form.
                  &lt;/p&gt;                
                <param>
                    fraction Fraction to multiply by, must not be {@code null}.                    
                </param>
                <return>
                    a {@link BigFraction} instance with the resulting values.                    
                </return>
                <throws>
                    NullArgumentException if {@code fraction} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="multiply" type="BigFraction" line="909">
                <params>
                    <param name="fraction" type="BigFraction"/>
                </params>
                <scope line="910"/>
                <scope line="914"/>
            </method>
            <javadoc line="921">
                &lt;p&gt;
                  Return the additive inverse of this fraction, returning the result in
                  reduced form.
                  &lt;/p&gt;                
                <return>
                    the negation of this fraction.                    
                </return>
            </javadoc>
            <method name="negate" type="BigFraction" line="929"/>
            <javadoc line="933">
                &lt;p&gt;
                  Gets the fraction percentage as a &lt;tt&gt;double&lt;/tt&gt;. This calculates the
                  fraction as the numerator divided by denominator multiplied by 100.
                  &lt;/p&gt;                
                <return>
                    the fraction percentage as a &lt;tt&gt;double&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="percentageValue" type="double" line="941"/>
            <javadoc line="945">
                &lt;p&gt;
                  Returns a {@code BigFraction} whose value is{@code (this&lt;sup&gt;exponent&lt;/sup&gt;)}, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    exponentexponent to which this {@code BigFraction} is to be
                      raised.                    
                </param>
                <return>
                    &lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt;&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="pow" type="BigFraction" line="956">
                <params>
                    <param name="exponent" type="int"/>
                </params>
                <scope line="957"/>
            </method>
            <javadoc line="963">
                &lt;p&gt;
                  Returns a &lt;code&gt;BigFraction&lt;/code&gt; whose value is
                  &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/tt&gt;, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    exponentexponent to which this &lt;code&gt;BigFraction&lt;/code&gt; is to be raised.                    
                </param>
                <return>
                    &lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt;&lt;/tt&gt; as a &lt;code&gt;BigFraction&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="pow" type="BigFraction" line="973">
                <params>
                    <param name="exponent" type="long"/>
                </params>
                <scope line="974"/>
            </method>
            <javadoc line="982">
                &lt;p&gt;
                  Returns a &lt;code&gt;BigFraction&lt;/code&gt; whose value is
                  &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/tt&gt;, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    exponentexponent to which this &lt;code&gt;BigFraction&lt;/code&gt; is to be raised.                    
                </param>
                <return>
                    &lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt;&lt;/tt&gt; as a &lt;code&gt;BigFraction&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="pow" type="BigFraction" line="992">
                <params>
                    <param name="exponent" type="BigInteger"/>
                </params>
                <scope line="993">
                    <declaration name="eNeg" type="BigInteger" line="994"/>
                </scope>
            </method>
            <javadoc line="1002">
                &lt;p&gt;
                  Returns a &lt;code&gt;double&lt;/code&gt; whose value is
                  &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/tt&gt;, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    exponentexponent to which this &lt;code&gt;BigFraction&lt;/code&gt; is to be raised.                    
                </param>
                <return>
                    &lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt;&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <method name="pow" type="double" line="1012">
                <params>
                    <param name="exponent" type="double"/>
                </params>
            </method>
            <javadoc line="1017">
                &lt;p&gt;
                  Return the multiplicative inverse of this fraction.
                  &lt;/p&gt;                
                <return>
                    the reciprocal fraction.                    
                </return>
            </javadoc>
            <method name="reciprocal" type="BigFraction" line="1024"/>
            <javadoc line="1028">
                &lt;p&gt;
                  Reduce this &lt;code&gt;BigFraction&lt;/code&gt; to its lowest terms.
                  &lt;/p&gt;                
                <return>
                    the reduced &lt;code&gt;BigFraction&lt;/code&gt;. It doesn&apos;t change anything if
                      the fraction can be reduced.                    
                </return>
            </javadoc>
            <method name="reduce" type="BigFraction" line="1036">
                <declaration name="gcd" type="BigInteger" line="1037"/>
            </method>
            <javadoc line="1041">
                &lt;p&gt;
                  Subtracts the value of an {@link BigInteger} from the value of this{@code BigFraction}, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    bg the {@link BigInteger} to subtract, cannot be {@code null}.                    
                </param>
                <return>
                    a {@code BigFraction} instance with the resulting values.                    
                </return>
                <throws>
                    NullArgumentException if the {@link BigInteger} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="BigFraction" line="1051">
                <params>
                    <param name="bg" type="BigInteger"/>
                </params>
                <scope line="1052"/>
            </method>
            <javadoc line="1058">
                &lt;p&gt;
                  Subtracts the value of an {@code integer} from the value of this{@code BigFraction}, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    i the {@code integer} to subtract.                    
                </param>
                <return>
                    a {@code BigFraction} instance with the resulting values.                    
                </return>
            </javadoc>
            <method name="subtract" type="BigFraction" line="1067">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="1071">
                &lt;p&gt;
                  Subtracts the value of a {@code long} from the value of this{@code BigFraction}, returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    l the {@code long} to subtract.                    
                </param>
                <return>
                    a {@code BigFraction} instance with the resulting values.                    
                </return>
            </javadoc>
            <method name="subtract" type="BigFraction" line="1080">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="1084">
                &lt;p&gt;
                  Subtracts the value of another fraction from the value of this one,
                  returning the result in reduced form.
                  &lt;/p&gt;                
                <param>
                    fraction {@link BigFraction} to subtract, must not be {@code null}.                    
                </param>
                <return>
                    a {@link BigFraction} instance with the resulting values                    
                </return>
                <throws>
                    NullArgumentException if the {@code fraction} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="BigFraction" line="1094">
                <params>
                    <param name="fraction" type="BigFraction"/>
                </params>
                <scope line="1095"/>
                <scope line="1098"/>
                <declaration name="num" type="BigInteger" line="1102"/>
                <declaration name="den" type="BigInteger" line="1103"/>
                <scope line="1104"/>
                <scope line="1107"/>
            </method>
            <javadoc line="1115">
                &lt;p&gt;
                  Returns the &lt;code&gt;String&lt;/code&gt; representing this fraction, ie
                  &quot;num / dem&quot; or just &quot;num&quot; if the denominator is one.
                  &lt;/p&gt;                
                <return>
                    a string representation of the fraction.                    
                </return>
                <see>
                    java.lang.Object#toString()                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="1125">
                <declaration name="str" type="String" line="1126"/>
                <scope line="1127"/>
                <scope line="1129"/>
                <scope line="1131"/>
            </method>
            <javadoc line="1137">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="BigFractionField" line="1138"/>
        </class>
    </source>