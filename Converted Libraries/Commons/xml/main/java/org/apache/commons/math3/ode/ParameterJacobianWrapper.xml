<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode">
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <class name="ParameterJacobianWrapper" line="8">
            <implements interface="ParameterJacobianProvider"/>
            <javadoc line="8">
                Wrapper class to compute Jacobian matrices by finite differences for ODE
                  which do not compute them by themselves.                
                <version>
                    $Id: ParameterJacobianWrapper.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="fode" type="FirstOrderDifferentialEquations" line="15"/>
            <javadoc line="15">
                Main ODE set.                
            </javadoc>
            <declaration name="pode" type="ParameterizedODE" line="19"/>
            <javadoc line="19">
                Raw ODE without Jacobian computation skill to be wrapped into a ParameterJacobianProvider.                
            </javadoc>
            <declaration name="hParam" type="Map&lt;String,Double&gt;" line="23"/>
            <javadoc line="23">
                Steps for finite difference computation of the Jacobian df/dp w.r.t. parameters.                
            </javadoc>
            <javadoc line="27">
                Wrap a {@link ParameterizedODE} into a {@link ParameterJacobianProvider}.                
                <param>
                    fode main first order differential equations set                    
                </param>
                <param>
                    pode secondary problem, without parameter Jacobian computation skill                    
                </param>
                <param>
                    paramsAndSteps parameters and steps to compute the Jacobians df/dp                    
                </param>
                <see>
                    JacobianMatrices#setParameterStep(String,double)                    
                </see>
            </javadoc>
            <method name="ParameterJacobianWrapper" type="constructor" line="34">
                <params>
                    <param name="fode" type="FirstOrderDifferentialEquations"/>
                    <param name="pode" type="ParameterizedODE"/>
                    <param name="paramsAndSteps" type="ParameterConfiguration[]"/>
                </params>
                <scope line="38">
                    <declaration name="name" type="String" line="39"/>
                    <scope line="40"/>
                </scope>
            </method>
            <javadoc line="45">
                {@inheritDoc}                
            </javadoc>
            <method name="getParametersNames" type="Collection<String>" line="48"/>
            <javadoc line="51">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupported" type="boolean" line="54">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="57">
                {@inheritDoc}                
            </javadoc>
            <method name="computeParameterJacobian" type="void" line="60">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                    <param name="yDot" type="double[]"/>
                    <param name="paramName" type="String"/>
                    <param name="dFdP" type="double[]"/>
                </params>
                <declaration name="n" type="int" line="61"/>
                <scope line="62">
                    <declaration name="tmpDot" type="double[]" line="63"/>
                    <declaration name="p" type="double" line="64"/>
                    <declaration name="hP" type="double" line="65"/>
                    <scope line="68"/>
                </scope>
                <scope line="73"/>
            </method>
        </class>
    </source>