<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet.sofm">
        <import package="java.util.Collection"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="org.apache.commons.math3.ml.neuralnet.Network"/>
        <import package="org.apache.commons.math3.ml.neuralnet.MapUtils"/>
        <import package="org.apache.commons.math3.ml.neuralnet.Neuron"/>
        <import package="org.apache.commons.math3.ml.neuralnet.UpdateAction"/>
        <import package="org.apache.commons.math3.ml.distance.DistanceMeasure"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.analysis.function.Gaussian"/>
        <class name="KohonenUpdateAction" line="31">
            <implements interface="UpdateAction"/>
            <javadoc line="31">
                Update formula for &lt;a href=&quot;http://en.wikipedia.org/wiki/Kohonen&quot;&gt;
                  Kohonen&apos;s Self-Organizing Map&lt;/a&gt;.
                  &lt;br/&gt;
                  The {@link #update(Network,double[]) update} method modifies the
                  features {@code w} of the &quot;winning&quot; neuron and its neighbours
                  according to the following rule:
                  &lt;code&gt;
                  w&lt;sub&gt;new&lt;/sub&gt; = w&lt;sub&gt;old&lt;/sub&gt; + &amp;alpha; e&lt;sup&gt;(-d / &amp;sigma;)&lt;/sup&gt;  (sample - w&lt;sub&gt;old&lt;/sub&gt;)
                  &lt;/code&gt;
                  where
                  &lt;ul&gt;
                  &lt;li&gt;&amp;alpha; is the current &lt;em&gt;learning rate&lt;/em&gt;, &lt;/li&gt;
                  &lt;li&gt;&amp;sigma; is the current &lt;em&gt;neighbourhood size&lt;/em&gt;, and&lt;/li&gt;
                  &lt;li&gt;{@code d} is the number of links to traverse in order to reach
                  the neuron from the winning neuron.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;br/&gt;
                  This class is thread-safe as long as the arguments passed to the{@link #KohonenUpdateAction(DistanceMeasure,LearningFactorFunction,NeighbourhoodSizeFunction) constructor} are instances of thread-safe
                  classes.
                  &lt;br/&gt;
                  Each call to the {@link #update(Network,double[]) update} method
                  will increment the internal counter used to compute the current
                  values for
                  &lt;ul&gt;
                  &lt;li&gt;the &lt;em&gt;learning rate&lt;/em&gt;, and&lt;/li&gt;
                  &lt;li&gt;the &lt;em&gt;neighbourhood size&lt;/em&gt;.&lt;/li&gt;
                  &lt;/ul&gt;
                  Consequently, the function instances that compute those values (passed
                  to the constructor of this class) must take into account whether this
                  class&apos;s instance will be shared by multiple threads, as this will impact
                  the training process.                
                <version>
                    $Id: KohonenUpdateAction.java 1566092 2014-02-08 18:48:29Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="distance" type="DistanceMeasure" line="70"/>
            <javadoc line="70">
                Distance function.                
            </javadoc>
            <declaration name="learningFactor" type="LearningFactorFunction" line="72"/>
            <javadoc line="72">
                Learning factor update function.                
            </javadoc>
            <declaration name="neighbourhoodSize" type="NeighbourhoodSizeFunction" line="74"/>
            <javadoc line="74">
                Neighbourhood size update function.                
            </javadoc>
            <declaration name="numberOfCalls" type="AtomicLong" line="76"/>
            <javadoc line="76">
                Number of calls to {@link #update(Network,double[])}.                
            </javadoc>
            <javadoc line="79">
                @param distance Distance function.                
                <param>
                    learningFactor Learning factor update function.                    
                </param>
                <param>
                    neighbourhoodSize Neighbourhood size update function.                    
                </param>
            </javadoc>
            <method name="KohonenUpdateAction" type="constructor" line="86">
                <params>
                    <param name="distance" type="DistanceMeasure"/>
                    <param name="learningFactor" type="LearningFactorFunction"/>
                    <param name="neighbourhoodSize" type="NeighbourhoodSizeFunction"/>
                </params>
            </method>
            <javadoc line="92">
                {@inheritDoc}                
            </javadoc>
            <method name="update" type="void" line="96">
                <params>
                    <param name="net" type="Network"/>
                    <param name="features" type="double[]"/>
                </params>
                <comment line="105">
                    The farther away the neighbour is from the winning neuron, the
                     smaller the learning rate will become.                    
                </comment>
                <comment line="113">
                    Initial set of neurons only contains the winning neuron.                    
                </comment>
                <comment line="116">
                    Winning neuron must be excluded from the neighbours.                    
                </comment>
                <comment line="122">
                    Retrieve immediate neighbours of the current set of neurons.                    
                </comment>
                <comment line="125">
                    Update all the neighbours.                    
                </comment>
                <comment line="130">
                    Add the neighbours to the exclude list so that they will
                     not be update more than once per training step.                    
                </comment>
                <declaration name="numCalls" type="long" line="97"/>
                <declaration name="currentLearning" type="double" line="98"/>
                <declaration name="best" type="Neuron" line="99"/>
                <declaration name="currentNeighbourhood" type="int" line="103"/>
                <declaration name="neighbourhoodDecay" type="Gaussian" line="106"/>
                <scope line="111">
                    <declaration name="neighbours" type="Collection&amp;lt;Neuron&amp;gt;" line="113"/>
                    <declaration name="exclude" type="HashSet&amp;lt;Neuron&amp;gt;" line="116"/>
                    <declaration name="radius" type="int" line="119"/>
                    <scope line="120">
                        <scope line="125"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="137">
                Retrieves the number of calls to the {@link #update(Network,double[]) update}method.                
                <return>
                    the current number of calls.                    
                </return>
            </javadoc>
            <method name="getNumberOfCalls" type="long" line="143"/>
            <javadoc line="147">
                Atomically updates the given neuron.                
                <param>
                    n Neuron to be updated.                    
                </param>
                <param>
                    features Training data.                    
                </param>
                <param>
                    learningRate Learning factor.                    
                </param>
            </javadoc>
            <method name="updateNeighbouringNeuron" type="void" line="156">
                <params>
                    <param name="n" type="Neuron"/>
                    <param name="features" type="double[]"/>
                    <param name="learningRate" type="double"/>
                </params>
                <scope line="157">
                    <declaration name="expect" type="double[]" line="158"/>
                    <declaration name="update" type="double[]" line="159"/>
                    <scope line="162"/>
                </scope>
            </method>
            <javadoc line="168">
                Searches for the neuron whose features are closest to the given
                  sample, and atomically updates its features.                
                <param>
                    net Network.                    
                </param>
                <param>
                    features Sample data.                    
                </param>
                <param>
                    learningRate Current learning factor.                    
                </param>
                <return>
                    the winning neuron.                    
                </return>
            </javadoc>
            <method name="findAndUpdateBestNeuron" type="Neuron" line="179">
                <params>
                    <param name="net" type="Network"/>
                    <param name="features" type="double[]"/>
                    <param name="learningRate" type="double"/>
                </params>
                <comment line="192">
                    If another thread modified the state of the winning neuron,
                     it may not be the best match anymore for the given training
                     sample: Hence, the winner search is performed again.                    
                </comment>
                <scope line="180">
                    <declaration name="best" type="Neuron" line="181"/>
                    <declaration name="expect" type="double[]" line="183"/>
                    <declaration name="update" type="double[]" line="184"/>
                    <scope line="187"/>
                </scope>
            </method>
            <javadoc line="197">
                Computes the new value of the features set.                
                <param>
                    current Current values of the features.                    
                </param>
                <param>
                    sample Training data.                    
                </param>
                <param>
                    learningRate Learning factor.                    
                </param>
                <return>
                    the new values for the features.                    
                </return>
            </javadoc>
            <method name="computeFeatures" type="double[]" line="207">
                <params>
                    <param name="current" type="double[]"/>
                    <param name="sample" type="double[]"/>
                    <param name="learningRate" type="double"/>
                </params>
                <comment line="211">
                    c + learningRate * (s - c)                    
                </comment>
                <declaration name="c" type="ArrayRealVector" line="208"/>
                <declaration name="s" type="ArrayRealVector" line="209"/>
            </method>
        </class>
    </source>