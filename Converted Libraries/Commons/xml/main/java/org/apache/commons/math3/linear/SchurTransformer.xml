<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SchurTransformer" line="6">
            <javadoc line="6">
                Class transforming a general real matrix to Schur form.
                  &lt;p&gt;A m &amp;times; m matrix A can be written as the product of three matrices: A = P
                  &amp;times; T &amp;times; P&lt;sup&gt;T&lt;/sup&gt; with P an orthogonal matrix and T an quasi-triangular
                  matrix. Both P and T are m &amp;times; m matrices.&lt;/p&gt;
                  &lt;p&gt;Transformation to Schur form is often not a goal by itself, but it is an
                  intermediate step in more general decomposition algorithms like{@link EigenDecomposition eigen decomposition}. This class is therefore
                  intended for internal use by the library and is not public. As a consequence
                  of this explicitly limited scope, many methods directly returns references to
                  internal arrays, not copies.&lt;/p&gt;
                  &lt;p&gt;This class is based on the method hqr2 in class EigenvalueDecomposition
                  from the &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; library.&lt;/p&gt;                
                <see>
                    <a href="http://mathworld.wolfram.com/SchurDecomposition.html">Schur Decomposition - MathWorld</a>                    
                </see>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Schur_decomposition">Schur Decomposition - Wikipedia</a>                    
                </see>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Householder_transformation">Householder Transformations</a>                    
                </see>
                <version>
                    $Id: SchurTransformer.java 1389129 2012-09-23 19:34:02Z tn $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="MAX_ITERATIONS" type="int" line="25"/>
            <javadoc line="25">
                Maximum allowed iterations for convergence of the transformation.                
            </javadoc>
            <declaration name="matrixP" type="double" line="29"/>
            <javadoc line="29">
                P matrix.                
            </javadoc>
            <declaration name="matrixT" type="double" line="33"/>
            <javadoc line="33">
                T matrix.                
            </javadoc>
            <declaration name="cachedP" type="RealMatrix" line="37"/>
            <javadoc line="37">
                Cached value of P.                
            </javadoc>
            <declaration name="cachedT" type="RealMatrix" line="41"/>
            <javadoc line="41">
                Cached value of T.                
            </javadoc>
            <declaration name="cachedPt" type="RealMatrix" line="45"/>
            <javadoc line="45">
                Cached value of PT.                
            </javadoc>
            <declaration name="epsilon" type="double" line="49"/>
            <javadoc line="49">
                Epsilon criteria taken from JAMA code (originally was 2^-52).                
            </javadoc>
            <javadoc line="53">
                Build the transformation to Schur form of a general real matrix.                
                <param>
                    matrix matrix to transform                    
                </param>
                <throws>
                    NonSquareMatrixException if the matrix is not square                    
                </throws>
            </javadoc>
            <method name="SchurTransformer" type="constructor" line="58">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <scope line="59"/>
                <declaration name="transformer" type="HessenbergTransformer" line="62"/>
            </method>
            <javadoc line="70">
                Returns the matrix P of the transform.
                  &lt;p&gt;P is an orthogonal matrix, i.e. its inverse is also its transpose.&lt;/p&gt;                
                <return>
                    the P matrix                    
                </return>
            </javadoc>
            <method name="getP" type="RealMatrix" line="75">
                <scope line="76"/>
            </method>
            <javadoc line="81">
                Returns the transpose of the matrix P of the transform.
                  &lt;p&gt;P is an orthogonal matrix, i.e. its inverse is also its transpose.&lt;/p&gt;                
                <return>
                    the transpose of the P matrix                    
                </return>
            </javadoc>
            <method name="getPT" type="RealMatrix" line="86">
                <scope line="87"/>
            </method>
            <javadoc line="92">
                Returns the quasi-triangular Schur matrix T of the transform.                
                <return>
                    the T matrix                    
                </return>
            </javadoc>
            <method name="getT" type="RealMatrix" line="96">
                <scope line="97"/>
            </method>
            <javadoc line="102">
                Transform original matrix to Schur form.                
                <throws>
                    MaxCountExceededException if the transformation does not converge                    
                </throws>
            </javadoc>
            <method name="transform" type="void" line="106">
                <declaration name="n" type="int" line="107"/>
                <declaration name="norm" type="double" line="108"/>
                <declaration name="shift" type="ShiftInfo" line="109"/>
                <declaration name="iteration" type="int" line="110"/>
                <declaration name="iu" type="int" line="111"/>
                <scope line="112">
                    <declaration name="il" type="int" line="113"/>
                    <scope line="114"/>
                    <scope line="119">
                        <declaration name="p" type="double" line="120"/>
                        <declaration name="q" type="double" line="121"/>
                        <scope line="124">
                            <declaration name="z" type="double" line="125"/>
                            <scope line="126"/>
                            <scope line="129"/>
                            <declaration name="x" type="double" line="132"/>
                            <declaration name="s" type="double" line="133"/>
                            <declaration name="r" type="double" line="136"/>
                            <scope line="139"/>
                            <scope line="144"/>
                            <scope line="149"/>
                        </scope>
                    </scope>
                    <scope line="158">
                        <scope line="160"/>
                        <declaration name="hVec" type="double[]" line="163"/>
                        <declaration name="im" type="int" line="164"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="169">
                Computes the L1 norm of the (quasi-)triangular matrix T.                
                <return>
                    the L1 norm of matrix T                    
                </return>
            </javadoc>
            <method name="getNorm" type="double" line="173">
                <declaration name="norm" type="double" line="174"/>
                <scope line="175">
                    <scope line="176"/>
                </scope>
            </method>
            <javadoc line="182">
                Find the first small sub-diagonal element and returns its index.                
                <param>
                    startIdx the starting index for the search                    
                </param>
                <param>
                    norm the L1 norm of the matrix                    
                </param>
                <return>
                    the index of the first small sub-diagonal element                    
                </return>
            </javadoc>
            <method name="findSmallSubDiagonalElement" type="int" line="188">
                <params>
                    <param name="startIdx" type="int"/>
                    <param name="norm" type="double"/>
                </params>
                <declaration name="l" type="int" line="189"/>
                <scope line="190">
                    <declaration name="s" type="double" line="191"/>
                    <scope line="192"/>
                    <scope line="195"/>
                </scope>
            </method>
            <javadoc line="202">
                Compute the shift for the current iteration.                
                <param>
                    l the index of the small sub-diagonal element                    
                </param>
                <param>
                    idx the current eigenvalue index                    
                </param>
                <param>
                    iteration the current iteration                    
                </param>
                <param>
                    shift holder for shift information                    
                </param>
            </javadoc>
            <method name="computeShift" type="void" line="209">
                <params>
                    <param name="l" type="int"/>
                    <param name="idx" type="int"/>
                    <param name="iteration" type="int"/>
                    <param name="shift" type="ShiftInfo"/>
                </params>
                <scope line="212"/>
                <scope line="216">
                    <scope line="218"/>
                    <declaration name="s" type="double" line="221"/>
                </scope>
                <scope line="226">
                    <declaration name="s" type="double" line="227"/>
                    <scope line="229">
                        <scope line="231"/>
                        <scope line="235"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="243">
                Initialize the householder vectors for the QR step.                
                <param>
                    il the index of the small sub-diagonal element                    
                </param>
                <param>
                    iu the current eigenvalue index                    
                </param>
                <param>
                    shift shift information holder                    
                </param>
                <param>
                    hVec the initial houseHolder vector                    
                </param>
                <return>
                    the start index for the QR step                    
                </return>
            </javadoc>
            <method name="initQRStep" type="int" line="251">
                <params>
                    <param name="il" type="int"/>
                    <param name="iu" type="int"/>
                    <param name="shift" type="ShiftInfo"/>
                    <param name="hVec" type="double[]"/>
                </params>
                <declaration name="im" type="int" line="252"/>
                <scope line="253">
                    <declaration name="z" type="double" line="254"/>
                    <declaration name="r" type="double" line="255"/>
                    <declaration name="s" type="double" line="256"/>
                    <scope line="260"/>
                    <declaration name="lhs" type="double" line="263"/>
                    <declaration name="rhs" type="double" line="264"/>
                    <scope line="265"/>
                </scope>
            </method>
            <javadoc line="272">
                Perform a double QR step involving rows l:idx and columns m:n                
                <param>
                    il the index of the small sub-diagonal element                    
                </param>
                <param>
                    im the start index for the QR step                    
                </param>
                <param>
                    iu the current eigenvalue index                    
                </param>
                <param>
                    shift shift information holder                    
                </param>
                <param>
                    hVec the initial houseHolder vector                    
                </param>
            </javadoc>
            <method name="performDoubleQRStep" type="void" line="280">
                <params>
                    <param name="il" type="int"/>
                    <param name="im" type="int"/>
                    <param name="iu" type="int"/>
                    <param name="shift" type="ShiftInfo"/>
                    <param name="hVec" type="double[]"/>
                </params>
                <declaration name="n" type="int" line="281"/>
                <declaration name="p" type="double" line="282"/>
                <declaration name="q" type="double" line="283"/>
                <declaration name="r" type="double" line="284"/>
                <scope line="285">
                    <declaration name="notlast" type="boolean" line="286"/>
                    <scope line="287">
                        <scope line="292"/>
                    </scope>
                    <scope line="298"/>
                    <declaration name="s" type="double" line="301"/>
                    <scope line="302"/>
                    <scope line="305">
                        <scope line="306"/>
                        <scope line="309"/>
                        <declaration name="z" type="double" line="315"/>
                        <scope line="318">
                            <scope line="320"/>
                        </scope>
                        <scope line="327">
                            <scope line="329"/>
                        </scope>
                        <declaration name="high" type="int" line="336"/>
                        <scope line="337">
                            <scope line="339"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="348">
                    <scope line="350"/>
                </scope>
            </method>
            <class name="ShiftInfo" line="355">
                <javadoc line="355">
                    Internal data structure holding the current shift information.
                      Contains variable names as present in the original JAMA code.                    
                </javadoc>
                <declaration name="x" type="double" line="360"/>
                <javadoc line="360">
                    x shift info                    
                </javadoc>
                <declaration name="y" type="double" line="364"/>
                <javadoc line="364">
                    y shift info                    
                </javadoc>
                <declaration name="w" type="double" line="368"/>
                <javadoc line="368">
                    w shift info                    
                </javadoc>
                <declaration name="exShift" type="double" line="372"/>
                <javadoc line="372">
                    Indicates an exceptional shift.                    
                </javadoc>
            </class>
        </class>
    </source>