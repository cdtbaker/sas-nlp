<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="HessenbergTransformer" line="4">
            <javadoc line="4">
                Class transforming a general real matrix to Hessenberg form.
                  &lt;p&gt;A m &amp;times; m matrix A can be written as the product of three matrices: A = P
                  &amp;times; H &amp;times; P&lt;sup&gt;T&lt;/sup&gt; with P an orthogonal matrix and H a Hessenberg
                  matrix. Both P and H are m &amp;times; m matrices.&lt;/p&gt;
                  &lt;p&gt;Transformation to Hessenberg form is often not a goal by itself, but it is an
                  intermediate step in more general decomposition algorithms like{@link EigenDecomposition eigen decomposition}. This class is therefore
                  intended for internal use by the library and is not public. As a consequence
                  of this explicitly limited scope, many methods directly returns references to
                  internal arrays, not copies.&lt;/p&gt;
                  &lt;p&gt;This class is based on the method orthes in class EigenvalueDecomposition
                  from the &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; library.&lt;/p&gt;                
                <see>
                    <a href="http://mathworld.wolfram.com/HessenbergDecomposition.html">MathWorld</a>                    
                </see>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Householder_transformation">Householder Transformations</a>                    
                </see>
                <version>
                    $Id: HessenbergTransformer.java 1334644 2012-05-06 14:33:32Z tn $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="householderVectors" type="double" line="22"/>
            <javadoc line="22">
                Householder vectors.                
            </javadoc>
            <declaration name="ort" type="double" line="26"/>
            <javadoc line="26">
                Temporary storage vector.                
            </javadoc>
            <declaration name="cachedP" type="RealMatrix" line="30"/>
            <javadoc line="30">
                Cached value of P.                
            </javadoc>
            <declaration name="cachedPt" type="RealMatrix" line="34"/>
            <javadoc line="34">
                Cached value of Pt.                
            </javadoc>
            <declaration name="cachedH" type="RealMatrix" line="38"/>
            <javadoc line="38">
                Cached value of H.                
            </javadoc>
            <javadoc line="42">
                Build the transformation to Hessenberg form of a general matrix.                
                <param>
                    matrix matrix to transform                    
                </param>
                <throws>
                    NonSquareMatrixException if the matrix is not square                    
                </throws>
            </javadoc>
            <method name="HessenbergTransformer" type="constructor" line="47">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <scope line="48"/>
                <declaration name="m" type="int" line="51"/>
            </method>
            <javadoc line="59">
                Returns the matrix P of the transform.
                  &lt;p&gt;P is an orthogonal matrix, i.e. its inverse is also its transpose.&lt;/p&gt;                
                <return>
                    the P matrix                    
                </return>
            </javadoc>
            <method name="getP" type="RealMatrix" line="64">
                <scope line="65">
                    <declaration name="n" type="int" line="66"/>
                    <declaration name="high" type="int" line="67"/>
                    <declaration name="pa" type="double[][]" line="68"/>
                    <scope line="69">
                        <scope line="70"/>
                    </scope>
                    <scope line="74">
                        <scope line="75">
                            <scope line="76"/>
                            <scope line="79">
                                <declaration name="g" type="double" line="80"/>
                                <scope line="81"/>
                                <scope line="85"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="95">
                Returns the transpose of the matrix P of the transform.
                  &lt;p&gt;P is an orthogonal matrix, i.e. its inverse is also its transpose.&lt;/p&gt;                
                <return>
                    the transpose of the P matrix                    
                </return>
            </javadoc>
            <method name="getPT" type="RealMatrix" line="100">
                <scope line="101"/>
            </method>
            <javadoc line="106">
                Returns the Hessenberg matrix H of the transform.                
                <return>
                    the H matrix                    
                </return>
            </javadoc>
            <method name="getH" type="RealMatrix" line="110">
                <scope line="111">
                    <declaration name="m" type="int" line="112"/>
                    <declaration name="h" type="double[][]" line="113"/>
                    <scope line="114">
                        <scope line="115"/>
                        <scope line="118"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="126">
                Get the Householder vectors of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use, it returns
                  directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the main diagonal elements of the B matrix                    
                </return>
            </javadoc>
            <method name="getHouseholderVectorsRef" type="double[][]" line="132"/>
            <javadoc line="135">
                Transform original matrix to Hessenberg form.
                  &lt;p&gt;Transformation is done using Householder transforms.&lt;/p&gt;                
            </javadoc>
            <method name="transform" type="void" line="139">
                <declaration name="n" type="int" line="140"/>
                <declaration name="high" type="int" line="141"/>
                <scope line="142">
                    <declaration name="scale" type="double" line="143"/>
                    <scope line="144"/>
                    <scope line="147">
                        <declaration name="h" type="double" line="148"/>
                        <scope line="149"/>
                        <declaration name="g" type="double" line="153"/>
                        <scope line="156">
                            <declaration name="f" type="double" line="157"/>
                            <scope line="158"/>
                            <scope line="162"/>
                        </scope>
                        <scope line="166">
                            <declaration name="f" type="double" line="167"/>
                            <scope line="168"/>
                            <scope line="172"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>