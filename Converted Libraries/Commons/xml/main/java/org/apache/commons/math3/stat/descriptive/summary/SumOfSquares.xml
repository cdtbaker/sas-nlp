<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.summary">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="SumOfSquares" line="26">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <javadoc line="26">
                Returns the sum of the squares of the available values.
                  &lt;p&gt;
                  If there are no values in the dataset, then 0 is returned.
                  If any of the values are
                  &lt;code&gt;NaN&lt;/code&gt;, then &lt;code&gt;NaN&lt;/code&gt; is returned.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <version>
                    $Id: SumOfSquares.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <javadoc line="42">
                Serializable version identifier                
            </javadoc>
            <declaration name="n" type="long" line="45"/>
            <javadoc line="45">
                                
            </javadoc>
            <declaration name="value" type="double" line="48"/>
            <javadoc line="48">
                The currently running sumSq                
            </javadoc>
            <javadoc line="53">
                Create a SumOfSquares instance                
            </javadoc>
            <method name="SumOfSquares" type="constructor" line="56"/>
            <javadoc line="61">
                Copy constructor, creates a new {@code SumOfSquares} identical
                  to the {@code original}                
                <param>
                    original the {@code SumOfSquares} instance to copy                    
                </param>
                <throws>
                    NullArgumentException if original is null                    
                </throws>
            </javadoc>
            <method name="SumOfSquares" type="constructor" line="68">
                <params>
                    <param name="original" type="SumOfSquares"/>
                </params>
            </method>
            <javadoc line="72">
                {@inheritDoc}                
            </javadoc>
            <method name="increment" type="void" line="76">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="81">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="85"/>
            <javadoc line="89">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="92"/>
            <javadoc line="96">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="100"/>
            <javadoc line="105">
                Returns the sum of the squares of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the sum of the squares of the values or 0 if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="121">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="sumSq" type="double" line="122"/>
                <scope line="123">
                    <scope line="125"/>
                </scope>
            </method>
            <javadoc line="132">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="SumOfSquares" line="136">
                <comment line="138">
                    no try-catch or advertised exception here because args are valid                    
                </comment>
                <declaration name="result" type="SumOfSquares" line="137"/>
            </method>
            <javadoc line="143">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source SumOfSquares to copy                    
                </param>
                <param>
                    dest SumOfSquares to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="152">
                <params>
                    <param name="source" type="SumOfSquares"/>
                    <param name="dest" type="SumOfSquares"/>
                </params>
            </method>
        </class>
    </source>