<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.summary">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.stat.descriptive.WeightedEvaluation"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Product" line="9">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <implements interface="WeightedEvaluation"/>
            <javadoc line="9">
                Returns the product of the available values.
                  &lt;p&gt;
                  If there are no values in the dataset, then 1 is returned.
                  If any of the values are
                  &lt;code&gt;NaN&lt;/code&gt;, then &lt;code&gt;NaN&lt;/code&gt; is returned.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <version>
                    $Id: Product.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="23"/>
            <javadoc line="23">
                Serializable version identifier                
            </javadoc>
            <declaration name="n" type="long" line="27"/>
            <javadoc line="27">
                The number of values that have been added                
            </javadoc>
            <declaration name="value" type="double" line="31"/>
            <javadoc line="31">
                The current Running Product.                
            </javadoc>
            <javadoc line="35">
                Create a Product instance                
            </javadoc>
            <method name="Product" type="constructor" line="38"/>
            <javadoc line="42">
                Copy constructor, creates a new {@code Product} identical
                  to the {@code original}                
                <param>
                    original the {@code Product} instance to copy                    
                </param>
                <throws>
                    NullArgumentException  if original is null                    
                </throws>
            </javadoc>
            <method name="Product" type="constructor" line="48">
                <params>
                    <param name="original" type="Product"/>
                </params>
            </method>
            <javadoc line="51">
                {@inheritDoc}                
            </javadoc>
            <method name="increment" type="void" line="54">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="58">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="61"/>
            <javadoc line="64">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="67"/>
            <javadoc line="70">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="73"/>
            <javadoc line="77">
                Returns the product of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the product of the values or 1 if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="90">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="product" type="double" line="91"/>
                <scope line="92">
                    <scope line="94"/>
                </scope>
            </method>
            <javadoc line="100">
                &lt;p&gt;Returns the weighted product of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.&lt;/p&gt;
                  &lt;p&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                  &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                  &lt;li&gt;the weights array is null&lt;/li&gt;
                  &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                  &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                  &lt;li&gt;the start and length arguments do not determine a valid array&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;Uses the formula, &lt;pre&gt;
                  weighted product = &amp;prod;values[i]&lt;sup&gt;weights[i]&lt;/sup&gt;
                  &lt;/pre&gt;
                  that is, the weights are applied as exponents when computing the weighted product.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    weights the weights array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the product of the values or 1 if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="evaluate" type="double" line="125">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="weights" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="product" type="double" line="126"/>
                <scope line="127">
                    <scope line="129"/>
                </scope>
            </method>
            <javadoc line="135">
                &lt;p&gt;Returns the weighted product of the entries in the input array.&lt;/p&gt;
                  &lt;p&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                  &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                  &lt;li&gt;the weights array is null&lt;/li&gt;
                  &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                  &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;Uses the formula, &lt;pre&gt;
                  weighted product = &amp;prod;values[i]&lt;sup&gt;weights[i]&lt;/sup&gt;
                  &lt;/pre&gt;
                  that is, the weights are applied as exponents when computing the weighted product.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    weights the weights array                    
                </param>
                <return>
                    the product of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="evaluate" type="double" line="155">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="weights" type="double[]"/>
                </params>
            </method>
            <javadoc line="158">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="Product" line="161">
                <declaration name="result" type="Product" line="162"/>
            </method>
            <javadoc line="166">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source Product to copy                    
                </param>
                <param>
                    dest Product to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="173">
                <params>
                    <param name="source" type="Product"/>
                    <param name="dest" type="Product"/>
                </params>
            </method>
        </class>
    </source>