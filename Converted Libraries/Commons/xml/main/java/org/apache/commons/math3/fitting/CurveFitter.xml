<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.ModelFunction"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.Target"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.Weight"/>
        <class name="CurveFitter" line="15">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="15">
                Fitter for parametric univariate real functions y = f(x).
                  &lt;br/&gt;
                  When a univariate real function y = f(x) does depend on some
                  unknown parameters p&lt;sub&gt;0&lt;/sub&gt;, p&lt;sub&gt;1&lt;/sub&gt; ... p&lt;sub&gt;n-1&lt;/sub&gt;,
                  this class can be used to find these parameters. It does this
                  by &lt;em&gt;fitting&lt;/em&gt; the curve so it remains very close to a set of
                  observed points (x&lt;sub&gt;0&lt;/sub&gt;, y&lt;sub&gt;0&lt;/sub&gt;), (x&lt;sub&gt;1&lt;/sub&gt;,
                  y&lt;sub&gt;1&lt;/sub&gt;) ... (x&lt;sub&gt;k-1&lt;/sub&gt;, y&lt;sub&gt;k-1&lt;/sub&gt;). This fitting
                  is done by finding the parameters values that minimizes the objective
                  function &amp;sum;(y&lt;sub&gt;i&lt;/sub&gt;-f(x&lt;sub&gt;i&lt;/sub&gt;))&lt;sup&gt;2&lt;/sup&gt;. This is
                  really a least squares problem.                
                <param>
                    <T>
                      Function to use for the fit.                    
                </param>
                <version>
                    $Id: CurveFitter.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="optimizer" type="MultivariateVectorOptimizer" line="33"/>
            <javadoc line="33">
                Optimizer to use for the fitting.                
            </javadoc>
            <declaration name="observations" type="List&lt;WeightedObservedPoint&gt;" line="37"/>
            <javadoc line="37">
                Observed points.                
            </javadoc>
            <javadoc line="41">
                Simple constructor.                
                <param>
                    optimizer Optimizer to use for the fitting.                    
                </param>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="CurveFitter" type="constructor" line="46">
                <params>
                    <param name="optimizer" type="MultivariateVectorOptimizer"/>
                </params>
            </method>
            <javadoc line="50">
                Add an observed (x,y) point to the sample with unit weight.
                  &lt;p&gt;Calling this method is equivalent to call{@code addObservedPoint(1.0, x, y)}.&lt;/p&gt;                
                <param>
                    x abscissa of the point                    
                </param>
                <param>
                    y observed value of the point at x, after fitting we should
                      have f(x) as close as possible to this value                    
                </param>
                <see>
                    #addObservedPoint(double,double,double)                    
                </see>
                <see>
                    #addObservedPoint(WeightedObservedPoint)                    
                </see>
                <see>
                    #getObservations()                    
                </see>
            </javadoc>
            <method name="addObservedPoint" type="void" line="60">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="63">
                Add an observed weighted (x,y) point to the sample.                
                <param>
                    weight weight of the observed point in the fit                    
                </param>
                <param>
                    x abscissa of the point                    
                </param>
                <param>
                    y observed value of the point at x, after fitting we should
                      have f(x) as close as possible to this value                    
                </param>
                <see>
                    #addObservedPoint(double,double)                    
                </see>
                <see>
                    #addObservedPoint(WeightedObservedPoint)                    
                </see>
                <see>
                    #getObservations()                    
                </see>
            </javadoc>
            <method name="addObservedPoint" type="void" line="73">
                <params>
                    <param name="weight" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="76">
                Add an observed weighted (x,y) point to the sample.                
                <param>
                    observed observed point to add                    
                </param>
                <see>
                    #addObservedPoint(double,double)                    
                </see>
                <see>
                    #addObservedPoint(double,double,double)                    
                </see>
                <see>
                    #getObservations()                    
                </see>
            </javadoc>
            <method name="addObservedPoint" type="void" line="83">
                <params>
                    <param name="observed" type="WeightedObservedPoint"/>
                </params>
            </method>
            <javadoc line="86">
                Get the observed points.                
                <return>
                    observed points                    
                </return>
                <see>
                    #addObservedPoint(double,double)                    
                </see>
                <see>
                    #addObservedPoint(double,double,double)                    
                </see>
                <see>
                    #addObservedPoint(WeightedObservedPoint)                    
                </see>
            </javadoc>
            <method name="getObservations" type="WeightedObservedPoint[]" line="93"/>
            <javadoc line="96">
                Remove all observations.                
            </javadoc>
            <method name="clearObservations" type="void" line="99"/>
            <javadoc line="102">
                Fit a curve.
                  This method compute the coefficients of the curve that best
                  fit the sample of observed points previously given through calls
                  to the {@link #addObservedPoint(WeightedObservedPoint)addObservedPoint} method.                
                <param>
                    f parametric function to fit.                    
                </param>
                <param>
                    initialGuess first guess of the function parameters.                    
                </param>
                <return>
                    the fitted parameters.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.                    
                </throws>
            </javadoc>
            <method name="fit" type="double[]" line="112">
                <params>
                    <param name="f" type="T"/>
                    <param name="initialGuess" type="double[]"/>
                </params>
            </method>
            <javadoc line="115">
                Fit a curve.
                  This method compute the coefficients of the curve that best
                  fit the sample of observed points previously given through calls
                  to the {@link #addObservedPoint(WeightedObservedPoint)addObservedPoint} method.                
                <param>
                    f parametric function to fit.                    
                </param>
                <param>
                    initialGuess first guess of the function parameters.                    
                </param>
                <param>
                    maxEval Maximum number of function evaluations.                    
                </param>
                <return>
                    the fitted parameters.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the number of allowed evaluations is exceeded.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.                    
                </throws>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="fit" type="double[]" line="128">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="T"/>
                    <param name="initialGuess" type="double[]"/>
                </params>
                <declaration name="target" type="double[]" line="129"/>
                <declaration name="weights" type="double[]" line="130"/>
                <declaration name="i" type="int" line="131"/>
                <scope line="132"/>
                <declaration name="model" type="TheoreticalValuesFunction" line="137"/>
                <declaration name="optimum" type="PointVectorValuePair" line="138"/>
            </method>
            <class name="TheoreticalValuesFunction" line="141">
                <javadoc line="141">
                    Vectorial function computing function theoretical values.                    
                </javadoc>
                <declaration name="f" type="ParametricUnivariateFunction" line="145"/>
                <javadoc line="145">
                    Function to fit.                    
                </javadoc>
                <javadoc line="149">
                    @param f function to fit.                    
                </javadoc>
                <method name="TheoreticalValuesFunction" type="constructor" line="152">
                    <params>
                        <param name="f" type="ParametricUnivariateFunction"/>
                    </params>
                </method>
                <javadoc line="155">
                    @return the model function values.                    
                </javadoc>
                <method name="getModelFunction" type="ModelFunction" line="158">
                    <anonymous_class line="159">
                        <javadoc line="160">
                            {@inheritDoc}                            
                        </javadoc>
                        <method name="value" type="double[]" line="163">
                            <params>
                                <param name="point" type="double[]"/>
                            </params>
                            <declaration name="values" type="double[]" line="164"/>
                            <declaration name="i" type="int" line="165"/>
                            <scope line="166"/>
                        </method>
                    </anonymous_class>
                </method>
                <javadoc line="174">
                    @return the model function Jacobian.                    
                </javadoc>
                <method name="getModelFunctionJacobian" type="ModelFunctionJacobian" line="177">
                    <anonymous_class line="178">
                        <method name="value" type="double[][]" line="179">
                            <params>
                                <param name="point" type="double[]"/>
                            </params>
                            <declaration name="jacobian" type="double[][]" line="180"/>
                            <declaration name="i" type="int" line="181"/>
                            <scope line="182"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
        </class>
    </source>