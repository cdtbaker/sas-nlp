<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.regression">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.LUDecomposition"/>
        <import package="org.apache.commons.math3.linear.QRDecomposition"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.stat.StatUtils"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.SecondMoment"/>
        <class name="OLSMultipleLinearRegression" line="28">
            <extends class="AbstractMultipleLinearRegression"/>
            <javadoc line="28">
                &lt;p&gt;Implements ordinary least squares (OLS) to estimate the parameters of a
                  multiple linear regression model.&lt;/p&gt;
                  &lt;p&gt;The regression coefficients, &lt;code&gt;b&lt;/code&gt;, satisfy the normal equations:
                  &lt;pre&gt;&lt;code&gt; X&lt;sup&gt;T&lt;/sup&gt; X b = X&lt;sup&gt;T&lt;/sup&gt; y &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;To solve the normal equations, this implementation uses QR decomposition
                  of the &lt;code&gt;X&lt;/code&gt; matrix. (See {@link QRDecomposition} for details on the
                  decomposition algorithm.) The &lt;code&gt;X&lt;/code&gt; matrix, also known as the &lt;i&gt;design matrix,&lt;/i&gt;
                  has rows corresponding to sample observations and columns corresponding to independent
                  variables.  When the model is estimated using an intercept term (i.e. when{@link #isNoIntercept() isNoIntercept} is false as it is by default), the &lt;code&gt;X&lt;/code&gt;
                  matrix includes an initial column identically equal to 1.  We solve the normal equations
                  as follows:
                  &lt;pre&gt;&lt;code&gt; X&lt;sup&gt;T&lt;/sup&gt;X b = X&lt;sup&gt;T&lt;/sup&gt; y
                  (QR)&lt;sup&gt;T&lt;/sup&gt; (QR) b = (QR)&lt;sup&gt;T&lt;/sup&gt;y
                  R&lt;sup&gt;T&lt;/sup&gt; (Q&lt;sup&gt;T&lt;/sup&gt;Q) R b = R&lt;sup&gt;T&lt;/sup&gt; Q&lt;sup&gt;T&lt;/sup&gt; y
                  R&lt;sup&gt;T&lt;/sup&gt; R b = R&lt;sup&gt;T&lt;/sup&gt; Q&lt;sup&gt;T&lt;/sup&gt; y
                  (R&lt;sup&gt;T&lt;/sup&gt;)&lt;sup&gt;-1&lt;/sup&gt; R&lt;sup&gt;T&lt;/sup&gt; R b = (R&lt;sup&gt;T&lt;/sup&gt;)&lt;sup&gt;-1&lt;/sup&gt; R&lt;sup&gt;T&lt;/sup&gt; Q&lt;sup&gt;T&lt;/sup&gt; y
                  R b = Q&lt;sup&gt;T&lt;/sup&gt; y &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;Given &lt;code&gt;Q&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt;, the last equation is solved by back-substitution.&lt;/p&gt;                
                <version>
                    $Id: OLSMultipleLinearRegression.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="qr" type="QRDecomposition" line="57"/>
            <javadoc line="57">
                Cached QR decomposition of X matrix                
            </javadoc>
            <javadoc line="60">
                Loads model x and y sample data, overriding any previous sample.
                  Computes and caches QR decomposition of the X matrix.                
                <param>
                    y the [n,1] array representing the y sample                    
                </param>
                <param>
                    x the [n,k] array representing the x sample                    
                </param>
                <throws>
                    MathIllegalArgumentException if the x and y array data are not
                      compatible for the regression                    
                </throws>
            </javadoc>
            <method name="newSampleData" type="void" line="69">
                <params>
                    <param name="y" type="double[]"/>
                    <param name="x" type="double[][]"/>
                </params>
            </method>
            <javadoc line="75">
                {@inheritDoc}&lt;p&gt;This implementation computes and caches the QR decomposition of the X matrix.&lt;/p&gt;                
            </javadoc>
            <method name="newSampleData" type="void" line="80">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="nobs" type="int"/>
                    <param name="nvars" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                &lt;p&gt;Compute the &quot;hat&quot; matrix.
                  &lt;/p&gt;
                  &lt;p&gt;The hat matrix is defined in terms of the design matrix X
                  by X(X&lt;sup&gt;T&lt;/sup&gt;X)&lt;sup&gt;-1&lt;/sup&gt;X&lt;sup&gt;T&lt;/sup&gt;
                  &lt;/p&gt;
                  &lt;p&gt;The implementation here uses the QR decomposition to compute the
                  hat matrix as Q I&lt;sub&gt;p&lt;/sub&gt;Q&lt;sup&gt;T&lt;/sup&gt; where I&lt;sub&gt;p&lt;/sub&gt; is the
                  p-dimensional identity matrix augmented by 0&apos;s.  This computational
                  formula is from &quot;The Hat Matrix in Regression and ANOVA&quot;,
                  David C. Hoaglin and Roy E. Welsch,
                  &lt;i&gt;The American Statistician&lt;/i&gt;, Vol. 32, No. 1 (Feb., 1978), pp. 17-22.
                  &lt;/p&gt;
                  &lt;p&gt;Data for the model must have been successfully loaded using one of
                  the {@code newSampleData} methods before invoking this method; otherwise
                  a {@code NullPointerException} will be thrown.&lt;/p&gt;                
                <return>
                    the hat matrix                    
                </return>
            </javadoc>
            <method name="calculateHat" type="RealMatrix" line="104">
                <comment line="106">
                    Create augmented identity matrix                    
                </comment>
                <comment line="110">
                    No try-catch or advertised NotStrictlyPositiveException - NPE above if n &lt; 3                    
                </comment>
                <comment line="123">
                    Compute and return Hat matrix
                     No DME advertised - args valid if we get here                    
                </comment>
                <declaration name="Q" type="RealMatrix" line="106"/>
                <declaration name="p" type="int" line="107"/>
                <declaration name="n" type="int" line="108"/>
                <declaration name="augI" type="Array2DRowRealMatrix" line="110"/>
                <declaration name="augIData" type="double[][]" line="111"/>
                <scope line="112">
                    <scope line="113">
                        <scope line="114"/>
                        <scope line="116"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="127">
                &lt;p&gt;Returns the sum of squared deviations of Y from its mean.&lt;/p&gt;
                  &lt;p&gt;If the model has no intercept term, &lt;code&gt;0&lt;/code&gt; is used for the
                  mean of Y - i.e., what is returned is the sum of the squared Y values.&lt;/p&gt;
                  &lt;p&gt;The value returned by this method is the SSTO value used in
                  the {@link #calculateRSquared() R-squared} computation.&lt;/p&gt;                
                <return>
                    SSTO - the total sum of squares                    
                </return>
                <throws>
                    MathIllegalArgumentException if the sample has not been set or does
                      not contain at least 3 observations                    
                </throws>
                <see>
                    #isNoIntercept()                    
                </see>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="calculateTotalSumOfSquares" type="double" line="142">
                <scope line="143"/>
                <scope line="145"/>
            </method>
            <javadoc line="150">
                Returns the sum of squared residuals.                
                <return>
                    residual sum of squares                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="calculateResidualSumOfSquares" type="double" line="156">
                <comment line="159">
                    No advertised DME, args are valid                    
                </comment>
                <declaration name="residuals" type="RealVector" line="157"/>
            </method>
            <javadoc line="162">
                Returns the R-Squared statistic, defined by the formula &lt;pre&gt;
                  R&lt;sup&gt;2&lt;/sup&gt; = 1 - SSR / SSTO
                  &lt;/pre&gt;
                  where SSR is the {@link #calculateResidualSumOfSquares() sum of squared residuals}and SSTO is the {@link #calculateTotalSumOfSquares() total sum of squares}                
                <return>
                    R-square statistic                    
                </return>
                <throws>
                    MathIllegalArgumentException if the sample has not been set or does
                      not contain at least 3 observations                    
                </throws>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="calculateRSquared" type="double" line="174"/>
            <javadoc line="178">
                &lt;p&gt;Returns the adjusted R-squared statistic, defined by the formula &lt;pre&gt;
                  R&lt;sup&gt;2&lt;/sup&gt;&lt;sub&gt;adj&lt;/sub&gt; = 1 - [SSR (n - 1)] / [SSTO (n - p)]
                  &lt;/pre&gt;
                  where SSR is the {@link #calculateResidualSumOfSquares() sum of squared residuals},
                  SSTO is the {@link #calculateTotalSumOfSquares() total sum of squares}, n is the number
                  of observations and p is the number of parameters estimated (including the intercept).&lt;/p&gt;
                  &lt;p&gt;If the regression is estimated without an intercept term, what is returned is &lt;pre&gt;
                  &lt;code&gt; 1 - (1 - {@link #calculateRSquared()})  (n / (n - p)) &lt;/code&gt;
                  &lt;/pre&gt;&lt;/p&gt;                
                <return>
                    adjusted R-Squared statistic                    
                </return>
                <throws>
                    MathIllegalArgumentException if the sample has not been set or does
                      not contain at least 3 observations                    
                </throws>
                <see>
                    #isNoIntercept()                    
                </see>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="calculateAdjustedRSquared" type="double" line="196">
                <declaration name="n" type="double" line="197"/>
                <scope line="198"/>
                <scope line="200"/>
            </method>
            <javadoc line="206">
                {@inheritDoc}&lt;p&gt;This implementation computes and caches the QR decomposition of the X matrix
                  once it is successfully loaded.&lt;/p&gt;                
            </javadoc>
            <method name="newXSampleData" type="void" line="212">
                <params>
                    <param name="x" type="double[][]"/>
                </params>
            </method>
            <javadoc line="217">
                Calculates the regression coefficients using OLS.
                  &lt;p&gt;Data for the model must have been successfully loaded using one of
                  the {@code newSampleData} methods before invoking this method; otherwise
                  a {@code NullPointerException} will be thrown.&lt;/p&gt;                
                <return>
                    beta                    
                </return>
            </javadoc>
            <method name="calculateBeta" type="RealVector" line="227"/>
            <javadoc line="231">
                &lt;p&gt;Calculates the variance-covariance matrix of the regression parameters.
                  &lt;/p&gt;
                  &lt;p&gt;Var(b) = (X&lt;sup&gt;T&lt;/sup&gt;X)&lt;sup&gt;-1&lt;/sup&gt;
                  &lt;/p&gt;
                  &lt;p&gt;Uses QR decomposition to reduce (X&lt;sup&gt;T&lt;/sup&gt;X)&lt;sup&gt;-1&lt;/sup&gt;
                  to (R&lt;sup&gt;T&lt;/sup&gt;R)&lt;sup&gt;-1&lt;/sup&gt;, with only the top p rows of
                  R included, where p = the length of the beta vector.&lt;/p&gt;
                  &lt;p&gt;Data for the model must have been successfully loaded using one of
                  the {@code newSampleData} methods before invoking this method; otherwise
                  a {@code NullPointerException} will be thrown.&lt;/p&gt;                
                <return>
                    The beta variance-covariance matrix                    
                </return>
            </javadoc>
            <method name="calculateBetaVariance" type="RealMatrix" line="247">
                <declaration name="p" type="int" line="248"/>
                <declaration name="Raug" type="RealMatrix" line="249"/>
                <declaration name="Rinv" type="RealMatrix" line="250"/>
            </method>
        </class>
    </source>