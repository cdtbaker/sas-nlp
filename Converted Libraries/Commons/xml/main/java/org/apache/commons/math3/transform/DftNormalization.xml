<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <javadoc line="19">
            This enumeration defines the various types of normalizations that can be
              applied to discrete Fourier transforms (DFT). The exact definition of these
              normalizations is detailed below.            
            <see>
                FastFourierTransformer                
            </see>
            <version>
                $Id: DftNormalization.java 1385310 2012-09-16 16:32:10Z tn $                
            </version>
            <since>
                3.0                
            </since>
        </javadoc>
        <javadoc line="29">
            Should be passed to the constructor of {@link FastFourierTransformer}to use the &lt;em&gt;standard&lt;/em&gt; normalization convention. This normalization
              convention is defined as follows
              &lt;ul&gt;
              &lt;li&gt;forward transform: y&lt;sub&gt;n&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=0&lt;/sub&gt;&lt;sup&gt;N-1&lt;/sup&gt;
              x&lt;sub&gt;k&lt;/sub&gt; exp(-2&amp;pi;i n k / N),&lt;/li&gt;
              &lt;li&gt;inverse transform: x&lt;sub&gt;k&lt;/sub&gt; = N&lt;sup&gt;-1&lt;/sup&gt;
              &amp;sum;&lt;sub&gt;n=0&lt;/sub&gt;&lt;sup&gt;N-1&lt;/sup&gt; y&lt;sub&gt;n&lt;/sub&gt; exp(2&amp;pi;i n k / N),&lt;/li&gt;
              &lt;/ul&gt;
              where N is the size of the data sample.            
        </javadoc>
        <javadoc line="43">
            Should be passed to the constructor of {@link FastFourierTransformer}to use the &lt;em&gt;unitary&lt;/em&gt; normalization convention. This normalization
              convention is defined as follows
              &lt;ul&gt;
              &lt;li&gt;forward transform: y&lt;sub&gt;n&lt;/sub&gt; = (1 / &amp;radic;N)
              &amp;sum;&lt;sub&gt;k=0&lt;/sub&gt;&lt;sup&gt;N-1&lt;/sup&gt; x&lt;sub&gt;k&lt;/sub&gt;
              exp(-2&amp;pi;i n k / N),&lt;/li&gt;
              &lt;li&gt;inverse transform: x&lt;sub&gt;k&lt;/sub&gt; = (1 / &amp;radic;N)
              &amp;sum;&lt;sub&gt;n=0&lt;/sub&gt;&lt;sup&gt;N-1&lt;/sup&gt; y&lt;sub&gt;n&lt;/sub&gt; exp(2&amp;pi;i n k / N),&lt;/li&gt;
              &lt;/ul&gt;
              which makes the transform unitary. N is the size of the data sample.            
        </javadoc>
    </source>