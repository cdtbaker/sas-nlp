<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim">
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.TooManyIterationsException"/>
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <class name="AbstractOptimizationProblem" line="23">
            <type_params>
                <type_param name="PAIR"/>
            </type_params>
            <implements interface="OptimizationProblem">
                <type_params>
                    <type_param name="PAIR"/>
                </type_params>
            </implements>
            <javadoc line="23">
                Base class for implementing optimization problems. It contains the boiler-plate code
                  for counting the number of evaluations of the objective function and the number of
                  iterations of the algorithm, and storing the convergence checker.                
                <param>
                    &lt;PAIR&gt;
                       Type of the point/value pair returned by the optimization algorithm.                    
                </param>
                <version>
                    $Id: AbstractOptimizationProblem.java 1571015 2014-02-23 14:00:48Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="MAX_EVAL_CALLBACK" type="MaxEvalCallback" line="35"/>
            <javadoc line="35">
                Callback to use for the evaluation counter.                
            </javadoc>
            <declaration name="MAX_ITER_CALLBACK" type="MaxIterCallback" line="37"/>
            <javadoc line="37">
                Callback to use for the iteration counter.                
            </javadoc>
            <declaration name="maxEvaluations" type="int" line="40"/>
            <javadoc line="40">
                max evaluations                
            </javadoc>
            <declaration name="maxIterations" type="int" line="42"/>
            <javadoc line="42">
                max iterations                
            </javadoc>
            <declaration name="checker" type="ConvergenceChecker&amp;lt;PAIR&amp;gt;" line="44"/>
            <javadoc line="44">
                Convergence checker.                
            </javadoc>
            <javadoc line="47">
                Create an {@link AbstractOptimizationProblem} from the given data.                
                <param>
                    maxEvaluations the number of allowed model function evaluations.                    
                </param>
                <param>
                    maxIterations  the number of allowed iterations.                    
                </param>
                <param>
                    checker        the convergence checker.                    
                </param>
            </javadoc>
            <method name="AbstractOptimizationProblem" type="constructor" line="56">
                <params>
                    <param name="maxEvaluations" type="int"/>
                    <param name="maxIterations" type="int"/>
                    <param name="checker" type="ConvergenceChecker&lt;PAIR&gt;"/>
                </params>
            </method>
            <javadoc line="62">
                {@inheritDoc}                
            </javadoc>
            <method name="getEvaluationCounter" type="Incrementor" line="63"/>
            <javadoc line="67">
                {@inheritDoc}                
            </javadoc>
            <method name="getIterationCounter" type="Incrementor" line="68"/>
            <javadoc line="72">
                {@inheritDoc}                
            </javadoc>
            <method name="getConvergenceChecker" type="ConvergenceChecker&lt;PAIR&gt;" line="73"/>
            <class name="MaxEvalCallback" line="77">
                <implements interface="Incrementor.MaxCountExceededCallback"/>
                <javadoc line="77">
                    Defines the action to perform when reaching the maximum number of evaluations.                    
                </javadoc>
                <javadoc line="80">
                    {@inheritDoc}                    
                    <throws>
                        TooManyEvaluationsException                        
                    </throws>
                </javadoc>
                <method name="trigger" type="void" line="85">
                    <params>
                        <param name="max" type="int"/>
                    </params>
                </method>
            </class>
            <class name="MaxIterCallback" line="90">
                <implements interface="Incrementor.MaxCountExceededCallback"/>
                <javadoc line="90">
                    Defines the action to perform when reaching the maximum number of evaluations.                    
                </javadoc>
                <javadoc line="93">
                    {@inheritDoc}                    
                    <throws>
                        TooManyIterationsException                        
                    </throws>
                </javadoc>
                <method name="trigger" type="void" line="98">
                    <params>
                        <param name="max" type="int"/>
                    </params>
                </method>
            </class>
        </class>
    </source>