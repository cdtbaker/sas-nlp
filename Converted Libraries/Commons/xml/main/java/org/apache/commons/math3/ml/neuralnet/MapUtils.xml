<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet">
        <import package="java.util.HashMap"/>
        <import package="java.util.Collection"/>
        <import package="org.apache.commons.math3.ml.distance.DistanceMeasure"/>
        <import package="org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <class name="MapUtils" line="27">
            <javadoc line="27">
                Utilities for network maps.                
                <version>
                    $Id: MapUtils.java 1566092 2014-02-08 18:48:29Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <javadoc line="34">
                Class contains only static methods.                
            </javadoc>
            <method name="MapUtils" type="constructor" line="37"/>
            <javadoc line="39">
                Finds the neuron that best matches the given features.                
                <param>
                    features Data.                    
                </param>
                <param>
                    neurons List of neurons to scan. If the list is empty{@code null} will be returned.                    
                </param>
                <param>
                    distance Distance function. The neuron&apos;s features are
                      passed as the first argument to {@link DistanceMeasure#compute(double[],double[])}.                    
                </param>
                <return>
                    the neuron whose features are closest to the given data.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the size of the input is not compatible with the neurons features
                      size.                    
                </throws>
            </javadoc>
            <method name="findBest" type="Neuron" line="54">
                <params>
                    <param name="features" type="double[]"/>
                    <param name="neurons" type="Iterable&lt;Neuron&gt;"/>
                    <param name="distance" type="DistanceMeasure"/>
                </params>
                <declaration name="best" type="Neuron" line="55"/>
                <declaration name="min" type="double" line="56"/>
                <scope line="57">
                    <declaration name="d" type="double" line="58"/>
                    <scope line="59"/>
                </scope>
            </method>
            <javadoc line="68">
                Finds the two neurons that best match the given features.                
                <param>
                    features Data.                    
                </param>
                <param>
                    neurons List of neurons to scan. If the list is empty{@code null} will be returned.                    
                </param>
                <param>
                    distance Distance function. The neuron&apos;s features are
                      passed as the first argument to {@link DistanceMeasure#compute(double[],double[])}.                    
                </param>
                <return>
                    the two neurons whose features are closest to the given data.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the size of the input is not compatible with the neurons features
                      size.                    
                </throws>
            </javadoc>
            <method name="findBestAndSecondBest" type="Pair&lt;Neuron,Neuron&gt;" line="83">
                <params>
                    <param name="features" type="double[]"/>
                    <param name="neurons" type="Iterable&lt;Neuron&gt;"/>
                    <param name="distance" type="DistanceMeasure"/>
                </params>
                <comment line="91">
                    Replace second best with old best.                    
                </comment>
                <comment line="95">
                    Store current as new best.                    
                </comment>
                <comment line="99">
                    Replace old second best with current.                    
                </comment>
                <declaration name="best" type="Neuron[]" line="84"/>
                <declaration name="min" type="double[]" line="85"/>
                <scope line="87">
                    <declaration name="d" type="double" line="88"/>
                    <scope line="89"/>
                    <scope line="97"/>
                </scope>
            </method>
            <javadoc line="107">
                Computes the &lt;a href=&quot;http://en.wikipedia.org/wiki/U-Matrix&quot;&gt;
                  U-matrix&lt;/a&gt; of a two-dimensional map.                
                <param>
                    map Network.                    
                </param>
                <param>
                    distance Function to use for computing the average
                      distance from a neuron to its neighbours.                    
                </param>
                <return>
                    the matrix of average distances.                    
                </return>
            </javadoc>
            <method name="computeU" type="double[][]" line="117">
                <params>
                    <param name="map" type="NeuronSquareMesh2D"/>
                    <param name="distance" type="DistanceMeasure"/>
                </params>
                <declaration name="numRows" type="int" line="118"/>
                <declaration name="numCols" type="int" line="119"/>
                <declaration name="uMatrix" type="double[][]" line="120"/>
                <declaration name="net" type="Network" line="122"/>
                <scope line="124">
                    <scope line="125">
                        <declaration name="neuron" type="Neuron" line="126"/>
                        <declaration name="neighbours" type="Collection&amp;lt;Neuron&amp;gt;" line="127"/>
                        <declaration name="features" type="double[]" line="128"/>
                        <declaration name="d" type="double" line="130"/>
                        <declaration name="count" type="int" line="131"/>
                        <scope line="132"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="144">
                Computes the &quot;hit&quot; histogram of a two-dimensional map.                
                <param>
                    data Feature vectors.                    
                </param>
                <param>
                    map Network.                    
                </param>
                <param>
                    distance Function to use for determining the best matching unit.                    
                </param>
                <return>
                    the number of hits for each neuron in the map.                    
                </return>
            </javadoc>
            <method name="computeHitHistogram" type="int[][]" line="154">
                <params>
                    <param name="data" type="Iterable&lt;double[]&gt;"/>
                    <param name="map" type="NeuronSquareMesh2D"/>
                    <param name="distance" type="DistanceMeasure"/>
                </params>
                <comment line="169">
                    Copy the histogram data into a 2D map.                    
                </comment>
                <declaration name="hit" type="HashMap&amp;lt;Neuron,Integer&amp;gt;" line="155"/>
                <declaration name="net" type="Network" line="156"/>
                <scope line="158">
                    <declaration name="best" type="Neuron" line="159"/>
                    <declaration name="count" type="Integer" line="160"/>
                    <scope line="161"/>
                    <scope line="163"/>
                </scope>
                <declaration name="numRows" type="int" line="169"/>
                <declaration name="numCols" type="int" line="170"/>
                <declaration name="histo" type="int[][]" line="171"/>
                <scope line="173">
                    <scope line="174">
                        <declaration name="neuron" type="Neuron" line="175"/>
                        <declaration name="count" type="Integer" line="176"/>
                        <scope line="177"/>
                        <scope line="179"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="188">
                Computes the quantization error.
                  The quantization error is the average distance between a feature vector
                  and its &quot;best matching unit&quot; (closest neuron).                
                <param>
                    data Feature vectors.                    
                </param>
                <param>
                    neurons List of neurons to scan.                    
                </param>
                <param>
                    distance Distance function.                    
                </param>
                <return>
                    the error.                    
                </return>
                <throws>
                    NoDataException if {@code data} is empty.                    
                </throws>
            </javadoc>
            <method name="computeQuantizationError" type="double" line="201">
                <params>
                    <param name="data" type="Iterable&lt;double[]&gt;"/>
                    <param name="neurons" type="Iterable&lt;Neuron&gt;"/>
                    <param name="distance" type="DistanceMeasure"/>
                </params>
                <declaration name="d" type="double" line="202"/>
                <declaration name="count" type="int" line="203"/>
                <scope line="204"/>
                <scope line="209"/>
            </method>
            <javadoc line="216">
                Computes the topographic error.
                  The topographic error is the proportion of data for which first and
                  second best matching units are not adjacent in the map.                
                <param>
                    data Feature vectors.                    
                </param>
                <param>
                    net Network.                    
                </param>
                <param>
                    distance Distance function.                    
                </param>
                <return>
                    the error.                    
                </return>
                <throws>
                    NoDataException if {@code data} is empty.                    
                </throws>
            </javadoc>
            <method name="computeTopographicError" type="double" line="229">
                <params>
                    <param name="data" type="Iterable&lt;double[]&gt;"/>
                    <param name="net" type="Network"/>
                    <param name="distance" type="DistanceMeasure"/>
                </params>
                <comment line="237">
                    Increment count if first and second best matching units
                     are not neighbours.                    
                </comment>
                <declaration name="notAdjacentCount" type="int" line="230"/>
                <declaration name="count" type="int" line="231"/>
                <scope line="232">
                    <declaration name="p" type="Pair&amp;lt;Neuron,Neuron&amp;gt;" line="234"/>
                    <scope line="235"/>
                </scope>
                <scope line="242"/>
            </method>
        </class>
    </source>