<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <import package="java.io.Serializable"/>
        <import package="java.lang.reflect.Array"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="FastFourierTransformer" line="14">
            <implements interface="Serializable"/>
            <javadoc line="14">
                Implements the Fast Fourier Transform for transformation of one-dimensional
                  real or complex data sets. For reference, see &lt;em&gt;Applied Numerical Linear
                  Algebra&lt;/em&gt;, ISBN 0898713897, chapter 6.
                  &lt;p&gt;
                  There are several variants of the discrete Fourier transform, with various
                  normalization conventions, which are specified by the parameter{@link DftNormalization}.
                  &lt;p&gt;
                  The current implementation of the discrete Fourier transform as a fast
                  Fourier transform requires the length of the data set to be a power of 2.
                  This greatly simplifies and speeds up the code. Users can pad the data with
                  zeros to meet this requirement. There are other flavors of FFT, for
                  reference, see S. Winograd,
                  &lt;i&gt;On computing the discrete Fourier transform&lt;/i&gt;, Mathematics of
                  Computation, 32 (1978), 175 - 199.                
                <see>
                    DftNormalization                    
                </see>
                <version>
                    $Id: FastFourierTransformer.java 1385310 2012-09-16 16:32:10Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="34"/>
            <javadoc line="34">
                Serializable version identifier.                
            </javadoc>
            <declaration name="W_SUB_N_R" type="double[]" line="38"/>
            <javadoc line="38">
                {@code W_SUB_N_R[i]} is the real part of{@code exp(- 2  i  pi / n)}:{@code W_SUB_N_R[i] = cos(2  pi/ n)}, where {@code n = 2^i}.                
            </javadoc>
            <declaration name="W_SUB_N_I" type="double[]" line="42"/>
            <javadoc line="42">
                {@code W_SUB_N_I[i]} is the imaginary part of{@code exp(- 2  i  pi / n)}:{@code W_SUB_N_I[i] = -sin(2  pi/ n)}, where {@code n = 2^i}.                
            </javadoc>
            <declaration name="normalization" type="DftNormalization" line="46"/>
            <javadoc line="46">
                The type of DFT to be performed.                
            </javadoc>
            <javadoc line="50">
                Creates a new instance of this class, with various normalization
                  conventions.                
                <param>
                    normalization the type of normalization to be applied to the
                      transformed data                    
                </param>
            </javadoc>
            <method name="FastFourierTransformer" type="constructor" line="56">
                <params>
                    <param name="normalization" type="DftNormalization"/>
                </params>
            </method>
            <javadoc line="59">
                Performs identical index bit reversal shuffles on two arrays of identical
                  size. Each element in the array is swapped with another element based on
                  the bit-reversal of the index. For example, in an array with length 16,
                  item at binary index 0011 (decimal 3) would be swapped with the item at
                  binary index 1100 (decimal 12).                
                <param>
                    a the first array to be shuffled                    
                </param>
                <param>
                    b the second array to be shuffled                    
                </param>
            </javadoc>
            <method name="bitReversalShuffle2" type="void" line="68">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="b" type="double[]"/>
                </params>
            </method>
            <javadoc line="90">
                Applies the proper normalization to the specified transformed data.                
                <param>
                    dataRI the unscaled transformed data                    
                </param>
                <param>
                    normalization the normalization to be applied                    
                </param>
                <param>
                    type the type of transform (forward, inverse) which resulted in the specified data                    
                </param>
            </javadoc>
            <method name="normalizeTransformedData" type="void" line="96">
                <params>
                    <param name="dataRI" type="double[][]"/>
                    <param name="normalization" type="DftNormalization"/>
                    <param name="type" type="TransformType"/>
                </params>
            </method>
            <javadoc line="122">
                Computes the standard transform of the specified complex data. The
                  computation is done in place. The input data is laid out as follows
                  &lt;ul&gt;
                  &lt;li&gt;{@code dataRI[0][i]} is the real part of the {@code i}-th data point,&lt;/li&gt;
                  &lt;li&gt;{@code dataRI[1][i]} is the imaginary part of the {@code i}-th data point.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    dataRI the two dimensional array of real and imaginary parts of the data                    
                </param>
                <param>
                    normalization the normalization to be applied to the transformed data                    
                </param>
                <param>
                    type the type of transform (forward, inverse) to be performed                    
                </param>
                <throws>
                    DimensionMismatchException if the number of rows of the specified
                      array is not two, or the array is not rectangular                    
                </throws>
                <throws>
                    MathIllegalArgumentException if the number of data points is not
                      a power of two                    
                </throws>
            </javadoc>
            <method name="transformInPlace" type="void" line="137">
                <params>
                    <param name="dataRI" type="double[][]"/>
                    <param name="normalization" type="DftNormalization"/>
                    <param name="type" type="TransformType"/>
                </params>
                <scope line="138"/>
                <declaration name="dataR" type="double[]" line="141"/>
                <declaration name="dataI" type="double[]" line="142"/>
                <scope line="143"/>
                <declaration name="n" type="int" line="146"/>
                <scope line="147"/>
                <scope line="150"/>
                <scope line="153">
                    <declaration name="srcR0" type="double" line="154"/>
                    <declaration name="srcI0" type="double" line="155"/>
                    <declaration name="srcR1" type="double" line="156"/>
                    <declaration name="srcI1" type="double" line="157"/>
                </scope>
                <scope line="166">
                    <scope line="167">
                        <declaration name="i1" type="int" line="168"/>
                        <declaration name="i2" type="int" line="169"/>
                        <declaration name="i3" type="int" line="170"/>
                        <declaration name="srcR0" type="double" line="171"/>
                        <declaration name="srcI0" type="double" line="172"/>
                        <declaration name="srcR1" type="double" line="173"/>
                        <declaration name="srcI1" type="double" line="174"/>
                        <declaration name="srcR2" type="double" line="175"/>
                        <declaration name="srcI2" type="double" line="176"/>
                        <declaration name="srcR3" type="double" line="177"/>
                        <declaration name="srcI3" type="double" line="178"/>
                    </scope>
                </scope>
                <scope line="189">
                    <scope line="190">
                        <declaration name="i1" type="int" line="191"/>
                        <declaration name="i2" type="int" line="192"/>
                        <declaration name="i3" type="int" line="193"/>
                        <declaration name="srcR0" type="double" line="194"/>
                        <declaration name="srcI0" type="double" line="195"/>
                        <declaration name="srcR1" type="double" line="196"/>
                        <declaration name="srcI1" type="double" line="197"/>
                        <declaration name="srcR2" type="double" line="198"/>
                        <declaration name="srcI2" type="double" line="199"/>
                        <declaration name="srcR3" type="double" line="200"/>
                        <declaration name="srcI3" type="double" line="201"/>
                    </scope>
                </scope>
                <declaration name="lastN0" type="int" line="212"/>
                <declaration name="lastLogN0" type="int" line="213"/>
                <scope line="214">
                    <declaration name="n0" type="int" line="215"/>
                    <declaration name="logN0" type="int" line="216"/>
                    <declaration name="wSubN0R" type="double" line="217"/>
                    <declaration name="wSubN0I" type="double" line="218"/>
                    <scope line="219"/>
                    <scope line="222">
                        <declaration name="destOddStartIndex" type="int" line="223"/>
                        <declaration name="wSubN0ToRR" type="double" line="224"/>
                        <declaration name="wSubN0ToRI" type="double" line="225"/>
                        <scope line="226">
                            <declaration name="grR" type="double" line="227"/>
                            <declaration name="grI" type="double" line="228"/>
                            <declaration name="hrR" type="double" line="229"/>
                            <declaration name="hrI" type="double" line="230"/>
                            <declaration name="nextWsubN0ToRR" type="double" line="235"/>
                            <declaration name="nextWsubN0ToRI" type="double" line="236"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="246">
                Returns the (forward, inverse) transform of the specified real data set.                
                <param>
                    f the real data array to be transformed                    
                </param>
                <param>
                    type the type of transform (forward, inverse) to be performed                    
                </param>
                <return>
                    the complex transformed array                    
                </return>
                <throws>
                    MathIllegalArgumentException if the length of the data array is not a power of two                    
                </throws>
            </javadoc>
            <method name="transform" type="Complex[]" line="253">
                <params>
                    <param name="f" type="double[]"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="dataRI" type="double[][]" line="254"/>
            </method>
            <javadoc line="258">
                Returns the (forward, inverse) transform of the specified real function,
                  sampled on the specified interval.                
                <param>
                    f the function to be sampled and transformed                    
                </param>
                <param>
                    min the (inclusive) lower bound for the interval                    
                </param>
                <param>
                    max the (exclusive) upper bound for the interval                    
                </param>
                <param>
                    n the number of sample points                    
                </param>
                <param>
                    type the type of transform (forward, inverse) to be performed                    
                </param>
                <return>
                    the complex transformed array                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.NumberIsTooLargeExceptionif the lower bound is greater than, or equal to the upper bound                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the number of sample points {@code n} is negative                    
                </throws>
                <throws>
                    MathIllegalArgumentException if the number of sample points{@code n} is not a power of two                    
                </throws>
            </javadoc>
            <method name="transform" type="Complex[]" line="271">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="n" type="int"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="data" type="double[]" line="272"/>
            </method>
            <javadoc line="275">
                Returns the (forward, inverse) transform of the specified complex data set.                
                <param>
                    f the complex data array to be transformed                    
                </param>
                <param>
                    type the type of transform (forward, inverse) to be performed                    
                </param>
                <return>
                    the complex transformed array                    
                </return>
                <throws>
                    MathIllegalArgumentException if the length of the data array is not a power of two                    
                </throws>
            </javadoc>
            <method name="transform" type="Complex[]" line="282">
                <params>
                    <param name="f" type="Complex[]"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="dataRI" type="double[][]" line="283"/>
            </method>
            <javadoc line="287">
                Performs a multi-dimensional Fourier transform on a given array. Use{@link #transform(Complex[],TransformType)} in a row-column
                  implementation in any number of dimensions with
                  O(N&amp;times;log(N)) complexity with
                  N = n&lt;sub&gt;1&lt;/sub&gt; &amp;times; n&lt;sub&gt;2&lt;/sub&gt; &amp;times;n&lt;sub&gt;3&lt;/sub&gt; &amp;times; ...
                  &amp;times; n&lt;sub&gt;d&lt;/sub&gt;, where n&lt;sub&gt;k&lt;/sub&gt; is the number of elements in
                  dimension k, and d is the total number of dimensions.                
                <param>
                    mdca Multi-Dimensional Complex Array, i.e. {@code Complex[][][][]}                    
                </param>
                <param>
                    type the type of transform (forward, inverse) to be performed                    
                </param>
                <return>
                    transform of {@code mdca} as a Multi-Dimensional Complex Array, i.e. {@code Complex[][][][]}                    
                </return>
                <throws>
                    IllegalArgumentException if any dimension is not a power of two                    
                </throws>
                <deprecated>
                    see MATH-736                    
                </deprecated>
            </javadoc>
            <method name="mdfft" type="Object" line="300">
                <params>
                    <param name="mdca" type="Object"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="mdcm" type="MultiDimensionalComplexMatrix" line="301"/>
                <declaration name="dimensionSize" type="int[]" line="302"/>
                <scope line="303"/>
            </method>
            <javadoc line="308">
                Performs one dimension of a multi-dimensional Fourier transform.                
                <param>
                    mdcm input matrix                    
                </param>
                <param>
                    type the type of transform (forward, inverse) to be performed                    
                </param>
                <param>
                    d index of the dimension to process                    
                </param>
                <param>
                    subVector recursion subvector                    
                </param>
                <throws>
                    IllegalArgumentException if any dimension is not a power of two                    
                </throws>
                <deprecated>
                    see MATH-736                    
                </deprecated>
            </javadoc>
            <method name="mdfft" type="void" line="317">
                <params>
                    <param name="mdcm" type="MultiDimensionalComplexMatrix"/>
                    <param name="type" type="TransformType"/>
                    <param name="d" type="int"/>
                    <param name="subVector" type="int[]"/>
                </params>
                <declaration name="dimensionSize" type="int[]" line="318"/>
                <scope line="319">
                    <declaration name="temp" type="Complex[]" line="320"/>
                    <scope line="321"/>
                    <scope line="326"/>
                </scope>
                <scope line="331">
                    <declaration name="vector" type="int[]" line="332"/>
                    <scope line="334"/>
                    <scope line="338">
                        <scope line="339"/>
                    </scope>
                </scope>
            </method>
            <class name="MultiDimensionalComplexMatrix" line="346">
                <implements interface="Cloneable"/>
                <javadoc line="346">
                    Complex matrix implementation. Not designed for synchronized access may
                      eventually be replaced by jsr-83 of the java community process
                      http://jcp.org/en/jsr/detail?id=83
                      may require additional exception throws for other basic requirements.                    
                    <deprecated>
                        see MATH-736                        
                    </deprecated>
                </javadoc>
                <declaration name="dimensionSize" type="int[]" line="354"/>
                <javadoc line="354">
                    Size in all dimensions.                    
                </javadoc>
                <declaration name="multiDimensionalComplexArray" type="Object" line="358"/>
                <javadoc line="358">
                    Storage array.                    
                </javadoc>
                <javadoc line="362">
                    Simple constructor.                    
                    <param>
                        multiDimensionalComplexArray array containing the matrix
                          elements                        
                    </param>
                </javadoc>
                <method name="MultiDimensionalComplexMatrix" type="constructor" line="367">
                    <params>
                        <param name="multiDimensionalComplexArray" type="Object"/>
                    </params>
                    <declaration name="numOfDimensions" type="int" line="369"/>
                    <scope line="370">
                        <declaration name="array" type="Object[]" line="371"/>
                    </scope>
                    <scope line="377">
                        <declaration name="array" type="Object[]" line="378"/>
                    </scope>
                </method>
                <javadoc line="383">
                    Get a matrix element.                    
                    <param>
                        vector indices of the element                        
                    </param>
                    <return>
                        matrix element                        
                    </return>
                    <exception>
                        DimensionMismatchException if dimensions do not match                        
                    </exception>
                </javadoc>
                <method name="get" type="Complex" line="389">
                    <params>
                        <param name="vector" type="int"/>
                    </params>
                    <scope line="390">
                        <scope line="391"/>
                    </scope>
                    <scope line="396"/>
                    <declaration name="lastDimension" type="Object" line="399"/>
                    <scope line="400"/>
                </method>
                <javadoc line="405">
                    Set a matrix element.                    
                    <param>
                        magnitude magnitude of the element                        
                    </param>
                    <param>
                        vector indices of the element                        
                    </param>
                    <return>
                        the previous value                        
                    </return>
                    <exception>
                        DimensionMismatchException if dimensions do not match                        
                    </exception>
                </javadoc>
                <method name="set" type="Complex" line="412">
                    <params>
                        <param name="magnitude" type="Complex"/>
                        <param name="vector" type="int"/>
                    </params>
                    <scope line="413">
                        <scope line="414"/>
                    </scope>
                    <scope line="419"/>
                    <declaration name="lastDimension" type="Object[]" line="422"/>
                    <scope line="423"/>
                    <declaration name="lastValue" type="Complex" line="426"/>
                </method>
                <javadoc line="430">
                    Get the size in all dimensions.                    
                    <return>
                        size in all dimensions                        
                    </return>
                </javadoc>
                <method name="getDimensionSizes" type="int[]" line="434"/>
                <javadoc line="437">
                    Get the underlying storage array.                    
                    <return>
                        underlying storage array                        
                    </return>
                </javadoc>
                <method name="getArray" type="Object" line="441"/>
                <javadoc line="444">
                    {@inheritDoc}                    
                </javadoc>
                <method name="clone" type="Object" line="447">
                    <declaration name="mdcm" type="MultiDimensionalComplexMatrix" line="448"/>
                </method>
                <javadoc line="452">
                    Copy contents of current array into mdcm.                    
                    <param>
                        mdcm array where to copy data                        
                    </param>
                </javadoc>
                <method name="clone" type="void" line="456">
                    <params>
                        <param name="mdcm" type="MultiDimensionalComplexMatrix"/>
                    </params>
                    <declaration name="vector" type="int[]" line="457"/>
                    <declaration name="size" type="int" line="458"/>
                    <scope line="459"/>
                    <declaration name="vectorList" type="int[][]" line="462"/>
                    <scope line="463">
                        <scope line="465">
                            <scope line="467"/>
                            <scope line="470"/>
                        </scope>
                    </scope>
                    <scope line="475"/>
                </method>
            </class>
        </class>
    </source>