<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ConcurrentModificationException"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="OpenIntToDoubleHashMap" line="7">
            <implements interface="Serializable"/>
            <javadoc line="7">
                Open addressed map from int to double.
                  &lt;p&gt;This class provides a dedicated map from integers to doubles with a
                  much smaller memory overhead than standard &lt;code&gt;java.util.Map&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;This class is not synchronized. The specialized iterators returned by{@link #iterator()} are fail-fast: they throw a
                  &lt;code&gt;ConcurrentModificationException&lt;/code&gt; when they detect the map has been
                  modified during iteration.&lt;/p&gt;                
                <version>
                    $Id: OpenIntToDoubleHashMap.java 1421448 2012-12-13 19:45:57Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="FREE" type="byte" line="18"/>
            <javadoc line="18">
                Status indicator for free table entries.                
            </javadoc>
            <declaration name="FULL" type="byte" line="22"/>
            <javadoc line="22">
                Status indicator for full table entries.                
            </javadoc>
            <declaration name="REMOVED" type="byte" line="26"/>
            <javadoc line="26">
                Status indicator for removed table entries.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="30"/>
            <javadoc line="30">
                Serializable version identifier                
            </javadoc>
            <declaration name="LOAD_FACTOR" type="float" line="34"/>
            <javadoc line="34">
                Load factor for the map.                
            </javadoc>
            <declaration name="DEFAULT_EXPECTED_SIZE" type="int" line="38"/>
            <javadoc line="38">
                Default starting size.
                  &lt;p&gt;This must be a power of two for bit mask to work properly. &lt;/p&gt;                
            </javadoc>
            <declaration name="RESIZE_MULTIPLIER" type="int" line="43"/>
            <javadoc line="43">
                Multiplier for size growth when map fills up.
                  &lt;p&gt;This must be a power of two for bit mask to work properly. &lt;/p&gt;                
            </javadoc>
            <declaration name="PERTURB_SHIFT" type="int" line="48"/>
            <javadoc line="48">
                Number of bits to perturb the index when probing for collision resolution.                
            </javadoc>
            <declaration name="keys" type="int[]" line="52"/>
            <javadoc line="52">
                Keys table.                
            </javadoc>
            <declaration name="values" type="double[]" line="56"/>
            <javadoc line="56">
                Values table.                
            </javadoc>
            <declaration name="states" type="byte[]" line="60"/>
            <javadoc line="60">
                States table.                
            </javadoc>
            <declaration name="missingEntries" type="double" line="64"/>
            <javadoc line="64">
                Return value for missing entries.                
            </javadoc>
            <declaration name="size" type="int" line="68"/>
            <javadoc line="68">
                Current size of the map.                
            </javadoc>
            <declaration name="mask" type="int" line="72"/>
            <javadoc line="72">
                Bit mask for hash values.                
            </javadoc>
            <declaration name="count" type="int" line="76"/>
            <javadoc line="76">
                Modifications count.                
            </javadoc>
            <javadoc line="80">
                Build an empty map with default size and using NaN for missing entries.                
            </javadoc>
            <method name="OpenIntToDoubleHashMap" type="constructor" line="83"/>
            <javadoc line="86">
                Build an empty map with default size                
                <param>
                    missingEntries value to return when a missing entry is fetched                    
                </param>
            </javadoc>
            <method name="OpenIntToDoubleHashMap" type="constructor" line="90">
                <params>
                    <param name="missingEntries" type="double"/>
                </params>
            </method>
            <javadoc line="93">
                Build an empty map with specified size and using NaN for missing entries.                
                <param>
                    expectedSize expected number of elements in the map                    
                </param>
            </javadoc>
            <method name="OpenIntToDoubleHashMap" type="constructor" line="97">
                <params>
                    <param name="expectedSize" type="int"/>
                </params>
            </method>
            <javadoc line="100">
                Build an empty map with specified size.                
                <param>
                    expectedSize expected number of elements in the map                    
                </param>
                <param>
                    missingEntries value to return when a missing entry is fetched                    
                </param>
            </javadoc>
            <method name="OpenIntToDoubleHashMap" type="constructor" line="105">
                <params>
                    <param name="expectedSize" type="int"/>
                    <param name="missingEntries" type="double"/>
                </params>
                <declaration name="capacity" type="int" line="106"/>
            </method>
            <javadoc line="113">
                Copy constructor.                
                <param>
                    source map to copy                    
                </param>
            </javadoc>
            <method name="OpenIntToDoubleHashMap" type="constructor" line="117">
                <params>
                    <param name="source" type="OpenIntToDoubleHashMap"/>
                </params>
                <declaration name="length" type="int" line="118"/>
            </method>
            <javadoc line="130">
                Compute the capacity needed for a given size.                
                <param>
                    expectedSize expected size of the map                    
                </param>
                <return>
                    capacity to use for the specified size                    
                </return>
            </javadoc>
            <method name="computeCapacity" type="int" line="135">
                <params>
                    <param name="expectedSize" type="int"/>
                </params>
                <scope line="136"/>
                <declaration name="capacity" type="int" line="139"/>
                <declaration name="powerOfTwo" type="int" line="140"/>
                <scope line="141"/>
            </method>
            <javadoc line="146">
                Find the smallest power of two greater than the input value                
                <param>
                    i input value                    
                </param>
                <return>
                    smallest power of two greater than the input value                    
                </return>
            </javadoc>
            <method name="nextPowerOfTwo" type="int" line="151">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="154">
                Get the stored value associated with the given key                
                <param>
                    key key associated with the data                    
                </param>
                <return>
                    data associated with the key                    
                </return>
            </javadoc>
            <method name="get" type="double" line="159">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="160"/>
                <declaration name="index" type="int" line="161"/>
                <scope line="162"/>
                <scope line="165"/>
                <declaration name="j" type="int" line="168"/>
                <scope line="169">
                    <scope line="172"/>
                </scope>
            </method>
            <javadoc line="178">
                Check if a value is associated with a key.                
                <param>
                    key key to check                    
                </param>
                <return>
                    true if a value is associated with key                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="183">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="184"/>
                <declaration name="index" type="int" line="185"/>
                <scope line="186"/>
                <scope line="189"/>
                <declaration name="j" type="int" line="192"/>
                <scope line="193">
                    <scope line="196"/>
                </scope>
            </method>
            <javadoc line="202">
                Get an iterator over map elements.
                  &lt;p&gt;The specialized iterators returned are fail-fast: they throw a
                  &lt;code&gt;ConcurrentModificationException&lt;/code&gt; when they detect the map
                  has been modified during iteration.&lt;/p&gt;                
                <return>
                    iterator over the map elements                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator" line="209"/>
            <javadoc line="212">
                Perturb the hash for starting probing.                
                <param>
                    hash initial hash                    
                </param>
                <return>
                    perturbed hash                    
                </return>
            </javadoc>
            <method name="perturb" type="int" line="217">
                <params>
                    <param name="hash" type="int"/>
                </params>
            </method>
            <javadoc line="220">
                Find the index at which a key should be inserted                
                <param>
                    key key to lookup                    
                </param>
                <return>
                    index at which key should be inserted                    
                </return>
            </javadoc>
            <method name="findInsertionIndex" type="int" line="225">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="228">
                Find the index at which a key should be inserted                
                <param>
                    keys keys table                    
                </param>
                <param>
                    states states table                    
                </param>
                <param>
                    key key to lookup                    
                </param>
                <param>
                    mask bit mask for hash values                    
                </param>
                <return>
                    index at which key should be inserted                    
                </return>
            </javadoc>
            <method name="findInsertionIndex" type="int" line="236">
                <params>
                    <param name="keys" type="int[]"/>
                    <param name="states" type="byte[]"/>
                    <param name="key" type="int"/>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="hash" type="int" line="237"/>
                <declaration name="index" type="int" line="238"/>
                <scope line="239"/>
                <scope line="242"/>
                <declaration name="perturb" type="int" line="245"/>
                <declaration name="j" type="int" line="246"/>
                <scope line="247">
                    <scope line="248">
                        <scope line="252"/>
                    </scope>
                </scope>
                <scope line="257"/>
                <scope line="260"/>
                <declaration name="firstRemoved" type="int" line="263"/>
                <scope line="264">
                    <scope line="267"/>
                    <scope line="270"/>
                </scope>
            </method>
            <javadoc line="276">
                Compute next probe for collision resolution                
                <param>
                    perturb perturbed hash                    
                </param>
                <param>
                    j previous probe                    
                </param>
                <return>
                    next probe                    
                </return>
            </javadoc>
            <method name="probe" type="int" line="282">
                <params>
                    <param name="perturb" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <javadoc line="285">
                Change the index sign                
                <param>
                    index initial index                    
                </param>
                <return>
                    changed index                    
                </return>
            </javadoc>
            <method name="changeIndexSign" type="int" line="290">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="293">
                Get the number of elements stored in the map.                
                <return>
                    number of elements stored in the map                    
                </return>
            </javadoc>
            <method name="size" type="int" line="297"/>
            <javadoc line="300">
                Remove the value associated with a key.                
                <param>
                    key key to which the value is associated                    
                </param>
                <return>
                    removed value                    
                </return>
            </javadoc>
            <method name="remove" type="double" line="305">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="306"/>
                <declaration name="index" type="int" line="307"/>
                <scope line="308"/>
                <scope line="311"/>
                <declaration name="j" type="int" line="314"/>
                <scope line="315">
                    <scope line="318"/>
                </scope>
            </method>
            <javadoc line="324">
                Check if the tables contain an element associated with specified key
                  at specified index.                
                <param>
                    key key to check                    
                </param>
                <param>
                    index index to check                    
                </param>
                <return>
                    true if an element is associated with key at index                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="331">
                <params>
                    <param name="key" type="int"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="334">
                Remove an element at specified index.                
                <param>
                    index index of the element to remove                    
                </param>
                <return>
                    removed value                    
                </return>
            </javadoc>
            <method name="doRemove" type="double" line="339">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="previous" type="double" line="342"/>
            </method>
            <javadoc line="348">
                Put a value associated with a key in the map.                
                <param>
                    key key to which value is associated                    
                </param>
                <param>
                    value value to put in the map                    
                </param>
                <return>
                    previous value associated with the key                    
                </return>
            </javadoc>
            <method name="put" type="double" line="354">
                <params>
                    <param name="key" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="355"/>
                <declaration name="previous" type="double" line="356"/>
                <declaration name="newMapping" type="boolean" line="357"/>
                <scope line="358"/>
                <scope line="366">
                    <scope line="368"/>
                </scope>
            </method>
            <javadoc line="375">
                Grow the tables.                
            </javadoc>
            <method name="growTable" type="void" line="378">
                <declaration name="oldLength" type="int" line="379"/>
                <declaration name="oldKeys" type="int[]" line="380"/>
                <declaration name="oldValues" type="double[]" line="381"/>
                <declaration name="oldStates" type="byte[]" line="382"/>
                <declaration name="newLength" type="int" line="383"/>
                <declaration name="newKeys" type="int[]" line="384"/>
                <declaration name="newValues" type="double[]" line="385"/>
                <declaration name="newStates" type="byte[]" line="386"/>
                <declaration name="newMask" type="int" line="387"/>
                <scope line="388">
                    <scope line="389">
                        <declaration name="key" type="int" line="390"/>
                        <declaration name="index" type="int" line="391"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="402">
                Check if tables should grow due to increased size.                
                <return>
                    true if  tables should grow                    
                </return>
            </javadoc>
            <method name="shouldGrowTable" type="boolean" line="406"/>
            <javadoc line="409">
                Compute the hash value of a key                
                <param>
                    key key to hash                    
                </param>
                <return>
                    hash value of the key                    
                </return>
            </javadoc>
            <method name="hashOf" type="int" line="414">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="h" type="int" line="415"/>
            </method>
            <class name="Iterator" line="418">
                <javadoc line="418">
                    Iterator class for the map.                    
                </javadoc>
                <declaration name="referenceCount" type="int" line="422"/>
                <javadoc line="422">
                    Reference modification count.                    
                </javadoc>
                <declaration name="current" type="int" line="426"/>
                <javadoc line="426">
                    Index of current element.                    
                </javadoc>
                <declaration name="next" type="int" line="430"/>
                <javadoc line="430">
                    Index of next element.                    
                </javadoc>
                <javadoc line="434">
                    Simple constructor.                    
                </javadoc>
                <method name="Iterator" type="constructor" line="437">
                    <scope line="440"/>
                    <scope line="443"/>
                </method>
                <javadoc line="446">
                    Check if there is a next element in the map.                    
                    <return>
                        true if there is a next element                        
                    </return>
                </javadoc>
                <method name="hasNext" type="boolean" line="450"/>
                <javadoc line="453">
                    Get the key of current entry.                    
                    <return>
                        key of current entry                        
                    </return>
                    <exception>
                        ConcurrentModificationException if the map is modified during iteration                        
                    </exception>
                    <exception>
                        NoSuchElementException if there is no element left in the map                        
                    </exception>
                </javadoc>
                <method name="key" type="int" line="459">
                    <scope line="460"/>
                    <scope line="463"/>
                </method>
                <javadoc line="468">
                    Get the value of current entry.                    
                    <return>
                        value of current entry                        
                    </return>
                    <exception>
                        ConcurrentModificationException if the map is modified during iteration                        
                    </exception>
                    <exception>
                        NoSuchElementException if there is no element left in the map                        
                    </exception>
                </javadoc>
                <method name="value" type="double" line="474">
                    <scope line="475"/>
                    <scope line="478"/>
                </method>
                <javadoc line="483">
                    Advance iterator one step further.                    
                    <exception>
                        ConcurrentModificationException if the map is modified during iteration                        
                    </exception>
                    <exception>
                        NoSuchElementException if there is no element left in the map                        
                    </exception>
                </javadoc>
                <method name="advance" type="void" line="488">
                    <scope line="489"/>
                    <scope line="493">
                        <scope line="494"/>
                    </scope>
                    <scope line="497">
                        <scope line="499"/>
                    </scope>
                </method>
            </class>
            <javadoc line="505">
                Read a serialized object.                
                <param>
                    stream input stream                    
                </param>
                <throws>
                    IOException if object cannot be read                    
                </throws>
                <throws>
                    ClassNotFoundException if the class corresponding
                      to the serialized object cannot be found                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="512">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>