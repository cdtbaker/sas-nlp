<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ConcurrentModificationException"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="OpenIntToDoubleHashMap" line="26">
            <implements interface="Serializable"/>
            <javadoc line="26">
                Open addressed map from int to double.
                  &lt;p&gt;This class provides a dedicated map from integers to doubles with a
                  much smaller memory overhead than standard &lt;code&gt;java.util.Map&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;This class is not synchronized. The specialized iterators returned by{@link #iterator()} are fail-fast: they throw a
                  &lt;code&gt;ConcurrentModificationException&lt;/code&gt; when they detect the map has been
                  modified during iteration.&lt;/p&gt;                
                <version>
                    $Id: OpenIntToDoubleHashMap.java 1421448 2012-12-13 19:45:57Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="FREE" type="byte" line="39"/>
            <javadoc line="39">
                Status indicator for free table entries.                
            </javadoc>
            <declaration name="FULL" type="byte" line="42"/>
            <javadoc line="42">
                Status indicator for full table entries.                
            </javadoc>
            <declaration name="REMOVED" type="byte" line="45"/>
            <javadoc line="45">
                Status indicator for removed table entries.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="48"/>
            <javadoc line="48">
                Serializable version identifier                
            </javadoc>
            <declaration name="LOAD_FACTOR" type="float" line="51"/>
            <javadoc line="51">
                Load factor for the map.                
            </javadoc>
            <declaration name="DEFAULT_EXPECTED_SIZE" type="int" line="54"/>
            <javadoc line="54">
                Default starting size.
                  &lt;p&gt;This must be a power of two for bit mask to work properly. &lt;/p&gt;                
            </javadoc>
            <declaration name="RESIZE_MULTIPLIER" type="int" line="59"/>
            <javadoc line="59">
                Multiplier for size growth when map fills up.
                  &lt;p&gt;This must be a power of two for bit mask to work properly. &lt;/p&gt;                
            </javadoc>
            <declaration name="PERTURB_SHIFT" type="int" line="64"/>
            <javadoc line="64">
                Number of bits to perturb the index when probing for collision resolution.                
            </javadoc>
            <declaration name="keys" type="int[]" line="67"/>
            <javadoc line="67">
                Keys table.                
            </javadoc>
            <declaration name="values" type="double[]" line="70"/>
            <javadoc line="70">
                Values table.                
            </javadoc>
            <declaration name="states" type="byte[]" line="73"/>
            <javadoc line="73">
                States table.                
            </javadoc>
            <declaration name="missingEntries" type="double" line="76"/>
            <javadoc line="76">
                Return value for missing entries.                
            </javadoc>
            <declaration name="size" type="int" line="79"/>
            <javadoc line="79">
                Current size of the map.                
            </javadoc>
            <declaration name="mask" type="int" line="82"/>
            <javadoc line="82">
                Bit mask for hash values.                
            </javadoc>
            <declaration name="count" type="int" line="85"/>
            <javadoc line="85">
                Modifications count.                
            </javadoc>
            <javadoc line="88">
                Build an empty map with default size and using NaN for missing entries.                
            </javadoc>
            <method name="OpenIntToDoubleHashMap" type="constructor" line="91"/>
            <javadoc line="95">
                Build an empty map with default size                
                <param>
                    missingEntries value to return when a missing entry is fetched                    
                </param>
            </javadoc>
            <method name="OpenIntToDoubleHashMap" type="constructor" line="99">
                <params>
                    <param name="missingEntries" type="double"/>
                </params>
            </method>
            <javadoc line="103">
                Build an empty map with specified size and using NaN for missing entries.                
                <param>
                    expectedSize expected number of elements in the map                    
                </param>
            </javadoc>
            <method name="OpenIntToDoubleHashMap" type="constructor" line="107">
                <params>
                    <param name="expectedSize" type="int"/>
                </params>
            </method>
            <javadoc line="111">
                Build an empty map with specified size.                
                <param>
                    expectedSize expected number of elements in the map                    
                </param>
                <param>
                    missingEntries value to return when a missing entry is fetched                    
                </param>
            </javadoc>
            <method name="OpenIntToDoubleHashMap" type="constructor" line="117">
                <params>
                    <param name="expectedSize" type="int"/>
                    <param name="missingEntries" type="double"/>
                </params>
                <declaration name="capacity" type="int" line="118"/>
            </method>
            <javadoc line="126">
                Copy constructor.                
                <param>
                    source map to copy                    
                </param>
            </javadoc>
            <method name="OpenIntToDoubleHashMap" type="constructor" line="130">
                <params>
                    <param name="source" type="OpenIntToDoubleHashMap"/>
                </params>
                <declaration name="length" type="int" line="131"/>
            </method>
            <javadoc line="144">
                Compute the capacity needed for a given size.                
                <param>
                    expectedSize expected size of the map                    
                </param>
                <return>
                    capacity to use for the specified size                    
                </return>
            </javadoc>
            <method name="computeCapacity" type="int" line="149">
                <params>
                    <param name="expectedSize" type="int"/>
                </params>
                <scope line="150"/>
                <declaration name="capacity" type="int" line="153"/>
                <declaration name="powerOfTwo" type="int" line="154"/>
                <scope line="155"/>
            </method>
            <javadoc line="161">
                Find the smallest power of two greater than the input value                
                <param>
                    i input value                    
                </param>
                <return>
                    smallest power of two greater than the input value                    
                </return>
            </javadoc>
            <method name="nextPowerOfTwo" type="int" line="166">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="170">
                Get the stored value associated with the given key                
                <param>
                    key key associated with the data                    
                </param>
                <return>
                    data associated with the key                    
                </return>
            </javadoc>
            <method name="get" type="double" line="175">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="177"/>
                <declaration name="index" type="int" line="178"/>
                <scope line="179"/>
                <scope line="183"/>
                <declaration name="j" type="int" line="187"/>
                <scope line="188">
                    <scope line="191"/>
                </scope>
            </method>
            <javadoc line="200">
                Check if a value is associated with a key.                
                <param>
                    key key to check                    
                </param>
                <return>
                    true if a value is associated with key                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="205">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="207"/>
                <declaration name="index" type="int" line="208"/>
                <scope line="209"/>
                <scope line="213"/>
                <declaration name="j" type="int" line="217"/>
                <scope line="218">
                    <scope line="221"/>
                </scope>
            </method>
            <javadoc line="230">
                Get an iterator over map elements.
                  &lt;p&gt;The specialized iterators returned are fail-fast: they throw a
                  &lt;code&gt;ConcurrentModificationException&lt;/code&gt; when they detect the map
                  has been modified during iteration.&lt;/p&gt;                
                <return>
                    iterator over the map elements                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator" line="237"/>
            <javadoc line="241">
                Perturb the hash for starting probing.                
                <param>
                    hash initial hash                    
                </param>
                <return>
                    perturbed hash                    
                </return>
            </javadoc>
            <method name="perturb" type="int" line="246">
                <params>
                    <param name="hash" type="int"/>
                </params>
            </method>
            <javadoc line="250">
                Find the index at which a key should be inserted                
                <param>
                    key key to lookup                    
                </param>
                <return>
                    index at which key should be inserted                    
                </return>
            </javadoc>
            <method name="findInsertionIndex" type="int" line="255">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="259">
                Find the index at which a key should be inserted                
                <param>
                    keys keys table                    
                </param>
                <param>
                    states states table                    
                </param>
                <param>
                    key key to lookup                    
                </param>
                <param>
                    mask bit mask for hash values                    
                </param>
                <return>
                    index at which key should be inserted                    
                </return>
            </javadoc>
            <method name="findInsertionIndex" type="int" line="268">
                <params>
                    <param name="keys" type="int[]"/>
                    <param name="states" type="byte[]"/>
                    <param name="key" type="int"/>
                    <param name="mask" type="int"/>
                </params>
                <comment line="294">
                    due to the loop exit condition,                    
                </comment>
                <comment line="295">
                    if (states[index] == FULL) then keys[index] == key                    
                </comment>
                <declaration name="hash" type="int" line="269"/>
                <declaration name="index" type="int" line="270"/>
                <scope line="271"/>
                <scope line="273"/>
                <declaration name="perturb" type="int" line="277"/>
                <declaration name="j" type="int" line="278"/>
                <scope line="279">
                    <scope line="280">
                        <scope line="285"/>
                    </scope>
                </scope>
                <scope line="291"/>
                <scope line="293"/>
                <declaration name="firstRemoved" type="int" line="299"/>
                <scope line="300">
                    <scope line="304"/>
                    <scope line="306"/>
                </scope>
            </method>
            <javadoc line="316">
                Compute next probe for collision resolution                
                <param>
                    perturb perturbed hash                    
                </param>
                <param>
                    j previous probe                    
                </param>
                <return>
                    next probe                    
                </return>
            </javadoc>
            <method name="probe" type="int" line="322">
                <params>
                    <param name="perturb" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <javadoc line="326">
                Change the index sign                
                <param>
                    index initial index                    
                </param>
                <return>
                    changed index                    
                </return>
            </javadoc>
            <method name="changeIndexSign" type="int" line="331">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="335">
                Get the number of elements stored in the map.                
                <return>
                    number of elements stored in the map                    
                </return>
            </javadoc>
            <method name="size" type="int" line="339"/>
            <javadoc line="344">
                Remove the value associated with a key.                
                <param>
                    key key to which the value is associated                    
                </param>
                <return>
                    removed value                    
                </return>
            </javadoc>
            <method name="remove" type="double" line="349">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="351"/>
                <declaration name="index" type="int" line="352"/>
                <scope line="353"/>
                <scope line="357"/>
                <declaration name="j" type="int" line="361"/>
                <scope line="362">
                    <scope line="365"/>
                </scope>
            </method>
            <javadoc line="374">
                Check if the tables contain an element associated with specified key
                  at specified index.                
                <param>
                    key key to check                    
                </param>
                <param>
                    index index to check                    
                </param>
                <return>
                    true if an element is associated with key at index                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="381">
                <params>
                    <param name="key" type="int"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="385">
                Remove an element at specified index.                
                <param>
                    index index of the element to remove                    
                </param>
                <return>
                    removed value                    
                </return>
            </javadoc>
            <method name="doRemove" type="double" line="390">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="previous" type="double" line="393"/>
            </method>
            <javadoc line="400">
                Put a value associated with a key in the map.                
                <param>
                    key key to which value is associated                    
                </param>
                <param>
                    value value to put in the map                    
                </param>
                <return>
                    previous value associated with the key                    
                </return>
            </javadoc>
            <method name="put" type="double" line="406">
                <params>
                    <param name="key" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="407"/>
                <declaration name="previous" type="double" line="408"/>
                <declaration name="newMapping" type="boolean" line="409"/>
                <scope line="410"/>
                <scope line="418">
                    <scope line="420"/>
                </scope>
            </method>
            <javadoc line="429">
                Grow the tables.                
            </javadoc>
            <method name="growTable" type="void" line="432">
                <declaration name="oldLength" type="int" line="434"/>
                <declaration name="oldKeys" type="int[]" line="435"/>
                <declaration name="oldValues" type="double[]" line="436"/>
                <declaration name="oldStates" type="byte[]" line="437"/>
                <declaration name="newLength" type="int" line="439"/>
                <declaration name="newKeys" type="int[]" line="440"/>
                <declaration name="newValues" type="double[]" line="441"/>
                <declaration name="newStates" type="byte[]" line="442"/>
                <declaration name="newMask" type="int" line="443"/>
                <scope line="444">
                    <scope line="445">
                        <declaration name="key" type="int" line="446"/>
                        <declaration name="index" type="int" line="447"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="461">
                Check if tables should grow due to increased size.                
                <return>
                    true if  tables should grow                    
                </return>
            </javadoc>
            <method name="shouldGrowTable" type="boolean" line="465"/>
            <javadoc line="469">
                Compute the hash value of a key                
                <param>
                    key key to hash                    
                </param>
                <return>
                    hash value of the key                    
                </return>
            </javadoc>
            <method name="hashOf" type="int" line="474">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="h" type="int" line="475"/>
            </method>
            <class name="Iterator" line="480">
                <javadoc line="480">
                    Iterator class for the map.                    
                </javadoc>
                <declaration name="referenceCount" type="int" line="483"/>
                <javadoc line="483">
                    Reference modification count.                    
                </javadoc>
                <declaration name="current" type="int" line="486"/>
                <javadoc line="486">
                    Index of current element.                    
                </javadoc>
                <declaration name="next" type="int" line="489"/>
                <javadoc line="489">
                    Index of next element.                    
                </javadoc>
                <javadoc line="492">
                    Simple constructor.                    
                </javadoc>
                <method name="Iterator" type="constructor" line="495">
                    <comment line="497">
                        preserve the modification count of the map to detect concurrent modifications later                        
                    </comment>
                    <comment line="500">
                        initialize current index                        
                    </comment>
                    <comment line="504">
                        NOPMD                        
                    </comment>
                    <comment line="505">
                        ignored                        
                    </comment>
                    <scope line="502"/>
                    <scope line="504"/>
                </method>
                <javadoc line="510">
                    Check if there is a next element in the map.                    
                    <return>
                        true if there is a next element                        
                    </return>
                </javadoc>
                <method name="hasNext" type="boolean" line="514"/>
                <javadoc line="518">
                    Get the key of current entry.                    
                    <return>
                        key of current entry                        
                    </return>
                    <exception>
                        ConcurrentModificationException if the map is modified during iteration                        
                    </exception>
                    <exception>
                        NoSuchElementException if there is no element left in the map                        
                    </exception>
                </javadoc>
                <method name="key" type="int" line="525">
                    <scope line="526"/>
                    <scope line="529"/>
                </method>
                <javadoc line="535">
                    Get the value of current entry.                    
                    <return>
                        value of current entry                        
                    </return>
                    <exception>
                        ConcurrentModificationException if the map is modified during iteration                        
                    </exception>
                    <exception>
                        NoSuchElementException if there is no element left in the map                        
                    </exception>
                </javadoc>
                <method name="value" type="double" line="542">
                    <scope line="543"/>
                    <scope line="546"/>
                </method>
                <javadoc line="552">
                    Advance iterator one step further.                    
                    <exception>
                        ConcurrentModificationException if the map is modified during iteration                        
                    </exception>
                    <exception>
                        NoSuchElementException if there is no element left in the map                        
                    </exception>
                </javadoc>
                <method name="advance" type="void" line="558">
                    <comment line="564">
                        advance on step                        
                    </comment>
                    <comment line="567">
                        prepare next step                        
                    </comment>
                    <comment line="569">
                        NOPMD                        
                    </comment>
                    <comment line="570">
                        nothing to do                        
                    </comment>
                    <scope line="560"/>
                    <scope line="568">
                        <scope line="569"/>
                    </scope>
                    <scope line="572">
                        <scope line="574"/>
                    </scope>
                </method>
            </class>
            <javadoc line="583">
                Read a serialized object.                
                <param>
                    stream input stream                    
                </param>
                <throws>
                    IOException if object cannot be read                    
                </throws>
                <throws>
                    ClassNotFoundException if the class corresponding
                      to the serialized object cannot be found                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="591">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>