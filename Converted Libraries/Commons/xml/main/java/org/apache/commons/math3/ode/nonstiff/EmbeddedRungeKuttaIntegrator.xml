<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.ode.ExpandableStatefulODE"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="EmbeddedRungeKuttaIntegrator" line="27">
            <extends class="AdaptiveStepsizeIntegrator"/>
            <javadoc line="27">
                This class implements the common part of all embedded Runge-Kutta
                  integrators for Ordinary Differential Equations.
                  &lt;p&gt;These methods are embedded explicit Runge-Kutta methods with two
                  sets of coefficients allowing to estimate the error, their Butcher
                  arrays are as follows :
                  &lt;pre&gt;
                  0  |
                  c2  | a21
                  c3  | a31  a32
                  ... |        ...
                  cs  | as1  as2  ...  ass-1
                  |--------------------------
                  |  b1   b2  ...   bs-1  bs
                  |  b&apos;1  b&apos;2 ...   b&apos;s-1 b&apos;s
                  &lt;/pre&gt;
                  &lt;/p&gt;
                  &lt;p&gt;In fact, we rather use the array defined by ej = bj - b&apos;j to
                  compute directly the error rather than computing two estimates and
                  then comparing them.&lt;/p&gt;
                  &lt;p&gt;Some methods are qualified as &lt;i&gt;fsal&lt;/i&gt; (first same as last)
                  methods. This means the last evaluation of the derivatives in one
                  step is the same as the first in the next step. Then, this
                  evaluation can be reused from one step to the next one and the cost
                  of such a method is really s-1 evaluations despite the method still
                  has s stages. This behaviour is true only for successful steps, if
                  the step is rejected after the error estimation phase, no
                  evaluation is saved. For an &lt;i&gt;fsal&lt;/i&gt; method, we have cs = 1 and
                  asi = bi for all i.&lt;/p&gt;                
                <version>
                    $Id: EmbeddedRungeKuttaIntegrator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="fsal" type="boolean" line="67"/>
            <javadoc line="67">
                Indicator for &lt;i&gt;fsal&lt;/i&gt; methods.                
            </javadoc>
            <declaration name="c" type="double[]" line="70"/>
            <javadoc line="70">
                Time steps from Butcher array (without the first zero).                
            </javadoc>
            <declaration name="a" type="double[][]" line="73"/>
            <javadoc line="73">
                Internal weights from Butcher array (without the first empty row).                
            </javadoc>
            <declaration name="b" type="double[]" line="76"/>
            <javadoc line="76">
                External weights for the high order method from Butcher array.                
            </javadoc>
            <declaration name="prototype" type="RungeKuttaStepInterpolator" line="79"/>
            <javadoc line="79">
                Prototype of the step interpolator.                
            </javadoc>
            <declaration name="exp" type="double" line="82"/>
            <javadoc line="82">
                Stepsize control exponent.                
            </javadoc>
            <declaration name="safety" type="double" line="85"/>
            <javadoc line="85">
                Safety factor for stepsize control.                
            </javadoc>
            <declaration name="minReduction" type="double" line="88"/>
            <javadoc line="88">
                Minimal reduction factor for stepsize control.                
            </javadoc>
            <declaration name="maxGrowth" type="double" line="91"/>
            <javadoc line="91">
                Maximal growth factor for stepsize control.                
            </javadoc>
            <javadoc line="94">
                Build a Runge-Kutta integrator with the given Butcher array.                
                <param>
                    name name of the method                    
                </param>
                <param>
                    fsal indicate that the method is an <i>fsal</i>                    
                </param>
                <param>
                    c time steps from Butcher array (without the first zero)                    
                </param>
                <param>
                    a internal weights from Butcher array (without the first empty row)                    
                </param>
                <param>
                    b propagation weights for the high order method from Butcher array                    
                </param>
                <param>
                    prototype prototype of the step interpolator to use                    
                </param>
                <param>
                    minStep minimal step (sign is irrelevant, regardless of
                      integration direction, forward or backward), the last step can
                      be smaller than this                    
                </param>
                <param>
                    maxStep maximal step (sign is irrelevant, regardless of
                      integration direction, forward or backward), the last step can
                      be smaller than this                    
                </param>
                <param>
                    scalAbsoluteTolerance allowed absolute error                    
                </param>
                <param>
                    scalRelativeTolerance allowed relative error                    
                </param>
            </javadoc>
            <method name="EmbeddedRungeKuttaIntegrator" type="constructor" line="115">
                <params>
                    <param name="name" type="String"/>
                    <param name="fsal" type="boolean"/>
                    <param name="c" type="double[]"/>
                    <param name="a" type="double[][]"/>
                    <param name="b" type="double[]"/>
                    <param name="prototype" type="RungeKuttaStepInterpolator"/>
                    <param name="minStep" type="double"/>
                    <param name="maxStep" type="double"/>
                    <param name="scalAbsoluteTolerance" type="double"/>
                    <param name="scalRelativeTolerance" type="double"/>
                </params>
                <comment line="127">
                    set the default values of the algorithm control parameters                    
                </comment>
            </method>
            <javadoc line="134">
                Build a Runge-Kutta integrator with the given Butcher array.                
                <param>
                    name name of the method                    
                </param>
                <param>
                    fsal indicate that the method is an <i>fsal</i>                    
                </param>
                <param>
                    c time steps from Butcher array (without the first zero)                    
                </param>
                <param>
                    a internal weights from Butcher array (without the first empty row)                    
                </param>
                <param>
                    b propagation weights for the high order method from Butcher array                    
                </param>
                <param>
                    prototype prototype of the step interpolator to use                    
                </param>
                <param>
                    minStep minimal step (must be positive even for backward
                      integration), the last step can be smaller than this                    
                </param>
                <param>
                    maxStep maximal step (must be positive even for backward
                      integration)                    
                </param>
                <param>
                    vecAbsoluteTolerance allowed absolute error                    
                </param>
                <param>
                    vecRelativeTolerance allowed relative error                    
                </param>
            </javadoc>
            <method name="EmbeddedRungeKuttaIntegrator" type="constructor" line="153">
                <params>
                    <param name="name" type="String"/>
                    <param name="fsal" type="boolean"/>
                    <param name="c" type="double[]"/>
                    <param name="a" type="double[][]"/>
                    <param name="b" type="double[]"/>
                    <param name="prototype" type="RungeKuttaStepInterpolator"/>
                    <param name="minStep" type="double"/>
                    <param name="maxStep" type="double"/>
                    <param name="vecAbsoluteTolerance" type="double[]"/>
                    <param name="vecRelativeTolerance" type="double[]"/>
                </params>
                <comment line="165">
                    set the default values of the algorithm control parameters                    
                </comment>
            </method>
            <method name="getOrder" type="int" line="172"/>
            <javadoc line="172">
                Get the order of the method.                
                <return>
                    order of the method                    
                </return>
            </javadoc>
            <javadoc line="177">
                Get the safety factor for stepsize control.                
                <return>
                    safety factor                    
                </return>
            </javadoc>
            <method name="getSafety" type="double" line="180"/>
            <javadoc line="184">
                Set the safety factor for stepsize control.                
                <param>
                    safety safety factor                    
                </param>
            </javadoc>
            <method name="setSafety" type="void" line="187">
                <params>
                    <param name="safety" type="double"/>
                </params>
            </method>
            <javadoc line="191">
                {@inheritDoc}                
            </javadoc>
            <method name="integrate" type="void" line="195">
                <params>
                    <param name="equations" type="ExpandableStatefulODE"/>
                    <param name="t" type="double"/>
                </params>
                <comment line="201">
                    create some internal working arrays                    
                </comment>
                <comment line="209">
                    set up an interpolator sharing the integrator arrays                    
                </comment>
                <comment line="215">
                    set up integration control objects                    
                </comment>
                <comment line="221">
                    main integration loop                    
                </comment>
                <comment line="227">
                    iterate over step size, ensuring local normalized error is smaller than 1                    
                </comment>
                <comment line="232">
                    first stage                    
                </comment>
                <comment line="263">
                    next stages                    
                </comment>
                <comment line="278">
                    estimate the state at the end of the step                    
                </comment>
                <comment line="287">
                    estimate the error at the end of the step                    
                </comment>
                <comment line="290">
                    reject the step and attempt to reduce error by stepsize control                    
                </comment>
                <comment line="299">
                    local error is small enough: accept the step, trigger events and step handlers                    
                </comment>
                <comment line="308">
                    prepare next step                    
                </comment>
                <comment line="312">
                    save the last evaluation for the next step                    
                </comment>
                <comment line="316">
                    stepsize control for next step                    
                </comment>
                <comment line="334">
                    dispatch results                    
                </comment>
                <declaration name="forward" type="boolean" line="199"/>
                <declaration name="y0" type="double[]" line="202"/>
                <declaration name="y" type="double[]" line="203"/>
                <declaration name="stages" type="int" line="204"/>
                <declaration name="yDotK" type="double[][]" line="205"/>
                <declaration name="yTmp" type="double[]" line="206"/>
                <declaration name="yDotTmp" type="double[]" line="207"/>
                <declaration name="interpolator" type="RungeKuttaStepInterpolator" line="210"/>
                <declaration name="hNew" type="double" line="217"/>
                <declaration name="firstTime" type="boolean" line="218"/>
                <scope line="223">
                    <declaration name="error" type="double" line="228"/>
                    <scope line="229">
                        <scope line="231"/>
                        <scope line="236">
                            <declaration name="scale" type="double[]" line="237"/>
                            <scope line="238">
                                <scope line="239"/>
                            </scope>
                            <scope line="242">
                                <scope line="243"/>
                            </scope>
                        </scope>
                        <scope line="253">
                            <scope line="254"/>
                        </scope>
                        <scope line="257">
                            <scope line="258"/>
                        </scope>
                        <scope line="264">
                            <scope line="266">
                                <declaration name="sum" type="double" line="267"/>
                                <scope line="268"/>
                            </scope>
                        </scope>
                        <scope line="279">
                            <declaration name="sum" type="double" line="280"/>
                            <scope line="281"/>
                        </scope>
                        <scope line="289">
                            <declaration name="factor" type="double" line="291"/>
                        </scope>
                    </scope>
                    <scope line="306">
                        <scope line="311"/>
                        <declaration name="factor" type="double" line="317"/>
                        <declaration name="scaledH" type="double" line="319"/>
                        <declaration name="nextT" type="double" line="320"/>
                        <declaration name="nextIsLast" type="boolean" line="321"/>
                        <declaration name="filteredNextT" type="double" line="324"/>
                        <declaration name="filteredNextIsLast" type="boolean" line="325"/>
                        <scope line="326"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="342">
                Get the minimal reduction factor for stepsize control.                
                <return>
                    minimal reduction factor                    
                </return>
            </javadoc>
            <method name="getMinReduction" type="double" line="345"/>
            <javadoc line="349">
                Set the minimal reduction factor for stepsize control.                
                <param>
                    minReduction minimal reduction factor                    
                </param>
            </javadoc>
            <method name="setMinReduction" type="void" line="352">
                <params>
                    <param name="minReduction" type="double"/>
                </params>
            </method>
            <javadoc line="356">
                Get the maximal growth factor for stepsize control.                
                <return>
                    maximal growth factor                    
                </return>
            </javadoc>
            <method name="getMaxGrowth" type="double" line="359"/>
            <javadoc line="363">
                Set the maximal growth factor for stepsize control.                
                <param>
                    maxGrowth maximal growth factor                    
                </param>
            </javadoc>
            <method name="setMaxGrowth" type="void" line="366">
                <params>
                    <param name="maxGrowth" type="double"/>
                </params>
            </method>
            <method name="estimateError" type="double" line="370"/>
            <javadoc line="370">
                Compute the error ratio.                
                <param>
                    yDotK derivatives computed during the first stages                    
                </param>
                <param>
                    y0 estimate of the step at the start of the step                    
                </param>
                <param>
                    y1 estimate of the step at the end of the step                    
                </param>
                <param>
                    h  current step                    
                </param>
                <return>
                    error ratio, greater than 1 if step should be rejected                    
                </return>
            </javadoc>
        </class>
    </source>