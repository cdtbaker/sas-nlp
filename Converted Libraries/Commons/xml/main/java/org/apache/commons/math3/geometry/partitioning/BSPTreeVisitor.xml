<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.partitioning">
        <import package="org.apache.commons.math3.geometry.Space"/>
        <interface name="BSPTreeVisitor">
            <type_params>
                <type_param name="S"/>
            </type_params>
            <javadoc line="3">
                This interface is used to visit {@link BSPTree BSP tree} nodes.
                  &lt;p&gt;Navigation through {@link BSPTree BSP trees} can be done using
                  two different point of views:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  the first one is in a node-oriented way using the {@link BSPTree#getPlus}, {@link BSPTree#getMinus} and {@link BSPTree#getParent} methods. Terminal nodes without associated{@link SubHyperplane sub-hyperplanes} can be visited this way,
                  there is no constraint in the visit order, and it is possible
                  to visit either all nodes or only a subset of the nodes
                  &lt;/li&gt;
                  &lt;li&gt;
                  the second one is in a sub-hyperplane-oriented way using
                  classes implementing this interface which obeys the visitor
                  design pattern. The visit order is provided by the visitor as
                  each node is first encountered. Each node is visited exactly
                  once.
                  &lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    <S>
                      Type of the space.                    
                </param>
                <see>
                    BSPTree                    
                </see>
                <see>
                    SubHyperplane                    
                </see>
                <version>
                    $Id: BSPTreeVisitor.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="Order" type="enum" line="29"/>
            <javadoc line="29">
                Enumerate for visit order with respect to plus sub-tree, minus sub-tree and cut sub-hyperplane.                
            </javadoc>
            <scope line="32"/>
            <method name="visitOrder" type="Order" line="57"/>
            <javadoc line="57">
                Determine the visit order for this node.
                  &lt;p&gt;Before attempting to visit an internal node, this method is
                  called to determine the desired ordering of the visit. It is
                  guaranteed that this method will be called before {@link #visitInternalNode visitInternalNode} for a given node, it will be
                  called exactly once for each internal node.&lt;/p&gt;                
                <param>
                    node BSP node guaranteed to have a non null cut sub-hyperplane                    
                </param>
                <return>
                    desired visit order, must be one of{@link Order#PLUS_MINUS_SUB}, {@link Order#PLUS_SUB_MINUS},{@link Order#MINUS_PLUS_SUB}, {@link Order#MINUS_SUB_PLUS},{@link Order#SUB_PLUS_MINUS}, {@link Order#SUB_MINUS_PLUS}                    
                </return>
            </javadoc>
            <method name="visitInternalNode" type="void" line="67"/>
            <javadoc line="67">
                Visit a BSP tree node node having a non-null sub-hyperplane.
                  &lt;p&gt;It is guaranteed that this method will be called after {@link #visitOrder visitOrder} has been called for a given node,
                  it wil be called exactly once for each internal node.&lt;/p&gt;                
                <param>
                    node BSP node guaranteed to have a non null cut sub-hyperplane                    
                </param>
                <see>
                    #visitLeafNode                    
                </see>
            </javadoc>
            <method name="visitLeafNode" type="void" line="75"/>
            <javadoc line="75">
                Visit a leaf BSP tree node node having a null sub-hyperplane.                
                <param>
                    node leaf BSP node having a null sub-hyperplane                    
                </param>
                <see>
                    #visitInternalNode                    
                </see>
            </javadoc>
        </interface>
    </source>