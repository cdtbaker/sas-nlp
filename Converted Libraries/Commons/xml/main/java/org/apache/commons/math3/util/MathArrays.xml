<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.lang.reflect.Array"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="MathArrays" line="18">
            <javadoc line="18">
                Arrays utilities.                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: MathArrays.java 1462423 2013-03-29 07:25:18Z luc $                    
                </version>
            </javadoc>
            <declaration name="SPLIT_FACTOR" type="int" line="24"/>
            <javadoc line="24">
                Factor used for splitting double numbers: n = 2^27 + 1 (i.e. {@value}).                
            </javadoc>
            <javadoc line="28">
                Private constructor.                
            </javadoc>
            <method name="MathArrays" type="constructor" line="31"/>
            <interface name="Function">
                <javadoc line="33">
                    Real-valued function that operate on an array or a part of it.                    
                    <since>
                        3.1                        
                    </since>
                </javadoc>
                <method name="evaluate" type="double" line="38"/>
                <javadoc line="38">
                    Operates on an entire array.                    
                    <param>
                        array Array to operate on.                        
                    </param>
                    <return>
                        the result of the operation.                        
                    </return>
                </javadoc>
                <method name="evaluate" type="double" line="44"/>
                <javadoc line="44">
                    @param array Array to operate on.                    
                    <param>
                        startIndex Index of the first element to take into account.                        
                    </param>
                    <param>
                        numElements Number of elements to take into account.                        
                    </param>
                    <return>
                        the result of the operation.                        
                    </return>
                </javadoc>
            </interface>
            <javadoc line="52">
                Create a copy of an array scaled by a value.                
                <param>
                    arr Array to scale.                    
                </param>
                <param>
                    val Scalar.                    
                </param>
                <return>
                    scaled copy of array with each entry multiplied by val.                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="scale" type="double[]" line="59">
                <params>
                    <param name="val" type="double"/>
                    <param name="arr" type="double[]"/>
                </params>
                <declaration name="newArr" type="double[]" line="60"/>
                <scope line="61"/>
            </method>
            <javadoc line="66">
                &lt;p&gt;Multiply each element of an array by a value.&lt;/p&gt;
                  &lt;p&gt;The array is modified in place (no copy is created).&lt;/p&gt;                
                <param>
                    arr Array to scale                    
                </param>
                <param>
                    val Scalar                    
                </param>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="scaleInPlace" type="void" line="73">
                <params>
                    <param name="val" type="double"/>
                    <param name="arr" type="double[]"/>
                </params>
                <scope line="74"/>
            </method>
            <javadoc line="78">
                Creates an array whose contents will be the element-by-element
                  addition of the arguments.                
                <param>
                    a First term of the addition.                    
                </param>
                <param>
                    b Second term of the addition.                    
                </param>
                <return>
                    a new array {@code r} where {@code r[i] = a[i] + b[i]}.                    
                </return>
                <throws>
                    DimensionMismatchException if the array lengths differ.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="ebeAdd" type="double[]" line="87">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="b" type="double[]"/>
                </params>
                <scope line="88"/>
                <declaration name="result" type="double[]" line="91"/>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                Creates an array whose contents will be the element-by-element
                  subtraction of the second argument from the first.                
                <param>
                    a First term.                    
                </param>
                <param>
                    b Element to be subtracted.                    
                </param>
                <return>
                    a new array {@code r} where {@code r[i] = a[i] - b[i]}.                    
                </return>
                <throws>
                    DimensionMismatchException if the array lengths differ.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="ebeSubtract" type="double[]" line="106">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="b" type="double[]"/>
                </params>
                <scope line="107"/>
                <declaration name="result" type="double[]" line="110"/>
                <scope line="111"/>
            </method>
            <javadoc line="116">
                Creates an array whose contents will be the element-by-element
                  multiplication of the arguments.                
                <param>
                    a First factor of the multiplication.                    
                </param>
                <param>
                    b Second factor of the multiplication.                    
                </param>
                <return>
                    a new array {@code r} where {@code r[i] = a[i]  b[i]}.                    
                </return>
                <throws>
                    DimensionMismatchException if the array lengths differ.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="ebeMultiply" type="double[]" line="125">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="b" type="double[]"/>
                </params>
                <scope line="126"/>
                <declaration name="result" type="double[]" line="129"/>
                <scope line="130"/>
            </method>
            <javadoc line="135">
                Creates an array whose contents will be the element-by-element
                  division of the first argument by the second.                
                <param>
                    a Numerator of the division.                    
                </param>
                <param>
                    b Denominator of the division.                    
                </param>
                <return>
                    a new array {@code r} where {@code r[i] = a[i] / b[i]}.                    
                </return>
                <throws>
                    DimensionMismatchException if the array lengths differ.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="ebeDivide" type="double[]" line="144">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="b" type="double[]"/>
                </params>
                <scope line="145"/>
                <declaration name="result" type="double[]" line="148"/>
                <scope line="149"/>
            </method>
            <javadoc line="154">
                Calculates the L&lt;sub&gt;1&lt;/sub&gt; (sum of abs) distance between two points.                
                <param>
                    p1 the first point                    
                </param>
                <param>
                    p2 the second point                    
                </param>
                <return>
                    the L<sub>1</sub> distance between the two points                    
                </return>
            </javadoc>
            <method name="distance1" type="double" line="160">
                <params>
                    <param name="p1" type="double[]"/>
                    <param name="p2" type="double[]"/>
                </params>
                <declaration name="sum" type="double" line="161"/>
                <scope line="162"/>
            </method>
            <javadoc line="167">
                Calculates the L&lt;sub&gt;1&lt;/sub&gt; (sum of abs) distance between two points.                
                <param>
                    p1 the first point                    
                </param>
                <param>
                    p2 the second point                    
                </param>
                <return>
                    the L<sub>1</sub> distance between the two points                    
                </return>
            </javadoc>
            <method name="distance1" type="int" line="173">
                <params>
                    <param name="p1" type="int[]"/>
                    <param name="p2" type="int[]"/>
                </params>
                <declaration name="sum" type="int" line="174"/>
                <scope line="175"/>
            </method>
            <javadoc line="180">
                Calculates the L&lt;sub&gt;2&lt;/sub&gt; (Euclidean) distance between two points.                
                <param>
                    p1 the first point                    
                </param>
                <param>
                    p2 the second point                    
                </param>
                <return>
                    the L<sub>2</sub> distance between the two points                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="186">
                <params>
                    <param name="p1" type="double[]"/>
                    <param name="p2" type="double[]"/>
                </params>
                <declaration name="sum" type="double" line="187"/>
                <scope line="188">
                    <declaration name="dp" type="double" line="189"/>
                </scope>
            </method>
            <javadoc line="194">
                Calculates the L&lt;sub&gt;2&lt;/sub&gt; (Euclidean) distance between two points.                
                <param>
                    p1 the first point                    
                </param>
                <param>
                    p2 the second point                    
                </param>
                <return>
                    the L<sub>2</sub> distance between the two points                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="200">
                <params>
                    <param name="p1" type="int[]"/>
                    <param name="p2" type="int[]"/>
                </params>
                <declaration name="sum" type="double" line="201"/>
                <scope line="202">
                    <declaration name="dp" type="double" line="203"/>
                </scope>
            </method>
            <javadoc line="208">
                Calculates the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; (max of abs) distance between two points.                
                <param>
                    p1 the first point                    
                </param>
                <param>
                    p2 the second point                    
                </param>
                <return>
                    the L<sub>&infin;</sub> distance between the two points                    
                </return>
            </javadoc>
            <method name="distanceInf" type="double" line="214">
                <params>
                    <param name="p1" type="double[]"/>
                    <param name="p2" type="double[]"/>
                </params>
                <declaration name="max" type="double" line="215"/>
                <scope line="216"/>
            </method>
            <javadoc line="221">
                Calculates the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; (max of abs) distance between two points.                
                <param>
                    p1 the first point                    
                </param>
                <param>
                    p2 the second point                    
                </param>
                <return>
                    the L<sub>&infin;</sub> distance between the two points                    
                </return>
            </javadoc>
            <method name="distanceInf" type="int" line="227">
                <params>
                    <param name="p1" type="int[]"/>
                    <param name="p2" type="int[]"/>
                </params>
                <declaration name="max" type="int" line="228"/>
                <scope line="229"/>
            </method>
            <declaration name="OrderDirection" type="enum" line="234"/>
            <javadoc line="234">
                Specification of ordering direction.                
            </javadoc>
            <scope line="237"/>
            <javadoc line="244">
                Check that an array is monotonically increasing or decreasing.                
                <param>
                    <T>
                      the type of the elements in the specified array                    
                </param>
                <param>
                    val Values.                    
                </param>
                <param>
                    dir Ordering direction.                    
                </param>
                <param>
                    strict Whether the order should be strict.                    
                </param>
                <return>
                    {@code true} if sorted, {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isMonotonic" type="boolean" line="253">
                <params>
                    <param name="val" type="T[]"/>
                    <param name="dir" type="OrderDirection"/>
                    <param name="strict" type="boolean"/>
                </params>
                <declaration name="previous" type="T" line="254"/>
                <declaration name="max" type="int" line="255"/>
                <scope line="256">
                    <declaration name="comp" type="int" line="257"/>
                    <scope line="261">
                        <scope line="262"/>
                    </scope>
                    <scope line="266">
                        <scope line="267"/>
                    </scope>
                    <scope line="274">
                        <scope line="275"/>
                    </scope>
                    <scope line="279">
                        <scope line="280"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="292">
                Check that an array is monotonically increasing or decreasing.                
                <param>
                    val Values.                    
                </param>
                <param>
                    dir Ordering direction.                    
                </param>
                <param>
                    strict Whether the order should be strict.                    
                </param>
                <return>
                    {@code true} if sorted, {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isMonotonic" type="boolean" line="299">
                <params>
                    <param name="val" type="double[]"/>
                    <param name="dir" type="OrderDirection"/>
                    <param name="strict" type="boolean"/>
                </params>
            </method>
            <javadoc line="302">
                Check that the given array is sorted.                
                <param>
                    val Values.                    
                </param>
                <param>
                    dir Ordering direction.                    
                </param>
                <param>
                    strict Whether the order should be strict.                    
                </param>
                <param>
                    abort Whether to throw an exception if the check fails.                    
                </param>
                <return>
                    {@code true} if the array is sorted.                    
                </return>
                <throws>
                    NonMonotonicSequenceException if the array is not sorted
                      and {@code abort} is {@code true}.                    
                </throws>
            </javadoc>
            <method name="checkOrder" type="boolean" line="312">
                <params>
                    <param name="val" type="double[]"/>
                    <param name="dir" type="OrderDirection"/>
                    <param name="strict" type="boolean"/>
                    <param name="abort" type="boolean"/>
                </params>
                <declaration name="previous" type="double" line="313"/>
                <declaration name="max" type="int" line="314"/>
                <declaration name="index" type="int" line="315"/>
                <scope line="316">
                    <scope line="319">
                        <scope line="320"/>
                    </scope>
                    <scope line="324">
                        <scope line="325"/>
                    </scope>
                    <scope line="331">
                        <scope line="332"/>
                    </scope>
                    <scope line="336">
                        <scope line="337"/>
                    </scope>
                </scope>
                <scope line="347"/>
                <scope line="350"/>
                <scope line="353"/>
            </method>
            <javadoc line="357">
                Check that the given array is sorted.                
                <param>
                    val Values.                    
                </param>
                <param>
                    dir Ordering direction.                    
                </param>
                <param>
                    strict Whether the order should be strict.                    
                </param>
                <throws>
                    NonMonotonicSequenceException if the array is not sorted.                    
                </throws>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="checkOrder" type="void" line="365">
                <params>
                    <param name="val" type="double[]"/>
                    <param name="dir" type="OrderDirection"/>
                    <param name="strict" type="boolean"/>
                </params>
            </method>
            <javadoc line="368">
                Check that the given array is sorted in strictly increasing order.                
                <param>
                    val Values.                    
                </param>
                <throws>
                    NonMonotonicSequenceException if the array is not sorted.                    
                </throws>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="checkOrder" type="void" line="374">
                <params>
                    <param name="val" type="double[]"/>
                </params>
            </method>
            <javadoc line="377">
                Throws DimensionMismatchException if the input array is not rectangular.                
                <param>
                    in array to be tested                    
                </param>
                <throws>
                    NullArgumentException if input array is null                    
                </throws>
                <throws>
                    DimensionMismatchException if input array is not rectangular                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="checkRectangular" type="void" line="384">
                <params>
                    <param name="in" type="long[][]"/>
                </params>
                <scope line="386">
                    <scope line="387"/>
                </scope>
            </method>
            <javadoc line="392">
                Check that all entries of the input array are strictly positive.                
                <param>
                    in Array to be tested                    
                </param>
                <throws>
                    NotStrictlyPositiveException if any entries of the array are not
                      strictly positive.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="checkPositive" type="void" line="399">
                <params>
                    <param name="in" type="double[]"/>
                </params>
                <scope line="400">
                    <scope line="401"/>
                </scope>
            </method>
            <javadoc line="406">
                Check that all entries of the input array are &gt;= 0.                
                <param>
                    in Array to be tested                    
                </param>
                <throws>
                    NotPositiveException if any array entries are less than 0.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="checkNonNegative" type="void" line="412">
                <params>
                    <param name="in" type="long[]"/>
                </params>
                <scope line="413">
                    <scope line="414"/>
                </scope>
            </method>
            <javadoc line="419">
                Check all entries of the input array are &gt;= 0.                
                <param>
                    in Array to be tested                    
                </param>
                <throws>
                    NotPositiveException if any array entries are less than 0.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="checkNonNegative" type="void" line="425">
                <params>
                    <param name="in" type="long[][]"/>
                </params>
                <scope line="426">
                    <scope line="427">
                        <scope line="428"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="434">
                Returns the Cartesian norm (2-norm), handling both overflow and underflow.
                  Translation of the minpack enorm subroutine.
                  The redistribution policy for MINPACK is available
                  &lt;a href=&quot;http://www.netlib.org/minpack/disclaimer&quot;&gt;here&lt;/a&gt;, for
                  convenience, it is reproduced below.&lt;/p&gt;
                  &lt;table border=&quot;0&quot; width=&quot;80%&quot; cellpadding=&quot;10&quot; align=&quot;center&quot; bgcolor=&quot;#E0E0E0&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;
                  Minpack Copyright Notice (1999) University of Chicago.
                  All rights reserved
                  &lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;
                  Redistribution and use in source and binary forms, with or without
                  modification, are permitted provided that the following conditions
                  are met:
                  &lt;ol&gt;
                  &lt;li&gt;Redistributions of source code must retain the above copyright
                  notice, this list of conditions and the following disclaimer.&lt;/li&gt;
                  &lt;li&gt;Redistributions in binary form must reproduce the above
                  copyright notice, this list of conditions and the following
                  disclaimer in the documentation and/or other materials provided
                  with the distribution.&lt;/li&gt;
                  &lt;li&gt;The end-user documentation included with the redistribution, if any,
                  must include the following acknowledgment:{@code This product includes software developed by the University of
                  Chicago, as Operator of Argonne National Laboratory.}Alternately, this acknowledgment may appear in the software itself,
                  if and wherever such third-party acknowledgments normally appear.&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED &quot;AS IS&quot;
                  WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE
                  UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND
                  THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR
                  IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES
                  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE
                  OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY
                  OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR
                  USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF
                  THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)
                  DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
                  UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL
                  BE CORRECTED.&lt;/strong&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
                  HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF
                  ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,
                  INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF
                  ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF
                  PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER
                  SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT
                  (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,
                  EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
                  POSSIBILITY OF SUCH LOSS OR DAMAGES.&lt;/strong&gt;&lt;/li&gt;
                  &lt;ol&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    v Vector of doubles.                    
                </param>
                <return>
                    the 2-norm of the vector.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="safeNorm" type="double" line="489">
                <params>
                    <param name="v" type="double[]"/>
                </params>
                <declaration name="rdwarf" type="double" line="490"/>
                <declaration name="rgiant" type="double" line="491"/>
                <declaration name="s1" type="double" line="492"/>
                <declaration name="s2" type="double" line="493"/>
                <declaration name="s3" type="double" line="494"/>
                <declaration name="x1max" type="double" line="495"/>
                <declaration name="x3max" type="double" line="496"/>
                <declaration name="floatn" type="double" line="497"/>
                <declaration name="agiant" type="double" line="498"/>
                <scope line="499">
                    <declaration name="xabs" type="double" line="500"/>
                    <scope line="501">
                        <scope line="502">
                            <scope line="503">
                                <declaration name="r" type="double" line="504"/>
                            </scope>
                            <scope line="508">
                                <declaration name="r" type="double" line="509"/>
                            </scope>
                        </scope>
                        <scope line="513">
                            <scope line="514">
                                <declaration name="r" type="double" line="515"/>
                            </scope>
                            <scope line="519">
                                <scope line="520">
                                    <declaration name="r" type="double" line="521"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="527"/>
                </scope>
                <declaration name="norm" type="double" line="531"/>
                <scope line="532"/>
                <scope line="535">
                    <scope line="536"/>
                    <scope line="539">
                        <scope line="540"/>
                        <scope line="543"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="550">
                Sort an array in ascending order in place and perform the same reordering
                  of entries on other arrays. For example, if{@code x = [3, 1, 2], y = [1, 2, 3]} and {@code z = [0, 5, 7]}, then{@code sortInPlace(x, y, z)} will update {@code x} to {@code [1, 2, 3]},{@code y} to {@code [2, 3, 1]} and {@code z} to {@code [5, 7, 0]}.                
                <param>
                    x Array to be sorted and used as a pattern for permutation
                      of the other arrays.                    
                </param>
                <param>
                    yList Set of arrays whose permutations of entries will follow
                      those performed on {@code x}.                    
                </param>
                <throws>
                    DimensionMismatchException if any {@code y} is not the same
                      size as {@code x}.                    
                </throws>
                <throws>
                    NullArgumentException if {@code x} or any {@code y} is null.                    
                </throws>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="sortInPlace" type="void" line="562">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="yList" type="double[]"/>
                </params>
            </method>
            <javadoc line="565">
                Sort an array in place and perform the same reordering of entries on
                  other arrays.  This method works the same as the other{@link #sortInPlace(double[],double[][]) sortInPlace} method, but
                  allows the order of the sort to be provided in the {@code dir}parameter.                
                <param>
                    x Array to be sorted and used as a pattern for permutation
                      of the other arrays.                    
                </param>
                <param>
                    dir Order direction.                    
                </param>
                <param>
                    yList Set of arrays whose permutations of entries will follow
                      those performed on {@code x}.                    
                </param>
                <throws>
                    DimensionMismatchException if any {@code y} is not the same
                      size as {@code x}.                    
                </throws>
                <throws>
                    NullArgumentException if {@code x} or any {@code y} is null                    
                </throws>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="sortInPlace" type="void" line="579">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="dir" type="OrderDirection"/>
                    <param name="yList" type="double[]"/>
                </params>
                <scope line="580"/>
                <declaration name="len" type="int" line="583"/>
                <declaration name="list" type="List&lt;Pair&lt;Double,double[]&gt;&gt;" line="584"/>
                <declaration name="yListLen" type="int" line="585"/>
                <scope line="586">
                    <declaration name="yValues" type="double[]" line="587"/>
                    <scope line="588">
                        <declaration name="y" type="double[]" line="589"/>
                        <scope line="590"/>
                        <scope line="593"/>
                    </scope>
                </scope>
                <anonymous_class line="600">
                    <method name="compare" type="int" line="601">
                        <params>
                            <param name="o1" type="Pair<Double,double[]>"/>
                            <param name="o2" type="Pair<Double,double[]>"/>
                        </params>
                        <declaration name="val" type="int" line="602"/>
                    </method>
                </anonymous_class>
                <declaration name="comp" type="Comparator&lt;Pair&lt;Double,double[]&gt;&gt;" line="600"/>
                <scope line="618">
                    <declaration name="e" type="Pair&lt;Double,double[]&gt;" line="619"/>
                    <declaration name="yValues" type="double[]" line="621"/>
                    <scope line="622"/>
                </scope>
            </method>
            <javadoc line="627">
                Creates a copy of the {@code source} array.                
                <param>
                    source Array to be copied.                    
                </param>
                <return>
                    the copied array.                    
                </return>
            </javadoc>
            <method name="copyOf" type="int[]" line="632">
                <params>
                    <param name="source" type="int[]"/>
                </params>
            </method>
            <javadoc line="635">
                Creates a copy of the {@code source} array.                
                <param>
                    source Array to be copied.                    
                </param>
                <return>
                    the copied array.                    
                </return>
            </javadoc>
            <method name="copyOf" type="double[]" line="640">
                <params>
                    <param name="source" type="double[]"/>
                </params>
            </method>
            <javadoc line="643">
                Creates a copy of the {@code source} array.                
                <param>
                    source Array to be copied.                    
                </param>
                <param>
                    len Number of entries to copy. If smaller then the source
                      length, the copy will be truncated, if larger it will padded with
                      zeroes.                    
                </param>
                <return>
                    the copied array.                    
                </return>
            </javadoc>
            <method name="copyOf" type="int[]" line="651">
                <params>
                    <param name="source" type="int[]"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="output" type="int[]" line="652"/>
            </method>
            <javadoc line="656">
                Creates a copy of the {@code source} array.                
                <param>
                    source Array to be copied.                    
                </param>
                <param>
                    len Number of entries to copy. If smaller then the source
                      length, the copy will be truncated, if larger it will padded with
                      zeroes.                    
                </param>
                <return>
                    the copied array.                    
                </return>
            </javadoc>
            <method name="copyOf" type="double[]" line="664">
                <params>
                    <param name="source" type="double[]"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="output" type="double[]" line="665"/>
            </method>
            <javadoc line="669">
                Compute a linear combination accurately.
                  This method computes the sum of the products
                  &lt;code&gt;a&lt;sub&gt;i&lt;/sub&gt; b&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; to high accuracy.
                  It does so by using specific multiplication and addition algorithms to
                  preserve accuracy and reduce cancellation effects.
                  &lt;br/&gt;
                  It is based on the 2005 paper
                  &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547&quot;&gt;
                  Accurate Sum and Dot Product&lt;/a&gt; by Takeshi Ogita, Siegfried M. Rump,
                  and Shin&apos;ichi Oishi published in SIAM J. Sci. Comput.                
                <param>
                    a Factors.                    
                </param>
                <param>
                    b Factors.                    
                </param>
                <return>
                    <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.                    
                </return>
                <throws>
                    DimensionMismatchException if arrays dimensions don't match                    
                </throws>
            </javadoc>
            <method name="linearCombination" type="double" line="685">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="b" type="double[]"/>
                </params>
                <declaration name="len" type="int" line="686"/>
                <scope line="687"/>
                <declaration name="prodHigh" type="double[]" line="690"/>
                <declaration name="prodLowSum" type="double" line="691"/>
                <scope line="692">
                    <declaration name="ai" type="double" line="693"/>
                    <declaration name="ca" type="double" line="694"/>
                    <declaration name="aHigh" type="double" line="695"/>
                    <declaration name="aLow" type="double" line="696"/>
                    <declaration name="bi" type="double" line="697"/>
                    <declaration name="cb" type="double" line="698"/>
                    <declaration name="bHigh" type="double" line="699"/>
                    <declaration name="bLow" type="double" line="700"/>
                    <declaration name="prodLow" type="double" line="702"/>
                </scope>
                <declaration name="prodHighCur" type="double" line="705"/>
                <declaration name="prodHighNext" type="double" line="706"/>
                <declaration name="sHighPrev" type="double" line="707"/>
                <declaration name="sPrime" type="double" line="708"/>
                <declaration name="sLowSum" type="double" line="709"/>
                <declaration name="lenMinusOne" type="int" line="710"/>
                <scope line="711">
                    <declaration name="sHighCur" type="double" line="713"/>
                </scope>
                <declaration name="result" type="double" line="718"/>
                <scope line="719">
                    <scope line="721"/>
                </scope>
            </method>
            <javadoc line="727">
                Compute a linear combination accurately.
                  &lt;p&gt;
                  This method computes a&lt;sub&gt;1&lt;/sub&gt;&amp;times;b&lt;sub&gt;1&lt;/sub&gt; +
                  a&lt;sub&gt;2&lt;/sub&gt;&amp;times;b&lt;sub&gt;2&lt;/sub&gt; to high accuracy. It does
                  so by using specific multiplication and addition algorithms to
                  preserve accuracy and reduce cancellation effects. It is based
                  on the 2005 paper &lt;a
                  href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547&quot;&gt;
                  Accurate Sum and Dot Product&lt;/a&gt; by Takeshi Ogita,
                  Siegfried M. Rump, and Shin&apos;ichi Oishi published in SIAM J. Sci. Comput.
                  &lt;/p&gt;                
                <param>
                    a1 first factor of the first term                    
                </param>
                <param>
                    b1 second factor of the first term                    
                </param>
                <param>
                    a2 first factor of the second term                    
                </param>
                <param>
                    b2 second factor of the second term                    
                </param>
                <return>
                    a<sub>1</sub>&times;b<sub>1</sub> +
                      a<sub>2</sub>&times;b<sub>2</sub>                    
                </return>
                <see>
                    #linearCombination(double,double,double,double,double,double)                    
                </see>
                <see>
                    #linearCombination(double,double,double,double,double,double,double,double)                    
                </see>
            </javadoc>
            <method name="linearCombination" type="double" line="748">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="double"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="double"/>
                </params>
                <declaration name="ca1" type="double" line="749"/>
                <declaration name="a1High" type="double" line="750"/>
                <declaration name="a1Low" type="double" line="751"/>
                <declaration name="cb1" type="double" line="752"/>
                <declaration name="b1High" type="double" line="753"/>
                <declaration name="b1Low" type="double" line="754"/>
                <declaration name="prod1High" type="double" line="755"/>
                <declaration name="prod1Low" type="double" line="756"/>
                <declaration name="ca2" type="double" line="757"/>
                <declaration name="a2High" type="double" line="758"/>
                <declaration name="a2Low" type="double" line="759"/>
                <declaration name="cb2" type="double" line="760"/>
                <declaration name="b2High" type="double" line="761"/>
                <declaration name="b2Low" type="double" line="762"/>
                <declaration name="prod2High" type="double" line="763"/>
                <declaration name="prod2Low" type="double" line="764"/>
                <declaration name="s12High" type="double" line="765"/>
                <declaration name="s12Prime" type="double" line="766"/>
                <declaration name="s12Low" type="double" line="767"/>
                <declaration name="result" type="double" line="768"/>
                <scope line="769"/>
            </method>
            <javadoc line="774">
                Compute a linear combination accurately.
                  &lt;p&gt;
                  This method computes a&lt;sub&gt;1&lt;/sub&gt;&amp;times;b&lt;sub&gt;1&lt;/sub&gt; +
                  a&lt;sub&gt;2&lt;/sub&gt;&amp;times;b&lt;sub&gt;2&lt;/sub&gt; + a&lt;sub&gt;3&lt;/sub&gt;&amp;times;b&lt;sub&gt;3&lt;/sub&gt;
                  to high accuracy. It does so by using specific multiplication and
                  addition algorithms to preserve accuracy and reduce cancellation effects.
                  It is based on the 2005 paper &lt;a
                  href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547&quot;&gt;
                  Accurate Sum and Dot Product&lt;/a&gt; by Takeshi Ogita,
                  Siegfried M. Rump, and Shin&apos;ichi Oishi published in SIAM J. Sci. Comput.
                  &lt;/p&gt;                
                <param>
                    a1 first factor of the first term                    
                </param>
                <param>
                    b1 second factor of the first term                    
                </param>
                <param>
                    a2 first factor of the second term                    
                </param>
                <param>
                    b2 second factor of the second term                    
                </param>
                <param>
                    a3 first factor of the third term                    
                </param>
                <param>
                    b3 second factor of the third term                    
                </param>
                <return>
                    a<sub>1</sub>&times;b<sub>1</sub> +
                      a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>                    
                </return>
                <see>
                    #linearCombination(double,double,double,double)                    
                </see>
                <see>
                    #linearCombination(double,double,double,double,double,double,double,double)                    
                </see>
            </javadoc>
            <method name="linearCombination" type="double" line="797">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="double"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="double"/>
                    <param name="a3" type="double"/>
                    <param name="b3" type="double"/>
                </params>
                <declaration name="ca1" type="double" line="798"/>
                <declaration name="a1High" type="double" line="799"/>
                <declaration name="a1Low" type="double" line="800"/>
                <declaration name="cb1" type="double" line="801"/>
                <declaration name="b1High" type="double" line="802"/>
                <declaration name="b1Low" type="double" line="803"/>
                <declaration name="prod1High" type="double" line="804"/>
                <declaration name="prod1Low" type="double" line="805"/>
                <declaration name="ca2" type="double" line="806"/>
                <declaration name="a2High" type="double" line="807"/>
                <declaration name="a2Low" type="double" line="808"/>
                <declaration name="cb2" type="double" line="809"/>
                <declaration name="b2High" type="double" line="810"/>
                <declaration name="b2Low" type="double" line="811"/>
                <declaration name="prod2High" type="double" line="812"/>
                <declaration name="prod2Low" type="double" line="813"/>
                <declaration name="ca3" type="double" line="814"/>
                <declaration name="a3High" type="double" line="815"/>
                <declaration name="a3Low" type="double" line="816"/>
                <declaration name="cb3" type="double" line="817"/>
                <declaration name="b3High" type="double" line="818"/>
                <declaration name="b3Low" type="double" line="819"/>
                <declaration name="prod3High" type="double" line="820"/>
                <declaration name="prod3Low" type="double" line="821"/>
                <declaration name="s12High" type="double" line="822"/>
                <declaration name="s12Prime" type="double" line="823"/>
                <declaration name="s12Low" type="double" line="824"/>
                <declaration name="s123High" type="double" line="825"/>
                <declaration name="s123Prime" type="double" line="826"/>
                <declaration name="s123Low" type="double" line="827"/>
                <declaration name="result" type="double" line="828"/>
                <scope line="829"/>
            </method>
            <javadoc line="834">
                Compute a linear combination accurately.
                  &lt;p&gt;
                  This method computes a&lt;sub&gt;1&lt;/sub&gt;&amp;times;b&lt;sub&gt;1&lt;/sub&gt; +
                  a&lt;sub&gt;2&lt;/sub&gt;&amp;times;b&lt;sub&gt;2&lt;/sub&gt; + a&lt;sub&gt;3&lt;/sub&gt;&amp;times;b&lt;sub&gt;3&lt;/sub&gt; +
                  a&lt;sub&gt;4&lt;/sub&gt;&amp;times;b&lt;sub&gt;4&lt;/sub&gt;
                  to high accuracy. It does so by using specific multiplication and
                  addition algorithms to preserve accuracy and reduce cancellation effects.
                  It is based on the 2005 paper &lt;a
                  href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547&quot;&gt;
                  Accurate Sum and Dot Product&lt;/a&gt; by Takeshi Ogita,
                  Siegfried M. Rump, and Shin&apos;ichi Oishi published in SIAM J. Sci. Comput.
                  &lt;/p&gt;                
                <param>
                    a1 first factor of the first term                    
                </param>
                <param>
                    b1 second factor of the first term                    
                </param>
                <param>
                    a2 first factor of the second term                    
                </param>
                <param>
                    b2 second factor of the second term                    
                </param>
                <param>
                    a3 first factor of the third term                    
                </param>
                <param>
                    b3 second factor of the third term                    
                </param>
                <param>
                    a4 first factor of the third term                    
                </param>
                <param>
                    b4 second factor of the third term                    
                </param>
                <return>
                    a<sub>1</sub>&times;b<sub>1</sub> +
                      a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
                      a<sub>4</sub>&times;b<sub>4</sub>                    
                </return>
                <see>
                    #linearCombination(double,double,double,double)                    
                </see>
                <see>
                    #linearCombination(double,double,double,double,double,double)                    
                </see>
            </javadoc>
            <method name="linearCombination" type="double" line="861">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="double"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="double"/>
                    <param name="a3" type="double"/>
                    <param name="b3" type="double"/>
                    <param name="a4" type="double"/>
                    <param name="b4" type="double"/>
                </params>
                <declaration name="ca1" type="double" line="862"/>
                <declaration name="a1High" type="double" line="863"/>
                <declaration name="a1Low" type="double" line="864"/>
                <declaration name="cb1" type="double" line="865"/>
                <declaration name="b1High" type="double" line="866"/>
                <declaration name="b1Low" type="double" line="867"/>
                <declaration name="prod1High" type="double" line="868"/>
                <declaration name="prod1Low" type="double" line="869"/>
                <declaration name="ca2" type="double" line="870"/>
                <declaration name="a2High" type="double" line="871"/>
                <declaration name="a2Low" type="double" line="872"/>
                <declaration name="cb2" type="double" line="873"/>
                <declaration name="b2High" type="double" line="874"/>
                <declaration name="b2Low" type="double" line="875"/>
                <declaration name="prod2High" type="double" line="876"/>
                <declaration name="prod2Low" type="double" line="877"/>
                <declaration name="ca3" type="double" line="878"/>
                <declaration name="a3High" type="double" line="879"/>
                <declaration name="a3Low" type="double" line="880"/>
                <declaration name="cb3" type="double" line="881"/>
                <declaration name="b3High" type="double" line="882"/>
                <declaration name="b3Low" type="double" line="883"/>
                <declaration name="prod3High" type="double" line="884"/>
                <declaration name="prod3Low" type="double" line="885"/>
                <declaration name="ca4" type="double" line="886"/>
                <declaration name="a4High" type="double" line="887"/>
                <declaration name="a4Low" type="double" line="888"/>
                <declaration name="cb4" type="double" line="889"/>
                <declaration name="b4High" type="double" line="890"/>
                <declaration name="b4Low" type="double" line="891"/>
                <declaration name="prod4High" type="double" line="892"/>
                <declaration name="prod4Low" type="double" line="893"/>
                <declaration name="s12High" type="double" line="894"/>
                <declaration name="s12Prime" type="double" line="895"/>
                <declaration name="s12Low" type="double" line="896"/>
                <declaration name="s123High" type="double" line="897"/>
                <declaration name="s123Prime" type="double" line="898"/>
                <declaration name="s123Low" type="double" line="899"/>
                <declaration name="s1234High" type="double" line="900"/>
                <declaration name="s1234Prime" type="double" line="901"/>
                <declaration name="s1234Low" type="double" line="902"/>
                <declaration name="result" type="double" line="903"/>
                <scope line="904"/>
            </method>
            <javadoc line="909">
                Returns true iff both arguments are null or have same dimensions and all
                  their elements are equal as defined by{@link Precision#equals(float,float)}.                
                <param>
                    x first array                    
                </param>
                <param>
                    y second array                    
                </param>
                <return>
                    true if the values are both null or have same dimension
                      and equal elements.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="917">
                <params>
                    <param name="x" type="float[]"/>
                    <param name="y" type="float[]"/>
                </params>
                <scope line="918"/>
                <scope line="921"/>
                <scope line="924">
                    <scope line="925"/>
                </scope>
            </method>
            <javadoc line="931">
                Returns true iff both arguments are null or have same dimensions and all
                  their elements are equal as defined by{@link Precision#equalsIncludingNaN(double,double) this method}.                
                <param>
                    x first array                    
                </param>
                <param>
                    y second array                    
                </param>
                <return>
                    true if the values are both null or have same dimension and
                      equal elements                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="940">
                <params>
                    <param name="x" type="float[]"/>
                    <param name="y" type="float[]"/>
                </params>
                <scope line="941"/>
                <scope line="944"/>
                <scope line="947">
                    <scope line="948"/>
                </scope>
            </method>
            <javadoc line="954">
                Returns {@code true} iff both arguments are {@code null} or have same
                  dimensions and all their elements are equal as defined by{@link Precision#equals(double,double)}.                
                <param>
                    x First array.                    
                </param>
                <param>
                    y Second array.                    
                </param>
                <return>
                    {@code true} if the values are both {@code null} or have same
                      dimension and equal elements.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="962">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="963"/>
                <scope line="966"/>
                <scope line="969">
                    <scope line="970"/>
                </scope>
            </method>
            <javadoc line="976">
                Returns {@code true} iff both arguments are {@code null} or have same
                  dimensions and all their elements are equal as defined by{@link Precision#equalsIncludingNaN(double,double) this method}.                
                <param>
                    x First array.                    
                </param>
                <param>
                    y Second array.                    
                </param>
                <return>
                    {@code true} if the values are both {@code null} or have same
                      dimension and equal elements.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="985">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="986"/>
                <scope line="989"/>
                <scope line="992">
                    <scope line="993"/>
                </scope>
            </method>
            <javadoc line="999">
                Normalizes an array to make it sum to a specified value.
                  Returns the result of the transformation &lt;pre&gt;
                  x |-&gt; x  normalizedSum / sum
                  &lt;/pre&gt;
                  applied to each non-NaN element x of the input array, where sum is the
                  sum of the non-NaN entries in the input array.&lt;/p&gt;
                  &lt;p&gt;Throws IllegalArgumentException if {@code normalizedSum} is infinite
                  or NaN and ArithmeticException if the input array contains any infinite elements
                  or sums to 0.&lt;/p&gt;
                  &lt;p&gt;Ignores (i.e., copies unchanged to the output array) NaNs in the input array.&lt;/p&gt;                
                <param>
                    values Input array to be normalized                    
                </param>
                <param>
                    normalizedSum Target sum for the normalized array                    
                </param>
                <return>
                    the normalized array.                    
                </return>
                <throws>
                    MathArithmeticException if the input array contains infinite
                      elements or sums to zero.                    
                </throws>
                <throws>
                    MathIllegalArgumentException if the target sum is infinite or {@code NaN}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="normalizeArray" type="double[]" line="1018">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="normalizedSum" type="double"/>
                </params>
                <scope line="1019"/>
                <scope line="1022"/>
                <declaration name="sum" type="double" line="1025"/>
                <declaration name="len" type="int" line="1026"/>
                <declaration name="out" type="double[]" line="1027"/>
                <scope line="1028">
                    <scope line="1029"/>
                    <scope line="1032"/>
                </scope>
                <scope line="1036"/>
                <scope line="1039">
                    <scope line="1040"/>
                    <scope line="1043"/>
                </scope>
            </method>
            <javadoc line="1049">
                Build an array of elements.
                  &lt;p&gt;
                  Arrays are filled with field.getZero()
                  &lt;/p&gt;                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <param>
                    field field to which array elements belong                    
                </param>
                <param>
                    length of the array                    
                </param>
                <return>
                    a new array                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="buildArray" type="T[]" line="1061">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="array" type="T[]" line="1062"/>
            </method>
            <javadoc line="1066">
                Build a double dimension  array of elements.
                  &lt;p&gt;
                  Arrays are filled with field.getZero()
                  &lt;/p&gt;                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <param>
                    field field to which array elements belong                    
                </param>
                <param>
                    rows number of rows in the array                    
                </param>
                <param>
                    columns number of columns (may be negative to build partial
                      arrays in the same way <code>new Field[rows][]</code> works)                    
                </param>
                <return>
                    a new array                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="buildArray" type="T[][]" line="1080">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="array" type="T[][]" line="1081"/>
                <scope line="1082">
                    <declaration name="dummyRow" type="T[]" line="1083"/>
                </scope>
                <scope line="1086">
                    <scope line="1088"/>
                </scope>
            </method>
        </class>
    </source>