<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <interface name="RealMatrix">
            <implements interface="AnyMatrix"/>
            <javadoc line="9">
                Interface defining a real-valued matrix with basic algebraic operations.
                  &lt;p&gt;
                  Matrix element indexing is 0-based -- e.g., &lt;code&gt;getEntry(0, 0)&lt;/code&gt;
                  returns the element in the first row, first column of the matrix.&lt;/p&gt;                
                <version>
                    $Id: RealMatrix.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <method name="createMatrix" type="RealMatrix" line="17"/>
            <javadoc line="17">
                Create a new RealMatrix of the same type as the instance with the
                  supplied
                  row and column dimensions.                
                <param>
                    rowDimension the number of rows in the new matrix                    
                </param>
                <param>
                    columnDimension the number of columns in the new matrix                    
                </param>
                <return>
                    a new matrix of the same type as the instance                    
                </return>
                <throws>
                    NotStrictlyPositiveException if row or column dimension is not
                      positive.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="copy" type="RealMatrix" line="29"/>
            <javadoc line="29">
                Returns a (deep) copy of this.                
                <return>
                    matrix copy                    
                </return>
            </javadoc>
            <method name="add" type="RealMatrix" line="34"/>
            <javadoc line="34">
                Returns the sum of {@code this} and {@code m}.                
                <param>
                    m matrix to be added                    
                </param>
                <return>
                    {@code this + m}                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="RealMatrix" line="42"/>
            <javadoc line="42">
                Returns {@code this} minus {@code m}.                
                <param>
                    m matrix to be subtracted                    
                </param>
                <return>
                    {@code this - m}                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this}.                    
                </throws>
            </javadoc>
            <method name="scalarAdd" type="RealMatrix" line="50"/>
            <javadoc line="50">
                Returns the result of adding {@code d} to each entry of {@code this}.                
                <param>
                    d value to be added to each entry                    
                </param>
                <return>
                    {@code d + this}                    
                </return>
            </javadoc>
            <method name="scalarMultiply" type="RealMatrix" line="56"/>
            <javadoc line="56">
                Returns the result of multiplying each entry of {@code this} by{@code d}.                
                <param>
                    d value to multiply all entries by                    
                </param>
                <return>
                    {@code d  this}                    
                </return>
            </javadoc>
            <method name="multiply" type="RealMatrix" line="62"/>
            <javadoc line="62">
                Returns the result of postmultiplying {@code this} by {@code m}.                
                <param>
                    m matrix to postmultiply by                    
                </param>
                <return>
                    {@code this  m}                    
                </return>
                <throws>
                    DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}                    
                </throws>
            </javadoc>
            <method name="preMultiply" type="RealMatrix" line="69"/>
            <javadoc line="69">
                Returns the result of premultiplying {@code this} by {@code m}.                
                <param>
                    m matrix to premultiply by                    
                </param>
                <return>
                    {@code m  this}                    
                </return>
                <throws>
                    DimensionMismatchException if{@code rowDimension(this) != columnDimension(m)}                    
                </throws>
            </javadoc>
            <method name="power" type="RealMatrix" line="76"/>
            <javadoc line="76">
                Returns the result of multiplying {@code this} with itself {@code p}times. Depending on the underlying storage, instability for high powers
                  might occur.                
                <param>
                    p raise {@code this} to power {@code p}                    
                </param>
                <return>
                    {@code this^p}                    
                </return>
                <throws>
                    NotPositiveException if {@code p < 0}                    
                </throws>
                <throws>
                    NonSquareMatrixException if the matrix is not square                    
                </throws>
            </javadoc>
            <method name="getData" type="double[][]" line="85"/>
            <javadoc line="85">
                Returns matrix entries as a two-dimensional array.                
                <return>
                    2-dimensional array of entries                    
                </return>
            </javadoc>
            <method name="getNorm" type="double" line="90"/>
            <javadoc line="90">
                Returns the &lt;a href=&quot;http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html&quot;&gt;
                  maximum absolute row sum norm&lt;/a&gt; of the matrix.                
                <return>
                    norm                    
                </return>
            </javadoc>
            <method name="getFrobeniusNorm" type="double" line="96"/>
            <javadoc line="96">
                Returns the &lt;a href=&quot;http://mathworld.wolfram.com/FrobeniusNorm.html&quot;&gt;
                  Frobenius norm&lt;/a&gt; of the matrix.                
                <return>
                    norm                    
                </return>
            </javadoc>
            <method name="getSubMatrix" type="RealMatrix" line="102"/>
            <javadoc line="102">
                Gets a submatrix. Rows and columns are indicated
                  counting from 0 to n-1.                
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index (inclusive)                    
                </param>
                <return>
                    The subMatrix containing the data of the
                      specified rows and columns.                    
                </return>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
            </javadoc>
            <method name="getSubMatrix" type="RealMatrix" line="115"/>
            <javadoc line="115">
                Gets a submatrix. Rows and columns are indicated counting from 0 to n-1.                
                <param>
                    selectedRows Array of row indices.                    
                </param>
                <param>
                    selectedColumns Array of column indices.                    
                </param>
                <return>
                    The subMatrix containing the data in the specified rows and
                      columns                    
                </return>
                <throws>
                    NullArgumentException if the row or column selections are{@code null}                    
                </throws>
                <throws>
                    NoDataException if the row or column selections are empty (zero
                      length).                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
            </javadoc>
            <method name="copySubMatrix" type="void" line="127"/>
            <javadoc line="127">
                Copy a submatrix. Rows and columns are indicated counting from 0 to n-1.                
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index (inclusive)                    
                </param>
                <param>
                    destination The arrays where the submatrix data should be copied
                      (if larger than rows/columns counts, only the upper-left part will be
                      used)                    
                </param>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the destination array is too
                      small.                    
                </throws>
            </javadoc>
            <method name="copySubMatrix" type="void" line="142"/>
            <javadoc line="142">
                Copy a submatrix. Rows and columns are indicated counting from 0 to n-1.                
                <param>
                    selectedRows Array of row indices.                    
                </param>
                <param>
                    selectedColumns Array of column indices.                    
                </param>
                <param>
                    destination The arrays where the submatrix data should be copied
                      (if larger than rows/columns counts, only the upper-left part will be
                      used)                    
                </param>
                <throws>
                    NullArgumentException if the row or column selections are{@code null}                    
                </throws>
                <throws>
                    NoDataException if the row or column selections are empty (zero
                      length).                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the destination array is too
                      small.                    
                </throws>
            </javadoc>
            <method name="setSubMatrix" type="void" line="157"/>
            <javadoc line="157">
                Replace the submatrix starting at {@code row, column} using data in the
                  input {@code subMatrix} array. Indexes are 0-based.
                  &lt;p&gt;
                  Example:&lt;br&gt;
                  Starting with &lt;pre&gt;
                  1  2  3  4
                  5  6  7  8
                  9  0  1  2
                  &lt;/pre&gt;
                  and &lt;code&gt;subMatrix = {{3, 4} {5,6}}&lt;/code&gt;, invoking{@code setSubMatrix(subMatrix,1,1))} will result in &lt;pre&gt;
                  1  2  3  4
                  5  3  4  8
                  9  5  6  2
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    subMatrix  array containing the submatrix replacement data                    
                </param>
                <param>
                    row  row coordinate of the top, left element to be replaced                    
                </param>
                <param>
                    column  column coordinate of the top, left element to be replaced                    
                </param>
                <throws>
                    NoDataException if {@code subMatrix} is empty.                    
                </throws>
                <throws>
                    OutOfRangeException if {@code subMatrix} does not fit into
                      this matrix from element in {@code (row, column)}.                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code subMatrix} is not rectangular
                      (not all rows have the same length) or empty.                    
                </throws>
                <throws>
                    NullArgumentException if {@code subMatrix} is {@code null}.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="getRowMatrix" type="RealMatrix" line="184"/>
            <javadoc line="184">
                Get the entries at the given row index as a row matrix.  Row indices start
                  at 0.                
                <param>
                    row Row to be fetched.                    
                </param>
                <return>
                    row Matrix.                    
                </return>
                <throws>
                    OutOfRangeException if the specified row index is invalid.                    
                </throws>
            </javadoc>
            <method name="setRowMatrix" type="void" line="192"/>
            <javadoc line="192">
                Sets the specified {@code row} of {@code this} matrix to the entries of
                  the specified row {@code matrix}. Row indices start at 0.                
                <param>
                    row Row to be set.                    
                </param>
                <param>
                    matrix Row matrix to be copied (must have one row and the same
                      number of columns as the instance).                    
                </param>
                <throws>
                    OutOfRangeException if the specified row index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the row dimension of the{@code matrix} is not {@code 1}, or the column dimensions of {@code this}and {@code matrix} do not match.                    
                </throws>
            </javadoc>
            <method name="getColumnMatrix" type="RealMatrix" line="202"/>
            <javadoc line="202">
                Get the entries at the given column index as a column matrix. Column
                  indices start at 0.                
                <param>
                    column Column to be fetched.                    
                </param>
                <return>
                    column Matrix.                    
                </return>
                <throws>
                    OutOfRangeException if the specified column index is invalid.                    
                </throws>
            </javadoc>
            <method name="setColumnMatrix" type="void" line="210"/>
            <javadoc line="210">
                Sets the specified {@code column} of {@code this} matrix to the entries
                  of the specified column {@code matrix}. Column indices start at 0.                
                <param>
                    column Column to be set.                    
                </param>
                <param>
                    matrix Column matrix to be copied (must have one column and the
                      same number of rows as the instance).                    
                </param>
                <throws>
                    OutOfRangeException if the specified column index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the column dimension of the{@code matrix} is not {@code 1}, or the row dimensions of {@code this}and {@code matrix} do not match.                    
                </throws>
            </javadoc>
            <method name="getRowVector" type="RealVector" line="220"/>
            <javadoc line="220">
                Returns the entries in row number {@code row} as a vector. Row indices
                  start at 0.                
                <param>
                    row Row to be fetched.                    
                </param>
                <return>
                    a row vector.                    
                </return>
                <throws>
                    OutOfRangeException if the specified row index is invalid.                    
                </throws>
            </javadoc>
            <method name="setRowVector" type="void" line="228"/>
            <javadoc line="228">
                Sets the specified {@code row} of {@code this} matrix to the entries of
                  the specified {@code vector}. Row indices start at 0.                
                <param>
                    row Row to be set.                    
                </param>
                <param>
                    vector row vector to be copied (must have the same number of
                      column as the instance).                    
                </param>
                <throws>
                    OutOfRangeException if the specified row index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the {@code vector} dimension
                      does not match the column dimension of {@code this} matrix.                    
                </throws>
            </javadoc>
            <method name="getColumnVector" type="RealVector" line="239"/>
            <javadoc line="239">
                Get the entries at the given column index as a vector. Column indices
                  start at 0.                
                <param>
                    column Column to be fetched.                    
                </param>
                <return>
                    a column vector.                    
                </return>
                <throws>
                    OutOfRangeException if the specified column index is invalid                    
                </throws>
            </javadoc>
            <method name="setColumnVector" type="void" line="247"/>
            <javadoc line="247">
                Sets the specified {@code column} of {@code this} matrix to the entries
                  of the specified {@code vector}. Column indices start at 0.                
                <param>
                    column Column to be set.                    
                </param>
                <param>
                    vector column vector to be copied (must have the same number of
                      rows as the instance).                    
                </param>
                <throws>
                    OutOfRangeException if the specified column index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the {@code vector} dimension
                      does not match the row dimension of {@code this} matrix.                    
                </throws>
            </javadoc>
            <method name="getRow" type="double[]" line="258"/>
            <javadoc line="258">
                Get the entries at the given row index. Row indices start at 0.                
                <param>
                    row Row to be fetched.                    
                </param>
                <return>
                    the array of entries in the row.                    
                </return>
                <throws>
                    OutOfRangeException if the specified row index is not valid.                    
                </throws>
            </javadoc>
            <method name="setRow" type="void" line="265"/>
            <javadoc line="265">
                Sets the specified {@code row} of {@code this} matrix to the entries
                  of the specified {@code array}. Row indices start at 0.                
                <param>
                    row Row to be set.                    
                </param>
                <param>
                    array Row matrix to be copied (must have the same number of
                      columns as the instance)                    
                </param>
                <throws>
                    OutOfRangeException if the specified row index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the {@code array} length does
                      not match the column dimension of {@code this} matrix.                    
                </throws>
            </javadoc>
            <method name="getColumn" type="double[]" line="276"/>
            <javadoc line="276">
                Get the entries at the given column index as an array. Column indices
                  start at 0.                
                <param>
                    column Column to be fetched.                    
                </param>
                <return>
                    the array of entries in the column.                    
                </return>
                <throws>
                    OutOfRangeException if the specified column index is not valid.                    
                </throws>
            </javadoc>
            <method name="setColumn" type="void" line="284"/>
            <javadoc line="284">
                Sets the specified {@code column} of {@code this} matrix to the entries
                  of the specified {@code array}. Column indices start at 0.                
                <param>
                    column Column to be set.                    
                </param>
                <param>
                    array Column array to be copied (must have the same number of
                      rows as the instance).                    
                </param>
                <throws>
                    OutOfRangeException if the specified column index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the {@code array} length does
                      not match the row dimension of {@code this} matrix.                    
                </throws>
            </javadoc>
            <method name="getEntry" type="double" line="295"/>
            <javadoc line="295">
                Get the entry in the specified row and column. Row and column indices
                  start at 0.                
                <param>
                    row Row index of entry to be fetched.                    
                </param>
                <param>
                    column Column index of entry to be fetched.                    
                </param>
                <return>
                    the matrix entry at {@code (row, column)}.                    
                </return>
                <throws>
                    OutOfRangeException if the row or column index is not valid.                    
                </throws>
            </javadoc>
            <method name="setEntry" type="void" line="304"/>
            <javadoc line="304">
                Set the entry in the specified row and column. Row and column indices
                  start at 0.                
                <param>
                    row Row index of entry to be set.                    
                </param>
                <param>
                    column Column index of entry to be set.                    
                </param>
                <param>
                    value the new value of the entry.                    
                </param>
                <throws>
                    OutOfRangeException if the row or column index is not valid                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="addToEntry" type="void" line="314"/>
            <javadoc line="314">
                Adds (in place) the specified value to the specified entry of{@code this} matrix. Row and column indices start at 0.                
                <param>
                    row Row index of the entry to be modified.                    
                </param>
                <param>
                    column Column index of the entry to be modified.                    
                </param>
                <param>
                    increment value to add to the matrix entry.                    
                </param>
                <throws>
                    OutOfRangeException if the row or column index is not valid.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="multiplyEntry" type="void" line="323"/>
            <javadoc line="323">
                Multiplies (in place) the specified entry of {@code this} matrix by the
                  specified value. Row and column indices start at 0.                
                <param>
                    row Row index of the entry to be modified.                    
                </param>
                <param>
                    column Column index of the entry to be modified.                    
                </param>
                <param>
                    factor Multiplication factor for the matrix entry.                    
                </param>
                <throws>
                    OutOfRangeException if the row or column index is not valid.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="transpose" type="RealMatrix" line="333"/>
            <javadoc line="333">
                Returns the transpose of this matrix.                
                <return>
                    transpose matrix                    
                </return>
            </javadoc>
            <method name="getTrace" type="double" line="338"/>
            <javadoc line="338">
                Returns the &lt;a href=&quot;http://mathworld.wolfram.com/MatrixTrace.html&quot;&gt;
                  trace&lt;/a&gt; of the matrix (the sum of the elements on the main diagonal).                
                <return>
                    the trace.                    
                </return>
                <throws>
                    NonSquareMatrixException if the matrix is not square.                    
                </throws>
            </javadoc>
            <method name="operate" type="double[]" line="345"/>
            <javadoc line="345">
                Returns the result of multiplying this by the vector {@code v}.                
                <param>
                    v the vector to operate on                    
                </param>
                <return>
                    {@code this  v}                    
                </return>
                <throws>
                    DimensionMismatchException if the length of {@code v} does not
                      match the column dimension of {@code this}.                    
                </throws>
            </javadoc>
            <method name="operate" type="RealVector" line="353"/>
            <javadoc line="353">
                Returns the result of multiplying this by the vector {@code v}.                
                <param>
                    v the vector to operate on                    
                </param>
                <return>
                    {@code this  v}                    
                </return>
                <throws>
                    DimensionMismatchException if the dimension of {@code v} does not
                      match the column dimension of {@code this}.                    
                </throws>
            </javadoc>
            <method name="preMultiply" type="double[]" line="361"/>
            <javadoc line="361">
                Returns the (row) vector result of premultiplying this by the vector {@code v}.                
                <param>
                    v the row vector to premultiply by                    
                </param>
                <return>
                    {@code v  this}                    
                </return>
                <throws>
                    DimensionMismatchException if the length of {@code v} does not
                      match the row dimension of {@code this}.                    
                </throws>
            </javadoc>
            <method name="preMultiply" type="RealVector" line="369"/>
            <javadoc line="369">
                Returns the (row) vector result of premultiplying this by the vector {@code v}.                
                <param>
                    v the row vector to premultiply by                    
                </param>
                <return>
                    {@code v  this}                    
                </return>
                <throws>
                    DimensionMismatchException if the dimension of {@code v} does not
                      match the row dimension of {@code this}.                    
                </throws>
            </javadoc>
            <method name="walkInRowOrder" type="double" line="377"/>
            <javadoc line="377">
                Visit (and possibly change) all matrix entries in row order.
                  &lt;p&gt;Row order starts at upper left and iterating through all elements
                  of a row from left to right before going to the leftmost element
                  of the next row.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInRowOrder" type="double" line="398"/>
            <javadoc line="398">
                Visit (but don&apos;t change) all matrix entries in row order.
                  &lt;p&gt;Row order starts at upper left and iterating through all elements
                  of a row from left to right before going to the leftmost element
                  of the next row.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInRowOrder" type="double" line="419"/>
            <javadoc line="419">
                Visit (and possibly change) some matrix entries in row order.
                  &lt;p&gt;Row order starts at upper left and iterating through all elements
                  of a row from left to right before going to the leftmost element
                  of the next row.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index                    
                </param>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInRowOrder" type="double" line="446"/>
            <javadoc line="446">
                Visit (but don&apos;t change) some matrix entries in row order.
                  &lt;p&gt;Row order starts at upper left and iterating through all elements
                  of a row from left to right before going to the leftmost element
                  of the next row.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index                    
                </param>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="473"/>
            <javadoc line="473">
                Visit (and possibly change) all matrix entries in column order.
                  &lt;p&gt;Column order starts at upper left and iterating through all elements
                  of a column from top to bottom before going to the topmost element
                  of the next column.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="494"/>
            <javadoc line="494">
                Visit (but don&apos;t change) all matrix entries in column order.
                  &lt;p&gt;Column order starts at upper left and iterating through all elements
                  of a column from top to bottom before going to the topmost element
                  of the next column.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="515"/>
            <javadoc line="515">
                Visit (and possibly change) some matrix entries in column order.
                  &lt;p&gt;Column order starts at upper left and iterating through all elements
                  of a column from top to bottom before going to the topmost element
                  of the next column.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index                    
                </param>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="542"/>
            <javadoc line="542">
                Visit (but don&apos;t change) some matrix entries in column order.
                  &lt;p&gt;Column order starts at upper left and iterating through all elements
                  of a column from top to bottom before going to the topmost element
                  of the next column.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index                    
                </param>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="569"/>
            <javadoc line="569">
                Visit (and possibly change) all matrix entries using the fastest possible order.
                  &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                  different from traditional row or column orders.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="589"/>
            <javadoc line="589">
                Visit (but don&apos;t change) all matrix entries using the fastest possible order.
                  &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                  different from traditional row or column orders.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="609"/>
            <javadoc line="609">
                Visit (and possibly change) some matrix entries using the fastest possible order.
                  &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                  different from traditional row or column orders.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index (inclusive)                    
                </param>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="635"/>
            <javadoc line="635">
                Visit (but don&apos;t change) some matrix entries using the fastest possible order.
                  &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                  different from traditional row or column orders.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index (inclusive)                    
                </param>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link RealMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
        </interface>
    </source>