<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet.sofm.util">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.analysis.function.Logistic"/>
        <class name="QuasiSigmoidDecayFunction" line="24">
            <javadoc line="24">
                Decay function whose shape is similar to a sigmoid.
                  &lt;br/&gt;
                  Class is immutable.                
                <version>
                    $Id: QuasiSigmoidDecayFunction.java 1566092 2014-02-08 18:48:29Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="sigmoid" type="Logistic" line="33"/>
            <javadoc line="33">
                Sigmoid.                
            </javadoc>
            <declaration name="scale" type="double" line="35"/>
            <javadoc line="35">
                See {@link #value(long)}.                
            </javadoc>
            <javadoc line="38">
                Creates an instance.
                  The function {@code f} will have the following properties:
                  &lt;ul&gt;
                  &lt;li&gt;{@code f(0) = initValue}&lt;/li&gt;
                  &lt;li&gt;{@code numCall} is the inflexion point&lt;/li&gt;
                  &lt;li&gt;{@code slope = f&apos;(numCall)}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    initValue Initial value, i.e. {@link #value(long) value(0)}.                    
                </param>
                <param>
                    slope Value of the function derivative at {@code numCall}.                    
                </param>
                <param>
                    numCall Inflexion point.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code initValue &lt;= 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code slope &gt;= 0}.                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code numCall &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="QuasiSigmoidDecayFunction" type="constructor" line="56">
                <params>
                    <param name="initValue" type="double"/>
                    <param name="slope" type="double"/>
                    <param name="numCall" type="long"/>
                </params>
                <scope line="57"/>
                <scope line="60"/>
                <scope line="63"/>
                <declaration name="k" type="double" line="67"/>
                <declaration name="m" type="double" line="68"/>
                <declaration name="b" type="double" line="69"/>
                <declaration name="q" type="double" line="70"/>
                <declaration name="a" type="double" line="71"/>
                <declaration name="n" type="double" line="72"/>
                <declaration name="y0" type="double" line="75"/>
            </method>
            <javadoc line="79">
                Computes the value of the learning factor.                
                <param>
                    numCall Current step of the training task.                    
                </param>
                <return>
                    the value of the function at {@code numCall}.                    
                </return>
            </javadoc>
            <method name="value" type="double" line="85">
                <params>
                    <param name="numCall" type="long"/>
                </params>
            </method>
        </class>
    </source>