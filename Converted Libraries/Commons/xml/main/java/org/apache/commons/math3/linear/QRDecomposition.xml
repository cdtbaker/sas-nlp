<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="QRDecomposition" line="26">
            <javadoc line="26">
                Calculates the QR-decomposition of a matrix.
                  &lt;p&gt;The QR-decomposition of a matrix A consists of two matrices Q and R
                  that satisfy: A = QR, Q is orthogonal (Q&lt;sup&gt;T&lt;/sup&gt;Q = I), and R is
                  upper triangular. If A is m&amp;times;n, Q is m&amp;times;m and R m&amp;times;n.&lt;/p&gt;
                  &lt;p&gt;This class compute the decomposition using Householder reflectors.&lt;/p&gt;
                  &lt;p&gt;For efficiency purposes, the decomposition in packed form is transposed.
                  This allows inner loop to iterate inside rows, which is much more cache-efficient
                  in Java.&lt;/p&gt;
                  &lt;p&gt;This class is based on the class with similar name from the
                  &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; library, with the
                  following changes:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;a {@link #getQT() getQT} method has been added,&lt;/li&gt;
                  &lt;li&gt;the {@code solve} and {@code isFullRank} methods have been replaced
                  by a {@link #getSolver() getSolver} method and the equivalent methods
                  provided by the returned {@link DecompositionSolver}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/QRDecomposition.html&quot;&gt;MathWorld&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/QR_decomposition&quot;&gt;Wikipedia&lt;/a&gt;                    
                </see>
                <version>
                    $Id: QRDecomposition.java 1462423 2013-03-29 07:25:18Z luc $                    
                </version>
                <since>
                    1.2 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="qrt" type="double[][]" line="52"/>
            <javadoc line="52">
                A packed TRANSPOSED representation of the QR decomposition.
                  &lt;p&gt;The elements BELOW the diagonal are the elements of the UPPER triangular
                  matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors
                  from which an explicit form of Q can be recomputed if desired.&lt;/p&gt;                
            </javadoc>
            <declaration name="rDiag" type="double[]" line="59"/>
            <javadoc line="59">
                The diagonal elements of R.                
            </javadoc>
            <declaration name="cachedQ" type="RealMatrix" line="61"/>
            <javadoc line="61">
                Cached value of Q.                
            </javadoc>
            <declaration name="cachedQT" type="RealMatrix" line="63"/>
            <javadoc line="63">
                Cached value of QT.                
            </javadoc>
            <declaration name="cachedR" type="RealMatrix" line="65"/>
            <javadoc line="65">
                Cached value of R.                
            </javadoc>
            <declaration name="cachedH" type="RealMatrix" line="67"/>
            <javadoc line="67">
                Cached value of H.                
            </javadoc>
            <declaration name="threshold" type="double" line="69"/>
            <javadoc line="69">
                Singularity threshold.                
            </javadoc>
            <javadoc line="72">
                Calculates the QR-decomposition of the given matrix.
                  The singularity threshold defaults to zero.                
                <param>
                    matrix The matrix to decompose.                    
                </param>
                <see>
                    #QRDecomposition(RealMatrix,double)                    
                </see>
            </javadoc>
            <method name="QRDecomposition" type="constructor" line="80">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="84">
                Calculates the QR-decomposition of the given matrix.                
                <param>
                    matrix The matrix to decompose.                    
                </param>
                <param>
                    threshold Singularity threshold.                    
                </param>
            </javadoc>
            <method name="QRDecomposition" type="constructor" line="91">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="threshold" type="double"/>
                </params>
                <declaration name="m" type="int" line="94"/>
                <declaration name="n" type="int" line="95"/>
            </method>
            <javadoc line="107">
                Decompose matrix.                
                <param>
                    matrix transposed matrix                    
                </param>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="decompose" type="void" line="111">
                <params>
                    <param name="matrix" type="double[][]"/>
                </params>
                <scope line="112"/>
            </method>
            <javadoc line="117">
                Perform Householder reflection for a minor A(minor, minor) of A.                
                <param>
                    minor minor index                    
                </param>
                <param>
                    matrix transposed matrix                    
                </param>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="performHouseholderReflection" type="void" line="122">
                <params>
                    <param name="minor" type="int"/>
                    <param name="matrix" type="double[][]"/>
                </params>
                <comment line="127">
                    Let x be the first column of the minor, and a^2 = |x|^2.
                     x will be in the positions qr[minor][minor] through qr[m][minor].
                     The first column of the transformed minor will be (a,0,0,..)&apos;
                     The sign of a is chosen to be opposite to the sign of the first
                     component of x. Let&apos;s find a:                    
                </comment>
                <comment line="144">
                    Calculate the normalized reflection vector v and transform
                     the first column. We know the norm of v beforehand: v = x-ae
                     so |v|^2 = &lt;x-ae,x-ae&gt; = &lt;x,x&gt;-2a&lt;x,e&gt;+a^2&lt;e,e&gt; =
                     a^2+a^2-2a&lt;x,e&gt; = 2a(a - &lt;x,e&gt;).
                     Here &lt;x, e&gt; is now qr[minor][minor].
                     v = x-ae is stored in the column at qr:                    
                </comment>
                <comment line="152">
                    now |v|^2 = -2a*(qr[minor][minor])                    
                </comment>
                <comment line="154">
                    Transform the rest of the columns of the minor:
                     They will be transformed by the matrix H = I-2vv&apos;|v|^2.
                     If x is a column vector of the minor, then
                     Hx = (I-2vv&apos;|v|^2)x = x-2vv&apos;x|v|^2 = x - 2&lt;x,v&gt;|v|^2 v.
                     Therefore the transformation is easily calculated by
                     subtracting the column vector (2&lt;x,v&gt;|v|^2)v from x.
                    
                     Let 2&lt;x,v&gt;|v|^2 = alpha. From above we have
                     |v|^2 = -2a(qr[minor][minor]), so
                     alpha = -&lt;x,v&gt;(aqr[minor][minor])                    
                </comment>
                <comment line="174">
                    Subtract the column vector alpha*v from x.                    
                </comment>
                <declaration name="qrtMinor" type="double[]" line="124"/>
                <declaration name="xNormSqr" type="double" line="133"/>
                <scope line="134">
                    <declaration name="c" type="double" line="135"/>
                </scope>
                <declaration name="a" type="double" line="138"/>
                <scope line="141">
                    <scope line="165">
                        <declaration name="qrtCol" type="double[]" line="166"/>
                        <declaration name="alpha" type="double" line="167"/>
                        <scope line="168"/>
                        <scope line="174"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="182">
                Returns the matrix R of the decomposition.
                  &lt;p&gt;R is an upper-triangular matrix&lt;/p&gt;                
                <return>
                    the R matrix                    
                </return>
            </javadoc>
            <method name="getR" type="RealMatrix" line="187">
                <comment line="192">
                    R is supposed to be m x n                    
                </comment>
                <comment line="196">
                    copy the diagonal from rDiag and the upper triangle of qr                    
                </comment>
                <comment line="206">
                    return the cached matrix                    
                </comment>
                <scope line="189">
                    <declaration name="n" type="int" line="192"/>
                    <declaration name="m" type="int" line="193"/>
                    <declaration name="ra" type="double[][]" line="194"/>
                    <scope line="196">
                        <scope line="198"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="209">
                Returns the matrix Q of the decomposition.
                  &lt;p&gt;Q is an orthogonal matrix&lt;/p&gt;                
                <return>
                    the Q matrix                    
                </return>
            </javadoc>
            <method name="getQ" type="RealMatrix" line="214">
                <scope line="215"/>
            </method>
            <javadoc line="221">
                Returns the transpose of the matrix Q of the decomposition.
                  &lt;p&gt;Q is an orthogonal matrix&lt;/p&gt;                
                <return>
                    the transpose of the Q matrix, Q&lt;sup&gt;T&lt;/sup&gt;                    
                </return>
            </javadoc>
            <method name="getQT" type="RealMatrix" line="226">
                <comment line="230">
                    QT is supposed to be m x m                    
                </comment>
                <comment line="235">
                    Q = Q1 Q2 ... Q_m, so Q is formed by first constructing Q_m and then
                     applying the Householder transformations Q_(m-1),Q_(m-2),...,Q1 in
                     succession to the result                    
                </comment>
                <comment line="264">
                    return the cached matrix                    
                </comment>
                <scope line="227">
                    <declaration name="n" type="int" line="230"/>
                    <declaration name="m" type="int" line="231"/>
                    <declaration name="qta" type="double[][]" line="232"/>
                    <scope line="239"/>
                    <scope line="243">
                        <declaration name="qrtMinor" type="double[]" line="244"/>
                        <scope line="246">
                            <scope line="247">
                                <declaration name="alpha" type="double" line="248"/>
                                <scope line="249"/>
                                <scope line="254"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="267">
                Returns the Householder reflector vectors.
                  &lt;p&gt;H is a lower trapezoidal matrix whose columns represent
                  each successive Householder reflector vector. This matrix is used
                  to compute Q.&lt;/p&gt;                
                <return>
                    a matrix containing the Householder reflector vectors                    
                </return>
            </javadoc>
            <method name="getH" type="RealMatrix" line="274">
                <comment line="289">
                    return the cached matrix                    
                </comment>
                <scope line="275">
                    <declaration name="n" type="int" line="277"/>
                    <declaration name="m" type="int" line="278"/>
                    <declaration name="ha" type="double[][]" line="279"/>
                    <scope line="280">
                        <scope line="281"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="292">
                Get a solver for finding the A &amp;times; X = B solution in least square sense.                
                <return>
                    a solver                    
                </return>
            </javadoc>
            <method name="getSolver" type="DecompositionSolver" line="296"/>
            <class name="Solver" line="300">
                <implements interface="DecompositionSolver"/>
                <javadoc line="300">
                    Specialized solver.                    
                </javadoc>
                <declaration name="qrt" type="double[][]" line="302"/>
                <javadoc line="302">
                    A packed TRANSPOSED representation of the QR decomposition.
                      &lt;p&gt;The elements BELOW the diagonal are the elements of the UPPER triangular
                      matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors
                      from which an explicit form of Q can be recomputed if desired.&lt;/p&gt;                    
                </javadoc>
                <declaration name="rDiag" type="double[]" line="309"/>
                <javadoc line="309">
                    The diagonal elements of R.                    
                </javadoc>
                <declaration name="threshold" type="double" line="311"/>
                <javadoc line="311">
                    Singularity threshold.                    
                </javadoc>
                <javadoc line="314">
                    Build a solver from decomposed matrix.                    
                    <param>
                        qrt Packed TRANSPOSED representation of the QR decomposition.                        
                    </param>
                    <param>
                        rDiag Diagonal elements of R.                        
                    </param>
                    <param>
                        threshold Singularity threshold.                        
                    </param>
                </javadoc>
                <method name="Solver" type="constructor" line="323">
                    <params>
                        <param name="qrt" type="double[][]"/>
                        <param name="rDiag" type="double[]"/>
                        <param name="threshold" type="double"/>
                    </params>
                </method>
                <javadoc line="329">
                    {@inheritDoc}                    
                </javadoc>
                <method name="isNonSingular" type="boolean" line="330">
                    <scope line="331">
                        <scope line="332"/>
                    </scope>
                </method>
                <javadoc line="339">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="RealVector" line="340">
                    <params>
                        <param name="b" type="RealVector"/>
                    </params>
                    <comment line="354">
                        apply Householder transforms to solve Q.y = b                        
                    </comment>
                    <comment line="369">
                        solve triangular system R.x = y                        
                    </comment>
                    <declaration name="n" type="int" line="341"/>
                    <declaration name="m" type="int" line="342"/>
                    <scope line="343"/>
                    <scope line="346"/>
                    <declaration name="x" type="double[]" line="350"/>
                    <declaration name="y" type="double[]" line="351"/>
                    <scope line="354">
                        <declaration name="qrtMinor" type="double[]" line="356"/>
                        <declaration name="dotProduct" type="double" line="357"/>
                        <scope line="358"/>
                        <scope line="363"/>
                    </scope>
                    <scope line="369">
                        <declaration name="yRow" type="double" line="371"/>
                        <declaration name="qrtRow" type="double[]" line="372"/>
                        <scope line="374"/>
                    </scope>
                </method>
                <javadoc line="382">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="RealMatrix" line="383">
                    <params>
                        <param name="b" type="RealMatrix"/>
                    </params>
                    <comment line="406">
                        get the right hand side vector                        
                    </comment>
                    <comment line="409">
                        apply Householder transforms to solve Q.y = b                        
                    </comment>
                    <comment line="435">
                        solve triangular system R.x = y                        
                    </comment>
                    <declaration name="n" type="int" line="384"/>
                    <declaration name="m" type="int" line="385"/>
                    <scope line="386"/>
                    <scope line="389"/>
                    <declaration name="columns" type="int" line="393"/>
                    <declaration name="blockSize" type="int" line="394"/>
                    <declaration name="cBlocks" type="int" line="395"/>
                    <declaration name="xBlocks" type="double[][]" line="396"/>
                    <declaration name="y" type="double[][]" line="397"/>
                    <declaration name="alpha" type="double[]" line="398"/>
                    <scope line="400">
                        <declaration name="kStart" type="int" line="401"/>
                        <declaration name="kEnd" type="int" line="402"/>
                        <declaration name="kWidth" type="int" line="403"/>
                        <scope line="409">
                            <declaration name="qrtMinor" type="double[]" line="410"/>
                            <declaration name="factor" type="double" line="411"/>
                            <scope line="414">
                                <declaration name="d" type="double" line="415"/>
                                <declaration name="yRow" type="double[]" line="416"/>
                                <scope line="417"/>
                            </scope>
                            <scope line="421"/>
                            <scope line="425">
                                <declaration name="d" type="double" line="426"/>
                                <declaration name="yRow" type="double[]" line="427"/>
                                <scope line="428"/>
                            </scope>
                        </scope>
                        <scope line="435">
                            <declaration name="jBlock" type="int" line="436"/>
                            <declaration name="jStart" type="int" line="437"/>
                            <declaration name="factor" type="double" line="438"/>
                            <declaration name="yJ" type="double[]" line="439"/>
                            <declaration name="xBlock" type="double[]" line="440"/>
                            <declaration name="index" type="int" line="441"/>
                            <scope line="442"/>
                            <declaration name="qrtJ" type="double[]" line="447"/>
                            <scope line="448">
                                <declaration name="rIJ" type="double" line="449"/>
                                <declaration name="yI" type="double[]" line="450"/>
                                <scope line="451"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="461">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getInverse" type="RealMatrix" line="462"/>
            </class>
        </class>
    </source>