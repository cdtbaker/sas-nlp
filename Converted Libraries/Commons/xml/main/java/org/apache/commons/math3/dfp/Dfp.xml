<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.dfp">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.RealFieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Dfp" line="6">
            <implements interface="RealFieldElement">
                <type_params>
                    <type_param name="Dfp"/>
                </type_params>
            </implements>
            <javadoc line="6">
                Decimal floating point library for Java
                  &lt;p&gt;Another floating point class.  This one is built using radix 10000
                  which is 10&lt;sup&gt;4&lt;/sup&gt;, so its almost decimal.&lt;/p&gt;
                  &lt;p&gt;The design goals here are:
                  &lt;ol&gt;
                  &lt;li&gt;Decimal math, or close to it&lt;/li&gt;
                  &lt;li&gt;Settable precision (but no mix between numbers using different settings)&lt;/li&gt;
                  &lt;li&gt;Portability.  Code should be kept as portable as possible.&lt;/li&gt;
                  &lt;li&gt;Performance&lt;/li&gt;
                  &lt;li&gt;Accuracy  - Results should always be +/- 1 ULP for basic
                  algebraic operation&lt;/li&gt;
                  &lt;li&gt;Comply with IEEE 854-1987 as much as possible.
                  (See IEEE 854-1987 notes below)&lt;/li&gt;
                  &lt;/ol&gt;&lt;/p&gt;
                  &lt;p&gt;Trade offs:
                  &lt;ol&gt;
                  &lt;li&gt;Memory foot print.  I&apos;m using more memory than necessary to
                  represent numbers to get better performance.&lt;/li&gt;
                  &lt;li&gt;Digits are bigger, so rounding is a greater loss.  So, if you
                  really need 12 decimal digits, better use 4 base 10000 digits
                  there can be one partially filled.&lt;/li&gt;
                  &lt;/ol&gt;&lt;/p&gt;
                  &lt;p&gt;Numbers are represented  in the following form:
                  &lt;pre&gt;
                  n  =  sign &amp;times; mant &amp;times; (radix)&lt;sup&gt;exp&lt;/sup&gt;;&lt;/p&gt;
                  &lt;/pre&gt;
                  where sign is &amp;plusmn;1, mantissa represents a fractional number between
                  zero and one.  mant[0] is the least significant digit.
                  exp is in the range of -32767 to 32768&lt;/p&gt;
                  &lt;p&gt;IEEE 854-1987  Notes and differences&lt;/p&gt;
                  &lt;p&gt;IEEE 854 requires the radix to be either 2 or 10.  The radix here is
                  10000, so that requirement is not met, but  it is possible that a
                  subclassed can be made to make it behave as a radix 10
                  number.  It is my opinion that if it looks and behaves as a radix
                  10 number then it is one and that requirement would be met.&lt;/p&gt;
                  &lt;p&gt;The radix of 10000 was chosen because it should be faster to operate
                  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior
                  can be realized by adding an additional rounding step to ensure that
                  the number of decimal digits represented is constant.&lt;/p&gt;
                  &lt;p&gt;The IEEE standard specifically leaves out internal data encoding,
                  so it is reasonable to conclude that such a subclass of this radix
                  10000 system is merely an encoding of a radix 10 system.&lt;/p&gt;
                  &lt;p&gt;IEEE 854 also specifies the existence of &quot;sub-normal&quot; numbers.  This
                  class does not contain any such entities.  The most significant radix
                  10000 digit is always non-zero.  Instead, we support &quot;gradual underflow&quot;
                  by raising the underflow flag for numbers less with exponent less than
                  expMin, but don&apos;t flush to zero until the exponent reaches MIN_EXP-digits.
                  Thus the smallest number we can represent would be:
                  1E(-(MIN_EXP-digits-1)4),  eg, for digits=5, MIN_EXP=-32767, that would
                  be 1e-131092.&lt;/p&gt;
                  &lt;p&gt;IEEE 854 defines that the implied radix point lies just to the right
                  of the most significant digit and to the left of the remaining digits.
                  This implementation puts the implied radix point to the left of all
                  digits including the most significant one.  The most significant digit
                  here is the one just to the right of the radix point.  This is a fine
                  detail and is really only a matter of definition.  Any side effects of
                  this can be rendered invisible by a subclass.&lt;/p&gt;                
                <see>
                    DfpField                    
                </see>
                <version>
                    $Id: Dfp.java 1462423 2013-03-29 07:25:18Z luc $                    
                </version>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <declaration name="RADIX" type="int" line="69"/>
            <javadoc line="69">
                The radix, or base of this system.  Set to 10000                
            </javadoc>
            <declaration name="MIN_EXP" type="int" line="73"/>
            <javadoc line="73">
                The minimum exponent before underflow is signaled.  Flush to zero
                  occurs at minExp-DIGITS                
            </javadoc>
            <declaration name="MAX_EXP" type="int" line="78"/>
            <javadoc line="78">
                The maximum exponent before overflow is signaled and results flushed
                  to infinity                
            </javadoc>
            <declaration name="ERR_SCALE" type="int" line="83"/>
            <javadoc line="83">
                The amount under/overflows are scaled by before going to trap handler                
            </javadoc>
            <declaration name="FINITE" type="byte" line="87"/>
            <javadoc line="87">
                Indicator value for normal finite numbers.                
            </javadoc>
            <declaration name="INFINITE" type="byte" line="91"/>
            <javadoc line="91">
                Indicator value for Infinity.                
            </javadoc>
            <declaration name="SNAN" type="byte" line="95"/>
            <javadoc line="95">
                Indicator value for signaling NaN.                
            </javadoc>
            <declaration name="QNAN" type="byte" line="99"/>
            <javadoc line="99">
                Indicator value for quiet NaN.                
            </javadoc>
            <declaration name="NAN_STRING" type="String" line="103"/>
            <javadoc line="103">
                String for NaN representation.                
            </javadoc>
            <declaration name="POS_INFINITY_STRING" type="String" line="107"/>
            <javadoc line="107">
                String for positive infinity representation.                
            </javadoc>
            <declaration name="NEG_INFINITY_STRING" type="String" line="111"/>
            <javadoc line="111">
                String for negative infinity representation.                
            </javadoc>
            <declaration name="ADD_TRAP" type="String" line="115"/>
            <javadoc line="115">
                Name for traps triggered by addition.                
            </javadoc>
            <declaration name="MULTIPLY_TRAP" type="String" line="119"/>
            <javadoc line="119">
                Name for traps triggered by multiplication.                
            </javadoc>
            <declaration name="DIVIDE_TRAP" type="String" line="123"/>
            <javadoc line="123">
                Name for traps triggered by division.                
            </javadoc>
            <declaration name="SQRT_TRAP" type="String" line="127"/>
            <javadoc line="127">
                Name for traps triggered by square root.                
            </javadoc>
            <declaration name="ALIGN_TRAP" type="String" line="131"/>
            <javadoc line="131">
                Name for traps triggered by alignment.                
            </javadoc>
            <declaration name="TRUNC_TRAP" type="String" line="135"/>
            <javadoc line="135">
                Name for traps triggered by truncation.                
            </javadoc>
            <declaration name="NEXT_AFTER_TRAP" type="String" line="139"/>
            <javadoc line="139">
                Name for traps triggered by nextAfter.                
            </javadoc>
            <declaration name="LESS_THAN_TRAP" type="String" line="143"/>
            <javadoc line="143">
                Name for traps triggered by lessThan.                
            </javadoc>
            <declaration name="GREATER_THAN_TRAP" type="String" line="147"/>
            <javadoc line="147">
                Name for traps triggered by greaterThan.                
            </javadoc>
            <declaration name="NEW_INSTANCE_TRAP" type="String" line="151"/>
            <javadoc line="151">
                Name for traps triggered by newInstance.                
            </javadoc>
            <declaration name="mant" type="int[]" line="155"/>
            <javadoc line="155">
                Mantissa.                
            </javadoc>
            <declaration name="sign" type="byte" line="159"/>
            <javadoc line="159">
                Sign bit: 1 for positive, -1 for negative.                
            </javadoc>
            <declaration name="exp" type="int" line="163"/>
            <javadoc line="163">
                Exponent.                
            </javadoc>
            <declaration name="nans" type="byte" line="167"/>
            <javadoc line="167">
                Indicator for non-finite / non-number values.                
            </javadoc>
            <declaration name="field" type="DfpField" line="171"/>
            <javadoc line="171">
                Factory building similar Dfp&apos;s.                
            </javadoc>
            <javadoc line="175">
                Makes an instance with a value of zero.                
                <param>
                    field field to which this instance belongs                    
                </param>
            </javadoc>
            <method name="Dfp" type="constructor" line="179">
                <params>
                    <param name="field" type="DfpField"/>
                </params>
            </method>
            <javadoc line="186">
                Create an instance from a byte value.                
                <param>
                    field field to which this instance belongs                    
                </param>
                <param>
                    x value to convert to an instance                    
                </param>
            </javadoc>
            <method name="Dfp" type="constructor" line="191">
                <params>
                    <param name="field" type="DfpField"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="194">
                Create an instance from an int value.                
                <param>
                    field field to which this instance belongs                    
                </param>
                <param>
                    x value to convert to an instance                    
                </param>
            </javadoc>
            <method name="Dfp" type="constructor" line="199">
                <params>
                    <param name="field" type="DfpField"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="202">
                Create an instance from a long value.                
                <param>
                    field field to which this instance belongs                    
                </param>
                <param>
                    x value to convert to an instance                    
                </param>
            </javadoc>
            <method name="Dfp" type="constructor" line="207">
                <params>
                    <param name="field" type="DfpField"/>
                    <param name="x" type="long"/>
                </params>
                <declaration name="isLongMin" type="boolean" line="211"/>
                <scope line="212"/>
                <scope line="216"/>
                <scope line="220"/>
                <scope line="224"/>
                <scope line="230">
                    <scope line="231">
                        <scope line="232"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="239">
                Create an instance from a double value.                
                <param>
                    field field to which this instance belongs                    
                </param>
                <param>
                    x value to convert to an instance                    
                </param>
            </javadoc>
            <method name="Dfp" type="constructor" line="244">
                <params>
                    <param name="field" type="DfpField"/>
                    <param name="x" type="double"/>
                </params>
                <declaration name="bits" type="long" line="250"/>
                <declaration name="mantissa" type="long" line="251"/>
                <declaration name="exponent" type="int" line="252"/>
                <scope line="253">
                    <scope line="254">
                        <scope line="255"/>
                    </scope>
                    <scope line="261"/>
                </scope>
                <scope line="267">
                    <scope line="268"/>
                    <scope line="272"/>
                    <scope line="276"/>
                </scope>
                <declaration name="xdfp" type="Dfp" line="282"/>
                <scope line="285"/>
            </method>
            <javadoc line="293">
                Copy constructor.                
                <param>
                    d instance to copy                    
                </param>
            </javadoc>
            <method name="Dfp" type="constructor" line="297">
                <params>
                    <param name="d" type="Dfp"/>
                </params>
            </method>
            <javadoc line="304">
                Create an instance from a String representation.                
                <param>
                    field field to which this instance belongs                    
                </param>
                <param>
                    s string representation of the instance                    
                </param>
            </javadoc>
            <method name="Dfp" type="constructor" line="309">
                <params>
                    <param name="field" type="DfpField"/>
                    <param name="s" type="String"/>
                </params>
                <declaration name="decimalFound" type="boolean" line="315"/>
                <declaration name="rsize" type="int" line="316"/>
                <declaration name="offset" type="int" line="317"/>
                <declaration name="striped" type="char[]" line="318"/>
                <scope line="319"/>
                <scope line="324"/>
                <scope line="329"/>
                <declaration name="p" type="int" line="334"/>
                <scope line="335"/>
                <declaration name="fpdecimal" type="String" line="338"/>
                <declaration name="sciexp" type="int" line="339"/>
                <scope line="340">
                    <declaration name="fpexp" type="String" line="342"/>
                    <declaration name="negative" type="boolean" line="343"/>
                    <scope line="344">
                        <scope line="345"/>
                        <scope line="349"/>
                    </scope>
                    <scope line="353"/>
                </scope>
                <scope line="357"/>
                <scope line="360"/>
                <declaration name="decimalPos" type="int" line="364"/>
                <scope line="365">
                    <scope line="366"/>
                    <scope line="369"/>
                    <scope line="372"/>
                    <scope line="376"/>
                </scope>
                <declaration name="q" type="int" line="380"/>
                <declaration name="significantDigits" type="int" line="385"/>
                <scope line="386">
                    <scope line="387"/>
                    <scope line="390"/>
                    <scope line="393"/>
                    <scope line="399"/>
                </scope>
                <scope line="408">
                    <scope line="409">
                        <scope line="411"/>
                        <scope line="414"/>
                        <scope line="417"/>
                    </scope>
                </scope>
                <scope line="422"/>
                <scope line="425"/>
                <scope line="430">
                    <scope line="431"/>
                </scope>
                <declaration name="i" type="int" line="436"/>
                <scope line="439">
                    <scope line="440"/>
                </scope>
                <scope line="444"/>
                <scope line="449"/>
            </method>
            <javadoc line="453">
                Creates an instance with a non-finite value.                
                <param>
                    field field to which this instance belongs                    
                </param>
                <param>
                    sign sign of the Dfp to create                    
                </param>
                <param>
                    nans code of the value, must be one of {@link #INFINITE},{@link #SNAN},  {@link #QNAN}                    
                </param>
            </javadoc>
            <method name="Dfp" type="constructor" line="459">
                <params>
                    <param name="field" type="DfpField"/>
                    <param name="sign" type="byte"/>
                    <param name="nans" type="byte"/>
                </params>
            </method>
            <javadoc line="466">
                Create an instance with a value of 0.
                  Use this internally in preference to constructors to facilitate subclasses                
                <return>
                    a new instance with a value of 0                    
                </return>
            </javadoc>
            <method name="newInstance" type="Dfp" line="471"/>
            <javadoc line="474">
                Create an instance from a byte value.                
                <param>
                    x value to convert to an instance                    
                </param>
                <return>
                    a new instance with value x                    
                </return>
            </javadoc>
            <method name="newInstance" type="Dfp" line="479">
                <params>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="482">
                Create an instance from an int value.                
                <param>
                    x value to convert to an instance                    
                </param>
                <return>
                    a new instance with value x                    
                </return>
            </javadoc>
            <method name="newInstance" type="Dfp" line="487">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="490">
                Create an instance from a long value.                
                <param>
                    x value to convert to an instance                    
                </param>
                <return>
                    a new instance with value x                    
                </return>
            </javadoc>
            <method name="newInstance" type="Dfp" line="495">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="498">
                Create an instance from a double value.                
                <param>
                    x value to convert to an instance                    
                </param>
                <return>
                    a new instance with value x                    
                </return>
            </javadoc>
            <method name="newInstance" type="Dfp" line="503">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="506">
                Create an instance by copying an existing one.
                  Use this internally in preference to constructors to facilitate subclasses.                
                <param>
                    d instance to copy                    
                </param>
                <return>
                    a new instance with the same value as d                    
                </return>
            </javadoc>
            <method name="newInstance" type="Dfp" line="512">
                <params>
                    <param name="d" type="Dfp"/>
                </params>
                <scope line="513">
                    <declaration name="result" type="Dfp" line="515"/>
                </scope>
            </method>
            <javadoc line="521">
                Create an instance from a String representation.
                  Use this internally in preference to constructors to facilitate subclasses.                
                <param>
                    s string representation of the instance                    
                </param>
                <return>
                    a new instance parsed from specified string                    
                </return>
            </javadoc>
            <method name="newInstance" type="Dfp" line="527">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="530">
                Creates an instance with a non-finite value.                
                <param>
                    sig sign of the Dfp to create                    
                </param>
                <param>
                    code code of the value, must be one of {@link #INFINITE},{@link #SNAN},  {@link #QNAN}                    
                </param>
                <return>
                    a new instance with a non-finite value                    
                </return>
            </javadoc>
            <method name="newInstance" type="Dfp" line="536">
                <params>
                    <param name="sig" type="byte"/>
                    <param name="code" type="byte"/>
                </params>
            </method>
            <javadoc line="539">
                Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.
                  &lt;p&gt;
                  The field is linked to the number of digits and acts as a factory
                  for {@link Dfp} instances.
                  &lt;/p&gt;                
                <return>
                    {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs                    
                </return>
            </javadoc>
            <method name="getField" type="DfpField" line="547"/>
            <javadoc line="550">
                Get the number of radix digits of the instance.                
                <return>
                    number of radix digits                    
                </return>
            </javadoc>
            <method name="getRadixDigits" type="int" line="554"/>
            <javadoc line="557">
                Get the constant 0.                
                <return>
                    a Dfp with value zero                    
                </return>
            </javadoc>
            <method name="getZero" type="Dfp" line="561"/>
            <javadoc line="564">
                Get the constant 1.                
                <return>
                    a Dfp with value one                    
                </return>
            </javadoc>
            <method name="getOne" type="Dfp" line="568"/>
            <javadoc line="571">
                Get the constant 2.                
                <return>
                    a Dfp with value two                    
                </return>
            </javadoc>
            <method name="getTwo" type="Dfp" line="575"/>
            <javadoc line="578">
                Shift the mantissa left, and adjust the exponent to compensate.                
            </javadoc>
            <method name="shiftLeft" type="void" line="581">
                <scope line="582"/>
            </method>
            <javadoc line="588">
                Shift the mantissa right, and adjust the exponent to compensate.                
            </javadoc>
            <method name="shiftRight" type="void" line="591">
                <scope line="592"/>
            </method>
            <javadoc line="598">
                Make our exp equal to the supplied one, this may cause rounding.
                  Also causes de-normalized numbers.  These numbers are generally
                  dangerous because most routines assume normalized numbers.
                  Align doesn&apos;t round, so it will return the last digit destroyed
                  by shifting right.                
                <param>
                    e desired exponent                    
                </param>
                <return>
                    last digit destroyed by shifting right                    
                </return>
            </javadoc>
            <method name="align" type="int" line="607">
                <params>
                    <param name="e" type="int"/>
                </params>
                <declaration name="lostdigit" type="int" line="608"/>
                <declaration name="inexact" type="boolean" line="609"/>
                <declaration name="diff" type="int" line="610"/>
                <declaration name="adiff" type="int" line="611"/>
                <scope line="612"/>
                <scope line="615"/>
                <scope line="618"/>
                <scope line="625">
                    <scope line="626">
                        <scope line="627"/>
                    </scope>
                    <scope line="633"/>
                </scope>
                <scope line="637"/>
            </method>
            <javadoc line="643">
                Check if instance is less than x.                
                <param>
                    x number to check instance against                    
                </param>
                <return>
                    true if instance is less than x and neither are NaN, false otherwise                    
                </return>
            </javadoc>
            <method name="lessThan" type="boolean" line="648">
                <params>
                    <param name="x" type="Dfp"/>
                </params>
                <scope line="649">
                    <declaration name="result" type="Dfp" line="651"/>
                </scope>
                <scope line="656"/>
            </method>
            <javadoc line="663">
                Check if instance is greater than x.                
                <param>
                    x number to check instance against                    
                </param>
                <return>
                    true if instance is greater than x and neither are NaN, false otherwise                    
                </return>
            </javadoc>
            <method name="greaterThan" type="boolean" line="668">
                <params>
                    <param name="x" type="Dfp"/>
                </params>
                <scope line="669">
                    <declaration name="result" type="Dfp" line="671"/>
                </scope>
                <scope line="676"/>
            </method>
            <javadoc line="683">
                Check if instance is less than or equal to 0.                
                <return>
                    true if instance is not NaN and less than or equal to 0, false otherwise                    
                </return>
            </javadoc>
            <method name="negativeOrNull" type="boolean" line="687">
                <scope line="688"/>
            </method>
            <javadoc line="695">
                Check if instance is strictly less than 0.                
                <return>
                    true if instance is not NaN and less than or equal to 0, false otherwise                    
                </return>
            </javadoc>
            <method name="strictlyNegative" type="boolean" line="699">
                <scope line="700"/>
            </method>
            <javadoc line="707">
                Check if instance is greater than or equal to 0.                
                <return>
                    true if instance is not NaN and greater than or equal to 0, false otherwise                    
                </return>
            </javadoc>
            <method name="positiveOrNull" type="boolean" line="711">
                <scope line="712"/>
            </method>
            <javadoc line="719">
                Check if instance is strictly greater than 0.                
                <return>
                    true if instance is not NaN and greater than or equal to 0, false otherwise                    
                </return>
            </javadoc>
            <method name="strictlyPositive" type="boolean" line="723">
                <scope line="724"/>
            </method>
            <javadoc line="731">
                Get the absolute value of instance.                
                <return>
                    absolute value of instance                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="abs" type="Dfp" line="736">
                <declaration name="result" type="Dfp" line="737"/>
            </method>
            <javadoc line="741">
                Check if instance is infinite.                
                <return>
                    true if instance is infinite                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="745"/>
            <javadoc line="748">
                Check if instance is not a number.                
                <return>
                    true if instance is not a number                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="752"/>
            <javadoc line="755">
                Check if instance is equal to zero.                
                <return>
                    true if instance is equal to zero                    
                </return>
            </javadoc>
            <method name="isZero" type="boolean" line="759">
                <scope line="760"/>
            </method>
            <javadoc line="767">
                Check if instance is equal to x.                
                <param>
                    other object to check instance against                    
                </param>
                <return>
                    true if instance is equal to x and neither are NaN, false otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="772">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="773">
                    <declaration name="x" type="Dfp" line="774"/>
                    <scope line="775"/>
                </scope>
            </method>
            <javadoc line="782">
                Gets a hashCode for the instance.                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="786"/>
            <javadoc line="789">
                Check if instance is not equal to x.                
                <param>
                    x number to check instance against                    
                </param>
                <return>
                    true if instance is not equal to x and neither are NaN, false otherwise                    
                </return>
            </javadoc>
            <method name="unequal" type="boolean" line="794">
                <params>
                    <param name="x" type="Dfp"/>
                </params>
                <scope line="795"/>
            </method>
            <javadoc line="800">
                Compare two instances.                
                <param>
                    a first instance in comparison                    
                </param>
                <param>
                    b second instance in comparison                    
                </param>
                <return>
                    -1 if a<b, 1 if a>b and 0 if a==b
                      Note this method does not properly handle NaNs or numbers with different precision.                    
                </return>
            </javadoc>
            <method name="compare" type="int" line="807">
                <params>
                    <param name="a" type="Dfp"/>
                    <param name="b" type="Dfp"/>
                </params>
                <scope line="808"/>
                <scope line="811">
                    <scope line="812"/>
                    <scope line="815"/>
                </scope>
                <scope line="819"/>
                <scope line="822"/>
                <scope line="825"/>
                <scope line="828">
                    <scope line="829"/>
                    <scope line="832"/>
                </scope>
                <scope line="836">
                    <scope line="837"/>
                    <scope line="840"/>
                </scope>
            </method>
            <javadoc line="846">
                Round to nearest integer using the round-half-even method.
                  That is round to nearest integer unless both are equidistant.
                  In which case round to the even one.                
                <return>
                    rounded value                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="rint" type="Dfp" line="853"/>
            <javadoc line="856">
                Round to an integer using the round floor mode.
                  That is, round toward -Infinity                
                <return>
                    rounded value                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="floor" type="Dfp" line="862"/>
            <javadoc line="865">
                Round to an integer using the round ceil mode.
                  That is, round toward +Infinity                
                <return>
                    rounded value                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="ceil" type="Dfp" line="871"/>
            <javadoc line="874">
                Returns the IEEE remainder.                
                <param>
                    d divisor                    
                </param>
                <return>
                    this less n &times; d, where n is the integer closest to this/d                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="remainder" type="Dfp" line="880">
                <params>
                    <param name="d" type="Dfp"/>
                </params>
                <declaration name="result" type="Dfp" line="881"/>
                <scope line="882"/>
            </method>
            <javadoc line="887">
                Does the integer conversions with the specified rounding.                
                <param>
                    rmode rounding mode to use                    
                </param>
                <return>
                    truncated value                    
                </return>
            </javadoc>
            <method name="trunc" type="Dfp" line="892">
                <params>
                    <param name="rmode" type="DfpField.RoundingMode"/>
                </params>
                <declaration name="changed" type="boolean" line="893"/>
                <scope line="894"/>
                <scope line="897"/>
                <scope line="900"/>
                <scope line="903">
                    <declaration name="result" type="Dfp" line="905"/>
                </scope>
                <scope line="909"/>
                <declaration name="result" type="Dfp" line="912"/>
                <scope line="913"/>
                <scope line="917">
                    <scope line="920"/>
                    <scope line="925"/>
                    <declaration name="half" type="Dfp" line="931"/>
                    <declaration name="a" type="Dfp" line="932"/>
                    <scope line="934"/>
                    <scope line="939"/>
                </scope>
            </method>
            <javadoc line="952">
                Convert this to an integer.
                  If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648.                
                <return>
                    converted number                    
                </return>
            </javadoc>
            <method name="intValue" type="int" line="957">
                <declaration name="rounded" type="Dfp" line="958"/>
                <declaration name="result" type="int" line="959"/>
                <scope line="961"/>
                <scope line="964"/>
                <scope line="967"/>
                <scope line="970"/>
            </method>
            <javadoc line="975">
                Get the exponent of the greatest power of 10000 that is
                  less than or equal to the absolute value of this.  I.E.  if
                  this is 10&lt;sup&gt;6&lt;/sup&gt; then log10K would return 1.                
                <return>
                    integer base 10000 logarithm                    
                </return>
            </javadoc>
            <method name="log10K" type="int" line="981"/>
            <javadoc line="984">
                Get the specified  power of 10000.                
                <param>
                    e desired power                    
                </param>
                <return>
                    10000<sup>e</sup>                    
                </return>
            </javadoc>
            <method name="power10K" type="Dfp" line="989">
                <params>
                    <param name="e" type="int"/>
                </params>
                <declaration name="d" type="Dfp" line="990"/>
            </method>
            <javadoc line="994">
                Get the exponent of the greatest power of 10 that is less than or equal to abs(this).                
                <return>
                    integer base 10 logarithm                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="intLog10" type="int" line="999">
                <scope line="1000"/>
                <scope line="1003"/>
                <scope line="1006"/>
            </method>
            <javadoc line="1011">
                Return the specified  power of 10.                
                <param>
                    e desired power                    
                </param>
                <return>
                    10<sup>e</sup>                    
                </return>
            </javadoc>
            <method name="power10" type="Dfp" line="1016">
                <params>
                    <param name="e" type="int"/>
                </params>
                <declaration name="d" type="Dfp" line="1017"/>
                <scope line="1018"/>
                <scope line="1021"/>
            </method>
            <javadoc line="1038">
                Negate the mantissa of this by computing the complement.
                  Leaves the sign bit unchanged, used internally by add.
                  Denormalized numbers are handled properly here.                
                <param>
                    extra ???                    
                </param>
                <return>
                    ???                    
                </return>
            </javadoc>
            <method name="complement" type="int" line="1045">
                <params>
                    <param name="extra" type="int"/>
                </params>
                <scope line="1047"/>
                <declaration name="rh" type="int" line="1050"/>
                <scope line="1052">
                    <declaration name="r" type="int" line="1053"/>
                </scope>
            </method>
            <javadoc line="1059">
                Add x to this.                
                <param>
                    x number to add                    
                </param>
                <return>
                    sum of this and x                    
                </return>
            </javadoc>
            <method name="add" type="Dfp" line="1064">
                <params>
                    <param name="x" type="Dfp"/>
                </params>
                <scope line="1065">
                    <declaration name="result" type="Dfp" line="1067"/>
                </scope>
                <scope line="1071">
                    <scope line="1072"/>
                    <scope line="1075"/>
                    <scope line="1078"/>
                    <scope line="1081"/>
                    <scope line="1084"/>
                    <scope line="1087">
                        <declaration name="result" type="Dfp" line="1089"/>
                    </scope>
                </scope>
                <declaration name="a" type="Dfp" line="1095"/>
                <declaration name="b" type="Dfp" line="1096"/>
                <declaration name="result" type="Dfp" line="1097"/>
                <declaration name="asign" type="byte" line="1098"/>
                <declaration name="bsign" type="byte" line="1099"/>
                <declaration name="rsign" type="byte" line="1102"/>
                <scope line="1103"/>
                <scope line="1106"/>
                <scope line="1109"/>
                <declaration name="aextradigit" type="int" line="1112"/>
                <declaration name="bextradigit" type="int" line="1113"/>
                <scope line="1114"/>
                <scope line="1117"/>
                <scope line="1120">
                    <scope line="1121"/>
                    <scope line="1124"/>
                </scope>
                <declaration name="rh" type="int" line="1128"/>
                <scope line="1129">
                    <declaration name="r" type="int" line="1130"/>
                </scope>
                <scope line="1136">
                    <declaration name="lostdigit" type="int" line="1137"/>
                    <declaration name="excp" type="int" line="1140"/>
                    <scope line="1141"/>
                </scope>
                <scope line="1145">
                    <scope line="1146"/>
                    <scope line="1150"/>
                </scope>
                <scope line="1156">
                    <scope line="1158"/>
                </scope>
                <declaration name="excp" type="int" line="1162"/>
                <scope line="1163"/>
            </method>
            <javadoc line="1168">
                Returns a number that is this number with the sign bit reversed.                
                <return>
                    the opposite of this                    
                </return>
            </javadoc>
            <method name="negate" type="Dfp" line="1172">
                <declaration name="result" type="Dfp" line="1173"/>
            </method>
            <javadoc line="1177">
                Subtract x from this.                
                <param>
                    x number to subtract                    
                </param>
                <return>
                    difference of this and a                    
                </return>
            </javadoc>
            <method name="subtract" type="Dfp" line="1182">
                <params>
                    <param name="x" type="Dfp"/>
                </params>
            </method>
            <javadoc line="1185">
                Round this given the next digit n using the current rounding mode.                
                <param>
                    n ???                    
                </param>
                <return>
                    the IEEE flag if an exception occurred                    
                </return>
            </javadoc>
            <method name="round" type="int" line="1190">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="inc" type="boolean" line="1191"/>
                <scope line="1219">
                    <declaration name="rh" type="int" line="1220"/>
                    <scope line="1221">
                        <declaration name="r" type="int" line="1222"/>
                    </scope>
                    <scope line="1226"/>
                </scope>
                <scope line="1231"/>
                <scope line="1235"/>
                <scope line="1239"/>
            </method>
            <javadoc line="1245">
                Multiply this by x.                
                <param>
                    x multiplicand                    
                </param>
                <return>
                    product of this and x                    
                </return>
            </javadoc>
            <method name="multiply" type="Dfp" line="1250">
                <params>
                    <param name="x" type="Dfp"/>
                </params>
                <scope line="1251">
                    <declaration name="result" type="Dfp" line="1253"/>
                </scope>
                <declaration name="result" type="Dfp" line="1257"/>
                <scope line="1258">
                    <scope line="1259"/>
                    <scope line="1262"/>
                    <scope line="1265"/>
                    <scope line="1270"/>
                    <scope line="1275"/>
                    <scope line="1280"/>
                </scope>
                <declaration name="product" type="int[]" line="1288"/>
                <scope line="1289">
                    <declaration name="rh" type="int" line="1290"/>
                    <scope line="1291">
                        <declaration name="r" type="int" line="1292"/>
                    </scope>
                </scope>
                <declaration name="md" type="int" line="1299"/>
                <scope line="1300">
                    <scope line="1301"/>
                </scope>
                <scope line="1306"/>
                <scope line="1311"/>
                <declaration name="excp" type="int" line="1314"/>
                <scope line="1315"/>
                <scope line="1318"/>
                <scope line="1321"/>
            </method>
            <javadoc line="1326">
                Multiply this by a single digit x.                
                <param>
                    x multiplicand                    
                </param>
                <return>
                    product of this and x                    
                </return>
            </javadoc>
            <method name="multiply" type="Dfp" line="1331">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="1332"/>
                <scope line="1335"/>
            </method>
            <javadoc line="1339">
                Multiply this by a single digit 0&amp;lt;=x&amp;lt;radix.
                  There are speed advantages in this special case.                
                <param>
                    x multiplicand                    
                </param>
                <return>
                    product of this and x                    
                </return>
            </javadoc>
            <method name="multiplyFast" type="Dfp" line="1345">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="result" type="Dfp" line="1346"/>
                <scope line="1347">
                    <scope line="1348"/>
                    <scope line="1351"/>
                    <scope line="1355"/>
                </scope>
                <scope line="1363"/>
                <declaration name="rh" type="int" line="1370"/>
                <scope line="1371">
                    <declaration name="r" type="int" line="1372"/>
                </scope>
                <declaration name="lostdigit" type="int" line="1376"/>
                <scope line="1377"/>
                <scope line="1382"/>
                <declaration name="excp" type="int" line="1385"/>
                <scope line="1386"/>
            </method>
            <javadoc line="1391">
                Divide this by divisor.                
                <param>
                    divisor divisor                    
                </param>
                <return>
                    quotient of this by divisor                    
                </return>
            </javadoc>
            <method name="divide" type="Dfp" line="1396">
                <params>
                    <param name="divisor" type="Dfp"/>
                </params>
                <declaration name="dividend" type="int" line="1397"/>
                <declaration name="quotient" type="int" line="1398"/>
                <declaration name="remainder" type="int" line="1399"/>
                <declaration name="qd" type="int" line="1400"/>
                <declaration name="nsqd" type="int" line="1401"/>
                <declaration name="trial" type="int" line="1402"/>
                <declaration name="minadj" type="int" line="1403"/>
                <declaration name="trialgood" type="boolean" line="1404"/>
                <declaration name="md" type="int" line="1405"/>
                <declaration name="excp" type="int" line="1406"/>
                <scope line="1407">
                    <declaration name="result" type="Dfp" line="1409"/>
                </scope>
                <declaration name="result" type="Dfp" line="1413"/>
                <scope line="1414">
                    <scope line="1415"/>
                    <scope line="1418"/>
                    <scope line="1421"/>
                    <scope line="1426"/>
                    <scope line="1431"/>
                </scope>
                <scope line="1439"/>
                <scope line="1454"/>
                <scope line="1460">
                    <declaration name="divMsb" type="int" line="1461"/>
                    <declaration name="min" type="int" line="1462"/>
                    <declaration name="max" type="int" line="1463"/>
                    <scope line="1465">
                        <declaration name="rh" type="int" line="1467"/>
                        <scope line="1468">
                            <declaration name="dm" type="int" line="1469"/>
                            <declaration name="r" type="int" line="1470"/>
                        </scope>
                        <scope line="1475">
                            <declaration name="r" type="int" line="1476"/>
                        </scope>
                        <scope line="1480"/>
                        <scope line="1486"/>
                        <scope line="1491">
                            <scope line="1492"/>
                            <scope line="1495"/>
                        </scope>
                        <scope line="1499"/>
                        <scope line="1502"/>
                    </scope>
                    <scope line="1507"/>
                    <scope line="1510"/>
                    <scope line="1513"/>
                    <scope line="1517"/>
                </scope>
                <scope line="1522">
                    <scope line="1523"/>
                </scope>
                <scope line="1528"/>
                <scope line="1533"/>
                <scope line="1536"/>
                <scope line="1539"/>
                <scope line="1542"/>
            </method>
            <javadoc line="1547">
                Divide by a single digit less than radix.
                  Special case, so there are speed advantages. 0 &amp;lt;= divisor &amp;lt; radix                
                <param>
                    divisor divisor                    
                </param>
                <return>
                    quotient of this by divisor                    
                </return>
            </javadoc>
            <method name="divide" type="Dfp" line="1553">
                <params>
                    <param name="divisor" type="int"/>
                </params>
                <scope line="1554">
                    <scope line="1555"/>
                    <scope line="1558"/>
                </scope>
                <scope line="1562">
                    <declaration name="result" type="Dfp" line="1564"/>
                </scope>
                <scope line="1570">
                    <declaration name="result" type="Dfp" line="1572"/>
                </scope>
                <declaration name="result" type="Dfp" line="1577"/>
                <declaration name="rl" type="int" line="1578"/>
                <scope line="1579">
                    <declaration name="r" type="int" line="1580"/>
                    <declaration name="rh" type="int" line="1581"/>
                </scope>
                <scope line="1585">
                    <declaration name="r" type="int" line="1587"/>
                    <declaration name="rh" type="int" line="1588"/>
                </scope>
                <declaration name="excp" type="int" line="1592"/>
                <scope line="1593"/>
            </method>
            <javadoc line="1598">
                {@inheritDoc}                
            </javadoc>
            <method name="reciprocal" type="Dfp" line="1601"/>
            <javadoc line="1604">
                Compute the square root.                
                <return>
                    square root of the instance                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="sqrt" type="Dfp" line="1609">
                <scope line="1610"/>
                <scope line="1613">
                    <scope line="1614"/>
                    <scope line="1617"/>
                    <scope line="1620">
                        <declaration name="result" type="Dfp" line="1621"/>
                    </scope>
                </scope>
                <scope line="1628">
                    <declaration name="result" type="Dfp" line="1629"/>
                </scope>
                <declaration name="x" type="Dfp" line="1636"/>
                <scope line="1637"/>
                <declaration name="dx" type="Dfp" line="1653"/>
                <declaration name="px" type="Dfp" line="1654"/>
                <declaration name="ppx" type="Dfp" line="1655"/>
                <scope line="1656">
                    <scope line="1664"/>
                    <scope line="1667"/>
                </scope>
            </method>
            <javadoc line="1673">
                Get a string representation of the instance.                
                <return>
                    string representation of the instance                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1677">
                <scope line="1678">
                    <scope line="1679"/>
                    <scope line="1682"/>
                </scope>
                <scope line="1686"/>
            </method>
            <javadoc line="1691">
                Convert an instance to a string using scientific notation.                
                <return>
                    string representation of the instance in scientific notation                    
                </return>
            </javadoc>
            <method name="dfp2sci" type="String" line="1695">
                <declaration name="rawdigits" type="char" line="1696"/>
                <declaration name="outputbuffer" type="char" line="1697"/>
                <declaration name="p" type="int" line="1698"/>
                <declaration name="q" type="int" line="1699"/>
                <declaration name="e" type="int" line="1700"/>
                <declaration name="ae" type="int" line="1701"/>
                <declaration name="shf" type="int" line="1702"/>
                <scope line="1704"/>
                <scope line="1710">
                    <scope line="1711"/>
                </scope>
                <scope line="1717"/>
                <scope line="1720">
                    <scope line="1723"/>
                </scope>
                <scope line="1727"/>
                <scope line="1738"/>
                <scope line="1741"/>
                <scope line="1743"/>
                <scope line="1746"/>
            </method>
            <javadoc line="1753">
                Convert an instance to a string using normal notation.                
                <return>
                    string representation of the instance in normal notation                    
                </return>
            </javadoc>
            <method name="dfp2string" type="String" line="1757">
                <declaration name="buffer" type="char" line="1758"/>
                <declaration name="p" type="int" line="1759"/>
                <declaration name="q" type="int" line="1760"/>
                <declaration name="e" type="int" line="1761"/>
                <declaration name="pointInserted" type="boolean" line="1762"/>
                <scope line="1764"/>
                <scope line="1769"/>
                <scope line="1776">
                    <scope line="1781"/>
                </scope>
                <scope line="1786"/>
                <scope line="1793"/>
                <scope line="1797"/>
                <scope line="1800"/>
                <scope line="1803"/>
                <scope line="1806"/>
            </method>
            <javadoc line="1811">
                Raises a trap.  This does not set the corresponding flag however.                
                <param>
                    type the trap type                    
                </param>
                <param>
                    what - name of routine trap occurred in                    
                </param>
                <param>
                    oper - input operator to function                    
                </param>
                <param>
                    result - the result computed prior to the trap                    
                </param>
                <return>
                    The suggested return value from the trap handler                    
                </return>
            </javadoc>
            <method name="dotrap" type="Dfp" line="1819">
                <params>
                    <param name="type" type="int"/>
                    <param name="what" type="String"/>
                    <param name="oper" type="Dfp"/>
                    <param name="result" type="Dfp"/>
                </params>
                <declaration name="def" type="Dfp" line="1820"/>
                <scope line="1828"/>
                <scope line="1833"/>
                <scope line="1837"/>
                <scope line="1841"/>
                <scope line="1847"/>
                <scope line="1851"/>
            </method>
            <javadoc line="1868">
                Trap handler.  Subclasses may override this to provide trap
                  functionality per IEEE 854-1987.                
                <param>
                    type  The exception type - e.g. FLAG_OVERFLOW                    
                </param>
                <param>
                    what  The name of the routine we were in e.g. divide()                    
                </param>
                <param>
                    oper  An operand to this function if any                    
                </param>
                <param>
                    def   The default return value if trap not enabled                    
                </param>
                <param>
                    result    The result that is specified to be delivered per
                      IEEE 854, if any                    
                </param>
                <return>
                    the value that should be return by the operation triggering the trap                    
                </return>
            </javadoc>
            <method name="trap" type="Dfp" line="1879">
                <params>
                    <param name="type" type="int"/>
                    <param name="what" type="String"/>
                    <param name="oper" type="Dfp"/>
                    <param name="def" type="Dfp"/>
                    <param name="result" type="Dfp"/>
                </params>
            </method>
            <javadoc line="1882">
                Returns the type - one of FINITE, INFINITE, SNAN, QNAN.                
                <return>
                    type of the number                    
                </return>
            </javadoc>
            <method name="classify" type="int" line="1886"/>
            <javadoc line="1889">
                Creates an instance that is the same as x except that it has the sign of y.
                  abs(x) = dfp.copysign(x, dfp.one)                
                <param>
                    x number to get the value from                    
                </param>
                <param>
                    y number to get the sign from                    
                </param>
                <return>
                    a number with the value of x and the sign of y                    
                </return>
            </javadoc>
            <method name="copysign" type="Dfp" line="1896">
                <params>
                    <param name="x" type="Dfp"/>
                    <param name="y" type="Dfp"/>
                </params>
                <declaration name="result" type="Dfp" line="1897"/>
            </method>
            <javadoc line="1901">
                Returns the next number greater than this one in the direction of x.
                  If this==x then simply returns this.                
                <param>
                    x direction where to look at                    
                </param>
                <return>
                    closest number next to instance in the direction of x                    
                </return>
            </javadoc>
            <method name="nextAfter" type="Dfp" line="1907">
                <params>
                    <param name="x" type="Dfp"/>
                </params>
                <scope line="1908">
                    <declaration name="result" type="Dfp" line="1910"/>
                </scope>
                <declaration name="up" type="boolean" line="1914"/>
                <scope line="1915"/>
                <scope line="1918"/>
                <scope line="1921"/>
                <declaration name="inc" type="Dfp" line="1924"/>
                <declaration name="result" type="Dfp" line="1925"/>
                <scope line="1926">
                    <scope line="1930"/>
                </scope>
                <scope line="1935">
                    <scope line="1939"/>
                    <scope line="1942"/>
                    <scope line="1945"/>
                </scope>
                <scope line="1950"/>
                <scope line="1954"/>
            </method>
            <javadoc line="1960">
                Convert the instance into a double.                
                <return>
                    a double approximating the instance                    
                </return>
                <see>
                    #toSplitDouble()                    
                </see>
            </javadoc>
            <method name="toDouble" type="double" line="1965">
                <scope line="1966">
                    <scope line="1967"/>
                    <scope line="1970"/>
                </scope>
                <scope line="1974"/>
                <declaration name="y" type="Dfp" line="1977"/>
                <declaration name="negate" type="boolean" line="1978"/>
                <declaration name="cmp0" type="int" line="1979"/>
                <scope line="1980"/>
                <scope line="1983"/>
                <declaration name="exponent" type="int" line="1987"/>
                <scope line="1988"/>
                <declaration name="tempDfp" type="Dfp" line="1991"/>
                <scope line="1992"/>
                <scope line="1998"/>
                <scope line="2001"/>
                <scope line="2004"/>
                <declaration name="str" type="String" line="2008"/>
                <declaration name="mantissa" type="long" line="2010"/>
                <scope line="2011"/>
                <scope line="2015"/>
                <scope line="2018"/>
                <declaration name="bits" type="long" line="2022"/>
                <declaration name="x" type="double" line="2023"/>
                <scope line="2024"/>
            </method>
            <javadoc line="2029">
                Convert the instance into a split double.                
                <return>
                    an array of two doubles which sum represent the instance                    
                </return>
                <see>
                    #toDouble()                    
                </see>
            </javadoc>
            <method name="toSplitDouble" type="double[]" line="2034">
                <declaration name="split" type="double" line="2035"/>
                <declaration name="mask" type="long" line="2036"/>
            </method>
            <javadoc line="2041">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="getReal" type="double" line="2045"/>
            <javadoc line="2048">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="add" type="Dfp" line="2052">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="2055">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="subtract" type="Dfp" line="2059">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="2062">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="multiply" type="Dfp" line="2066">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="2069">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="divide" type="Dfp" line="2073">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="2076">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="remainder" type="Dfp" line="2080">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="2083">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="round" type="long" line="2087"/>
            <javadoc line="2090">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="signum" type="Dfp" line="2094">
                <scope line="2095"/>
                <scope line="2098"/>
            </method>
            <javadoc line="2102">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="copySign" type="Dfp" line="2106">
                <params>
                    <param name="s" type="Dfp"/>
                </params>
                <scope line="2107"/>
            </method>
            <javadoc line="2112">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="copySign" type="Dfp" line="2116">
                <params>
                    <param name="s" type="double"/>
                </params>
                <declaration name="sb" type="long" line="2117"/>
                <scope line="2118"/>
            </method>
            <javadoc line="2123">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="scalb" type="Dfp" line="2127">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="2130">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="hypot" type="Dfp" line="2134">
                <params>
                    <param name="y" type="Dfp"/>
                </params>
            </method>
            <javadoc line="2137">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="cbrt" type="Dfp" line="2141"/>
            <javadoc line="2144">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="rootN" type="Dfp" line="2148">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="2151">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="pow" type="Dfp" line="2155">
                <params>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="2158">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="pow" type="Dfp" line="2162">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="2165">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="pow" type="Dfp" line="2169">
                <params>
                    <param name="e" type="Dfp"/>
                </params>
            </method>
            <javadoc line="2172">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="exp" type="Dfp" line="2176"/>
            <javadoc line="2179">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="expm1" type="Dfp" line="2183"/>
            <javadoc line="2186">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="log" type="Dfp" line="2190"/>
            <javadoc line="2193">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="log1p" type="Dfp" line="2197"/>
            <javadoc line="2200">
                Get the exponent of the greatest power of 10 that is less than or equal to abs(this).                
                <return>
                    integer base 10 logarithm                    
                </return>
                <deprecated>
                    as of 3.2, replaced by {@link #intLog10()}, in 4.0 the return type
                      will be changed to Dfp                    
                </deprecated>
            </javadoc>
            <method name="log10" type="int" line="2206"/>
            <javadoc line="2209">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="cos" type="Dfp" line="2213"/>
            <javadoc line="2216">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="sin" type="Dfp" line="2220"/>
            <javadoc line="2223">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="tan" type="Dfp" line="2227"/>
            <javadoc line="2230">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="acos" type="Dfp" line="2234"/>
            <javadoc line="2237">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="asin" type="Dfp" line="2241"/>
            <javadoc line="2244">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="atan" type="Dfp" line="2248"/>
            <javadoc line="2251">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="atan2" type="Dfp" line="2255">
                <params>
                    <param name="x" type="Dfp"/>
                </params>
                <declaration name="r" type="Dfp" line="2256"/>
                <scope line="2257"/>
                <scope line="2260">
                    <declaration name="tmp" type="Dfp" line="2261"/>
                    <declaration name="pmPi" type="Dfp" line="2262"/>
                </scope>
            </method>
            <javadoc line="2266">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="cosh" type="Dfp" line="2270"/>
            <javadoc line="2273">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="sinh" type="Dfp" line="2277"/>
            <javadoc line="2280">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="tanh" type="Dfp" line="2284">
                <declaration name="ePlus" type="Dfp" line="2285"/>
                <declaration name="eMinus" type="Dfp" line="2286"/>
            </method>
            <javadoc line="2289">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="acosh" type="Dfp" line="2293"/>
            <javadoc line="2296">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="asinh" type="Dfp" line="2300"/>
            <javadoc line="2303">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="atanh" type="Dfp" line="2307"/>
            <javadoc line="2310">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="Dfp" line="2314">
                <params>
                    <param name="a" type="Dfp[]"/>
                    <param name="b" type="Dfp[]"/>
                </params>
                <scope line="2315"/>
                <declaration name="r" type="Dfp" line="2318"/>
                <scope line="2319"/>
            </method>
            <javadoc line="2324">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="Dfp" line="2328">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="b" type="Dfp[]"/>
                </params>
                <scope line="2329"/>
                <declaration name="r" type="Dfp" line="2332"/>
                <scope line="2333"/>
            </method>
            <javadoc line="2338">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="Dfp" line="2342">
                <params>
                    <param name="a1" type="Dfp"/>
                    <param name="b1" type="Dfp"/>
                    <param name="a2" type="Dfp"/>
                    <param name="b2" type="Dfp"/>
                </params>
            </method>
            <javadoc line="2345">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="Dfp" line="2349">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="Dfp"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="Dfp"/>
                </params>
            </method>
            <javadoc line="2352">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="Dfp" line="2356">
                <params>
                    <param name="a1" type="Dfp"/>
                    <param name="b1" type="Dfp"/>
                    <param name="a2" type="Dfp"/>
                    <param name="b2" type="Dfp"/>
                    <param name="a3" type="Dfp"/>
                    <param name="b3" type="Dfp"/>
                </params>
            </method>
            <javadoc line="2359">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="Dfp" line="2363">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="Dfp"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="Dfp"/>
                    <param name="a3" type="double"/>
                    <param name="b3" type="Dfp"/>
                </params>
            </method>
            <javadoc line="2366">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="Dfp" line="2370">
                <params>
                    <param name="a1" type="Dfp"/>
                    <param name="b1" type="Dfp"/>
                    <param name="a2" type="Dfp"/>
                    <param name="b2" type="Dfp"/>
                    <param name="a3" type="Dfp"/>
                    <param name="b3" type="Dfp"/>
                    <param name="a4" type="Dfp"/>
                    <param name="b4" type="Dfp"/>
                </params>
            </method>
            <javadoc line="2373">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="Dfp" line="2377">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="Dfp"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="Dfp"/>
                    <param name="a3" type="double"/>
                    <param name="b3" type="Dfp"/>
                    <param name="a4" type="double"/>
                    <param name="b4" type="Dfp"/>
                </params>
            </method>
        </class>
    </source>