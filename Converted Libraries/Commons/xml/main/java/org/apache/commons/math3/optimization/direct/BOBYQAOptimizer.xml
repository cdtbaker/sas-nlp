<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.MultivariateOptimizer"/>
        <class name="BOBYQAOptimizer" line="33">
            <extends class="BaseAbstractMultivariateSimpleBoundsOptimizer">
                <type_params>
                    <type_param name="MultivariateFunction"/>
                </type_params>
            </extends>
            <comment line="336">
                bobyqa                
            </comment>
            <comment line="338">
                ----------------------------------------------------------------------------------------                
            </comment>
            <comment line="1222">
                bobyqb                
            </comment>
            <comment line="1224">
                ----------------------------------------------------------------------------------------                
            </comment>
            <comment line="1559">
                altmov                
            </comment>
            <comment line="1561">
                ----------------------------------------------------------------------------------------                
            </comment>
            <comment line="1754">
                prelim                
            </comment>
            <comment line="1757">
                ----------------------------------------------------------------------------------------                
            </comment>
            <comment line="2276">
                trsbox                
            </comment>
            <comment line="2278">
                ----------------------------------------------------------------------------------------                
            </comment>
            <comment line="2372">
                update                
            </comment>
            <comment line="2435">
                XXX utility for figuring out call sequence.                
            </comment>
            <comment line="2442">
                XXX utility for figuring out call sequence.                
            </comment>
            <comment line="2446">
                XXX utility for figuring out call sequence.                
            </comment>
            <implements interface="MultivariateOptimizer"/>
            <javadoc line="33">
                Powell&apos;s BOBYQA algorithm. This implementation is translated and
                  adapted from the Fortran version available
                  &lt;a href=&quot;http://plato.asu.edu/ftp/other_software/bobyqa.zip&quot;&gt;here&lt;/a&gt;.
                  See &lt;a href=&quot;http://www.optimization-online.org/DB_HTML/2010/05/2616.html&quot;&gt;
                  this paper&lt;/a&gt; for an introduction.
                  &lt;br/&gt;
                  BOBYQA is particularly well suited for high dimensional problems
                  where derivatives are not available. In most cases it outperforms the{@link PowellOptimizer} significantly. Stochastic algorithms like{@link CMAESOptimizer} succeed more often than BOBYQA, but are more
                  expensive. BOBYQA could also be considered as a replacement of any
                  derivative-based optimizer when the derivatives are approximated by
                  finite differences.                
                <version>
                    $Id: BOBYQAOptimizer.java 1462507 2013-03-29 15:50:22Z luc $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="MINIMUM_PROBLEM_DIMENSION" type="int" line="56"/>
            <javadoc line="56">
                Minimum dimension of the problem: {@value}                
            </javadoc>
            <declaration name="DEFAULT_INITIAL_RADIUS" type="double" line="58"/>
            <javadoc line="58">
                Default value for {@link #initialTrustRegionRadius}: {@value} .                
            </javadoc>
            <declaration name="DEFAULT_STOPPING_RADIUS" type="double" line="60"/>
            <javadoc line="60">
                Default value for {@link #stoppingTrustRegionRadius}: {@value} .                
            </javadoc>
            <declaration name="ZERO" type="double" line="63"/>
            <declaration name="ONE" type="double" line="64"/>
            <declaration name="TWO" type="double" line="65"/>
            <declaration name="TEN" type="double" line="66"/>
            <declaration name="SIXTEEN" type="double" line="67"/>
            <declaration name="TWO_HUNDRED_FIFTY" type="double" line="68"/>
            <declaration name="MINUS_ONE" type="double" line="69"/>
            <declaration name="HALF" type="double" line="70"/>
            <declaration name="ONE_OVER_FOUR" type="double" line="71"/>
            <declaration name="ONE_OVER_EIGHT" type="double" line="72"/>
            <declaration name="ONE_OVER_TEN" type="double" line="73"/>
            <declaration name="ONE_OVER_A_THOUSAND" type="double" line="74"/>
            <declaration name="numberOfInterpolationPoints" type="int" line="76"/>
            <javadoc line="76">
                numberOfInterpolationPoints XXX                
            </javadoc>
            <declaration name="initialTrustRegionRadius" type="double" line="80"/>
            <javadoc line="80">
                initialTrustRegionRadius XXX                
            </javadoc>
            <declaration name="stoppingTrustRegionRadius" type="double" line="84"/>
            <javadoc line="84">
                stoppingTrustRegionRadius XXX                
            </javadoc>
            <declaration name="isMinimize" type="boolean" line="88"/>
            <javadoc line="88">
                Goal type (minimize or maximize).                
            </javadoc>
            <declaration name="currentBest" type="ArrayRealVector" line="90"/>
            <javadoc line="90">
                Current best values for the variables to be optimized.
                  The vector will be changed in-place to contain the values of the least
                  calculated objective function values.                
            </javadoc>
            <declaration name="boundDifference" type="double[]" line="96"/>
            <javadoc line="96">
                Differences between the upper and lower bounds.                
            </javadoc>
            <declaration name="trustRegionCenterInterpolationPointIndex" type="int" line="98"/>
            <javadoc line="98">
                Index of the interpolation point at the trust region center.                
            </javadoc>
            <declaration name="bMatrix" type="Array2DRowRealMatrix" line="102"/>
            <javadoc line="102">
                Last &lt;em&gt;n&lt;/em&gt; columns of matrix H (where &lt;em&gt;n&lt;/em&gt; is the dimension
                  of the problem).
                  XXX &quot;bmat&quot; in the original code.                
            </javadoc>
            <declaration name="zMatrix" type="Array2DRowRealMatrix" line="108"/>
            <javadoc line="108">
                Factorization of the leading &lt;em&gt;npt&lt;/em&gt; square submatrix of H, this
                  factorization being Z Z&lt;sup&gt;T&lt;/sup&gt;, which provides both the correct
                  rank and positive semi-definiteness.
                  XXX &quot;zmat&quot; in the original code.                
            </javadoc>
            <declaration name="interpolationPoints" type="Array2DRowRealMatrix" line="115"/>
            <javadoc line="115">
                Coordinates of the interpolation points relative to {@link #originShift}.
                  XXX &quot;xpt&quot; in the original code.                
            </javadoc>
            <declaration name="originShift" type="ArrayRealVector" line="120"/>
            <javadoc line="120">
                Shift of origin that should reduce the contributions from rounding
                  errors to values of the model and Lagrange functions.
                  XXX &quot;xbase&quot; in the original code.                
            </javadoc>
            <declaration name="fAtInterpolationPoints" type="ArrayRealVector" line="126"/>
            <javadoc line="126">
                Values of the objective function at the interpolation points.
                  XXX &quot;fval&quot; in the original code.                
            </javadoc>
            <declaration name="trustRegionCenterOffset" type="ArrayRealVector" line="131"/>
            <javadoc line="131">
                Displacement from {@link #originShift} of the trust region center.
                  XXX &quot;xopt&quot; in the original code.                
            </javadoc>
            <declaration name="gradientAtTrustRegionCenter" type="ArrayRealVector" line="136"/>
            <javadoc line="136">
                Gradient of the quadratic model at {@link #originShift} +{@link #trustRegionCenterOffset}.
                  XXX &quot;gopt&quot; in the original code.                
            </javadoc>
            <declaration name="lowerDifference" type="ArrayRealVector" line="142"/>
            <javadoc line="142">
                Differences {@link #getLowerBound()} - {@link #originShift}.
                  All the components of every {@link #trustRegionCenterOffset} are going
                  to satisfy the bounds&lt;br/&gt;{@link #getLowerBound() lowerBound}&lt;sub&gt;i&lt;/sub&gt; &amp;le;{@link #trustRegionCenterOffset}&lt;sub&gt;i&lt;/sub&gt;,&lt;br/&gt;
                  with appropriate equalities when {@link #trustRegionCenterOffset} is
                  on a constraint boundary.
                  XXX &quot;sl&quot; in the original code.                
            </javadoc>
            <declaration name="upperDifference" type="ArrayRealVector" line="153"/>
            <javadoc line="153">
                Differences {@link #getUpperBound()} - {@link #originShift}All the components of every {@link #trustRegionCenterOffset} are going
                  to satisfy the bounds&lt;br/&gt;{@link #trustRegionCenterOffset}&lt;sub&gt;i&lt;/sub&gt; &amp;le;{@link #getUpperBound() upperBound}&lt;sub&gt;i&lt;/sub&gt;,&lt;br/&gt;
                  with appropriate equalities when {@link #trustRegionCenterOffset} is
                  on a constraint boundary.
                  XXX &quot;su&quot; in the original code.                
            </javadoc>
            <declaration name="modelSecondDerivativesParameters" type="ArrayRealVector" line="164"/>
            <javadoc line="164">
                Parameters of the implicit second derivatives of the quadratic model.
                  XXX &quot;pq&quot; in the original code.                
            </javadoc>
            <declaration name="newPoint" type="ArrayRealVector" line="169"/>
            <javadoc line="169">
                Point chosen by function {@link #trsbox(double,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector) trsbox}or {@link #altmov(int,double) altmov}.
                  Usually {@link #originShift} + {@link #newPoint} is the vector of
                  variables for the next evaluation of the objective function.
                  It also satisfies the constraints indicated in {@link #lowerDifference}and {@link #upperDifference}.
                  XXX &quot;xnew&quot; in the original code.                
            </javadoc>
            <declaration name="alternativeNewPoint" type="ArrayRealVector" line="180"/>
            <javadoc line="180">
                Alternative to {@link #newPoint}, chosen by{@link #altmov(int,double) altmov}.
                  It may replace {@link #newPoint} in order to increase the denominator
                  in the {@link #update(double,double,int) updating procedure}.
                  XXX &quot;xalt&quot; in the original code.                
            </javadoc>
            <declaration name="trialStepPoint" type="ArrayRealVector" line="188"/>
            <javadoc line="188">
                Trial step from {@link #trustRegionCenterOffset} which is usually{@link #newPoint} - {@link #trustRegionCenterOffset}.
                  XXX &quot;d__&quot; in the original code.                
            </javadoc>
            <declaration name="lagrangeValuesAtNewPoint" type="ArrayRealVector" line="194"/>
            <javadoc line="194">
                Values of the Lagrange functions at a new point.
                  XXX &quot;vlag&quot; in the original code.                
            </javadoc>
            <declaration name="modelSecondDerivativesValues" type="ArrayRealVector" line="199"/>
            <javadoc line="199">
                Explicit second derivatives of the quadratic model.
                  XXX &quot;hq&quot; in the original code.                
            </javadoc>
            <javadoc line="205">
                @param numberOfInterpolationPoints Number of interpolation conditions.
                  For a problem of dimension {@code n}, its value must be in the interval{@code [n+2, (n+1)(n+2)/2]}.
                  Choices that exceed {@code 2n+1} are not recommended.                
            </javadoc>
            <method name="BOBYQAOptimizer" type="constructor" line="211">
                <params>
                    <param name="numberOfInterpolationPoints" type="int"/>
                </params>
            </method>
            <javadoc line="217">
                @param numberOfInterpolationPoints Number of interpolation conditions.
                  For a problem of dimension {@code n}, its value must be in the interval{@code [n+2, (n+1)(n+2)/2]}.
                  Choices that exceed {@code 2n+1} are not recommended.                
                <param>
                    initialTrustRegionRadius Initial trust region radius.                    
                </param>
                <param>
                    stoppingTrustRegionRadius Stopping trust region radius.                    
                </param>
            </javadoc>
            <method name="BOBYQAOptimizer" type="constructor" line="227">
                <params>
                    <param name="numberOfInterpolationPoints" type="int"/>
                    <param name="initialTrustRegionRadius" type="double"/>
                    <param name="stoppingTrustRegionRadius" type="double"/>
                </params>
                <comment line="228">
                    No custom convergence criterion.                    
                </comment>
            </method>
            <javadoc line="234">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="236">
                <comment line="240">
                    Validity checks.                    
                </comment>
                <declaration name="lowerBound" type="double[]" line="237"/>
                <declaration name="upperBound" type="double[]" line="238"/>
                <declaration name="value" type="double" line="246"/>
            </method>
            <javadoc line="252">
                This subroutine seeks the least value of a function of many variables,
                  by applying a trust region method that forms quadratic models by
                  interpolation. There is usually some freedom in the interpolation
                  conditions, which is taken up by minimizing the Frobenius norm of
                  the change to the second derivative of the model, beginning with the
                  zero matrix. The values of the variables are constrained by upper and
                  lower bounds. The arguments of the subroutine are as follows.
                  N must be set to the number of variables and must be at least two.
                  NPT is the number of interpolation conditions. Its value must be in
                  the interval [N+2,(N+1)(N+2)/2]. Choices that exceed 2N+1 are not
                  recommended.
                  Initial values of the variables must be set in X(1),X(2),...,X(N). They
                  will be changed to the values that give the least calculated F.
                  For I=1,2,...,N, XL(I) and XU(I) must provide the lower and upper
                  bounds, respectively, on X(I). The construction of quadratic models
                  requires XL(I) to be strictly less than XU(I) for each I. Further,
                  the contribution to a model from changes to the I-th variable is
                  damaged severely by rounding errors if XU(I)-XL(I) is too small.
                  RHOBEG and RHOEND must be set to the initial and final values of a trust
                  region radius, so both must be positive with RHOEND no greater than
                  RHOBEG. Typically, RHOBEG should be about one tenth of the greatest
                  expected change to a variable, while RHOEND should indicate the
                  accuracy that is required in the final values of the variables. An
                  error return occurs if any of the differences XU(I)-XL(I), I=1,...,N,
                  is less than 2RHOBEG.
                  MAXFUN must be set to an upper bound on the number of calls of CALFUN.
                  The array W will be used for working space. Its length must be at least
                  (NPT+5)(NPT+N)+3N(N+5)/2.                
                <param>
                    lowerBound Lower bounds.                    
                </param>
                <param>
                    upperBound Upper bounds.                    
                </param>
                <return>
                    the value of the objective at the optimum.                    
                </return>
            </javadoc>
            <method name="bobyqa" type="double" line="288">
                <params>
                    <param name="lowerBound" type="double[]"/>
                    <param name="upperBound" type="double[]"/>
                </params>
                <comment line="289">
                    XXX                    
                </comment>
                <comment line="293">
                    Return if there is insufficient space between the bounds. Modify the                    
                </comment>
                <comment line="294">
                    initial X if necessary in order to avoid conflicts between the bounds                    
                </comment>
                <comment line="295">
                    and the construction of the first quadratic model. The lower and upper                    
                </comment>
                <comment line="296">
                    bounds on moves from the updated X are set now, in the ISL and ISU                    
                </comment>
                <comment line="297">
                    partitions of W, in order to provide useful and exact information about                    
                </comment>
                <comment line="298">
                    components of X that become within distance RHOBEG from their bounds.                    
                </comment>
                <comment line="312">
                    Computing MAX                    
                </comment>
                <comment line="323">
                    Computing MIN                    
                </comment>
                <comment line="332">
                    Make the call of BOBYQB.                    
                </comment>
                <declaration name="n" type="int" line="291"/>
                <scope line="300">
                    <declaration name="boundDiff" type="double" line="301"/>
                    <scope line="304">
                        <scope line="305"/>
                        <scope line="309">
                            <declaration name="deltaOne" type="double" line="313"/>
                        </scope>
                    </scope>
                    <scope line="316">
                        <scope line="317"/>
                        <scope line="321">
                            <declaration name="deltaOne" type="double" line="324"/>
                            <declaration name="deltaTwo" type="double" line="325"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="339">
                The arguments N, NPT, X, XL, XU, RHOBEG, RHOEND, IPRINT and MAXFUN
                  are identical to the corresponding arguments in SUBROUTINE BOBYQA.
                  XBASE holds a shift of origin that should reduce the contributions
                  from rounding errors to values of the model and Lagrange functions.
                  XPT is a two-dimensional array that holds the coordinates of the
                  interpolation points relative to XBASE.
                  FVAL holds the values of F at the interpolation points.
                  XOPT is set to the displacement from XBASE of the trust region centre.
                  GOPT holds the gradient of the quadratic model at XBASE+XOPT.
                  HQ holds the explicit second derivatives of the quadratic model.
                  PQ contains the parameters of the implicit second derivatives of the
                  quadratic model.
                  BMAT holds the last N columns of H.
                  ZMAT holds the factorization of the leading NPT by NPT submatrix of H,
                  this factorization being ZMAT times ZMAT^T, which provides both the
                  correct rank and positive semi-definiteness.
                  NDIM is the first dimension of BMAT and has the value NPT+N.
                  SL and SU hold the differences XL-XBASE and XU-XBASE, respectively.
                  All the components of every XOPT are going to satisfy the bounds
                  SL(I) .LEQ. XOPT(I) .LEQ. SU(I), with appropriate equalities when
                  XOPT is on a constraint boundary.
                  XNEW is chosen by SUBROUTINE TRSBOX or ALTMOV. Usually XBASE+XNEW is the
                  vector of variables for the next call of CALFUN. XNEW also satisfies
                  the SL and SU constraints in the way that has just been mentioned.
                  XALT is an alternative to XNEW, chosen by ALTMOV, that may replace XNEW
                  in order to increase the denominator in the updating of UPDATE.
                  D is reserved for a trial step from XOPT, which is usually XNEW-XOPT.
                  VLAG contains the values of the Lagrange functions at a new point X.
                  They are part of a product that requires VLAG to be of length NDIM.
                  W is a one-dimensional array that is used for working space. Its length
                  must be at least 3NDIM = 3(NPT+N).                
                <param>
                    lowerBound Lower bounds.                    
                </param>
                <param>
                    upperBound Upper bounds.                    
                </param>
                <return>
                    the value of the objective at the optimum.                    
                </return>
            </javadoc>
            <method name="bobyqb" type="double" line="377">
                <params>
                    <param name="lowerBound" type="double[]"/>
                    <param name="upperBound" type="double[]"/>
                </params>
                <comment line="378">
                    XXX                    
                </comment>
                <comment line="395">
                    Set some constants.                    
                </comment>
                <comment line="396">
                    Parameter adjustments                    
                </comment>
                <comment line="398">
                    Function Body                    
                </comment>
                <comment line="400">
                    The call of PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,                    
                </comment>
                <comment line="401">
                    BMAT and ZMAT for the first iteration, with the corresponding values of                    
                </comment>
                <comment line="402">
                    of NF and KOPT, which are the number of calls of CALFUN so far and the                    
                </comment>
                <comment line="403">
                    index of the interpolation point at the trust region centre. Then the                    
                </comment>
                <comment line="404">
                    initial XOPT is set too. The branch to label 720 occurs if MAXFUN is                    
                </comment>
                <comment line="405">
                    less than NPT. GOPT will be updated if KOPT is different from KBASE.                    
                </comment>
                <comment line="413">
                    Computing 2nd power                    
                </comment>
                <comment line="420">
                    Complete the settings that are required for the iterative procedure.                    
                </comment>
                <comment line="441">
                    Update GOPT if necessary before the first iteration and after each                    
                </comment>
                <comment line="442">
                    call of RESCUE that makes a call of CALFUN.                    
                </comment>
                <comment line="447">
                    XXX                    
                </comment>
                <comment line="470">
                    throw new PathIsExploredException(); // XXX                    
                </comment>
                <comment line="474">
                    Generate the next point in the trust region that provides a small value                    
                </comment>
                <comment line="475">
                    of the quadratic model subject to the constraints on the variables.                    
                </comment>
                <comment line="476">
                    The int NTRITS is set to the number &quot;trust region&quot; iterations that                    
                </comment>
                <comment line="477">
                    have occurred since the last &quot;alternative&quot; iteration. If the length                    
                </comment>
                <comment line="478">
                    of XNEW-XOPT is less than HALF*RHO, however, then there is a branch to                    
                </comment>
                <comment line="479">
                    label 650 or 680 with NTRITS=-1, instead of calculating F at XNEW.                    
                </comment>
                <comment line="483">
                    XXX                    
                </comment>
                <comment line="495">
                    Computing MIN                    
                </comment>
                <comment line="501">
                    Computing 2nd power                    
                </comment>
                <comment line="508">
                    The following choice between labels 650 and 680 depends on whether or                    
                </comment>
                <comment line="509">
                    not our work with the current RHO seems to be complete. Either RHO is                    
                </comment>
                <comment line="510">
                    decreased or termination occurs if the errors in the quadratic model at                    
                </comment>
                <comment line="511">
                    the last three interpolation points compare favourably with predictions                    
                </comment>
                <comment line="512">
                    of likely improvements to the model within distance HALF*RHO of XOPT.                    
                </comment>
                <comment line="514">
                    Computing MAX                    
                </comment>
                <comment line="534">
                    Computing 2nd power                    
                </comment>
                <comment line="542">
                    throw new PathIsExploredException(); // XXX                    
                </comment>
                <comment line="549">
                    Severe cancellation is likely to occur if XOPT is too far from XBASE.                    
                </comment>
                <comment line="550">
                    If the following test holds, then XBASE is shifted so that XOPT becomes                    
                </comment>
                <comment line="551">
                    zero. The appropriate changes are made to BMAT and to the second                    
                </comment>
                <comment line="552">
                    derivatives of the current model, beginning with the changes to BMAT                    
                </comment>
                <comment line="553">
                    that do not depend on ZMAT. VLAG is used temporarily for working space.                    
                </comment>
                <comment line="557">
                    XXX                    
                </comment>
                <comment line="561">
                    final RealVector sumVector                    
                </comment>
                <comment line="562">
                    = new ArrayRealVector(npt, -HALF * xoptsq).add(interpolationPoints.operate(trustRegionCenter));                    
                </comment>
                <comment line="569">
                    sum = sumVector.getEntry(k); // XXX &quot;testAckley&quot; and &quot;testDiffPow&quot; fail.                    
                </comment>
                <comment line="585">
                    Then the revisions of BMAT that depend on ZMAT are calculated.                    
                </comment>
                <comment line="618">
                    The following instructions complete the shift, including the changes                    
                </comment>
                <comment line="619">
                    to the second derivative parameters of the quadratic model.                    
                </comment>
                <comment line="651">
                    XBASE is also moved to XOPT by a call of RESCUE. This calculation is                    
                </comment>
                <comment line="652">
                    more expensive than the previous shift, because new matrices BMAT and                    
                </comment>
                <comment line="653">
                    ZMAT are generated from scratch, which may include the replacement of                    
                </comment>
                <comment line="654">
                    interpolation points whose positions seem to be causing near linear                    
                </comment>
                <comment line="655">
                    dependence in the interpolation conditions. Therefore RESCUE is called                    
                </comment>
                <comment line="656">
                    only if rounding errors have reduced by at least a factor of two the                    
                </comment>
                <comment line="657">
                    denominator of the formula for updating the H matrix. It provides a                    
                </comment>
                <comment line="658">
                    useful safeguard, but is not invoked in most applications of BOBYQA.                    
                </comment>
                <comment line="662">
                    XXX                    
                </comment>
                <comment line="663">
                    Pick two alternative vectors of variables, relative to XBASE, that                    
                </comment>
                <comment line="664">
                    are suitable as new positions of the KNEW-th interpolation point.                    
                </comment>
                <comment line="665">
                    Firstly, XNEW is set to the point on a line through XOPT and another                    
                </comment>
                <comment line="666">
                    interpolation point that minimizes the predicted value of the next                    
                </comment>
                <comment line="667">
                    denominator, subject to ||XNEW - XOPT|| .LEQ. ADELT and to the SL                    
                </comment>
                <comment line="668">
                    and SU bounds. Secondly, XALT is set to the best feasible point on                    
                </comment>
                <comment line="669">
                    a constrained version of the Cauchy step of the KNEW-th Lagrange                    
                </comment>
                <comment line="670">
                    function, the corresponding value of the square of this function                    
                </comment>
                <comment line="671">
                    being returned in CAUCHY. The choice between these alternatives is                    
                </comment>
                <comment line="672">
                    going to be made when the denominator is calculated.                    
                </comment>
                <comment line="682">
                    Calculate VLAG and BETA for the current choice of D. The scalar                    
                </comment>
                <comment line="683">
                    product of D with XPT(K,.) is going to be held in W(NPT+K) for                    
                </comment>
                <comment line="684">
                    use when VQUAD is calculated.                    
                </comment>
                <comment line="688">
                    XXX                    
                </comment>
                <comment line="717">
                    Computing 2nd power                    
                </comment>
                <comment line="734">
                    Original                    
                </comment>
                <comment line="735">
                    beta += dx * dx + dsq * (xoptsq + dx + dx + HALF * dsq) - bsum; // XXX &quot;testAckley&quot; and &quot;testDiffPow&quot; fail.                    
                </comment>
                <comment line="736">
                    beta = dx * dx + dsq * (xoptsq + 2 * dx + HALF * dsq) + beta - bsum; // XXX &quot;testDiffPow&quot; fails.                    
                </comment>
                <comment line="741">
                    If NTRITS is zero, the denominator may be increased by replacing                    
                </comment>
                <comment line="742">
                    the step D of ALTMOV by a Cauchy step. Then RESCUE may be called if                    
                </comment>
                <comment line="743">
                    rounding errors have damaged the chosen denominator.                    
                </comment>
                <comment line="746">
                    Computing 2nd power                    
                </comment>
                <comment line="754">
                    XXX Useful statement?                    
                </comment>
                <comment line="757">
                    Alternatively, if NTRITS is positive, then set KNEW to the index of                    
                </comment>
                <comment line="758">
                    the next interpolation point to be deleted to make room for a trust                    
                </comment>
                <comment line="759">
                    region step. Again RESCUE may be called if rounding errors have damaged_                    
                </comment>
                <comment line="760">
                    the chosen denominator, which is the reason for attempting to select                    
                </comment>
                <comment line="761">
                    KNEW before calculating the next value of the objective function.                    
                </comment>
                <comment line="774">
                    Computing 2nd power                    
                </comment>
                <comment line="778">
                    Computing 2nd power                    
                </comment>
                <comment line="783">
                    Computing 2nd power                    
                </comment>
                <comment line="787">
                    Computing MAX                    
                </comment>
                <comment line="788">
                    Computing 2nd power                    
                </comment>
                <comment line="796">
                    Computing MAX                    
                </comment>
                <comment line="797">
                    Computing 2nd power                    
                </comment>
                <comment line="803">
                    Put the variables for the next calculation of the objective function                    
                </comment>
                <comment line="804">
                    in XNEW, with any adjustments for the bounds.                    
                </comment>
                <comment line="806">
                    Calculate the value of the objective function at XBASE+XNEW, unless                    
                </comment>
                <comment line="807">
                    the limit on the number of calculations of F has been reached.                    
                </comment>
                <comment line="811">
                    XXX                    
                </comment>
                <comment line="813">
                    Computing MIN                    
                </comment>
                <comment line="814">
                    Computing MAX                    
                </comment>
                <comment line="837">
                    Use the quadratic model to predict the change in F due to the step D,                    
                </comment>
                <comment line="838">
                    and set DIFF to the error of this prediction.                    
                </comment>
                <comment line="855">
                    Computing 2nd power                    
                </comment>
                <comment line="857">
                    &quot;d1&quot; must be squared first to prevent test failures.                    
                </comment>
                <comment line="868">
                    Pick the next value of DELTA after a trust region step.                    
                </comment>
                <comment line="877">
                    Computing MIN                    
                </comment>
                <comment line="880">
                    Computing MAX                    
                </comment>
                <comment line="883">
                    Computing MAX                    
                </comment>
                <comment line="890">
                    Recalculate KNEW and DENOM if the new F is less than FOPT.                    
                </comment>
                <comment line="902">
                    Computing 2nd power                    
                </comment>
                <comment line="906">
                    Computing 2nd power                    
                </comment>
                <comment line="911">
                    Computing 2nd power                    
                </comment>
                <comment line="915">
                    Computing MAX                    
                </comment>
                <comment line="916">
                    Computing 2nd power                    
                </comment>
                <comment line="924">
                    Computing MAX                    
                </comment>
                <comment line="925">
                    Computing 2nd power                    
                </comment>
                <comment line="937">
                    Update BMAT and ZMAT, so that the KNEW-th interpolation point can be                    
                </comment>
                <comment line="938">
                    moved. Also update the second derivative terms of the model.                    
                </comment>
                <comment line="959">
                    Include the new interpolation point, and make the changes to GOPT at                    
                </comment>
                <comment line="960">
                    the old XOPT that are caused by the updating of the quadratic model.                    
                </comment>
                <comment line="985">
                    Update XOPT, GOPT and KOPT if the new calculated F is less than FOPT.                    
                </comment>
                <comment line="993">
                    Computing 2nd power                    
                </comment>
                <comment line="1016">
                    Calculate the parameters of the least Frobenius norm interpolant to                    
                </comment>
                <comment line="1017">
                    the current data, the gradient of this interpolant at XOPT being put                    
                </comment>
                <comment line="1018">
                    into VLAG(NPT+I), I=1,2,...,N.                    
                </comment>
                <comment line="1051">
                    Computing MIN                    
                </comment>
                <comment line="1052">
                    Computing 2nd power                    
                </comment>
                <comment line="1055">
                    Computing 2nd power                    
                </comment>
                <comment line="1059">
                    Computing MAX                    
                </comment>
                <comment line="1060">
                    Computing 2nd power                    
                </comment>
                <comment line="1063">
                    Computing 2nd power                    
                </comment>
                <comment line="1067">
                    Computing 2nd power                    
                </comment>
                <comment line="1075">
                    Test whether to replace the new quadratic model by the least Frobenius                    
                </comment>
                <comment line="1076">
                    norm interpolant, making the replacement if the test is satisfied.                    
                </comment>
                <comment line="1098">
                    If a trust region step has provided a sufficient decrease in F, then                    
                </comment>
                <comment line="1099">
                    branch for another trust region calculation. The case NTRITS=0 occurs                    
                </comment>
                <comment line="1100">
                    when the new interpolation point was reached by an alternative step.                    
                </comment>
                <comment line="1109">
                    Alternatively, find out if the interpolation points are close enough                    
                </comment>
                <comment line="1110">
                    to the best point so far.                    
                </comment>
                <comment line="1112">
                    Computing MAX                    
                </comment>
                <comment line="1113">
                    Computing 2nd power                    
                </comment>
                <comment line="1115">
                    Computing 2nd power                    
                </comment>
                <comment line="1120">
                    XXX                    
                </comment>
                <comment line="1125">
                    Computing 2nd power                    
                </comment>
                <comment line="1135">
                    If KNEW is positive, then ALTMOV finds alternative new positions for                    
                </comment>
                <comment line="1136">
                    the KNEW-th interpolation point within distance ADELT of XOPT. It is                    
                </comment>
                <comment line="1137">
                    reached via label 90. Otherwise, there is a branch to label 60 for                    
                </comment>
                <comment line="1138">
                    another trust region iteration, unless the calculations with the                    
                </comment>
                <comment line="1139">
                    current RHO are complete.                    
                </comment>
                <comment line="1144">
                    Computing MIN                    
                </comment>
                <comment line="1151">
                    Computing MAX                    
                </comment>
                <comment line="1152">
                    Computing MIN                    
                </comment>
                <comment line="1168">
                    The calculations with the current value of RHO are complete. Pick the                    
                </comment>
                <comment line="1169">
                    next values of RHO and DELTA.                    
                </comment>
                <comment line="1172">
                    XXX                    
                </comment>
                <comment line="1189">
                    Return from the calculation, after another Newton-Raphson step, if                    
                </comment>
                <comment line="1190">
                    it is too short to have been tried before.                    
                </comment>
                <comment line="1197">
                    XXX                    
                </comment>
                <comment line="1200">
                    Computing MIN                    
                </comment>
                <comment line="1201">
                    Computing MAX                    
                </comment>
                <declaration name="n" type="int" line="380"/>
                <declaration name="npt" type="int" line="381"/>
                <declaration name="np" type="int" line="382"/>
                <declaration name="nptm" type="int" line="383"/>
                <declaration name="nh" type="int" line="384"/>
                <declaration name="work1" type="ArrayRealVector" line="386"/>
                <declaration name="work2" type="ArrayRealVector" line="387"/>
                <declaration name="work3" type="ArrayRealVector" line="388"/>
                <declaration name="cauchy" type="double" line="390"/>
                <declaration name="alpha" type="double" line="391"/>
                <declaration name="dsq" type="double" line="392"/>
                <declaration name="crvmin" type="double" line="393"/>
                <declaration name="xoptsq" type="double" line="410"/>
                <scope line="411">
                    <declaration name="deltaOne" type="double" line="414"/>
                </scope>
                <declaration name="fsave" type="double" line="417"/>
                <declaration name="kbase" type="int" line="418"/>
                <declaration name="ntrits" type="int" line="422"/>
                <declaration name="itest" type="int" line="423"/>
                <declaration name="knew" type="int" line="424"/>
                <declaration name="nfsav" type="int" line="425"/>
                <declaration name="rho" type="double" line="426"/>
                <declaration name="delta" type="double" line="427"/>
                <declaration name="diffa" type="double" line="428"/>
                <declaration name="diffb" type="double" line="429"/>
                <declaration name="diffc" type="double" line="430"/>
                <declaration name="f" type="double" line="431"/>
                <declaration name="beta" type="double" line="432"/>
                <declaration name="adelt" type="double" line="433"/>
                <declaration name="denom" type="double" line="434"/>
                <declaration name="ratio" type="double" line="435"/>
                <declaration name="dnorm" type="double" line="436"/>
                <declaration name="scaden" type="double" line="437"/>
                <declaration name="biglsq" type="double" line="438"/>
                <declaration name="distsq" type="double" line="439"/>
                <declaration name="state" type="int" line="444"/>
                <scope line="446">
                    <scope line="448">
                        <declaration name="ih" type="int" line="449"/>
                        <scope line="450">
                            <scope line="451">
                                <scope line="452"/>
                            </scope>
                        </scope>
                        <scope line="459">
                            <scope line="460">
                                <declaration name="temp" type="double" line="461"/>
                                <scope line="462"/>
                                <scope line="466"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="482">
                    <declaration name="gnew" type="ArrayRealVector" line="484"/>
                    <declaration name="xbdi" type="ArrayRealVector" line="485"/>
                    <declaration name="s" type="ArrayRealVector" line="486"/>
                    <declaration name="hs" type="ArrayRealVector" line="487"/>
                    <declaration name="hred" type="ArrayRealVector" line="488"/>
                    <declaration name="dsqCrvmin" type="double[]" line="490"/>
                    <declaration name="deltaOne" type="double" line="496"/>
                    <declaration name="deltaTwo" type="double" line="497"/>
                    <scope line="499">
                        <scope line="504"/>
                        <declaration name="errbig" type="double" line="516"/>
                        <declaration name="frhosq" type="double" line="517"/>
                        <scope line="519"/>
                        <declaration name="bdtol" type="double" line="522"/>
                        <scope line="523">
                            <declaration name="bdtest" type="double" line="524"/>
                            <scope line="525"/>
                            <scope line="528"/>
                            <scope line="531">
                                <declaration name="curv" type="double" line="532"/>
                                <scope line="533">
                                    <declaration name="d1" type="double" line="535"/>
                                </scope>
                                <scope line="539"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="556">
                    <scope line="558">
                        <declaration name="fracsq" type="double" line="559"/>
                        <declaration name="sumpq" type="double" line="560"/>
                        <scope line="563">
                            <declaration name="sum" type="double" line="565"/>
                            <scope line="566"/>
                            <declaration name="temp" type="double" line="571"/>
                            <scope line="572">
                                <declaration name="ip" type="int" line="575"/>
                                <scope line="576"/>
                            </scope>
                        </scope>
                        <scope line="587">
                            <declaration name="sumz" type="double" line="588"/>
                            <declaration name="sumw" type="double" line="589"/>
                            <scope line="590"/>
                            <scope line="595">
                                <declaration name="sum" type="double" line="596"/>
                                <scope line="597"/>
                                <scope line="601"/>
                            </scope>
                            <scope line="607">
                                <declaration name="ip" type="int" line="608"/>
                                <declaration name="temp" type="double" line="609"/>
                                <scope line="610"/>
                            </scope>
                        </scope>
                        <declaration name="ih" type="int" line="621"/>
                        <scope line="622">
                            <scope line="624"/>
                            <scope line="628"/>
                        </scope>
                        <scope line="637"/>
                    </scope>
                    <scope line="646"/>
                </scope>
                <scope line="661">
                    <declaration name="alphaCauchy" type="double[]" line="674"/>
                    <scope line="678"/>
                </scope>
                <scope line="687">
                    <scope line="689">
                        <declaration name="suma" type="double" line="690"/>
                        <declaration name="sumb" type="double" line="691"/>
                        <declaration name="sum" type="double" line="692"/>
                        <scope line="693"/>
                    </scope>
                    <scope line="703">
                        <declaration name="sum" type="double" line="704"/>
                        <scope line="705"/>
                        <scope line="709"/>
                    </scope>
                    <declaration name="bsum" type="double" line="714"/>
                    <declaration name="dx" type="double" line="715"/>
                    <scope line="716">
                        <declaration name="d1" type="double" line="718"/>
                        <declaration name="sum" type="double" line="720"/>
                        <scope line="721"/>
                        <declaration name="jp" type="int" line="725"/>
                        <scope line="726"/>
                    </scope>
                    <scope line="745">
                        <declaration name="d1" type="double" line="747"/>
                        <scope line="749">
                            <scope line="750"/>
                        </scope>
                    </scope>
                    <scope line="763">
                        <declaration name="delsq" type="double" line="764"/>
                        <scope line="768">
                            <scope line="769"/>
                            <declaration name="hdiag" type="double" line="772"/>
                            <scope line="773">
                                <declaration name="d1" type="double" line="775"/>
                            </scope>
                            <declaration name="d2" type="double" line="779"/>
                            <declaration name="den" type="double" line="780"/>
                            <scope line="782">
                                <declaration name="d3" type="double" line="784"/>
                            </scope>
                            <declaration name="d4" type="double" line="789"/>
                            <declaration name="temp" type="double" line="790"/>
                            <scope line="791"/>
                            <declaration name="d5" type="double" line="798"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="810">
                    <scope line="812">
                        <declaration name="d3" type="double" line="815"/>
                        <declaration name="d4" type="double" line="816"/>
                        <declaration name="d1" type="double" line="817"/>
                        <declaration name="d2" type="double" line="818"/>
                        <scope line="820"/>
                        <scope line="823"/>
                    </scope>
                    <scope line="832"/>
                    <declaration name="fopt" type="double" line="840"/>
                    <declaration name="vquad" type="double" line="841"/>
                    <declaration name="ih" type="int" line="842"/>
                    <scope line="843">
                        <scope line="845">
                            <declaration name="temp" type="double" line="846"/>
                            <scope line="847"/>
                        </scope>
                    </scope>
                    <scope line="854">
                        <declaration name="d1" type="double" line="856"/>
                        <declaration name="d2" type="double" line="857"/>
                    </scope>
                    <declaration name="diff" type="double" line="860"/>
                    <scope line="864"/>
                    <scope line="870">
                        <scope line="871"/>
                        <declaration name="hDelta" type="double" line="875"/>
                        <scope line="876"/>
                        <scope line="879"/>
                        <scope line="882"/>
                        <scope line="886"/>
                        <scope line="892">
                            <declaration name="ksav" type="int" line="893"/>
                            <declaration name="densav" type="double" line="894"/>
                            <declaration name="delsq" type="double" line="895"/>
                            <scope line="899">
                                <declaration name="hdiag" type="double" line="900"/>
                                <scope line="901">
                                    <declaration name="d1" type="double" line="903"/>
                                </scope>
                                <declaration name="d1" type="double" line="907"/>
                                <declaration name="den" type="double" line="908"/>
                                <scope line="910">
                                    <declaration name="d2" type="double" line="912"/>
                                </scope>
                                <declaration name="d3" type="double" line="917"/>
                                <declaration name="temp" type="double" line="918"/>
                                <scope line="919"/>
                                <declaration name="d4" type="double" line="926"/>
                                <declaration name="d5" type="double" line="927"/>
                            </scope>
                            <scope line="930"/>
                        </scope>
                    </scope>
                    <declaration name="pqold" type="double" line="943"/>
                    <scope line="945">
                        <declaration name="temp" type="double" line="946"/>
                        <scope line="947"/>
                    </scope>
                    <scope line="952">
                        <declaration name="temp" type="double" line="953"/>
                        <scope line="954"/>
                    </scope>
                    <scope line="963"/>
                    <scope line="967">
                        <declaration name="suma" type="double" line="968"/>
                        <scope line="969"/>
                        <declaration name="sumb" type="double" line="972"/>
                        <scope line="973"/>
                        <declaration name="temp" type="double" line="976"/>
                        <scope line="977"/>
                    </scope>
                    <scope line="981"/>
                    <scope line="987">
                        <scope line="991">
                            <declaration name="d1" type="double" line="994"/>
                            <scope line="996">
                                <scope line="997"/>
                            </scope>
                        </scope>
                        <scope line="1004">
                            <declaration name="temp" type="double" line="1005"/>
                            <scope line="1006"/>
                            <scope line="1010"/>
                        </scope>
                    </scope>
                    <scope line="1020">
                        <scope line="1021"/>
                        <scope line="1025">
                            <declaration name="sum" type="double" line="1026"/>
                            <scope line="1027"/>
                            <scope line="1030"/>
                        </scope>
                        <scope line="1034">
                            <declaration name="sum" type="double" line="1035"/>
                            <scope line="1036"/>
                        </scope>
                        <declaration name="gqsq" type="double" line="1042"/>
                        <declaration name="gisq" type="double" line="1043"/>
                        <scope line="1044">
                            <declaration name="sum" type="double" line="1045"/>
                            <scope line="1046"/>
                            <scope line="1050">
                                <declaration name="d1" type="double" line="1053"/>
                                <declaration name="d2" type="double" line="1056"/>
                            </scope>
                            <scope line="1058">
                                <declaration name="d1" type="double" line="1061"/>
                                <declaration name="d2" type="double" line="1064"/>
                            </scope>
                            <scope line="1066">
                                <declaration name="d1" type="double" line="1068"/>
                            </scope>
                        </scope>
                        <scope line="1079"/>
                        <scope line="1082">
                            <scope line="1083">
                                <scope line="1084"/>
                                <scope line="1087"/>
                                <scope line="1090"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1102"/>
                    <scope line="1105"/>
                    <declaration name="d1" type="double" line="1114"/>
                    <declaration name="d2" type="double" line="1116"/>
                </scope>
                <scope line="1119">
                    <scope line="1122">
                        <declaration name="sum" type="double" line="1123"/>
                        <scope line="1124">
                            <declaration name="d1" type="double" line="1126"/>
                        </scope>
                        <scope line="1129"/>
                    </scope>
                    <scope line="1141">
                        <declaration name="dist" type="double" line="1142"/>
                        <scope line="1143">
                            <scope line="1146"/>
                        </scope>
                        <declaration name="d1" type="double" line="1153"/>
                    </scope>
                    <scope line="1158"/>
                    <scope line="1161"/>
                    <scope line="1164"/>
                </scope>
                <scope line="1171">
                    <scope line="1173">
                        <scope line="1176"/>
                        <scope line="1178"/>
                        <scope line="1180"/>
                    </scope>
                    <scope line="1192"/>
                </scope>
                <scope line="1196">
                    <scope line="1198">
                        <scope line="1199">
                            <declaration name="d3" type="double" line="1202"/>
                            <declaration name="d4" type="double" line="1203"/>
                            <declaration name="d1" type="double" line="1204"/>
                            <declaration name="d2" type="double" line="1205"/>
                            <scope line="1207"/>
                            <scope line="1210"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1218"/>
            </method>
            <javadoc line="1225">
                The arguments N, NPT, XPT, XOPT, BMAT, ZMAT, NDIM, SL and SU all have
                  the same meanings as the corresponding arguments of BOBYQB.
                  KOPT is the index of the optimal interpolation point.
                  KNEW is the index of the interpolation point that is going to be moved.
                  ADELT is the current trust region bound.
                  XNEW will be set to a suitable new position for the interpolation point
                  XPT(KNEW,.). Specifically, it satisfies the SL, SU and trust region
                  bounds and it should provide a large denominator in the next call of
                  UPDATE. The step XNEW-XOPT from XOPT is restricted to moves along the
                  straight lines through XOPT and another interpolation point.
                  XALT also provides a large value of the modulus of the KNEW-th Lagrange
                  function subject to the constraints that have been mentioned, its main
                  difference from XNEW being that XALT-XOPT is a constrained version of
                  the Cauchy step within the trust region. An exception is that XALT is
                  not calculated if all components of GLAG (see below) are zero.
                  ALPHA will be set to the KNEW-th diagonal element of the H matrix.
                  CAUCHY will be set to the square of the KNEW-th Lagrange function at
                  the step XALT-XOPT from XOPT for the vector XALT that is returned,
                  except that CAUCHY is set to zero if XALT is not calculated.
                  GLAG is a working space vector of length N for the gradient of the
                  KNEW-th Lagrange function at XOPT.
                  HCOL is a working space vector of length NPT for the second derivative
                  coefficients of the KNEW-th Lagrange function.
                  W is a working space vector of length 2N that is going to hold the
                  constrained Cauchy step from XOPT of the Lagrange function, followed
                  by the downhill version of XALT when the uphill step is calculated.
                  Set the first NPT components of W to the leading elements of the
                  KNEW-th column of the H matrix.                
                <param>
                    knew                    
                </param>
                <param>
                    adelt                    
                </param>
            </javadoc>
            <method name="altmov" type="double[]" line="1261">
                <params>
                    <param name="knew" type="int"/>
                    <param name="adelt" type="double"/>
                </params>
                <comment line="1262">
                    XXX                    
                </comment>
                <comment line="1285">
                    Calculate the gradient of the KNEW-th Lagrange function at XOPT.                    
                </comment>
                <comment line="1301">
                    Search for a large denominator along the straight lines through XOPT                    
                </comment>
                <comment line="1302">
                    and another interpolation point. SLBD and SUBD will be lower and upper                    
                </comment>
                <comment line="1303">
                    bounds on the step along each of these lines in turn. PREDSQ will be                    
                </comment>
                <comment line="1304">
                    set to the square of the predicted denominator for each line. PRESAV                    
                </comment>
                <comment line="1305">
                    will be set to the largest admissible value of PREDSQ that occurs.                    
                </comment>
                <comment line="1329">
                    Revise SLBD and SUBD if necessary because of the bounds in SL and SU.                    
                </comment>
                <comment line="1339">
                    Computing MAX                    
                </comment>
                <comment line="1350">
                    Computing MAX                    
                </comment>
                <comment line="1358">
                    Seek a large modulus of the KNEW-th Lagrange function when the index                    
                </comment>
                <comment line="1359">
                    of the other interpolation point on the line through XOPT is KNEW.                    
                </comment>
                <comment line="1385">
                    Search along each of the other lines through XOPT and another point.                    
                </comment>
                <comment line="1403">
                    Calculate PREDSQ for the current line search and maintain PRESAV.                    
                </comment>
                <comment line="1415">
                    Construct XNEW in a way that satisfies the bound constraints exactly.                    
                </comment>
                <comment line="1429">
                    Prepare for the iterative method that assembles the constrained Cauchy                    
                </comment>
                <comment line="1430">
                    step in W. The sum of squares of the fixed components of W is formed in                    
                </comment>
                <comment line="1431">
                    WFIXSQ, and the free components of W are set to BIGSTP.                    
                </comment>
                <comment line="1446">
                    Computing 2nd power                    
                </comment>
                <comment line="1454">
                    Investigate whether more components of W can be fixed.                    
                </comment>
                <comment line="1464">
                    Computing 2nd power                    
                </comment>
                <comment line="1469">
                    Computing 2nd power                    
                </comment>
                <comment line="1473">
                    Computing 2nd power                    
                </comment>
                <comment line="1481">
                    Set the remaining free components of W and all components of XALT,                    
                </comment>
                <comment line="1482">
                    except that W may be scaled later.                    
                </comment>
                <comment line="1502">
                    Set CURV to the curvature of the KNEW-th Lagrange function along W.                    
                </comment>
                <comment line="1503">
                    Scale W by a factor less than one if that can reduce the modulus of                    
                </comment>
                <comment line="1504">
                    the Lagrange function at XOPT+W. Set CAUCHY to the final value of                    
                </comment>
                <comment line="1505">
                    the square of this function.                    
                </comment>
                <comment line="1526">
                    Computing 2nd power                    
                </comment>
                <comment line="1530">
                    Computing 2nd power                    
                </comment>
                <comment line="1535">
                    If IFLAG is zero, then XALT is calculated as before after reversing                    
                </comment>
                <comment line="1536">
                    the sign of GLAG. Thus two XALT vectors become available. The one that                    
                </comment>
                <comment line="1537">
                    is chosen is the one that gives the larger value of CAUCHY.                    
                </comment>
                <declaration name="n" type="int" line="1264"/>
                <declaration name="npt" type="int" line="1265"/>
                <declaration name="glag" type="ArrayRealVector" line="1267"/>
                <declaration name="hcol" type="ArrayRealVector" line="1268"/>
                <declaration name="work1" type="ArrayRealVector" line="1270"/>
                <declaration name="work2" type="ArrayRealVector" line="1271"/>
                <scope line="1273"/>
                <scope line="1276">
                    <declaration name="tmp" type="double" line="1277"/>
                    <scope line="1278"/>
                </scope>
                <declaration name="alpha" type="double" line="1282"/>
                <declaration name="ha" type="double" line="1283"/>
                <scope line="1287"/>
                <scope line="1290">
                    <declaration name="tmp" type="double" line="1291"/>
                    <scope line="1292"/>
                    <scope line="1296"/>
                </scope>
                <declaration name="presav" type="double" line="1307"/>
                <declaration name="step" type="double" line="1308"/>
                <declaration name="ksav" type="int" line="1309"/>
                <declaration name="ibdsav" type="int" line="1310"/>
                <declaration name="stpsav" type="double" line="1311"/>
                <scope line="1312">
                    <scope line="1313"/>
                    <declaration name="dderiv" type="double" line="1316"/>
                    <declaration name="distsq" type="double" line="1317"/>
                    <scope line="1318">
                        <declaration name="tmp" type="double" line="1319"/>
                    </scope>
                    <declaration name="subd" type="double" line="1323"/>
                    <declaration name="slbd" type="double" line="1324"/>
                    <declaration name="ilbd" type="int" line="1325"/>
                    <declaration name="iubd" type="int" line="1326"/>
                    <declaration name="sumin" type="double" line="1327"/>
                    <scope line="1331">
                        <declaration name="tmp" type="double" line="1332"/>
                        <scope line="1333">
                            <scope line="1334"/>
                            <scope line="1338"/>
                        </scope>
                        <scope line="1344">
                            <scope line="1345"/>
                            <scope line="1349"/>
                        </scope>
                    </scope>
                    <declaration name="isbd" type="int" line="1362"/>
                    <declaration name="vlag" type="double" line="1363"/>
                    <scope line="1364">
                        <declaration name="diff" type="double" line="1365"/>
                        <declaration name="d1" type="double" line="1367"/>
                        <scope line="1368"/>
                        <declaration name="d2" type="double" line="1373"/>
                        <declaration name="d3" type="double" line="1374"/>
                        <declaration name="d4" type="double" line="1375"/>
                        <scope line="1376">
                            <declaration name="d5" type="double" line="1377"/>
                            <scope line="1378"/>
                        </scope>
                    </scope>
                    <scope line="1387">
                        <declaration name="tmp" type="double" line="1389"/>
                        <scope line="1390"/>
                        <scope line="1395"/>
                    </scope>
                    <declaration name="tmp" type="double" line="1405"/>
                    <declaration name="predsq" type="double" line="1406"/>
                    <scope line="1407"/>
                </scope>
                <scope line="1417">
                    <declaration name="tmp" type="double" line="1418"/>
                </scope>
                <scope line="1422"/>
                <scope line="1425"/>
                <declaration name="bigstp" type="double" line="1433"/>
                <declaration name="iflag" type="int" line="1434"/>
                <declaration name="cauchy" type="double" line="1435"/>
                <declaration name="csave" type="double" line="1436"/>
                <scope line="1437">
                    <declaration name="wfixsq" type="double" line="1438"/>
                    <declaration name="ggfree" type="double" line="1439"/>
                    <scope line="1440">
                        <declaration name="glagValue" type="double" line="1441"/>
                        <scope line="1444"/>
                    </scope>
                    <scope line="1450"/>
                    <declaration name="tmp1" type="double" line="1455"/>
                    <scope line="1456">
                        <scope line="1459">
                            <scope line="1460">
                                <declaration name="tmp2" type="double" line="1461"/>
                                <scope line="1462">
                                    <declaration name="d1" type="double" line="1465"/>
                                </scope>
                                <scope line="1467">
                                    <declaration name="d1" type="double" line="1470"/>
                                </scope>
                                <scope line="1472">
                                    <declaration name="d1" type="double" line="1474"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="gw" type="double" line="1484"/>
                    <scope line="1485">
                        <declaration name="glagValue" type="double" line="1486"/>
                        <scope line="1487">
                            <declaration name="min" type="double" line="1489"/>
                        </scope>
                        <scope line="1492"/>
                        <scope line="1494"/>
                        <scope line="1496"/>
                    </scope>
                    <declaration name="curv" type="double" line="1507"/>
                    <scope line="1508">
                        <declaration name="tmp" type="double" line="1509"/>
                        <scope line="1510"/>
                    </scope>
                    <scope line="1515"/>
                    <scope line="1519">
                        <declaration name="scale" type="double" line="1520"/>
                        <scope line="1521">
                            <declaration name="tmp" type="double" line="1522"/>
                        </scope>
                        <declaration name="d1" type="double" line="1527"/>
                    </scope>
                    <scope line="1529">
                        <declaration name="d1" type="double" line="1531"/>
                    </scope>
                    <scope line="1539">
                        <scope line="1540"/>
                    </scope>
                    <scope line="1546"/>
                </scope>
                <scope line="1550">
                    <scope line="1551"/>
                </scope>
            </method>
            <javadoc line="1562">
                SUBROUTINE PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,
                  BMAT and ZMAT for the first iteration, and it maintains the values of
                  NF and KOPT. The vector X is also changed by PRELIM.
                  The arguments N, NPT, X, XL, XU, RHOBEG, IPRINT and MAXFUN are the
                  same as the corresponding arguments in SUBROUTINE BOBYQA.
                  The arguments XBASE, XPT, FVAL, HQ, PQ, BMAT, ZMAT, NDIM, SL and SU
                  are the same as the corresponding arguments in BOBYQB, the elements
                  of SL and SU being set in BOBYQA.
                  GOPT is usually the gradient of the quadratic model at XOPT+XBASE, but
                  it is set by PRELIM to the gradient of the quadratic model at XBASE.
                  If XOPT is nonzero, BOBYQB will change it to its usual value later.
                  NF is maintaned as the number of calls of CALFUN so far.
                  KOPT will be such that the least calculated value of F so far is at
                  the point XPT(KOPT,.)+XBASE in the space of the variables.                
                <param>
                    lowerBound Lower bounds.                    
                </param>
                <param>
                    upperBound Upper bounds.                    
                </param>
            </javadoc>
            <method name="prelim" type="void" line="1583">
                <params>
                    <param name="lowerBound" type="double[]"/>
                    <param name="upperBound" type="double[]"/>
                </params>
                <comment line="1584">
                    XXX                    
                </comment>
                <comment line="1594">
                    Set XBASE to the initial vector of variables, and set the initial                    
                </comment>
                <comment line="1595">
                    elements of XPT, BMAT, HQ, PQ and ZMAT to zero.                    
                </comment>
                <comment line="1616">
                    Begin the initialization procedure. NF becomes one more than the number                    
                </comment>
                <comment line="1617">
                    of function values so far. The coordinates of the displacement of the                    
                </comment>
                <comment line="1618">
                    next initial interpolation point from XBASE are set in XPT(NF+1,.).                    
                </comment>
                <comment line="1636">
                    throw new PathIsExploredException(); // XXX                    
                </comment>
                <comment line="1644">
                    throw new PathIsExploredException(); // XXX                    
                </comment>
                <comment line="1648">
                    throw new PathIsExploredException(); // XXX                    
                </comment>
                <comment line="1660">
                    throw new PathIsExploredException(); // XXX                    
                </comment>
                <comment line="1668">
                    Calculate the next value of F. The least function value so far and                    
                </comment>
                <comment line="1669">
                    its index are required.                    
                </comment>
                <comment line="1685">
                    nfm + 1                    
                </comment>
                <comment line="1695">
                    Set the nonzero initial elements of BMAT and the quadratic model in the                    
                </comment>
                <comment line="1696">
                    cases when NF is at most 2*N+1. If NF exceeds N+1, then the positions                    
                </comment>
                <comment line="1697">
                    of the NF-th and (NF-N)-th interpolation points may be switched, in                    
                </comment>
                <comment line="1698">
                    order that the function value at the first of them contributes to the                    
                </comment>
                <comment line="1699">
                    off-diagonal second derivative terms of the initial quadratic model.                    
                </comment>
                <comment line="1710">
                    throw new PathIsExploredException(); // XXX                    
                </comment>
                <comment line="1733">
                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) * recip); // XXX &quot;testAckley&quot; and &quot;testDiffPow&quot; fail.                    
                </comment>
                <comment line="1738">
                    Set the off-diagonal second derivatives of the Lagrange functions and                    
                </comment>
                <comment line="1739">
                    the initial quadratic model.                    
                </comment>
                <comment line="1750">
                    throw new PathIsExploredException(); // XXX                    
                </comment>
                <declaration name="n" type="int" line="1586"/>
                <declaration name="npt" type="int" line="1587"/>
                <declaration name="ndim" type="int" line="1588"/>
                <declaration name="rhosq" type="double" line="1590"/>
                <declaration name="recip" type="double" line="1591"/>
                <declaration name="np" type="int" line="1592"/>
                <scope line="1597">
                    <scope line="1599"/>
                    <scope line="1602"/>
                </scope>
                <scope line="1606"/>
                <scope line="1609">
                    <scope line="1611"/>
                </scope>
                <declaration name="ipt" type="int" line="1620"/>
                <declaration name="jpt" type="int" line="1621"/>
                <declaration name="fbeg" type="double" line="1622"/>
                <scope line="1623">
                    <declaration name="nfm" type="int" line="1624"/>
                    <declaration name="nfx" type="int" line="1625"/>
                    <declaration name="nfmm" type="int" line="1626"/>
                    <declaration name="nfxm" type="int" line="1627"/>
                    <declaration name="stepa" type="double" line="1628"/>
                    <declaration name="stepb" type="double" line="1629"/>
                    <scope line="1630">
                        <scope line="1632">
                            <scope line="1634"/>
                        </scope>
                        <scope line="1639">
                            <scope line="1642"/>
                            <scope line="1646"/>
                        </scope>
                    </scope>
                    <scope line="1652">
                        <declaration name="tmp1" type="int" line="1653"/>
                        <scope line="1656">
                            <declaration name="tmp2" type="int" line="1657"/>
                        </scope>
                        <declaration name="iptMinus1" type="int" line="1662"/>
                        <declaration name="jptMinus1" type="int" line="1663"/>
                    </scope>
                    <scope line="1671">
                        <scope line="1675"/>
                        <scope line="1678"/>
                    </scope>
                    <declaration name="objectiveValue" type="double" line="1683"/>
                    <declaration name="f" type="double" line="1684"/>
                    <declaration name="numEval" type="int" line="1685"/>
                    <scope line="1688"/>
                    <scope line="1691"/>
                    <scope line="1701">
                        <scope line="1703">
                            <scope line="1705">
                                <declaration name="oneOverStepA" type="double" line="1706"/>
                            </scope>
                        </scope>
                        <scope line="1712">
                            <declaration name="ih" type="int" line="1713"/>
                            <declaration name="tmp" type="double" line="1714"/>
                            <declaration name="diff" type="double" line="1715"/>
                            <scope line="1718">
                                <scope line="1721"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1741">
                        <declaration name="ih" type="int" line="1747"/>
                        <declaration name="tmp" type="double" line="1748"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1758">
                A version of the truncated conjugate gradient is applied. If a line
                  search is restricted by a constraint, then the procedure is restarted,
                  the values of the variables that are at their bounds being fixed. If
                  the trust region boundary is reached, then further changes may be made
                  to D, each one being in the two dimensional space that is spanned
                  by the current D and the gradient of Q at XOPT+D, staying on the trust
                  region boundary. Termination occurs when the reduction in Q seems to
                  be close to the greatest reduction that can be achieved.
                  The arguments N, NPT, XPT, XOPT, GOPT, HQ, PQ, SL and SU have the same
                  meanings as the corresponding arguments of BOBYQB.
                  DELTA is the trust region radius for the present calculation, which
                  seeks a small value of the quadratic model within distance DELTA of
                  XOPT subject to the bounds on the variables.
                  XNEW will be set to a new vector of variables that is approximately
                  the one that minimizes the quadratic model within the trust region
                  subject to the SL and SU constraints on the variables. It satisfies
                  as equations the bounds that become active during the calculation.
                  D is the calculated trial step from XOPT, generated iteratively from an
                  initial value of zero. Thus XNEW is XOPT+D after the final iteration.
                  GNEW holds the gradient of the quadratic model at XOPT+D. It is updated
                  when D is updated.
                  xbdi.get( is a working space vector. For I=1,2,...,N, the element xbdi.get((I) is
                  set to -1.0, 0.0, or 1.0, the value being nonzero if and only if the
                  I-th variable has become fixed at a bound, the bound being SL(I) or
                  SU(I) in the case xbdi.get((I)=-1.0 or xbdi.get((I)=1.0, respectively. This
                  information is accumulated during the construction of XNEW.
                  The arrays S, HS and HRED are also used for working space. They hold the
                  current search direction, and the changes in the gradient of Q along S
                  and the reduced D, respectively, where the reduced D is the same as D,
                  except that the components of the fixed variables are zero.
                  DSQ will be set to the square of the length of XNEW-XOPT.
                  CRVMIN is set to zero if D reaches the trust region boundary. Otherwise
                  it is set to the least curvature of H that occurs in the conjugate
                  gradient searches that are not restricted by any constraints. The
                  value CRVMIN=-1.0D0 is set, however, if all of these searches are
                  constrained.                
                <param>
                    delta                    
                </param>
                <param>
                    gnew                    
                </param>
                <param>
                    xbdi                    
                </param>
                <param>
                    s                    
                </param>
                <param>
                    hs                    
                </param>
                <param>
                    hred                    
                </param>
            </javadoc>
            <method name="trsbox" type="double[]" line="1809">
                <params>
                    <param name="delta" type="double"/>
                    <param name="gnew" type="ArrayRealVector"/>
                    <param name="xbdi" type="ArrayRealVector"/>
                    <param name="s" type="ArrayRealVector"/>
                    <param name="hs" type="ArrayRealVector"/>
                    <param name="hred" type="ArrayRealVector"/>
                </params>
                <comment line="1810">
                    XXX                    
                </comment>
                <comment line="1818">
                    Local variables                    
                </comment>
                <comment line="1834">
                    Set some constants.                    
                </comment>
                <comment line="1836">
                    Function Body                    
                </comment>
                <comment line="1838">
                    The sign of GOPT(I) gives the sign of the change to the I-th variable                    
                </comment>
                <comment line="1839">
                    that will reduce Q from its value at XOPT. Thus xbdi.get((I) shows whether                    
                </comment>
                <comment line="1840">
                    or not to fix the I-th variable at one of its bounds initially, with                    
                </comment>
                <comment line="1841">
                    NACT being set to the number of fixed variables. D and GNEW are also                    
                </comment>
                <comment line="1842">
                    set for the first iteration. DELSQ is the upper bound on the sum of                    
                </comment>
                <comment line="1843">
                    squares of the free variables. QRED is the reduction in Q so far.                    
                </comment>
                <comment line="1867">
                    Set the next search direction of the conjugate gradient method. It is                    
                </comment>
                <comment line="1868">
                    the steepest descent direction initially and when the iterations are                    
                </comment>
                <comment line="1869">
                    restarted because a variable has just been fixed by a bound, and of                    
                </comment>
                <comment line="1870">
                    course the components of the fixed variables are zero. ITERMAX is an                    
                </comment>
                <comment line="1871">
                    upper bound on the indices of the conjugate gradient iterations.                    
                </comment>
                <comment line="1877">
                    XXX                    
                </comment>
                <comment line="1881">
                    XXX                    
                </comment>
                <comment line="1891">
                    Computing 2nd power                    
                </comment>
                <comment line="1906">
                    Multiply the search direction by the second derivative matrix of Q and                    
                </comment>
                <comment line="1907">
                    calculate some scalars for the choice of steplength. Then set BLEN to                    
                </comment>
                <comment line="1908">
                    the length of the the step to the trust region boundary and STPLEN to                    
                </comment>
                <comment line="1909">
                    the steplength, ignoring the simple bounds.                    
                </comment>
                <comment line="1914">
                    XXX                    
                </comment>
                <comment line="1920">
                    Computing 2nd power                    
                </comment>
                <comment line="1938">
                    Computing MIN                    
                </comment>
                <comment line="1942">
                    Reduce STPLEN if necessary in order to preserve the simple bounds,                    
                </comment>
                <comment line="1943">
                    letting IACT be the index of the new constrained variable.                    
                </comment>
                <comment line="1961">
                    Update CRVMIN, GNEW and D. Set SDEC to the decrease that occurs in Q.                    
                </comment>
                <comment line="1978">
                    Computing 2nd power                    
                </comment>
                <comment line="1984">
                    Computing MAX                    
                </comment>
                <comment line="1990">
                    Restart the conjugate gradient method if it has hit a new bound.                    
                </comment>
                <comment line="1998">
                    Computing 2nd power                    
                </comment>
                <comment line="2007">
                    If STPLEN is less than BLEN, then either apply another conjugate                    
                </comment>
                <comment line="2008">
                    gradient iteration or RETURN.                    
                </comment>
                <comment line="2022">
                    XXX                    
                </comment>
                <comment line="2025">
                    Prepare for the alternative iteration by calculating some scalars                    
                </comment>
                <comment line="2026">
                    and by multiplying the reduced D by the second derivative matrix of                    
                </comment>
                <comment line="2027">
                    Q, where S holds the reduced D in the call of GGMULT.                    
                </comment>
                <comment line="2031">
                    XXX                    
                </comment>
                <comment line="2040">
                    Computing 2nd power                    
                </comment>
                <comment line="2044">
                    Computing 2nd power                    
                </comment>
                <comment line="2054">
                    Let the search direction S be a linear combination of the reduced D                    
                </comment>
                <comment line="2055">
                    and the reduced G that is orthogonal to the reduced D.                    
                </comment>
                <comment line="2058">
                    XXX                    
                </comment>
                <comment line="2074">
                    By considering the simple bounds on the variables, calculate an upper                    
                </comment>
                <comment line="2075">
                    bound on the tangent of half the angle of the alternative iteration,                    
                </comment>
                <comment line="2076">
                    namely ANGBD, except that, if already a free variable has reached a                    
                </comment>
                <comment line="2077">
                    bound, there is a branch back to label 100 after fixing that variable.                    
                </comment>
                <comment line="2094">
                    Computing 2nd power                    
                </comment>
                <comment line="2096">
                    Computing 2nd power                    
                </comment>
                <comment line="2099">
                    Computing 2nd power                    
                </comment>
                <comment line="2110">
                    Computing 2nd power                    
                </comment>
                <comment line="2124">
                    Calculate HHD and some curvatures for the alternative iteration.                    
                </comment>
                <comment line="2129">
                    XXX                    
                </comment>
                <comment line="2141">
                    Seek the greatest reduction in Q for a range of equally spaced values                    
                </comment>
                <comment line="2142">
                    of ANGT in [0,ANGBD], where ANGT is the tangent of half the angle of                    
                </comment>
                <comment line="2143">
                    the alternative iteration.                    
                </comment>
                <comment line="2164">
                    Return if the reduction is zero. Otherwise, set the sine and cosine                    
                </comment>
                <comment line="2165">
                    of the angle of the alternative iteration, and calculate SDEC.                    
                </comment>
                <comment line="2182">
                    Update GNEW, D and HRED. If the angle of the alternative iteration                    
                </comment>
                <comment line="2183">
                    is restricted by a bound on a free variable, that variable is fixed                    
                </comment>
                <comment line="2184">
                    at the bound.                    
                </comment>
                <comment line="2193">
                    Computing 2nd power                    
                </comment>
                <comment line="2206">
                    If SDEC is sufficiently small, then RETURN after setting XNEW to                    
                </comment>
                <comment line="2207">
                    XOPT+D, giving careful attention to the bounds.                    
                </comment>
                <comment line="2214">
                    XXX                    
                </comment>
                <comment line="2217">
                    Computing MAX                    
                </comment>
                <comment line="2218">
                    Computing MIN                    
                </comment>
                <comment line="2229">
                    Computing 2nd power                    
                </comment>
                <comment line="2234">
                    The following instructions multiply the current S-vector by the second                    
                </comment>
                <comment line="2235">
                    derivative matrix of the quadratic model, putting the product in HS.                    
                </comment>
                <comment line="2236">
                    They are reached from three different parts of the software above and                    
                </comment>
                <comment line="2237">
                    they can be regarded as an external subroutine.                    
                </comment>
                <comment line="2240">
                    XXX                    
                </comment>
                <declaration name="n" type="int" line="1812"/>
                <declaration name="npt" type="int" line="1813"/>
                <declaration name="dsq" type="double" line="1815"/>
                <declaration name="crvmin" type="double" line="1816"/>
                <declaration name="ds" type="double" line="1819"/>
                <declaration name="iu" type="int" line="1820"/>
                <declaration name="dhd" type="double" line="1821"/>
                <declaration name="iact" type="int" line="1822"/>
                <declaration name="nact" type="int" line="1823"/>
                <declaration name="angt" type="double" line="1824"/>
                <declaration name="isav" type="int" line="1825"/>
                <declaration name="temp" type="double" line="1826"/>
                <declaration name="iterc" type="int" line="1827"/>
                <declaration name="resid" type="double" line="1828"/>
                <declaration name="itcsav" type="int" line="1830"/>
                <declaration name="rdprev" type="double" line="1831"/>
                <declaration name="itermax" type="int" line="1832"/>
                <scope line="1847">
                    <scope line="1849">
                        <scope line="1850"/>
                    </scope>
                    <scope line="1854"/>
                    <scope line="1857"/>
                </scope>
                <declaration name="state" type="int" line="1873"/>
                <scope line="1874">
                    <scope line="1876"/>
                    <scope line="1880">
                        <scope line="1883">
                            <scope line="1884"/>
                            <scope line="1886"/>
                            <scope line="1888"/>
                            <declaration name="d1" type="double" line="1892"/>
                        </scope>
                        <scope line="1895"/>
                        <scope line="1898"/>
                        <scope line="1902"/>
                    </scope>
                    <scope line="1913">
                        <scope line="1918">
                            <scope line="1919">
                                <declaration name="d1" type="double" line="1921"/>
                            </scope>
                        </scope>
                        <scope line="1927"/>
                        <scope line="1931"/>
                        <scope line="1933"/>
                        <scope line="1937"/>
                        <scope line="1946">
                            <scope line="1947">
                                <scope line="1949"/>
                                <scope line="1951"/>
                                <scope line="1954"/>
                            </scope>
                        </scope>
                        <scope line="1964">
                            <scope line="1967">
                                <scope line="1969"/>
                            </scope>
                            <scope line="1975">
                                <scope line="1977">
                                    <declaration name="d1" type="double" line="1979"/>
                                </scope>
                            </scope>
                            <declaration name="d1" type="double" line="1985"/>
                        </scope>
                        <scope line="1992">
                            <scope line="1995"/>
                            <declaration name="d1" type="double" line="1999"/>
                            <scope line="2001"/>
                        </scope>
                        <scope line="2010">
                            <scope line="2011"/>
                            <scope line="2014"/>
                        </scope>
                    </scope>
                    <scope line="2021"/>
                    <scope line="2030">
                        <scope line="2032"/>
                        <scope line="2038">
                            <scope line="2039">
                                <declaration name="d1" type="double" line="2041"/>
                            </scope>
                            <scope line="2048"/>
                        </scope>
                    </scope>
                    <scope line="2057">
                        <scope line="2061"/>
                        <scope line="2065">
                            <scope line="2066"/>
                            <scope line="2068"/>
                        </scope>
                        <scope line="2081">
                            <scope line="2082">
                                <scope line="2085"/>
                                <scope line="2089"/>
                                <declaration name="d1" type="double" line="2095"/>
                                <declaration name="d2" type="double" line="2097"/>
                                <scope line="2102">
                                    <scope line="2104"/>
                                </scope>
                                <scope line="2113">
                                    <scope line="2115"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2128">
                        <scope line="2133">
                            <scope line="2134"/>
                        </scope>
                        <scope line="2149">
                            <scope line="2154"/>
                            <scope line="2158"/>
                        </scope>
                        <scope line="2167"/>
                        <scope line="2170"/>
                        <scope line="2178"/>
                        <scope line="2188">
                            <scope line="2190">
                                <declaration name="d1" type="double" line="2194"/>
                            </scope>
                        </scope>
                        <scope line="2200"/>
                        <scope line="2209"/>
                    </scope>
                    <scope line="2213">
                        <scope line="2216">
                            <declaration name="min" type="double" line="2219"/>
                            <scope line="2222"/>
                            <scope line="2225"/>
                            <declaration name="d1" type="double" line="2230"/>
                        </scope>
                    </scope>
                    <scope line="2239">
                        <declaration name="ih" type="int" line="2241"/>
                        <scope line="2242">
                            <scope line="2244">
                                <scope line="2245"/>
                            </scope>
                        </scope>
                        <declaration name="tmp" type="RealVector" line="2252"/>
                        <scope line="2253">
                            <scope line="2254">
                                <scope line="2255"/>
                            </scope>
                        </scope>
                        <scope line="2260"/>
                        <scope line="2263"/>
                        <scope line="2266"/>
                    </scope>
                    <scope line="2271"/>
                </scope>
            </method>
            <javadoc line="2279">
                The arrays BMAT and ZMAT are updated, as required by the new position
                  of the interpolation point that has the index KNEW. The vector VLAG has
                  N+NPT components, set on entry to the first NPT and last N components
                  of the product Hw in equation (4.11) of the Powell (2006) paper on
                  NEWUOA. Further, BETA is set on entry to the value of the parameter
                  with that name, and DENOM is set to the denominator of the updating
                  formula. Elements of ZMAT may be treated as zero if their moduli are
                  at most ZTEST. The first NDIM elements of W are used for working space.                
                <param>
                    beta                    
                </param>
                <param>
                    denom                    
                </param>
                <param>
                    knew                    
                </param>
            </javadoc>
            <method name="update" type="void" line="2296">
                <params>
                    <param name="beta" type="double"/>
                    <param name="denom" type="double"/>
                    <param name="knew" type="int"/>
                </params>
                <comment line="2297">
                    XXX                    
                </comment>
                <comment line="2303">
                    XXX Should probably be split into two arrays.                    
                </comment>
                <comment line="2309">
                    Computing MAX                    
                </comment>
                <comment line="2315">
                    Apply the rotations that put zeros in the KNEW-th row of ZMAT.                    
                </comment>
                <comment line="2320">
                    Computing 2nd power                    
                </comment>
                <comment line="2322">
                    Computing 2nd power                    
                </comment>
                <comment line="2336">
                    Put the first NPT components of the KNEW-th column of HLAG into W,                    
                </comment>
                <comment line="2337">
                    and calculate the parameters of the updating formula.                    
                </comment>
                <comment line="2346">
                    Complete the updating of ZMAT.                    
                </comment>
                <comment line="2356">
                    Finally, update the matrix BMAT.                    
                </comment>
                <declaration name="n" type="int" line="2299"/>
                <declaration name="npt" type="int" line="2300"/>
                <declaration name="nptm" type="int" line="2301"/>
                <declaration name="work" type="ArrayRealVector" line="2304"/>
                <declaration name="ztest" type="double" line="2306"/>
                <scope line="2307">
                    <scope line="2308"/>
                </scope>
                <scope line="2317">
                    <declaration name="d1" type="double" line="2318"/>
                    <scope line="2319">
                        <declaration name="d2" type="double" line="2321"/>
                        <declaration name="d3" type="double" line="2323"/>
                        <declaration name="d4" type="double" line="2324"/>
                        <declaration name="d5" type="double" line="2325"/>
                        <declaration name="d6" type="double" line="2326"/>
                        <scope line="2327">
                            <declaration name="d7" type="double" line="2328"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="2339"/>
                <declaration name="alpha" type="double" line="2342"/>
                <declaration name="tau" type="double" line="2343"/>
                <declaration name="sqrtDenom" type="double" line="2348"/>
                <declaration name="d1" type="double" line="2349"/>
                <declaration name="d2" type="double" line="2350"/>
                <scope line="2351"/>
                <scope line="2358">
                    <declaration name="jp" type="int" line="2359"/>
                    <declaration name="d3" type="double" line="2361"/>
                    <declaration name="d4" type="double" line="2362"/>
                    <scope line="2363">
                        <scope line="2366"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2373">
                Performs validity checks.                
                <param>
                    lowerBound Lower bounds (constraints) of the objective variables.                    
                </param>
                <param>
                    upperBound Upperer bounds (constraints) of the objective variables.                    
                </param>
            </javadoc>
            <method name="setup" type="void" line="2380">
                <params>
                    <param name="lowerBound" type="double[]"/>
                    <param name="upperBound" type="double[]"/>
                </params>
                <comment line="2381">
                    XXX                    
                </comment>
                <comment line="2386">
                    Check problem dimension.                    
                </comment>
                <comment line="2390">
                    Check number of interpolation points.                    
                </comment>
                <comment line="2400">
                    Initialize bound differences.                    
                </comment>
                <comment line="2413">
                    Initialize the data structures used by the &quot;bobyqa&quot; method.                    
                </comment>
                <declaration name="init" type="double[]" line="2383"/>
                <declaration name="dimension" type="int" line="2384"/>
                <scope line="2387"/>
                <declaration name="nPointsInterval" type="int[]" line="2391"/>
                <scope line="2393"/>
                <declaration name="requiredMinDiff" type="double" line="2403"/>
                <declaration name="minDiff" type="double" line="2404"/>
                <scope line="2405"/>
                <scope line="2409"/>
            </method>
            <method name="caller" type="String" line="2435">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="t" type="Throwable" line="2436"/>
                <declaration name="elements" type="StackTraceElement[]" line="2437"/>
                <declaration name="e" type="StackTraceElement" line="2438"/>
            </method>
            <method name="printState" type="void" line="2442">
                <params>
                    <param name="s" type="int"/>
                </params>
                <comment line="2443">
                    System.out.println(caller(2) + &quot;: state &quot; + s);                    
                </comment>
            </method>
            <method name="printMethod" type="void" line="2446">
                <comment line="2447">
                    System.out.println(caller(2));                    
                </comment>
            </method>
            <class name="PathIsExploredException" line="2450">
                <extends class="RuntimeException"/>
                <javadoc line="2450">
                    Marker for code paths that are not explored with the current unit tests.
                      If the path becomes explored, it should just be removed from the code.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="2455"/>
                <declaration name="PATH_IS_EXPLORED" type="String" line="2457"/>
                <method name="PathIsExploredException" type="constructor" line="2460"/>
            </class>
        </class>
    </source>