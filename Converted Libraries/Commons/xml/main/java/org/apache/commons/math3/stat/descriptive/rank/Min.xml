<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.rank">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Min" line="7">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <javadoc line="7">
                Returns the minimum of the available values.
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                  (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                  &lt;li&gt;If any of the values equals &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt;,
                  the result is &lt;code&gt;Double.NEGATIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <version>
                    $Id: Min.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="24"/>
            <javadoc line="24">
                Serializable version identifier                
            </javadoc>
            <declaration name="n" type="long" line="28"/>
            <javadoc line="28">
                Number of values that have been added                
            </javadoc>
            <declaration name="value" type="double" line="32"/>
            <javadoc line="32">
                Current value of the statistic                
            </javadoc>
            <javadoc line="36">
                Create a Min instance                
            </javadoc>
            <method name="Min" type="constructor" line="39"/>
            <javadoc line="43">
                Copy constructor, creates a new {@code Min} identical
                  to the {@code original}                
                <param>
                    original the {@code Min} instance to copy                    
                </param>
                <throws>
                    NullArgumentException if original is null                    
                </throws>
            </javadoc>
            <method name="Min" type="constructor" line="49">
                <params>
                    <param name="original" type="Min"/>
                </params>
            </method>
            <javadoc line="52">
                {@inheritDoc}                
            </javadoc>
            <method name="increment" type="void" line="55">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="56"/>
            </method>
            <javadoc line="61">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="64"/>
            <javadoc line="68">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="71"/>
            <javadoc line="74">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="77"/>
            <javadoc line="80">
                Returns the minimum of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or
                  the array index parameters are not valid.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                  (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                  &lt;li&gt;If any of the values equals &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt;,
                  the result is &lt;code&gt;Double.NEGATIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt; &lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the minimum of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="101">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="min" type="double" line="102"/>
                <scope line="103">
                    <scope line="105">
                        <scope line="106"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="113">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="Min" line="116">
                <declaration name="result" type="Min" line="117"/>
            </method>
            <javadoc line="121">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source Min to copy                    
                </param>
                <param>
                    dest Min to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="128">
                <params>
                    <param name="source" type="Min"/>
                    <param name="dest" type="Min"/>
                </params>
            </method>
        </class>
    </source>