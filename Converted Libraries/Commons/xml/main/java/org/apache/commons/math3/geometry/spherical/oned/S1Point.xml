<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.spherical.oned">
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.Space"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="S1Point" line="25">
            <comment line="33">
                CHECKSTYLE: stop ConstantName                
            </comment>
            <comment line="36">
                CHECKSTYLE: resume ConstantName                
            </comment>
            <implements interface="Point">
                <type_params>
                    <type_param name="Sphere1D"/>
                </type_params>
            </implements>
            <javadoc line="25">
                This class represents a point on the 1-sphere.
                  &lt;p&gt;Instances of this class are guaranteed to be immutable.&lt;/p&gt;                
                <version>
                    $Id: S1Point.java 1554654 2014-01-01 17:30:06Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="NaN" type="S1Point" line="33"/>
            <javadoc line="33">
                A vector with all coordinates set to NaN.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="37"/>
            <javadoc line="37">
                Serializable UID.                
            </javadoc>
            <declaration name="alpha" type="double" line="40"/>
            <javadoc line="40">
                Azimuthal angle \( \alpha \).                
            </javadoc>
            <declaration name="vector" type="Vector2D" line="43"/>
            <javadoc line="43">
                Corresponding 2D normalized vector.                
            </javadoc>
            <javadoc line="46">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    alpha azimuthal angle \( \alpha \)                    
                </param>
                <see>
                    #getAlpha()                    
                </see>
            </javadoc>
            <method name="S1Point" type="constructor" line="51">
                <params>
                    <param name="alpha" type="double"/>
                </params>
            </method>
            <javadoc line="56">
                Build a point from its internal components.                
                <param>
                    alpha azimuthal angle \( \alpha \)                    
                </param>
                <param>
                    vector corresponding vector                    
                </param>
            </javadoc>
            <method name="S1Point" type="constructor" line="60">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="vector" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="65">
                Get the azimuthal angle \( \alpha \).                
                <return>
                    azimuthal angle \( \alpha \)                    
                </return>
                <see>
                    #S1Point(double)                    
                </see>
            </javadoc>
            <method name="getAlpha" type="double" line="69"/>
            <javadoc line="73">
                Get the corresponding normalized vector in the 2D euclidean space.                
                <return>
                    normalized vector                    
                </return>
            </javadoc>
            <method name="getVector" type="Vector2D" line="76"/>
            <javadoc line="80">
                {@inheritDoc}                
            </javadoc>
            <method name="getSpace" type="Space" line="81"/>
            <javadoc line="85">
                {@inheritDoc}                
            </javadoc>
            <method name="isNaN" type="boolean" line="86"/>
            <javadoc line="90">
                {@inheritDoc}                
            </javadoc>
            <method name="distance" type="double" line="91">
                <params>
                    <param name="point" type="Point&lt;Sphere1D&gt;"/>
                </params>
            </method>
            <javadoc line="95">
                Compute the distance (angular separation) between two points.                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the angular separation between p1 and p2                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="100">
                <params>
                    <param name="p1" type="S1Point"/>
                    <param name="p2" type="S1Point"/>
                </params>
            </method>
            <javadoc line="104">
                Test for the equality of two points on the 2-sphere.
                  &lt;p&gt;
                  If all coordinates of two points are exactly the same, and none are
                  &lt;code&gt;Double.NaN&lt;/code&gt;, the two points are considered to be equal.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;NaN&lt;/code&gt; coordinates are considered to affect globally the vector
                  and be equals to each other - i.e, if either (or all) coordinates of the
                  2D vector are equal to &lt;code&gt;Double.NaN&lt;/code&gt;, the 2D vector is equal to{@link #NaN}.
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two points on the 2-sphere objects are equal, false if
                      object is null, not an instance of S2Point, or
                      not equal to this S2Point instance                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="124">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="126"/>
                <scope line="130">
                    <declaration name="rhs" type="S1Point" line="131"/>
                    <scope line="132"/>
                </scope>
            </method>
            <javadoc line="143">
                Get a hashCode for the 2D vector.
                  &lt;p&gt;
                  All NaN values have the same hash code.&lt;/p&gt;                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="151">
                <scope line="152"/>
            </method>
        </class>
    </source>