<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="PolynomialFunction" line="33">
            <implements interface="UnivariateDifferentiableFunction"/>
            <implements interface="DifferentiableUnivariateFunction"/>
            <implements interface="Serializable"/>
            <javadoc line="33">
                Immutable representation of a real polynomial function with real coefficients.
                  &lt;p&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/HornersMethod.html&quot;&gt;Horner&apos;s Method&lt;/a&gt;
                  is used to evaluate the function.&lt;/p&gt;                
                <version>
                    $Id: PolynomialFunction.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <javadoc line="42">
                Serialization identifier                
            </javadoc>
            <declaration name="coefficients" type="double" line="46"/>
            <javadoc line="46">
                The coefficients of the polynomial, ordered by degree -- i.e.,
                  coefficients[0] is the constant term and coefficients[n] is the
                  coefficient of x^n where n is the degree of the polynomial.                
            </javadoc>
            <javadoc line="53">
                Construct a polynomial with the given coefficients.  The first element
                  of the coefficients array is the constant term.  Higher degree
                  coefficients follow in sequence.  The degree of the resulting polynomial
                  is the index of the last non-null element of the array, or 0 if all elements
                  are null.
                  &lt;p&gt;
                  The constructor makes a copy of the input array and assigns the copy to
                  the coefficients property.&lt;/p&gt;                
                <param>
                    c Polynomial coefficients.                    
                </param>
                <throws>
                    NullArgumentException if {@code c} is {@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code c} is empty.                    
                </throws>
            </javadoc>
            <method name="PolynomialFunction" type="constructor" line="68">
                <params>
                    <param name="c" type="double"/>
                </params>
                <declaration name="n" type="int" line="71"/>
                <scope line="72"/>
                <scope line="75"/>
            </method>
            <javadoc line="82">
                Compute the value of the function for the given argument.
                  &lt;p&gt;
                  The value returned is &lt;br/&gt;
                  &lt;code&gt;coefficients[n]  x^n + ... + coefficients[1]  x  + coefficients[0]&lt;/code&gt;
                  &lt;/p&gt;                
                <param>
                    x Argument for which the function value should be computed.                    
                </param>
                <return>
                    the value of the polynomial at the given point.                    
                </return>
                <see>
                    UnivariateFunction#value(double)                    
                </see>
            </javadoc>
            <method name="value" type="double" line="93">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="97">
                Returns the degree of the polynomial.                
                <return>
                    the degree of the polynomial.                    
                </return>
            </javadoc>
            <method name="degree" type="int" line="102"/>
            <javadoc line="106">
                Returns a copy of the coefficients array.
                  &lt;p&gt;
                  Changes made to the returned copy will not affect the coefficients of
                  the polynomial.&lt;/p&gt;                
                <return>
                    a fresh copy of the coefficients array.                    
                </return>
            </javadoc>
            <method name="getCoefficients" type="double[]" line="114"/>
            <javadoc line="118">
                Uses Horner&apos;s Method to evaluate the polynomial with the given coefficients at
                  the argument.                
                <param>
                    coefficients Coefficients of the polynomial to evaluate.                    
                </param>
                <param>
                    argument Input value.                    
                </param>
                <return>
                    the value of the polynomial.                    
                </return>
                <throws>
                    NoDataException if {@code coefficients} is empty.                    
                </throws>
                <throws>
                    NullArgumentException if {@code coefficients} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="129">
                <params>
                    <param name="coefficients" type="double[]"/>
                    <param name="argument" type="double"/>
                </params>
                <declaration name="n" type="int" line="131"/>
                <scope line="132"/>
                <declaration name="result" type="double" line="135"/>
                <scope line="136"/>
            </method>
            <javadoc line="143">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
                <throws>
                    NoDataException if {@code coefficients} is empty.                    
                </throws>
                <throws>
                    NullArgumentException if {@code coefficients} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="149">
                <params>
                    <param name="t" type="DerivativeStructure"/>
                </params>
                <declaration name="n" type="int" line="151"/>
                <scope line="152"/>
                <declaration name="result" type="DerivativeStructure" line="155"/>
                <scope line="157"/>
            </method>
            <javadoc line="163">
                Add a polynomial to the instance.                
                <param>
                    p Polynomial to add.                    
                </param>
                <return>
                    a new polynomial which is the sum of the instance and {@code p}.                    
                </return>
            </javadoc>
            <method name="add" type="PolynomialFunction" line="169">
                <params>
                    <param name="p" type="PolynomialFunction"/>
                </params>
                <comment line="171">
                    identify the lowest degree polynomial                    
                </comment>
                <comment line="175">
                    build the coefficients array                    
                </comment>
                <declaration name="lowLength" type="int" line="171"/>
                <declaration name="highLength" type="int" line="172"/>
                <declaration name="newCoefficients" type="double[]" line="175"/>
                <scope line="176"/>
            </method>
            <javadoc line="188">
                Subtract a polynomial from the instance.                
                <param>
                    p Polynomial to subtract.                    
                </param>
                <return>
                    a new polynomial which is the difference the instance minus {@code p}.                    
                </return>
            </javadoc>
            <method name="subtract" type="PolynomialFunction" line="194">
                <params>
                    <param name="p" type="PolynomialFunction"/>
                </params>
                <comment line="196">
                    identify the lowest degree polynomial                    
                </comment>
                <comment line="200">
                    build the coefficients array                    
                </comment>
                <declaration name="lowLength" type="int" line="196"/>
                <declaration name="highLength" type="int" line="197"/>
                <declaration name="newCoefficients" type="double[]" line="200"/>
                <scope line="201"/>
                <scope line="204">
                    <scope line="205"/>
                </scope>
                <scope line="208"/>
            </method>
            <javadoc line="216">
                Negate the instance.                
                <return>
                    a new polynomial.                    
                </return>
            </javadoc>
            <method name="negate" type="PolynomialFunction" line="221">
                <declaration name="newCoefficients" type="double[]" line="222"/>
                <scope line="223"/>
            </method>
            <javadoc line="229">
                Multiply the instance by a polynomial.                
                <param>
                    p Polynomial to multiply by.                    
                </param>
                <return>
                    a new polynomial.                    
                </return>
            </javadoc>
            <method name="multiply" type="PolynomialFunction" line="235">
                <params>
                    <param name="p" type="PolynomialFunction"/>
                </params>
                <declaration name="newCoefficients" type="double[]" line="236"/>
                <scope line="238">
                    <scope line="242"/>
                </scope>
            </method>
            <javadoc line="250">
                Returns the coefficients of the derivative of the polynomial with the given coefficients.                
                <param>
                    coefficients Coefficients of the polynomial to differentiate.                    
                </param>
                <return>
                    the coefficients of the derivative or {@code null} if coefficients has length 1.                    
                </return>
                <throws>
                    NoDataException if {@code coefficients} is empty.                    
                </throws>
                <throws>
                    NullArgumentException if {@code coefficients} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="differentiate" type="double[]" line="259">
                <params>
                    <param name="coefficients" type="double[]"/>
                </params>
                <declaration name="n" type="int" line="261"/>
                <scope line="262"/>
                <scope line="265"/>
                <declaration name="result" type="double[]" line="268"/>
                <scope line="269"/>
            </method>
            <javadoc line="275">
                Returns the derivative as a {@link PolynomialFunction}.                
                <return>
                    the derivative polynomial.                    
                </return>
            </javadoc>
            <method name="polynomialDerivative" type="PolynomialFunction" line="280"/>
            <javadoc line="284">
                Returns the derivative as a {@link UnivariateFunction}.                
                <return>
                    the derivative function.                    
                </return>
            </javadoc>
            <method name="derivative" type="UnivariateFunction" line="289"/>
            <javadoc line="293">
                Returns a string representation of the polynomial.
                  &lt;p&gt;The representation is user oriented. Terms are displayed lowest
                  degrees first. The multiplications signs, coefficients equals to
                  one and null terms are not displayed (except if the polynomial is 0,
                  in which case the 0 constant term is displayed). Addition of terms
                  with negative coefficients are replaced by subtraction of terms
                  with positive coefficients except for the first displayed term
                  (i.e. we display &lt;code&gt;-3&lt;/code&gt; for a constant negative polynomial,
                  but &lt;code&gt;1 - 3 x + x^2&lt;/code&gt; if the negative coefficient is not
                  the first one displayed).&lt;/p&gt;                
                <return>
                    a string representation of the polynomial.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="309">
                <declaration name="s" type="StringBuilder" line="310"/>
                <scope line="311">
                    <scope line="312"/>
                </scope>
                <scope line="315"/>
                <scope line="319">
                    <scope line="320">
                        <scope line="321">
                            <scope line="322"/>
                            <scope line="324"/>
                        </scope>
                        <scope line="327">
                            <scope line="328"/>
                        </scope>
                        <declaration name="absAi" type="double" line="333"/>
                        <scope line="334"/>
                        <scope line="340"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="350">
                Creates a string representing a coefficient, removing &quot;.0&quot; endings.                
                <param>
                    coeff Coefficient.                    
                </param>
                <return>
                    a string representation of {@code coeff}.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="356">
                <params>
                    <param name="coeff" type="double"/>
                </params>
                <declaration name="c" type="String" line="357"/>
                <scope line="358"/>
                <scope line="360"/>
            </method>
            <javadoc line="365">
                {@inheritDoc}                
            </javadoc>
            <method name="hashCode" type="int" line="367">
                <declaration name="prime" type="int" line="368"/>
                <declaration name="result" type="int" line="369"/>
            </method>
            <javadoc line="374">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="376">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="377"/>
                <scope line="380"/>
                <declaration name="other" type="PolynomialFunction" line="383"/>
                <scope line="384"/>
            </method>
            <class name="Parametric" line="390">
                <implements interface="ParametricUnivariateFunction"/>
                <javadoc line="390">
                    Dedicated parametric polynomial class.                    
                    <since>
                        3.0                        
                    </since>
                </javadoc>
                <javadoc line="396">
                    {@inheritDoc}                    
                </javadoc>
                <method name="gradient" type="double[]" line="397">
                    <params>
                        <param name="x" type="double"/>
                        <param name="parameters" type="double"/>
                    </params>
                    <declaration name="gradient" type="double[]" line="398"/>
                    <declaration name="xn" type="double" line="399"/>
                    <scope line="400"/>
                </method>
                <javadoc line="407">
                    {@inheritDoc}                    
                </javadoc>
                <method name="value" type="double" line="409">
                    <params>
                        <param name="x" type="double"/>
                        <param name="parameters" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>