<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.special">
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.ContinuedFraction"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Gamma" line="7">
            <javadoc line="7">
                &lt;p&gt;
                  This is a utility class that provides computation methods related to the
                  &amp;Gamma; (Gamma) family of functions.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Implementation of {@link #invGamma1pm1(double)} and{@link #logGamma1p(double)} is based on the algorithms described in
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://dx.doi.org/10.1145/22721.23109&quot;&gt;Didonato and Morris
                  (1986)&lt;/a&gt;, &lt;em&gt;Computation of the Incomplete Gamma Function Ratios and
                  their Inverse&lt;/em&gt;, TOMS 12(4), 377-393,&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;http://dx.doi.org/10.1145/131766.131776&quot;&gt;Didonato and Morris
                  (1992)&lt;/a&gt;, &lt;em&gt;Algorithm 708: Significant Digit Computation of the
                  Incomplete Beta Function Ratios&lt;/em&gt;, TOMS 18(3), 360-373,&lt;/li&gt;
                  &lt;/ul&gt;
                  and implemented in the
                  &lt;a href=&quot;http://www.dtic.mil/docs/citations/ADA476840&quot;&gt;NSWC Library of Mathematical Functions&lt;/a&gt;,
                  available
                  &lt;a href=&quot;http://www.ualberta.ca/CNS/RESEARCH/Software/NumericalNSWC/site.html&quot;&gt;here&lt;/a&gt;.
                  This library is &quot;approved for public release&quot;, and the
                  &lt;a href=&quot;http://www.dtic.mil/dtic/pdf/announcements/CopyrightGuidance.pdf&quot;&gt;Copyright guidance&lt;/a&gt;
                  indicates that unless otherwise stated in the code, all FORTRAN functions in
                  this library are license free. Since no such notice appears in the code these
                  functions can safely be ported to Commons-Math.
                  &lt;/p&gt;                
                <version>
                    $Id: Gamma.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="GAMMA" type="double" line="35"/>
            <javadoc line="35">
                &lt;a href=&quot;http://en.wikipedia.org/wiki/Euler-Mascheroni_constant&quot;&gt;Euler-Mascheroni constant&lt;/a&gt;                
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="LANCZOS_G" type="double" line="40"/>
            <javadoc line="40">
                The value of the {@code g} constant in the Lanczos approximation, see{@link #lanczos(double)}.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="45"/>
            <javadoc line="45">
                Maximum allowed numerical error.                
            </javadoc>
            <declaration name="LANCZOS" type="double[]" line="49"/>
            <javadoc line="49">
                Lanczos coefficients                
            </javadoc>
            <declaration name="HALF_LOG_2_PI" type="double" line="53"/>
            <javadoc line="53">
                Avoid repeated computation of log of 2 PI in logGamma                
            </javadoc>
            <declaration name="SQRT_TWO_PI" type="double" line="57"/>
            <javadoc line="57">
                The constant value of &amp;radic;(2&amp;pi;).                
            </javadoc>
            <declaration name="C_LIMIT" type="double" line="61"/>
            <javadoc line="61">
                C limit.                
            </javadoc>
            <declaration name="S_LIMIT" type="double" line="65"/>
            <javadoc line="65">
                S limit.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_A0" type="double" line="69"/>
            <javadoc line="69">
                The constant {@code A0} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_A1" type="double" line="73"/>
            <javadoc line="73">
                The constant {@code A1} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_B1" type="double" line="77"/>
            <javadoc line="77">
                The constant {@code B1} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_B2" type="double" line="81"/>
            <javadoc line="81">
                The constant {@code B2} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_B3" type="double" line="85"/>
            <javadoc line="85">
                The constant {@code B3} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_B4" type="double" line="89"/>
            <javadoc line="89">
                The constant {@code B4} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_B5" type="double" line="93"/>
            <javadoc line="93">
                The constant {@code B5} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_B6" type="double" line="97"/>
            <javadoc line="97">
                The constant {@code B6} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_B7" type="double" line="101"/>
            <javadoc line="101">
                The constant {@code B7} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_B8" type="double" line="105"/>
            <javadoc line="105">
                The constant {@code B8} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_P0" type="double" line="109"/>
            <javadoc line="109">
                The constant {@code P0} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_P1" type="double" line="113"/>
            <javadoc line="113">
                The constant {@code P1} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_P2" type="double" line="117"/>
            <javadoc line="117">
                The constant {@code P2} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_P3" type="double" line="121"/>
            <javadoc line="121">
                The constant {@code P3} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_P4" type="double" line="125"/>
            <javadoc line="125">
                The constant {@code P4} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_P5" type="double" line="129"/>
            <javadoc line="129">
                The constant {@code P5} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_P6" type="double" line="133"/>
            <javadoc line="133">
                The constant {@code P6} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_Q1" type="double" line="137"/>
            <javadoc line="137">
                The constant {@code Q1} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_Q2" type="double" line="141"/>
            <javadoc line="141">
                The constant {@code Q2} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_Q3" type="double" line="145"/>
            <javadoc line="145">
                The constant {@code Q3} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_Q4" type="double" line="149"/>
            <javadoc line="149">
                The constant {@code Q4} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C" type="double" line="153"/>
            <javadoc line="153">
                The constant {@code C} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C0" type="double" line="157"/>
            <javadoc line="157">
                The constant {@code C0} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C1" type="double" line="161"/>
            <javadoc line="161">
                The constant {@code C1} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C2" type="double" line="165"/>
            <javadoc line="165">
                The constant {@code C2} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C3" type="double" line="169"/>
            <javadoc line="169">
                The constant {@code C3} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C4" type="double" line="173"/>
            <javadoc line="173">
                The constant {@code C4} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C5" type="double" line="177"/>
            <javadoc line="177">
                The constant {@code C5} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C6" type="double" line="181"/>
            <javadoc line="181">
                The constant {@code C6} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C7" type="double" line="185"/>
            <javadoc line="185">
                The constant {@code C7} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C8" type="double" line="189"/>
            <javadoc line="189">
                The constant {@code C8} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C9" type="double" line="193"/>
            <javadoc line="193">
                The constant {@code C9} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C10" type="double" line="197"/>
            <javadoc line="197">
                The constant {@code C10} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C11" type="double" line="201"/>
            <javadoc line="201">
                The constant {@code C11} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C12" type="double" line="205"/>
            <javadoc line="205">
                The constant {@code C12} defined in {@code DGAM1}.                
            </javadoc>
            <declaration name="INV_GAMMA1P_M1_C13" type="double" line="209"/>
            <javadoc line="209">
                The constant {@code C13} defined in {@code DGAM1}.                
            </javadoc>
            <javadoc line="213">
                Default constructor.  Prohibit instantiation.                
            </javadoc>
            <method name="Gamma" type="constructor" line="216"/>
            <javadoc line="218">
                &lt;p&gt;
                  Returns the value of log&amp;nbsp;&amp;Gamma;(x) for x&amp;nbsp;&amp;gt;&amp;nbsp;0.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For x &amp;le; 8, the implementation is based on the double precision
                  implementation in the &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt;,{@code DGAMLN}. For x &amp;gt; 8, the implementation is based on
                  &lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/GammaFunction.html&quot;&gt;Gamma
                  Function&lt;/a&gt;, equation (28).&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/LanczosApproximation.html&quot;&gt;
                  Lanczos Approximation&lt;/a&gt;, equations (1) through (5).&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;http://my.fit.edu/~gabdo/gamma.txt&quot;&gt;Paul Godfrey, A note on
                  the computation of the convergent Lanczos complex Gamma
                  approximation&lt;/a&gt;&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    x Argument.                    
                </param>
                <return>
                    the value of {@code log(Gamma(x))}, {@code Double.NaN} if{@code x <= 0.0}.                    
                </return>
            </javadoc>
            <method name="logGamma" type="double" line="238">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="ret" type="double" line="239"/>
                <scope line="240"/>
                <scope line="243"/>
                <scope line="246"/>
                <scope line="249">
                    <declaration name="n" type="int" line="250"/>
                    <declaration name="prod" type="double" line="251"/>
                    <scope line="252"/>
                </scope>
                <scope line="257">
                    <declaration name="sum" type="double" line="258"/>
                    <declaration name="tmp" type="double" line="259"/>
                </scope>
            </method>
            <javadoc line="264">
                Returns the regularized gamma function P(a, x).                
                <param>
                    a Parameter.                    
                </param>
                <param>
                    x Value.                    
                </param>
                <return>
                    the regularized gamma function P(a, x).                    
                </return>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
            </javadoc>
            <method name="regularizedGammaP" type="double" line="271">
                <params>
                    <param name="a" type="double"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="274">
                Returns the regularized gamma function P(a, x).
                  The implementation of this method is based on:
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/RegularizedGammaFunction.html&quot;&gt;
                  Regularized Gamma Function&lt;/a&gt;, equation (1)
                  &lt;/li&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/IncompleteGammaFunction.html&quot;&gt;
                  Incomplete Gamma Function&lt;/a&gt;, equation (4).
                  &lt;/li&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html&quot;&gt;
                  Confluent Hypergeometric Function of the First Kind&lt;/a&gt;, equation (1).
                  &lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    a the a parameter.                    
                </param>
                <param>
                    x the value.                    
                </param>
                <param>
                    epsilon When the absolute value of the nth item in the
                      series is less than epsilon the approximation ceases to calculate
                      further elements in the series.                    
                </param>
                <param>
                    maxIterations Maximum number of "iterations" to complete.                    
                </param>
                <return>
                    the regularized gamma function P(a, x)                    
                </return>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
            </javadoc>
            <method name="regularizedGammaP" type="double" line="300">
                <params>
                    <param name="a" type="double"/>
                    <param name="x" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <declaration name="ret" type="double" line="301"/>
                <scope line="302"/>
                <scope line="305"/>
                <scope line="308"/>
                <scope line="311">
                    <declaration name="n" type="double" line="312"/>
                    <declaration name="an" type="double" line="313"/>
                    <declaration name="sum" type="double" line="314"/>
                    <scope line="315"/>
                    <scope line="320"/>
                    <scope line="323"/>
                    <scope line="326"/>
                </scope>
            </method>
            <javadoc line="332">
                Returns the regularized gamma function Q(a, x) = 1 - P(a, x).                
                <param>
                    a the a parameter.                    
                </param>
                <param>
                    x the value.                    
                </param>
                <return>
                    the regularized gamma function Q(a, x)                    
                </return>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
            </javadoc>
            <method name="regularizedGammaQ" type="double" line="339">
                <params>
                    <param name="a" type="double"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="342">
                Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
                  The implementation of this method is based on:
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/RegularizedGammaFunction.html&quot;&gt;
                  Regularized Gamma Function&lt;/a&gt;, equation (1).
                  &lt;/li&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/&quot;&gt;
                  Regularized incomplete gamma function: Continued fraction representations
                  (formula 06.08.10.0003)&lt;/a&gt;
                  &lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    a the a parameter.                    
                </param>
                <param>
                    x the value.                    
                </param>
                <param>
                    epsilon When the absolute value of the nth item in the
                      series is less than epsilon the approximation ceases to calculate
                      further elements in the series.                    
                </param>
                <param>
                    maxIterations Maximum number of "iterations" to complete.                    
                </param>
                <return>
                    the regularized gamma function P(a, x)                    
                </return>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
            </javadoc>
            <method name="regularizedGammaQ" type="double" line="365">
                <params>
                    <param name="a" type="double"/>
                    <param name="x" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <declaration name="ret" type="double" line="366"/>
                <scope line="367"/>
                <scope line="370"/>
                <scope line="373"/>
                <scope line="376">
                    <anonymous_class line="377">
                        <method name="getA" type="double" line="378">
                            <params>
                                <param name="n" type="int"/>
                                <param name="x" type="double"/>
                            </params>
                        </method>
                        <method name="getB" type="double" line="381">
                            <params>
                                <param name="n" type="int"/>
                                <param name="x" type="double"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="cf" type="ContinuedFraction" line="377"/>
                </scope>
            </method>
            <javadoc line="391">
                &lt;p&gt;Computes the digamma function of x.&lt;/p&gt;
                  &lt;p&gt;This is an independently written implementation of the algorithm described in
                  Jose Bernardo, Algorithm AS 103: Psi (Digamma) Function, Applied Statistics, 1976.&lt;/p&gt;
                  &lt;p&gt;Some of the constants have been changed to increase accuracy at the moderate expense
                  of run-time.  The result should be accurate to within 10^-8 absolute tolerance for
                  x &gt;= 10^-5 and within 10^-8 relative tolerance for x &gt; 0.&lt;/p&gt;
                  &lt;p&gt;Performance for large negative values of x will be quite expensive (proportional to
                  |x|).  Accuracy for negative values of x should be about 10^-8 absolute for results
                  less than 10^5 and 10^-8 relative for results larger than that.&lt;/p&gt;                
                <param>
                    x Argument.                    
                </param>
                <return>
                    digamma(x) to within 10-8 relative or absolute error whichever is smaller.                    
                </return>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Digamma_function">Digamma</a>                    
                </see>
                <see>
                    <a href="http://www.uv.es/~bernardo/1976AppStatist.pdf">Bernardo&apos;s original article </a>                    
                </see>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="digamma" type="double" line="407">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="408"/>
                <scope line="411">
                    <declaration name="inv" type="double" line="412"/>
                </scope>
            </method>
            <javadoc line="417">
                Computes the trigamma function of x.
                  This function is derived by taking the derivative of the implementation
                  of digamma.                
                <param>
                    x Argument.                    
                </param>
                <return>
                    trigamma(x) to within 10-8 relative or absolute error whichever is smaller                    
                </return>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Trigamma_function">Trigamma</a>                    
                </see>
                <see>
                    Gamma#digamma(double)                    
                </see>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="trigamma" type="double" line="427">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="428"/>
                <scope line="431">
                    <declaration name="inv" type="double" line="432"/>
                </scope>
            </method>
            <javadoc line="437">
                &lt;p&gt;
                  Returns the Lanczos approximation used to compute the gamma function.
                  The Lanczos approximation is related to the Gamma function by the
                  following equation
                  &lt;center&gt;{@code gamma(x) = sqrt(2  pi) / x  (x + g + 0.5) ^ (x + 0.5)
                   exp(-x - g - 0.5)  lanczos(x)},
                  &lt;/center&gt;
                  where {@code g} is the Lanczos constant.
                  &lt;/p&gt;                
                <param>
                    x Argument.                    
                </param>
                <return>
                    The Lanczos approximation.                    
                </return>
                <see>
                    <a href="http://mathworld.wolfram.com/LanczosApproximation.html">Lanczos Approximation</a>
                      equations (1) through (5), and Paul Godfrey's
                      <a href="http://my.fit.edu/~gabdo/gamma.txt">Note on the computation
                      of the convergent Lanczos complex Gamma approximation</a>                    
                </see>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="lanczos" type="double" line="455">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="sum" type="double" line="456"/>
                <scope line="457"/>
            </method>
            <javadoc line="462">
                Returns the value of 1 / &amp;Gamma;(1 + x) - 1 for -0&amp;#46;5 &amp;le; x &amp;le;
                  1&amp;#46;5. This implementation is based on the double precision
                  implementation in the &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt;,{@code DGAM1}.                
                <param>
                    x Argument.                    
                </param>
                <return>
                    The value of {@code 1.0 / Gamma(1.0 + x) - 1.0}.                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code x < -0.5}                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code x > 1.5}                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="invGamma1pm1" type="double" line="472">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="473"/>
                <scope line="476"/>
                <declaration name="ret" type="double" line="479"/>
                <declaration name="t" type="double" line="480"/>
                <scope line="481">
                    <declaration name="a" type="double" line="482"/>
                    <declaration name="b" type="double" line="483"/>
                    <declaration name="c" type="double" line="492"/>
                    <scope line="506"/>
                    <scope line="509"/>
                </scope>
                <scope line="513">
                    <declaration name="p" type="double" line="514"/>
                    <declaration name="q" type="double" line="521"/>
                    <declaration name="c" type="double" line="526"/>
                    <scope line="540"/>
                    <scope line="543"/>
                </scope>
            </method>
            <javadoc line="549">
                Returns the value of log &amp;Gamma;(1 + x) for -0&amp;#46;5 &amp;le; x &amp;le; 1&amp;#46;5.
                  This implementation is based on the double precision implementation in
                  the &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt;, {@code DGMLN1}.                
                <param>
                    x Argument.                    
                </param>
                <return>
                    The value of {@code log(Gamma(1 + x))}.                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code x < -0.5}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code x > 1.5}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="logGamma1p" type="double" line="559">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="560"/>
                <scope line="563"/>
            </method>
            <javadoc line="568">
                Returns the value of Γ(x). Based on the &lt;em&gt;NSWC Library of
                  Mathematics Subroutines&lt;/em&gt; double precision implementation,{@code DGAMMA}.                
                <param>
                    x Argument.                    
                </param>
                <return>
                    the value of {@code Gamma(x)}.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="gamma" type="double" line="575">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="576"/>
                <declaration name="ret" type="double" line="579"/>
                <declaration name="absX" type="double" line="580"/>
                <scope line="581">
                    <scope line="582">
                        <declaration name="prod" type="double" line="583"/>
                        <declaration name="t" type="double" line="584"/>
                        <scope line="585"/>
                    </scope>
                    <scope line="591">
                        <declaration name="prod" type="double" line="592"/>
                        <declaration name="t" type="double" line="593"/>
                        <scope line="594"/>
                    </scope>
                </scope>
                <scope line="601">
                    <declaration name="y" type="double" line="602"/>
                    <declaration name="gammaAbs" type="double" line="603"/>
                    <scope line="604"/>
                    <scope line="607"/>
                </scope>
            </method>
        </class>
    </source>