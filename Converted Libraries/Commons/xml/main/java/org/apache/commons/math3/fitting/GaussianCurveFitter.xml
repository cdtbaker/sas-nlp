<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.analysis.function.Gaussian"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder"/>
        <import package="org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem"/>
        <import package="org.apache.commons.math3.linear.DiagonalMatrix"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="GaussianCurveFitter" line="37">
            <extends class="AbstractCurveFitter"/>
            <javadoc line="37">
                Fits points to a {@link org.apache.commons.math3.analysis.function.Gaussian.Parametric Gaussian}function.
                  &lt;br/&gt;
                  The {@link #withStartPoint(double[]) initial guess values} must be passed
                  in the following order:
                  &lt;ul&gt;
                  &lt;li&gt;Normalization&lt;/li&gt;
                  &lt;li&gt;Mean&lt;/li&gt;
                  &lt;li&gt;Sigma&lt;/li&gt;
                  &lt;/ul&gt;
                  The optimal values will be returned in the same order.
                  &lt;p&gt;
                  Usage example:
                  &lt;pre&gt;
                  WeightedObservedPoints obs = new WeightedObservedPoints();
                  obs.add(4.0254623,  531026.0);
                  obs.add(4.03128248, 984167.0);
                  obs.add(4.03839603, 1887233.0);
                  obs.add(4.04421621, 2687152.0);
                  obs.add(4.05132976, 3461228.0);
                  obs.add(4.05326982, 3580526.0);
                  obs.add(4.05779662, 3439750.0);
                  obs.add(4.0636168,  2877648.0);
                  obs.add(4.06943698, 2175960.0);
                  obs.add(4.07525716, 1447024.0);
                  obs.add(4.08237071, 717104.0);
                  obs.add(4.08366408, 620014.0);
                  double[] parameters = GaussianCurveFitter.create().fit(obs);
                  &lt;/pre&gt;                
                <version>
                    $Id: GaussianCurveFitter.java 1571640 2014-02-25 10:27:21Z erans $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="FUNCTION" type="Gaussian.Parametric" line="74"/>
            <javadoc line="74">
                Parametric function to be fitted.                
            </javadoc>
            <anonymous_class line="75">
                <method name="value" type="double" line="77">
                    <params>
                        <param name="x" type="double"/>
                        <param name="p" type="double"/>
                    </params>
                    <comment line="82">
                        NOPMD                        
                    </comment>
                    <comment line="83">
                        Do nothing.                        
                    </comment>
                    <declaration name="v" type="double" line="78"/>
                    <scope line="79"/>
                    <scope line="81"/>
                </method>
                <method name="gradient" type="double[]" line="88">
                    <params>
                        <param name="x" type="double"/>
                        <param name="p" type="double"/>
                    </params>
                    <comment line="95">
                        NOPMD                        
                    </comment>
                    <comment line="96">
                        Do nothing.                        
                    </comment>
                    <declaration name="v" type="double[]" line="89"/>
                    <scope line="92"/>
                    <scope line="94"/>
                </method>
            </anonymous_class>
            <declaration name="initialGuess" type="double[]" line="100"/>
            <javadoc line="100">
                Initial guess.                
            </javadoc>
            <declaration name="maxIter" type="int" line="102"/>
            <javadoc line="102">
                Maximum number of iterations of the optimization algorithm.                
            </javadoc>
            <javadoc line="105">
                Contructor used by the factory methods.                
                <param>
                    initialGuess Initial guess. If set to {@code null}, the initial guess
                      will be estimated using the {@link ParameterGuesser}.                    
                </param>
                <param>
                    maxIter Maximum number of iterations of the optimization algorithm.                    
                </param>
            </javadoc>
            <method name="GaussianCurveFitter" type="constructor" line="113">
                <params>
                    <param name="initialGuess" type="double[]"/>
                    <param name="maxIter" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                Creates a default curve fitter.
                  The initial guess for the parameters will be {@link ParameterGuesser}computed automatically, and the maximum number of iterations of the
                  optimization algorithm is set to {@link Integer#MAX_VALUE}.                
                <return>
                    a curve fitter.                    
                </return>
                <see>
                    #withStartPoint(double[])                    
                </see>
                <see>
                    #withMaxIterations(int)                    
                </see>
            </javadoc>
            <method name="create" type="GaussianCurveFitter" line="129"/>
            <javadoc line="133">
                Configure the start point (initial guess).                
                <param>
                    newStart new start point (initial guess)                    
                </param>
                <return>
                    a new instance.                    
                </return>
            </javadoc>
            <method name="withStartPoint" type="GaussianCurveFitter" line="138">
                <params>
                    <param name="newStart" type="double[]"/>
                </params>
            </method>
            <javadoc line="143">
                Configure the maximum number of iterations.                
                <param>
                    newMaxIter maximum number of iterations                    
                </param>
                <return>
                    a new instance.                    
                </return>
            </javadoc>
            <method name="withMaxIterations" type="GaussianCurveFitter" line="148">
                <params>
                    <param name="newMaxIter" type="int"/>
                </params>
            </method>
            <javadoc line="153">
                {@inheritDoc}                
            </javadoc>
            <method name="getProblem" type="LeastSquaresProblem" line="155">
                <params>
                    <param name="observations" type="Collection&lt;WeightedObservedPoint&gt;"/>
                </params>
                <comment line="158">
                    Prepare least-squares problem.                    
                </comment>
                <comment line="175">
                    Compute estimation.                    
                </comment>
                <comment line="178">
                    Return a new least squares problem set up to fit a Gaussian curve to the
                     observed points.                    
                </comment>
                <declaration name="len" type="int" line="158"/>
                <declaration name="target" type="double[]" line="159"/>
                <declaration name="weights" type="double[]" line="160"/>
                <declaration name="i" type="int" line="162"/>
                <scope line="163"/>
                <declaration name="model" type="AbstractCurveFitter.TheoreticalValuesFunction" line="169"/>
                <declaration name="startPoint" type="double[]" line="172"/>
            </method>
            <class name="ParameterGuesser" line="190">
                <javadoc line="190">
                    Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}of a {@link org.apache.commons.math3.analysis.function.Gaussian.Parametric}based on the specified observed points.                    
                </javadoc>
                <declaration name="norm" type="double" line="196"/>
                <javadoc line="196">
                    Normalization factor.                    
                </javadoc>
                <declaration name="mean" type="double" line="198"/>
                <javadoc line="198">
                    Mean.                    
                </javadoc>
                <declaration name="sigma" type="double" line="200"/>
                <javadoc line="200">
                    Standard deviation.                    
                </javadoc>
                <javadoc line="203">
                    Constructs instance with the specified observed points.                    
                    <param>
                        observations Observed points from which to guess the
                          parameters of the Gaussian.                        
                    </param>
                    <throws>
                        NullArgumentException if {@code observations} is{@code null}.                        
                    </throws>
                    <throws>
                        NumberIsTooSmallException if there are less than 3
                          observations.                        
                    </throws>
                </javadoc>
                <method name="ParameterGuesser" type="constructor" line="213">
                    <params>
                        <param name="observations" type="Collection&lt;WeightedObservedPoint&gt;"/>
                    </params>
                    <scope line="214"/>
                    <scope line="217"/>
                    <declaration name="sorted" type="List&amp;lt;WeightedObservedPoint&amp;gt;" line="221"/>
                    <declaration name="params" type="double[]" line="222"/>
                </method>
                <javadoc line="229">
                    Gets an estimation of the parameters.                    
                    <return>
                        the guessed parameters, in the following order:
                          &lt;ul&gt;
                          &lt;li&gt;Normalization factor&lt;/li&gt;
                          &lt;li&gt;Mean&lt;/li&gt;
                          &lt;li&gt;Standard deviation&lt;/li&gt;
                          &lt;/ul&gt;                        
                    </return>
                </javadoc>
                <method name="guess" type="double[]" line="239"/>
                <javadoc line="243">
                    Sort the observations.                    
                    <param>
                        unsorted Input observations.                        
                    </param>
                    <return>
                        the input observations, sorted.                        
                    </return>
                </javadoc>
                <method name="sortObservations" type="List&lt;WeightedObservedPoint&gt;" line="249">
                    <params>
                        <param name="unsorted" type="Collection&lt;WeightedObservedPoint&gt;"/>
                    </params>
                    <declaration name="observations" type="List&amp;lt;WeightedObservedPoint&amp;gt;" line="250"/>
                    <anonymous_class line="252">
                        <method name="compare" type="int" line="254">
                            <params>
                                <param name="p1" type="WeightedObservedPoint"/>
                                <param name="p2" type="WeightedObservedPoint"/>
                            </params>
                            <scope line="255"/>
                            <scope line="258"/>
                            <scope line="261"/>
                            <scope line="264"/>
                            <scope line="267"/>
                            <scope line="270"/>
                            <scope line="273"/>
                            <scope line="276"/>
                            <scope line="279"/>
                        </method>
                    </anonymous_class>
                    <declaration name="cmp" type="Comparator&amp;lt;WeightedObservedPoint&amp;gt;" line="252"/>
                </method>
                <javadoc line="290">
                    Guesses the parameters based on the specified observed points.                    
                    <param>
                        points Observed points, sorted.                        
                    </param>
                    <return>
                        the guessed parameters (normalization factor, mean and
                          sigma).                        
                    </return>
                </javadoc>
                <method name="basicGuess" type="double[]" line="297">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                    </params>
                    <comment line="310">
                        TODO: Exceptions should not be used for flow control.                        
                    </comment>
                    <declaration name="maxYIdx" type="int" line="298"/>
                    <declaration name="n" type="double" line="299"/>
                    <declaration name="m" type="double" line="300"/>
                    <declaration name="fwhmApprox" type="double" line="302"/>
                    <scope line="303">
                        <declaration name="halfY" type="double" line="304"/>
                        <declaration name="fwhmX1" type="double" line="305"/>
                        <declaration name="fwhmX2" type="double" line="306"/>
                    </scope>
                    <scope line="308"/>
                    <declaration name="s" type="double" line="312"/>
                </method>
                <javadoc line="317">
                    Finds index of point in specified points with the largest Y.                    
                    <param>
                        points Points to search.                        
                    </param>
                    <return>
                        the index in specified points array.                        
                    </return>
                </javadoc>
                <method name="findMaxY" type="int" line="323">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                    </params>
                    <declaration name="maxYIdx" type="int" line="324"/>
                    <scope line="325">
                        <scope line="326"/>
                    </scope>
                </method>
                <javadoc line="333">
                    Interpolates using the specified points to determine X at the
                      specified Y.                    
                    <param>
                        points Points to use for interpolation.                        
                    </param>
                    <param>
                        startIdx Index within points from which to start the search for
                          interpolation bounds points.                        
                    </param>
                    <param>
                        idxStep Index step for searching interpolation bounds points.                        
                    </param>
                    <param>
                        y Y value for which X should be determined.                        
                    </param>
                    <return>
                        the value of X for the specified Y.                        
                    </return>
                    <throws>
                        ZeroException if {@code idxStep} is 0.                        
                    </throws>
                    <throws>
                        OutOfRangeException if specified {@code y} is not within the
                          range of the specified {@code points}.                        
                    </throws>
                </javadoc>
                <method name="interpolateXAtY" type="double" line="351">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                        <param name="startIdx" type="int"/>
                        <param name="idxStep" type="int"/>
                        <param name="y" type="double"/>
                    </params>
                    <scope line="352"/>
                    <declaration name="twoPoints" type="WeightedObservedPoint[]" line="355"/>
                    <declaration name="p1" type="WeightedObservedPoint" line="357"/>
                    <declaration name="p2" type="WeightedObservedPoint" line="358"/>
                    <scope line="359"/>
                    <scope line="362"/>
                </method>
                <javadoc line="369">
                    Gets the two bounding interpolation points from the specified points
                      suitable for determining X at the specified Y.                    
                    <param>
                        points Points to use for interpolation.                        
                    </param>
                    <param>
                        startIdx Index within points from which to start search for
                          interpolation bounds points.                        
                    </param>
                    <param>
                        idxStep Index step for search for interpolation bounds points.                        
                    </param>
                    <param>
                        y Y value for which X should be determined.                        
                    </param>
                    <return>
                        the array containing two points suitable for determining X at
                          the specified Y.                        
                    </return>
                    <throws>
                        ZeroException if {@code idxStep} is 0.                        
                    </throws>
                    <throws>
                        OutOfRangeException if specified {@code y} is not within the
                          range of the specified {@code points}.                        
                    </throws>
                </javadoc>
                <method name="getInterpolationPointsForY" type="WeightedObservedPoint[]" line="388">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                        <param name="startIdx" type="int"/>
                        <param name="idxStep" type="int"/>
                        <param name="y" type="double"/>
                    </params>
                    <comment line="407">
                        Boundaries are replaced by dummy values because the raised
                         exception is caught and the message never displayed.
                         TODO: Exceptions should not be used for flow control.                        
                    </comment>
                    <scope line="389"/>
                    <scope line="394">
                        <declaration name="p1" type="WeightedObservedPoint" line="395"/>
                        <declaration name="p2" type="WeightedObservedPoint" line="396"/>
                        <scope line="397">
                            <scope line="398"/>
                            <scope line="400"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="414">
                    Determines whether a value is between two other values.                    
                    <param>
                        value Value to test whether it is between {@code boundary1}and {@code boundary2}.                        
                    </param>
                    <param>
                        boundary1 One end of the range.                        
                    </param>
                    <param>
                        boundary2 Other end of the range.                        
                    </param>
                    <return>
                        {@code true} if {@code value} is between {@code boundary1} and{@code boundary2} (inclusive), {@code false} otherwise.                        
                    </return>
                </javadoc>
                <method name="isBetween" type="boolean" line="426">
                    <params>
                        <param name="value" type="double"/>
                        <param name="boundary1" type="double"/>
                        <param name="boundary2" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>