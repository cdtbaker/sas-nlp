<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod">
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.fraction.BigFraction"/>
        <import package="org.apache.commons.math3.geometry.enclosing.EnclosingBall"/>
        <import package="org.apache.commons.math3.geometry.enclosing.SupportBallGenerator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="DiskGenerator" line="26">
            <implements interface="SupportBallGenerator">
                <type_params>
                    <type_param name="Euclidean2D"/>
                    <type_param name="Vector2D"/>
                </type_params>
            </implements>
            <javadoc line="26">
                Class generating an enclosing ball from its support points.                
                <version>
                    $Id: DiskGenerator.java 1564921 2014-02-05 20:42:58Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <javadoc line="32">
                {@inheritDoc}                
            </javadoc>
            <method name="ballOnSupport" type="EnclosingBall&lt;Euclidean2D,Vector2D&gt;" line="33">
                <params>
                    <param name="support" type="List&lt;Vector2D&gt;"/>
                </params>
                <comment line="50">
                    a disk is 2D can be defined as:
                     (1)   (x - x_0)^2 + (y - y_0)^2 = r^2
                     which can be written:
                     (2)   (x^2 + y^2) - 2 x_0 x - 2 y_0 y + (x_0^2 + y_0^2 - r^2) = 0
                     or simply:
                     (3)   (x^2 + y^2) + a x + b y + c = 0
                     with disk center coordinates -a/2, -b/2
                     If the disk exists, a, b and c are a non-zero solution to
                     [ (x^2  + y^2 )   x    y   1 ]   [ 1 ]   [ 0 ]
                     [ (xA^2 + yA^2)   xA   yA  1 ]   [ a ]   [ 0 ]
                     [ (xB^2 + yB^2)   xB   yB  1 ] * [ b ] = [ 0 ]
                     [ (xC^2 + yC^2)   xC   yC  1 ]   [ c ]   [ 0 ]
                     So the determinant of the matrix is zero. Computing this determinant
                     by expanding it using the minors m_ij of first row leads to
                     (4)   m_11 (x^2 + y^2) - m_12 x + m_13 y - m_14 = 0
                     So by identifying equations (2) and (4) we get the coordinates
                     of center as:
                          x_0 = +m_12 / (2 m_11)
                          y_0 = -m_13 / (2 m_11)
                     Note that the minors m_11, m_12 and m_13 all have the last column
                     filled with 1.0, hence simplifying the computation                    
                </comment>
                <scope line="35"/>
                <scope line="37">
                    <declaration name="vA" type="Vector2D" line="38"/>
                    <scope line="39"/>
                    <scope line="41">
                        <declaration name="vB" type="Vector2D" line="42"/>
                        <scope line="43"/>
                        <scope line="47">
                            <declaration name="vC" type="Vector2D" line="48"/>
                            <declaration name="c2" type="BigFraction[]" line="70"/>
                            <declaration name="c3" type="BigFraction[]" line="73"/>
                            <declaration name="c1" type="BigFraction[]" line="76"/>
                            <declaration name="twoM11" type="BigFraction" line="81"/>
                            <declaration name="m12" type="BigFraction" line="82"/>
                            <declaration name="m13" type="BigFraction" line="83"/>
                            <declaration name="centerX" type="BigFraction" line="84"/>
                            <declaration name="centerY" type="BigFraction" line="85"/>
                            <declaration name="dx" type="BigFraction" line="86"/>
                            <declaration name="dy" type="BigFraction" line="87"/>
                            <declaration name="r2" type="BigFraction" line="88"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="98">
                Compute a dimension 3 minor, when 3&lt;sup&gt;d&lt;/sup&gt; column is known to be filled with 1.0.                
                <param>
                    c1 first column                    
                </param>
                <param>
                    c2 second column                    
                </param>
                <return>
                    value of the minor computed has an exact fraction                    
                </return>
            </javadoc>
            <method name="minor" type="BigFraction" line="103">
                <params>
                    <param name="c1" type="BigFraction[]"/>
                    <param name="c2" type="BigFraction[]"/>
                </params>
            </method>
        </class>
    </source>