<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.io.Serializable"/>
        <import package="java.text.NumberFormat"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.Space"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Vector3D" line="33">
            <comment line="63">
                CHECKSTYLE: stop ConstantName                
            </comment>
            <comment line="66">
                CHECKSTYLE: resume ConstantName                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="Vector">
                <type_params>
                    <type_param name="Euclidean3D"/>
                </type_params>
            </implements>
            <javadoc line="33">
                This class implements vectors in a three-dimensional space.
                  &lt;p&gt;Instance of this class are guaranteed to be immutable.&lt;/p&gt;                
                <version>
                    $Id: Vector3D.java 1591835 2014-05-02 09:04:01Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="ZERO" type="Vector3D" line="41"/>
            <javadoc line="41">
                Null vector (coordinates: 0, 0, 0).                
            </javadoc>
            <declaration name="PLUS_I" type="Vector3D" line="44"/>
            <javadoc line="44">
                First canonical vector (coordinates: 1, 0, 0).                
            </javadoc>
            <declaration name="MINUS_I" type="Vector3D" line="47"/>
            <javadoc line="47">
                Opposite of the first canonical vector (coordinates: -1, 0, 0).                
            </javadoc>
            <declaration name="PLUS_J" type="Vector3D" line="50"/>
            <javadoc line="50">
                Second canonical vector (coordinates: 0, 1, 0).                
            </javadoc>
            <declaration name="MINUS_J" type="Vector3D" line="53"/>
            <javadoc line="53">
                Opposite of the second canonical vector (coordinates: 0, -1, 0).                
            </javadoc>
            <declaration name="PLUS_K" type="Vector3D" line="56"/>
            <javadoc line="56">
                Third canonical vector (coordinates: 0, 0, 1).                
            </javadoc>
            <declaration name="MINUS_K" type="Vector3D" line="59"/>
            <javadoc line="59">
                Opposite of the third canonical vector (coordinates: 0, 0, -1).                
            </javadoc>
            <declaration name="NaN" type="Vector3D" line="63"/>
            <javadoc line="63">
                A vector with all coordinates set to NaN.                
            </javadoc>
            <declaration name="POSITIVE_INFINITY" type="Vector3D" line="67"/>
            <javadoc line="67">
                A vector with all coordinates set to positive infinity.                
            </javadoc>
            <declaration name="NEGATIVE_INFINITY" type="Vector3D" line="71"/>
            <javadoc line="71">
                A vector with all coordinates set to negative infinity.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="75"/>
            <javadoc line="75">
                Serializable version identifier.                
            </javadoc>
            <declaration name="x" type="double" line="78"/>
            <javadoc line="78">
                Abscissa.                
            </javadoc>
            <declaration name="y" type="double" line="81"/>
            <javadoc line="81">
                Ordinate.                
            </javadoc>
            <declaration name="z" type="double" line="84"/>
            <javadoc line="84">
                Height.                
            </javadoc>
            <javadoc line="87">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    x abscissa                    
                </param>
                <param>
                    y ordinate                    
                </param>
                <param>
                    z height                    
                </param>
                <see>
                    #getX()                    
                </see>
                <see>
                    #getY()                    
                </see>
                <see>
                    #getZ()                    
                </see>
            </javadoc>
            <method name="Vector3D" type="constructor" line="96">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
            </method>
            <javadoc line="102">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    v coordinates array                    
                </param>
                <exception>
                    DimensionMismatchException if array does not have 3 elements                    
                </exception>
                <see>
                    #toArray()                    
                </see>
            </javadoc>
            <method name="Vector3D" type="constructor" line="108">
                <params>
                    <param name="v" type="double[]"/>
                </params>
                <scope line="109"/>
            </method>
            <javadoc line="117">
                Simple constructor.
                  Build a vector from its azimuthal coordinates                
                <param>
                    alpha azimuth (&amp;alpha;) around Z
                      (0 is +X, &amp;pi;/2 is +Y, &amp;pi; is -X and 3&amp;pi;/2 is -Y)                    
                </param>
                <param>
                    delta elevation (&amp;delta;) above (XY) plane, from -&amp;pi;/2 to +&amp;pi;/2                    
                </param>
                <see>
                    #getAlpha()                    
                </see>
                <see>
                    #getDelta()                    
                </see>
            </javadoc>
            <method name="Vector3D" type="constructor" line="125">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="delta" type="double"/>
                </params>
                <declaration name="cosDelta" type="double" line="126"/>
            </method>
            <javadoc line="132">
                Multiplicative constructor
                  Build a vector from another one and a scale factor.
                  The vector built will be a  u                
                <param>
                    a scale factor                    
                </param>
                <param>
                    u base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector3D" type="constructor" line="138">
                <params>
                    <param name="a" type="double"/>
                    <param name="u" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="144">
                Linear constructor
                  Build a vector from two other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector3D" type="constructor" line="152">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector3D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="158">
                Linear constructor
                  Build a vector from three other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector3D" type="constructor" line="169">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector3D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector3D"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="175">
                Linear constructor
                  Build a vector from four other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3 + a4  u4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    u4 fourth base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector3D" type="constructor" line="188">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector3D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector3D"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="Vector3D"/>
                    <param name="a4" type="double"/>
                    <param name="u4" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="194">
                Get the abscissa of the vector.                
                <return>
                    abscissa of the vector                    
                </return>
                <see>
                    #Vector3D(double,double,double)                    
                </see>
            </javadoc>
            <method name="getX" type="double" line="198"/>
            <javadoc line="202">
                Get the ordinate of the vector.                
                <return>
                    ordinate of the vector                    
                </return>
                <see>
                    #Vector3D(double,double,double)                    
                </see>
            </javadoc>
            <method name="getY" type="double" line="206"/>
            <javadoc line="210">
                Get the height of the vector.                
                <return>
                    height of the vector                    
                </return>
                <see>
                    #Vector3D(double,double,double)                    
                </see>
            </javadoc>
            <method name="getZ" type="double" line="214"/>
            <javadoc line="218">
                Get the vector coordinates as a dimension 3 array.                
                <return>
                    vector coordinates                    
                </return>
                <see>
                    #Vector3D(double[])                    
                </see>
            </javadoc>
            <method name="toArray" type="double[]" line="222"/>
            <javadoc line="226">
                {@inheritDoc}                
            </javadoc>
            <method name="getSpace" type="Space" line="227"/>
            <javadoc line="231">
                {@inheritDoc}                
            </javadoc>
            <method name="getZero" type="Vector3D" line="232"/>
            <javadoc line="236">
                {@inheritDoc}                
            </javadoc>
            <method name="getNorm1" type="double" line="237"/>
            <javadoc line="241">
                {@inheritDoc}                
            </javadoc>
            <method name="getNorm" type="double" line="242">
                <comment line="244">
                    there are no cancellation problems here, so we use the straightforward formula                    
                </comment>
            </method>
            <javadoc line="247">
                {@inheritDoc}                
            </javadoc>
            <method name="getNormSq" type="double" line="248">
                <comment line="250">
                    there are no cancellation problems here, so we use the straightforward formula                    
                </comment>
            </method>
            <javadoc line="253">
                {@inheritDoc}                
            </javadoc>
            <method name="getNormInf" type="double" line="254"/>
            <javadoc line="258">
                Get the azimuth of the vector.                
                <return>
                    azimuth (&amp;alpha;) of the vector, between -&amp;pi; and +&amp;pi;                    
                </return>
                <see>
                    #Vector3D(double,double)                    
                </see>
            </javadoc>
            <method name="getAlpha" type="double" line="262"/>
            <javadoc line="266">
                Get the elevation of the vector.                
                <return>
                    elevation (&amp;delta;) of the vector, between -&amp;pi;/2 and +&amp;pi;/2                    
                </return>
                <see>
                    #Vector3D(double,double)                    
                </see>
            </javadoc>
            <method name="getDelta" type="double" line="270"/>
            <javadoc line="274">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="Vector3D" line="275">
                <params>
                    <param name="v" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
                <declaration name="v3" type="Vector3D" line="276"/>
            </method>
            <javadoc line="280">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="Vector3D" line="281">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
            </method>
            <javadoc line="285">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="Vector3D" line="286">
                <params>
                    <param name="v" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
                <declaration name="v3" type="Vector3D" line="287"/>
            </method>
            <javadoc line="291">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="Vector3D" line="292">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
            </method>
            <javadoc line="296">
                {@inheritDoc}                
            </javadoc>
            <method name="normalize" type="Vector3D" line="297">
                <declaration name="s" type="double" line="298"/>
                <scope line="299"/>
            </method>
            <javadoc line="305">
                Get a vector orthogonal to the instance.
                  &lt;p&gt;There are an infinite number of normalized vectors orthogonal
                  to the instance. This method picks up one of them almost
                  arbitrarily. It is useful when one needs to compute a reference
                  frame with one of the axes in a predefined direction. The
                  following example shows how to build a frame having the k axis
                  aligned with the known vector u :
                  &lt;pre&gt;&lt;code&gt;
                  Vector3D k = u.normalize();
                  Vector3D i = k.orthogonal();
                  Vector3D j = Vector3D.crossProduct(k, i);
                  &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;                
                <return>
                    a new normalized vector orthogonal to the instance                    
                </return>
                <exception>
                    MathArithmeticException if the norm of the instance is null                    
                </exception>
            </javadoc>
            <method name="orthogonal" type="Vector3D" line="320">
                <declaration name="threshold" type="double" line="322"/>
                <scope line="323"/>
                <scope line="327">
                    <declaration name="inverse" type="double" line="328"/>
                </scope>
                <scope line="330">
                    <declaration name="inverse" type="double" line="331"/>
                </scope>
                <declaration name="inverse" type="double" line="334"/>
            </method>
            <javadoc line="339">
                Compute the angular separation between two vectors.
                  &lt;p&gt;This method computes the angular separation between two
                  vectors using the dot product for well separated vectors and the
                  cross product for almost aligned vectors. This allows to have a
                  good accuracy in all cases, even for vectors very close to each
                  other.&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <return>
                    angular separation between v1 and v2                    
                </return>
                <exception>
                    MathArithmeticException if either vector has a null norm                    
                </exception>
            </javadoc>
            <method name="angle" type="double" line="350">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="Vector3D"/>
                </params>
                <comment line="361">
                    the vectors are almost aligned, compute using the sine                    
                </comment>
                <comment line="369">
                    the vectors are sufficiently separated to use the cosine                    
                </comment>
                <declaration name="normProduct" type="double" line="352"/>
                <scope line="353"/>
                <declaration name="dot" type="double" line="357"/>
                <declaration name="threshold" type="double" line="358"/>
                <scope line="359">
                    <declaration name="v3" type="Vector3D" line="361"/>
                    <scope line="362"/>
                </scope>
            </method>
            <javadoc line="373">
                {@inheritDoc}                
            </javadoc>
            <method name="negate" type="Vector3D" line="374"/>
            <javadoc line="378">
                {@inheritDoc}                
            </javadoc>
            <method name="scalarMultiply" type="Vector3D" line="379">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="383">
                {@inheritDoc}                
            </javadoc>
            <method name="isNaN" type="boolean" line="384"/>
            <javadoc line="388">
                {@inheritDoc}                
            </javadoc>
            <method name="isInfinite" type="boolean" line="389"/>
            <javadoc line="393">
                Test for the equality of two 3D vectors.
                  &lt;p&gt;
                  If all coordinates of two 3D vectors are exactly the same, and none are
                  &lt;code&gt;Double.NaN&lt;/code&gt;, the two 3D vectors are considered to be equal.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;NaN&lt;/code&gt; coordinates are considered to affect globally the vector
                  and be equals to each other - i.e, if either (or all) coordinates of the
                  3D vector are equal to &lt;code&gt;Double.NaN&lt;/code&gt;, the 3D vector is equal to{@link #NaN}.
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two 3D vector objects are equal, false if
                      object is null, not an instance of Vector3D, or
                      not equal to this Vector3D instance                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="413">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="415"/>
                <scope line="419">
                    <declaration name="rhs" type="Vector3D" line="420"/>
                    <scope line="421"/>
                </scope>
            </method>
            <javadoc line="430">
                Get a hashCode for the 3D vector.
                  &lt;p&gt;
                  All NaN values have the same hash code.&lt;/p&gt;                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="438">
                <scope line="439"/>
            </method>
            <javadoc line="445">
                {@inheritDoc}&lt;p&gt;
                  The implementation uses specific multiplication and addition
                  algorithms to preserve accuracy and reduce cancellation effects.
                  It should be very accurate even for nearly orthogonal vectors.
                  &lt;/p&gt;                
                <see>
                    MathArrays#linearCombination(double,double,double,double,double,double)                    
                </see>
            </javadoc>
            <method name="dotProduct" type="double" line="453">
                <params>
                    <param name="v" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
                <declaration name="v3" type="Vector3D" line="454"/>
            </method>
            <javadoc line="458">
                Compute the cross-product of the instance with another vector.                
                <param>
                    v other vector                    
                </param>
                <return>
                    the cross product this ^ v as a new Vector3D                    
                </return>
            </javadoc>
            <method name="crossProduct" type="Vector3D" line="462">
                <params>
                    <param name="v" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
                <declaration name="v3" type="Vector3D" line="463"/>
            </method>
            <javadoc line="469">
                {@inheritDoc}                
            </javadoc>
            <method name="distance1" type="double" line="470">
                <params>
                    <param name="v" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
                <declaration name="v3" type="Vector3D" line="471"/>
                <declaration name="dx" type="double" line="472"/>
                <declaration name="dy" type="double" line="473"/>
                <declaration name="dz" type="double" line="474"/>
            </method>
            <javadoc line="478">
                {@inheritDoc}                
            </javadoc>
            <method name="distance" type="double" line="479">
                <params>
                    <param name="v" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
            </method>
            <javadoc line="483">
                {@inheritDoc}                
            </javadoc>
            <method name="distance" type="double" line="484">
                <params>
                    <param name="v" type="Point&lt;Euclidean3D&gt;"/>
                </params>
                <declaration name="v3" type="Vector3D" line="485"/>
                <declaration name="dx" type="double" line="486"/>
                <declaration name="dy" type="double" line="487"/>
                <declaration name="dz" type="double" line="488"/>
            </method>
            <javadoc line="492">
                {@inheritDoc}                
            </javadoc>
            <method name="distanceInf" type="double" line="493">
                <params>
                    <param name="v" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
                <declaration name="v3" type="Vector3D" line="494"/>
                <declaration name="dx" type="double" line="495"/>
                <declaration name="dy" type="double" line="496"/>
                <declaration name="dz" type="double" line="497"/>
            </method>
            <javadoc line="501">
                {@inheritDoc}                
            </javadoc>
            <method name="distanceSq" type="double" line="502">
                <params>
                    <param name="v" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
                <declaration name="v3" type="Vector3D" line="503"/>
                <declaration name="dx" type="double" line="504"/>
                <declaration name="dy" type="double" line="505"/>
                <declaration name="dz" type="double" line="506"/>
            </method>
            <javadoc line="510">
                Compute the dot-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <return>
                    the dot product v1.v2                    
                </return>
            </javadoc>
            <method name="dotProduct" type="double" line="515">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="519">
                Compute the cross-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <return>
                    the cross product v1 ^ v2 as a new Vector                    
                </return>
            </javadoc>
            <method name="crossProduct" type="Vector3D" line="524">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="528">
                Compute the distance between two vectors according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;1&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance1" type="double" line="536">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="540">
                Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;2&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="548">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="552">
                Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="double" line="560">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="564">
                Compute the square of the distance between two vectors.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <return>
                    the square of the distance between v1 and v2                    
                </return>
            </javadoc>
            <method name="distanceSq" type="double" line="572">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="576">
                Get a string representation of this vector.                
                <return>
                    a string representation of this vector                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="580"/>
            <javadoc line="584">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="585">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
        </class>
    </source>