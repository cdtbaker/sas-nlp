<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="ResizableDoubleArray" line="11">
            <implements interface="DoubleArray"/>
            <implements interface="Serializable"/>
            <javadoc line="11">
                &lt;p&gt;
                  A variable length {@link DoubleArray} implementation that automatically
                  handles expanding and contracting its internal storage array as elements
                  are added and removed.
                  &lt;/p&gt;
                  &lt;h3&gt;Important note: Usage should not assume that this class is thread-safe
                  even though some of the methods are {@code synchronized}.
                  This qualifier will be dropped in the next major release (4.0).&lt;/h3&gt;
                  &lt;p&gt;
                  The internal storage array starts with capacity determined by the{@code initialCapacity} property, which can be set by the constructor.
                  The default initial capacity is 16.  Adding elements using{@link #addElement(double)} appends elements to the end of the array.
                  When there are no open entries at the end of the internal storage array,
                  the array is expanded.  The size of the expanded array depends on the{@code expansionMode} and {@code expansionFactor} properties.
                  The {@code expansionMode} determines whether the size of the array is
                  multiplied by the {@code expansionFactor}({@link ExpansionMode#MULTIPLICATIVE}) or if the expansion is additive
                  ({@link ExpansionMode#ADDITIVE} -- {@code expansionFactor} storage
                  locations added).
                  The default {@code expansionMode} is {@code MULTIPLICATIVE} and the default{@code expansionFactor} is 2.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The {@link #addElementRolling(double)} method adds a new element to the end
                  of the internal storage array and adjusts the &quot;usable window&quot; of the
                  internal array forward by one position (effectively making what was the
                  second element the first, and so on).  Repeated activations of this method
                  (or activation of {@link #discardFrontElements(int)}) will effectively orphan
                  the storage locations at the beginning of the internal storage array.  To
                  reclaim this storage, each time one of these methods is activated, the size
                  of the internal storage array is compared to the number of addressable
                  elements (the {@code numElements} property) and if the difference
                  is too large, the internal array is contracted to size{@code numElements + 1}.  The determination of when the internal
                  storage array is &quot;too large&quot; depends on the {@code expansionMode} and{@code contractionFactor} properties.  If  the {@code expansionMode}is {@code MULTIPLICATIVE}, contraction is triggered when the
                  ratio between storage array length and {@code numElements} exceeds{@code contractionFactor.}  If the {@code expansionMode}is {@code ADDITIVE}, the number of excess storage locations
                  is compared to {@code contractionFactor}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  To avoid cycles of expansions and contractions, the{@code expansionFactor} must not exceed the {@code contractionFactor}.
                  Constructors and mutators for both of these properties enforce this
                  requirement, throwing a {@code MathIllegalArgumentException} if it is
                  violated.
                  &lt;/p&gt;                
                <version>
                    $Id: ResizableDoubleArray.java 1462504 2013-03-29 15:48:57Z luc $                    
                </version>
            </javadoc>
            <declaration name="ADDITIVE_MODE" type="int" line="55"/>
            <javadoc line="55">
                Additive expansion mode.                
                <deprecated>
                    As of 3.1. Please use {@link ExpansionMode#ADDITIVE} instead.                    
                </deprecated>
            </javadoc>
            <declaration name="MULTIPLICATIVE_MODE" type="int" line="60"/>
            <javadoc line="60">
                Multiplicative expansion mode.                
                <deprecated>
                    As of 3.1. Please use {@link ExpansionMode#MULTIPLICATIVE} instead.                    
                </deprecated>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="65"/>
            <javadoc line="65">
                Serializable version identifier.                
            </javadoc>
            <declaration name="DEFAULT_INITIAL_CAPACITY" type="int" line="69"/>
            <javadoc line="69">
                Default value for initial capacity.                
            </javadoc>
            <declaration name="DEFAULT_EXPANSION_FACTOR" type="double" line="73"/>
            <javadoc line="73">
                Default value for array size modifier.                
            </javadoc>
            <declaration name="DEFAULT_CONTRACTION_DELTA" type="double" line="77"/>
            <javadoc line="77">
                Default value for the difference between {@link #contractionCriterion}and {@link #expansionFactor}.                
            </javadoc>
            <declaration name="contractionCriterion" type="double" line="81"/>
            <javadoc line="81">
                The contraction criteria determines when the internal array will be
                  contracted to fit the number of elements contained in the element
                  array + 1.                
            </javadoc>
            <declaration name="expansionFactor" type="double" line="87"/>
            <javadoc line="87">
                The expansion factor of the array.  When the array needs to be expanded,
                  the new array size will be{@code internalArray.length  expansionFactor}if {@code expansionMode} is set to MULTIPLICATIVE_MODE, or{@code internalArray.length + expansionFactor} if{@code expansionMode} is set to ADDITIVE_MODE.                
            </javadoc>
            <declaration name="expansionMode" type="ExpansionMode" line="92"/>
            <javadoc line="92">
                Determines whether array expansion by {@code expansionFactor}is additive or multiplicative.                
            </javadoc>
            <declaration name="internalArray" type="double[]" line="96"/>
            <javadoc line="96">
                The internal storage array.                
            </javadoc>
            <declaration name="numElements" type="int" line="100"/>
            <javadoc line="100">
                The number of addressable elements in the array.  Note that this
                  has nothing to do with the length of the internal storage array.                
            </javadoc>
            <declaration name="startIndex" type="int" line="105"/>
            <javadoc line="105">
                The position of the first addressable element in the internal storage
                  array.  The addressable elements in the array are{@code internalArray[startIndex],...,internalArray[startIndex + numElements - 1]}.                
            </javadoc>
            <declaration name="ExpansionMode" type="enum" line="110"/>
            <javadoc line="110">
                Specification of expansion algorithm.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <scope line="114"/>
            <javadoc line="121">
                Creates an instance with default properties.
                  &lt;ul&gt;
                  &lt;li&gt;{@code initialCapacity = 16}&lt;/li&gt;
                  &lt;li&gt;{@code expansionMode = MULTIPLICATIVE}&lt;/li&gt;
                  &lt;li&gt;{@code expansionFactor = 2.0}&lt;/li&gt;
                  &lt;li&gt;{@code contractionCriterion = 2.5}&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="130"/>
            <javadoc line="133">
                Creates an instance with the specified initial capacity.
                  Other properties take default values:
                  &lt;ul&gt;
                  &lt;li&gt;{@code expansionMode = MULTIPLICATIVE}&lt;/li&gt;
                  &lt;li&gt;{@code expansionFactor = 2.0}&lt;/li&gt;
                  &lt;li&gt;{@code contractionCriterion = 2.5}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    initialCapacity Initial size of the internal storage array.                    
                </param>
                <throws>
                    MathIllegalArgumentException if {@code initialCapacity <= 0}.                    
                </throws>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="144">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="147">
                Creates an instance from an existing {@code double[]} with the
                  initial capacity and numElements corresponding to the size of
                  the supplied {@code double[]} array.
                  If the supplied array is null, a new empty array with the default
                  initial capacity will be created.
                  The input array is copied, not referenced.
                  Other properties take default values:
                  &lt;ul&gt;
                  &lt;li&gt;{@code initialCapacity = 16}&lt;/li&gt;
                  &lt;li&gt;{@code expansionMode = MULTIPLICATIVE}&lt;/li&gt;
                  &lt;li&gt;{@code expansionFactor = 2.0}&lt;/li&gt;
                  &lt;li&gt;{@code contractionCriterion = 2.5}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    initialArray initial array                    
                </param>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="164">
                <params>
                    <param name="initialArray" type="double[]"/>
                </params>
            </method>
            <javadoc line="167">
                Creates an instance with the specified initial capacity
                  and expansion factor.
                  The remaining properties take default values:
                  &lt;ul&gt;
                  &lt;li&gt;{@code expansionMode = MULTIPLICATIVE}&lt;/li&gt;
                  &lt;li&gt;{@code contractionCriterion = 0.5 + expansionFactor}&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;br/&gt;
                  Throws IllegalArgumentException if the following conditions are
                  not met:
                  &lt;ul&gt;
                  &lt;li&gt;{@code initialCapacity &gt; 0}&lt;/li&gt;
                  &lt;li&gt;{@code expansionFactor &gt; 1}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    initialCapacity Initial size of the internal storage array.                    
                </param>
                <param>
                    expansionFactor The array will be expanded based on this
                      parameter.                    
                </param>
                <throws>
                    MathIllegalArgumentException if parameters are not valid.                    
                </throws>
                <deprecated>
                    As of 3.1. Please use{@link #ResizableDoubleArray(int,double)} instead.                    
                </deprecated>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="188">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="expansionFactor" type="float"/>
                </params>
            </method>
            <javadoc line="191">
                Creates an instance with the specified initial capacity
                  and expansion factor.
                  The remaining properties take default values:
                  &lt;ul&gt;
                  &lt;li&gt;{@code expansionMode = MULTIPLICATIVE}&lt;/li&gt;
                  &lt;li&gt;{@code contractionCriterion = 0.5 + expansionFactor}&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;br/&gt;
                  Throws IllegalArgumentException if the following conditions are
                  not met:
                  &lt;ul&gt;
                  &lt;li&gt;{@code initialCapacity &gt; 0}&lt;/li&gt;
                  &lt;li&gt;{@code expansionFactor &gt; 1}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    initialCapacity Initial size of the internal storage array.                    
                </param>
                <param>
                    expansionFactor The array will be expanded based on this
                      parameter.                    
                </param>
                <throws>
                    MathIllegalArgumentException if parameters are not valid.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="212">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="expansionFactor" type="double"/>
                </params>
            </method>
            <javadoc line="215">
                Creates an instance with the specified initialCapacity,
                  expansionFactor, and contractionCriterion.
                  The expansion mode will default to {@code MULTIPLICATIVE}.
                  &lt;br/&gt;
                  Throws IllegalArgumentException if the following conditions are
                  not met:
                  &lt;ul&gt;
                  &lt;li&gt;{@code initialCapacity &gt; 0}&lt;/li&gt;
                  &lt;li&gt;{@code expansionFactor &gt; 1}&lt;/li&gt;
                  &lt;li&gt;{@code contractionCriterion &gt;= expansionFactor}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    initialCapacity Initial size of the internal storage array..                    
                </param>
                <param>
                    expansionFactor The array will be expanded based on this
                      parameter.                    
                </param>
                <param>
                    contractionCriteria Contraction criteria.                    
                </param>
                <throws>
                    MathIllegalArgumentException if parameters are not valid.                    
                </throws>
                <deprecated>
                    As of 3.1. Please use{@link #ResizableDoubleArray(int,double,double)} instead.                    
                </deprecated>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="234">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="expansionFactor" type="float"/>
                    <param name="contractionCriteria" type="float"/>
                </params>
            </method>
            <javadoc line="237">
                Creates an instance with the specified initial capacity,
                  expansion factor, and contraction criteria.
                  The expansion mode will default to {@code MULTIPLICATIVE}.
                  &lt;br/&gt;
                  Throws IllegalArgumentException if the following conditions are
                  not met:
                  &lt;ul&gt;
                  &lt;li&gt;{@code initialCapacity &gt; 0}&lt;/li&gt;
                  &lt;li&gt;{@code expansionFactor &gt; 1}&lt;/li&gt;
                  &lt;li&gt;{@code contractionCriterion &gt;= expansionFactor}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    initialCapacity Initial size of the internal storage array..                    
                </param>
                <param>
                    expansionFactor The array will be expanded based on this
                      parameter.                    
                </param>
                <param>
                    contractionCriterion Contraction criterion.                    
                </param>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="256">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="expansionFactor" type="double"/>
                    <param name="contractionCriterion" type="double"/>
                </params>
            </method>
            <javadoc line="259">
                &lt;p&gt;
                  Create a ResizableArray with the specified properties.&lt;/p&gt;
                  &lt;p&gt;
                  Throws IllegalArgumentException if the following conditions are
                  not met:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;initialCapacity &gt; 0&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;expansionFactor &gt; 1&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;contractionFactor &gt;= expansionFactor&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;expansionMode in {MULTIPLICATIVE_MODE, ADDITIVE_MODE}&lt;/code&gt;
                  &lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    initialCapacity the initial size of the internal storage array                    
                </param>
                <param>
                    expansionFactor the array will be expanded based on this
                      parameter                    
                </param>
                <param>
                    contractionCriteria the contraction Criteria                    
                </param>
                <param>
                    expansionMode  the expansion mode                    
                </param>
                <throws>
                    MathIllegalArgumentException if parameters are not valid                    
                </throws>
                <deprecated>
                    As of 3.1. Please use{@link #ResizableDoubleArray(int,double,double,ExpansionMode,double[])}instead.                    
                </deprecated>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="280">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="expansionFactor" type="float"/>
                    <param name="contractionCriteria" type="float"/>
                    <param name="expansionMode" type="int"/>
                </params>
            </method>
            <javadoc line="284">
                Creates an instance with the specified properties.
                  &lt;br/&gt;
                  Throws MathIllegalArgumentException if the following conditions are
                  not met:
                  &lt;ul&gt;
                  &lt;li&gt;{@code initialCapacity &gt; 0}&lt;/li&gt;
                  &lt;li&gt;{@code expansionFactor &gt; 1}&lt;/li&gt;
                  &lt;li&gt;{@code contractionCriterion &gt;= expansionFactor}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    initialCapacity Initial size of the internal storage array.                    
                </param>
                <param>
                    expansionFactor The array will be expanded based on this
                      parameter.                    
                </param>
                <param>
                    contractionCriterion Contraction criteria.                    
                </param>
                <param>
                    expansionMode Expansion mode.                    
                </param>
                <param>
                    data Initial contents of the array.                    
                </param>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid.                    
                </throws>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="302">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="expansionFactor" type="double"/>
                    <param name="contractionCriterion" type="double"/>
                    <param name="expansionMode" type="ExpansionMode"/>
                    <param name="data" type="double"/>
                </params>
                <scope line="303"/>
                <scope line="313"/>
            </method>
            <javadoc line="317">
                Copy constructor.  Creates a new ResizableDoubleArray that is a deep,
                  fresh copy of the original. Needs to acquire synchronization lock
                  on original.  Original may not be null; otherwise a {@link NullArgumentException}is thrown.                
                <param>
                    original array to copy                    
                </param>
                <exception>
                    NullArgumentException if original is null                    
                </exception>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="ResizableDoubleArray" type="constructor" line="325">
                <params>
                    <param name="original" type="ResizableDoubleArray"/>
                </params>
            </method>
            <javadoc line="329">
                Adds an element to the end of this expandable array.                
                <param>
                    value Value to be added to end of array.                    
                </param>
            </javadoc>
            <method name="addElement" type="void" line="333">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="334"/>
            </method>
            <javadoc line="339">
                Adds several element to the end of this expandable array.                
                <param>
                    values Values to be added to end of array.                    
                </param>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="addElements" type="void" line="344">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <declaration name="tempArray" type="double[]" line="345"/>
            </method>
            <javadoc line="352">
                &lt;p&gt;
                  Adds an element to the end of the array and removes the first
                  element in the array.  Returns the discarded first element.
                  The effect is similar to a push operation in a FIFO queue.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Example: If the array contains the elements 1, 2, 3, 4 (in that order)
                  and addElementRolling(5) is invoked, the result is an array containing
                  the entries 2, 3, 4, 5 and the value returned is 1.
                  &lt;/p&gt;                
                <param>
                    value Value to be added to the array.                    
                </param>
                <return>
                    the value which has been discarded or "pushed" out of the array
                      by this rolling insert.                    
                </return>
            </javadoc>
            <method name="addElementRolling" type="double" line="367">
                <params>
                    <param name="value" type="double"/>
                </params>
                <declaration name="discarded" type="double" line="368"/>
                <scope line="369"/>
                <scope line="374"/>
            </method>
            <javadoc line="379">
                Substitutes &lt;code&gt;value&lt;/code&gt; for the most recently added value.
                  Returns the value that has been replaced. If the array is empty (i.e.
                  if {@link #numElements} is zero), an IllegalStateException is thrown.                
                <param>
                    value New value to substitute for the most recently added value                    
                </param>
                <return>
                    the value that has been replaced in the array.                    
                </return>
                <throws>
                    MathIllegalStateException if the array is empty                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="substituteMostRecentElement" type="double" line="388">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="389"/>
                <declaration name="substIndex" type="int" line="392"/>
                <declaration name="discarded" type="double" line="393"/>
            </method>
            <javadoc line="397">
                Checks the expansion factor and the contraction criterion and throws an
                  IllegalArgumentException if the contractionCriteria is less than the
                  expansionCriteria                
                <param>
                    expansion factor to be checked                    
                </param>
                <param>
                    contraction criteria to be checked                    
                </param>
                <throws>
                    MathIllegalArgumentException if the contractionCriteria is less than
                      the expansionCriteria.                    
                </throws>
                <deprecated>
                    As of 3.1. Please use{@link #checkContractExpand(double,double)} instead.                    
                </deprecated>
            </javadoc>
            <method name="checkContractExpand" type="void" line="407">
                <params>
                    <param name="contraction" type="float"/>
                    <param name="expansion" type="float"/>
                </params>
            </method>
            <javadoc line="410">
                Checks the expansion factor and the contraction criterion and raises
                  an exception if the contraction criterion is smaller than the
                  expansion criterion.                
                <param>
                    contraction Criterion to be checked.                    
                </param>
                <param>
                    expansion Factor to be checked.                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code contraction < expansion}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code contraction <= 1}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code expansion <= 1 }.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="checkContractExpand" type="void" line="421">
                <params>
                    <param name="contraction" type="double"/>
                    <param name="expansion" type="double"/>
                </params>
                <scope line="422">
                    <declaration name="e" type="NumberIsTooSmallException" line="423"/>
                </scope>
                <scope line="427">
                    <declaration name="e" type="NumberIsTooSmallException" line="428"/>
                </scope>
                <scope line="432">
                    <declaration name="e" type="NumberIsTooSmallException" line="433"/>
                </scope>
            </method>
            <javadoc line="438">
                Clear the array contents, resetting the number of elements to zero.                
            </javadoc>
            <method name="clear" type="void" line="441"/>
            <javadoc line="445">
                Contracts the storage array to the (size of the element set) + 1 - to
                  avoid a zero length array. This function also resets the startIndex to
                  zero.                
            </javadoc>
            <method name="contract" type="void" line="450">
                <declaration name="tempArray" type="double[]" line="451"/>
            </method>
            <javadoc line="456">
                Discards the &lt;code&gt;i&lt;/code&gt; initial elements of the array.  For example,
                  if the array contains the elements 1,2,3,4, invoking
                  &lt;code&gt;discardFrontElements(2)&lt;/code&gt; will cause the first two elements
                  to be discarded, leaving 3,4 in the array.  Throws illegalArgumentException
                  if i exceeds numElements.                
                <param>
                    i  the number of elements to discard from the front of the array                    
                </param>
                <throws>
                    MathIllegalArgumentException if i is greater than numElements.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="discardFrontElements" type="void" line="466">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="469">
                Discards the &lt;code&gt;i&lt;/code&gt; last elements of the array.  For example,
                  if the array contains the elements 1,2,3,4, invoking
                  &lt;code&gt;discardMostRecentElements(2)&lt;/code&gt; will cause the last two elements
                  to be discarded, leaving 1,2 in the array.  Throws illegalArgumentException
                  if i exceeds numElements.                
                <param>
                    i  the number of elements to discard from the end of the array                    
                </param>
                <throws>
                    MathIllegalArgumentException if i is greater than numElements.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="discardMostRecentElements" type="void" line="479">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="482">
                Discards the &lt;code&gt;i&lt;/code&gt; first or last elements of the array,
                  depending on the value of &lt;code&gt;front&lt;/code&gt;.
                  For example, if the array contains the elements 1,2,3,4, invoking
                  &lt;code&gt;discardExtremeElements(2,false)&lt;/code&gt; will cause the last two elements
                  to be discarded, leaving 1,2 in the array.
                  For example, if the array contains the elements 1,2,3,4, invoking
                  &lt;code&gt;discardExtremeElements(2,true)&lt;/code&gt; will cause the first two elements
                  to be discarded, leaving 3,4 in the array.
                  Throws illegalArgumentException
                  if i exceeds numElements.                
                <param>
                    i  the number of elements to discard from the front/end of the array                    
                </param>
                <param>
                    front true if elements are to be discarded from the front
                      of the array, false if elements are to be discarded from the end
                      of the array                    
                </param>
                <throws>
                    MathIllegalArgumentException if i is greater than numElements.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="discardExtremeElements" type="void" line="500">
                <params>
                    <param name="i" type="int"/>
                    <param name="front" type="boolean"/>
                </params>
                <scope line="501"/>
                <scope line="504"/>
                <scope line="507">
                    <scope line="509"/>
                </scope>
                <scope line="513"/>
            </method>
            <javadoc line="517">
                Expands the internal storage array using the expansion factor.
                  &lt;p&gt;
                  if &lt;code&gt;expansionMode&lt;/code&gt; is set to MULTIPLICATIVE_MODE,
                  the new array size will be &lt;code&gt;internalArray.length  expansionFactor.&lt;/code&gt;
                  If &lt;code&gt;expansionMode&lt;/code&gt; is set to ADDITIVE_MODE,  the length
                  after expansion will be &lt;code&gt;internalArray.length + expansionFactor&lt;/code&gt;
                  &lt;/p&gt;                
            </javadoc>
            <method name="expand" type="void" line="526">
                <declaration name="newSize" type="int" line="527"/>
                <scope line="528"/>
                <scope line="531"/>
                <declaration name="tempArray" type="double[]" line="534"/>
            </method>
            <javadoc line="538">
                Expands the internal storage array to the specified size.                
                <param>
                    size Size of the new internal storage array.                    
                </param>
            </javadoc>
            <method name="expandTo" type="void" line="542">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="tempArray" type="double[]" line="543"/>
            </method>
            <javadoc line="547">
                The contraction criteria defines when the internal array will contract
                  to store only the number of elements in the element array.
                  If  the &lt;code&gt;expansionMode&lt;/code&gt; is &lt;code&gt;MULTIPLICATIVE_MODE&lt;/code&gt;,
                  contraction is triggered when the ratio between storage array length
                  and &lt;code&gt;numElements&lt;/code&gt; exceeds &lt;code&gt;contractionFactor&lt;/code&gt;.
                  If the &lt;code&gt;expansionMode&lt;/code&gt; is &lt;code&gt;ADDITIVE_MODE&lt;/code&gt;, the
                  number of excess storage locations is compared to
                  &lt;code&gt;contractionFactor.&lt;/code&gt;                
                <return>
                    the contraction criteria used to reclaim memory.                    
                </return>
                <deprecated>
                    As of 3.1. Please use {@link #getContractionCriterion()}instead.                    
                </deprecated>
            </javadoc>
            <method name="getContractionCriteria" type="float" line="559"/>
            <javadoc line="562">
                The contraction criterion defines when the internal array will contract
                  to store only the number of elements in the element array.
                  If  the &lt;code&gt;expansionMode&lt;/code&gt; is &lt;code&gt;MULTIPLICATIVE_MODE&lt;/code&gt;,
                  contraction is triggered when the ratio between storage array length
                  and &lt;code&gt;numElements&lt;/code&gt; exceeds &lt;code&gt;contractionFactor&lt;/code&gt;.
                  If the &lt;code&gt;expansionMode&lt;/code&gt; is &lt;code&gt;ADDITIVE_MODE&lt;/code&gt;, the
                  number of excess storage locations is compared to
                  &lt;code&gt;contractionFactor.&lt;/code&gt;                
                <return>
                    the contraction criterion used to reclaim memory.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getContractionCriterion" type="double" line="574"/>
            <javadoc line="577">
                Returns the element at the specified index                
                <param>
                    index index to fetch a value from                    
                </param>
                <return>
                    value stored at the specified index                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>index</code> is less than
                      zero or is greater than <code>getNumElements() - 1</code>.                    
                </throws>
            </javadoc>
            <method name="getElement" type="double" line="584">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="585"/>
                <scope line="588"/>
                <scope line="591"/>
            </method>
            <javadoc line="595">
                Returns a double array containing the elements of this
                  &lt;code&gt;ResizableArray&lt;/code&gt;.  This method returns a copy, not a
                  reference to the underlying array, so that changes made to the returned
                  array have no effect on this &lt;code&gt;ResizableArray.&lt;/code&gt;                
                <return>
                    the double array.                    
                </return>
            </javadoc>
            <method name="getElements" type="double[]" line="602">
                <declaration name="elementArray" type="double[]" line="603"/>
            </method>
            <javadoc line="607">
                The expansion factor controls the size of a new array when an array
                  needs to be expanded.  The &lt;code&gt;expansionMode&lt;/code&gt;
                  determines whether the size of the array is multiplied by the
                  &lt;code&gt;expansionFactor&lt;/code&gt; (MULTIPLICATIVE_MODE) or if
                  the expansion is additive (ADDITIVE_MODE -- &lt;code&gt;expansionFactor&lt;/code&gt;
                  storage locations added).  The default &lt;code&gt;expansionMode&lt;/code&gt; is
                  MULTIPLICATIVE_MODE and the default &lt;code&gt;expansionFactor&lt;/code&gt;
                  is 2.0.                
                <return>
                    the expansion factor of this expandable double array                    
                </return>
                <deprecated>
                    As of 3.1. Return type will be changed to "double" in 4.0.                    
                </deprecated>
            </javadoc>
            <method name="getExpansionFactor" type="float" line="619"/>
            <javadoc line="622">
                The expansion mode determines whether the internal storage
                  array grows additively or multiplicatively when it is expanded.                
                <return>
                    the expansion mode.                    
                </return>
                <deprecated>
                    As of 3.1. Return value to be changed to{@link ExpansionMode} in 4.0.                    
                </deprecated>
            </javadoc>
            <method name="getExpansionMode" type="int" line="628"/>
            <javadoc line="638">
                Notice the package scope on this method.   This method is simply here
                  for the JUnit test, it allows us check if the expansion is working
                  properly after a number of expansions.  This is not meant to be a part
                  of the public interface of this class.                
                <return>
                    the length of the internal storage array.                    
                </return>
                <deprecated>
                    As of 3.1. Please use {@link #getCapacity()} instead.                    
                </deprecated>
            </javadoc>
            <method name="getInternalLength" type="int" line="646"/>
            <javadoc line="649">
                Gets the currently allocated size of the internal data structure used
                  for storing elements.
                  This is not to be confused with {@link #getNumElements() the number of
                  elements actually stored}.                
                <return>
                    the length of the internal array.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getCapacity" type="int" line="657"/>
            <javadoc line="660">
                Returns the number of elements currently in the array.  Please note
                  that this is different from the length of the internal storage array.                
                <return>
                    the number of elements.                    
                </return>
            </javadoc>
            <method name="getNumElements" type="int" line="665"/>
            <javadoc line="668">
                Returns the internal storage array.  Note that this method returns
                  a reference to the internal storage array, not a copy, and to correctly
                  address elements of the array, the &lt;code&gt;startIndex&lt;/code&gt; is
                  required (available via the {@link #start} method).  This method should
                  only be used in cases where copying the internal array is not practical.
                  The {@link #getElements} method should be used in all other cases.                
                <return>
                    the internal storage array used by this object                    
                </return>
                <since>
                    2.0                    
                </since>
                <deprecated>
                    As of 3.1.                    
                </deprecated>
            </javadoc>
            <method name="getInternalValues" type="double[]" line="679"/>
            <javadoc line="682">
                Provides &lt;em&gt;direct&lt;/em&gt; access to the internal storage array.
                  Please note that this method returns a reference to this object&apos;s
                  storage array, not a copy.
                  &lt;br/&gt;
                  To correctly address elements of the array, the &quot;start index&quot; is
                  required (available via the {@link #getStartIndex() getStartIndex}method.
                  &lt;br/&gt;
                  This method should only be used to avoid copying the internal array.
                  The returned value &lt;em&gt;must&lt;/em&gt; be used for reading only; other
                  uses could lead to this object becoming inconsistent.
                  &lt;br/&gt;
                  The {@link #getElements} method has no such limitation since it
                  returns a copy of this array&apos;s addressable elements.                
                <return>
                    the internal storage array used by this object.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getArrayRef" type="double[]" line="699"/>
            <javadoc line="702">
                Returns the &quot;start index&quot; of the internal array.
                  This index is the position of the first addressable element in the
                  internal storage array.
                  The addressable elements in the array are at indices contained in
                  the interval [{@link #getStartIndex()},{@link #getStartIndex()} + {@link #getNumElements()} - 1].                
                <return>
                    the start index.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getStartIndex" type="int" line="711"/>
            <javadoc line="714">
                Sets the contraction criteria.                
                <param>
                    contractionCriteria contraction criteria                    
                </param>
                <throws>
                    MathIllegalArgumentException if the contractionCriteria is less than
                      the expansionCriteria.                    
                </throws>
                <deprecated>
                    As of 3.1 (to be removed in 4.0 as field will become "final").                    
                </deprecated>
            </javadoc>
            <method name="setContractionCriteria" type="void" line="721">
                <params>
                    <param name="contractionCriteria" type="float"/>
                </params>
                <scope line="723"/>
            </method>
            <javadoc line="727">
                Performs an operation on the addressable elements of the array.                
                <param>
                    f Function to be applied on this array.                    
                </param>
                <return>
                    the result.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="compute" type="double" line="733">
                <params>
                    <param name="f" type="MathArrays.Function"/>
                </params>
                <declaration name="array" type="double[]" line="734"/>
                <declaration name="start" type="int" line="735"/>
                <declaration name="num" type="int" line="736"/>
                <scope line="737"/>
            </method>
            <javadoc line="744">
                Sets the element at the specified index.  If the specified index is greater than
                  &lt;code&gt;getNumElements() - 1&lt;/code&gt;, the &lt;code&gt;numElements&lt;/code&gt; property
                  is increased to &lt;code&gt;index +1&lt;/code&gt; and additional storage is allocated
                  (if necessary) for the new element and all  (uninitialized) elements
                  between the new element and the previous end of the array).                
                <param>
                    index index to store a value in                    
                </param>
                <param>
                    value value to store at the specified index                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code index < 0}.                    
                </throws>
            </javadoc>
            <method name="setElement" type="void" line="754">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="755"/>
                <scope line="758"/>
                <scope line="761"/>
            </method>
            <javadoc line="766">
                Sets the expansionFactor.  Throws IllegalArgumentException if the
                  the following conditions are not met:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;expansionFactor &gt; 1&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;contractionFactor &gt;= expansionFactor&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    expansionFactor the new expansion factor value.                    
                </param>
                <throws>
                    MathIllegalArgumentException if expansionFactor is <= 1 or greater
                      than contractionFactor                    
                </throws>
                <deprecated>
                    As of 3.1 (to be removed in 4.0 as field will become "final").                    
                </deprecated>
            </javadoc>
            <method name="setExpansionFactor" type="void" line="778">
                <params>
                    <param name="expansionFactor" type="float"/>
                </params>
                <scope line="780"/>
            </method>
            <javadoc line="784">
                Sets the &lt;code&gt;expansionMode&lt;/code&gt;. The specified value must be one of
                  ADDITIVE_MODE, MULTIPLICATIVE_MODE.                
                <param>
                    expansionMode The expansionMode to set.                    
                </param>
                <throws>
                    MathIllegalArgumentException if the specified mode value is not valid.                    
                </throws>
                <deprecated>
                    As of 3.1. Please use {@link #setExpansionMode(ExpansionMode)} instead.                    
                </deprecated>
            </javadoc>
            <method name="setExpansionMode" type="void" line="791">
                <params>
                    <param name="expansionMode" type="int"/>
                </params>
                <scope line="792"/>
                <scope line="795">
                    <scope line="796"/>
                    <scope line="799"/>
                </scope>
            </method>
            <javadoc line="804">
                Sets the {@link ExpansionMode expansion mode}.                
                <param>
                    expansionMode Expansion mode to use for resizing the array.                    
                </param>
                <deprecated>
                    As of 3.1 (to be removed in 4.0 as field will become "final").                    
                </deprecated>
            </javadoc>
            <method name="setExpansionMode" type="void" line="809">
                <params>
                    <param name="expansionMode" type="ExpansionMode"/>
                </params>
            </method>
            <javadoc line="812">
                Sets the initial capacity.  Should only be invoked by constructors.                
                <param>
                    initialCapacity of the array                    
                </param>
                <throws>
                    MathIllegalArgumentException if <code>initialCapacity</code> is not
                      positive.                    
                </throws>
                <deprecated>
                    As of 3.1, this is a no-op.                    
                </deprecated>
            </javadoc>
            <method name="setInitialCapacity" type="void" line="819">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="821">
                This function allows you to control the number of elements contained
                  in this array, and can be used to &quot;throw out&quot; the last n values in an
                  array. This function will also expand the internal array as needed.                
                <param>
                    i a new number of elements                    
                </param>
                <throws>
                    MathIllegalArgumentException if <code>i</code> is negative.                    
                </throws>
            </javadoc>
            <method name="setNumElements" type="void" line="828">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="829"/>
                <declaration name="newSize" type="int" line="832"/>
                <scope line="833"/>
            </method>
            <javadoc line="838">
                Returns true if the internal storage array has too many unused
                  storage positions.                
                <return>
                    true if array satisfies the contraction criteria                    
                </return>
            </javadoc>
            <method name="shouldContract" type="boolean" line="843">
                <scope line="844"/>
                <scope line="847"/>
            </method>
            <javadoc line="851">
                Returns the starting index of the internal array.  The starting index is
                  the position of the first addressable element in the internal storage
                  array.  The addressable elements in the array are &lt;code&gt;
                  internalArray[startIndex],...,internalArray[startIndex + numElements -1]
                  &lt;/code&gt;                
                <return>
                    the starting index.                    
                </return>
                <deprecated>
                    As of 3.1.                    
                </deprecated>
            </javadoc>
            <method name="start" type="int" line="860"/>
            <javadoc line="863">
                &lt;p&gt;Copies source to dest, copying the underlying data, so dest is
                  a new, independent copy of source.  Does not contract before
                  the copy.&lt;/p&gt;
                  &lt;p&gt;Obtains synchronization locks on both source and dest
                  (in that order) before performing the copy.&lt;/p&gt;
                  &lt;p&gt;Neither source nor dest may be null; otherwise a {@link NullArgumentException}is thrown&lt;/p&gt;                
                <param>
                    source ResizableDoubleArray to copy                    
                </param>
                <param>
                    dest ResizableArray to replace with a copy of the source array                    
                </param>
                <exception>
                    NullArgumentException if either source or dest is null                    
                </exception>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="copy" type="void" line="875">
                <params>
                    <param name="source" type="ResizableDoubleArray"/>
                    <param name="dest" type="ResizableDoubleArray"/>
                </params>
                <scope line="878">
                    <scope line="879"/>
                </scope>
            </method>
            <javadoc line="890">
                Returns a copy of the ResizableDoubleArray.  Does not contract before
                  the copy, so the returned object is an exact copy of this.                
                <return>
                    a new ResizableDoubleArray with the same data and configuration
                      properties as this                    
                </return>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="copy" type="ResizableDoubleArray" line="897">
                <declaration name="result" type="ResizableDoubleArray" line="898"/>
            </method>
            <javadoc line="902">
                Returns true iff object is a ResizableDoubleArray with the same properties
                  as this and an identical internal storage array.                
                <param>
                    object object to be compared for equality with this                    
                </param>
                <return>
                    true iff object is a ResizableDoubleArray with the same data and
                      properties as this                    
                </return>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="910">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="911"/>
                <scope line="914"/>
                <scope line="917">
                    <scope line="918">
                        <declaration name="result" type="boolean" line="919"/>
                        <declaration name="other" type="ResizableDoubleArray" line="920"/>
                        <scope line="926"/>
                        <scope line="929"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="935">
                Returns a hash code consistent with equals.                
                <return>
                    the hash code representing this {@code ResizableDoubleArray}.                    
                </return>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="940">
                <declaration name="hashData" type="int[]" line="941"/>
            </method>
        </class>
    </source>