<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="ParetoDistribution" line="27">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="27">
                Implementation of the Pareto distribution.
                  &lt;p&gt;
                  &lt;strong&gt;Parameters:&lt;/strong&gt;
                  The probability distribution function of {@code X} is given by (for {@code x &gt;= k}):
                  &lt;pre&gt;
                  α  k^α / x^(α + 1)
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@code k} is the &lt;em&gt;scale&lt;/em&gt; parameter: this is the minimum possible value of {@code X},&lt;/li&gt;
                  &lt;li&gt;{@code α} is the &lt;em&gt;shape&lt;/em&gt; parameter: this is the Pareto index&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Pareto_distribution&quot;&gt;
                      Pareto distribution (Wikipedia)&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/ParetoDistribution.html&quot;&gt;
                      Pareto distribution (MathWorld)&lt;/a&gt;                    
                </see>
                <version>
                    $Id: ParetoDistribution.java 1533974 2013-10-20 20:42:41Z psteitz $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="52"/>
            <javadoc line="52">
                Default inverse cumulative probability accuracy.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <javadoc line="55">
                Serializable version identifier.                
            </javadoc>
            <declaration name="scale" type="double" line="58"/>
            <javadoc line="58">
                The scale parameter of this distribution.                
            </javadoc>
            <declaration name="shape" type="double" line="61"/>
            <javadoc line="61">
                The shape parameter of this distribution.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="64"/>
            <javadoc line="64">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <javadoc line="67">
                Create a Pareto distribution with a scale of {@code 1} and a shape of {@code 1}.                
            </javadoc>
            <method name="ParetoDistribution" type="constructor" line="70"/>
            <javadoc line="74">
                Create a Pareto distribution using the specified scale and shape.                
                <param>
                    scale the scale parameter of this distribution                    
                </param>
                <param>
                    shape the shape parameter of this distribution                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code scale &lt;= 0} or {@code shape &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="ParetoDistribution" type="constructor" line="82">
                <params>
                    <param name="scale" type="double"/>
                    <param name="shape" type="double"/>
                </params>
            </method>
            <javadoc line="86">
                Create a Pareto distribution using the specified scale, shape and
                  inverse cumulative distribution accuracy.                
                <param>
                    scale the scale parameter of this distribution                    
                </param>
                <param>
                    shape the shape parameter of this distribution                    
                </param>
                <param>
                    inverseCumAccuracy Inverse cumulative probability accuracy.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code scale &lt;= 0} or {@code shape &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="ParetoDistribution" type="constructor" line="96">
                <params>
                    <param name="scale" type="double"/>
                    <param name="shape" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="100">
                Creates a log-normal distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    scale Scale parameter of this distribution.                    
                </param>
                <param>
                    shape Shape parameter of this distribution.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code scale &lt;= 0} or {@code shape &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="ParetoDistribution" type="constructor" line="109">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="scale" type="double"/>
                    <param name="shape" type="double"/>
                </params>
            </method>
            <javadoc line="113">
                Creates a log-normal distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    scale Scale parameter of this distribution.                    
                </param>
                <param>
                    shape Shape parameter of this distribution.                    
                </param>
                <param>
                    inverseCumAccuracy Inverse cumulative probability accuracy.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code scale &lt;= 0} or {@code shape &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="ParetoDistribution" type="constructor" line="126">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="scale" type="double"/>
                    <param name="shape" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
                <scope line="129"/>
                <scope line="133"/>
            </method>
            <javadoc line="142">
                Returns the scale parameter of this distribution.                
                <return>
                    the scale parameter                    
                </return>
            </javadoc>
            <method name="getScale" type="double" line="147"/>
            <javadoc line="151">
                Returns the shape parameter of this distribution.                
                <return>
                    the shape parameter                    
                </return>
            </javadoc>
            <method name="getShape" type="double" line="156"/>
            <javadoc line="160">
                {@inheritDoc}&lt;p&gt;
                  For scale {@code k}, and shape {@code α} of this distribution, the PDF
                  is given by
                  &lt;ul&gt;
                  &lt;li&gt;{@code 0} if {@code x &lt; k},&lt;/li&gt;
                  &lt;li&gt;{@code α  k^α / x^(α + 1)} otherwise.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="density" type="double" line="170">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="171"/>
            </method>
            <javadoc line="177">
                {@inheritDoc}See documentation of {@link #density(double)} for computation details.                
            </javadoc>
            <method name="logDensity" type="double" line="182">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="183"/>
            </method>
            <javadoc line="189">
                {@inheritDoc}&lt;p&gt;
                  For scale {@code k}, and shape {@code α} of this distribution, the CDF is given by
                  &lt;ul&gt;
                  &lt;li&gt;{@code 0} if {@code x &lt; k},&lt;/li&gt;
                  &lt;li&gt;{@code 1 - (k / x)^α} otherwise.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="198">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="199"/>
            </method>
            <javadoc line="205">
                {@inheritDoc}                
                <deprecated>
                    See {@link RealDistribution#cumulativeProbability(double,double)}                    
                </deprecated>
            </javadoc>
            <method name="cumulativeProbability" type="double" line="213">
                <params>
                    <param name="x0" type="double"/>
                    <param name="x1" type="double"/>
                </params>
            </method>
            <javadoc line="217">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="219"/>
            <javadoc line="223">
                {@inheritDoc}&lt;p&gt;
                  For scale {@code k} and shape {@code α}, the mean is given by
                  &lt;ul&gt;
                  &lt;li&gt;{@code ∞} if {@code α &lt;= 1},&lt;/li&gt;
                  &lt;li&gt;{@code α  k / (α - 1)} otherwise.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="getNumericalMean" type="double" line="232">
                <scope line="233"/>
            </method>
            <javadoc line="239">
                {@inheritDoc}&lt;p&gt;
                  For scale {@code k} and shape {@code α}, the variance is given by
                  &lt;ul&gt;
                  &lt;li&gt;{@code ∞} if {@code 1 &lt; α &lt;= 2},&lt;/li&gt;
                  &lt;li&gt;{@code k^2  α / ((α - 1)^2  (α - 2))} otherwise.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="248">
                <scope line="249"/>
                <declaration name="s" type="double" line="252"/>
            </method>
            <javadoc line="256">
                {@inheritDoc}&lt;p&gt;
                  The lower bound of the support is equal to the scale parameter {@code k}.                
                <return>
                    lower bound of the support                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="263"/>
            <javadoc line="267">
                {@inheritDoc}&lt;p&gt;
                  The upper bound of the support is always positive infinity no matter the parameters.                
                <return>
                    upper bound of the support (always {@code Double.POSITIVE_INFINITY})                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="274"/>
            <javadoc line="278">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="279"/>
            <javadoc line="283">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="284"/>
            <javadoc line="288">
                {@inheritDoc}&lt;p&gt;
                  The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="295"/>
            <javadoc line="299">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="double" line="301">
                <declaration name="n" type="double" line="302"/>
            </method>
        </class>
    </source>