<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.correlation">
        <import package="org.apache.commons.math3.distribution.TDistribution"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.stat.regression.SimpleRegression"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="PearsonsCorrelation" line="29">
            <javadoc line="29">
                Computes Pearson&apos;s product-moment correlation coefficients for pairs of arrays
                  or columns of a matrix.
                  &lt;p&gt;The constructors that take &lt;code&gt;RealMatrix&lt;/code&gt; or
                  &lt;code&gt;double[][]&lt;/code&gt; arguments generate correlation matrices.  The
                  columns of the input matrices are assumed to represent variable values.
                  Correlations are given by the formula&lt;/p&gt;
                  &lt;p&gt;&lt;code&gt;cor(X, Y) = &amp;Sigma;[(x&lt;sub&gt;i&lt;/sub&gt; - E(X))(y&lt;sub&gt;i&lt;/sub&gt; - E(Y))] / [(n - 1)s(X)s(Y)]&lt;/code&gt;
                  where &lt;code&gt;E(X)&lt;/code&gt; is the mean of &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;E(Y)&lt;/code&gt;
                  is the mean of the &lt;code&gt;Y&lt;/code&gt; values and s(X), s(Y) are standard deviations.&lt;/p&gt;
                  &lt;p&gt;To compute the correlation coefficient for a single pair of arrays, use {@link #PearsonsCorrelation()}to construct an instance with no data and then {@link #correlation(double[],double[])}.
                  Correlation matrices can also be computed directly from an instance with no data using{@link #computeCorrelationMatrix(double[][])}. In order to use {@link #getCorrelationMatrix()},{@link #getCorrelationPValues()},  or {@link #getCorrelationStandardErrors()}; however, one of the
                  constructors supplying data or a covariance matrix must be used to create the instance.&lt;/p&gt;                
                <version>
                    $Id: PearsonsCorrelation.java 1540395 2013-11-09 21:32:06Z psteitz $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="correlationMatrix" type="RealMatrix" line="54"/>
            <javadoc line="54">
                correlation matrix                
            </javadoc>
            <declaration name="nObs" type="int" line="57"/>
            <javadoc line="57">
                number of observations                
            </javadoc>
            <javadoc line="60">
                Create a PearsonsCorrelation instance without data.                
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="63"/>
            <javadoc line="69">
                Create a PearsonsCorrelation from a rectangular array
                  whose columns represent values of variables to be correlated.
                  Throws MathIllegalArgumentException if the input array does not have at least
                  two columns and two rows.  Pairwise correlations are set to NaN if one
                  of the correlates has zero variance.                
                <param>
                    data rectangular array with columns representing variables                    
                </param>
                <throws>
                    MathIllegalArgumentException if the input data array is not
                      rectangular with at least two rows and two columns.                    
                </throws>
                <see>
                    #correlation(double[],double[])                    
                </see>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="82">
                <params>
                    <param name="data" type="double[][]"/>
                </params>
            </method>
            <javadoc line="86">
                Create a PearsonsCorrelation from a RealMatrix whose columns
                  represent variables to be correlated.
                  Throws MathIllegalArgumentException if the matrix does not have at least
                  two columns and two rows.  Pairwise correlations are set to NaN if one
                  of the correlates has zero variance.                
                <param>
                    matrix matrix with columns representing variables to correlate                    
                </param>
                <throws>
                    MathIllegalArgumentException if the matrix does not contain sufficient data                    
                </throws>
                <see>
                    #correlation(double[],double[])                    
                </see>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="98">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="103">
                Create a PearsonsCorrelation from a {@link Covariance}.  The correlation
                  matrix is computed by scaling the Covariance&apos;s covariance matrix.
                  The Covariance instance must have been created from a data matrix with
                  columns representing variable values.                
                <param>
                    covariance Covariance instance                    
                </param>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="111">
                <params>
                    <param name="covariance" type="Covariance"/>
                </params>
                <declaration name="covarianceMatrix" type="RealMatrix" line="112"/>
                <scope line="113"/>
            </method>
            <javadoc line="120">
                Create a PearsonsCorrelation from a covariance matrix. The correlation
                  matrix is computed by scaling the covariance matrix.                
                <param>
                    covarianceMatrix covariance matrix                    
                </param>
                <param>
                    numberOfObservations the number of observations in the dataset used to compute
                      the covariance matrix                    
                </param>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="128">
                <params>
                    <param name="covarianceMatrix" type="RealMatrix"/>
                    <param name="numberOfObservations" type="int"/>
                </params>
            </method>
            <javadoc line="133">
                Returns the correlation matrix.
                  &lt;p&gt;This method will return null if the argumentless constructor was used
                  to create this instance, even if {@link #computeCorrelationMatrix(double[][])}has been called before it is activated.&lt;/p&gt;                
                <return>
                    correlation matrix                    
                </return>
            </javadoc>
            <method name="getCorrelationMatrix" type="RealMatrix" line="142"/>
            <javadoc line="146">
                Returns a matrix of standard errors associated with the estimates
                  in the correlation matrix.&lt;br/&gt;
                  &lt;code&gt;getCorrelationStandardErrors().getEntry(i,j)&lt;/code&gt; is the standard
                  error associated with &lt;code&gt;getCorrelationMatrix.getEntry(i,j)&lt;/code&gt;
                  &lt;p&gt;The formula used to compute the standard error is &lt;br/&gt;
                  &lt;code&gt;SE&lt;sub&gt;r&lt;/sub&gt; = ((1 - r&lt;sup&gt;2&lt;/sup&gt;) / (n - 2))&lt;sup&gt;1/2&lt;/sup&gt;&lt;/code&gt;
                  where &lt;code&gt;r&lt;/code&gt; is the estimated correlation coefficient and
                  &lt;code&gt;n&lt;/code&gt; is the number of observations in the source dataset.&lt;/p&gt;
                  &lt;p&gt;To use this method, one of the constructors that supply an input
                  matrix must have been used to create this instance.&lt;/p&gt;                
                <return>
                    matrix of correlation standard errors                    
                </return>
                <throws>
                    NullPointerException if this instance was created with no data                    
                </throws>
            </javadoc>
            <method name="getCorrelationStandardErrors" type="RealMatrix" line="163">
                <declaration name="nVars" type="int" line="164"/>
                <declaration name="out" type="double[][]" line="165"/>
                <scope line="166">
                    <scope line="167">
                        <declaration name="r" type="double" line="168"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="175">
                Returns a matrix of p-values associated with the (two-sided) null
                  hypothesis that the corresponding correlation coefficient is zero.
                  &lt;p&gt;&lt;code&gt;getCorrelationPValues().getEntry(i,j)&lt;/code&gt; is the probability
                  that a random variable distributed as &lt;code&gt;t&lt;sub&gt;n-2&lt;/sub&gt;&lt;/code&gt; takes
                  a value with absolute value greater than or equal to &lt;br&gt;
                  &lt;code&gt;|r|((n - 2) / (1 - r&lt;sup&gt;2&lt;/sup&gt;))&lt;sup&gt;1/2&lt;/sup&gt;&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;The values in the matrix are sometimes referred to as the
                  &lt;i&gt;significance&lt;/i&gt; of the corresponding correlation coefficients.&lt;/p&gt;
                  &lt;p&gt;To use this method, one of the constructors that supply an input
                  matrix must have been used to create this instance.&lt;/p&gt;                
                <return>
                    matrix of p-values                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.MaxCountExceededExceptionif an error occurs estimating probabilities                    
                </throws>
                <throws>
                    NullPointerException if this instance was created with no data                    
                </throws>
            </javadoc>
            <method name="getCorrelationPValues" type="RealMatrix" line="195">
                <declaration name="tDistribution" type="TDistribution" line="196"/>
                <declaration name="nVars" type="int" line="197"/>
                <declaration name="out" type="double[][]" line="198"/>
                <scope line="199">
                    <scope line="200">
                        <scope line="201"/>
                        <scope line="203">
                            <declaration name="r" type="double" line="204"/>
                            <declaration name="t" type="double" line="205"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="214">
                Computes the correlation matrix for the columns of the
                  input matrix, using {@link #correlation(double[],double[])}.
                  Throws MathIllegalArgumentException if the matrix does not have at least
                  two columns and two rows.  Pairwise correlations are set to NaN if one
                  of the correlates has zero variance.                
                <param>
                    matrix matrix with columns representing variables to correlate                    
                </param>
                <return>
                    correlation matrix                    
                </return>
                <throws>
                    MathIllegalArgumentException if the matrix does not contain sufficient data                    
                </throws>
                <see>
                    #correlation(double[],double[])                    
                </see>
            </javadoc>
            <method name="computeCorrelationMatrix" type="RealMatrix" line="227">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="nVars" type="int" line="229"/>
                <declaration name="outMatrix" type="RealMatrix" line="230"/>
                <scope line="231">
                    <scope line="232">
                        <declaration name="corr" type="double" line="233"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="242">
                Computes the correlation matrix for the columns of the
                  input rectangular array.  The columns of the array represent values
                  of variables to be correlated.
                  Throws MathIllegalArgumentException if the matrix does not have at least
                  two columns and two rows or if the array is not rectangular. Pairwise
                  correlations are set to NaN if one of the correlates has zero variance.                
                <param>
                    data matrix with columns representing variables to correlate                    
                </param>
                <return>
                    correlation matrix                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array does not contain sufficient data                    
                </throws>
                <see>
                    #correlation(double[],double[])                    
                </see>
            </javadoc>
            <method name="computeCorrelationMatrix" type="RealMatrix" line="256">
                <params>
                    <param name="data" type="double[][]"/>
                </params>
            </method>
            <javadoc line="260">
                Computes the Pearson&apos;s product-moment correlation coefficient between two arrays.
                  &lt;p&gt;Throws MathIllegalArgumentException if the arrays do not have the same length
                  or their common length is less than 2.  Returns {@code NaN} if either of the arrays
                  has zero variance (i.e., if one of the arrays does not contain at least two distinct
                  values).&lt;/p&gt;                
                <param>
                    xArray first data array                    
                </param>
                <param>
                    yArray second data array                    
                </param>
                <return>
                    Returns Pearson&apos;s correlation coefficient for the two arrays                    
                </return>
                <throws>
                    DimensionMismatchException if the arrays lengths do not match                    
                </throws>
                <throws>
                    MathIllegalArgumentException if there is insufficient data                    
                </throws>
            </javadoc>
            <method name="correlation" type="double" line="274">
                <params>
                    <param name="xArray" type="double[]"/>
                    <param name="yArray" type="double[]"/>
                </params>
                <declaration name="regression" type="SimpleRegression" line="275"/>
                <scope line="276"/>
                <scope line="278"/>
                <scope line="281">
                    <scope line="282"/>
                </scope>
            </method>
            <javadoc line="289">
                Derives a correlation matrix from a covariance matrix.
                  &lt;p&gt;Uses the formula &lt;br/&gt;
                  &lt;code&gt;r(X,Y) = cov(X,Y)/s(X)s(Y)&lt;/code&gt; where
                  &lt;code&gt;r(&amp;middot,&amp;middot;)&lt;/code&gt; is the correlation coefficient and
                  &lt;code&gt;s(&amp;middot;)&lt;/code&gt; means standard deviation.&lt;/p&gt;                
                <param>
                    covarianceMatrix the covariance matrix                    
                </param>
                <return>
                    correlation matrix                    
                </return>
            </javadoc>
            <method name="covarianceToCorrelation" type="RealMatrix" line="300">
                <params>
                    <param name="covarianceMatrix" type="RealMatrix"/>
                </params>
                <declaration name="nVars" type="int" line="301"/>
                <declaration name="outMatrix" type="RealMatrix" line="302"/>
                <scope line="303">
                    <declaration name="sigma" type="double" line="304"/>
                    <scope line="306">
                        <declaration name="entry" type="double" line="307"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="316">
                Throws MathIllegalArgumentException if the matrix does not have at least
                  two columns and two rows.                
                <param>
                    matrix matrix to check for sufficiency                    
                </param>
                <throws>
                    MathIllegalArgumentException if there is insufficient data                    
                </throws>
            </javadoc>
            <method name="checkSufficientData" type="void" line="323">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="nRows" type="int" line="324"/>
                <declaration name="nCols" type="int" line="325"/>
                <scope line="326"/>
            </method>
        </class>
    </source>