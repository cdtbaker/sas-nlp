<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.correlation">
        <import package="org.apache.commons.math3.distribution.TDistribution"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.stat.regression.SimpleRegression"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="PearsonsCorrelation" line="11">
            <javadoc line="11">
                Computes Pearson&apos;s product-moment correlation coefficients for pairs of arrays
                  or columns of a matrix.
                  &lt;p&gt;The constructors that take &lt;code&gt;RealMatrix&lt;/code&gt; or
                  &lt;code&gt;double[][]&lt;/code&gt; arguments generate correlation matrices.  The
                  columns of the input matrices are assumed to represent variable values.
                  Correlations are given by the formula&lt;/p&gt;
                  &lt;code&gt;cor(X, Y) = &amp;Sigma;[(x&lt;sub&gt;i&lt;/sub&gt; - E(X))(y&lt;sub&gt;i&lt;/sub&gt; - E(Y))] / [(n - 1)s(X)s(Y)]&lt;/code&gt;
                  where &lt;code&gt;E(X)&lt;/code&gt; is the mean of &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;E(Y)&lt;/code&gt;
                  is the mean of the &lt;code&gt;Y&lt;/code&gt; values and s(X), s(Y) are standard deviations.                
                <version>
                    $Id: PearsonsCorrelation.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="correlationMatrix" type="RealMatrix" line="25"/>
            <javadoc line="25">
                correlation matrix                
            </javadoc>
            <declaration name="nObs" type="int" line="29"/>
            <javadoc line="29">
                number of observations                
            </javadoc>
            <javadoc line="33">
                Create a PearsonsCorrelation instance without data                
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="36"/>
            <javadoc line="41">
                Create a PearsonsCorrelation from a rectangular array
                  whose columns represent values of variables to be correlated.                
                <param>
                    data rectangular array with columns representing variables                    
                </param>
                <throws>
                    IllegalArgumentException if the input data array is not
                      rectangular with at least two rows and two columns.                    
                </throws>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="48">
                <params>
                    <param name="data" type="double[][]"/>
                </params>
            </method>
            <javadoc line="51">
                Create a PearsonsCorrelation from a RealMatrix whose columns
                  represent variables to be correlated.                
                <param>
                    matrix matrix with columns representing variables to correlate                    
                </param>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="56">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="61">
                Create a PearsonsCorrelation from a {@link Covariance}.  The correlation
                  matrix is computed by scaling the Covariance&apos;s covariance matrix.
                  The Covariance instance must have been created from a data matrix with
                  columns representing variable values.                
                <param>
                    covariance Covariance instance                    
                </param>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="68">
                <params>
                    <param name="covariance" type="Covariance"/>
                </params>
                <declaration name="covarianceMatrix" type="RealMatrix" line="69"/>
                <scope line="70"/>
            </method>
            <javadoc line="76">
                Create a PearsonsCorrelation from a covariance matrix.  The correlation
                  matrix is computed by scaling the covariance matrix.                
                <param>
                    covarianceMatrix covariance matrix                    
                </param>
                <param>
                    numberOfObservations the number of observations in the dataset used to compute
                      the covariance matrix                    
                </param>
            </javadoc>
            <method name="PearsonsCorrelation" type="constructor" line="83">
                <params>
                    <param name="covarianceMatrix" type="RealMatrix"/>
                    <param name="numberOfObservations" type="int"/>
                </params>
            </method>
            <javadoc line="87">
                Returns the correlation matrix                
                <return>
                    correlation matrix                    
                </return>
            </javadoc>
            <method name="getCorrelationMatrix" type="RealMatrix" line="91"/>
            <javadoc line="94">
                Returns a matrix of standard errors associated with the estimates
                  in the correlation matrix.&lt;br/&gt;
                  &lt;code&gt;getCorrelationStandardErrors().getEntry(i,j)&lt;/code&gt; is the standard
                  error associated with &lt;code&gt;getCorrelationMatrix.getEntry(i,j)&lt;/code&gt;
                  &lt;p&gt;The formula used to compute the standard error is &lt;br/&gt;
                  &lt;code&gt;SE&lt;sub&gt;r&lt;/sub&gt; = ((1 - r&lt;sup&gt;2&lt;/sup&gt;) / (n - 2))&lt;sup&gt;1/2&lt;/sup&gt;&lt;/code&gt;
                  where &lt;code&gt;r&lt;/code&gt; is the estimated correlation coefficient and
                  &lt;code&gt;n&lt;/code&gt; is the number of observations in the source dataset.&lt;/p&gt;                
                <return>
                    matrix of correlation standard errors                    
                </return>
            </javadoc>
            <method name="getCorrelationStandardErrors" type="RealMatrix" line="105">
                <declaration name="nVars" type="int" line="106"/>
                <declaration name="out" type="double[][]" line="107"/>
                <scope line="108">
                    <scope line="109">
                        <declaration name="r" type="double" line="110"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="116">
                Returns a matrix of p-values associated with the (two-sided) null
                  hypothesis that the corresponding correlation coefficient is zero.
                  &lt;p&gt;&lt;code&gt;getCorrelationPValues().getEntry(i,j)&lt;/code&gt; is the probability
                  that a random variable distributed as &lt;code&gt;t&lt;sub&gt;n-2&lt;/sub&gt;&lt;/code&gt; takes
                  a value with absolute value greater than or equal to &lt;br&gt;
                  &lt;code&gt;|r|((n - 2) / (1 - r&lt;sup&gt;2&lt;/sup&gt;))&lt;sup&gt;1/2&lt;/sup&gt;&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;The values in the matrix are sometimes referred to as the
                  &lt;i&gt;significance&lt;/i&gt; of the corresponding correlation coefficients.&lt;/p&gt;                
                <return>
                    matrix of p-values                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.MaxCountExceededExceptionif an error occurs estimating probabilities                    
                </throws>
            </javadoc>
            <method name="getCorrelationPValues" type="RealMatrix" line="128">
                <declaration name="tDistribution" type="TDistribution" line="129"/>
                <declaration name="nVars" type="int" line="130"/>
                <declaration name="out" type="double[][]" line="131"/>
                <scope line="132">
                    <scope line="133">
                        <scope line="134"/>
                        <scope line="137">
                            <declaration name="r" type="double" line="138"/>
                            <declaration name="t" type="double" line="139"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="146">
                Computes the correlation matrix for the columns of the
                  input matrix.                
                <param>
                    matrix matrix with columns representing variables to correlate                    
                </param>
                <return>
                    correlation matrix                    
                </return>
            </javadoc>
            <method name="computeCorrelationMatrix" type="RealMatrix" line="152">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="nVars" type="int" line="153"/>
                <declaration name="outMatrix" type="RealMatrix" line="154"/>
                <scope line="155">
                    <scope line="156">
                        <declaration name="corr" type="double" line="157"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="165">
                Computes the correlation matrix for the columns of the
                  input rectangular array.  The colums of the array represent values
                  of variables to be correlated.                
                <param>
                    data matrix with columns representing variables to correlate                    
                </param>
                <return>
                    correlation matrix                    
                </return>
            </javadoc>
            <method name="computeCorrelationMatrix" type="RealMatrix" line="172">
                <params>
                    <param name="data" type="double[][]"/>
                </params>
            </method>
            <javadoc line="175">
                Computes the Pearson&apos;s product-moment correlation coefficient between the two arrays.
                  &lt;/p&gt;Throws IllegalArgumentException if the arrays do not have the same length
                  or their common length is less than 2&lt;/p&gt;                
                <param>
                    xArray first data array                    
                </param>
                <param>
                    yArray second data array                    
                </param>
                <return>
                    Returns Pearson's correlation coefficient for the two arrays                    
                </return>
                <throws>
                    DimensionMismatchException if the arrays lengths do not match                    
                </throws>
                <throws>
                    MathIllegalArgumentException if there is insufficient data                    
                </throws>
            </javadoc>
            <method name="correlation" type="double" line="185">
                <params>
                    <param name="xArray" type="double[]"/>
                    <param name="yArray" type="double[]"/>
                </params>
                <declaration name="regression" type="SimpleRegression" line="186"/>
                <scope line="187"/>
                <scope line="190"/>
                <scope line="193">
                    <scope line="194"/>
                </scope>
            </method>
            <javadoc line="200">
                Derives a correlation matrix from a covariance matrix.
                  &lt;p&gt;Uses the formula &lt;br/&gt;
                  &lt;code&gt;r(X,Y) = cov(X,Y)/s(X)s(Y)&lt;/code&gt; where
                  &lt;code&gt;r(&amp;middot,&amp;middot;)&lt;/code&gt; is the correlation coefficient and
                  &lt;code&gt;s(&amp;middot;)&lt;/code&gt; means standard deviation.&lt;/p&gt;                
                <param>
                    covarianceMatrix the covariance matrix                    
                </param>
                <return>
                    correlation matrix                    
                </return>
            </javadoc>
            <method name="covarianceToCorrelation" type="RealMatrix" line="209">
                <params>
                    <param name="covarianceMatrix" type="RealMatrix"/>
                </params>
                <declaration name="nVars" type="int" line="210"/>
                <declaration name="outMatrix" type="RealMatrix" line="211"/>
                <scope line="212">
                    <declaration name="sigma" type="double" line="213"/>
                    <scope line="215">
                        <declaration name="entry" type="double" line="216"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="223">
                Throws IllegalArgumentException of the matrix does not have at least
                  two columns and two rows                
                <param>
                    matrix matrix to check for sufficiency                    
                </param>
                <throws>
                    MathIllegalArgumentException if there is insufficient data                    
                </throws>
            </javadoc>
            <method name="checkSufficientData" type="void" line="229">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="nRows" type="int" line="230"/>
                <declaration name="nCols" type="int" line="231"/>
                <scope line="232"/>
            </method>
        </class>
    </source>