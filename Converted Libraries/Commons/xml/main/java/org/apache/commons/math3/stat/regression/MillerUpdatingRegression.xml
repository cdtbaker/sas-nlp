<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.regression">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="MillerUpdatingRegression" line="7">
            <implements interface="UpdatingMultipleLinearRegression"/>
            <javadoc line="7">
                This class is a concrete implementation of the {@link UpdatingMultipleLinearRegression} interface.
                  &lt;p&gt;The algorithm is described in: &lt;pre&gt;
                  Algorithm AS 274: Least Squares Routines to Supplement Those of Gentleman
                  Author(s): Alan J. Miller
                  Source: Journal of the Royal Statistical Society.
                  Series C (Applied Statistics), Vol. 41, No. 2
                  (1992), pp. 458-478
                  Published by: Blackwell Publishing for the Royal Statistical Society
                  Stable URL: http://www.jstor.org/stable/2347583 &lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;This method for multiple regression forms the solution to the OLS problem
                  by updating the QR decomposition as described by Gentleman.&lt;/p&gt;                
                <version>
                    $Id: MillerUpdatingRegression.java 1392358 2012-10-01 14:41:55Z psteitz $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="nvars" type="int" line="23"/>
            <javadoc line="23">
                number of variables in regression                
            </javadoc>
            <declaration name="d" type="double[]" line="27"/>
            <javadoc line="27">
                diagonals of cross products matrix                
            </javadoc>
            <declaration name="rhs" type="double[]" line="31"/>
            <javadoc line="31">
                the elements of the R`Y                
            </javadoc>
            <declaration name="r" type="double[]" line="35"/>
            <javadoc line="35">
                the off diagonal portion of the R matrix                
            </javadoc>
            <declaration name="tol" type="double[]" line="39"/>
            <javadoc line="39">
                the tolerance for each of the variables                
            </javadoc>
            <declaration name="rss" type="double[]" line="43"/>
            <javadoc line="43">
                residual sum of squares for all nested regressions                
            </javadoc>
            <declaration name="vorder" type="int[]" line="47"/>
            <javadoc line="47">
                order of the regressors                
            </javadoc>
            <declaration name="work_tolset" type="double[]" line="51"/>
            <javadoc line="51">
                scratch space for tolerance calc                
            </javadoc>
            <declaration name="nobs" type="long" line="55"/>
            <javadoc line="55">
                number of observations entered                
            </javadoc>
            <declaration name="sserr" type="double" line="59"/>
            <javadoc line="59">
                sum of squared errors of largest regression                
            </javadoc>
            <declaration name="rss_set" type="boolean" line="63"/>
            <javadoc line="63">
                has rss been called?                
            </javadoc>
            <declaration name="tol_set" type="boolean" line="67"/>
            <javadoc line="67">
                has the tolerance setting method been called                
            </javadoc>
            <declaration name="lindep" type="boolean[]" line="71"/>
            <javadoc line="71">
                flags for variables with linear dependency problems                
            </javadoc>
            <declaration name="x_sing" type="double[]" line="75"/>
            <javadoc line="75">
                singular x values                
            </javadoc>
            <declaration name="work_sing" type="double[]" line="79"/>
            <javadoc line="79">
                workspace for singularity method                
            </javadoc>
            <declaration name="sumy" type="double" line="83"/>
            <javadoc line="83">
                summation of Y variable                
            </javadoc>
            <declaration name="sumsqy" type="double" line="87"/>
            <javadoc line="87">
                summation of squared Y values                
            </javadoc>
            <declaration name="hasIntercept" type="boolean" line="91"/>
            <javadoc line="91">
                boolean flag whether a regression constant is added                
            </javadoc>
            <declaration name="epsilon" type="double" line="95"/>
            <javadoc line="95">
                zero tolerance                
            </javadoc>
            <javadoc line="99">
                Set the default constructor to private access
                  to prevent inadvertent instantiation                
            </javadoc>
            <method name="MillerUpdatingRegression" type="constructor" line="103"/>
            <javadoc line="106">
                This is the augmented constructor for the MillerUpdatingRegression class.                
                <param>
                    numberOfVariables number of regressors to expect, not including constant                    
                </param>
                <param>
                    includeConstant include a constant automatically                    
                </param>
                <param>
                    errorTolerance  zero tolerance, how machine zero is determined                    
                </param>
                <throws>
                    ModelSpecificationException if {@code numberOfVariables is less than 1}                    
                </throws>
            </javadoc>
            <method name="MillerUpdatingRegression" type="constructor" line="113">
                <params>
                    <param name="numberOfVariables" type="int"/>
                    <param name="includeConstant" type="boolean"/>
                    <param name="errorTolerance" type="double"/>
                </params>
                <scope line="114"/>
                <scope line="117"/>
                <scope line="120"/>
                <scope line="135"/>
                <scope line="138"/>
                <scope line="141"/>
            </method>
            <javadoc line="145">
                Primary constructor for the MillerUpdatingRegression.                
                <param>
                    numberOfVariables maximum number of potential regressors                    
                </param>
                <param>
                    includeConstant include a constant automatically                    
                </param>
                <throws>
                    ModelSpecificationException if {@code numberOfVariables is less than 1}                    
                </throws>
            </javadoc>
            <method name="MillerUpdatingRegression" type="constructor" line="151">
                <params>
                    <param name="numberOfVariables" type="int"/>
                    <param name="includeConstant" type="boolean"/>
                </params>
            </method>
            <javadoc line="154">
                A getter method which determines whether a constant is included.                
                <return>
                    true regression has an intercept, false no intercept                    
                </return>
            </javadoc>
            <method name="hasIntercept" type="boolean" line="158"/>
            <javadoc line="161">
                Gets the number of observations added to the regression model.                
                <return>
                    number of observations                    
                </return>
            </javadoc>
            <method name="getN" type="long" line="165"/>
            <javadoc line="168">
                Adds an observation to the regression model.                
                <param>
                    x the array with regressor values                    
                </param>
                <param>
                    y  the value of dependent variable given these regressors                    
                </param>
                <exception>
                    ModelSpecificationException if the length of {@code x} does not equal
                      the number of independent variables in the model                    
                </exception>
            </javadoc>
            <method name="addObservation" type="void" line="175">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="176"/>
                <scope line="179"/>
                <scope line="182">
                    <declaration name="tmp" type="double[]" line="183"/>
                </scope>
            </method>
            <javadoc line="190">
                Adds multiple observations to the model.                
                <param>
                    x observations on the regressors                    
                </param>
                <param>
                    y observations on the regressand                    
                </param>
                <throws>
                    ModelSpecificationException if {@code x} is not rectangular, does not match
                      the length of {@code y} or does not contain sufficient data to estimate the model                    
                </throws>
            </javadoc>
            <method name="addObservations" type="void" line="197">
                <params>
                    <param name="x" type="double[][]"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="198"/>
                <scope line="201"/>
                <scope line="204"/>
                <scope line="207"/>
            </method>
            <javadoc line="211">
                The include method is where the QR decomposition occurs. This statement forms all
                  intermediate data which will be used for all derivative measures.
                  According to the miller paper, note that in the original implementation the x vector
                  is overwritten. In this implementation, the include method is passed a copy of the
                  original data vector so that there is no contamination of the data. Additionally,
                  this method differs slightly from Gentleman&apos;s method, in that the assumption is
                  of dense design matrices, there is some advantage in using the original gentleman algorithm
                  on sparse matrices.                
                <param>
                    x observations on the regressors                    
                </param>
                <param>
                    wi weight of the this observation (-1,1)                    
                </param>
                <param>
                    yi observation on the regressand                    
                </param>
            </javadoc>
            <method name="include" type="void" line="224">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="wi" type="double"/>
                    <param name="yi" type="double"/>
                </params>
                <declaration name="nextr" type="int" line="225"/>
                <declaration name="w" type="double" line="226"/>
                <declaration name="y" type="double" line="227"/>
                <declaration name="xi" type="double" line="228"/>
                <declaration name="di" type="double" line="229"/>
                <declaration name="wxi" type="double" line="230"/>
                <declaration name="dpi" type="double" line="231"/>
                <declaration name="xk" type="double" line="232"/>
                <declaration name="_w" type="double" line="233"/>
                <scope line="237">
                    <scope line="238"/>
                    <scope line="242"/>
                    <scope line="249">
                        <declaration name="tmp" type="double" line="251"/>
                        <scope line="252"/>
                    </scope>
                    <scope line="256"/>
                    <scope line="261">
                        <scope line="264"/>
                        <scope line="267"/>
                    </scope>
                    <scope line="274"/>
                    <scope line="277"/>
                </scope>
            </method>
            <javadoc line="283">
                Adds to number a and b such that the contamination due to
                  numerical smallness of one addend does not corrupt the sum.                
                <param>
                    a - an addend                    
                </param>
                <param>
                    b - an addend                    
                </param>
                <return>
                    the sum of the a and b                    
                </return>
            </javadoc>
            <method name="smartAdd" type="double" line="290">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <declaration name="_a" type="double" line="291"/>
                <declaration name="_b" type="double" line="292"/>
                <scope line="293">
                    <declaration name="eps" type="double" line="294"/>
                    <scope line="295"/>
                </scope>
                <scope line="300">
                    <declaration name="eps" type="double" line="301"/>
                    <scope line="302"/>
                </scope>
            </method>
            <javadoc line="308">
                As the name suggests,  clear wipes the internals and reorders everything in the
                  canonical order.                
            </javadoc>
            <method name="clear" type="void" line="312">
                <scope line="322"/>
            </method>
            <javadoc line="332">
                This sets up tolerances for singularity testing.                
            </javadoc>
            <method name="tolset" type="void" line="335">
                <declaration name="pos" type="int" line="336"/>
                <declaration name="total" type="double" line="337"/>
                <declaration name="eps" type="double" line="338"/>
                <scope line="339"/>
                <scope line="343">
                    <scope line="346"/>
                </scope>
            </method>
            <javadoc line="354">
                The regcf method conducts the linear regression and extracts the
                  parameter vector. Notice that the algorithm can do subset regression
                  with no alteration.                
                <param>
                    nreq how many of the regressors to include (either in canonical
                      order, or in the current reordered state)                    
                </param>
                <return>
                    an array with the estimated slope coefficients                    
                </return>
                <throws>
                    ModelSpecificationException if {@code nreq} is less than 1
                      or greater than the number of independent variables                    
                </throws>
            </javadoc>
            <method name="regcf" type="double[]" line="364">
                <params>
                    <param name="nreq" type="int"/>
                </params>
                <declaration name="nextr" type="int" line="365"/>
                <scope line="366"/>
                <scope line="369"/>
                <scope line="372"/>
                <declaration name="ret" type="double[]" line="375"/>
                <declaration name="rankProblem" type="boolean" line="376"/>
                <scope line="377">
                    <scope line="378"/>
                    <scope line="383">
                        <scope line="386"/>
                    </scope>
                </scope>
                <scope line="392">
                    <scope line="393">
                        <scope line="394"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="401">
                The method which checks for singularities and then eliminates the offending
                  columns.                
            </javadoc>
            <method name="singcheck" type="void" line="405">
                <declaration name="pos" type="int" line="406"/>
                <scope line="407"/>
                <scope line="410">
                    <declaration name="temp" type="double" line="411"/>
                    <scope line="413">
                        <scope line="414"/>
                    </scope>
                    <scope line="420">
                        <scope line="422">
                            <declaration name="_pi" type="int" line="424"/>
                            <scope line="425"/>
                            <declaration name="y" type="double" line="429"/>
                            <declaration name="weight" type="double" line="430"/>
                        </scope>
                        <scope line="435"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="441">
                Calculates the sum of squared errors for the full regression
                  and all subsets in the following manner: &lt;pre&gt;
                  rss[] ={
                  ResidualSumOfSquares_allNvars,
                  ResidualSumOfSquares_FirstNvars-1,
                  ResidualSumOfSquares_FirstNvars-2,
                  ..., ResidualSumOfSquares_FirstVariable} &lt;/pre&gt;                
            </javadoc>
            <method name="ss" type="void" line="450">
                <declaration name="total" type="double" line="451"/>
                <scope line="453"/>
            </method>
            <javadoc line="459">
                Calculates the cov matrix assuming only the first nreq variables are
                  included in the calculation. The returned array contains a symmetric
                  matrix stored in lower triangular form. The matrix will have
                  ( nreq + 1 )  nreq / 2 elements. For illustration &lt;pre&gt;
                  cov =
                  {
                  cov_00,
                  cov_10, cov_11,
                  cov_20, cov_21, cov22,
                  ...
                  } &lt;/pre&gt;                
                <param>
                    nreq how many of the regressors to include (either in canonical
                      order, or in the current reordered state)                    
                </param>
                <return>
                    an array with the variance covariance of the included
                      regressors in lower triangular form                    
                </return>
            </javadoc>
            <method name="cov" type="double[]" line="476">
                <params>
                    <param name="nreq" type="int"/>
                </params>
                <scope line="477"/>
                <declaration name="rnk" type="double" line="480"/>
                <scope line="481">
                    <scope line="482"/>
                </scope>
                <declaration name="var" type="double" line="486"/>
                <declaration name="rinv" type="double[]" line="487"/>
                <declaration name="covmat" type="double[]" line="489"/>
                <declaration name="pos2" type="int" line="491"/>
                <declaration name="pos1" type="int" line="492"/>
                <declaration name="start" type="int" line="493"/>
                <declaration name="total" type="double" line="494"/>
                <scope line="495">
                    <scope line="497">
                        <scope line="498">
                            <scope line="499">
                                <scope line="501"/>
                                <scope line="504"/>
                                <scope line="507">
                                    <scope line="508"/>
                                </scope>
                            </scope>
                            <scope line="516"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="525">
                This internal method calculates the inverse of the upper-triangular portion
                  of the R matrix.                
                <param>
                    rinv  the storage for the inverse of r                    
                </param>
                <param>
                    nreq how many of the regressors to include (either in canonical
                      order, or in the current reordered state)                    
                </param>
            </javadoc>
            <method name="inverse" type="void" line="532">
                <params>
                    <param name="rinv" type="double[]"/>
                    <param name="nreq" type="int"/>
                </params>
                <declaration name="pos" type="int" line="533"/>
                <declaration name="pos1" type="int" line="534"/>
                <declaration name="pos2" type="int" line="535"/>
                <declaration name="total" type="double" line="536"/>
                <scope line="538">
                    <scope line="539">
                        <declaration name="start" type="int" line="540"/>
                        <scope line="541">
                            <scope line="545">
                                <scope line="547"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="556"/>
                </scope>
            </method>
            <javadoc line="561">
                In the original algorithm only the partial correlations of the regressors
                  is returned to the user. In this implementation, we have &lt;pre&gt;
                  corr =
                  {
                  corrxx - lower triangular
                  corrxy - bottom row of the matrix
                  }
                  Replaces subroutines PCORR and COR of:
                  ALGORITHM AS274  APPL. STATIST. (1992) VOL.41, NO. 2 &lt;/pre&gt;
                  &lt;p&gt;Calculate partial correlations after the variables in rows
                  1, 2, ..., IN have been forced into the regression.
                  If IN = 1, and the first row of R represents a constant in the
                  model, then the usual simple correlations are returned.&lt;/p&gt;
                  &lt;p&gt;If IN = 0, the value returned in array CORMAT for the correlation
                  of variables Xi &amp; Xj is: &lt;pre&gt;
                  sum ( Xi.Xj ) / Sqrt ( sum (Xi^2) . sum (Xj^2) )&lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;On return, array CORMAT contains the upper triangle of the matrix of
                  partial correlations stored by rows, excluding the 1&apos;s on the diagonal.
                  e.g. if IN = 2, the consecutive elements returned are:
                  (3,4) (3,5) ... (3,ncol), (4,5) (4,6) ... (4,ncol), etc.
                  Array YCORR stores the partial correlations with the Y-variable
                  starting with YCORR(IN+1) = partial correlation with the variable in
                  position (IN+1). &lt;/p&gt;                
                <param>
                    in how many of the regressors to include (either in canonical
                      order, or in the current reordered state)                    
                </param>
                <return>
                    an array with the partial correlations of the remainder of
                      regressors with each other and the regressand, in lower triangular form                    
                </return>
            </javadoc>
            <method name="getPartialCorrelations" type="double[]" line="590">
                <params>
                    <param name="in" type="int"/>
                </params>
                <declaration name="output" type="double[]" line="591"/>
                <declaration name="pos" type="int" line="592"/>
                <declaration name="pos1" type="int" line="593"/>
                <declaration name="pos2" type="int" line="594"/>
                <declaration name="rms_off" type="int" line="595"/>
                <declaration name="wrk_off" type="int" line="596"/>
                <declaration name="rms" type="double[]" line="597"/>
                <declaration name="work" type="double[]" line="598"/>
                <declaration name="sumxx" type="double" line="599"/>
                <declaration name="sumxy" type="double" line="600"/>
                <declaration name="sumyy" type="double" line="601"/>
                <declaration name="offXX" type="int" line="602"/>
                <scope line="603"/>
                <declaration name="nvm" type="int" line="606"/>
                <declaration name="base_pos" type="int" line="607"/>
                <scope line="608"/>
                <scope line="611">
                    <scope line="614"/>
                    <scope line="618"/>
                    <scope line="621"/>
                </scope>
                <scope line="626"/>
                <scope line="629"/>
                <scope line="633">
                    <scope line="637">
                        <scope line="639"/>
                    </scope>
                    <scope line="647"/>
                </scope>
            </method>
            <javadoc line="658">
                ALGORITHM AS274 APPL. STATIST. (1992) VOL.41, NO. 2.
                  Move variable from position FROM to position TO in an
                  orthogonal reduction produced by AS75.1.                
                <param>
                    from initial position                    
                </param>
                <param>
                    to destination                    
                </param>
            </javadoc>
            <method name="vmove" type="void" line="665">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="d1" type="double" line="666"/>
                <declaration name="d2" type="double" line="667"/>
                <declaration name="X" type="double" line="668"/>
                <declaration name="d1new" type="double" line="669"/>
                <declaration name="d2new" type="double" line="670"/>
                <declaration name="cbar" type="double" line="671"/>
                <declaration name="sbar" type="double" line="672"/>
                <declaration name="Y" type="double" line="673"/>
                <declaration name="first" type="int" line="674"/>
                <declaration name="inc" type="int" line="675"/>
                <declaration name="m1" type="int" line="676"/>
                <declaration name="m2" type="int" line="677"/>
                <declaration name="mp1" type="int" line="678"/>
                <declaration name="pos" type="int" line="679"/>
                <declaration name="bSkipTo40" type="boolean" line="680"/>
                <scope line="681"/>
                <scope line="684"/>
                <declaration name="count" type="int" line="687"/>
                <scope line="688"/>
                <scope line="693"/>
                <declaration name="m" type="int" line="698"/>
                <declaration name="idx" type="int" line="699"/>
                <scope line="700">
                    <scope line="706">
                        <scope line="708"/>
                        <scope line="711">
                            <scope line="715"/>
                        </scope>
                        <scope line="727">
                            <scope line="730"/>
                        </scope>
                        <scope line="736">
                            <scope line="744"/>
                        </scope>
                    </scope>
                    <scope line="756">
                        <scope line="758"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="776">
                ALGORITHM AS274  APPL. STATIST. (1992) VOL.41, NO. 2
                  &lt;p&gt; Re-order the variables in an orthogonal reduction produced by
                  AS75.1 so that the N variables in LIST start at position POS1,
                  though will not necessarily be in the same order as in LIST.
                  Any variables in VORDER before position POS1 are not moved.
                  Auxiliary routine called: VMOVE. &lt;/p&gt;
                  &lt;p&gt;This internal method reorders the regressors.&lt;/p&gt;                
                <param>
                    list the regressors to move                    
                </param>
                <param>
                    pos1 where the list will be placed                    
                </param>
                <return>
                    -1 error, 0 everything ok                    
                </return>
            </javadoc>
            <method name="reorderRegressors" type="int" line="788">
                <params>
                    <param name="list" type="int[]"/>
                    <param name="pos1" type="int"/>
                </params>
                <declaration name="next" type="int" line="789"/>
                <declaration name="i" type="int" line="790"/>
                <declaration name="l" type="int" line="791"/>
                <scope line="792"/>
                <scope line="797">
                    <scope line="799">
                        <scope line="800">
                            <scope line="803"/>
                            <scope line="806"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="815">
                Gets the diagonal of the Hat matrix also known as the leverage matrix.                
                <param>
                    row_data returns the diagonal of the hat matrix for this observation                    
                </param>
                <return>
                    the diagonal element of the hatmatrix                    
                </return>
            </javadoc>
            <method name="getDiagonalOfHatMatrix" type="double" line="820">
                <params>
                    <param name="row_data" type="double[]"/>
                </params>
                <declaration name="wk" type="double[]" line="821"/>
                <declaration name="pos" type="int" line="822"/>
                <declaration name="total" type="double" line="823"/>
                <scope line="824"/>
                <declaration name="xrow" type="double[]" line="827"/>
                <scope line="828"/>
                <scope line="833"/>
                <declaration name="hii" type="double" line="836"/>
                <scope line="837">
                    <scope line="838"/>
                    <scope line="841">
                        <scope line="844"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="854">
                Gets the order of the regressors, useful if some type of reordering
                  has been called. Calling regress with int[]{} args will trigger
                  a reordering.                
                <return>
                    int[] with the current order of the regressors                    
                </return>
            </javadoc>
            <method name="getOrderOfRegressors" type="int[]" line="860"/>
            <javadoc line="863">
                Conducts a regression on the data in the model, using all regressors.                
                <return>
                    RegressionResults the structure holding all regression results                    
                </return>
                <exception>
                    ModelSpecificationException - thrown if number of observations is
                      less than the number of variables                    
                </exception>
            </javadoc>
            <method name="regress" type="RegressionResults" line="869"/>
            <javadoc line="872">
                Conducts a regression on the data in the model, using a subset of regressors.                
                <param>
                    numberOfRegressors many of the regressors to include (either in canonical
                      order, or in the current reordered state)                    
                </param>
                <return>
                    RegressionResults the structure holding all regression results                    
                </return>
                <exception>
                    ModelSpecificationException - thrown if number of observations is
                      less than the number of variables or number of regressors requested
                      is greater than the regressors in the model                    
                </exception>
            </javadoc>
            <method name="regress" type="RegressionResults" line="881">
                <params>
                    <param name="numberOfRegressors" type="int"/>
                </params>
                <scope line="882"/>
                <scope line="885"/>
                <declaration name="beta" type="double[]" line="890"/>
                <declaration name="cov" type="double[]" line="892"/>
                <declaration name="rnk" type="int" line="893"/>
                <scope line="894">
                    <scope line="895"/>
                </scope>
                <declaration name="needsReorder" type="boolean" line="899"/>
                <scope line="900">
                    <scope line="901"/>
                </scope>
                <scope line="906"/>
                <scope line="909">
                    <declaration name="betaNew" type="double[]" line="910"/>
                    <declaration name="covNew" type="double[]" line="911"/>
                    <declaration name="newIndices" type="int[]" line="912"/>
                    <scope line="913">
                        <scope line="914">
                            <scope line="915"/>
                        </scope>
                    </scope>
                    <declaration name="idx1" type="int" line="921"/>
                    <declaration name="idx2" type="int" line="922"/>
                    <declaration name="_i" type="int" line="923"/>
                    <declaration name="_j" type="int" line="924"/>
                    <scope line="925">
                        <scope line="927">
                            <scope line="929"/>
                            <scope line="932"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="941">
                Conducts a regression on the data in the model, using regressors in array
                  Calling this method will change the internal order of the regressors
                  and care is required in interpreting the hatmatrix.                
                <param>
                    variablesToInclude array of variables to include in regression                    
                </param>
                <return>
                    RegressionResults the structure holding all regression results                    
                </return>
                <exception>
                    ModelSpecificationException - thrown if number of observations is
                      less than the number of variables, the number of regressors requested
                      is greater than the regressors in the model or a regressor index in
                      regressor array does not exist                    
                </exception>
            </javadoc>
            <method name="regress" type="RegressionResults" line="952">
                <params>
                    <param name="variablesToInclude" type="int[]"/>
                </params>
                <scope line="953"/>
                <scope line="956"/>
                <declaration name="iExclude" type="int" line="960"/>
                <scope line="961">
                    <scope line="962"/>
                    <scope line="965"/>
                </scope>
                <declaration name="series" type="int[]" line="970"/>
                <scope line="971">
                    <declaration name="j" type="int" line="972"/>
                    <scope line="974">
                        <scope line="975"/>
                    </scope>
                </scope>
                <scope line="981"/>
                <declaration name="beta" type="double[]" line="987"/>
                <declaration name="cov" type="double[]" line="989"/>
                <declaration name="rnk" type="int" line="990"/>
                <scope line="991">
                    <scope line="992"/>
                </scope>
                <declaration name="needsReorder" type="boolean" line="996"/>
                <scope line="997">
                    <scope line="998"/>
                </scope>
                <scope line="1003"/>
                <scope line="1006">
                    <declaration name="betaNew" type="double[]" line="1007"/>
                    <declaration name="newIndices" type="int[]" line="1008"/>
                    <scope line="1009">
                        <scope line="1010">
                            <scope line="1011"/>
                        </scope>
                    </scope>
                    <declaration name="covNew" type="double[]" line="1017"/>
                    <declaration name="idx1" type="int" line="1018"/>
                    <declaration name="idx2" type="int" line="1019"/>
                    <declaration name="_i" type="int" line="1020"/>
                    <declaration name="_j" type="int" line="1021"/>
                    <scope line="1022">
                        <scope line="1024">
                            <scope line="1026"/>
                            <scope line="1029"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>