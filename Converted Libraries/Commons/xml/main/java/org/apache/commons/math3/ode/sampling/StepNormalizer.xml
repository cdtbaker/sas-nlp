<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.sampling">
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="StepNormalizer" line="5">
            <implements interface="StepHandler"/>
            <javadoc line="5">
                This class wraps an object implementing {@link FixedStepHandler}into a {@link StepHandler}.
                  &lt;p&gt;This wrapper allows to use fixed step handlers with general
                  integrators which cannot guaranty their integration steps will
                  remain constant and therefore only accept general step
                  handlers.&lt;/p&gt;
                  &lt;p&gt;The stepsize used is selected at construction time. The {@link FixedStepHandler#handleStep handleStep} method of the underlying{@link FixedStepHandler} object is called at normalized times. The
                  normalized times can be influenced by the {@link StepNormalizerMode} and{@link StepNormalizerBounds}.&lt;/p&gt;
                  &lt;p&gt;There is no constraint on the integrator, it can use any time step
                  it needs (time steps longer or shorter than the fixed time step and
                  non-integer ratios are all allowed).&lt;/p&gt;
                  &lt;p&gt;
                  &lt;table border=&quot;1&quot; align=&quot;center&quot;&gt;
                  &lt;tr BGCOLOR=&quot;#CCCCFF&quot;&gt;&lt;td colspan=6&gt;&lt;font size=&quot;+2&quot;&gt;Examples (step size = 0.5)&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr BGCOLOR=&quot;#EEEEFF&quot;&gt;&lt;font size=&quot;+1&quot;&gt;&lt;td&gt;Start time&lt;/td&gt;&lt;td&gt;End time&lt;/td&gt;
                  &lt;td&gt;Direction&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode Mode}&lt;/td&gt;
                  &lt;td&gt;{@link StepNormalizerBounds Bounds}&lt;/td&gt;&lt;td&gt;Output&lt;/td&gt;&lt;/font&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#NEITHER NEITHER}&lt;/td&gt;&lt;td&gt;0.8, 1.3, 1.8, 2.3, 2.8&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#FIRST FIRST}&lt;/td&gt;&lt;td&gt;0.3, 0.8, 1.3, 1.8, 2.3, 2.8&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#LAST LAST}&lt;/td&gt;&lt;td&gt;0.8, 1.3, 1.8, 2.3, 2.8, 3.1&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#BOTH BOTH}&lt;/td&gt;&lt;td&gt;0.3, 0.8, 1.3, 1.8, 2.3, 2.8, 3.1&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#NEITHER NEITHER}&lt;/td&gt;&lt;td&gt;0.5, 1.0, 1.5, 2.0, 2.5, 3.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#FIRST FIRST}&lt;/td&gt;&lt;td&gt;0.3, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#LAST LAST}&lt;/td&gt;&lt;td&gt;0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.1&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#BOTH BOTH}&lt;/td&gt;&lt;td&gt;0.3, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.1&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#NEITHER NEITHER}&lt;/td&gt;&lt;td&gt;0.5, 1.0, 1.5, 2.0, 2.5, 3.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#FIRST FIRST}&lt;/td&gt;&lt;td&gt;0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#LAST LAST}&lt;/td&gt;&lt;td&gt;0.5, 1.0, 1.5, 2.0, 2.5, 3.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#BOTH BOTH}&lt;/td&gt;&lt;td&gt;0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#NEITHER NEITHER}&lt;/td&gt;&lt;td&gt;0.5, 1.0, 1.5, 2.0, 2.5, 3.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#FIRST FIRST}&lt;/td&gt;&lt;td&gt;0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#LAST LAST}&lt;/td&gt;&lt;td&gt;0.5, 1.0, 1.5, 2.0, 2.5, 3.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;forward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#BOTH BOTH}&lt;/td&gt;&lt;td&gt;0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#NEITHER NEITHER}&lt;/td&gt;&lt;td&gt;2.6, 2.1, 1.6, 1.1, 0.6&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#FIRST FIRST}&lt;/td&gt;&lt;td&gt;3.1, 2.6, 2.1, 1.6, 1.1, 0.6&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#LAST LAST}&lt;/td&gt;&lt;td&gt;2.6, 2.1, 1.6, 1.1, 0.6, 0.3&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#BOTH BOTH}&lt;/td&gt;&lt;td&gt;3.1, 2.6, 2.1, 1.6, 1.1, 0.6, 0.3&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#NEITHER NEITHER}&lt;/td&gt;&lt;td&gt;3.0, 2.5, 2.0, 1.5, 1.0, 0.5&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#FIRST FIRST}&lt;/td&gt;&lt;td&gt;3.1, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#LAST LAST}&lt;/td&gt;&lt;td&gt;3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.3&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.1&lt;/td&gt;&lt;td&gt;0.3&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#BOTH BOTH}&lt;/td&gt;&lt;td&gt;3.1, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.3&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#NEITHER NEITHER}&lt;/td&gt;&lt;td&gt;2.5, 2.0, 1.5, 1.0, 0.5, 0.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#FIRST FIRST}&lt;/td&gt;&lt;td&gt;3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#LAST LAST}&lt;/td&gt;&lt;td&gt;2.5, 2.0, 1.5, 1.0, 0.5, 0.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#INCREMENT INCREMENT}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#BOTH BOTH}&lt;/td&gt;&lt;td&gt;3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#NEITHER NEITHER}&lt;/td&gt;&lt;td&gt;2.5, 2.0, 1.5, 1.0, 0.5, 0.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#FIRST FIRST}&lt;/td&gt;&lt;td&gt;3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#LAST LAST}&lt;/td&gt;&lt;td&gt;2.5, 2.0, 1.5, 1.0, 0.5, 0.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;backward&lt;/td&gt;&lt;td&gt;{@link StepNormalizerMode#MULTIPLES MULTIPLES}&lt;/td&gt;&lt;td&gt;{@link StepNormalizerBounds#BOTH BOTH}&lt;/td&gt;&lt;td&gt;3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/p&gt;                
                <see>
                    StepHandler                    
                </see>
                <see>
                    FixedStepHandler                    
                </see>
                <see>
                    StepNormalizerMode                    
                </see>
                <see>
                    StepNormalizerBounds                    
                </see>
                <version>
                    $Id: StepNormalizer.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="h" type="double" line="64"/>
            <javadoc line="64">
                Fixed time step.                
            </javadoc>
            <declaration name="handler" type="FixedStepHandler" line="68"/>
            <javadoc line="68">
                Underlying step handler.                
            </javadoc>
            <declaration name="firstTime" type="double" line="72"/>
            <javadoc line="72">
                First step time.                
            </javadoc>
            <declaration name="lastTime" type="double" line="76"/>
            <javadoc line="76">
                Last step time.                
            </javadoc>
            <declaration name="lastState" type="double[]" line="80"/>
            <javadoc line="80">
                Last state vector.                
            </javadoc>
            <declaration name="lastDerivatives" type="double[]" line="84"/>
            <javadoc line="84">
                Last derivatives vector.                
            </javadoc>
            <declaration name="forward" type="boolean" line="88"/>
            <javadoc line="88">
                Integration direction indicator.                
            </javadoc>
            <declaration name="bounds" type="StepNormalizerBounds" line="92"/>
            <javadoc line="92">
                The step normalizer bounds settings to use.                
            </javadoc>
            <declaration name="mode" type="StepNormalizerMode" line="96"/>
            <javadoc line="96">
                The step normalizer mode to use.                
            </javadoc>
            <javadoc line="100">
                Simple constructor. Uses {@link StepNormalizerMode#INCREMENT INCREMENT}mode, and {@link StepNormalizerBounds#FIRST FIRST} bounds setting, for
                  backwards compatibility.                
                <param>
                    h fixed time step (sign is not used)                    
                </param>
                <param>
                    handler fixed time step handler to wrap                    
                </param>
            </javadoc>
            <method name="StepNormalizer" type="constructor" line="106">
                <params>
                    <param name="h" type="double"/>
                    <param name="handler" type="FixedStepHandler"/>
                </params>
            </method>
            <javadoc line="109">
                Simple constructor. Uses {@link StepNormalizerBounds#FIRST FIRST}bounds setting.                
                <param>
                    h fixed time step (sign is not used)                    
                </param>
                <param>
                    handler fixed time step handler to wrap                    
                </param>
                <param>
                    mode step normalizer mode to use                    
                </param>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="StepNormalizer" type="constructor" line="116">
                <params>
                    <param name="h" type="double"/>
                    <param name="handler" type="FixedStepHandler"/>
                    <param name="mode" type="StepNormalizerMode"/>
                </params>
            </method>
            <javadoc line="119">
                Simple constructor. Uses {@link StepNormalizerMode#INCREMENT INCREMENT}mode.                
                <param>
                    h fixed time step (sign is not used)                    
                </param>
                <param>
                    handler fixed time step handler to wrap                    
                </param>
                <param>
                    bounds step normalizer bounds setting to use                    
                </param>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="StepNormalizer" type="constructor" line="126">
                <params>
                    <param name="h" type="double"/>
                    <param name="handler" type="FixedStepHandler"/>
                    <param name="bounds" type="StepNormalizerBounds"/>
                </params>
            </method>
            <javadoc line="129">
                Simple constructor.                
                <param>
                    h fixed time step (sign is not used)                    
                </param>
                <param>
                    handler fixed time step handler to wrap                    
                </param>
                <param>
                    mode step normalizer mode to use                    
                </param>
                <param>
                    bounds step normalizer bounds setting to use                    
                </param>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="StepNormalizer" type="constructor" line="137">
                <params>
                    <param name="h" type="double"/>
                    <param name="handler" type="FixedStepHandler"/>
                    <param name="mode" type="StepNormalizerMode"/>
                    <param name="bounds" type="StepNormalizerBounds"/>
                </params>
            </method>
            <javadoc line="148">
                {@inheritDoc}                
            </javadoc>
            <method name="init" type="void" line="151">
                <params>
                    <param name="t0" type="double"/>
                    <param name="y0" type="double[]"/>
                    <param name="t" type="double"/>
                </params>
            </method>
            <javadoc line="159">
                Handle the last accepted step                
                <param>
                    interpolator interpolator for the last accepted step. For
                      efficiency purposes, the various integrators reuse the same
                      object on each call, so if the instance wants to keep it across
                      all calls (for example to provide at the end of the integration a
                      continuous model valid throughout the integration range), it
                      should build a local copy using the clone method and store this
                      copy.                    
                </param>
                <param>
                    isLast true if the step is the last one                    
                </param>
                <exception>
                    MaxCountExceededException if the interpolator throws one because
                      the number of functions evaluations is exceeded                    
                </exception>
            </javadoc>
            <method name="handleStep" type="void" line="172">
                <params>
                    <param name="interpolator" type="StepInterpolator"/>
                    <param name="isLast" type="boolean"/>
                </params>
                <scope line="173">
                    <scope line="180"/>
                </scope>
                <declaration name="nextTime" type="double" line="184"/>
                <scope line="185"/>
                <declaration name="nextInStep" type="boolean" line="188"/>
                <scope line="189"/>
                <scope line="195">
                    <declaration name="addLast" type="boolean" line="196"/>
                    <scope line="198"/>
                </scope>
            </method>
            <javadoc line="204">
                Returns a value indicating whether the next normalized time is in the
                  current step.                
                <param>
                    nextTime the next normalized time                    
                </param>
                <param>
                    interpolator interpolator for the last accepted step, to use to
                      get the end time of the current step                    
                </param>
                <return>
                    value indicating whether the next normalized time is in the
                      current step                    
                </return>
            </javadoc>
            <method name="isNextInStep" type="boolean" line="213">
                <params>
                    <param name="nextTime" type="double"/>
                    <param name="interpolator" type="StepInterpolator"/>
                </params>
            </method>
            <javadoc line="216">
                Invokes the underlying step handler for the current normalized step.                
                <param>
                    isLast true if the step is the last one                    
                </param>
            </javadoc>
            <method name="doNormalizedStep" type="void" line="220">
                <params>
                    <param name="isLast" type="boolean"/>
                </params>
                <scope line="221"/>
            </method>
            <javadoc line="226">
                Stores the interpolated information for the given time in the current
                  state.                
                <param>
                    interpolator interpolator for the last accepted step, to use to
                      get the interpolated information                    
                </param>
                <param>
                    t the time for which to store the interpolated information                    
                </param>
                <exception>
                    MaxCountExceededException if the interpolator throws one because
                      the number of functions evaluations is exceeded                    
                </exception>
            </javadoc>
            <method name="storeStep" type="void" line="235">
                <params>
                    <param name="interpolator" type="StepInterpolator"/>
                    <param name="t" type="double"/>
                </params>
            </method>
        </class>
    </source>