<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.moment">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Kurtosis" line="8">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <javadoc line="8">
                Computes the Kurtosis of the available values.
                  &lt;p&gt;
                  We use the following (unbiased) formula to define kurtosis:&lt;/p&gt;
                  &lt;p&gt;
                  kurtosis = { [n(n+1) / (n -1)(n - 2)(n-3)] sum[(x_i - mean)^4] / std^4 } - [3(n-1)^2 / (n-2)(n-3)]
                  &lt;/p&gt;&lt;p&gt;
                  where n is the number of values, mean is the {@link Mean} and std is the{@link StandardDeviation}&lt;/p&gt;
                  &lt;p&gt;
                  Note that this statistic is undefined for n &lt; 4.  &lt;code&gt;Double.Nan&lt;/code&gt;
                  is returned when there is not sufficient data to compute the statistic.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <version>
                    $Id: Kurtosis.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="27"/>
            <javadoc line="27">
                Serializable version identifier                
            </javadoc>
            <declaration name="moment" type="FourthMoment" line="31"/>
            <javadoc line="31">
                Fourth Moment on which this statistic is based                
            </javadoc>
            <declaration name="incMoment" type="boolean" line="35"/>
            <javadoc line="35">
                Determines whether or not this statistic can be incremented or cleared.
                  &lt;p&gt;
                  Statistics based on (constructed from) external moments cannot
                  be incremented or cleared.&lt;/p&gt;                
            </javadoc>
            <javadoc line="42">
                Construct a Kurtosis                
            </javadoc>
            <method name="Kurtosis" type="constructor" line="45"/>
            <javadoc line="49">
                Construct a Kurtosis from an external moment                
                <param>
                    m4 external Moment                    
                </param>
            </javadoc>
            <method name="Kurtosis" type="constructor" line="53">
                <params>
                    <param name="m4" type="FourthMoment"/>
                </params>
            </method>
            <javadoc line="57">
                Copy constructor, creates a new {@code Kurtosis} identical
                  to the {@code original}                
                <param>
                    original the {@code Kurtosis} instance to copy                    
                </param>
                <throws>
                    NullArgumentException if original is null                    
                </throws>
            </javadoc>
            <method name="Kurtosis" type="constructor" line="63">
                <params>
                    <param name="original" type="Kurtosis"/>
                </params>
            </method>
            <javadoc line="66">
                {@inheritDoc}&lt;p&gt;Note that when {@link #Kurtosis(FourthMoment)} is used to
                  create a Variance, this method does nothing. In that case, the
                  FourthMoment should be incremented directly.&lt;/p&gt;                
            </javadoc>
            <method name="increment" type="void" line="71">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="72"/>
            </method>
            <javadoc line="76">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="79">
                <declaration name="kurtosis" type="double" line="80"/>
                <scope line="81">
                    <declaration name="variance" type="double" line="82"/>
                    <scope line="83"/>
                    <scope line="86">
                        <declaration name="n" type="double" line="87"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="93">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="96">
                <scope line="97"/>
            </method>
            <javadoc line="101">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="104"/>
            <javadoc line="107">
                Returns the kurtosis of the entries in the specified portion of the
                  input array.
                  &lt;p&gt;
                  See {@link Kurtosis} for details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the kurtosis of the values or Double.NaN if length is less than 4                    
                </return>
                <throws>
                    MathIllegalArgumentException if the input array is null or the array
                      index parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="121">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="kurt" type="double" line="122"/>
                <scope line="123">
                    <declaration name="variance" type="Variance" line="124"/>
                    <declaration name="mean" type="double" line="126"/>
                    <declaration name="stdDev" type="double" line="127"/>
                    <declaration name="accum3" type="double" line="128"/>
                    <scope line="129"/>
                    <declaration name="n0" type="double" line="133"/>
                    <declaration name="coefficientOne" type="double" line="134"/>
                    <declaration name="termTwo" type="double" line="135"/>
                </scope>
            </method>
            <javadoc line="140">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="Kurtosis" line="143">
                <declaration name="result" type="Kurtosis" line="144"/>
            </method>
            <javadoc line="148">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source Kurtosis to copy                    
                </param>
                <param>
                    dest Kurtosis to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="155">
                <params>
                    <param name="source" type="Kurtosis"/>
                    <param name="dest" type="Kurtosis"/>
                </params>
            </method>
        </class>
    </source>