<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector.jacobian">
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.linear.DecompositionSolver"/>
        <import package="org.apache.commons.math3.linear.LUDecomposition"/>
        <import package="org.apache.commons.math3.linear.QRDecomposition"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.SingularMatrixException"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <class name="GaussNewtonOptimizer" line="16">
            <extends class="AbstractLeastSquaresOptimizer"/>
            <javadoc line="16">
                Gauss-Newton least-squares solver.
                  &lt;br/&gt;
                  Constraints are not supported: the call to{@link #optimize(OptimizationData[]) optimize} will throw{@link MathUnsupportedOperationException} if bounds are passed to it.
                  &lt;p&gt;
                  This class solve a least-square problem by solving the normal equations
                  of the linearized problem at each iteration. Either LU decomposition or
                  QR decomposition can be used to solve the normal equations. LU decomposition
                  is faster but QR decomposition is more robust for difficult problems.
                  &lt;/p&gt;                
                <version>
                    $Id: GaussNewtonOptimizer.java 1458323 2013-03-19 14:51:30Z erans $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="useLU" type="boolean" line="30"/>
            <javadoc line="30">
                Indicator for using LU decomposition.                
            </javadoc>
            <javadoc line="34">
                Simple constructor with default settings.
                  The normal equations will be solved using LU decomposition.                
                <param>
                    checker Convergence checker.                    
                </param>
            </javadoc>
            <method name="GaussNewtonOptimizer" type="constructor" line="39">
                <params>
                    <param name="checker" type="ConvergenceChecker<PointVectorValuePair>"/>
                </params>
            </method>
            <javadoc line="42">
                @param useLU If {@code true}, the normal equations will be solved
                  using LU decomposition, otherwise they will be solved using QR
                  decomposition.                
                <param>
                    checker Convergence checker.                    
                </param>
            </javadoc>
            <method name="GaussNewtonOptimizer" type="constructor" line="48">
                <params>
                    <param name="useLU" type="boolean"/>
                    <param name="checker" type="ConvergenceChecker<PointVectorValuePair>"/>
                </params>
            </method>
            <javadoc line="52">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointVectorValuePair" line="55">
                <declaration name="checker" type="ConvergenceChecker&lt;PointVectorValuePair&gt;" line="57"/>
                <scope line="58"/>
                <declaration name="targetValues" type="double[]" line="61"/>
                <declaration name="nR" type="int" line="62"/>
                <declaration name="weightMatrix" type="RealMatrix" line="63"/>
                <declaration name="residualsWeights" type="double[]" line="64"/>
                <scope line="65"/>
                <declaration name="currentPoint" type="double[]" line="68"/>
                <declaration name="nC" type="int" line="69"/>
                <declaration name="current" type="PointVectorValuePair" line="70"/>
                <scope line="71">
                    <declaration name="previous" type="PointVectorValuePair" line="73"/>
                    <declaration name="currentObjective" type="double[]" line="74"/>
                    <declaration name="currentResiduals" type="double[]" line="75"/>
                    <declaration name="weightedJacobian" type="RealMatrix" line="76"/>
                    <declaration name="b" type="double[]" line="78"/>
                    <declaration name="a" type="double[][]" line="79"/>
                    <scope line="80">
                        <declaration name="grad" type="double[]" line="81"/>
                        <declaration name="weight" type="double" line="82"/>
                        <declaration name="residual" type="double" line="83"/>
                        <declaration name="wr" type="double" line="84"/>
                        <scope line="85"/>
                        <scope line="88">
                            <declaration name="ak" type="double[]" line="89"/>
                            <declaration name="wgk" type="double" line="90"/>
                            <scope line="91"/>
                        </scope>
                    </scope>
                    <scope line="96">
                        <declaration name="mA" type="RealMatrix" line="97"/>
                        <declaration name="solver" type="DecompositionSolver" line="98"/>
                        <declaration name="dX" type="double[]" line="99"/>
                        <scope line="100"/>
                    </scope>
                    <scope line="104"/>
                    <scope line="107">
                        <scope line="109"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="117">
                @throws MathUnsupportedOperationException if bounds were passed to the{@link #optimize(OptimizationData[]) optimize} method.                
            </javadoc>
            <method name="checkParameters" type="void" line="120">
                <scope line="121"/>
            </method>
        </class>
    </source>