<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.Iterator"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <class name="Combinations" line="28">
            <implements interface="Iterable">
                <type_params>
                    <type_param name="int[]"/>
                </type_params>
            </implements>
            <javadoc line="28">
                Utility to create &lt;a href=&quot;http://en.wikipedia.org/wiki/Combination&quot;&gt;
                  combinations&lt;/a&gt; {@code (n, k)} of {@code k} elements in a set of{@code n} elements.                
                <version>
                    $Id: Combinations.java 1591835 2014-05-02 09:04:01Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="n" type="int" line="37"/>
            <javadoc line="37">
                Size of the set from which combinations are drawn.                
            </javadoc>
            <declaration name="k" type="int" line="39"/>
            <javadoc line="39">
                Number of elements in each combination.                
            </javadoc>
            <declaration name="iterationOrder" type="IterationOrder" line="41"/>
            <javadoc line="41">
                Iteration order.                
            </javadoc>
            <declaration name="IterationOrder" type="enum" line="44"/>
            <javadoc line="44">
                Describes the type of iteration performed by the{@link #iterator() iterator}.                
            </javadoc>
            <scope line="48"/>
            <javadoc line="53">
                Creates an instance whose range is the k-element subsets of
                  {0, ..., n - 1} represented as {@code int[]} arrays.
                  &lt;p&gt;
                  The iteration order is lexicographic: the arrays returned by the{@link #iterator() iterator} are sorted in descending order and
                  they are visited in lexicographic order with significance from
                  right to left.
                  For example, {@code new Combinations(4, 2).iterator()} returns
                  an iterator that will generate the following sequence of arrays
                  on successive calls to{@code next()}:&lt;br/&gt;{@code [0, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3]}&lt;/p&gt;
                  If {@code k == 0} an iterator containing an empty array is returned;
                  if {@code k == n} an iterator containing [0, ..., n - 1] is returned.                
                <param>
                    n Size of the set from which subsets are selected.                    
                </param>
                <param>
                    k Size of the subsets to be enumerated.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NotPositiveException if {@code n &lt; 0}.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NumberIsTooLargeException if {@code k &gt; n}.                    
                </throws>
            </javadoc>
            <method name="Combinations" type="constructor" line="76">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Creates an instance whose range is the k-element subsets of
                  {0, ..., n - 1} represented as {@code int[]} arrays.
                  &lt;p&gt;
                  If the {@code iterationOrder} argument is set to{@link IterationOrder#LEXICOGRAPHIC}, the arrays returned by the{@link #iterator() iterator} are sorted in descending order and
                  they are visited in lexicographic order with significance from
                  right to left.
                  For example, {@code new Combinations(4, 2).iterator()} returns
                  an iterator that will generate the following sequence of arrays
                  on successive calls to{@code next()}:&lt;br/&gt;{@code [0, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3]}&lt;/p&gt;
                  If {@code k == 0} an iterator containing an empty array is returned;
                  if {@code k == n} an iterator containing [0, ..., n - 1] is returned.                
                <param>
                    n Size of the set from which subsets are selected.                    
                </param>
                <param>
                    k Size of the subsets to be enumerated.                    
                </param>
                <param>
                    iterationOrder Specifies the {@link #iterator() iteration order}.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NotPositiveException if {@code n &lt; 0}.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NumberIsTooLargeException if {@code k &gt; n}.                    
                </throws>
            </javadoc>
            <method name="Combinations" type="constructor" line="106">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                    <param name="iterationOrder" type="IterationOrder"/>
                </params>
            </method>
            <javadoc line="113">
                Gets the size of the set from which combinations are drawn.                
                <return>
                    the size of the universe.                    
                </return>
            </javadoc>
            <method name="getN" type="int" line="118"/>
            <javadoc line="122">
                Gets the number of elements in each combination.                
                <return>
                    the size of the subsets to be enumerated.                    
                </return>
            </javadoc>
            <method name="getK" type="int" line="127"/>
            <javadoc line="131">
                {@inheritDoc}                
            </javadoc>
            <method name="iterator" type="Iterator&lt;int[]&gt;" line="132">
                <comment line="143">
                    Should never happen.                    
                </comment>
                <scope line="134"/>
            </method>
            <javadoc line="146">
                Defines a lexicographic ordering of combinations.
                  The returned comparator allows to compare any two combinations
                  that can be produced by this instance&apos;s {@link #iterator() iterator}.
                  Its {@code compare(int[],int[])} method will throw exceptions if
                  passed combinations that are inconsistent with this instance:
                  &lt;ul&gt;
                  &lt;li&gt;{@code DimensionMismatchException} if the array lengths are not
                  equal to {@code k},&lt;/li&gt;
                  &lt;li&gt;{@code OutOfRangeException} if an element of the array is not
                  within the interval [0, {@code n}).&lt;/li&gt;
                  &lt;/ul&gt;                
                <return>
                    a lexicographic comparator.                    
                </return>
            </javadoc>
            <method name="comparator" type="Comparator&lt;int[]&gt;" line="160"/>
            <class name="LexicographicIterator" line="164">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="int[]"/>
                    </type_params>
                </implements>
                <javadoc line="164">
                    Lexicographic combinations iterator.
                      &lt;p&gt;
                      Implementation follows Algorithm T in &lt;i&gt;The Art of Computer Programming&lt;/i&gt;
                      Internet Draft (PRE-FASCICLE 3A), &quot;A Draft of Section 7.2.1.3 Generating All
                      Combinations&lt;/a&gt;, D. Knuth, 2004.&lt;/p&gt;
                      &lt;p&gt;
                      The degenerate cases {@code k == 0} and {@code k == n} are NOT handled by this
                      implementation.  If constructor arguments satisfy {@code k == 0}or {@code k &gt;= n}, no exception is generated, but the iterator is empty.
                      &lt;/p&gt;                    
                </javadoc>
                <declaration name="k" type="int" line="178"/>
                <javadoc line="178">
                    Size of subsets returned by the iterator                    
                </javadoc>
                <declaration name="c" type="int[]" line="181"/>
                <javadoc line="181">
                    c[1], ..., c[k] stores the next combination; c[k + 1], c[k + 2] are
                      sentinels.
                      &lt;p&gt;
                      Note that c[0] is &quot;wasted&quot; but this makes it a little easier to
                      follow the code.
                      &lt;/p&gt;                    
                </javadoc>
                <declaration name="more" type="boolean" line="191"/>
                <javadoc line="191">
                    Return value for {@link #hasNext()}                    
                </javadoc>
                <declaration name="j" type="int" line="194"/>
                <javadoc line="194">
                    Marker: smallest index such that c[j + 1] &gt; j                    
                </javadoc>
                <javadoc line="197">
                    Construct a CombinationIterator to enumerate k-sets from n.
                      &lt;p&gt;
                      NOTE: If {@code k === 0} or {@code k &gt;= n}, the Iterator will be empty
                      (that is, {@link #hasNext()} will return {@code false} immediately.
                      &lt;/p&gt;                    
                    <param>
                        n size of the set from which subsets are enumerated                        
                    </param>
                    <param>
                        k size of the subsets to enumerate                        
                    </param>
                </javadoc>
                <method name="LexicographicIterator" type="constructor" line="207">
                    <params>
                        <param name="n" type="int"/>
                        <param name="k" type="int"/>
                    </params>
                    <comment line="215">
                        Initialize c to start with lexicographically first k-set                        
                    </comment>
                    <comment line="219">
                        Initialize sentinels                        
                    </comment>
                    <comment line="222">
                        Set up invariant: j is smallest index such that c[j + 1] &gt; j                        
                    </comment>
                    <scope line="210"/>
                    <scope line="215"/>
                </method>
                <javadoc line="224">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hasNext" type="boolean" line="227"/>
                <javadoc line="231">
                    {@inheritDoc}                    
                </javadoc>
                <method name="next" type="int[]" line="234">
                    <comment line="239">
                        Copy return value (prepared by last activation)                        
                    </comment>
                    <comment line="243">
                        Prepare next iteration
                         T2 and T6 loop                        
                    </comment>
                    <comment line="252">
                        T3                        
                    </comment>
                    <comment line="259">
                        T4                        
                    </comment>
                    <comment line="270">
                        T5                        
                    </comment>
                    <comment line="275">
                        T6                        
                    </comment>
                    <scope line="235"/>
                    <declaration name="ret" type="int[]" line="239"/>
                    <declaration name="x" type="int" line="244"/>
                    <scope line="245"/>
                    <scope line="252"/>
                    <scope line="255"/>
                    <declaration name="stepDone" type="boolean" line="259"/>
                    <scope line="260">
                        <scope line="263"/>
                        <scope line="265"/>
                    </scope>
                    <scope line="270"/>
                </method>
                <javadoc line="280">
                    Not supported.                    
                </javadoc>
                <method name="remove" type="void" line="283"/>
            </class>
            <class name="SingletonIterator" line="288">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="int[]"/>
                    </type_params>
                </implements>
                <javadoc line="288">
                    Iterator with just one element to handle degenerate cases (full array,
                      empty array) for combination iterator.                    
                </javadoc>
                <declaration name="singleton" type="int[]" line="293"/>
                <javadoc line="293">
                    Singleton array                    
                </javadoc>
                <declaration name="more" type="boolean" line="295"/>
                <javadoc line="295">
                    True on initialization, false after first call to next                    
                </javadoc>
                <javadoc line="297">
                    Create a singleton iterator providing the given array.                    
                    <param>
                        singleton array returned by the iterator                        
                    </param>
                </javadoc>
                <method name="SingletonIterator" type="constructor" line="301">
                    <params>
                        <param name="singleton" type="int[]"/>
                    </params>
                </method>
                <javadoc line="304">
                    @return True until next is called the first time, then false                    
                </javadoc>
                <method name="hasNext" type="boolean" line="305"/>
                <javadoc line="308">
                    @return the singleton in first activation; throws NSEE thereafter                    
                </javadoc>
                <method name="next" type="int[]" line="309">
                    <scope line="310"/>
                    <scope line="313"/>
                </method>
                <javadoc line="317">
                    Not supported                    
                </javadoc>
                <method name="remove" type="void" line="318"/>
            </class>
            <class name="LexicographicComparator" line="323">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="int[]"/>
                    </type_params>
                </implements>
                <implements interface="Serializable"/>
                <javadoc line="323">
                    Defines the lexicographic ordering of combinations, using
                      the {@link #lexNorm(int[])} method.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="329"/>
                <javadoc line="329">
                    Serializable version identifier.                    
                </javadoc>
                <declaration name="n" type="int" line="331"/>
                <javadoc line="331">
                    Size of the set from which combinations are drawn.                    
                </javadoc>
                <declaration name="k" type="int" line="333"/>
                <javadoc line="333">
                    Number of elements in each combination.                    
                </javadoc>
                <javadoc line="336">
                    @param n Size of the set from which subsets are selected.                    
                    <param>
                        k Size of the subsets to be enumerated.                        
                    </param>
                </javadoc>
                <method name="LexicographicComparator" type="constructor" line="341">
                    <params>
                        <param name="n" type="int"/>
                        <param name="k" type="int"/>
                    </params>
                </method>
                <javadoc line="346">
                    {@inheritDoc}                    
                    <throws>
                        DimensionMismatchException if the array lengths are not
                          equal to {@code k}.                        
                    </throws>
                    <throws>
                        OutOfRangeException if an element of the array is not
                          within the interval [0, {@code n}).                        
                    </throws>
                </javadoc>
                <method name="compare" type="int" line="355">
                    <params>
                        <param name="c1" type="int[]"/>
                        <param name="c2" type="int[]"/>
                    </params>
                    <comment line="364">
                        Method &quot;lexNorm&quot; works with ordered arrays.                        
                    </comment>
                    <scope line="356"/>
                    <scope line="359"/>
                    <declaration name="c1s" type="int[]" line="364"/>
                    <declaration name="c2s" type="int[]" line="366"/>
                    <declaration name="v1" type="long" line="369"/>
                    <declaration name="v2" type="long" line="370"/>
                    <scope line="372"/>
                    <scope line="374"/>
                    <scope line="376"/>
                </method>
                <javadoc line="381">
                    Computes the value (in base 10) represented by the digit
                      (interpreted in base {@code n}) in the input array in reverse
                      order.
                      For example if {@code c} is {@code} 
                      3, 2, 1}}, and {@code n}is 3, the method will return 18.                    
                    <param>
                        c Input array.                        
                    </param>
                    <return>
                        the lexicographic norm.                        
                    </return>
                    <throws>
                        OutOfRangeException if an element of the array is not
                          within the interval [0, {@code n}).                        
                    </throws>
                </javadoc>
                <method name="lexNorm" type="long" line="393">
                    <params>
                        <param name="c" type="int[]"/>
                    </params>
                    <declaration name="ret" type="long" line="394"/>
                    <scope line="395">
                        <declaration name="digit" type="int" line="396"/>
                        <scope line="398"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>