<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.complex.ComplexUtils"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="LaguerreSolver" line="12">
            <extends class="AbstractPolynomialSolver"/>
            <javadoc line="12">
                Implements the &lt;a href=&quot;http://mathworld.wolfram.com/LaguerresMethod.html&quot;&gt;
                  Laguerre&apos;s Method&lt;/a&gt; for root finding of real coefficient polynomials.
                  For reference, see
                  &lt;quote&gt;
                  &lt;b&gt;A First Course in Numerical Analysis&lt;/b&gt;
                  ISBN 048641454X, chapter 8.
                  &lt;/quote&gt;
                  Laguerre&apos;s method is global in the sense that it can start with any initial
                  approximation and be able to solve all roots from that point.
                  The algorithm requires a bracketing condition.                
                <version>
                    $Id: LaguerreSolver.java 1422195 2012-12-15 06:45:18Z psteitz $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_ABSOLUTE_ACCURACY" type="double" line="27"/>
            <javadoc line="27">
                Default absolute accuracy.                
            </javadoc>
            <declaration name="complexSolver" type="ComplexSolver" line="31"/>
            <javadoc line="31">
                Complex solver.                
            </javadoc>
            <javadoc line="35">
                Construct a solver with default accuracy (1e-6).                
            </javadoc>
            <method name="LaguerreSolver" type="constructor" line="38"/>
            <javadoc line="41">
                Construct a solver.                
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
            </javadoc>
            <method name="LaguerreSolver" type="constructor" line="45">
                <params>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="48">
                Construct a solver.                
                <param>
                    relativeAccuracy Relative accuracy.                    
                </param>
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
            </javadoc>
            <method name="LaguerreSolver" type="constructor" line="53">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="56">
                Construct a solver.                
                <param>
                    relativeAccuracy Relative accuracy.                    
                </param>
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
                <param>
                    functionValueAccuracy Function value accuracy.                    
                </param>
            </javadoc>
            <method name="LaguerreSolver" type="constructor" line="62">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="functionValueAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="65">
                {@inheritDoc}                
            </javadoc>
            <method name="doSolve" type="double" line="68">
                <declaration name="min" type="double" line="69"/>
                <declaration name="max" type="double" line="70"/>
                <declaration name="initial" type="double" line="71"/>
                <declaration name="functionValueAccuracy" type="double" line="72"/>
                <declaration name="yInitial" type="double" line="74"/>
                <scope line="75"/>
                <declaration name="yMin" type="double" line="78"/>
                <scope line="79"/>
                <scope line="82"/>
                <declaration name="yMax" type="double" line="85"/>
                <scope line="86"/>
                <scope line="89"/>
            </method>
            <javadoc line="94">
                Find a real root in the given interval.
                  Despite the bracketing condition, the root returned by{@link LaguerreSolver.ComplexSolver#solve(Complex[],Complex)} may
                  not be a real zero inside {@code [min, max]}.
                  For example, &lt;code&gt;p(x) = x&lt;sup&gt;3&lt;/sup&gt; + 1,&lt;/code&gt;
                  with {@code min = -2}, {@code max = 2}, {@code initial = 0}.
                  When it occurs, this code calls{@link LaguerreSolver.ComplexSolver#solveAll(Complex[],Complex)}in order to obtain all roots and picks up one real root.                
                <param>
                    lo Lower bound of the search interval.                    
                </param>
                <param>
                    hi Higher bound of the search interval.                    
                </param>
                <param>
                    fLo Function value at the lower bound of the search interval.                    
                </param>
                <param>
                    fHi Function value at the higher bound of the search interval.                    
                </param>
                <return>
                    the point at which the function value is zero.                    
                </return>
                <deprecated>
                    This method should not be part of the public API: It will
                      be made private in version 4.0.                    
                </deprecated>
            </javadoc>
            <method name="laguerre" type="double" line="109">
                <params>
                    <param name="lo" type="double"/>
                    <param name="hi" type="double"/>
                    <param name="fLo" type="double"/>
                    <param name="fHi" type="double"/>
                </params>
                <declaration name="c" type="Complex" line="110"/>
                <declaration name="initial" type="Complex" line="111"/>
                <declaration name="z" type="Complex" line="112"/>
                <scope line="113"/>
                <scope line="116">
                    <declaration name="r" type="double" line="117"/>
                    <declaration name="root" type="Complex[]" line="118"/>
                    <scope line="119">
                        <scope line="120"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="128">
                Find all complex roots for the polynomial with the given
                  coefficients, starting from the given initial value.
                  &lt;br/&gt;
                  Note: This method is not part of the API of {@link BaseUnivariateSolver}.                
                <param>
                    coefficients Polynomial coefficients.                    
                </param>
                <param>
                    initial Start value.                    
                </param>
                <return>
                    the point at which the function value is zero.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.                    
                </throws>
                <throws>
                    NullArgumentException if the {@code coefficients} is{@code null}.                    
                </throws>
                <throws>
                    NoDataException if the {@code coefficients} array is empty.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="solveAllComplex" type="Complex[]" line="141">
                <params>
                    <param name="coefficients" type="double[]"/>
                    <param name="initial" type="double"/>
                </params>
            </method>
            <javadoc line="145">
                Find a complex root for the polynomial with the given coefficients,
                  starting from the given initial value.
                  &lt;br/&gt;
                  Note: This method is not part of the API of {@link BaseUnivariateSolver}.                
                <param>
                    coefficients Polynomial coefficients.                    
                </param>
                <param>
                    initial Start value.                    
                </param>
                <return>
                    the point at which the function value is zero.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.                    
                </throws>
                <throws>
                    NullArgumentException if the {@code coefficients} is{@code null}.                    
                </throws>
                <throws>
                    NoDataException if the {@code coefficients} array is empty.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="solveComplex" type="Complex" line="158">
                <params>
                    <param name="coefficients" type="double[]"/>
                    <param name="initial" type="double"/>
                </params>
            </method>
            <class name="ComplexSolver" line="162">
                <javadoc line="162">
                    Class for searching all (complex) roots.                    
                </javadoc>
                <javadoc line="166">
                    Check whether the given complex root is actually a real zero
                      in the given interval, within the solver tolerance level.                    
                    <param>
                        min Lower bound for the interval.                        
                    </param>
                    <param>
                        max Upper bound for the interval.                        
                    </param>
                    <param>
                        z Complex root.                        
                    </param>
                    <return>
                        {@code true} if z is a real zero.                        
                    </return>
                </javadoc>
                <method name="isRoot" type="boolean" line="174">
                    <params>
                        <param name="min" type="double"/>
                        <param name="max" type="double"/>
                        <param name="z" type="Complex"/>
                    </params>
                    <scope line="175">
                        <declaration name="tolerance" type="double" line="176"/>
                    </scope>
                </method>
                <javadoc line="181">
                    Find all complex roots for the polynomial with the given
                      coefficients, starting from the given initial value.                    
                    <param>
                        coefficients Polynomial coefficients.                        
                    </param>
                    <param>
                        initial Start value.                        
                    </param>
                    <return>
                        the point at which the function value is zero.                        
                    </return>
                    <throws>
                        org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.                        
                    </throws>
                    <throws>
                        NullArgumentException if the {@code coefficients} is{@code null}.                        
                    </throws>
                    <throws>
                        NoDataException if the {@code coefficients} array is empty.                        
                    </throws>
                </javadoc>
                <method name="solveAll" type="Complex[]" line="191">
                    <params>
                        <param name="coefficients" type="Complex"/>
                        <param name="initial" type="Complex"/>
                    </params>
                    <scope line="192"/>
                    <declaration name="n" type="int" line="195"/>
                    <scope line="196"/>
                    <declaration name="c" type="Complex" line="199"/>
                    <scope line="200"/>
                    <declaration name="root" type="Complex" line="203"/>
                    <scope line="204">
                        <declaration name="subarray" type="Complex" line="205"/>
                        <declaration name="newc" type="Complex" line="208"/>
                        <declaration name="oldc" type="Complex" line="209"/>
                        <scope line="210"/>
                    </scope>
                </method>
                <javadoc line="218">
                    Find a complex root for the polynomial with the given coefficients,
                      starting from the given initial value.                    
                    <param>
                        coefficients Polynomial coefficients.                        
                    </param>
                    <param>
                        initial Start value.                        
                    </param>
                    <return>
                        the point at which the function value is zero.                        
                    </return>
                    <throws>
                        org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.                        
                    </throws>
                    <throws>
                        NullArgumentException if the {@code coefficients} is{@code null}.                        
                    </throws>
                    <throws>
                        NoDataException if the {@code coefficients} array is empty.                        
                    </throws>
                </javadoc>
                <method name="solve" type="Complex" line="228">
                    <params>
                        <param name="coefficients" type="Complex"/>
                        <param name="initial" type="Complex"/>
                    </params>
                    <scope line="229"/>
                    <declaration name="n" type="int" line="232"/>
                    <scope line="233"/>
                    <declaration name="absoluteAccuracy" type="double" line="236"/>
                    <declaration name="relativeAccuracy" type="double" line="237"/>
                    <declaration name="functionValueAccuracy" type="double" line="238"/>
                    <declaration name="nC" type="Complex" line="239"/>
                    <declaration name="n1C" type="Complex" line="240"/>
                    <declaration name="z" type="Complex" line="241"/>
                    <declaration name="oldz" type="Complex" line="242"/>
                    <scope line="243">
                        <declaration name="pv" type="Complex" line="244"/>
                        <declaration name="dv" type="Complex" line="245"/>
                        <declaration name="d2v" type="Complex" line="246"/>
                        <scope line="247"/>
                        <declaration name="tolerance" type="double" line="253"/>
                        <scope line="254"/>
                        <scope line="257"/>
                        <declaration name="G" type="Complex" line="260"/>
                        <declaration name="G2" type="Complex" line="261"/>
                        <declaration name="H" type="Complex" line="262"/>
                        <declaration name="delta" type="Complex" line="263"/>
                        <declaration name="deltaSqrt" type="Complex" line="264"/>
                        <declaration name="dplus" type="Complex" line="265"/>
                        <declaration name="dminus" type="Complex" line="266"/>
                        <declaration name="denominator" type="Complex" line="267"/>
                        <scope line="268"/>
                        <scope line="272"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>