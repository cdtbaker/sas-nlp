<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="TriangularDistribution" line="9">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="9">
                Implementation of the triangular real distribution.                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Triangular_distribution">
                      Triangular distribution (Wikipedia)</a>                    
                </see>
                <version>
                    $Id: TriangularDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="17"/>
            <javadoc line="17">
                Serializable version identifier.                
            </javadoc>
            <declaration name="a" type="double" line="21"/>
            <javadoc line="21">
                Lower limit of this distribution (inclusive).                
            </javadoc>
            <declaration name="b" type="double" line="25"/>
            <javadoc line="25">
                Upper limit of this distribution (inclusive).                
            </javadoc>
            <declaration name="c" type="double" line="29"/>
            <javadoc line="29">
                Mode of this distribution.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="33"/>
            <javadoc line="33">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <javadoc line="37">
                Creates a triangular real distribution using the given lower limit,
                  upper limit, and mode.                
                <param>
                    a Lower limit of this distribution (inclusive).                    
                </param>
                <param>
                    b Upper limit of this distribution (inclusive).                    
                </param>
                <param>
                    c Mode of this distribution.                    
                </param>
                <throws>
                    NumberIsTooLargeException if {@code a >= b} or if {@code c > b}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code c < a}.                    
                </throws>
            </javadoc>
            <method name="TriangularDistribution" type="constructor" line="46">
                <params>
                    <param name="a" type="double"/>
                    <param name="c" type="double"/>
                    <param name="b" type="double"/>
                </params>
            </method>
            <javadoc line="49">
                Creates a triangular distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    a Lower limit of this distribution (inclusive).                    
                </param>
                <param>
                    b Upper limit of this distribution (inclusive).                    
                </param>
                <param>
                    c Mode of this distribution.                    
                </param>
                <throws>
                    NumberIsTooLargeException if {@code a >= b} or if {@code c > b}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code c < a}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="TriangularDistribution" type="constructor" line="59">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="a" type="double"/>
                    <param name="c" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <scope line="61"/>
                <scope line="64"/>
                <scope line="67"/>
            </method>
            <javadoc line="75">
                Returns the mode {@code c} of this distribution.                
                <return>
                    the mode {@code c} of this distribution                    
                </return>
            </javadoc>
            <method name="getMode" type="double" line="79"/>
            <javadoc line="82">
                {@inheritDoc}&lt;p&gt;
                  For this distribution, the returned value is not really meaningful,
                  since exact formulas are implemented for the computation of the{@link #inverseCumulativeProbability(double)} (no solver is invoked).
                  &lt;/p&gt;
                  &lt;p&gt;
                  For lower limit {@code a} and upper limit {@code b}, the current
                  implementation returns {@code max(ulp(a), ulp(b)}.
                  &lt;/p&gt;                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="92"/>
            <javadoc line="95">
                {@inheritDoc}For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the
                  PDF is given by
                  &lt;ul&gt;
                  &lt;li&gt;{@code 2  (x - a) / [(b - a)  (c - a)]} if {@code a &lt;= x &lt; c},&lt;/li&gt;
                  &lt;li&gt;{@code 2 / (b - a)} if {@code x = c},&lt;/li&gt;
                  &lt;li&gt;{@code 2  (b - x) / [(b - a)  (b - c)]} if {@code c &lt; x &lt;= b},&lt;/li&gt;
                  &lt;li&gt;{@code 0} otherwise.
                  &lt;/ul&gt;                
            </javadoc>
            <method name="density" type="double" line="105">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="106"/>
                <scope line="109">
                    <declaration name="divident" type="double" line="110"/>
                    <declaration name="divisor" type="double" line="111"/>
                </scope>
                <scope line="114"/>
                <scope line="117">
                    <declaration name="divident" type="double" line="118"/>
                    <declaration name="divisor" type="double" line="119"/>
                </scope>
            </method>
            <javadoc line="124">
                {@inheritDoc}For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the
                  CDF is given by
                  &lt;ul&gt;
                  &lt;li&gt;{@code 0} if {@code x &lt; a},&lt;/li&gt;
                  &lt;li&gt;{@code (x - a)^2 / [(b - a)  (c - a)]} if {@code a &lt;= x &lt; c},&lt;/li&gt;
                  &lt;li&gt;{@code (c - a) / (b - a)} if {@code x = c},&lt;/li&gt;
                  &lt;li&gt;{@code 1 - (b - x)^2 / [(b - a)  (b - c)]} if {@code c &lt; x &lt;= b},&lt;/li&gt;
                  &lt;li&gt;{@code 1} if {@code x &gt; b}.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="135">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="136"/>
                <scope line="139">
                    <declaration name="divident" type="double" line="140"/>
                    <declaration name="divisor" type="double" line="141"/>
                </scope>
                <scope line="144"/>
                <scope line="147">
                    <declaration name="divident" type="double" line="148"/>
                    <declaration name="divisor" type="double" line="149"/>
                </scope>
            </method>
            <javadoc line="154">
                {@inheritDoc}For lower limit {@code a}, upper limit {@code b}, and mode {@code c},
                  the mean is {@code (a + b + c) / 3}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="158"/>
            <javadoc line="161">
                {@inheritDoc}For lower limit {@code a}, upper limit {@code b}, and mode {@code c},
                  the variance is {@code (a^2 + b^2 + c^2 - a  b - a  c - b  c) / 18}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="165"/>
            <javadoc line="168">
                {@inheritDoc}The lower bound of the support is equal to the lower limit parameter{@code a} of the distribution.                
                <return>
                    lower bound of the support                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="172"/>
            <javadoc line="175">
                {@inheritDoc}The upper bound of the support is equal to the upper limit parameter{@code b} of the distribution.                
                <return>
                    upper bound of the support                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="179"/>
            <javadoc line="182">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="185"/>
            <javadoc line="188">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="191"/>
            <javadoc line="194">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="198"/>
            <method name="inverseCumulativeProbability" type="double" line="201">
                <params>
                    <param name="p" type="double"/>
                </params>
                <scope line="202"/>
                <scope line="205"/>
                <scope line="208"/>
                <scope line="211"/>
            </method>
        </class>
    </source>