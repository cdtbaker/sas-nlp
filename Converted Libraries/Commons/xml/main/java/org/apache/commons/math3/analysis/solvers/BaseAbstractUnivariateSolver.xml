<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="BaseAbstractUnivariateSolver" line="10">
            <type_params>
                <type_param name="FUNC"/>
            </type_params>
            <implements interface="BaseUnivariateSolver">
                <type_params>
                    <type_param name="FUNC"/>
                </type_params>
            </implements>
            <javadoc line="10">
                Provide a default implementation for several functions useful to generic
                  solvers.                
                <param>
                    <FUNC>
                      Type of function to solve.                    
                </param>
                <since>
                    2.0                    
                </since>
                <version>
                    $Id: BaseAbstractUnivariateSolver.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_RELATIVE_ACCURACY" type="double" line="19"/>
            <javadoc line="19">
                Default relative accuracy.                
            </javadoc>
            <declaration name="DEFAULT_FUNCTION_VALUE_ACCURACY" type="double" line="23"/>
            <javadoc line="23">
                Default function value accuracy.                
            </javadoc>
            <declaration name="functionValueAccuracy" type="double" line="27"/>
            <javadoc line="27">
                Function value accuracy.                
            </javadoc>
            <declaration name="absoluteAccuracy" type="double" line="31"/>
            <javadoc line="31">
                Absolute accuracy.                
            </javadoc>
            <declaration name="relativeAccuracy" type="double" line="35"/>
            <javadoc line="35">
                Relative accuracy.                
            </javadoc>
            <declaration name="evaluations" type="Incrementor" line="39"/>
            <javadoc line="39">
                Evaluations counter.                
            </javadoc>
            <declaration name="searchMin" type="double" line="43"/>
            <javadoc line="43">
                Lower end of search interval.                
            </javadoc>
            <declaration name="searchMax" type="double" line="47"/>
            <javadoc line="47">
                Higher end of search interval.                
            </javadoc>
            <declaration name="searchStart" type="double" line="51"/>
            <javadoc line="51">
                Initial guess.                
            </javadoc>
            <declaration name="function" type="FUNC" line="55"/>
            <javadoc line="55">
                Function to solve.                
            </javadoc>
            <javadoc line="59">
                Construct a solver with given absolute accuracy.                
                <param>
                    absoluteAccuracy Maximum absolute error.                    
                </param>
            </javadoc>
            <method name="BaseAbstractUnivariateSolver" type="constructor" line="63">
                <params>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="66">
                Construct a solver with given accuracies.                
                <param>
                    relativeAccuracy Maximum relative error.                    
                </param>
                <param>
                    absoluteAccuracy Maximum absolute error.                    
                </param>
            </javadoc>
            <method name="BaseAbstractUnivariateSolver" type="constructor" line="71">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="74">
                Construct a solver with given accuracies.                
                <param>
                    relativeAccuracy Maximum relative error.                    
                </param>
                <param>
                    absoluteAccuracy Maximum absolute error.                    
                </param>
                <param>
                    functionValueAccuracy Maximum function value error.                    
                </param>
            </javadoc>
            <method name="BaseAbstractUnivariateSolver" type="constructor" line="80">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="functionValueAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="85">
                {@inheritDoc}                
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="88"/>
            <javadoc line="91">
                {@inheritDoc}                
            </javadoc>
            <method name="getEvaluations" type="int" line="94"/>
            <javadoc line="97">
                @return the lower end of the search interval.                
            </javadoc>
            <method name="getMin" type="double" line="100"/>
            <javadoc line="103">
                @return the higher end of the search interval.                
            </javadoc>
            <method name="getMax" type="double" line="106"/>
            <javadoc line="109">
                @return the initial guess.                
            </javadoc>
            <method name="getStartValue" type="double" line="112"/>
            <javadoc line="115">
                {@inheritDoc}                
            </javadoc>
            <method name="getAbsoluteAccuracy" type="double" line="118"/>
            <javadoc line="121">
                {@inheritDoc}                
            </javadoc>
            <method name="getRelativeAccuracy" type="double" line="124"/>
            <javadoc line="127">
                {@inheritDoc}                
            </javadoc>
            <method name="getFunctionValueAccuracy" type="double" line="130"/>
            <javadoc line="133">
                Compute the objective function value.                
                <param>
                    point Point at which the objective function must be evaluated.                    
                </param>
                <return>
                    the objective function value at specified point.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of evaluations
                      is exceeded.                    
                </throws>
            </javadoc>
            <method name="computeObjectiveValue" type="double" line="140">
                <params>
                    <param name="point" type="double"/>
                </params>
            </method>
            <javadoc line="144">
                Prepare for computation.
                  Subclasses must call this method if they override any of the{@code solve} methods.                
                <param>
                    f Function to solve.                    
                </param>
                <param>
                    min Lower bound for the interval.                    
                </param>
                <param>
                    max Upper bound for the interval.                    
                </param>
                <param>
                    startValue Start value to use.                    
                </param>
                <param>
                    maxEval Maximum number of evaluations.                    
                </param>
                <exception>
                    NullArgumentException if f is null                    
                </exception>
            </javadoc>
            <method name="setup" type="void" line="154">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="startValue" type="double"/>
                </params>
            </method>
            <javadoc line="163">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="166">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="startValue" type="double"/>
                </params>
            </method>
            <javadoc line="170">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="173">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
            </method>
            <javadoc line="176">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="179">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="startValue" type="double"/>
                </params>
            </method>
            <method name="doSolve" type="double" line="182"/>
            <javadoc line="182">
                Method for implementing actual optimization algorithms in derived
                  classes.                
                <return>
                    the root.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of evaluations
                      is exceeded.                    
                </throws>
                <throws>
                    NoBracketingException if the initial search interval does not bracket
                      a root and the solver requires it.                    
                </throws>
            </javadoc>
            <javadoc line="192">
                Check whether the function takes opposite signs at the endpoints.                
                <param>
                    lower Lower endpoint.                    
                </param>
                <param>
                    upper Upper endpoint.                    
                </param>
                <return>
                    {@code true} if the function values have opposite signs at the
                      given points.                    
                </return>
            </javadoc>
            <method name="isBracketing" type="boolean" line="199">
                <params>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
            </method>
            <javadoc line="202">
                Check whether the arguments form a (strictly) increasing sequence.                
                <param>
                    start First number.                    
                </param>
                <param>
                    mid Second number.                    
                </param>
                <param>
                    end Third number.                    
                </param>
                <return>
                    {@code true} if the arguments form an increasing sequence.                    
                </return>
            </javadoc>
            <method name="isSequence" type="boolean" line="209">
                <params>
                    <param name="start" type="double"/>
                    <param name="mid" type="double"/>
                    <param name="end" type="double"/>
                </params>
            </method>
            <javadoc line="212">
                Check that the endpoints specify an interval.                
                <param>
                    lower Lower endpoint.                    
                </param>
                <param>
                    upper Upper endpoint.                    
                </param>
                <throws>
                    NumberIsTooLargeException if {@code lower >= upper}.                    
                </throws>
            </javadoc>
            <method name="verifyInterval" type="void" line="218">
                <params>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
            </method>
            <javadoc line="221">
                Check that {@code lower &lt; initial &lt; upper}.                
                <param>
                    lower Lower endpoint.                    
                </param>
                <param>
                    initial Initial value.                    
                </param>
                <param>
                    upper Upper endpoint.                    
                </param>
                <throws>
                    NumberIsTooLargeException if {@code lower >= initial} or{@code initial >= upper}.                    
                </throws>
            </javadoc>
            <method name="verifySequence" type="void" line="228">
                <params>
                    <param name="lower" type="double"/>
                    <param name="initial" type="double"/>
                    <param name="upper" type="double"/>
                </params>
            </method>
            <javadoc line="231">
                Check that the endpoints specify an interval and the function takes
                  opposite signs at the endpoints.                
                <param>
                    lower Lower endpoint.                    
                </param>
                <param>
                    upper Upper endpoint.                    
                </param>
                <throws>
                    NullArgumentException if the function has not been set.                    
                </throws>
                <throws>
                    NoBracketingException if the function has the same sign at
                      the endpoints.                    
                </throws>
            </javadoc>
            <method name="verifyBracketing" type="void" line="240">
                <params>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
            </method>
            <javadoc line="243">
                Increment the evaluation count by one.
                  Method {@link #computeObjectiveValue(double)} calls this method internally.
                  It is provided for subclasses that do not exclusively use{@code computeObjectiveValue} to solve the function.
                  See e.g. {@link AbstractUnivariateDifferentiableSolver}.                
                <throws>
                    TooManyEvaluationsException when the allowed number of function
                      evaluations has been exhausted.                    
                </throws>
            </javadoc>
            <method name="incrementEvaluationCount" type="void" line="251">
                <scope line="252"/>
                <scope line="255"/>
            </method>
        </class>
    </source>