<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="BaseAbstractUnivariateSolver" line="29">
            <type_params>
                <type_param name="FUNC"/>
            </type_params>
            <implements interface="BaseUnivariateSolver">
                <type_params>
                    <type_param name="FUNC"/>
                </type_params>
            </implements>
            <javadoc line="29">
                Provide a default implementation for several functions useful to generic
                  solvers.                
                <param>
                    &lt;FUNC&gt;
                       Type of function to solve.                    
                </param>
                <since>
                    2.0                    
                </since>
                <version>
                    $Id: BaseAbstractUnivariateSolver.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_RELATIVE_ACCURACY" type="double" line="40"/>
            <javadoc line="40">
                Default relative accuracy.                
            </javadoc>
            <declaration name="DEFAULT_FUNCTION_VALUE_ACCURACY" type="double" line="42"/>
            <javadoc line="42">
                Default function value accuracy.                
            </javadoc>
            <declaration name="functionValueAccuracy" type="double" line="44"/>
            <javadoc line="44">
                Function value accuracy.                
            </javadoc>
            <declaration name="absoluteAccuracy" type="double" line="46"/>
            <javadoc line="46">
                Absolute accuracy.                
            </javadoc>
            <declaration name="relativeAccuracy" type="double" line="48"/>
            <javadoc line="48">
                Relative accuracy.                
            </javadoc>
            <declaration name="evaluations" type="Incrementor" line="50"/>
            <javadoc line="50">
                Evaluations counter.                
            </javadoc>
            <declaration name="searchMin" type="double" line="52"/>
            <javadoc line="52">
                Lower end of search interval.                
            </javadoc>
            <declaration name="searchMax" type="double" line="54"/>
            <javadoc line="54">
                Higher end of search interval.                
            </javadoc>
            <declaration name="searchStart" type="double" line="56"/>
            <javadoc line="56">
                Initial guess.                
            </javadoc>
            <declaration name="function" type="FUNC" line="58"/>
            <javadoc line="58">
                Function to solve.                
            </javadoc>
            <javadoc line="61">
                Construct a solver with given absolute accuracy.                
                <param>
                    absoluteAccuracy Maximum absolute error.                    
                </param>
            </javadoc>
            <method name="BaseAbstractUnivariateSolver" type="constructor" line="66">
                <params>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="72">
                Construct a solver with given accuracies.                
                <param>
                    relativeAccuracy Maximum relative error.                    
                </param>
                <param>
                    absoluteAccuracy Maximum absolute error.                    
                </param>
            </javadoc>
            <method name="BaseAbstractUnivariateSolver" type="constructor" line="79">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="85">
                Construct a solver with given accuracies.                
                <param>
                    relativeAccuracy Maximum relative error.                    
                </param>
                <param>
                    absoluteAccuracy Maximum absolute error.                    
                </param>
                <param>
                    functionValueAccuracy Maximum function value error.                    
                </param>
            </javadoc>
            <method name="BaseAbstractUnivariateSolver" type="constructor" line="94">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="functionValueAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="100">
                {@inheritDoc}                
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="101"/>
            <javadoc line="104">
                {@inheritDoc}                
            </javadoc>
            <method name="getEvaluations" type="int" line="105"/>
            <javadoc line="108">
                @return the lower end of the search interval.                
            </javadoc>
            <method name="getMin" type="double" line="111"/>
            <javadoc line="114">
                @return the higher end of the search interval.                
            </javadoc>
            <method name="getMax" type="double" line="117"/>
            <javadoc line="120">
                @return the initial guess.                
            </javadoc>
            <method name="getStartValue" type="double" line="123"/>
            <javadoc line="126">
                {@inheritDoc}                
            </javadoc>
            <method name="getAbsoluteAccuracy" type="double" line="129"/>
            <javadoc line="132">
                {@inheritDoc}                
            </javadoc>
            <method name="getRelativeAccuracy" type="double" line="135"/>
            <javadoc line="138">
                {@inheritDoc}                
            </javadoc>
            <method name="getFunctionValueAccuracy" type="double" line="141"/>
            <javadoc line="145">
                Compute the objective function value.                
                <param>
                    point Point at which the objective function must be evaluated.                    
                </param>
                <return>
                    the objective function value at specified point.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of evaluations
                      is exceeded.                    
                </throws>
            </javadoc>
            <method name="computeObjectiveValue" type="double" line="154">
                <params>
                    <param name="point" type="double"/>
                </params>
            </method>
            <javadoc line="159">
                Prepare for computation.
                  Subclasses must call this method if they override any of the{@code solve} methods.                
                <param>
                    f Function to solve.                    
                </param>
                <param>
                    min Lower bound for the interval.                    
                </param>
                <param>
                    max Upper bound for the interval.                    
                </param>
                <param>
                    startValue Start value to use.                    
                </param>
                <param>
                    maxEval Maximum number of evaluations.                    
                </param>
                <exception>
                    NullArgumentException if f is null                    
                </exception>
            </javadoc>
            <method name="setup" type="void" line="175">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="startValue" type="double"/>
                </params>
                <comment line="177">
                    Checks.                    
                </comment>
                <comment line="180">
                    Reset.                    
                </comment>
            </method>
            <javadoc line="188">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="191">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="startValue" type="double"/>
                </params>
                <comment line="193">
                    Initialization.                    
                </comment>
                <comment line="196">
                    Perform computation.                    
                </comment>
            </method>
            <javadoc line="199">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="200">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
            </method>
            <javadoc line="204">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="207">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="startValue" type="double"/>
                </params>
            </method>
            <method name="doSolve" type="double" line="211"/>
            <javadoc line="211">
                Method for implementing actual optimization algorithms in derived
                  classes.                
                <return>
                    the root.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of evaluations
                      is exceeded.                    
                </throws>
                <throws>
                    NoBracketingException if the initial search interval does not bracket
                      a root and the solver requires it.                    
                </throws>
            </javadoc>
            <javadoc line="224">
                Check whether the function takes opposite signs at the endpoints.                
                <param>
                    lower Lower endpoint.                    
                </param>
                <param>
                    upper Upper endpoint.                    
                </param>
                <return>
                    {@code true} if the function values have opposite signs at the
                      given points.                    
                </return>
            </javadoc>
            <method name="isBracketing" type="boolean" line="233">
                <params>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
            </method>
            <javadoc line="237">
                Check whether the arguments form a (strictly) increasing sequence.                
                <param>
                    start First number.                    
                </param>
                <param>
                    mid Second number.                    
                </param>
                <param>
                    end Third number.                    
                </param>
                <return>
                    {@code true} if the arguments form an increasing sequence.                    
                </return>
            </javadoc>
            <method name="isSequence" type="boolean" line="247">
                <params>
                    <param name="start" type="double"/>
                    <param name="mid" type="double"/>
                    <param name="end" type="double"/>
                </params>
            </method>
            <javadoc line="251">
                Check that the endpoints specify an interval.                
                <param>
                    lower Lower endpoint.                    
                </param>
                <param>
                    upper Upper endpoint.                    
                </param>
                <throws>
                    NumberIsTooLargeException if {@code lower &gt;= upper}.                    
                </throws>
            </javadoc>
            <method name="verifyInterval" type="void" line="260">
                <params>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
            </method>
            <javadoc line="264">
                Check that {@code lower &lt; initial &lt; upper}.                
                <param>
                    lower Lower endpoint.                    
                </param>
                <param>
                    initial Initial value.                    
                </param>
                <param>
                    upper Upper endpoint.                    
                </param>
                <throws>
                    NumberIsTooLargeException if {@code lower &gt;= initial} or{@code initial &gt;= upper}.                    
                </throws>
            </javadoc>
            <method name="verifySequence" type="void" line="276">
                <params>
                    <param name="lower" type="double"/>
                    <param name="initial" type="double"/>
                    <param name="upper" type="double"/>
                </params>
            </method>
            <javadoc line="280">
                Check that the endpoints specify an interval and the function takes
                  opposite signs at the endpoints.                
                <param>
                    lower Lower endpoint.                    
                </param>
                <param>
                    upper Upper endpoint.                    
                </param>
                <throws>
                    NullArgumentException if the function has not been set.                    
                </throws>
                <throws>
                    NoBracketingException if the function has the same sign at
                      the endpoints.                    
                </throws>
            </javadoc>
            <method name="verifyBracketing" type="void" line="293">
                <params>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
            </method>
            <javadoc line="297">
                Increment the evaluation count by one.
                  Method {@link #computeObjectiveValue(double)} calls this method internally.
                  It is provided for subclasses that do not exclusively use{@code computeObjectiveValue} to solve the function.
                  See e.g. {@link AbstractUnivariateDifferentiableSolver}.                
                <throws>
                    TooManyEvaluationsException when the allowed number of function
                      evaluations has been exhausted.                    
                </throws>
            </javadoc>
            <method name="incrementEvaluationCount" type="void" line="308">
                <scope line="309"/>
                <scope line="311"/>
            </method>
        </class>
    </source>