<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.special">
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.util.ContinuedFraction"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Beta" line="24">
            <javadoc line="24">
                &lt;p&gt;
                  This is a utility class that provides computation methods related to the
                  Beta family of functions.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Implementation of {@link #logBeta(double,double)} is based on the
                  algorithms described in
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://dx.doi.org/10.1145/22721.23109&quot;&gt;Didonato and Morris
                  (1986)&lt;/a&gt;, &lt;em&gt;Computation of the Incomplete Gamma Function Ratios
                  and their Inverse&lt;/em&gt;, TOMS 12(4), 377-393,&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;http://dx.doi.org/10.1145/131766.131776&quot;&gt;Didonato and Morris
                  (1992)&lt;/a&gt;, &lt;em&gt;Algorithm 708: Significant Digit Computation of the
                  Incomplete Beta Function Ratios&lt;/em&gt;, TOMS 18(3), 360-373,&lt;/li&gt;
                  &lt;/ul&gt;
                  and implemented in the
                  &lt;a href=&quot;http://www.dtic.mil/docs/citations/ADA476840&quot;&gt;NSWC Library of Mathematical Functions&lt;/a&gt;,
                  available
                  &lt;a href=&quot;http://www.ualberta.ca/CNS/RESEARCH/Software/NumericalNSWC/site.html&quot;&gt;here&lt;/a&gt;.
                  This library is &quot;approved for public release&quot;, and the
                  &lt;a href=&quot;http://www.dtic.mil/dtic/pdf/announcements/CopyrightGuidance.pdf&quot;&gt;Copyright guidance&lt;/a&gt;
                  indicates that unless otherwise stated in the code, all FORTRAN functions in
                  this library are license free. Since no such notice appears in the code these
                  functions can safely be ported to Commons-Math.
                  &lt;/p&gt;                
                <version>
                    $Id: Beta.java 1546350 2013-11-28 11:41:12Z erans $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="55"/>
            <javadoc line="55">
                Maximum allowed numerical error.                
            </javadoc>
            <declaration name="HALF_LOG_TWO_PI" type="double" line="58"/>
            <javadoc line="58">
                The constant value of ½log 2π.                
            </javadoc>
            <declaration name="DELTA" type="double[]" line="61"/>
            <javadoc line="61">
                &lt;p&gt;
                  The coefficients of the series expansion of the Δ function. This function
                  is defined as follows
                  &lt;/p&gt;
                  &lt;center&gt;Δ(x) = log Γ(x) - (x - 0.5) log a + a - 0.5 log 2π,&lt;/center&gt;
                  &lt;p&gt;
                  see equation (23) in Didonato and Morris (1992). The series expansion,
                  which applies for x ≥ 10, reads
                  &lt;/p&gt;
                  &lt;pre&gt;
                  14
                  ====
                  1  \                2 n
                  Δ(x) = ---  &gt;    d  (10 / x)
                  x  /      n
                  ====
                  n = 0
                  &lt;pre&gt;                
            </javadoc>
            <javadoc line="99">
                Default constructor.  Prohibit instantiation.                
            </javadoc>
            <method name="Beta" type="constructor" line="102"/>
            <javadoc line="104">
                Returns the
                  &lt;a href=&quot;http://mathworld.wolfram.com/RegularizedBetaFunction.html&quot;&gt;
                  regularized beta function&lt;/a&gt; I(x, a, b).                
                <param>
                    x Value.                    
                </param>
                <param>
                    a Parameter {@code a}.                    
                </param>
                <param>
                    b Parameter {@code b}.                    
                </param>
                <return>
                    the regularized beta function I(x, a, b).                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.                    
                </throws>
            </javadoc>
            <method name="regularizedBeta" type="double" line="116">
                <params>
                    <param name="x" type="double"/>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
            </method>
            <javadoc line="120">
                Returns the
                  &lt;a href=&quot;http://mathworld.wolfram.com/RegularizedBetaFunction.html&quot;&gt;
                  regularized beta function&lt;/a&gt; I(x, a, b).                
                <param>
                    x Value.                    
                </param>
                <param>
                    a Parameter {@code a}.                    
                </param>
                <param>
                    b Parameter {@code b}.                    
                </param>
                <param>
                    epsilon When the absolute value of the nth item in the
                      series is less than epsilon the approximation ceases to calculate
                      further elements in the series.                    
                </param>
                <return>
                    the regularized beta function I(x, a, b)                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.                    
                </throws>
            </javadoc>
            <method name="regularizedBeta" type="double" line="137">
                <params>
                    <param name="x" type="double"/>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="141">
                Returns the regularized beta function I(x, a, b).                
                <param>
                    x the value.                    
                </param>
                <param>
                    a Parameter {@code a}.                    
                </param>
                <param>
                    b Parameter {@code b}.                    
                </param>
                <param>
                    maxIterations Maximum number of &quot;iterations&quot; to complete.                    
                </param>
                <return>
                    the regularized beta function I(x, a, b)                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.                    
                </throws>
            </javadoc>
            <method name="regularizedBeta" type="double" line="154">
                <params>
                    <param name="x" type="double"/>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="158">
                Returns the regularized beta function I(x, a, b).
                  The implementation of this method is based on:
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/RegularizedBetaFunction.html&quot;&gt;
                  Regularized Beta Function&lt;/a&gt;.&lt;/li&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://functions.wolfram.com/06.21.10.0001.01&quot;&gt;
                  Regularized Beta Function&lt;/a&gt;.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    x the value.                    
                </param>
                <param>
                    a Parameter {@code a}.                    
                </param>
                <param>
                    b Parameter {@code b}.                    
                </param>
                <param>
                    epsilon When the absolute value of the nth item in the
                      series is less than epsilon the approximation ceases to calculate
                      further elements in the series.                    
                </param>
                <param>
                    maxIterations Maximum number of &quot;iterations&quot; to complete.                    
                </param>
                <return>
                    the regularized beta function I(x, a, b)                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.                    
                </throws>
            </javadoc>
            <method name="regularizedBeta" type="double" line="184">
                <params>
                    <param name="x" type="double"/>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <comment line="206">
                    even                    
                </comment>
                <declaration name="ret" type="double" line="185"/>
                <scope line="193"/>
                <scope line="196"/>
                <scope line="198">
                    <anonymous_class line="199">
                        <method name="getB" type="double" line="202">
                            <params>
                                <param name="n" type="int"/>
                                <param name="x" type="double"/>
                            </params>
                            <comment line="206">
                                even                                
                            </comment>
                            <declaration name="ret" type="double" line="203"/>
                            <declaration name="m" type="double" line="204"/>
                            <scope line="205"/>
                            <scope line="209"/>
                        </method>
                        <method name="getA" type="double" line="218">
                            <params>
                                <param name="n" type="int"/>
                                <param name="x" type="double"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="fraction" type="ContinuedFraction" line="199"/>
                </scope>
            </method>
            <javadoc line="230">
                Returns the natural logarithm of the beta function B(a, b).
                  The implementation of this method is based on:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/BetaFunction.html&quot;&gt;
                  Beta Function&lt;/a&gt;, equation (1).&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    a Parameter {@code a}.                    
                </param>
                <param>
                    b Parameter {@code b}.                    
                </param>
                <param>
                    epsilon This parameter is ignored.                    
                </param>
                <param>
                    maxIterations This parameter is ignored.                    
                </param>
                <return>
                    log(B(a, b)).                    
                </return>
                <deprecated>
                    as of version 3.1, this method is deprecated as the
                      computation of the beta function is no longer iterative; it will be
                      removed in version 4.0. Current implementation of this method
                      internally calls {@link #logBeta(double,double)}.                    
                </deprecated>
            </javadoc>
            <method name="logBeta" type="double" line="252">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="258">
                Returns the value of log Γ(a + b) for 1 ≤ a, b ≤ 2. Based on the
                  &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; double precision
                  implementation, {@code DGSMLN}. In {@code BetaTest.testLogGammaSum()},
                  this private method is accessed through reflection.                
                <param>
                    a First argument.                    
                </param>
                <param>
                    b Second argument.                    
                </param>
                <return>
                    the value of {@code log(Gamma(a + b))}.                    
                </return>
                <throws>
                    OutOfRangeException if {@code a} or {@code b} is lower than{@code 1.0} or greater than {@code 2.0}.                    
                </throws>
            </javadoc>
            <method name="logGammaSum" type="double" line="271">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <scope line="273"/>
                <scope line="276"/>
                <declaration name="x" type="double" line="280"/>
                <scope line="281"/>
                <scope line="283"/>
                <scope line="285"/>
            </method>
            <javadoc line="290">
                Returns the value of log[Γ(b) / Γ(a + b)] for a ≥ 0 and b ≥ 10. Based on
                  the &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; double precision
                  implementation, {@code DLGDIV}. In{@code BetaTest.testLogGammaMinusLogGammaSum()}, this private method is
                  accessed through reflection.                
                <param>
                    a First argument.                    
                </param>
                <param>
                    b Second argument.                    
                </param>
                <return>
                    the value of {@code log(Gamma(b) / Gamma(a + b))}.                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code a &lt; 0.0} or {@code b &lt; 10.0}.                    
                </throws>
            </javadoc>
            <method name="logGammaMinusLogGammaSum" type="double" line="304">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <comment line="314">
                    d = a + b - 0.5                    
                </comment>
                <scope line="306"/>
                <scope line="309"/>
                <declaration name="d" type="double" line="316"/>
                <declaration name="w" type="double" line="317"/>
                <scope line="318"/>
                <scope line="321"/>
                <declaration name="u" type="double" line="326"/>
                <declaration name="v" type="double" line="327"/>
            </method>
            <javadoc line="332">
                Returns the value of Δ(b) - Δ(a + b), with 0 ≤ a ≤ b and b ≥ 10. Based
                  on equations (26), (27) and (28) in Didonato and Morris (1992).                
                <param>
                    a First argument.                    
                </param>
                <param>
                    b Second argument.                    
                </param>
                <return>
                    the value of {@code Delta(b) - Delta(a + b)}                    
                </return>
                <throws>
                    OutOfRangeException if {@code a &lt; 0} or {@code a &gt; b}                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code b &lt; 10}                    
                </throws>
            </javadoc>
            <method name="deltaMinusDeltaSum" type="double" line="344">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <comment line="358">
                    s[i] = 1 + q + ... - q(2  i)                    
                </comment>
                <comment line="366">
                    w = Delta(b) - Delta(a + b)                    
                </comment>
                <scope line="346"/>
                <scope line="349"/>
                <declaration name="h" type="double" line="353"/>
                <declaration name="p" type="double" line="354"/>
                <declaration name="q" type="double" line="355"/>
                <declaration name="q2" type="double" line="356"/>
                <declaration name="s" type="double[]" line="360"/>
                <scope line="362"/>
                <declaration name="sqrtT" type="double" line="368"/>
                <declaration name="t" type="double" line="369"/>
                <declaration name="w" type="double" line="370"/>
                <scope line="371"/>
            </method>
            <javadoc line="377">
                Returns the value of Δ(p) + Δ(q) - Δ(p + q), with p, q ≥ 10. Based on
                  the &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; double precision
                  implementation, {@code DBCORR}. In{@code BetaTest.testSumDeltaMinusDeltaSum()}, this private method is
                  accessed through reflection.                
                <param>
                    p First argument.                    
                </param>
                <param>
                    q Second argument.                    
                </param>
                <return>
                    the value of {@code Delta(p) + Delta(q) - Delta(p + q)}.                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code p &lt; 10.0} or {@code q &lt; 10.0}.                    
                </throws>
            </javadoc>
            <method name="sumDeltaMinusDeltaSum" type="double" line="390">
                <params>
                    <param name="p" type="double"/>
                    <param name="q" type="double"/>
                </params>
                <scope line="392"/>
                <scope line="395"/>
                <declaration name="a" type="double" line="399"/>
                <declaration name="b" type="double" line="400"/>
                <declaration name="sqrtT" type="double" line="401"/>
                <declaration name="t" type="double" line="402"/>
                <declaration name="z" type="double" line="403"/>
                <scope line="404"/>
            </method>
            <javadoc line="410">
                Returns the value of log B(p, q) for 0 ≤ x ≤ 1 and p, q &gt; 0. Based on the
                  &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; implementation,{@code DBETLN}.                
                <param>
                    p First argument.                    
                </param>
                <param>
                    q Second argument.                    
                </param>
                <return>
                    the value of {@code log(Beta(p, q))}, {@code NaN} if{@code p &lt;= 0} or {@code q &lt;= 0}.                    
                </return>
            </javadoc>
            <method name="logBeta" type="double" line="420">
                <params>
                    <param name="p" type="double"/>
                    <param name="q" type="double"/>
                </params>
                <comment line="504">
                    The following command is the original NSWC implementation.
                     return Gamma.logGamma(a) +
                     (Gamma.logGamma(b) - Gamma.logGamma(a + b));
                     The following command turns out to be more accurate.                    
                </comment>
                <scope line="421"/>
                <declaration name="a" type="double" line="425"/>
                <declaration name="b" type="double" line="426"/>
                <scope line="427">
                    <declaration name="w" type="double" line="428"/>
                    <declaration name="h" type="double" line="429"/>
                    <declaration name="c" type="double" line="430"/>
                    <declaration name="u" type="double" line="431"/>
                    <declaration name="v" type="double" line="432"/>
                    <scope line="433"/>
                    <scope line="435"/>
                </scope>
                <scope line="438">
                    <scope line="439">
                        <declaration name="n" type="int" line="440"/>
                        <declaration name="prod" type="double" line="441"/>
                        <declaration name="ared" type="double" line="442"/>
                        <scope line="443"/>
                    </scope>
                    <scope line="450">
                        <declaration name="prod1" type="double" line="451"/>
                        <declaration name="ared" type="double" line="452"/>
                        <scope line="453">
                            <declaration name="h" type="double" line="455"/>
                        </scope>
                        <scope line="458">
                            <declaration name="prod2" type="double" line="459"/>
                            <declaration name="bred" type="double" line="460"/>
                            <scope line="461"/>
                        </scope>
                        <scope line="470"/>
                    </scope>
                </scope>
                <scope line="476">
                    <scope line="477">
                        <scope line="478">
                            <declaration name="prod" type="double" line="479"/>
                            <declaration name="bred" type="double" line="480"/>
                            <scope line="481"/>
                        </scope>
                        <scope line="489"/>
                    </scope>
                    <scope line="493"/>
                </scope>
                <scope line="498">
                    <scope line="499"/>
                    <scope line="502"/>
                </scope>
            </method>
        </class>
    </source>