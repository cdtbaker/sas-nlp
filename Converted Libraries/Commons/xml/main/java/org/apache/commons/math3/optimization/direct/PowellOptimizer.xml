<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optimization.MultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optimization.univariate.BracketFinder"/>
        <import package="org.apache.commons.math3.optimization.univariate.BrentOptimizer"/>
        <import package="org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair"/>
        <import package="org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker"/>
        <class name="PowellOptimizer" line="16">
            <extends class="BaseAbstractMultivariateOptimizer">
                <type_params>
                    <type_param name="MultivariateFunction"/>
                </type_params>
            </extends>
            <implements interface="MultivariateOptimizer"/>
            <javadoc line="16">
                Powell algorithm.
                  This code is translated and adapted from the Python version of this
                  algorithm (as implemented in module {@code optimize.py} v0.5 of
                  &lt;em&gt;SciPy&lt;/em&gt;).
                  &lt;br/&gt;
                  The default stopping criterion is based on the differences of the
                  function value between two successive iterations. It is however possible
                  to define a custom convergence checker that might terminate the algorithm
                  earlier.
                  &lt;br/&gt;
                  The internal line search optimizer is a {@link BrentOptimizer} with a
                  convergence checker set to {@link SimpleUnivariateValueChecker}.                
                <version>
                    $Id: PowellOptimizer.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <declaration name="MIN_RELATIVE_TOLERANCE" type="double" line="34"/>
            <javadoc line="34">
                Minimum relative tolerance.                
            </javadoc>
            <declaration name="relativeThreshold" type="double" line="38"/>
            <javadoc line="38">
                Relative threshold.                
            </javadoc>
            <declaration name="absoluteThreshold" type="double" line="42"/>
            <javadoc line="42">
                Absolute threshold.                
            </javadoc>
            <declaration name="line" type="LineSearch" line="46"/>
            <javadoc line="46">
                Line search.                
            </javadoc>
            <javadoc line="50">
                This constructor allows to specify a user-defined convergence checker,
                  in addition to the parameters that control the default convergence
                  checking procedure.
                  &lt;br/&gt;
                  The internal line search tolerances are set to the square-root of their
                  corresponding value in the multivariate optimizer.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <param>
                    checker Convergence checker.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel < 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="63">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                </params>
            </method>
            <javadoc line="66">
                This constructor allows to specify a user-defined convergence checker,
                  in addition to the parameters that control the default convergence
                  checking procedure and the line search tolerances.                
                <param>
                    rel Relative threshold for this optimizer.                    
                </param>
                <param>
                    abs Absolute threshold for this optimizer.                    
                </param>
                <param>
                    lineRel Relative threshold for the internal line search optimizer.                    
                </param>
                <param>
                    lineAbs Absolute threshold for the internal line search optimizer.                    
                </param>
                <param>
                    checker Convergence checker.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel < 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="78">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="lineRel" type="double"/>
                    <param name="lineAbs" type="double"/>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                </params>
                <scope line="80"/>
                <scope line="83"/>
            </method>
            <javadoc line="90">
                The parameters control the default convergence checking procedure.
                  &lt;br/&gt;
                  The internal line search tolerances are set to the square-root of their
                  corresponding value in the multivariate optimizer.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel < 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="100">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                </params>
            </method>
            <javadoc line="103">
                Builds an instance with the default convergence checking procedure.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <param>
                    lineRel Relative threshold for the internal line search optimizer.                    
                </param>
                <param>
                    lineAbs Absolute threshold for the internal line search optimizer.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel < 2  Math.ulp(1d)}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="113">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="lineRel" type="double"/>
                    <param name="lineAbs" type="double"/>
                </params>
            </method>
            <javadoc line="116">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="119">
                <declaration name="goal" type="GoalType" line="120"/>
                <declaration name="guess" type="double[]" line="121"/>
                <declaration name="n" type="int" line="122"/>
                <declaration name="direc" type="double[][]" line="123"/>
                <scope line="124"/>
                <declaration name="checker" type="ConvergenceChecker&lt;PointValuePair&gt;" line="127"/>
                <declaration name="x" type="double[]" line="128"/>
                <declaration name="fVal" type="double" line="129"/>
                <declaration name="x1" type="double[]" line="130"/>
                <declaration name="iter" type="int" line="131"/>
                <scope line="132">
                    <declaration name="fX" type="double" line="134"/>
                    <declaration name="fX2" type="double" line="135"/>
                    <declaration name="delta" type="double" line="136"/>
                    <declaration name="bigInd" type="int" line="137"/>
                    <declaration name="alphaMin" type="double" line="138"/>
                    <scope line="139">
                        <declaration name="d" type="double[]" line="140"/>
                        <declaration name="optimum" type="UnivariatePointValuePair" line="142"/>
                        <declaration name="result" type="double[][]" line="145"/>
                        <scope line="147"/>
                    </scope>
                    <declaration name="stop" type="boolean" line="152"/>
                    <declaration name="previous" type="PointValuePair" line="153"/>
                    <declaration name="current" type="PointValuePair" line="154"/>
                    <scope line="155"/>
                    <scope line="158">
                        <scope line="159"/>
                        <scope line="162"/>
                    </scope>
                    <declaration name="d" type="double[]" line="166"/>
                    <declaration name="x2" type="double[]" line="167"/>
                    <scope line="168"/>
                    <scope line="174">
                        <declaration name="t" type="double" line="175"/>
                        <declaration name="temp" type="double" line="176"/>
                        <scope line="180">
                            <declaration name="optimum" type="UnivariatePointValuePair" line="181"/>
                            <declaration name="result" type="double[][]" line="184"/>
                            <declaration name="lastInd" type="int" line="186"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="193">
                Compute a new point (in the original space) and a new direction
                  vector, resulting from the line search.                
                <param>
                    p Point used in the line search.                    
                </param>
                <param>
                    d Direction used in the line search.                    
                </param>
                <param>
                    optimum Optimum found by the line search.                    
                </param>
                <return>
                    a 2-element array containing the new point (at index 0) and
                      the new direction (at index 1).                    
                </return>
            </javadoc>
            <method name="newPointAndDirection" type="double[][]" line="202">
                <params>
                    <param name="p" type="double[]"/>
                    <param name="d" type="double[]"/>
                    <param name="optimum" type="double"/>
                </params>
                <declaration name="n" type="int" line="203"/>
                <declaration name="nP" type="double[]" line="204"/>
                <declaration name="nD" type="double[]" line="205"/>
                <scope line="206"/>
                <declaration name="result" type="double[][]" line="210"/>
            </method>
            <class name="LineSearch" line="215">
                <extends class="BrentOptimizer"/>
                <javadoc line="215">
                    Class for finding the minimum of the objective function along a given
                      direction.                    
                </javadoc>
                <declaration name="REL_TOL_UNUSED" type="double" line="220"/>
                <javadoc line="220">
                    Value that will pass the precondition check for {@link BrentOptimizer}but will not pass the convergence check, so that the custom checker
                      will always decide when to stop the line search.                    
                </javadoc>
                <declaration name="ABS_TOL_UNUSED" type="double" line="225"/>
                <javadoc line="225">
                    Value that will pass the precondition check for {@link BrentOptimizer}but will not pass the convergence check, so that the custom checker
                      will always decide when to stop the line search.                    
                </javadoc>
                <declaration name="bracket" type="BracketFinder" line="230"/>
                <javadoc line="230">
                    Automatic bracketing.                    
                </javadoc>
                <javadoc line="234">
                    The &quot;BrentOptimizer&quot; default stopping criterion uses the tolerances
                      to check the domain (point) values, not the function values.
                      We thus create a custom checker to use function values.                    
                    <param>
                        rel Relative threshold.                        
                    </param>
                    <param>
                        abs Absolute threshold.                        
                    </param>
                </javadoc>
                <method name="LineSearch" type="constructor" line="241">
                    <params>
                        <param name="rel" type="double"/>
                        <param name="abs" type="double"/>
                    </params>
                </method>
                <javadoc line="244">
                    Find the minimum of the function {@code f(p + alpha  d)}.                    
                    <param>
                        p Starting point.                        
                    </param>
                    <param>
                        d Search direction.                        
                    </param>
                    <return>
                        the optimum.                        
                    </return>
                    <throws>
                        org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the number of evaluations is exceeded.                        
                    </throws>
                </javadoc>
                <method name="search" type="UnivariatePointValuePair" line="251">
                    <params>
                        <param name="p" type="double[]"/>
                        <param name="d" type="double[]"/>
                    </params>
                    <declaration name="n" type="int" line="252"/>
                    <anonymous_class line="253">
                        <method name="value" type="double" line="254">
                            <params>
                                <param name="alpha" type="double"/>
                            </params>
                            <declaration name="x" type="double[]" line="255"/>
                            <scope line="256"/>
                            <declaration name="obj" type="double" line="259"/>
                        </method>
                    </anonymous_class>
                    <declaration name="f" type="UnivariateFunction" line="253"/>
                    <declaration name="goal" type="GoalType" line="264"/>
                </method>
            </class>
        </class>
    </source>