<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.dfp">
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <class name="DfpField" line="4">
            <implements interface="Field">
                <type_params>
                    <type_param name="Dfp"/>
                </type_params>
            </implements>
            <javadoc line="4">
                Field for Decimal floating point instances.                
                <version>
                    $Id: DfpField.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <declaration name="RoundingMode" type="enum" line="10"/>
            <javadoc line="10">
                Enumerate for rounding modes.                
            </javadoc>
            <scope line="13"/>
            <declaration name="FLAG_INVALID" type="int" line="39"/>
            <javadoc line="39">
                IEEE 854-1987 flag for invalid operation.                
            </javadoc>
            <declaration name="FLAG_DIV_ZERO" type="int" line="43"/>
            <javadoc line="43">
                IEEE 854-1987 flag for division by zero.                
            </javadoc>
            <declaration name="FLAG_OVERFLOW" type="int" line="47"/>
            <javadoc line="47">
                IEEE 854-1987 flag for overflow.                
            </javadoc>
            <declaration name="FLAG_UNDERFLOW" type="int" line="51"/>
            <javadoc line="51">
                IEEE 854-1987 flag for underflow.                
            </javadoc>
            <declaration name="FLAG_INEXACT" type="int" line="55"/>
            <javadoc line="55">
                IEEE 854-1987 flag for inexact result.                
            </javadoc>
            <declaration name="sqr2String" type="String" line="59"/>
            <javadoc line="59">
                High precision string representation of &amp;radic;2.                
            </javadoc>
            <declaration name="sqr2ReciprocalString" type="String" line="63"/>
            <javadoc line="63">
                High precision string representation of &amp;radic;2 / 2.                
            </javadoc>
            <declaration name="sqr3String" type="String" line="67"/>
            <javadoc line="67">
                High precision string representation of &amp;radic;3.                
            </javadoc>
            <declaration name="sqr3ReciprocalString" type="String" line="71"/>
            <javadoc line="71">
                High precision string representation of &amp;radic;3 / 3.                
            </javadoc>
            <declaration name="piString" type="String" line="75"/>
            <javadoc line="75">
                High precision string representation of &amp;pi;.                
            </javadoc>
            <declaration name="eString" type="String" line="79"/>
            <javadoc line="79">
                High precision string representation of e.                
            </javadoc>
            <declaration name="ln2String" type="String" line="83"/>
            <javadoc line="83">
                High precision string representation of ln(2).                
            </javadoc>
            <declaration name="ln5String" type="String" line="87"/>
            <javadoc line="87">
                High precision string representation of ln(5).                
            </javadoc>
            <declaration name="ln10String" type="String" line="91"/>
            <javadoc line="91">
                High precision string representation of ln(10).                
            </javadoc>
            <declaration name="radixDigits" type="int" line="95"/>
            <javadoc line="95">
                The number of radix digits.
                  Note these depend on the radix which is 10000 digits,
                  so each one is equivalent to 4 decimal digits.                
            </javadoc>
            <declaration name="zero" type="Dfp" line="101"/>
            <javadoc line="101">
                A {@link Dfp} with value 0.                
            </javadoc>
            <declaration name="one" type="Dfp" line="105"/>
            <javadoc line="105">
                A {@link Dfp} with value 1.                
            </javadoc>
            <declaration name="two" type="Dfp" line="109"/>
            <javadoc line="109">
                A {@link Dfp} with value 2.                
            </javadoc>
            <declaration name="sqr2" type="Dfp" line="113"/>
            <javadoc line="113">
                A {@link Dfp} with value &amp;radic;2.                
            </javadoc>
            <declaration name="sqr2Split" type="Dfp[]" line="117"/>
            <javadoc line="117">
                A two elements {@link Dfp} array with value &amp;radic;2 split in two pieces.                
            </javadoc>
            <declaration name="sqr2Reciprocal" type="Dfp" line="121"/>
            <javadoc line="121">
                A {@link Dfp} with value &amp;radic;2 / 2.                
            </javadoc>
            <declaration name="sqr3" type="Dfp" line="125"/>
            <javadoc line="125">
                A {@link Dfp} with value &amp;radic;3.                
            </javadoc>
            <declaration name="sqr3Reciprocal" type="Dfp" line="129"/>
            <javadoc line="129">
                A {@link Dfp} with value &amp;radic;3 / 3.                
            </javadoc>
            <declaration name="pi" type="Dfp" line="133"/>
            <javadoc line="133">
                A {@link Dfp} with value &amp;pi;.                
            </javadoc>
            <declaration name="piSplit" type="Dfp[]" line="137"/>
            <javadoc line="137">
                A two elements {@link Dfp} array with value &amp;pi; split in two pieces.                
            </javadoc>
            <declaration name="e" type="Dfp" line="141"/>
            <javadoc line="141">
                A {@link Dfp} with value e.                
            </javadoc>
            <declaration name="eSplit" type="Dfp[]" line="145"/>
            <javadoc line="145">
                A two elements {@link Dfp} array with value e split in two pieces.                
            </javadoc>
            <declaration name="ln2" type="Dfp" line="149"/>
            <javadoc line="149">
                A {@link Dfp} with value ln(2).                
            </javadoc>
            <declaration name="ln2Split" type="Dfp[]" line="153"/>
            <javadoc line="153">
                A two elements {@link Dfp} array with value ln(2) split in two pieces.                
            </javadoc>
            <declaration name="ln5" type="Dfp" line="157"/>
            <javadoc line="157">
                A {@link Dfp} with value ln(5).                
            </javadoc>
            <declaration name="ln5Split" type="Dfp[]" line="161"/>
            <javadoc line="161">
                A two elements {@link Dfp} array with value ln(5) split in two pieces.                
            </javadoc>
            <declaration name="ln10" type="Dfp" line="165"/>
            <javadoc line="165">
                A {@link Dfp} with value ln(10).                
            </javadoc>
            <declaration name="rMode" type="RoundingMode" line="169"/>
            <javadoc line="169">
                Current rounding mode.                
            </javadoc>
            <declaration name="ieeeFlags" type="int" line="173"/>
            <javadoc line="173">
                IEEE 854-1987 signals.                
            </javadoc>
            <javadoc line="177">
                Create a factory for the specified number of radix digits.
                  &lt;p&gt;
                  Note that since the {@link Dfp} class uses 10000 as its radix, each radix
                  digit is equivalent to 4 decimal digits. This implies that asking for
                  13, 14, 15 or 16 decimal digits will really lead to a 4 radix 10000 digits in
                  all cases.
                  &lt;/p&gt;                
                <param>
                    decimalDigits minimal number of decimal digits.                    
                </param>
            </javadoc>
            <method name="DfpField" type="constructor" line="187">
                <params>
                    <param name="decimalDigits" type="int"/>
                </params>
            </method>
            <javadoc line="190">
                Create a factory for the specified number of radix digits.
                  &lt;p&gt;
                  Note that since the {@link Dfp} class uses 10000 as its radix, each radix
                  digit is equivalent to 4 decimal digits. This implies that asking for
                  13, 14, 15 or 16 decimal digits will really lead to a 4 radix 10000 digits in
                  all cases.
                  &lt;/p&gt;                
                <param>
                    decimalDigits minimal number of decimal digits                    
                </param>
                <param>
                    computeConstants if true, the transcendental constants for the given precision
                      must be computed (setting this flag to false is RESERVED for the internal recursive call)                    
                </param>
            </javadoc>
            <method name="DfpField" type="constructor" line="202">
                <params>
                    <param name="decimalDigits" type="int"/>
                    <param name="computeConstants" type="boolean"/>
                </params>
                <scope line="209">
                    <scope line="210"/>
                </scope>
                <scope line="228"/>
            </method>
            <javadoc line="245">
                Get the number of radix digits of the {@link Dfp} instances built by this factory.                
                <return>
                    number of radix digits                    
                </return>
            </javadoc>
            <method name="getRadixDigits" type="int" line="249"/>
            <javadoc line="252">
                Set the rounding mode.
                  If not set, the default value is {@link RoundingMode#ROUND_HALF_EVEN}.                
                <param>
                    mode desired rounding mode
                      Note that the rounding mode is common to all {@link Dfp} instances
                      belonging to the current {@link DfpField} in the system and will
                      affect all future calculations.                    
                </param>
            </javadoc>
            <method name="setRoundingMode" type="void" line="260">
                <params>
                    <param name="mode" type="RoundingMode"/>
                </params>
            </method>
            <javadoc line="263">
                Get the current rounding mode.                
                <return>
                    current rounding mode                    
                </return>
            </javadoc>
            <method name="getRoundingMode" type="RoundingMode" line="267"/>
            <javadoc line="270">
                Get the IEEE 854 status flags.                
                <return>
                    IEEE 854 status flags                    
                </return>
                <see>
                    #clearIEEEFlags()                    
                </see>
                <see>
                    #setIEEEFlags(int)                    
                </see>
                <see>
                    #setIEEEFlagsBits(int)                    
                </see>
                <see>
                    #FLAG_INVALID                    
                </see>
                <see>
                    #FLAG_DIV_ZERO                    
                </see>
                <see>
                    #FLAG_OVERFLOW                    
                </see>
                <see>
                    #FLAG_UNDERFLOW                    
                </see>
                <see>
                    #FLAG_INEXACT                    
                </see>
            </javadoc>
            <method name="getIEEEFlags" type="int" line="282"/>
            <javadoc line="285">
                Clears the IEEE 854 status flags.                
                <see>
                    #getIEEEFlags()                    
                </see>
                <see>
                    #setIEEEFlags(int)                    
                </see>
                <see>
                    #setIEEEFlagsBits(int)                    
                </see>
                <see>
                    #FLAG_INVALID                    
                </see>
                <see>
                    #FLAG_DIV_ZERO                    
                </see>
                <see>
                    #FLAG_OVERFLOW                    
                </see>
                <see>
                    #FLAG_UNDERFLOW                    
                </see>
                <see>
                    #FLAG_INEXACT                    
                </see>
            </javadoc>
            <method name="clearIEEEFlags" type="void" line="296"/>
            <javadoc line="299">
                Sets the IEEE 854 status flags.                
                <param>
                    flags desired value for the flags                    
                </param>
                <see>
                    #getIEEEFlags()                    
                </see>
                <see>
                    #clearIEEEFlags()                    
                </see>
                <see>
                    #setIEEEFlagsBits(int)                    
                </see>
                <see>
                    #FLAG_INVALID                    
                </see>
                <see>
                    #FLAG_DIV_ZERO                    
                </see>
                <see>
                    #FLAG_OVERFLOW                    
                </see>
                <see>
                    #FLAG_UNDERFLOW                    
                </see>
                <see>
                    #FLAG_INEXACT                    
                </see>
            </javadoc>
            <method name="setIEEEFlags" type="void" line="311">
                <params>
                    <param name="flags" type="int"/>
                </params>
            </method>
            <javadoc line="314">
                Sets some bits in the IEEE 854 status flags, without changing the already set bits.
                  &lt;p&gt;
                  Calling this method is equivalent to call {@code setIEEEFlags(getIEEEFlags() | bits)}&lt;/p&gt;                
                <param>
                    bits bits to set                    
                </param>
                <see>
                    #getIEEEFlags()                    
                </see>
                <see>
                    #clearIEEEFlags()                    
                </see>
                <see>
                    #setIEEEFlags(int)                    
                </see>
                <see>
                    #FLAG_INVALID                    
                </see>
                <see>
                    #FLAG_DIV_ZERO                    
                </see>
                <see>
                    #FLAG_OVERFLOW                    
                </see>
                <see>
                    #FLAG_UNDERFLOW                    
                </see>
                <see>
                    #FLAG_INEXACT                    
                </see>
            </javadoc>
            <method name="setIEEEFlagsBits" type="void" line="328">
                <params>
                    <param name="bits" type="int"/>
                </params>
            </method>
            <javadoc line="331">
                Makes a {@link Dfp} with a value of 0.                
                <return>
                    a new {@link Dfp} with a value of 0                    
                </return>
            </javadoc>
            <method name="newDfp" type="Dfp" line="335"/>
            <javadoc line="338">
                Create an instance from a byte value.                
                <param>
                    x value to convert to an instance                    
                </param>
                <return>
                    a new {@link Dfp} with the same value as x                    
                </return>
            </javadoc>
            <method name="newDfp" type="Dfp" line="343">
                <params>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="346">
                Create an instance from an int value.                
                <param>
                    x value to convert to an instance                    
                </param>
                <return>
                    a new {@link Dfp} with the same value as x                    
                </return>
            </javadoc>
            <method name="newDfp" type="Dfp" line="351">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="354">
                Create an instance from a long value.                
                <param>
                    x value to convert to an instance                    
                </param>
                <return>
                    a new {@link Dfp} with the same value as x                    
                </return>
            </javadoc>
            <method name="newDfp" type="Dfp" line="359">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="362">
                Create an instance from a double value.                
                <param>
                    x value to convert to an instance                    
                </param>
                <return>
                    a new {@link Dfp} with the same value as x                    
                </return>
            </javadoc>
            <method name="newDfp" type="Dfp" line="367">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="370">
                Copy constructor.                
                <param>
                    d instance to copy                    
                </param>
                <return>
                    a new {@link Dfp} with the same value as d                    
                </return>
            </javadoc>
            <method name="newDfp" type="Dfp" line="375">
                <params>
                    <param name="d" type="Dfp"/>
                </params>
            </method>
            <javadoc line="378">
                Create a {@link Dfp} given a String representation.                
                <param>
                    s string representation of the instance                    
                </param>
                <return>
                    a new {@link Dfp} parsed from specified string                    
                </return>
            </javadoc>
            <method name="newDfp" type="Dfp" line="383">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="386">
                Creates a {@link Dfp} with a non-finite value.                
                <param>
                    sign sign of the Dfp to create                    
                </param>
                <param>
                    nans code of the value, must be one of {@link Dfp#INFINITE},{@link Dfp#SNAN},  {@link Dfp#QNAN}                    
                </param>
                <return>
                    a new {@link Dfp} with a non-finite value                    
                </return>
            </javadoc>
            <method name="newDfp" type="Dfp" line="392">
                <params>
                    <param name="sign" type="byte"/>
                    <param name="nans" type="byte"/>
                </params>
            </method>
            <javadoc line="395">
                Get the constant 0.                
                <return>
                    a {@link Dfp} with value 0                    
                </return>
            </javadoc>
            <method name="getZero" type="Dfp" line="399"/>
            <javadoc line="402">
                Get the constant 1.                
                <return>
                    a {@link Dfp} with value 1                    
                </return>
            </javadoc>
            <method name="getOne" type="Dfp" line="406"/>
            <javadoc line="409">
                {@inheritDoc}                
            </javadoc>
            <method name="getRuntimeClass" type="Class<? extends FieldElement<Dfp>>" line="412"/>
            <javadoc line="415">
                Get the constant 2.                
                <return>
                    a {@link Dfp} with value 2                    
                </return>
            </javadoc>
            <method name="getTwo" type="Dfp" line="419"/>
            <javadoc line="422">
                Get the constant &amp;radic;2.                
                <return>
                    a {@link Dfp} with value &radic;2                    
                </return>
            </javadoc>
            <method name="getSqr2" type="Dfp" line="426"/>
            <javadoc line="429">
                Get the constant &amp;radic;2 split in two pieces.                
                <return>
                    a {@link Dfp} with value &radic;2 split in two pieces                    
                </return>
            </javadoc>
            <method name="getSqr2Split" type="Dfp[]" line="433"/>
            <javadoc line="436">
                Get the constant &amp;radic;2 / 2.                
                <return>
                    a {@link Dfp} with value &radic;2 / 2                    
                </return>
            </javadoc>
            <method name="getSqr2Reciprocal" type="Dfp" line="440"/>
            <javadoc line="443">
                Get the constant &amp;radic;3.                
                <return>
                    a {@link Dfp} with value &radic;3                    
                </return>
            </javadoc>
            <method name="getSqr3" type="Dfp" line="447"/>
            <javadoc line="450">
                Get the constant &amp;radic;3 / 3.                
                <return>
                    a {@link Dfp} with value &radic;3 / 3                    
                </return>
            </javadoc>
            <method name="getSqr3Reciprocal" type="Dfp" line="454"/>
            <javadoc line="457">
                Get the constant &amp;pi;.                
                <return>
                    a {@link Dfp} with value &pi;                    
                </return>
            </javadoc>
            <method name="getPi" type="Dfp" line="461"/>
            <javadoc line="464">
                Get the constant &amp;pi; split in two pieces.                
                <return>
                    a {@link Dfp} with value &pi; split in two pieces                    
                </return>
            </javadoc>
            <method name="getPiSplit" type="Dfp[]" line="468"/>
            <javadoc line="471">
                Get the constant e.                
                <return>
                    a {@link Dfp} with value e                    
                </return>
            </javadoc>
            <method name="getE" type="Dfp" line="475"/>
            <javadoc line="478">
                Get the constant e split in two pieces.                
                <return>
                    a {@link Dfp} with value e split in two pieces                    
                </return>
            </javadoc>
            <method name="getESplit" type="Dfp[]" line="482"/>
            <javadoc line="485">
                Get the constant ln(2).                
                <return>
                    a {@link Dfp} with value ln(2)                    
                </return>
            </javadoc>
            <method name="getLn2" type="Dfp" line="489"/>
            <javadoc line="492">
                Get the constant ln(2) split in two pieces.                
                <return>
                    a {@link Dfp} with value ln(2) split in two pieces                    
                </return>
            </javadoc>
            <method name="getLn2Split" type="Dfp[]" line="496"/>
            <javadoc line="499">
                Get the constant ln(5).                
                <return>
                    a {@link Dfp} with value ln(5)                    
                </return>
            </javadoc>
            <method name="getLn5" type="Dfp" line="503"/>
            <javadoc line="506">
                Get the constant ln(5) split in two pieces.                
                <return>
                    a {@link Dfp} with value ln(5) split in two pieces                    
                </return>
            </javadoc>
            <method name="getLn5Split" type="Dfp[]" line="510"/>
            <javadoc line="513">
                Get the constant ln(10).                
                <return>
                    a {@link Dfp} with value ln(10)                    
                </return>
            </javadoc>
            <method name="getLn10" type="Dfp" line="517"/>
            <javadoc line="520">
                Breaks a string representation up into two {@link Dfp}&apos;s.
                  The split is such that the sum of them is equivalent to the input string,
                  but has higher precision than using a single Dfp.                
                <param>
                    a string representation of the number to split                    
                </param>
                <return>
                    an array of two {@link Dfp Dfp} instances which sum equals a                    
                </return>
            </javadoc>
            <method name="split" type="Dfp[]" line="527">
                <params>
                    <param name="a" type="String"/>
                </params>
                <declaration name="result" type="Dfp" line="528"/>
                <declaration name="leading" type="boolean" line="529"/>
                <declaration name="sp" type="int" line="530"/>
                <declaration name="sig" type="int" line="531"/>
                <declaration name="buf" type="char[]" line="532"/>
                <scope line="533">
                    <scope line="535"/>
                    <scope line="538"/>
                    <scope line="542"/>
                    <scope line="546"/>
                </scope>
                <scope line="551">
                    <scope line="553"/>
                </scope>
            </method>
            <javadoc line="560">
                Recompute the high precision string constants.                
                <param>
                    highPrecisionDecimalDigits precision at which the string constants mus be computed                    
                </param>
            </javadoc>
            <method name="computeStringConstants" type="void" line="564">
                <params>
                    <param name="highPrecisionDecimalDigits" type="int"/>
                </params>
                <scope line="565">
                    <declaration name="highPrecisionField" type="DfpField" line="566"/>
                    <declaration name="highPrecisionOne" type="Dfp" line="567"/>
                    <declaration name="highPrecisionTwo" type="Dfp" line="568"/>
                    <declaration name="highPrecisionThree" type="Dfp" line="569"/>
                    <declaration name="highPrecisionSqr2" type="Dfp" line="570"/>
                    <declaration name="highPrecisionSqr3" type="Dfp" line="573"/>
                </scope>
            </method>
            <javadoc line="583">
                Compute &amp;pi; using Jonathan and Peter Borwein quartic formula.                
                <param>
                    one constant with value 1 at desired precision                    
                </param>
                <param>
                    two constant with value 2 at desired precision                    
                </param>
                <param>
                    three constant with value 3 at desired precision                    
                </param>
                <return>
                    &pi;                    
                </return>
            </javadoc>
            <method name="computePi" type="Dfp" line="590">
                <params>
                    <param name="one" type="Dfp"/>
                    <param name="two" type="Dfp"/>
                    <param name="three" type="Dfp"/>
                </params>
                <declaration name="sqrt2" type="Dfp" line="591"/>
                <declaration name="yk" type="Dfp" line="592"/>
                <declaration name="four" type="Dfp" line="593"/>
                <declaration name="two2kp3" type="Dfp" line="594"/>
                <declaration name="ak" type="Dfp" line="595"/>
                <scope line="596">
                    <declaration name="ykM1" type="Dfp" line="597"/>
                    <declaration name="y2" type="Dfp" line="598"/>
                    <declaration name="oneMinusY4" type="Dfp" line="599"/>
                    <declaration name="s" type="Dfp" line="600"/>
                    <declaration name="p" type="Dfp" line="603"/>
                    <declaration name="p2" type="Dfp" line="604"/>
                    <scope line="606"/>
                </scope>
            </method>
            <javadoc line="612">
                Compute exp(a).                
                <param>
                    a number for which we want the exponential                    
                </param>
                <param>
                    one constant with value 1 at desired precision                    
                </param>
                <return>
                    exp(a)                    
                </return>
            </javadoc>
            <method name="computeExp" type="Dfp" line="618">
                <params>
                    <param name="a" type="Dfp"/>
                    <param name="one" type="Dfp"/>
                </params>
                <declaration name="y" type="Dfp" line="619"/>
                <declaration name="py" type="Dfp" line="620"/>
                <declaration name="f" type="Dfp" line="621"/>
                <declaration name="fi" type="Dfp" line="622"/>
                <declaration name="x" type="Dfp" line="623"/>
                <scope line="624">
                    <scope line="629"/>
                </scope>
            </method>
            <javadoc line="636">
                Compute ln(a).
                  Let f(x) = ln(x),
                  We know that f&apos;(x) = 1/x, thus from Taylor&apos;s theorem we have:
                  -----          n+1         n
                  f(x) =   \           (-1)    (x - 1)
                  /          ----------------    for 1 &lt;= n &lt;= infinity
                  -----             n
                  or
                  2        3       4
                  (x-1)   (x-1)    (x-1)
                  ln(x) =  (x-1) - ----- + ------ - ------ + ...
                  2       3        4
                  alternatively,
                  2    3   4
                  x    x   x
                  ln(x+1) =  x - -  + - - - + ...
                  2    3   4
                  This series can be used to compute ln(x), but it converges too slowly.
                  If we substitute -x for x above, we get
                  2    3    4
                  x    x    x
                  ln(1-x) =  -x - -  - -  - - + ...
                  2    3    4
                  Note that all terms are now negative.  Because the even powered ones
                  absorbed the sign.  Now, subtract the series above from the previous
                  one to get ln(x+1) - ln(1-x).  Note the even terms cancel out leaving
                  only the odd ones
                  3     5      7
                  2x    2x     2x
                  ln(x+1) - ln(x-1) = 2x + --- + --- + ---- + ...
                  3     5      7
                  By the property of logarithms that ln(a) - ln(b) = ln (a/b) we have:
                  3        5        7
                  x+1           /          x        x        x          \
                  ln ----- =   2   |  x  +   ----  +  ----  +  ---- + ...  |
                  x-1           \          3        5        7          /
                  But now we want to find ln(a), so we need to find the value of x
                  such that a = (x+1)/(x-1).   This is easily solved to find that
                  x = (a-1)/(a+1).                
                <param>
                    a number for which we want the exponential                    
                </param>
                <param>
                    one constant with value 1 at desired precision                    
                </param>
                <param>
                    two constant with value 2 at desired precision                    
                </param>
                <return>
                    ln(a)                    
                </return>
            </javadoc>
            <method name="computeLn" type="Dfp" line="681">
                <params>
                    <param name="a" type="Dfp"/>
                    <param name="one" type="Dfp"/>
                    <param name="two" type="Dfp"/>
                </params>
                <declaration name="den" type="int" line="682"/>
                <declaration name="x" type="Dfp" line="683"/>
                <declaration name="y" type="Dfp" line="684"/>
                <declaration name="num" type="Dfp" line="685"/>
                <declaration name="py" type="Dfp" line="686"/>
                <scope line="687">
                    <declaration name="t" type="Dfp" line="691"/>
                    <scope line="693"/>
                </scope>
            </method>
        </class>
    </source>