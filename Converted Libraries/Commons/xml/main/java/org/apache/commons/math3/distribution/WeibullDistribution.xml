<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Gamma"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="WeibullDistribution" line="28">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="28">
                Implementation of the Weibull distribution. This implementation uses the
                  two parameter form of the distribution defined by
                  &lt;a href=&quot;http://mathworld.wolfram.com/WeibullDistribution.html&quot;&gt;
                  Weibull Distribution&lt;/a&gt;, equations (1) and (2).                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Weibull_distribution&quot;&gt;Weibull distribution (Wikipedia)&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/WeibullDistribution.html&quot;&gt;Weibull distribution (MathWorld)&lt;/a&gt;                    
                </see>
                <since>
                    1.1 (changed to concrete class in 3.0)                    
                </since>
                <version>
                    $Id: WeibullDistribution.java 1538998 2013-11-05 13:51:24Z erans $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="40"/>
            <javadoc line="40">
                Default inverse cumulative probability accuracy.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <javadoc line="45">
                Serializable version identifier.                
            </javadoc>
            <declaration name="shape" type="double" line="47"/>
            <javadoc line="47">
                The shape parameter.                
            </javadoc>
            <declaration name="scale" type="double" line="49"/>
            <javadoc line="49">
                The scale parameter.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="51"/>
            <javadoc line="51">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <declaration name="numericalMean" type="double" line="53"/>
            <javadoc line="53">
                Cached numerical mean                
            </javadoc>
            <declaration name="numericalMeanIsCalculated" type="boolean" line="55"/>
            <javadoc line="55">
                Whether or not the numerical mean has been calculated                
            </javadoc>
            <declaration name="numericalVariance" type="double" line="57"/>
            <javadoc line="57">
                Cached numerical variance                
            </javadoc>
            <declaration name="numericalVarianceIsCalculated" type="boolean" line="59"/>
            <javadoc line="59">
                Whether or not the numerical variance has been calculated                
            </javadoc>
            <javadoc line="62">
                Create a Weibull distribution with the given shape and scale and a
                  location equal to zero.                
                <param>
                    alpha Shape parameter.                    
                </param>
                <param>
                    beta Scale parameter.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code alpha &lt;= 0} or{@code beta &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="WeibullDistribution" type="constructor" line="72">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                </params>
            </method>
            <javadoc line="76">
                Create a Weibull distribution with the given shape, scale and inverse
                  cumulative probability accuracy and a location equal to zero.                
                <param>
                    alpha Shape parameter.                    
                </param>
                <param>
                    beta Scale parameter.                    
                </param>
                <param>
                    inverseCumAccuracy Maximum absolute error in inverse
                      cumulative probability estimates
                      (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code alpha &lt;= 0} or{@code beta &lt;= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="WeibullDistribution" type="constructor" line="90">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="94">
                Creates a Weibull distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    alpha Shape parameter.                    
                </param>
                <param>
                    beta Scale parameter.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code alpha &lt;= 0} or {@code beta &lt;= 0}.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="WeibullDistribution" type="constructor" line="104">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                </params>
            </method>
            <javadoc line="108">
                Creates a Weibull distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    alpha Shape parameter.                    
                </param>
                <param>
                    beta Scale parameter.                    
                </param>
                <param>
                    inverseCumAccuracy Maximum absolute error in inverse
                      cumulative probability estimates
                      (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code alpha &lt;= 0} or {@code beta &lt;= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="WeibullDistribution" type="constructor" line="124">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
                <scope line="127"/>
                <scope line="131"/>
            </method>
            <javadoc line="140">
                Access the shape parameter, {@code alpha}.                
                <return>
                    the shape parameter, {@code alpha}.                    
                </return>
            </javadoc>
            <method name="getShape" type="double" line="145"/>
            <javadoc line="149">
                Access the scale parameter, {@code beta}.                
                <return>
                    the scale parameter, {@code beta}.                    
                </return>
            </javadoc>
            <method name="getScale" type="double" line="154"/>
            <javadoc line="158">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="159">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="168">
                    FastMath.pow(x  scale, shape) =
                     FastMath.pow(xscale, shape) =
                     FastMath.pow(xscale, shape - 1)  xscale                    
                </comment>
                <scope line="160"/>
                <declaration name="xscale" type="double" line="164"/>
                <declaration name="xscalepow" type="double" line="165"/>
                <declaration name="xscalepowshape" type="double" line="172"/>
            </method>
            <javadoc line="177">
                {@inheritDoc}                
            </javadoc>
            <method name="logDensity" type="double" line="179">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="188">
                    FastMath.pow(x  scale, shape) =
                     FastMath.pow(xscale, shape) =
                     FastMath.pow(xscale, shape - 1)  xscale                    
                </comment>
                <scope line="180"/>
                <declaration name="xscale" type="double" line="184"/>
                <declaration name="logxscalepow" type="double" line="185"/>
                <declaration name="xscalepowshape" type="double" line="192"/>
            </method>
            <javadoc line="197">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="198">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="ret" type="double" line="199"/>
                <scope line="200"/>
                <scope line="202"/>
            </method>
            <javadoc line="208">
                {@inheritDoc}Returns {@code 0} when {@code p == 0} and{@code Double.POSITIVE_INFINITY} when {@code p == 1}.                
            </javadoc>
            <method name="inverseCumulativeProbability" type="double" line="215">
                <params>
                    <param name="p" type="double"/>
                </params>
                <declaration name="ret" type="double" line="216"/>
                <scope line="217"/>
                <scope line="219"/>
                <scope line="221"/>
                <scope line="223"/>
            </method>
            <javadoc line="229">
                Return the absolute accuracy setting of the solver used to estimate
                  inverse cumulative probabilities.                
                <return>
                    the solver absolute accuracy.                    
                </return>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="237"/>
            <javadoc line="241">
                {@inheritDoc}The mean is {@code scale  Gamma(1 + (1 / shape))}, where {@code Gamma()}is the Gamma-function.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="247">
                <scope line="248"/>
            </method>
            <javadoc line="255">
                used by {@link #getNumericalMean()}                
                <return>
                    the mean of this distribution                    
                </return>
            </javadoc>
            <method name="calculateNumericalMean" type="double" line="260">
                <declaration name="sh" type="double" line="261"/>
                <declaration name="sc" type="double" line="262"/>
            </method>
            <javadoc line="267">
                {@inheritDoc}The variance is {@code scale^2  Gamma(1 + (2 / shape)) - mean^2}where {@code Gamma()} is the Gamma-function.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="273">
                <scope line="274"/>
            </method>
            <javadoc line="281">
                used by {@link #getNumericalVariance()}                
                <return>
                    the variance of this distribution                    
                </return>
            </javadoc>
            <method name="calculateNumericalVariance" type="double" line="286">
                <declaration name="sh" type="double" line="287"/>
                <declaration name="sc" type="double" line="288"/>
                <declaration name="mn" type="double" line="289"/>
            </method>
            <javadoc line="295">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="302"/>
            <javadoc line="306">
                {@inheritDoc}The upper bound of the support is always positive infinity
                  no matter the parameters.                
                <return>
                    upper bound of the support (always{@code Double.POSITIVE_INFINITY})                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="315"/>
            <javadoc line="319">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="320"/>
            <javadoc line="324">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="325"/>
            <javadoc line="329">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="336"/>
        </class>
    </source>