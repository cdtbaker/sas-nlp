<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.GeometricMean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Mean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Max"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Min"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.Sum"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfLogs"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfSquares"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="MultivariateSummaryStatistics" line="39">
            <comment line="409">
                Getters and setters for statistics implementations                
            </comment>
            <implements interface="StatisticalMultivariateSummary"/>
            <implements interface="Serializable"/>
            <javadoc line="39">
                &lt;p&gt;Computes summary statistics for a stream of n-tuples added using the{@link #addValue(double[]) addValue} method. The data values are not stored
                  in memory, so this class can be used to compute statistics for very large
                  n-tuple streams.&lt;/p&gt;
                  &lt;p&gt;The {@link StorelessUnivariateStatistic} instances used to maintain
                  summary state and compute statistics are configurable via setters.
                  For example, the default implementation for the mean can be overridden by
                  calling {@link #setMeanImpl(StorelessUnivariateStatistic[])}. Actual
                  parameters to these methods must implement the{@link StorelessUnivariateStatistic} interface and configuration must be
                  completed before &lt;code&gt;addValue&lt;/code&gt; is called. No configuration is
                  necessary to use the default, commons-math provided implementations.&lt;/p&gt;
                  &lt;p&gt;To compute statistics for a stream of n-tuples, construct a
                  MultivariateStatistics instance with dimension n and then use{@link #addValue(double[])} to add n-tuples. The &lt;code&gt;getXxx&lt;/code&gt;
                  methods where Xxx is a statistic return an array of &lt;code&gt;double&lt;/code&gt;
                  values, where for &lt;code&gt;i = 0,...,n-1&lt;/code&gt; the i&lt;sup&gt;th&lt;/sup&gt; array element is the
                  value of the given statistic for data range consisting of the i&lt;sup&gt;th&lt;/sup&gt; element of
                  each of the input n-tuples.  For example, if &lt;code&gt;addValue&lt;/code&gt; is called
                  with actual parameters {0, 1, 2}, then {3, 4, 5} and finally {6, 7, 8},
                  &lt;code&gt;getSum&lt;/code&gt; will return a three-element array with values
                  {0+3+6, 1+4+7, 2+5+8}&lt;/p&gt;
                  &lt;p&gt;Note: This class is not thread-safe. Use{@link SynchronizedMultivariateSummaryStatistics} if concurrent access from multiple
                  threads is required.&lt;/p&gt;                
                <since>
                    1.2                    
                </since>
                <version>
                    $Id: MultivariateSummaryStatistics.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="75"/>
            <javadoc line="75">
                Serialization UID                
            </javadoc>
            <declaration name="k" type="int" line="78"/>
            <javadoc line="78">
                Dimension of the data.                
            </javadoc>
            <declaration name="n" type="long" line="81"/>
            <javadoc line="81">
                Count of values that have been added                
            </javadoc>
            <declaration name="sumImpl" type="StorelessUnivariateStatistic[]" line="84"/>
            <javadoc line="84">
                Sum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="sumSqImpl" type="StorelessUnivariateStatistic[]" line="87"/>
            <javadoc line="87">
                Sum of squares statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="minImpl" type="StorelessUnivariateStatistic[]" line="90"/>
            <javadoc line="90">
                Minimum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="maxImpl" type="StorelessUnivariateStatistic[]" line="93"/>
            <javadoc line="93">
                Maximum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="sumLogImpl" type="StorelessUnivariateStatistic[]" line="96"/>
            <javadoc line="96">
                Sum of log statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="geoMeanImpl" type="StorelessUnivariateStatistic[]" line="99"/>
            <javadoc line="99">
                Geometric mean statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="meanImpl" type="StorelessUnivariateStatistic[]" line="102"/>
            <javadoc line="102">
                Mean statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="covarianceImpl" type="VectorialCovariance" line="105"/>
            <javadoc line="105">
                Covariance statistic implementation - cannot be reset.                
            </javadoc>
            <javadoc line="108">
                Construct a MultivariateSummaryStatistics instance                
                <param>
                    k dimension of the data                    
                </param>
                <param>
                    isCovarianceBiasCorrected if true, the unbiased sample
                      covariance is computed, otherwise the biased population covariance
                      is computed                    
                </param>
            </javadoc>
            <method name="MultivariateSummaryStatistics" type="constructor" line="115">
                <params>
                    <param name="k" type="int"/>
                    <param name="isCovarianceBiasCorrected" type="boolean"/>
                </params>
                <scope line="126"/>
            </method>
            <javadoc line="141">
                Add an n-tuple to the data                
                <param>
                    value  the n-tuple to add                    
                </param>
                <throws>
                    DimensionMismatchException if the length of the array
                      does not match the one used at construction                    
                </throws>
            </javadoc>
            <method name="addValue" type="void" line="148">
                <params>
                    <param name="value" type="double[]"/>
                </params>
                <scope line="150">
                    <declaration name="v" type="double" line="151"/>
                </scope>
            </method>
            <javadoc line="164">
                Returns the dimension of the data                
                <return>
                    The dimension of the data                    
                </return>
            </javadoc>
            <method name="getDimension" type="int" line="168"/>
            <javadoc line="172">
                Returns the number of available values                
                <return>
                    The number of available values                    
                </return>
            </javadoc>
            <method name="getN" type="long" line="176"/>
            <javadoc line="180">
                Returns an array of the results of a statistic.                
                <param>
                    stats univariate statistic array                    
                </param>
                <return>
                    results array                    
                </return>
            </javadoc>
            <method name="getResults" type="double[]" line="185">
                <params>
                    <param name="stats" type="StorelessUnivariateStatistic[]"/>
                </params>
                <declaration name="results" type="double[]" line="186"/>
                <scope line="187"/>
            </method>
            <javadoc line="193">
                Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the sum of the
                  i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}                
                <return>
                    the array of component sums                    
                </return>
            </javadoc>
            <method name="getSum" type="double[]" line="200"/>
            <javadoc line="204">
                Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the sum of squares of the
                  i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}                
                <return>
                    the array of component sums of squares                    
                </return>
            </javadoc>
            <method name="getSumSq" type="double[]" line="211"/>
            <javadoc line="215">
                Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the sum of logs of the
                  i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}                
                <return>
                    the array of component log sums                    
                </return>
            </javadoc>
            <method name="getSumLog" type="double[]" line="222"/>
            <javadoc line="226">
                Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the mean of the
                  i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}                
                <return>
                    the array of component means                    
                </return>
            </javadoc>
            <method name="getMean" type="double[]" line="233"/>
            <javadoc line="237">
                Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the standard deviation of the
                  i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}                
                <return>
                    the array of component standard deviations                    
                </return>
            </javadoc>
            <method name="getStandardDeviation" type="double[]" line="244">
                <declaration name="stdDev" type="double[]" line="245"/>
                <scope line="246"/>
                <scope line="248"/>
                <scope line="250">
                    <declaration name="matrix" type="RealMatrix" line="251"/>
                    <scope line="252"/>
                </scope>
            </method>
            <javadoc line="259">
                Returns the covariance matrix of the values that have been added.                
                <return>
                    the covariance matrix                    
                </return>
            </javadoc>
            <method name="getCovariance" type="RealMatrix" line="264"/>
            <javadoc line="268">
                Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the maximum of the
                  i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}                
                <return>
                    the array of component maxima                    
                </return>
            </javadoc>
            <method name="getMax" type="double[]" line="275"/>
            <javadoc line="279">
                Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the minimum of the
                  i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}                
                <return>
                    the array of component minima                    
                </return>
            </javadoc>
            <method name="getMin" type="double[]" line="286"/>
            <javadoc line="290">
                Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the geometric mean of the
                  i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}                
                <return>
                    the array of component geometric means                    
                </return>
            </javadoc>
            <method name="getGeometricMean" type="double[]" line="297"/>
            <javadoc line="301">
                Generates a text report displaying
                  summary statistics from values that
                  have been added.                
                <return>
                    String with line feeds displaying statistics                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="308">
                <declaration name="separator" type="String" line="309"/>
                <declaration name="suffix" type="String" line="310"/>
                <declaration name="outBuffer" type="StringBuilder" line="311"/>
            </method>
            <javadoc line="325">
                Append a text representation of an array to a buffer.                
                <param>
                    buffer buffer to fill                    
                </param>
                <param>
                    data data array                    
                </param>
                <param>
                    prefix text prefix                    
                </param>
                <param>
                    separator elements separator                    
                </param>
                <param>
                    suffix text suffix                    
                </param>
            </javadoc>
            <method name="append" type="void" line="334">
                <params>
                    <param name="buffer" type="StringBuilder"/>
                    <param name="data" type="double[]"/>
                    <param name="prefix" type="String"/>
                    <param name="separator" type="String"/>
                    <param name="suffix" type="String"/>
                </params>
                <scope line="336">
                    <scope line="337"/>
                </scope>
            </method>
            <javadoc line="345">
                Resets all statistics and storage                
            </javadoc>
            <method name="clear" type="void" line="348">
                <scope line="350"/>
            </method>
            <javadoc line="362">
                Returns true iff &lt;code&gt;object&lt;/code&gt; is a &lt;code&gt;MultivariateSummaryStatistics&lt;/code&gt;
                  instance and all statistics have the same values as this.                
                <param>
                    object the object to test equality against.                    
                </param>
                <return>
                    true if object equals this                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="369">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="370"/>
                <scope line="373"/>
                <declaration name="stat" type="MultivariateSummaryStatistics" line="376"/>
            </method>
            <javadoc line="388">
                Returns hash code based on values of statistics                
                <return>
                    hash code                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="394">
                <declaration name="result" type="int" line="395"/>
            </method>
            <javadoc line="409">
                Sets statistics implementations.                
                <param>
                    newImpl new implementations for statistics                    
                </param>
                <param>
                    oldImpl old implementations for statistics                    
                </param>
                <throws>
                    DimensionMismatchException if the array dimension
                      does not match the one used at construction                    
                </throws>
                <throws>
                    MathIllegalStateException if data has already been added
                      (i.e. if n > 0)                    
                </throws>
            </javadoc>
            <method name="setImpl" type="void" line="420">
                <params>
                    <param name="newImpl" type="StorelessUnivariateStatistic[]"/>
                    <param name="oldImpl" type="StorelessUnivariateStatistic[]"/>
                </params>
            </method>
            <javadoc line="426">
                Returns the currently configured Sum implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the sum                    
                </return>
            </javadoc>
            <method name="getSumImpl" type="StorelessUnivariateStatistic[]" line="431"/>
            <javadoc line="435">
                &lt;p&gt;Sets the implementation for the Sum.&lt;/p&gt;
                  &lt;p&gt;This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double[]) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.&lt;/p&gt;                
                <param>
                    sumImpl the StorelessUnivariateStatistic instance to use
                      for computing the Sum                    
                </param>
                <throws>
                    DimensionMismatchException if the array dimension
                      does not match the one used at construction                    
                </throws>
                <throws>
                    MathIllegalStateException if data has already been added
                      (i.e if n > 0)                    
                </throws>
            </javadoc>
            <method name="setSumImpl" type="void" line="449">
                <params>
                    <param name="sumImpl" type="StorelessUnivariateStatistic[]"/>
                </params>
            </method>
            <javadoc line="453">
                Returns the currently configured sum of squares implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the sum of squares                    
                </return>
            </javadoc>
            <method name="getSumsqImpl" type="StorelessUnivariateStatistic[]" line="458"/>
            <javadoc line="462">
                &lt;p&gt;Sets the implementation for the sum of squares.&lt;/p&gt;
                  &lt;p&gt;This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double[]) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.&lt;/p&gt;                
                <param>
                    sumsqImpl the StorelessUnivariateStatistic instance to use
                      for computing the sum of squares                    
                </param>
                <throws>
                    DimensionMismatchException if the array dimension
                      does not match the one used at construction                    
                </throws>
                <throws>
                    MathIllegalStateException if data has already been added
                      (i.e if n > 0)                    
                </throws>
            </javadoc>
            <method name="setSumsqImpl" type="void" line="476">
                <params>
                    <param name="sumsqImpl" type="StorelessUnivariateStatistic[]"/>
                </params>
            </method>
            <javadoc line="480">
                Returns the currently configured minimum implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the minimum                    
                </return>
            </javadoc>
            <method name="getMinImpl" type="StorelessUnivariateStatistic[]" line="485"/>
            <javadoc line="489">
                &lt;p&gt;Sets the implementation for the minimum.&lt;/p&gt;
                  &lt;p&gt;This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double[]) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.&lt;/p&gt;                
                <param>
                    minImpl the StorelessUnivariateStatistic instance to use
                      for computing the minimum                    
                </param>
                <throws>
                    DimensionMismatchException if the array dimension
                      does not match the one used at construction                    
                </throws>
                <throws>
                    MathIllegalStateException if data has already been added
                      (i.e if n > 0)                    
                </throws>
            </javadoc>
            <method name="setMinImpl" type="void" line="503">
                <params>
                    <param name="minImpl" type="StorelessUnivariateStatistic[]"/>
                </params>
            </method>
            <javadoc line="507">
                Returns the currently configured maximum implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the maximum                    
                </return>
            </javadoc>
            <method name="getMaxImpl" type="StorelessUnivariateStatistic[]" line="512"/>
            <javadoc line="516">
                &lt;p&gt;Sets the implementation for the maximum.&lt;/p&gt;
                  &lt;p&gt;This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double[]) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.&lt;/p&gt;                
                <param>
                    maxImpl the StorelessUnivariateStatistic instance to use
                      for computing the maximum                    
                </param>
                <throws>
                    DimensionMismatchException if the array dimension
                      does not match the one used at construction                    
                </throws>
                <throws>
                    MathIllegalStateException if data has already been added
                      (i.e if n > 0)                    
                </throws>
            </javadoc>
            <method name="setMaxImpl" type="void" line="530">
                <params>
                    <param name="maxImpl" type="StorelessUnivariateStatistic[]"/>
                </params>
            </method>
            <javadoc line="534">
                Returns the currently configured sum of logs implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the log sum                    
                </return>
            </javadoc>
            <method name="getSumLogImpl" type="StorelessUnivariateStatistic[]" line="539"/>
            <javadoc line="543">
                &lt;p&gt;Sets the implementation for the sum of logs.&lt;/p&gt;
                  &lt;p&gt;This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double[]) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.&lt;/p&gt;                
                <param>
                    sumLogImpl the StorelessUnivariateStatistic instance to use
                      for computing the log sum                    
                </param>
                <throws>
                    DimensionMismatchException if the array dimension
                      does not match the one used at construction                    
                </throws>
                <throws>
                    MathIllegalStateException if data has already been added
                      (i.e if n > 0)                    
                </throws>
            </javadoc>
            <method name="setSumLogImpl" type="void" line="557">
                <params>
                    <param name="sumLogImpl" type="StorelessUnivariateStatistic[]"/>
                </params>
            </method>
            <javadoc line="561">
                Returns the currently configured geometric mean implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the geometric mean                    
                </return>
            </javadoc>
            <method name="getGeoMeanImpl" type="StorelessUnivariateStatistic[]" line="566"/>
            <javadoc line="570">
                &lt;p&gt;Sets the implementation for the geometric mean.&lt;/p&gt;
                  &lt;p&gt;This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double[]) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.&lt;/p&gt;                
                <param>
                    geoMeanImpl the StorelessUnivariateStatistic instance to use
                      for computing the geometric mean                    
                </param>
                <throws>
                    DimensionMismatchException if the array dimension
                      does not match the one used at construction                    
                </throws>
                <throws>
                    MathIllegalStateException if data has already been added
                      (i.e if n > 0)                    
                </throws>
            </javadoc>
            <method name="setGeoMeanImpl" type="void" line="584">
                <params>
                    <param name="geoMeanImpl" type="StorelessUnivariateStatistic[]"/>
                </params>
            </method>
            <javadoc line="588">
                Returns the currently configured mean implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the mean                    
                </return>
            </javadoc>
            <method name="getMeanImpl" type="StorelessUnivariateStatistic[]" line="593"/>
            <javadoc line="597">
                &lt;p&gt;Sets the implementation for the mean.&lt;/p&gt;
                  &lt;p&gt;This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double[]) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.&lt;/p&gt;                
                <param>
                    meanImpl the StorelessUnivariateStatistic instance to use
                      for computing the mean                    
                </param>
                <throws>
                    DimensionMismatchException if the array dimension
                      does not match the one used at construction                    
                </throws>
                <throws>
                    MathIllegalStateException if data has already been added
                      (i.e if n > 0)                    
                </throws>
            </javadoc>
            <method name="setMeanImpl" type="void" line="611">
                <params>
                    <param name="meanImpl" type="StorelessUnivariateStatistic[]"/>
                </params>
            </method>
            <javadoc line="615">
                Throws MathIllegalStateException if the statistic is not empty.                
                <throws>
                    MathIllegalStateException if n > 0.                    
                </throws>
            </javadoc>
            <method name="checkEmpty" type="void" line="619">
                <scope line="620"/>
            </method>
            <javadoc line="626">
                Throws DimensionMismatchException if dimension != k.                
                <param>
                    dimension dimension to check                    
                </param>
                <throws>
                    DimensionMismatchException if dimension != k                    
                </throws>
            </javadoc>
            <method name="checkDimension" type="void" line="631">
                <params>
                    <param name="dimension" type="int"/>
                </params>
                <scope line="632"/>
            </method>
        </class>
    </source>