<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.ml.distance.DistanceMeasure"/>
        <import package="org.apache.commons.math3.ml.distance.EuclideanDistance"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="FuzzyKMeansClusterer" line="37">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="Clusterer">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="37">
                Fuzzy K-Means clustering algorithm.
                  &lt;p&gt;
                  The Fuzzy K-Means algorithm is a variation of the classical K-Means algorithm, with the
                  major difference that a single data point is not uniquely assigned to a single cluster.
                  Instead, each point i has a set of weights u&lt;sub&gt;ij&lt;/sub&gt; which indicate the degree of membership
                  to the cluster j.
                  &lt;p&gt;
                  The algorithm then tries to minimize the objective function:
                  &lt;pre&gt;
                  J = &amp;#8721;&lt;sub&gt;i=1..C&lt;/sub&gt;&amp;#8721;&lt;sub&gt;k=1..N&lt;/sub&gt; u&lt;sub&gt;ik&lt;/sub&gt;&lt;sup&gt;m&lt;/sup&gt;d&lt;sub&gt;ik&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;
                  &lt;/pre&gt;
                  with d&lt;sub&gt;ik&lt;/sub&gt; being the distance between data point i and the cluster center k.
                  &lt;p&gt;
                  The algorithm requires two parameters:
                  &lt;ul&gt;
                  &lt;li&gt;k: the number of clusters
                  &lt;li&gt;fuzziness: determines the level of cluster fuzziness, larger values lead to fuzzier clusters
                  &lt;/ul&gt;
                  Additional, optional parameters:
                  &lt;ul&gt;
                  &lt;li&gt;maxIterations: the maximum number of iterations
                  &lt;li&gt;epsilon: the convergence criteria, default is 1e-3
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The fuzzy variant of the K-Means algorithm is more robust with regard to the selection
                  of the initial cluster centers.                
                <param>
                    &lt;T&gt;
                       type of the points to cluster                    
                </param>
                <version>
                    $Id: FuzzyKMeansClusterer.java 1512043 2013-08-08 21:27:57Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="71"/>
            <javadoc line="71">
                The default value for the convergence criteria.                
            </javadoc>
            <declaration name="k" type="int" line="74"/>
            <javadoc line="74">
                The number of clusters.                
            </javadoc>
            <declaration name="maxIterations" type="int" line="77"/>
            <javadoc line="77">
                The maximum number of iterations.                
            </javadoc>
            <declaration name="fuzziness" type="double" line="80"/>
            <javadoc line="80">
                The fuzziness factor.                
            </javadoc>
            <declaration name="epsilon" type="double" line="83"/>
            <javadoc line="83">
                The convergence criteria.                
            </javadoc>
            <declaration name="random" type="RandomGenerator" line="86"/>
            <javadoc line="86">
                Random generator for choosing initial centers.                
            </javadoc>
            <declaration name="membershipMatrix" type="double[][]" line="89"/>
            <javadoc line="89">
                The membership matrix.                
            </javadoc>
            <declaration name="points" type="List&amp;lt;T&amp;gt;" line="92"/>
            <javadoc line="92">
                The list of points used in the last call to {@link #cluster(Collection)}.                
            </javadoc>
            <declaration name="clusters" type="List&amp;lt;CentroidCluster&amp;lt;T&amp;gt;&amp;gt;" line="95"/>
            <javadoc line="95">
                The list of clusters resulting from the last call to {@link #cluster(Collection)}.                
            </javadoc>
            <javadoc line="98">
                Creates a new instance of a FuzzyKMeansClusterer.
                  &lt;p&gt;
                  The euclidean distance will be used as default distance measure.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    fuzziness the fuzziness factor, must be &amp;gt; 1.0                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code fuzziness &lt;= 1.0}                    
                </throws>
            </javadoc>
            <method name="FuzzyKMeansClusterer" type="constructor" line="107">
                <params>
                    <param name="k" type="int"/>
                    <param name="fuzziness" type="double"/>
                </params>
            </method>
            <javadoc line="111">
                Creates a new instance of a FuzzyKMeansClusterer.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    fuzziness the fuzziness factor, must be &amp;gt; 1.0                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code fuzziness &lt;= 1.0}                    
                </throws>
            </javadoc>
            <method name="FuzzyKMeansClusterer" type="constructor" line="123">
                <params>
                    <param name="k" type="int"/>
                    <param name="fuzziness" type="double"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                </params>
            </method>
            <javadoc line="127">
                Creates a new instance of a FuzzyKMeansClusterer.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    fuzziness the fuzziness factor, must be &amp;gt; 1.0                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
                <param>
                    epsilon the convergence criteria (default is 1e-3)                    
                </param>
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code fuzziness &lt;= 1.0}                    
                </throws>
            </javadoc>
            <method name="FuzzyKMeansClusterer" type="constructor" line="142">
                <params>
                    <param name="k" type="int"/>
                    <param name="fuzziness" type="double"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                    <param name="epsilon" type="double"/>
                    <param name="random" type="RandomGenerator"/>
                </params>
                <scope line="146"/>
            </method>
            <javadoc line="160">
                Return the number of clusters this instance will use.                
                <return>
                    the number of clusters                    
                </return>
            </javadoc>
            <method name="getK" type="int" line="164"/>
            <javadoc line="168">
                Returns the fuzziness factor used by this instance.                
                <return>
                    the fuzziness factor                    
                </return>
            </javadoc>
            <method name="getFuzziness" type="double" line="172"/>
            <javadoc line="176">
                Returns the maximum number of iterations this instance will use.                
                <return>
                    the maximum number of iterations, or -1 if no maximum is set                    
                </return>
            </javadoc>
            <method name="getMaxIterations" type="int" line="180"/>
            <javadoc line="184">
                Returns the convergence criteria used by this instance.                
                <return>
                    the convergence criteria                    
                </return>
            </javadoc>
            <method name="getEpsilon" type="double" line="188"/>
            <javadoc line="192">
                Returns the random generator this instance will use.                
                <return>
                    the random generator                    
                </return>
            </javadoc>
            <method name="getRandomGenerator" type="RandomGenerator" line="196"/>
            <javadoc line="200">
                Returns the {@code nxk} membership matrix, where {@code n} is the number
                  of data points and {@code k} the number of clusters.
                  &lt;p&gt;
                  The element U&lt;sub&gt;i,j&lt;/sub&gt; represents the membership value for data point {@code i}to cluster {@code j}.                
                <return>
                    the membership matrix                    
                </return>
                <throws>
                    MathIllegalStateException if {@link #cluster(Collection)} has not been called before                    
                </throws>
            </javadoc>
            <method name="getMembershipMatrix" type="RealMatrix" line="210">
                <scope line="211"/>
            </method>
            <javadoc line="217">
                Returns an unmodifiable list of the data points used in the last
                  call to {@link #cluster(Collection)}.                
                <return>
                    the list of data points, or {@code null} if {@link #cluster(Collection)} has
                      not been called before.                    
                </return>
            </javadoc>
            <method name="getDataPoints" type="List&lt;T&gt;" line="223"/>
            <javadoc line="227">
                Returns the list of clusters resulting from the last call to {@link #cluster(Collection)}.                
                <return>
                    the list of clusters, or {@code null} if {@link #cluster(Collection)} has
                      not been called before.                    
                </return>
            </javadoc>
            <method name="getClusters" type="List&lt;CentroidCluster&lt;T&gt;&gt;" line="232"/>
            <javadoc line="236">
                Get the value of the objective function.                
                <return>
                    the objective function evaluation as double value                    
                </return>
                <throws>
                    MathIllegalStateException if {@link #cluster(Collection)} has not been called before                    
                </throws>
            </javadoc>
            <method name="getObjectiveFunctionValue" type="double" line="241">
                <scope line="242"/>
                <declaration name="i" type="int" line="246"/>
                <declaration name="objFunction" type="double" line="247"/>
                <scope line="248">
                    <declaration name="j" type="int" line="249"/>
                    <scope line="250">
                        <declaration name="dist" type="double" line="251"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="260">
                Performs Fuzzy K-Means cluster analysis.                
                <param>
                    dataPoints the points to cluster                    
                </param>
                <return>
                    the list of clusters                    
                </return>
                <throws>
                    MathIllegalArgumentException if the data points are null or the number
                      of clusters is larger than the number of data points                    
                </throws>
            </javadoc>
            <method name="cluster" type="List&lt;CentroidCluster&lt;T&gt;&gt;" line="270">
                <params>
                    <param name="dataPoints" type="Collection&lt;T&gt;"/>
                </params>
                <comment line="273">
                    sanity checks                    
                </comment>
                <comment line="278">
                    number of clusters has to be smaller or equal the number of data points                    
                </comment>
                <comment line="283">
                    copy the input collection to an unmodifiable list with indexed access                    
                </comment>
                <comment line="289">
                    if no points are provided, return an empty list of clusters                    
                </comment>
                <comment line="296">
                    there is at least one point                    
                </comment>
                <declaration name="size" type="int" line="275"/>
                <scope line="278"/>
                <declaration name="oldMatrix" type="double[][]" line="286"/>
                <scope line="289"/>
                <declaration name="pointDimension" type="int" line="296"/>
                <scope line="297"/>
                <declaration name="iteration" type="int" line="301"/>
                <declaration name="max" type="int" line="302"/>
                <declaration name="difference" type="double" line="303"/>
                <scope line="305"/>
            </method>
            <javadoc line="315">
                Update the cluster centers.                
            </javadoc>
            <method name="updateClusterCenters" type="void" line="318">
                <declaration name="j" type="int" line="319"/>
                <declaration name="newClusters" type="List&amp;lt;CentroidCluster&amp;lt;T&amp;gt;&amp;gt;" line="320"/>
                <scope line="321">
                    <declaration name="center" type="Clusterable" line="322"/>
                    <declaration name="i" type="int" line="323"/>
                    <declaration name="arr" type="double[]" line="324"/>
                    <declaration name="sum" type="double" line="325"/>
                    <scope line="326">
                        <declaration name="u" type="double" line="327"/>
                        <declaration name="pointArr" type="double[]" line="328"/>
                        <scope line="329"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="343">
                Updates the membership matrix and assigns the points to the cluster with
                  the highest membership.                
            </javadoc>
            <method name="updateMembershipMatrix" type="void" line="347">
                <scope line="348">
                    <declaration name="point" type="T" line="349"/>
                    <declaration name="maxMembership" type="double" line="350"/>
                    <declaration name="newCluster" type="int" line="351"/>
                    <scope line="352">
                        <declaration name="sum" type="double" line="353"/>
                        <declaration name="distA" type="double" line="354"/>
                        <scope line="356">
                            <declaration name="distB" type="double" line="357"/>
                        </scope>
                        <scope line="363"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="372">
                Initialize the membership matrix with random values.                
            </javadoc>
            <method name="initializeMembershipMatrix" type="void" line="375">
                <scope line="376">
                    <scope line="377"/>
                </scope>
            </method>
            <javadoc line="384">
                Calculate the maximum element-by-element change of the membership matrix
                  for the current iteration.                
                <param>
                    matrix the membership matrix of the previous iteration                    
                </param>
                <return>
                    the maximum membership matrix change                    
                </return>
            </javadoc>
            <method name="calculateMaxMembershipChange" type="double" line="391">
                <params>
                    <param name="matrix" type="double[][]"/>
                </params>
                <declaration name="maxMembership" type="double" line="392"/>
                <scope line="393">
                    <scope line="394">
                        <declaration name="v" type="double" line="395"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="402">
                Copy the membership matrix into the provided matrix.                
                <param>
                    matrix the place to store the membership matrix                    
                </param>
            </javadoc>
            <method name="saveMembershipMatrix" type="void" line="407">
                <params>
                    <param name="matrix" type="double[][]"/>
                </params>
                <scope line="408"/>
            </method>
        </class>
    </source>