<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet.twod">
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="org.apache.commons.math3.ml.neuralnet.Neuron"/>
        <import package="org.apache.commons.math3.ml.neuralnet.Network"/>
        <import package="org.apache.commons.math3.ml.neuralnet.FeatureInitializer"/>
        <import package="org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <class name="NeuronSquareMesh2D" line="32">
            <implements interface="Serializable"/>
            <javadoc line="32">
                Neural network with the topology of a two-dimensional surface.
                  Each neuron defines one surface element.
                  &lt;br/&gt;
                  This network is primarily intended to represent a
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Kohonen&quot;&gt;
                  Self Organizing Feature Map&lt;/a&gt;.                
                <see>
                    org.apache.commons.math3.ml.neuralnet.sofm                    
                </see>
                <version>
                    $Id: NeuronSquareMesh2D.java 1566396 2014-02-09 20:36:24Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="network" type="Network" line="45"/>
            <javadoc line="45">
                Underlying network.                
            </javadoc>
            <declaration name="numberOfRows" type="int" line="47"/>
            <javadoc line="47">
                Number of rows.                
            </javadoc>
            <declaration name="numberOfColumns" type="int" line="49"/>
            <javadoc line="49">
                Number of columns.                
            </javadoc>
            <declaration name="wrapRows" type="boolean" line="51"/>
            <javadoc line="51">
                Wrap.                
            </javadoc>
            <declaration name="wrapColumns" type="boolean" line="53"/>
            <javadoc line="53">
                Wrap.                
            </javadoc>
            <declaration name="neighbourhood" type="SquareNeighbourhood" line="55"/>
            <javadoc line="55">
                Neighbourhood type.                
            </javadoc>
            <declaration name="identifiers" type="long[][]" line="57"/>
            <javadoc line="57">
                Mapping of the 2D coordinates (in the rectangular mesh) to
                  the neuron identifiers (attributed by the {@link #network}instance).                
            </javadoc>
            <javadoc line="64">
                Constructor with restricted access, solely used for deserialization.                
                <param>
                    wrapRowDim Whether to wrap the first dimension (i.e the first
                      and last neurons will be linked together).                    
                </param>
                <param>
                    wrapColDim Whether to wrap the second dimension (i.e the first
                      and last neurons will be linked together).                    
                </param>
                <param>
                    neighbourhoodType Neighbourhood type.                    
                </param>
                <param>
                    featuresList Arrays that will initialize the features sets of
                      the network&apos;s neurons.                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code numRows &lt; 2} or{@code numCols &lt; 2}.                    
                </throws>
            </javadoc>
            <method name="NeuronSquareMesh2D" type="constructor" line="80">
                <params>
                    <param name="wrapRowDim" type="boolean"/>
                    <param name="wrapColDim" type="boolean"/>
                    <param name="neighbourhoodType" type="SquareNeighbourhood"/>
                    <param name="featuresList" type="double[][][]"/>
                </params>
                <comment line="100">
                    Add neurons.                    
                </comment>
                <comment line="107">
                    Add links.                    
                </comment>
                <scope line="84"/>
                <scope line="87"/>
                <declaration name="fLen" type="int" line="95"/>
                <scope line="100">
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="110">
                Creates a two-dimensional network composed of square cells:
                  Each neuron not located on the border of the mesh has four
                  neurons linked to it.
                  &lt;br/&gt;
                  The links are bi-directional.
                  &lt;br/&gt;
                  The topology of the network can also be a cylinder (if one
                  of the dimensions is wrapped) or a torus (if both dimensions
                  are wrapped).                
                <param>
                    numRows Number of neurons in the first dimension.                    
                </param>
                <param>
                    wrapRowDim Whether to wrap the first dimension (i.e the first
                      and last neurons will be linked together).                    
                </param>
                <param>
                    numCols Number of neurons in the second dimension.                    
                </param>
                <param>
                    wrapColDim Whether to wrap the second dimension (i.e the first
                      and last neurons will be linked together).                    
                </param>
                <param>
                    neighbourhoodType Neighbourhood type.                    
                </param>
                <param>
                    featureInit Array of functions that will initialize the
                      corresponding element of the features set of each newly created
                      neuron. In particular, the size of this array defines the size of
                      feature set.                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code numRows &lt; 2} or{@code numCols &lt; 2}.                    
                </throws>
            </javadoc>
            <method name="NeuronSquareMesh2D" type="constructor" line="140">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="wrapRowDim" type="boolean"/>
                    <param name="numCols" type="int"/>
                    <param name="wrapColDim" type="boolean"/>
                    <param name="neighbourhoodType" type="SquareNeighbourhood"/>
                    <param name="featureInit" type="FeatureInitializer[]"/>
                </params>
                <comment line="159">
                    Add neurons.                    
                </comment>
                <comment line="170">
                    Add links.                    
                </comment>
                <scope line="141"/>
                <scope line="144"/>
                <declaration name="fLen" type="int" line="155"/>
                <scope line="159">
                    <scope line="160">
                        <declaration name="features" type="double[]" line="161"/>
                        <scope line="162"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="173">
                Retrieves the underlying network.
                  A reference is returned (enabling, for example, the network to be
                  trained).
                  This also implies that calling methods that modify the {@link Network}topology may cause this class to become inconsistent.                
                <return>
                    the network.                    
                </return>
            </javadoc>
            <method name="getNetwork" type="Network" line="182"/>
            <javadoc line="186">
                Gets the number of neurons in each row of this map.                
                <return>
                    the number of rows.                    
                </return>
            </javadoc>
            <method name="getNumberOfRows" type="int" line="191"/>
            <javadoc line="195">
                Gets the number of neurons in each column of this map.                
                <return>
                    the number of column.                    
                </return>
            </javadoc>
            <method name="getNumberOfColumns" type="int" line="200"/>
            <javadoc line="204">
                Retrieves the neuron at location {@code (i, j)} in the map.                
                <param>
                    i Row index.                    
                </param>
                <param>
                    j Column index.                    
                </param>
                <return>
                    the neuron at {@code (i, j)}.                    
                </return>
                <throws>
                    OutOfRangeException if {@code i} or {@code j} is
                      out of range.                    
                </throws>
            </javadoc>
            <method name="getNeuron" type="Neuron" line="214">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <scope line="216"/>
                <scope line="220"/>
            </method>
            <javadoc line="227">
                Creates the neighbour relationships between neurons.                
            </javadoc>
            <method name="createLinks" type="void" line="230">
                <comment line="232">
                    &quot;linkEnd&quot; will store the identifiers of the &quot;neighbours&quot;.                    
                </comment>
                <comment line="243">
                    Add links to &quot;diagonal&quot; neighbours.                    
                </comment>
                <comment line="311">
                    Case falls through since the &quot;Moore&quot; neighbourhood
                     also contains the neurons that belong to the &quot;Von
                     Neumann&quot; neighbourhood.                    
                </comment>
                <comment line="315">
                    fallthru (CheckStyle)                    
                </comment>
                <comment line="317">
                    Links to preceding and following &quot;row&quot;.                    
                </comment>
                <comment line="332">
                    Links to preceding and following &quot;column&quot;.                    
                </comment>
                <comment line="349">
                    Cannot happen.                    
                </comment>
                <comment line="355">
                    Link to all neighbours.
                     The reverse links will be added as the loop proceeds.                    
                </comment>
                <declaration name="linkEnd" type="List&amp;lt;Long&amp;gt;" line="232"/>
                <declaration name="iLast" type="int" line="233"/>
                <declaration name="jLast" type="int" line="234"/>
                <scope line="235">
                    <scope line="236">
                        <scope line="243">
                            <scope line="244"/>
                            <scope line="247"/>
                        </scope>
                        <scope line="251">
                            <scope line="252"/>
                            <scope line="255"/>
                        </scope>
                        <scope line="259">
                            <scope line="260">
                                <scope line="261"/>
                                <scope line="264"/>
                            </scope>
                            <scope line="267">
                                <scope line="268"/>
                                <scope line="271"/>
                            </scope>
                        </scope>
                        <scope line="276">
                            <scope line="277">
                                <scope line="278"/>
                                <scope line="281"/>
                            </scope>
                            <scope line="284">
                                <scope line="285"/>
                                <scope line="288"/>
                            </scope>
                        </scope>
                        <scope line="294">
                            <scope line="296"/>
                            <scope line="299"/>
                            <scope line="302"/>
                            <scope line="305"/>
                        </scope>
                        <scope line="317"/>
                        <scope line="320"/>
                        <scope line="323">
                            <scope line="324"/>
                            <scope line="326"/>
                        </scope>
                        <scope line="332"/>
                        <scope line="335"/>
                        <scope line="338">
                            <scope line="339"/>
                            <scope line="341"/>
                        </scope>
                        <declaration name="aNeuron" type="Neuron" line="351"/>
                        <scope line="352">
                            <declaration name="bNeuron" type="Neuron" line="353"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="362">
                Prevents proxy bypass.                
                <param>
                    in Input stream.                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="367">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="371">
                Custom serialization.                
                <return>
                    the proxy instance that will be actually serialized.                    
                </return>
            </javadoc>
            <method name="writeReplace" type="Object" line="376">
                <declaration name="featuresList" type="double[][][]" line="377"/>
                <scope line="378">
                    <scope line="379"/>
                </scope>
            </method>
            <class name="SerializationProxy" line="390">
                <implements interface="Serializable"/>
                <javadoc line="390">
                    Serialization.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="394"/>
                <javadoc line="394">
                    Serializable.                    
                </javadoc>
                <declaration name="wrapRows" type="boolean" line="396"/>
                <javadoc line="396">
                    Wrap.                    
                </javadoc>
                <declaration name="wrapColumns" type="boolean" line="398"/>
                <javadoc line="398">
                    Wrap.                    
                </javadoc>
                <declaration name="neighbourhood" type="SquareNeighbourhood" line="400"/>
                <javadoc line="400">
                    Neighbourhood type.                    
                </javadoc>
                <declaration name="featuresList" type="double[][][]" line="402"/>
                <javadoc line="402">
                    Neurons&apos; features.                    
                </javadoc>
                <javadoc line="405">
                    @param wrapRows Whether the row dimension is wrapped.                    
                    <param>
                        wrapColumns Whether the column dimension is wrapped.                        
                    </param>
                    <param>
                        neighbourhood Neighbourhood type.                        
                    </param>
                    <param>
                        featuresList List of neurons features.{@code neuronList}.                        
                    </param>
                </javadoc>
                <method name="SerializationProxy" type="constructor" line="415">
                    <params>
                        <param name="wrapRows" type="boolean"/>
                        <param name="wrapColumns" type="boolean"/>
                        <param name="neighbourhood" type="SquareNeighbourhood"/>
                        <param name="featuresList" type="double[][][]"/>
                    </params>
                </method>
                <javadoc line="422">
                    Custom serialization.                    
                    <return>
                        the {@link Neuron} for which this instance is the proxy.                        
                    </return>
                </javadoc>
                <method name="readResolve" type="Object" line="427"/>
            </class>
        </class>
    </source>