<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.moment">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="SemiVariance" line="7">
            <extends class="AbstractUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <javadoc line="7">
                &lt;p&gt;Computes the semivariance of a set of values with respect to a given cutoff value.
                  We define the &lt;i&gt;downside semivariance&lt;/i&gt; of a set of values &lt;code&gt;x&lt;/code&gt;
                  against the &lt;i&gt;cutoff value&lt;/i&gt; &lt;code&gt;cutoff&lt;/code&gt; to be &lt;br/&gt;
                  &lt;code&gt;&amp;Sigma; (x[i] - target)&lt;sup&gt;2&lt;/sup&gt; / df&lt;/code&gt; &lt;br/&gt;
                  where the sum is taken over all &lt;code&gt;i&lt;/code&gt; such that &lt;code&gt;x[i] &lt; cutoff&lt;/code&gt;
                  and &lt;code&gt;df&lt;/code&gt; is the length of &lt;code&gt;x&lt;/code&gt; (non-bias-corrected) or
                  one less than this number (bias corrected).  The &lt;i&gt;upside semivariance&lt;/i&gt;
                  is defined similarly, with the sum taken over values of &lt;code&gt;x&lt;/code&gt; that
                  exceed the cutoff value.&lt;/p&gt;
                  &lt;p&gt;The cutoff value defaults to the mean, bias correction defaults to &lt;code&gt;true&lt;/code&gt;
                  and the &quot;variance direction&quot; (upside or downside) defaults to downside.  The variance direction
                  and bias correction may be set using property setters or their values can provided as
                  parameters to {@link #evaluate(double[],double,Direction,boolean,int,int)}.&lt;/p&gt;
                  &lt;p&gt;If the input array is null, &lt;code&gt;evaluate&lt;/code&gt; methods throw
                  &lt;code&gt;IllegalArgumentException.&lt;/code&gt;  If the array has length 1, &lt;code&gt;0&lt;/code&gt;
                  is returned, regardless of the value of the &lt;code&gt;cutoff.&lt;/code&gt;
                  &lt;p&gt;&lt;strong&gt;Note that this class is not intended to be threadsafe.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and one or
                  more of these threads invoke property setters, external synchronization must
                  be provided to ensure correct results.&lt;/p&gt;                
                <since>
                    2.1                    
                </since>
                <version>
                    $Id: SemiVariance.java 1385386 2012-09-16 22:11:15Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="UPSIDE_VARIANCE" type="Direction" line="32"/>
            <javadoc line="32">
                The UPSIDE Direction is used to specify that the observations above the
                  cutoff point will be used to calculate SemiVariance.                
            </javadoc>
            <declaration name="DOWNSIDE_VARIANCE" type="Direction" line="37"/>
            <javadoc line="37">
                The DOWNSIDE Direction is used to specify that the observations below
                  the cutoff point will be used to calculate SemiVariance                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <javadoc line="42">
                Serializable version identifier                
            </javadoc>
            <declaration name="biasCorrected" type="boolean" line="46"/>
            <javadoc line="46">
                Determines whether or not bias correction is applied when computing the
                  value of the statisic.  True means that bias is corrected.                
            </javadoc>
            <declaration name="varianceDirection" type="Direction" line="51"/>
            <javadoc line="51">
                Determines whether to calculate downside or upside SemiVariance.                
            </javadoc>
            <javadoc line="55">
                Constructs a SemiVariance with default (true) &lt;code&gt;biasCorrected&lt;/code&gt;
                  property and default (Downside) &lt;code&gt;varianceDirection&lt;/code&gt; property.                
            </javadoc>
            <method name="SemiVariance" type="constructor" line="59"/>
            <javadoc line="61">
                Constructs a SemiVariance with the specified &lt;code&gt;biasCorrected&lt;/code&gt;
                  property and default (Downside) &lt;code&gt;varianceDirection&lt;/code&gt; property.                
                <param>
                    biasCorrected  setting for bias correction - true means
                      bias will be corrected and is equivalent to using the argumentless
                      constructor                    
                </param>
            </javadoc>
            <method name="SemiVariance" type="constructor" line="68">
                <params>
                    <param name="biasCorrected" type="boolean"/>
                </params>
            </method>
            <javadoc line="71">
                Constructs a SemiVariance with the specified &lt;code&gt;Direction&lt;/code&gt; property
                  and default (true) &lt;code&gt;biasCorrected&lt;/code&gt; property                
                <param>
                    direction  setting for the direction of the SemiVariance
                      to calculate                    
                </param>
            </javadoc>
            <method name="SemiVariance" type="constructor" line="77">
                <params>
                    <param name="direction" type="Direction"/>
                </params>
            </method>
            <javadoc line="80">
                Constructs a SemiVariance with the specified &lt;code&gt;isBiasCorrected&lt;/code&gt;
                  property and the specified &lt;code&gt;Direction&lt;/code&gt; property.                
                <param>
                    corrected  setting for bias correction - true means
                      bias will be corrected and is equivalent to using the argumentless
                      constructor                    
                </param>
                <param>
                    direction  setting for the direction of the SemiVariance
                      to calculate                    
                </param>
            </javadoc>
            <method name="SemiVariance" type="constructor" line="89">
                <params>
                    <param name="corrected" type="boolean"/>
                    <param name="direction" type="Direction"/>
                </params>
            </method>
            <javadoc line="93">
                Copy constructor, creates a new {@code SemiVariance} identical
                  to the {@code original}                
                <param>
                    original the {@code SemiVariance} instance to copy                    
                </param>
                <throws>
                    NullArgumentException  if original is null                    
                </throws>
            </javadoc>
            <method name="SemiVariance" type="constructor" line="99">
                <params>
                    <param name="original" type="SemiVariance"/>
                </params>
            </method>
            <javadoc line="102">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="SemiVariance" line="105">
                <declaration name="result" type="SemiVariance" line="106"/>
            </method>
            <javadoc line="110">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source SemiVariance to copy                    
                </param>
                <param>
                    dest SemiVariance to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="117">
                <params>
                    <param name="source" type="SemiVariance"/>
                    <param name="dest" type="SemiVariance"/>
                </params>
            </method>
            <javadoc line="124">
                &lt;p&gt;Returns the {@link SemiVariance} of the designated values against the mean, using
                  instance properties varianceDirection and biasCorrection.&lt;/p&gt;
                  &lt;p&gt;Returns &lt;code&gt;NaN&lt;/code&gt; if the array is empty and throws
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    start index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the SemiVariance                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="135">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="start" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="m" type="double" line="136"/>
            </method>
            <javadoc line="139">
                This method calculates {@link SemiVariance} for the entire array against the mean, using
                  the current value of the biasCorrection instance property.                
                <param>
                    values the input array                    
                </param>
                <param>
                    direction the {@link Direction} of the semivariance                    
                </param>
                <return>
                    the SemiVariance                    
                </return>
                <throws>
                    MathIllegalArgumentException if values is null                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="147">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="direction" type="Direction"/>
                </params>
                <declaration name="m" type="double" line="148"/>
            </method>
            <javadoc line="151">
                &lt;p&gt;Returns the {@link SemiVariance} of the designated values against the cutoff, using
                  instance properties variancDirection and biasCorrection.&lt;/p&gt;
                  &lt;p&gt;Returns &lt;code&gt;NaN&lt;/code&gt; if the array is empty and throws
                  &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    cutoff the reference point                    
                </param>
                <return>
                    the SemiVariance                    
                </return>
                <throws>
                    MathIllegalArgumentException if values is null                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="161">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="cutoff" type="double"/>
                </params>
            </method>
            <javadoc line="164">
                &lt;p&gt;Returns the {@link SemiVariance} of the designated values against the cutoff in the
                  given direction, using the current value of the biasCorrection instance property.&lt;/p&gt;
                  &lt;p&gt;Returns &lt;code&gt;NaN&lt;/code&gt; if the array is empty and throws
                  &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    cutoff the reference point                    
                </param>
                <param>
                    direction the {@link Direction} of the semivariance                    
                </param>
                <return>
                    the SemiVariance                    
                </return>
                <throws>
                    MathIllegalArgumentException if values is null                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="175">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="cutoff" type="double"/>
                    <param name="direction" type="Direction"/>
                </params>
            </method>
            <javadoc line="178">
                &lt;p&gt;Returns the {@link SemiVariance} of the designated values against the cutoff
                  in the given direction with the provided bias correction.&lt;/p&gt;
                  &lt;p&gt;Returns &lt;code&gt;NaN&lt;/code&gt; if the array is empty and throws
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    cutoff the reference point                    
                </param>
                <param>
                    direction the {@link Direction} of the semivariance                    
                </param>
                <param>
                    corrected the BiasCorrection flag                    
                </param>
                <param>
                    start index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the SemiVariance                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="192">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="cutoff" type="double"/>
                    <param name="direction" type="Direction"/>
                    <param name="corrected" type="boolean"/>
                    <param name="start" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="194"/>
                <scope line="197">
                    <scope line="198"/>
                    <scope line="201">
                        <declaration name="booleanDirection" type="boolean" line="202"/>
                        <declaration name="dev" type="double" line="203"/>
                        <declaration name="sumsq" type="double" line="204"/>
                        <scope line="205">
                            <scope line="206"/>
                        </scope>
                        <scope line="211"/>
                        <scope line="214"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="220">
                Returns true iff biasCorrected property is set to true.                
                <return>
                    the value of biasCorrected.                    
                </return>
            </javadoc>
            <method name="isBiasCorrected" type="boolean" line="224"/>
            <javadoc line="227">
                Sets the biasCorrected property.                
                <param>
                    biasCorrected new biasCorrected property value                    
                </param>
            </javadoc>
            <method name="setBiasCorrected" type="void" line="231">
                <params>
                    <param name="biasCorrected" type="boolean"/>
                </params>
            </method>
            <javadoc line="234">
                Returns the varianceDirection property.                
                <return>
                    the varianceDirection                    
                </return>
            </javadoc>
            <method name="getVarianceDirection" type="Direction" line="238"/>
            <javadoc line="241">
                Sets the variance direction                
                <param>
                    varianceDirection the direction of the semivariance                    
                </param>
            </javadoc>
            <method name="setVarianceDirection" type="void" line="245">
                <params>
                    <param name="varianceDirection" type="Direction"/>
                </params>
            </method>
            <declaration name="Direction" type="enum" line="248"/>
            <javadoc line="248">
                The direction of the semivariance - either upside or downside. The direction
                  is represented by boolean, with true corresponding to UPSIDE semivariance.                
            </javadoc>
            <scope line="252"/>
            <declaration name="direction" type="boolean" line="260"/>
            <javadoc line="260">
                boolean value  UPSIDE &lt;-&gt; true                
            </javadoc>
            <javadoc line="264">
                Create a Direction with the given value.                
                <param>
                    b boolean value representing the Direction. True corresponds to UPSIDE.                    
                </param>
            </javadoc>
            <method name="Direction" type="constructor" line="268">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="271">
                Returns the value of this Direction. True corresponds to UPSIDE.                
                <return>
                    true if direction is UPSIDE; false otherwise                    
                </return>
            </javadoc>
            <method name="getDirection" type="boolean" line="275"/>
        </class>
    </source>