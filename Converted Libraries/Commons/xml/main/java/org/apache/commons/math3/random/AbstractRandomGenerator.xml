<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="AbstractRandomGenerator" line="22">
            <implements interface="RandomGenerator"/>
            <javadoc line="22">
                Abstract class implementing the {@link RandomGenerator} interface.
                  Default implementations for all methods other than {@link #nextDouble()} and{@link #setSeed(long)} are provided.
                  &lt;p&gt;
                  All data generation methods are based on {@code code nextDouble()}.
                  Concrete implementations &lt;strong&gt;must&lt;/strong&gt; override
                  this method and &lt;strong&gt;should&lt;/strong&gt; provide better / more
                  performant implementations of the other methods if the underlying PRNG
                  supplies them.&lt;/p&gt;                
                <since>
                    1.1                    
                </since>
                <version>
                    $Id: AbstractRandomGenerator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="cachedNormalDeviate" type="double" line="38"/>
            <javadoc line="38">
                Cached random normal value.  The default implementation for{@link #nextGaussian} generates pairs of values and this field caches the
                  second value so that the full algorithm is not executed for every
                  activation.  The value {@code Double.NaN} signals that there is
                  no cached value.  Use {@link #clear} to clear the cached value.                
            </javadoc>
            <javadoc line="47">
                Construct a RandomGenerator.                
            </javadoc>
            <method name="AbstractRandomGenerator" type="constructor" line="50"/>
            <javadoc line="55">
                Clears the cache used by the default implementation of{@link #nextGaussian}. Implementations that do not override the
                  default implementation of {@code nextGaussian} should call this
                  method in the implementation of {@link #setSeed(long)}                
            </javadoc>
            <method name="clear" type="void" line="61"/>
            <javadoc line="65">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="66">
                <params>
                    <param name="seed" type="int"/>
                </params>
            </method>
            <javadoc line="70">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="71">
                <params>
                    <param name="seed" type="int[]"/>
                </params>
                <comment line="73">
                    the following number is the largest prime that fits in 32 bits (it is 2^32 - 5)                    
                </comment>
                <declaration name="prime" type="long" line="73"/>
                <declaration name="combined" type="long" line="75"/>
                <scope line="76"/>
            </method>
            <method name="setSeed" type="void" line="82"/>
            <javadoc line="82">
                Sets the seed of the underlying random number generator using a{@code long} seed.  Sequences of values generated starting with the
                  same seeds should be identical.
                  &lt;p&gt;
                  Implementations that do not override the default implementation of{@code nextGaussian} should include a call to {@link #clear} in the
                  implementation of this method.&lt;/p&gt;                
                <param>
                    seed the seed value                    
                </param>
            </javadoc>
            <javadoc line="95">
                Generates random bytes and places them into a user-supplied
                  byte array.  The number of random bytes produced is equal to
                  the length of the byte array.
                  &lt;p&gt;
                  The default implementation fills the array with bytes extracted from
                  random integers generated using {@link #nextInt}.&lt;/p&gt;                
                <param>
                    bytes the non-null byte array in which to put the
                      random bytes                    
                </param>
            </javadoc>
            <method name="nextBytes" type="void" line="106">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <declaration name="bytesOut" type="int" line="107"/>
                <scope line="108">
                    <declaration name="randInt" type="int" line="109"/>
                    <scope line="110">
                        <scope line="111"/>
                        <scope line="115"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="122">
                Returns the next pseudorandom, uniformly distributed {@code int}value from this random number generator&apos;s sequence.
                  All 2&lt;font size=&quot;-1&quot;&gt;&lt;sup&gt;32&lt;/sup&gt;&lt;/font&gt; possible {@code int} values
                  should be produced with  (approximately) equal probability.
                  &lt;p&gt;
                  The default implementation provided here returns
                  &lt;pre&gt;
                  &lt;code&gt;(int) (nextDouble()  Integer.MAX_VALUE)&lt;/code&gt;
                  &lt;/pre&gt;&lt;/p&gt;                
                <return>
                    the next pseudorandom, uniformly distributed {@code int}value from this random number generator&apos;s sequence                    
                </return>
            </javadoc>
            <method name="nextInt" type="int" line="136"/>
            <javadoc line="140">
                Returns a pseudorandom, uniformly distributed {@code int} value
                  between 0 (inclusive) and the specified value (exclusive), drawn from
                  this random number generator&apos;s sequence.
                  &lt;p&gt;
                  The default implementation returns
                  &lt;pre&gt;
                  &lt;code&gt;(int) (nextDouble()  n&lt;/code&gt;
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    n the bound on the random number to be returned.  Must be
                      positive.                    
                </param>
                <return>
                    a pseudorandom, uniformly distributed {@code int}value between 0 (inclusive) and n (exclusive).                    
                </return>
                <throws>
                    NotStrictlyPositiveException if {@code n &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="nextInt" type="int" line="156">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="157"/>
                <declaration name="result" type="int" line="160"/>
            </method>
            <javadoc line="164">
                Returns the next pseudorandom, uniformly distributed {@code long}value from this random number generator&apos;s sequence.  All
                  2&lt;font size=&quot;-1&quot;&gt;&lt;sup&gt;64&lt;/sup&gt;&lt;/font&gt; possible {@code long} values
                  should be produced with (approximately) equal probability.
                  &lt;p&gt;
                  The default implementation returns
                  &lt;pre&gt;
                  &lt;code&gt;(long) (nextDouble()  Long.MAX_VALUE)&lt;/code&gt;
                  &lt;/pre&gt;&lt;/p&gt;                
                <return>
                    the next pseudorandom, uniformly distributed {@code long}value from this random number generator&apos;s sequence                    
                </return>
            </javadoc>
            <method name="nextLong" type="long" line="178"/>
            <javadoc line="182">
                Returns the next pseudorandom, uniformly distributed{@code boolean} value from this random number generator&apos;s
                  sequence.
                  &lt;p&gt;
                  The default implementation returns
                  &lt;pre&gt;
                  &lt;code&gt;nextDouble() &lt;= 0.5&lt;/code&gt;
                  &lt;/pre&gt;&lt;/p&gt;                
                <return>
                    the next pseudorandom, uniformly distributed{@code boolean} value from this random number generator&apos;s
                      sequence                    
                </return>
            </javadoc>
            <method name="nextBoolean" type="boolean" line="196"/>
            <javadoc line="200">
                Returns the next pseudorandom, uniformly distributed {@code float}value between {@code 0.0} and {@code 1.0} from this random
                  number generator&apos;s sequence.
                  &lt;p&gt;
                  The default implementation returns
                  &lt;pre&gt;
                  &lt;code&gt;(float) nextDouble() &lt;/code&gt;
                  &lt;/pre&gt;&lt;/p&gt;                
                <return>
                    the next pseudorandom, uniformly distributed {@code float}value between {@code 0.0} and {@code 1.0} from this
                      random number generator&apos;s sequence                    
                </return>
            </javadoc>
            <method name="nextFloat" type="float" line="214"/>
            <method name="nextDouble" type="double" line="218"/>
            <javadoc line="218">
                Returns the next pseudorandom, uniformly distributed{@code double} value between {@code 0.0} and{@code 1.0} from this random number generator&apos;s sequence.
                  &lt;p&gt;
                  This method provides the underlying source of random data used by the
                  other methods.&lt;/p&gt;                
                <return>
                    the next pseudorandom, uniformly distributed{@code double} value between {@code 0.0} and{@code 1.0} from this random number generator&apos;s sequence                    
                </return>
            </javadoc>
            <javadoc line="232">
                Returns the next pseudorandom, Gaussian (&quot;normally&quot;) distributed{@code double} value with mean {@code 0.0} and standard
                  deviation {@code 1.0} from this random number generator&apos;s sequence.
                  &lt;p&gt;
                  The default implementation uses the &lt;em&gt;Polar Method&lt;/em&gt;
                  due to G.E.P. Box, M.E. Muller and G. Marsaglia, as described in
                  D. Knuth, &lt;u&gt;The Art of Computer Programming&lt;/u&gt;, 3.4.1C.&lt;/p&gt;
                  &lt;p&gt;
                  The algorithm generates a pair of independent random values.  One of
                  these is cached for reuse, so the full algorithm is not executed on each
                  activation.  Implementations that do not override this method should
                  make sure to call {@link #clear} to clear the cached value in the
                  implementation of {@link #setSeed(long)}.&lt;/p&gt;                
                <return>
                    the next pseudorandom, Gaussian (&quot;normally&quot;) distributed{@code double} value with mean {@code 0.0} and
                      standard deviation {@code 1.0} from this random number
                      generator&apos;s sequence                    
                </return>
            </javadoc>
            <method name="nextGaussian" type="double" line="252">
                <scope line="253">
                    <declaration name="dev" type="double" line="254"/>
                </scope>
                <declaration name="v1" type="double" line="258"/>
                <declaration name="v2" type="double" line="259"/>
                <declaration name="s" type="double" line="260"/>
                <scope line="261"/>
                <scope line="266"/>
            </method>
        </class>
    </source>