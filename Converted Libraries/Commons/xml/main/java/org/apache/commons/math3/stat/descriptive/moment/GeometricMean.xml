<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.moment">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfLogs"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="GeometricMean" line="31">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <javadoc line="31">
                Returns the &lt;a href=&quot;http://www.xycoon.com/geometric_mean.htm&quot;&gt;
                  geometric mean &lt;/a&gt; of the available values.
                  &lt;p&gt;
                  Uses a {@link SumOfLogs} instance to compute sum of logs and returns
                  &lt;code&gt; exp( 1/n  (sum of logs) ).&lt;/code&gt;  Therefore, &lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;If any of values are &lt; 0, the result is &lt;code&gt;NaN.&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;If all values are non-negative and less than
                  &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,  but at least one value is 0, the
                  result is &lt;code&gt;0.&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;If both &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt; and
                  &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt; are among the values, the result is
                  &lt;code&gt;NaN.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt; &lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <version>
                    $Id: GeometricMean.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="57"/>
            <javadoc line="57">
                Serializable version identifier                
            </javadoc>
            <declaration name="sumOfLogs" type="StorelessUnivariateStatistic" line="60"/>
            <javadoc line="60">
                Wrapped SumOfLogs instance                
            </javadoc>
            <javadoc line="63">
                Create a GeometricMean instance                
            </javadoc>
            <method name="GeometricMean" type="constructor" line="66"/>
            <javadoc line="70">
                Copy constructor, creates a new {@code GeometricMean} identical
                  to the {@code original}                
                <param>
                    original the {@code GeometricMean} instance to copy                    
                </param>
                <throws>
                    NullArgumentException if original is null                    
                </throws>
            </javadoc>
            <method name="GeometricMean" type="constructor" line="77">
                <params>
                    <param name="original" type="GeometricMean"/>
                </params>
            </method>
            <javadoc line="82">
                Create a GeometricMean instance using the given SumOfLogs instance                
                <param>
                    sumOfLogs sum of logs instance to use for computation                    
                </param>
            </javadoc>
            <method name="GeometricMean" type="constructor" line="86">
                <params>
                    <param name="sumOfLogs" type="SumOfLogs"/>
                </params>
            </method>
            <javadoc line="90">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="GeometricMean" line="94">
                <comment line="97">
                    no try-catch or advertised exception because args guaranteed non-null                    
                </comment>
                <declaration name="result" type="GeometricMean" line="95"/>
            </method>
            <javadoc line="101">
                {@inheritDoc}                
            </javadoc>
            <method name="increment" type="void" line="105">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="109">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="113">
                <scope line="114"/>
                <scope line="116"/>
            </method>
            <javadoc line="121">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="125"/>
            <javadoc line="129">
                Returns the geometric mean of the entries in the specified portion
                  of the input array.
                  &lt;p&gt;
                  See {@link GeometricMean} for details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values input array containing the values                    
                </param>
                <param>
                    begin first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the geometric mean or Double.NaN if length = 0 or
                      any of the values are &lt;= 0.                    
                </return>
                <throws>
                    MathIllegalArgumentException if the input array is null or the array
                      index parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="148">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="153">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="156"/>
            <javadoc line="160">
                &lt;p&gt;Sets the implementation for the sum of logs.&lt;/p&gt;
                  &lt;p&gt;This method must be activated before any data has been added - i.e.,
                  before {@link #increment(double) increment} has been used to add data;
                  otherwise an IllegalStateException will be thrown.&lt;/p&gt;                
                <param>
                    sumLogImpl the StorelessUnivariateStatistic instance to use
                      for computing the log sum                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added
                      (i.e if n > 0)                    
                </throws>
            </javadoc>
            <method name="setSumLogImpl" type="void" line="172">
                <params>
                    <param name="sumLogImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="177">
                Returns the currently configured sum of logs implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the log sum                    
                </return>
            </javadoc>
            <method name="getSumLogImpl" type="StorelessUnivariateStatistic" line="182"/>
            <javadoc line="186">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source GeometricMean to copy                    
                </param>
                <param>
                    dest GeometricMean to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="195">
                <params>
                    <param name="source" type="GeometricMean"/>
                    <param name="dest" type="GeometricMean"/>
                </params>
            </method>
            <javadoc line="203">
                Throws MathIllegalStateException if n &gt; 0.                
                <throws>
                    MathIllegalStateException if data has been added to this statistic                    
                </throws>
            </javadoc>
            <method name="checkEmpty" type="void" line="207">
                <scope line="208"/>
            </method>
        </class>
    </source>