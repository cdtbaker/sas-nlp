<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="FastSineTransformer" line="10">
            <implements interface="RealTransformer"/>
            <implements interface="Serializable"/>
            <javadoc line="10">
                Implements the Fast Sine Transform for transformation of one-dimensional real
                  data sets. For reference, see James S. Walker, &lt;em&gt;Fast Fourier
                  Transforms&lt;/em&gt;, chapter 3 (ISBN 0849371635).
                  &lt;p&gt;
                  There are several variants of the discrete sine transform. The present
                  implementation corresponds to DST-I, with various normalization conventions,
                  which are specified by the parameter {@link DstNormalization}.
                  &lt;strong&gt;It should be noted that regardless to the convention, the first
                  element of the dataset to be transformed must be zero.&lt;/strong&gt;
                  &lt;p&gt;
                  DST-I is equivalent to DFT of an &lt;em&gt;odd extension&lt;/em&gt; of the data series.
                  More precisely, if x&lt;sub&gt;0&lt;/sub&gt;, &amp;hellip;, x&lt;sub&gt;N-1&lt;/sub&gt; is the data set
                  to be sine transformed, the extended data set x&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt;,
                  &amp;hellip;, x&lt;sub&gt;2N-1&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; is defined as follows
                  &lt;ul&gt;
                  &lt;li&gt;x&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; = x&lt;sub&gt;0&lt;/sub&gt; = 0,&lt;/li&gt;
                  &lt;li&gt;x&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; = x&lt;sub&gt;k&lt;/sub&gt; if 1 &amp;le; k &amp;lt; N,&lt;/li&gt;
                  &lt;li&gt;x&lt;sub&gt;N&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; = 0,&lt;/li&gt;
                  &lt;li&gt;x&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; = -x&lt;sub&gt;2N-k&lt;/sub&gt; if N + 1 &amp;le; k &amp;lt;
                  2N.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Then, the standard DST-I y&lt;sub&gt;0&lt;/sub&gt;, &amp;hellip;, y&lt;sub&gt;N-1&lt;/sub&gt; of the real
                  data set x&lt;sub&gt;0&lt;/sub&gt;, &amp;hellip;, x&lt;sub&gt;N-1&lt;/sub&gt; is equal to &lt;em&gt;half&lt;/em&gt;
                  of i (the pure imaginary number) times the N first elements of the DFT of the
                  extended data set x&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt;, &amp;hellip;,
                  x&lt;sub&gt;2N-1&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; &lt;br /&gt;
                  y&lt;sub&gt;n&lt;/sub&gt; = (i / 2) &amp;sum;&lt;sub&gt;k=0&lt;/sub&gt;&lt;sup&gt;2N-1&lt;/sup&gt;
                  x&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; exp[-2&amp;pi;i nk / (2N)]
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;k = 0, &amp;hellip;, N-1.
                  &lt;p&gt;
                  The present implementation of the discrete sine transform as a fast sine
                  transform requires the length of the data to be a power of two. Besides,
                  it implicitly assumes that the sampled function is odd. In particular, the
                  first element of the data set must be 0, which is enforced in{@link #transform(UnivariateFunction,double,double,int,TransformType)},
                  after sampling.                
                <version>
                    $Id: FastSineTransformer.java 1385310 2012-09-16 16:32:10Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <javadoc line="51">
                Serializable version identifier.                
            </javadoc>
            <declaration name="normalization" type="DstNormalization" line="55"/>
            <javadoc line="55">
                The type of DST to be performed.                
            </javadoc>
            <javadoc line="59">
                Creates a new instance of this class, with various normalization conventions.                
                <param>
                    normalization the type of normalization to be applied to the transformed data                    
                </param>
            </javadoc>
            <method name="FastSineTransformer" type="constructor" line="63">
                <params>
                    <param name="normalization" type="DstNormalization"/>
                </params>
            </method>
            <javadoc line="66">
                {@inheritDoc}The first element of the specified data set is required to be {@code 0}.                
                <throws>
                    MathIllegalArgumentException if the length of the data array is
                      not a power of two, or the first element of the data array is not zero                    
                </throws>
            </javadoc>
            <method name="transform" type="double[]" line="71">
                <params>
                    <param name="f" type="double[]"/>
                    <param name="type" type="TransformType"/>
                </params>
                <scope line="72">
                    <declaration name="s" type="double" line="73"/>
                </scope>
                <scope line="76"/>
                <declaration name="s" type="double" line="79"/>
            </method>
            <javadoc line="82">
                {@inheritDoc}This implementation enforces {@code f(x) = 0.0} at {@code x = 0.0}.                
                <throws>
                    org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif the lower bound is greater than, or equal to the upper bound                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the number of sample points is negative                    
                </throws>
                <throws>
                    MathIllegalArgumentException if the number of sample points is not a power of two                    
                </throws>
            </javadoc>
            <method name="transform" type="double[]" line="88">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="n" type="int"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="data" type="double[]" line="89"/>
            </method>
            <javadoc line="93">
                Perform the FST algorithm (including inverse). The first element of the
                  data set is required to be {@code 0}.                
                <param>
                    f the real data array to be transformed                    
                </param>
                <return>
                    the real transformed array                    
                </return>
                <throws>
                    MathIllegalArgumentException if the length of the data array is
                      not a power of two, or the first element of the data array is not zero                    
                </throws>
            </javadoc>
            <method name="fst" type="double[]" line="101">
                <params>
                    <param name="f" type="double[]"/>
                </params>
                <declaration name="transformed" type="double[]" line="102"/>
                <scope line="103"/>
                <scope line="106"/>
                <declaration name="n" type="int" line="109"/>
                <scope line="110"/>
                <declaration name="x" type="double[]" line="114"/>
                <scope line="117">
                    <declaration name="a" type="double" line="118"/>
                    <declaration name="b" type="double" line="119"/>
                </scope>
                <declaration name="transformer" type="FastFourierTransformer" line="123"/>
                <declaration name="y" type="Complex[]" line="125"/>
                <scope line="128"/>
            </method>
        </class>
    </source>