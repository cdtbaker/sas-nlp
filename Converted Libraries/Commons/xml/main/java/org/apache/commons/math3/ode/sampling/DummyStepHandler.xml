<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.sampling">
        <class name="DummyStepHandler" line="2">
            <implements interface="StepHandler"/>
            <javadoc line="2">
                This class is a step handler that does nothing.
                  &lt;p&gt;This class is provided as a convenience for users who are only
                  interested in the final state of an integration and not in the
                  intermediate steps. Its handleStep method does nothing.&lt;/p&gt;
                  &lt;p&gt;Since this class has no internal state, it is implemented using
                  the Singleton design pattern. This means that only one instance is
                  ever created, which can be retrieved using the getInstance
                  method. This explains why there is no public constructor.&lt;/p&gt;                
                <see>
                    StepHandler                    
                </see>
                <version>
                    $Id: DummyStepHandler.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="16">
                Private constructor.
                  The constructor is private to prevent users from creating
                  instances (Singleton design-pattern).                
            </javadoc>
            <method name="DummyStepHandler" type="constructor" line="21"/>
            <javadoc line="23">
                Get the only instance.                
                <return>
                    the only instance                    
                </return>
            </javadoc>
            <method name="getInstance" type="DummyStepHandler" line="27"/>
            <javadoc line="30">
                {@inheritDoc}                
            </javadoc>
            <method name="init" type="void" line="33">
                <params>
                    <param name="t0" type="double"/>
                    <param name="y0" type="double[]"/>
                    <param name="t" type="double"/>
                </params>
            </method>
            <javadoc line="35">
                Handle the last accepted step.
                  This method does nothing in this class.                
                <param>
                    interpolator interpolator for the last accepted step. For
                      efficiency purposes, the various integrators reuse the same
                      object on each call, so if the instance wants to keep it across
                      all calls (for example to provide at the end of the integration a
                      continuous model valid throughout the integration range), it
                      should build a local copy using the clone method and store this
                      copy.                    
                </param>
                <param>
                    isLast true if the step is the last one                    
                </param>
            </javadoc>
            <method name="handleStep" type="void" line="47">
                <params>
                    <param name="interpolator" type="StepInterpolator"/>
                    <param name="isLast" type="boolean"/>
                </params>
            </method>
            <class name="LazyHolder" line="49">
                <javadoc line="49">
                    Holder for the instance.
                      &lt;p&gt;We use here the Initialization On Demand Holder Idiom.&lt;/p&gt;                    
                </javadoc>
                <declaration name="INSTANCE" type="DummyStepHandler" line="54"/>
                <javadoc line="54">
                    Cached field instance.                    
                </javadoc>
            </class>
            <javadoc line="59">
                Handle deserialization of the singleton.                
                <return>
                    the singleton instance                    
                </return>
            </javadoc>
            <method name="readResolve" type="Object" line="63"/>
        </class>
    </source>