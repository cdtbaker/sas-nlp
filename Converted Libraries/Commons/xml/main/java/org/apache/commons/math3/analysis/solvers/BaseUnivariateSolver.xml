<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <interface name="BaseUnivariateSolver">
            <type_params>
                <type_param name="FUNC"/>
            </type_params>
            <javadoc line="5">
                Interface for (univariate real) rootfinding algorithms.
                  Implementations will search for only one zero in the given interval.
                  This class is not intended for use outside of the Apache Commons Math
                  library, regular user should rely on more specific interfaces like{@link UnivariateSolver}, {@link PolynomialSolver} or {@link DifferentiableUnivariateSolver}.                
                <param>
                    <FUNC>
                      Type of function to solve.                    
                </param>
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: BaseUnivariateSolver.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
                <see>
                    UnivariateSolver                    
                </see>
                <see>
                    PolynomialSolver                    
                </see>
                <see>
                    DifferentiableUnivariateSolver                    
                </see>
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="19"/>
            <javadoc line="19">
                Get the maximum number of function evaluations.                
                <return>
                    the maximum number of function evaluations.                    
                </return>
            </javadoc>
            <method name="getEvaluations" type="int" line="24"/>
            <javadoc line="24">
                Get the number of evaluations of the objective function.
                  The number of evaluations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
                  called yet.                
                <return>
                    the number of evaluations of the objective function.                    
                </return>
            </javadoc>
            <method name="getAbsoluteAccuracy" type="double" line="31"/>
            <javadoc line="31">
                Get the absolute accuracy of the solver.  Solutions returned by the
                  solver should be accurate to this tolerance, i.e., if &amp;epsilon; is the
                  absolute accuracy of the solver and {@code v} is a value returned by
                  one of the {@code solve} methods, then a root of the function should
                  exist somewhere in the interval ({@code v} - &amp;epsilon;, {@code v} + &amp;epsilon;).                
                <return>
                    the absolute accuracy.                    
                </return>
            </javadoc>
            <method name="getRelativeAccuracy" type="double" line="40"/>
            <javadoc line="40">
                Get the relative accuracy of the solver.  The contract for relative
                  accuracy is the same as {@link #getAbsoluteAccuracy()}, but using
                  relative, rather than absolute error.  If &amp;rho; is the relative accuracy
                  configured for a solver and {@code v} is a value returned, then a root
                  of the function should exist somewhere in the interval
                  ({@code v} - &amp;rho; {@code v}, {@code v} + &amp;rho; {@code v}).                
                <return>
                    the relative accuracy.                    
                </return>
            </javadoc>
            <method name="getFunctionValueAccuracy" type="double" line="50"/>
            <javadoc line="50">
                Get the function value accuracy of the solver.  If {@code v} is
                  a value returned by the solver for a function {@code f},
                  then by contract, {@code |f(v)|} should be less than or equal to
                  the function value accuracy configured for the solver.                
                <return>
                    the function value accuracy.                    
                </return>
            </javadoc>
            <method name="solve" type="double" line="58"/>
            <javadoc line="58">
                Solve for a zero root in the given interval.
                  A solver may require that the interval brackets a single zero root.
                  Solvers that do require bracketing should be able to handle the case
                  where one of the endpoints is itself a root.                
                <param>
                    maxEval Maximum number of evaluations.                    
                </param>
                <param>
                    f Function to solve.                    
                </param>
                <param>
                    min Lower bound for the interval.                    
                </param>
                <param>
                    max Upper bound for the interval.                    
                </param>
                <return>
                    a value where the function is zero.                    
                </return>
                <throws>
                    MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.                    
                </throws>
                <throws>
                    TooManyEvaluationsException if
                      the allowed number of evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="solve" type="double" line="73"/>
            <javadoc line="73">
                Solve for a zero in the given interval, start at {@code startValue}.
                  A solver may require that the interval brackets a single zero root.
                  Solvers that do require bracketing should be able to handle the case
                  where one of the endpoints is itself a root.                
                <param>
                    maxEval Maximum number of evaluations.                    
                </param>
                <param>
                    f Function to solve.                    
                </param>
                <param>
                    min Lower bound for the interval.                    
                </param>
                <param>
                    max Upper bound for the interval.                    
                </param>
                <param>
                    startValue Start value to use.                    
                </param>
                <return>
                    a value where the function is zero.                    
                </return>
                <throws>
                    MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.                    
                </throws>
                <throws>
                    TooManyEvaluationsException if
                      the allowed number of evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="solve" type="double" line="89"/>
            <javadoc line="89">
                Solve for a zero in the vicinity of {@code startValue}.                
                <param>
                    f Function to solve.                    
                </param>
                <param>
                    startValue Start value to use.                    
                </param>
                <return>
                    a value where the function is zero.                    
                </return>
                <param>
                    maxEval Maximum number of evaluations.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsException if
                      the allowed number of evaluations is exceeded.                    
                </throws>
            </javadoc>
        </interface>
    </source>