<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.partitioning">
        <import package="org.apache.commons.math3.geometry.Space"/>
        <interface name="SubHyperplane">
            <type_params>
                <type_param name="S"/>
            </type_params>
            <javadoc line="3">
                This interface represents the remaining parts of an hyperplane after
                  other parts have been chopped off.
                  &lt;p&gt;sub-hyperplanes are obtained when parts of an {@link Hyperplane hyperplane} are chopped off by other hyperplanes that
                  intersect it. The remaining part is a convex region. Such objects
                  appear in {@link BSPTree BSP trees} as the intersection of a cut
                  hyperplane with the convex region which it splits, the chopping
                  hyperplanes are the cut hyperplanes closer to the tree root.&lt;/p&gt;                
                <param>
                    <S>
                      Type of the embedding space.                    
                </param>
                <version>
                    $Id: SubHyperplane.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="copySelf" type="SubHyperplane<S>" line="17"/>
            <javadoc line="17">
                Copy the instance.
                  &lt;p&gt;The instance created is completely independent of the original
                  one. A deep copy is used, none of the underlying objects are
                  shared (except for the nodes attributes and immutable
                  objects).&lt;/p&gt;                
                <return>
                    a new sub-hyperplane, copy of the instance                    
                </return>
            </javadoc>
            <method name="getHyperplane" type="Hyperplane<S>" line="26"/>
            <javadoc line="26">
                Get the underlying hyperplane.                
                <return>
                    underlying hyperplane                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="31"/>
            <javadoc line="31">
                Check if the instance is empty.                
                <return>
                    true if the instance is empty                    
                </return>
            </javadoc>
            <method name="getSize" type="double" line="36"/>
            <javadoc line="36">
                Get the size of the instance.                
                <return>
                    the size of the instance (this is a length in 1D, an area
                      in 2D, a volume in 3D ...)                    
                </return>
            </javadoc>
            <method name="side" type="Side" line="42"/>
            <javadoc line="42">
                Compute the relative position of the instance with respect
                  to an hyperplane.                
                <param>
                    hyperplane hyperplane to check instance against                    
                </param>
                <return>
                    one of {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH},{@link Side#HYPER}                    
                </return>
            </javadoc>
            <method name="split" type="SplitSubHyperplane<S>" line="49"/>
            <javadoc line="49">
                Split the instance in two parts by an hyperplane.                
                <param>
                    hyperplane splitting hyperplane                    
                </param>
                <return>
                    an object containing both the part of the instance
                      on the plus side of the instance and the part of the
                      instance on the minus side of the instance                    
                </return>
            </javadoc>
            <method name="reunite" type="SubHyperplane<S>" line="57"/>
            <javadoc line="57">
                Compute the union of the instance and another sub-hyperplane.                
                <param>
                    other other sub-hyperplane to union (<em>must</em> be in the
                      same hyperplane as the instance)                    
                </param>
                <return>
                    a new sub-hyperplane, union of the instance and other                    
                </return>
            </javadoc>
            <class name="SplitSubHyperplane" line="64">
                <type_params>
                    <type_param name="U"/>
                </type_params>
                <javadoc line="64">
                    Class holding the results of the {@link #split split} method.                    
                    <param>
                        <U>
                          Type of the embedding space.                        
                    </param>
                </javadoc>
                <declaration name="plus" type="SubHyperplane&lt;U&gt;" line="70"/>
                <javadoc line="70">
                    Part of the sub-hyperplane on the plus side of the splitting hyperplane.                    
                </javadoc>
                <declaration name="minus" type="SubHyperplane&lt;U&gt;" line="74"/>
                <javadoc line="74">
                    Part of the sub-hyperplane on the minus side of the splitting hyperplane.                    
                </javadoc>
                <javadoc line="78">
                    Build a SplitSubHyperplane from its parts.                    
                    <param>
                        plus part of the sub-hyperplane on the plus side of the
                          splitting hyperplane                        
                    </param>
                    <param>
                        minus part of the sub-hyperplane on the minus side of the
                          splitting hyperplane                        
                    </param>
                </javadoc>
                <method name="SplitSubHyperplane" type="constructor" line="85">
                    <params>
                        <param name="plus" type="SubHyperplane<U>"/>
                        <param name="minus" type="SubHyperplane<U>"/>
                    </params>
                </method>
                <javadoc line="89">
                    Get the part of the sub-hyperplane on the plus side of the splitting hyperplane.                    
                    <return>
                        part of the sub-hyperplane on the plus side of the splitting hyperplane                        
                    </return>
                </javadoc>
                <method name="getPlus" type="SubHyperplane<U>" line="93"/>
                <javadoc line="96">
                    Get the part of the sub-hyperplane on the minus side of the splitting hyperplane.                    
                    <return>
                        part of the sub-hyperplane on the minus side of the splitting hyperplane                        
                    </return>
                </javadoc>
                <method name="getMinus" type="SubHyperplane<U>" line="100"/>
            </class>
        </interface>
    </source>