<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <interface name="RealFieldElement">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="FieldElement">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <javadoc line="3">
                Interface representing a &lt;a href=&quot;http://mathworld.wolfram.com/RealNumber.html&quot;&gt;real&lt;/a&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/Field.html&quot;&gt;field&lt;/a&gt;.                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <see>
                    FieldElement                    
                </see>
                <version>
                    $Id: RealFieldElement.java 1455053 2013-03-11 08:37:12Z luc $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="getReal" type="double" line="13"/>
            <javadoc line="13">
                Get the real value of the number.                
                <return>
                    real value                    
                </return>
            </javadoc>
            <method name="add" type="T" line="18"/>
            <javadoc line="18">
                &apos;+&apos; operator.                
                <param>
                    a right hand side parameter of the operator                    
                </param>
                <return>
                    this+a                    
                </return>
            </javadoc>
            <method name="subtract" type="T" line="24"/>
            <javadoc line="24">
                &apos;-&apos; operator.                
                <param>
                    a right hand side parameter of the operator                    
                </param>
                <return>
                    this-a                    
                </return>
            </javadoc>
            <method name="multiply" type="T" line="30"/>
            <javadoc line="30">
                &apos;&amp;times;&apos; operator.                
                <param>
                    a right hand side parameter of the operator                    
                </param>
                <return>
                    this&times;a                    
                </return>
            </javadoc>
            <method name="divide" type="T" line="36"/>
            <javadoc line="36">
                &apos;&amp;divides;&apos; operator.                
                <param>
                    a right hand side parameter of the operator                    
                </param>
                <return>
                    this&divides;a                    
                </return>
            </javadoc>
            <method name="remainder" type="T" line="42"/>
            <javadoc line="42">
                IEEE remainder operator.                
                <param>
                    a right hand side parameter of the operator                    
                </param>
                <return>
                    this - n &times; a where n is the closest integer to this/a
                      (the even integer is chosen for n if this/a is halfway between two integers)                    
                </return>
            </javadoc>
            <method name="remainder" type="T" line="49"/>
            <javadoc line="49">
                IEEE remainder operator.                
                <param>
                    a right hand side parameter of the operator                    
                </param>
                <return>
                    this - n &times; a where n is the closest integer to this/a
                      (the even integer is chosen for n if this/a is halfway between two integers)                    
                </return>
                <exception>
                    DimensionMismatchException if number of free parameters or orders are inconsistent                    
                </exception>
            </javadoc>
            <method name="abs" type="T" line="57"/>
            <javadoc line="57">
                absolute value.                
                <return>
                    abs(this)                    
                </return>
            </javadoc>
            <method name="ceil" type="T" line="62"/>
            <javadoc line="62">
                Get the smallest whole number larger than instance.                
                <return>
                    ceil(this)                    
                </return>
            </javadoc>
            <method name="floor" type="T" line="67"/>
            <javadoc line="67">
                Get the largest whole number smaller than instance.                
                <return>
                    floor(this)                    
                </return>
            </javadoc>
            <method name="rint" type="T" line="72"/>
            <javadoc line="72">
                Get the whole number that is the nearest to the instance, or the even one if x is exactly half way between two integers.                
                <return>
                    a double number r such that r is an integer r - 0.5 <= this <= r + 0.5                    
                </return>
            </javadoc>
            <method name="round" type="long" line="77"/>
            <javadoc line="77">
                Get the closest long to instance value.                
                <return>
                    closest long to {@link #getReal()}                    
                </return>
            </javadoc>
            <method name="signum" type="T" line="82"/>
            <javadoc line="82">
                Compute the signum of the instance.
                  The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise                
                <return>
                    -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a                    
                </return>
            </javadoc>
            <method name="copySign" type="T" line="88"/>
            <javadoc line="88">
                Returns the instance with the sign of the argument.
                  A NaN {@code sign} argument is treated as positive.                
                <param>
                    sign the sign for the returned value                    
                </param>
                <return>
                    the instance with the same sign as the {@code sign} argument                    
                </return>
            </javadoc>
            <method name="copySign" type="T" line="95"/>
            <javadoc line="95">
                Returns the instance with the sign of the argument.
                  A NaN {@code sign} argument is treated as positive.                
                <param>
                    sign the sign for the returned value                    
                </param>
                <return>
                    the instance with the same sign as the {@code sign} argument                    
                </return>
            </javadoc>
            <method name="scalb" type="T" line="102"/>
            <javadoc line="102">
                Multiply the instance by a power of 2.                
                <param>
                    n power of 2                    
                </param>
                <return>
                    this &times; 2<sup>n</sup>                    
                </return>
            </javadoc>
            <method name="hypot" type="T" line="108"/>
            <javadoc line="108">
                Returns the hypotenuse of a triangle with sides {@code this} and {@code y}- sqrt(&lt;i&gt;this&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;br/&gt;
                  avoiding intermediate overflow or underflow.
                  &lt;ul&gt;
                  &lt;li&gt; If either argument is infinite, then the result is positive infinity.&lt;/li&gt;
                  &lt;li&gt; else, if either argument is NaN then the result is NaN.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    y a value                    
                </param>
                <return>
                    sqrt(<i>this</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)                    
                </return>
                <exception>
                    DimensionMismatchException if number of free parameters or orders are inconsistent                    
                </exception>
            </javadoc>
            <method name="reciprocal" type="T" line="120"/>
            <javadoc line="120">
                {@inheritDoc}                
            </javadoc>
            <method name="sqrt" type="T" line="124"/>
            <javadoc line="124">
                Square root.                
                <return>
                    square root of the instance                    
                </return>
            </javadoc>
            <method name="cbrt" type="T" line="129"/>
            <javadoc line="129">
                Cubic root.                
                <return>
                    cubic root of the instance                    
                </return>
            </javadoc>
            <method name="rootN" type="T" line="134"/>
            <javadoc line="134">
                N&lt;sup&gt;th&lt;/sup&gt; root.                
                <param>
                    n order of the root                    
                </param>
                <return>
                    n<sup>th</sup> root of the instance                    
                </return>
            </javadoc>
            <method name="pow" type="T" line="140"/>
            <javadoc line="140">
                Power operation.                
                <param>
                    p power to apply                    
                </param>
                <return>
                    this<sup>p</sup>                    
                </return>
            </javadoc>
            <method name="pow" type="T" line="146"/>
            <javadoc line="146">
                Integer power operation.                
                <param>
                    n power to apply                    
                </param>
                <return>
                    this<sup>n</sup>                    
                </return>
            </javadoc>
            <method name="pow" type="T" line="152"/>
            <javadoc line="152">
                Power operation.                
                <param>
                    e exponent                    
                </param>
                <return>
                    this<sup>e</sup>                    
                </return>
                <exception>
                    DimensionMismatchException if number of free parameters or orders are inconsistent                    
                </exception>
            </javadoc>
            <method name="exp" type="T" line="159"/>
            <javadoc line="159">
                Exponential.                
                <return>
                    exponential of the instance                    
                </return>
            </javadoc>
            <method name="expm1" type="T" line="164"/>
            <javadoc line="164">
                Exponential minus 1.                
                <return>
                    exponential minus one of the instance                    
                </return>
            </javadoc>
            <method name="log" type="T" line="169"/>
            <javadoc line="169">
                Natural logarithm.                
                <return>
                    logarithm of the instance                    
                </return>
            </javadoc>
            <method name="log1p" type="T" line="174"/>
            <javadoc line="174">
                Shifted natural logarithm.                
                <return>
                    logarithm of one plus the instance                    
                </return>
            </javadoc>
            <method name="cos" type="T" line="179"/>
            <javadoc line="179">
                Cosine operation.                
                <return>
                    cos(this)                    
                </return>
            </javadoc>
            <method name="sin" type="T" line="184"/>
            <javadoc line="184">
                Sine operation.                
                <return>
                    sin(this)                    
                </return>
            </javadoc>
            <method name="tan" type="T" line="189"/>
            <javadoc line="189">
                Tangent operation.                
                <return>
                    tan(this)                    
                </return>
            </javadoc>
            <method name="acos" type="T" line="194"/>
            <javadoc line="194">
                Arc cosine operation.                
                <return>
                    acos(this)                    
                </return>
            </javadoc>
            <method name="asin" type="T" line="199"/>
            <javadoc line="199">
                Arc sine operation.                
                <return>
                    asin(this)                    
                </return>
            </javadoc>
            <method name="atan" type="T" line="204"/>
            <javadoc line="204">
                Arc tangent operation.                
                <return>
                    atan(this)                    
                </return>
            </javadoc>
            <method name="atan2" type="T" line="209"/>
            <javadoc line="209">
                Two arguments arc tangent operation.                
                <param>
                    x second argument of the arc tangent                    
                </param>
                <return>
                    atan2(this, x)                    
                </return>
                <exception>
                    DimensionMismatchException if number of free parameters or orders are inconsistent                    
                </exception>
            </javadoc>
            <method name="cosh" type="T" line="216"/>
            <javadoc line="216">
                Hyperbolic cosine operation.                
                <return>
                    cosh(this)                    
                </return>
            </javadoc>
            <method name="sinh" type="T" line="221"/>
            <javadoc line="221">
                Hyperbolic sine operation.                
                <return>
                    sinh(this)                    
                </return>
            </javadoc>
            <method name="tanh" type="T" line="226"/>
            <javadoc line="226">
                Hyperbolic tangent operation.                
                <return>
                    tanh(this)                    
                </return>
            </javadoc>
            <method name="acosh" type="T" line="231"/>
            <javadoc line="231">
                Inverse hyperbolic cosine operation.                
                <return>
                    acosh(this)                    
                </return>
            </javadoc>
            <method name="asinh" type="T" line="236"/>
            <javadoc line="236">
                Inverse hyperbolic sine operation.                
                <return>
                    asin(this)                    
                </return>
            </javadoc>
            <method name="atanh" type="T" line="241"/>
            <javadoc line="241">
                Inverse hyperbolic  tangent operation.                
                <return>
                    atanh(this)                    
                </return>
            </javadoc>
            <method name="linearCombination" type="T" line="246"/>
            <javadoc line="246">
                Compute a linear combination.                
                <param>
                    a Factors.                    
                </param>
                <param>
                    b Factors.                    
                </param>
                <return>
                    <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.                    
                </return>
                <throws>
                    DimensionMismatchException if arrays dimensions don't match                    
                </throws>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="T" line="255"/>
            <javadoc line="255">
                Compute a linear combination.                
                <param>
                    a Factors.                    
                </param>
                <param>
                    b Factors.                    
                </param>
                <return>
                    <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.                    
                </return>
                <throws>
                    DimensionMismatchException if arrays dimensions don't match                    
                </throws>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="T" line="264"/>
            <javadoc line="264">
                Compute a linear combination.                
                <param>
                    a1 first factor of the first term                    
                </param>
                <param>
                    b1 second factor of the first term                    
                </param>
                <param>
                    a2 first factor of the second term                    
                </param>
                <param>
                    b2 second factor of the second term                    
                </param>
                <return>
                    a<sub>1</sub>&times;b<sub>1</sub> +
                      a<sub>2</sub>&times;b<sub>2</sub>                    
                </return>
                <see>
                    #linearCombination(Object,Object,Object,Object,Object,Object)                    
                </see>
                <see>
                    #linearCombination(Object,Object,Object,Object,Object,Object,Object,Object)                    
                </see>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="T" line="277"/>
            <javadoc line="277">
                Compute a linear combination.                
                <param>
                    a1 first factor of the first term                    
                </param>
                <param>
                    b1 second factor of the first term                    
                </param>
                <param>
                    a2 first factor of the second term                    
                </param>
                <param>
                    b2 second factor of the second term                    
                </param>
                <return>
                    a<sub>1</sub>&times;b<sub>1</sub> +
                      a<sub>2</sub>&times;b<sub>2</sub>                    
                </return>
                <see>
                    #linearCombination(double,Object,double,Object,double,Object)                    
                </see>
                <see>
                    #linearCombination(double,Object,double,Object,double,Object,double,Object)                    
                </see>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="T" line="290"/>
            <javadoc line="290">
                Compute a linear combination.                
                <param>
                    a1 first factor of the first term                    
                </param>
                <param>
                    b1 second factor of the first term                    
                </param>
                <param>
                    a2 first factor of the second term                    
                </param>
                <param>
                    b2 second factor of the second term                    
                </param>
                <param>
                    a3 first factor of the third term                    
                </param>
                <param>
                    b3 second factor of the third term                    
                </param>
                <return>
                    a<sub>1</sub>&times;b<sub>1</sub> +
                      a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>                    
                </return>
                <see>
                    #linearCombination(Object,Object,Object,Object)                    
                </see>
                <see>
                    #linearCombination(Object,Object,Object,Object,Object,Object,Object,Object)                    
                </see>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="T" line="305"/>
            <javadoc line="305">
                Compute a linear combination.                
                <param>
                    a1 first factor of the first term                    
                </param>
                <param>
                    b1 second factor of the first term                    
                </param>
                <param>
                    a2 first factor of the second term                    
                </param>
                <param>
                    b2 second factor of the second term                    
                </param>
                <param>
                    a3 first factor of the third term                    
                </param>
                <param>
                    b3 second factor of the third term                    
                </param>
                <return>
                    a<sub>1</sub>&times;b<sub>1</sub> +
                      a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>                    
                </return>
                <see>
                    #linearCombination(double,Object,double,Object)                    
                </see>
                <see>
                    #linearCombination(double,Object,double,Object,double,Object,double,Object)                    
                </see>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="T" line="320"/>
            <javadoc line="320">
                Compute a linear combination.                
                <param>
                    a1 first factor of the first term                    
                </param>
                <param>
                    b1 second factor of the first term                    
                </param>
                <param>
                    a2 first factor of the second term                    
                </param>
                <param>
                    b2 second factor of the second term                    
                </param>
                <param>
                    a3 first factor of the third term                    
                </param>
                <param>
                    b3 second factor of the third term                    
                </param>
                <param>
                    a4 first factor of the third term                    
                </param>
                <param>
                    b4 second factor of the third term                    
                </param>
                <return>
                    a<sub>1</sub>&times;b<sub>1</sub> +
                      a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
                      a<sub>4</sub>&times;b<sub>4</sub>                    
                </return>
                <see>
                    #linearCombination(Object,Object,Object,Object)                    
                </see>
                <see>
                    #linearCombination(Object,Object,Object,Object,Object,Object)                    
                </see>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="T" line="338"/>
            <javadoc line="338">
                Compute a linear combination.                
                <param>
                    a1 first factor of the first term                    
                </param>
                <param>
                    b1 second factor of the first term                    
                </param>
                <param>
                    a2 first factor of the second term                    
                </param>
                <param>
                    b2 second factor of the second term                    
                </param>
                <param>
                    a3 first factor of the third term                    
                </param>
                <param>
                    b3 second factor of the third term                    
                </param>
                <param>
                    a4 first factor of the third term                    
                </param>
                <param>
                    b4 second factor of the third term                    
                </param>
                <return>
                    a<sub>1</sub>&times;b<sub>1</sub> +
                      a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
                      a<sub>4</sub>&times;b<sub>4</sub>                    
                </return>
                <see>
                    #linearCombination(double,Object,double,Object)                    
                </see>
                <see>
                    #linearCombination(double,Object,double,Object,double,Object)                    
                </see>
                <since>
                    3.2                    
                </since>
            </javadoc>
        </interface>
    </source>