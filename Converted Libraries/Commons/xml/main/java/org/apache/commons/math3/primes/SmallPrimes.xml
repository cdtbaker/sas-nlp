<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.primes">
        <import package="java.math.BigInteger"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="SmallPrimes" line="6">
            <javadoc line="6">
                Utility methods to work on primes within the &lt;code&gt;int&lt;/code&gt; range.                
                <version>
                    $Id: SmallPrimes.java 1462702 2013-03-30 04:45:52Z psteitz $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="PRIMES" type="int[]" line="12"/>
            <javadoc line="12">
                The first 512 prime numbers.
                  &lt;p&gt;
                  It contains all primes smaller or equal to the cubic square of Integer.MAX_VALUE.
                  As a result, &lt;code&gt;int&lt;/code&gt; numbers which are not reduced by those primes are guaranteed
                  to be either prime or semi prime.                
            </javadoc>
            <declaration name="PRIMES_LAST" type="int" line="20"/>
            <javadoc line="20">
                The last number in PRIMES.                
            </javadoc>
            <javadoc line="24">
                Hide utility class.                
            </javadoc>
            <method name="SmallPrimes" type="constructor" line="27"/>
            <javadoc line="29">
                Extract small factors.                
                <param>
                    n the number to factor, must be &gt; 0.                    
                </param>
                <param>
                    factors the list where to add the factors.                    
                </param>
                <return>
                    the part of n which remains to be factored, it is either a prime or a semi-prime                    
                </return>
            </javadoc>
            <method name="smallTrialDivision" type="int" line="35">
                <params>
                    <param name="n" type="int"/>
                    <param name="factors" type="List<Integer>"/>
                </params>
                <scope line="36">
                    <scope line="37"/>
                </scope>
            </method>
            <javadoc line="44">
                Extract factors in the range &lt;code&gt;PRIME_LAST+2&lt;/code&gt; to &lt;code&gt;maxFactors&lt;/code&gt;.                
                <param>
                    n the number to factorize, must be >= PRIME_LAST+2 and must not contain any factor below PRIME_LAST+2                    
                </param>
                <param>
                    maxFactor the upper bound of trial division: if it is reached, the method gives up and returns n.                    
                </param>
                <param>
                    factors the list where to add the factors.                    
                </param>
                <return>
                    n or 1 if factorization is completed.                    
                </return>
            </javadoc>
            <method name="boundedTrialDivision" type="int" line="51">
                <params>
                    <param name="n" type="int"/>
                    <param name="maxFactor" type="int"/>
                    <param name="factors" type="List<Integer>"/>
                </params>
                <declaration name="f" type="int" line="52"/>
                <scope line="53">
                    <scope line="54"/>
                    <scope line="60"/>
                </scope>
                <scope line="67"/>
            </method>
            <javadoc line="72">
                Factorization by trial division.                
                <param>
                    n the number to factor                    
                </param>
                <return>
                    the list of prime factors of n                    
                </return>
            </javadoc>
            <method name="trialDivision" type="List<Integer>" line="77">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="factors" type="List&lt;Integer&gt;" line="78"/>
                <scope line="80"/>
                <declaration name="bound" type="int" line="83"/>
            </method>
            <javadoc line="87">
                Miller-Rabin probabilistic primality test for int type, used in such a way that a result is always guaranteed.
                  &lt;p&gt;
                  It uses the prime numbers as successive base therefore it is guaranteed to be always correct.
                  (see Handbook of applied cryptography by Menezes, table 4.1)                
                <param>
                    n number to test: an odd integer &ge; 3                    
                </param>
                <return>
                    true if n is prime. false if n is definitely composite.                    
                </return>
            </javadoc>
            <method name="millerRabinPrimeTest" type="boolean" line="95">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="nMinus1" type="int" line="96"/>
                <declaration name="s" type="int" line="97"/>
                <declaration name="r" type="int" line="98"/>
                <declaration name="t" type="int" line="99"/>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="106"/>
                <declaration name="br" type="BigInteger" line="109"/>
                <declaration name="bn" type="BigInteger" line="110"/>
                <scope line="111">
                    <declaration name="a" type="BigInteger" line="112"/>
                    <declaration name="bPow" type="BigInteger" line="113"/>
                    <declaration name="y" type="int" line="114"/>
                    <scope line="115">
                        <declaration name="j" type="int" line="116"/>
                        <scope line="117">
                            <declaration name="square" type="long" line="118"/>
                            <scope line="120"/>
                        </scope>
                        <scope line="125"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>