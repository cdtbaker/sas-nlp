<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.EigenDecomposition"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="CMAESOptimizer" line="21">
            <extends class="MultivariateOptimizer"/>
            <javadoc line="21">
                &lt;p&gt;An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)
                  for non-linear, non-convex, non-smooth, global function minimization.
                  The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method
                  which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or
                  conjugate gradient, fail due to a rugged search landscape (e.g. noise, local
                  optima, outlier, etc.) of the objective function. Like a
                  quasi-Newton method, the CMA-ES learns and applies a variable metric
                  on the underlying search space. Unlike a quasi-Newton method, the
                  CMA-ES neither estimates nor uses gradients, making it considerably more
                  reliable in terms of finding a good, or even close to optimal, solution.&lt;/p&gt;
                  &lt;p&gt;In general, on smooth objective functions the CMA-ES is roughly ten times
                  slower than BFGS (counting objective function evaluations, no gradients provided).
                  For up to &lt;math&gt;N=10&lt;/math&gt; variables also the derivative-free simplex
                  direct search method (Nelder and Mead) can be faster, but it is
                  far less reliable than CMA-ES.&lt;/p&gt;
                  &lt;p&gt;The CMA-ES is particularly well suited for non-separable
                  and/or badly conditioned problems. To observe the advantage of CMA compared
                  to a conventional evolution strategy, it will usually take about
                  &lt;math&gt;30 N&lt;/math&gt; function evaluations. On difficult problems the complete
                  optimization (a single run) is expected to take &lt;em&gt;roughly&lt;/em&gt; between
                  &lt;math&gt;30 N&lt;/math&gt; and &lt;math&gt;300 N&lt;sup&gt;2&lt;/sup&gt;&lt;/math&gt;
                  function evaluations.&lt;/p&gt;
                  &lt;p&gt;This implementation is translated and adapted from the Matlab version
                  of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.&lt;/p&gt;
                  For more information, please refer to the following links:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://www.lri.fr/~hansen/cmaes.m&quot;&gt;Matlab code&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;http://www.lri.fr/~hansen/cmaesintro.html&quot;&gt;Introduction to CMA-ES&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/CMA-ES&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
                  &lt;/ul&gt;                
                <version>
                    $Id: CMAESOptimizer.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="lambda" type="int" line="56"/>
            <javadoc line="56">
                Population size, offspring number. The primary strategy parameter to play
                  with, which can be increased from its default value. Increasing the
                  population size improves global search properties in exchange to speed.
                  Speed decreases, as a rule, at most linearly with increasing population
                  size. It is advisable to begin with the default small population size.                
            </javadoc>
            <declaration name="isActiveCMA" type="boolean" line="64"/>
            <javadoc line="64">
                Covariance update mechanism, default is active CMA. isActiveCMA = true
                  turns on &quot;active CMA&quot; with a negative update of the covariance matrix and
                  checks for positive definiteness. OPTS.CMA.active = 2 does not check for
                  pos. def. and is numerically faster. Active CMA usually speeds up the
                  adaptation.                
            </javadoc>
            <declaration name="checkFeasableCount" type="int" line="72"/>
            <javadoc line="72">
                Determines how often a new random offspring is generated in case it is
                  not feasible / beyond the defined limits, default is 0.                
            </javadoc>
            <declaration name="inputSigma" type="double[]" line="77"/>
            <javadoc line="77">
                @see Sigma                
            </javadoc>
            <declaration name="dimension" type="int" line="81"/>
            <javadoc line="81">
                Number of objective variables/problem dimension                
            </javadoc>
            <declaration name="diagonalOnly" type="int" line="85"/>
            <javadoc line="85">
                Defines the number of initial iterations, where the covariance matrix
                  remains diagonal and the algorithm has internally linear time complexity.
                  diagonalOnly = 1 means keeping the covariance matrix always diagonal and
                  this setting also exhibits linear space complexity. This can be
                  particularly useful for dimension &gt; 100.                
                <see>
                    <a href="http://hal.archives-ouvertes.fr/inria-00287367/en">A Simple Modification in CMA-ES</a>                    
                </see>
            </javadoc>
            <declaration name="isMinimize" type="boolean" line="94"/>
            <javadoc line="94">
                Number of objective variables/problem dimension                
            </javadoc>
            <declaration name="generateStatistics" type="boolean" line="98"/>
            <javadoc line="98">
                Indicates whether statistic data is collected.                
            </javadoc>
            <declaration name="maxIterations" type="int" line="102"/>
            <javadoc line="102">
                Maximal number of iterations allowed.                
            </javadoc>
            <declaration name="stopFitness" type="double" line="106"/>
            <javadoc line="106">
                Limit for fitness value.                
            </javadoc>
            <declaration name="stopTolUpX" type="double" line="110"/>
            <javadoc line="110">
                Stop if x-changes larger stopTolUpX.                
            </javadoc>
            <declaration name="stopTolX" type="double" line="114"/>
            <javadoc line="114">
                Stop if x-change smaller stopTolX.                
            </javadoc>
            <declaration name="stopTolFun" type="double" line="118"/>
            <javadoc line="118">
                Stop if fun-changes smaller stopTolFun.                
            </javadoc>
            <declaration name="stopTolHistFun" type="double" line="122"/>
            <javadoc line="122">
                Stop if back fun-changes smaller stopTolHistFun.                
            </javadoc>
            <declaration name="mu" type="int" line="126"/>
            <javadoc line="126">
                Number of parents/points for recombination.                
            </javadoc>
            <declaration name="logMu2" type="double" line="130"/>
            <javadoc line="130">
                log(mu + 0.5), stored for efficiency.                
            </javadoc>
            <declaration name="weights" type="RealMatrix" line="134"/>
            <javadoc line="134">
                Array for weighted recombination.                
            </javadoc>
            <declaration name="mueff" type="double" line="138"/>
            <javadoc line="138">
                Variance-effectiveness of sum w_i x_i.                
            </javadoc>
            <declaration name="sigma" type="double" line="142"/>
            <javadoc line="142">
                Overall standard deviation - search volume.                
            </javadoc>
            <declaration name="cc" type="double" line="146"/>
            <javadoc line="146">
                Cumulation constant.                
            </javadoc>
            <declaration name="cs" type="double" line="150"/>
            <javadoc line="150">
                Cumulation constant for step-size.                
            </javadoc>
            <declaration name="damps" type="double" line="154"/>
            <javadoc line="154">
                Damping for step-size.                
            </javadoc>
            <declaration name="ccov1" type="double" line="158"/>
            <javadoc line="158">
                Learning rate for rank-one update.                
            </javadoc>
            <declaration name="ccovmu" type="double" line="162"/>
            <javadoc line="162">
                Learning rate for rank-mu update&apos;                
            </javadoc>
            <declaration name="chiN" type="double" line="166"/>
            <javadoc line="166">
                Expectation of ||N(0,I)|| == norm(randn(N,1)).                
            </javadoc>
            <declaration name="ccov1Sep" type="double" line="170"/>
            <javadoc line="170">
                Learning rate for rank-one update - diagonalOnly                
            </javadoc>
            <declaration name="ccovmuSep" type="double" line="174"/>
            <javadoc line="174">
                Learning rate for rank-mu update - diagonalOnly                
            </javadoc>
            <declaration name="xmean" type="RealMatrix" line="178"/>
            <javadoc line="178">
                Objective variables.                
            </javadoc>
            <declaration name="pc" type="RealMatrix" line="182"/>
            <javadoc line="182">
                Evolution path.                
            </javadoc>
            <declaration name="ps" type="RealMatrix" line="186"/>
            <javadoc line="186">
                Evolution path for sigma.                
            </javadoc>
            <declaration name="normps" type="double" line="190"/>
            <javadoc line="190">
                Norm of ps, stored for efficiency.                
            </javadoc>
            <declaration name="B" type="RealMatrix" line="194"/>
            <javadoc line="194">
                Coordinate system.                
            </javadoc>
            <declaration name="D" type="RealMatrix" line="198"/>
            <javadoc line="198">
                Scaling.                
            </javadoc>
            <declaration name="BD" type="RealMatrix" line="202"/>
            <javadoc line="202">
                BD, stored for efficiency.                
            </javadoc>
            <declaration name="diagD" type="RealMatrix" line="206"/>
            <javadoc line="206">
                Diagonal of sqrt(D), stored for efficiency.                
            </javadoc>
            <declaration name="C" type="RealMatrix" line="210"/>
            <javadoc line="210">
                Covariance matrix.                
            </javadoc>
            <declaration name="diagC" type="RealMatrix" line="214"/>
            <javadoc line="214">
                Diagonal of C, used for diagonalOnly.                
            </javadoc>
            <declaration name="iterations" type="int" line="218"/>
            <javadoc line="218">
                Number of iterations already performed.                
            </javadoc>
            <declaration name="fitnessHistory" type="double[]" line="222"/>
            <javadoc line="222">
                History queue of best values.                
            </javadoc>
            <declaration name="historySize" type="int" line="226"/>
            <javadoc line="226">
                Size of history queue of best values.                
            </javadoc>
            <declaration name="random" type="RandomGenerator" line="230"/>
            <javadoc line="230">
                Random generator.                
            </javadoc>
            <declaration name="statisticsSigmaHistory" type="List&lt;Double&gt;" line="234"/>
            <javadoc line="234">
                History of sigma values.                
            </javadoc>
            <declaration name="statisticsMeanHistory" type="List&lt;RealMatrix&gt;" line="238"/>
            <javadoc line="238">
                History of mean matrix.                
            </javadoc>
            <declaration name="statisticsFitnessHistory" type="List&lt;Double&gt;" line="242"/>
            <javadoc line="242">
                History of fitness values.                
            </javadoc>
            <declaration name="statisticsDHistory" type="List&lt;RealMatrix&gt;" line="246"/>
            <javadoc line="246">
                History of D matrix.                
            </javadoc>
            <javadoc line="250">
                @param maxIterations Maximal number of iterations.                
                <param>
                    stopFitness Whether to stop if objective function value is smaller than{@code stopFitness}.                    
                </param>
                <param>
                    isActiveCMA Chooses the covariance matrix update method.                    
                </param>
                <param>
                    diagonalOnly Number of initial iterations, where the covariance matrix
                      remains diagonal.                    
                </param>
                <param>
                    checkFeasableCount Determines how often new random objective variables are
                      generated in case they are out of bounds.                    
                </param>
                <param>
                    random Random generator.                    
                </param>
                <param>
                    generateStatistics Whether statistic data is collected.                    
                </param>
                <param>
                    checker Convergence checker.                    
                </param>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="CMAESOptimizer" type="constructor" line="263">
                <params>
                    <param name="maxIterations" type="int"/>
                    <param name="stopFitness" type="double"/>
                    <param name="isActiveCMA" type="boolean"/>
                    <param name="diagonalOnly" type="int"/>
                    <param name="checkFeasableCount" type="int"/>
                    <param name="random" type="RandomGenerator"/>
                    <param name="generateStatistics" type="boolean"/>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                </params>
            </method>
            <javadoc line="273">
                @return History of sigma values.                
            </javadoc>
            <method name="getStatisticsSigmaHistory" type="List<Double>" line="276"/>
            <javadoc line="279">
                @return History of mean matrix.                
            </javadoc>
            <method name="getStatisticsMeanHistory" type="List<RealMatrix>" line="282"/>
            <javadoc line="285">
                @return History of fitness values.                
            </javadoc>
            <method name="getStatisticsFitnessHistory" type="List<Double>" line="288"/>
            <javadoc line="291">
                @return History of D matrix.                
            </javadoc>
            <method name="getStatisticsDHistory" type="List<RealMatrix>" line="294"/>
            <class name="Sigma" line="297">
                <implements interface="OptimizationData"/>
                <javadoc line="297">
                    Input sigma values.
                      They define the initial coordinate-wise standard deviations for
                      sampling new search points around the initial guess.
                      It is suggested to set them to the estimated distance from the
                      initial to the desired optimum.
                      Small values induce the search to be more local (and very small
                      values are more likely to find a local optimum close to the initial
                      guess).
                      Too small values might however lead to early termination.                    
                </javadoc>
                <declaration name="sigma" type="double[]" line="309"/>
                <javadoc line="309">
                    Sigma values.                    
                </javadoc>
                <javadoc line="313">
                    @param s Sigma values.                    
                    <throws>
                        NotPositiveException if any of the array entries is smaller
                          than zero.                        
                    </throws>
                </javadoc>
                <method name="Sigma" type="constructor" line="318">
                    <params>
                        <param name="s" type="double[]"/>
                    </params>
                    <scope line="319">
                        <scope line="320"/>
                    </scope>
                </method>
                <javadoc line="326">
                    @return the sigma values.                    
                </javadoc>
                <method name="getSigma" type="double[]" line="329"/>
            </class>
            <class name="PopulationSize" line="333">
                <implements interface="OptimizationData"/>
                <javadoc line="333">
                    Population size.
                      The number of offspring is the primary strategy parameter.
                      In the absence of better clues, a good default could be an
                      integer close to {@code 4 + 3 ln(n)}, where {@code n} is the
                      number of optimized parameters.
                      Increasing the population size improves global search properties
                      at the expense of speed (which in general decreases at most
                      linearly with increasing population size).                    
                </javadoc>
                <declaration name="lambda" type="int" line="344"/>
                <javadoc line="344">
                    Population size.                    
                </javadoc>
                <javadoc line="348">
                    @param size Population size.                    
                    <throws>
                        NotStrictlyPositiveException if {@code size <= 0}.                        
                    </throws>
                </javadoc>
                <method name="PopulationSize" type="constructor" line="352">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                    <scope line="353"/>
                </method>
                <javadoc line="358">
                    @return the population size.                    
                </javadoc>
                <method name="getPopulationSize" type="int" line="361"/>
            </class>
            <javadoc line="365">
                {@inheritDoc}                
                <param>
                    optData Optimization data. In addition to those documented in{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])MultivariateOptimizer}, this method will register the following data:
                      <ul>
                      <li>{@link Sigma}</li>
                      <li>{@link PopulationSize}</li>
                      </ul>                    
                </param>
                <return>
                    {@inheritDoc}                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
                <throws>
                    DimensionMismatchException if the initial guess, target, and weight
                      arguments have inconsistent dimensions.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PointValuePair" line="378">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <javadoc line="381">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="384">
                <declaration name="fitfun" type="FitnessFunction" line="386"/>
                <declaration name="guess" type="double[]" line="387"/>
                <declaration name="bestValue" type="double" line="391"/>
                <declaration name="optimum" type="PointValuePair" line="393"/>
                <declaration name="lastResult" type="PointValuePair" line="394"/>
                <scope line="395">
                    <declaration name="arz" type="RealMatrix" line="397"/>
                    <declaration name="arx" type="RealMatrix" line="398"/>
                    <declaration name="fitness" type="double[]" line="399"/>
                    <scope line="400">
                        <declaration name="arxk" type="RealMatrix" line="401"/>
                        <scope line="402">
                            <scope line="403"/>
                            <scope line="406"/>
                            <scope line="409"/>
                        </scope>
                        <scope line="415"/>
                        <scope line="418"/>
                    </scope>
                    <declaration name="arindex" type="int[]" line="422"/>
                    <declaration name="xold" type="RealMatrix" line="423"/>
                    <declaration name="bestArx" type="RealMatrix" line="424"/>
                    <declaration name="bestArz" type="RealMatrix" line="426"/>
                    <declaration name="zmean" type="RealMatrix" line="427"/>
                    <declaration name="hsig" type="boolean" line="428"/>
                    <scope line="429"/>
                    <scope line="432"/>
                    <declaration name="bestFitness" type="double" line="436"/>
                    <declaration name="worstFitness" type="double" line="437"/>
                    <scope line="438">
                        <scope line="442"/>
                    </scope>
                    <scope line="446"/>
                    <declaration name="sqrtDiagC" type="double[]" line="449"/>
                    <declaration name="pcCol" type="double[]" line="450"/>
                    <scope line="451">
                        <scope line="452"/>
                        <scope line="455"/>
                    </scope>
                    <scope line="459">
                        <scope line="460"/>
                    </scope>
                    <declaration name="historyBest" type="double" line="464"/>
                    <declaration name="historyWorst" type="double" line="465"/>
                    <scope line="466"/>
                    <scope line="469"/>
                    <scope line="472"/>
                    <scope line="475">
                        <declaration name="current" type="PointValuePair" line="476"/>
                        <scope line="477"/>
                    </scope>
                    <scope line="482"/>
                    <scope line="485"/>
                    <scope line="490"/>
                </scope>
            </method>
            <javadoc line="499">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data. The following data will be looked for:
                      <ul>
                      <li>{@link Sigma}</li>
                      <li>{@link PopulationSize}</li>
                      </ul>                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="508">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <scope line="510">
                    <scope line="511"/>
                    <scope line="515"/>
                </scope>
            </method>
            <javadoc line="522">
                Checks dimensions and values of boundaries and inputSigma if defined.                
            </javadoc>
            <method name="checkParameters" type="void" line="525">
                <declaration name="init" type="double[]" line="526"/>
                <declaration name="lB" type="double[]" line="527"/>
                <declaration name="uB" type="double[]" line="528"/>
                <scope line="529">
                    <scope line="530"/>
                    <scope line="533">
                        <scope line="534"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="540">
                Initialization of the dynamic search parameters                
                <param>
                    guess Initial guess for the arguments of the fitness function.                    
                </param>
            </javadoc>
            <method name="initializeCMA" type="void" line="544">
                <params>
                    <param name="guess" type="double[]"/>
                </params>
                <scope line="545"/>
                <declaration name="sigmaArray" type="double[][]" line="548"/>
                <scope line="549"/>
                <declaration name="insigma" type="RealMatrix" line="552"/>
                <declaration name="sumw" type="double" line="561"/>
                <declaration name="sumwq" type="double" line="562"/>
                <scope line="563">
                    <declaration name="w" type="double" line="564"/>
                </scope>
                <scope line="590"/>
            </method>
            <javadoc line="594">
                Update of the evolution paths ps and pc.                
                <param>
                    zmean Weighted row matrix of the gaussian random numbers generating
                      the current offspring.                    
                </param>
                <param>
                    xold xmean matrix of the previous generation.                    
                </param>
                <return>
                    hsig flag indicating a small correction.                    
                </return>
            </javadoc>
            <method name="updateEvolutionPaths" type="boolean" line="601">
                <params>
                    <param name="zmean" type="RealMatrix"/>
                    <param name="xold" type="RealMatrix"/>
                </params>
                <declaration name="hsig" type="boolean" line="604"/>
                <scope line="606"/>
            </method>
            <javadoc line="611">
                Update of the covariance matrix C for diagonalOnly &gt; 0                
                <param>
                    hsig Flag indicating a small correction.                    
                </param>
                <param>
                    bestArz Fitness-sorted matrix of the gaussian random values of the
                      current offspring.                    
                </param>
            </javadoc>
            <method name="updateCovarianceDiagonalOnly" type="void" line="617">
                <params>
                    <param name="hsig" type="boolean"/>
                    <param name="bestArz" type="RealMatrix"/>
                </params>
                <declaration name="oldFac" type="double" line="618"/>
                <scope line="622"/>
            </method>
            <javadoc line="629">
                Update of the covariance matrix C.                
                <param>
                    hsig Flag indicating a small correction.                    
                </param>
                <param>
                    bestArx Fitness-sorted matrix of the argument vectors producing the
                      current offspring.                    
                </param>
                <param>
                    arz Unsorted matrix containing the gaussian random values of the
                      current offspring.                    
                </param>
                <param>
                    arindex Indices indicating the fitness-order of the current offspring.                    
                </param>
                <param>
                    xold xmean matrix of the previous generation.                    
                </param>
            </javadoc>
            <method name="updateCovariance" type="void" line="639">
                <params>
                    <param name="hsig" type="boolean"/>
                    <param name="bestArx" type="RealMatrix"/>
                    <param name="arz" type="RealMatrix"/>
                    <param name="arindex" type="int[]"/>
                    <param name="xold" type="RealMatrix"/>
                </params>
                <declaration name="negccov" type="double" line="640"/>
                <scope line="641">
                    <declaration name="arpos" type="RealMatrix" line="642"/>
                    <declaration name="roneu" type="RealMatrix" line="643"/>
                    <declaration name="oldFac" type="double" line="644"/>
                    <scope line="646">
                        <declaration name="negminresidualvariance" type="double" line="648"/>
                        <declaration name="negalphaold" type="double" line="649"/>
                        <declaration name="arReverseIndex" type="int[]" line="650"/>
                        <declaration name="arzneg" type="RealMatrix" line="651"/>
                        <declaration name="arnorms" type="RealMatrix" line="652"/>
                        <declaration name="idxnorms" type="int[]" line="653"/>
                        <declaration name="arnormsSorted" type="RealMatrix" line="654"/>
                        <declaration name="idxReverse" type="int[]" line="655"/>
                        <declaration name="arnormsReverse" type="RealMatrix" line="656"/>
                        <declaration name="idxInv" type="int[]" line="658"/>
                        <declaration name="arnormsInv" type="RealMatrix" line="659"/>
                        <declaration name="negcovMax" type="double" line="660"/>
                        <scope line="661"/>
                        <declaration name="artmp" type="RealMatrix" line="665"/>
                        <declaration name="Cneg" type="RealMatrix" line="666"/>
                    </scope>
                    <scope line="670"/>
                </scope>
            </method>
            <javadoc line="676">
                Update B and D from C.                
                <param>
                    negccov Negative covariance factor.                    
                </param>
            </javadoc>
            <method name="updateBD" type="void" line="680">
                <params>
                    <param name="negccov" type="double"/>
                </params>
                <scope line="681">
                    <declaration name="eig" type="EigenDecomposition" line="683"/>
                    <scope line="687">
                        <scope line="688">
                            <scope line="689"/>
                        </scope>
                        <declaration name="tfac" type="double" line="693"/>
                    </scope>
                    <scope line="697">
                        <declaration name="tfac" type="double" line="698"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="707">
                Pushes the current best fitness value in a history queue.                
                <param>
                    vals History queue.                    
                </param>
                <param>
                    val Current best fitness value.                    
                </param>
            </javadoc>
            <method name="push" type="void" line="712">
                <params>
                    <param name="vals" type="double[]"/>
                    <param name="val" type="double"/>
                </params>
                <scope line="713"/>
            </method>
            <javadoc line="718">
                Sorts fitness values.                
                <param>
                    doubles Array of values to be sorted.                    
                </param>
                <return>
                    a sorted array of indices pointing into doubles.                    
                </return>
            </javadoc>
            <method name="sortedIndices" type="int[]" line="723">
                <params>
                    <param name="doubles" type="double[]"/>
                </params>
                <declaration name="dis" type="DoubleIndex[]" line="724"/>
                <scope line="725"/>
                <declaration name="indices" type="int[]" line="729"/>
                <scope line="730"/>
            </method>
            <class name="DoubleIndex" line="735">
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="DoubleIndex"/>
                    </type_params>
                </implements>
                <javadoc line="735">
                    Used to sort fitness values. Sorting is always in lower value first
                      order.                    
                </javadoc>
                <declaration name="value" type="double" line="740"/>
                <javadoc line="740">
                    Value to compare.                    
                </javadoc>
                <declaration name="index" type="int" line="744"/>
                <javadoc line="744">
                    Index into sorted array.                    
                </javadoc>
                <javadoc line="748">
                    @param value Value to compare.                    
                    <param>
                        index Index into sorted array.                        
                    </param>
                </javadoc>
                <method name="DoubleIndex" type="constructor" line="752">
                    <params>
                        <param name="value" type="double"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="756">
                    {@inheritDoc}                    
                </javadoc>
                <method name="compareTo" type="int" line="759">
                    <params>
                        <param name="o" type="DoubleIndex"/>
                    </params>
                </method>
                <javadoc line="762">
                    {@inheritDoc}                    
                </javadoc>
                <method name="equals" type="boolean" line="765">
                    <params>
                        <param name="other" type="Object"/>
                    </params>
                    <scope line="766"/>
                    <scope line="769"/>
                </method>
                <javadoc line="774">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hashCode" type="int" line="777">
                    <declaration name="bits" type="long" line="778"/>
                </method>
            </class>
            <class name="FitnessFunction" line="782">
                <javadoc line="782">
                    Normalizes fitness values to the range [0,1]. Adds a penalty to the
                      fitness value if out of range. The penalty is adjusted by calling
                      setValueRange().                    
                </javadoc>
                <declaration name="valueRange" type="double" line="788"/>
                <javadoc line="788">
                    Determines the penalty for boundary violations                    
                </javadoc>
                <declaration name="isRepairMode" type="boolean" line="792"/>
                <javadoc line="792">
                    Flag indicating whether the objective variables are forced into their
                      bounds if defined                    
                </javadoc>
                <javadoc line="797">
                    Simple constructor.                    
                </javadoc>
                <method name="FitnessFunction" type="constructor" line="800"/>
                <javadoc line="804">
                    @param point Normalized objective variables.                    
                    <return>
                        the objective value + penalty for violated bounds.                        
                    </return>
                </javadoc>
                <method name="value" type="double" line="808">
                    <params>
                        <param name="point" type="double[]"/>
                    </params>
                    <declaration name="value" type="double" line="809"/>
                    <scope line="810">
                        <declaration name="repaired" type="double[]" line="811"/>
                    </scope>
                    <scope line="814"/>
                </method>
                <javadoc line="819">
                    @param x Normalized objective variables.                    
                    <return>
                        {@code true} if in bounds.                        
                    </return>
                </javadoc>
                <method name="isFeasible" type="boolean" line="823">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="lB" type="double[]" line="824"/>
                    <declaration name="uB" type="double[]" line="825"/>
                    <scope line="826">
                        <scope line="827"/>
                        <scope line="830"/>
                    </scope>
                </method>
                <javadoc line="836">
                    @param valueRange Adjusts the penalty computation.                    
                </javadoc>
                <method name="setValueRange" type="void" line="839">
                    <params>
                        <param name="valueRange" type="double"/>
                    </params>
                </method>
                <javadoc line="842">
                    @param x Normalized objective variables.                    
                    <return>
                        the repaired (i.e. all in bounds) objective variables.                        
                    </return>
                </javadoc>
                <method name="repair" type="double[]" line="846">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="lB" type="double[]" line="847"/>
                    <declaration name="uB" type="double[]" line="848"/>
                    <declaration name="repaired" type="double[]" line="849"/>
                    <scope line="850">
                        <scope line="851"/>
                        <scope line="854"/>
                        <scope line="857"/>
                    </scope>
                </method>
                <javadoc line="863">
                    @param x Normalized objective variables.                    
                    <param>
                        repaired Repaired objective variables.                        
                    </param>
                    <return>
                        Penalty value according to the violation of the bounds.                        
                    </return>
                </javadoc>
                <method name="penalty" type="double" line="868">
                    <params>
                        <param name="x" type="double[]"/>
                        <param name="repaired" type="double[]"/>
                    </params>
                    <declaration name="penalty" type="double" line="869"/>
                    <scope line="870">
                        <declaration name="diff" type="double" line="871"/>
                    </scope>
                </method>
            </class>
            <javadoc line="877">
                @param m Input matrix                
                <return>
                    Matrix representing the element-wise logarithm of m.                    
                </return>
            </javadoc>
            <method name="log" type="RealMatrix" line="881">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <declaration name="d" type="double[][]" line="882"/>
                <scope line="883">
                    <scope line="884"/>
                </scope>
            </method>
            <javadoc line="890">
                @param m Input matrix.                
                <return>
                    Matrix representing the element-wise square root of m.                    
                </return>
            </javadoc>
            <method name="sqrt" type="RealMatrix" line="894">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <declaration name="d" type="double[][]" line="895"/>
                <scope line="896">
                    <scope line="897"/>
                </scope>
            </method>
            <javadoc line="903">
                @param m Input matrix.                
                <return>
                    Matrix representing the element-wise square of m.                    
                </return>
            </javadoc>
            <method name="square" type="RealMatrix" line="907">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <declaration name="d" type="double[][]" line="908"/>
                <scope line="909">
                    <scope line="910">
                        <declaration name="e" type="double" line="911"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="917">
                @param m Input matrix 1.                
                <param>
                    n Input matrix 2.                    
                </param>
                <return>
                    the matrix where the elements of m and n are element-wise multiplied.                    
                </return>
            </javadoc>
            <method name="times" type="RealMatrix" line="922">
                <params>
                    <param name="m" type="RealMatrix"/>
                    <param name="n" type="RealMatrix"/>
                </params>
                <declaration name="d" type="double[][]" line="923"/>
                <scope line="924">
                    <scope line="925"/>
                </scope>
            </method>
            <javadoc line="931">
                @param m Input matrix 1.                
                <param>
                    n Input matrix 2.                    
                </param>
                <return>
                    Matrix where the elements of m and n are element-wise divided.                    
                </return>
            </javadoc>
            <method name="divide" type="RealMatrix" line="936">
                <params>
                    <param name="m" type="RealMatrix"/>
                    <param name="n" type="RealMatrix"/>
                </params>
                <declaration name="d" type="double[][]" line="937"/>
                <scope line="938">
                    <scope line="939"/>
                </scope>
            </method>
            <javadoc line="945">
                @param m Input matrix.                
                <param>
                    cols Columns to select.                    
                </param>
                <return>
                    Matrix representing the selected columns.                    
                </return>
            </javadoc>
            <method name="selectColumns" type="RealMatrix" line="950">
                <params>
                    <param name="m" type="RealMatrix"/>
                    <param name="cols" type="int[]"/>
                </params>
                <declaration name="d" type="double[][]" line="951"/>
                <scope line="952">
                    <scope line="953"/>
                </scope>
            </method>
            <javadoc line="959">
                @param m Input matrix.                
                <param>
                    k Diagonal position.                    
                </param>
                <return>
                    Upper triangular part of matrix.                    
                </return>
            </javadoc>
            <method name="triu" type="RealMatrix" line="964">
                <params>
                    <param name="m" type="RealMatrix"/>
                    <param name="k" type="int"/>
                </params>
                <declaration name="d" type="double[][]" line="965"/>
                <scope line="966">
                    <scope line="967"/>
                </scope>
            </method>
            <javadoc line="973">
                @param m Input matrix.                
                <return>
                    Row matrix representing the sums of the rows.                    
                </return>
            </javadoc>
            <method name="sumRows" type="RealMatrix" line="977">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <declaration name="d" type="double[][]" line="978"/>
                <scope line="979">
                    <declaration name="sum" type="double" line="980"/>
                    <scope line="981"/>
                </scope>
            </method>
            <javadoc line="988">
                @param m Input matrix.                
                <return>
                    the diagonal n-by-n matrix if m is a column matrix or the column
                      matrix representing the diagonal if m is a n-by-n matrix.                    
                </return>
            </javadoc>
            <method name="diag" type="RealMatrix" line="993">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <scope line="994">
                    <declaration name="d" type="double[][]" line="995"/>
                    <scope line="996"/>
                </scope>
                <scope line="1001">
                    <declaration name="d" type="double[][]" line="1002"/>
                    <scope line="1003"/>
                </scope>
            </method>
            <javadoc line="1009">
                Copies a column from m1 to m2.                
                <param>
                    m1 Source matrix.                    
                </param>
                <param>
                    col1 Source column.                    
                </param>
                <param>
                    m2 Target matrix.                    
                </param>
                <param>
                    col2 Target column.                    
                </param>
            </javadoc>
            <method name="copyColumn" type="void" line="1016">
                <params>
                    <param name="m1" type="RealMatrix"/>
                    <param name="col1" type="int"/>
                    <param name="m2" type="RealMatrix"/>
                    <param name="col2" type="int"/>
                </params>
                <scope line="1017"/>
            </method>
            <javadoc line="1021">
                @param n Number of rows.                
                <param>
                    m Number of columns.                    
                </param>
                <return>
                    n-by-m matrix filled with 1.                    
                </return>
            </javadoc>
            <method name="ones" type="RealMatrix" line="1026">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                </params>
                <declaration name="d" type="double[][]" line="1027"/>
                <scope line="1028"/>
            </method>
            <javadoc line="1033">
                @param n Number of rows.                
                <param>
                    m Number of columns.                    
                </param>
                <return>
                    n-by-m matrix of 0 values out of diagonal, and 1 values on
                      the diagonal.                    
                </return>
            </javadoc>
            <method name="eye" type="RealMatrix" line="1039">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                </params>
                <declaration name="d" type="double[][]" line="1040"/>
                <scope line="1041">
                    <scope line="1042"/>
                </scope>
            </method>
            <javadoc line="1048">
                @param n Number of rows.                
                <param>
                    m Number of columns.                    
                </param>
                <return>
                    n-by-m matrix of zero values.                    
                </return>
            </javadoc>
            <method name="zeros" type="RealMatrix" line="1053">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                </params>
            </method>
            <javadoc line="1056">
                @param mat Input matrix.                
                <param>
                    n Number of row replicates.                    
                </param>
                <param>
                    m Number of column replicates.                    
                </param>
                <return>
                    a matrix which replicates the input matrix in both directions.                    
                </return>
            </javadoc>
            <method name="repmat" type="RealMatrix" line="1062">
                <params>
                    <param name="mat" type="RealMatrix"/>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                </params>
                <declaration name="rd" type="int" line="1063"/>
                <declaration name="cd" type="int" line="1064"/>
                <declaration name="d" type="double[][]" line="1065"/>
                <scope line="1066">
                    <scope line="1067"/>
                </scope>
            </method>
            <javadoc line="1073">
                @param start Start value.                
                <param>
                    end End value.                    
                </param>
                <param>
                    step Step size.                    
                </param>
                <return>
                    a sequence as column matrix.                    
                </return>
            </javadoc>
            <method name="sequence" type="RealMatrix" line="1079">
                <params>
                    <param name="start" type="double"/>
                    <param name="end" type="double"/>
                    <param name="step" type="double"/>
                </params>
                <declaration name="size" type="int" line="1080"/>
                <declaration name="d" type="double[][]" line="1081"/>
                <declaration name="value" type="double" line="1082"/>
                <scope line="1083"/>
            </method>
            <javadoc line="1089">
                @param m Input matrix.                
                <return>
                    the maximum of the matrix element values.                    
                </return>
            </javadoc>
            <method name="max" type="double" line="1093">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <declaration name="max" type="double" line="1094"/>
                <scope line="1095">
                    <scope line="1096">
                        <declaration name="e" type="double" line="1097"/>
                        <scope line="1098"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1105">
                @param m Input matrix.                
                <return>
                    the minimum of the matrix element values.                    
                </return>
            </javadoc>
            <method name="min" type="double" line="1109">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <declaration name="min" type="double" line="1110"/>
                <scope line="1111">
                    <scope line="1112">
                        <declaration name="e" type="double" line="1113"/>
                        <scope line="1114"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1121">
                @param m Input array.                
                <return>
                    the maximum of the array values.                    
                </return>
            </javadoc>
            <method name="max" type="double" line="1125">
                <params>
                    <param name="m" type="double[]"/>
                </params>
                <declaration name="max" type="double" line="1126"/>
                <scope line="1127">
                    <scope line="1128"/>
                </scope>
            </method>
            <javadoc line="1134">
                @param m Input array.                
                <return>
                    the minimum of the array values.                    
                </return>
            </javadoc>
            <method name="min" type="double" line="1138">
                <params>
                    <param name="m" type="double[]"/>
                </params>
                <declaration name="min" type="double" line="1139"/>
                <scope line="1140">
                    <scope line="1141"/>
                </scope>
            </method>
            <javadoc line="1147">
                @param indices Input index array.                
                <return>
                    the inverse of the mapping defined by indices.                    
                </return>
            </javadoc>
            <method name="inverse" type="int[]" line="1151">
                <params>
                    <param name="indices" type="int[]"/>
                </params>
                <declaration name="inverse" type="int[]" line="1152"/>
                <scope line="1153"/>
            </method>
            <javadoc line="1158">
                @param indices Input index array.                
                <return>
                    the indices in inverse order (last is first).                    
                </return>
            </javadoc>
            <method name="reverse" type="int[]" line="1162">
                <params>
                    <param name="indices" type="int[]"/>
                </params>
                <declaration name="reverse" type="int[]" line="1163"/>
                <scope line="1164"/>
            </method>
            <javadoc line="1169">
                @param size Length of random array.                
                <return>
                    an array of Gaussian random numbers.                    
                </return>
            </javadoc>
            <method name="randn" type="double[]" line="1173">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="randn" type="double[]" line="1174"/>
                <scope line="1175"/>
            </method>
            <javadoc line="1180">
                @param size Number of rows.                
                <param>
                    popSize Population size.                    
                </param>
                <return>
                    a 2-dimensional matrix of Gaussian random numbers.                    
                </return>
            </javadoc>
            <method name="randn1" type="RealMatrix" line="1185">
                <params>
                    <param name="size" type="int"/>
                    <param name="popSize" type="int"/>
                </params>
                <declaration name="d" type="double[][]" line="1186"/>
                <scope line="1187">
                    <scope line="1188"/>
                </scope>
            </method>
        </class>
    </source>