<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.genetics">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <class name="UniformCrossover" line="28">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="CrossoverPolicy"/>
            <javadoc line="28">
                Perform Uniform Crossover [UX] on the specified chromosomes. A fixed mixing
                  ratio is used to combine genes from the first and second parents, e.g. using a
                  ratio of 0.5 would result in approximately 50% of genes coming from each
                  parent. This is typically a poor method of crossover, but empirical evidence
                  suggests that it is more exploratory and results in a larger part of the
                  problem space being searched.
                  &lt;p&gt;
                  This crossover policy evaluates each gene of the parent chromosomes by chosing a
                  uniform random number {@code p} in the range [0, 1]. If {@code p} &amp;lt; {@code ratio},
                  the parent genes are swapped. This means with a ratio of 0.7, 30% of the genes from the
                  first parent and 70% from the second parent will be selected for the first offspring (and
                  vice versa for the second offspring).
                  &lt;p&gt;
                  This policy works only on {@link AbstractListChromosome}, and therefore it
                  is parameterized by T. Moreover, the chromosomes must have same lengths.                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Crossover_%28genetic_algorithm%29&quot;&gt;Crossover techniques (Wikipedia)&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://www.obitko.com/tutorials/genetic-algorithms/crossover-mutation.php&quot;&gt;Crossover (Obitko.com)&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://www.tomaszgwiazda.com/uniformX.htm&quot;&gt;Uniform crossover&lt;/a&gt;                    
                </see>
                <param>
                    &lt;T&gt;
                       generic type of the {@link AbstractListChromosome}s for crossover                    
                </param>
                <since>
                    3.1                    
                </since>
                <version>
                    $Id: UniformCrossover.java 1385297 2012-09-16 16:05:57Z tn $                    
                </version>
            </javadoc>
            <declaration name="ratio" type="double" line="54"/>
            <javadoc line="54">
                The mixing ratio.                
            </javadoc>
            <javadoc line="57">
                Creates a new {@link UniformCrossover} policy using the given mixing ratio.                
                <param>
                    ratio the mixing ratio                    
                </param>
                <throws>
                    OutOfRangeException if the mixing ratio is outside the [0, 1] range                    
                </throws>
            </javadoc>
            <method name="UniformCrossover" type="constructor" line="63">
                <params>
                    <param name="ratio" type="double"/>
                </params>
                <scope line="64"/>
            </method>
            <javadoc line="70">
                Returns the mixing ratio used by this {@link CrossoverPolicy}.                
                <return>
                    the mixing ratio                    
                </return>
            </javadoc>
            <method name="getRatio" type="double" line="75"/>
            <javadoc line="79">
                {@inheritDoc}                
                <throws>
                    MathIllegalArgumentException iff one of the chromosomes is
                      not an instance of {@link AbstractListChromosome}                    
                </throws>
                <throws>
                    DimensionMismatchException if the length of the two chromosomes is different                    
                </throws>
            </javadoc>
            <method name="crossover" type="ChromosomePair" line="88">
                <params>
                    <param name="first" type="Chromosome"/>
                    <param name="second" type="Chromosome"/>
                </params>
                <scope line="90"/>
            </method>
            <javadoc line="96">
                Helper for {@link #crossover(Chromosome,Chromosome)}. Performs the actual crossover.                
                <param>
                    first the first chromosome                    
                </param>
                <param>
                    second the second chromosome                    
                </param>
                <return>
                    the pair of new chromosomes that resulted from the crossover                    
                </return>
                <throws>
                    DimensionMismatchException if the length of the two chromosomes is different                    
                </throws>
            </javadoc>
            <method name="mate" type="ChromosomePair" line="105">
                <params>
                    <param name="first" type="AbstractListChromosome<T>"/>
                    <param name="second" type="AbstractListChromosome<T>"/>
                </params>
                <comment line="112">
                    array representations of the parents                    
                </comment>
                <comment line="115">
                    and of the children                    
                </comment>
                <comment line="124">
                    swap the bits -&gt; take other parent                    
                </comment>
                <declaration name="length" type="int" line="106"/>
                <scope line="107"/>
                <declaration name="parent1Rep" type="List&lt;T&gt;" line="112"/>
                <declaration name="parent2Rep" type="List&lt;T&gt;" line="113"/>
                <declaration name="child1Rep" type="List&lt;T&gt;" line="115"/>
                <declaration name="child2Rep" type="List&lt;T&gt;" line="116"/>
                <declaration name="random" type="RandomGenerator" line="118"/>
                <scope line="120">
                    <scope line="122"/>
                    <scope line="126"/>
                </scope>
            </method>
        </class>
    </source>