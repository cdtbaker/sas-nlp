<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.integration">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="BaseAbstractUnivariateIntegrator" line="30">
            <implements interface="UnivariateIntegrator"/>
            <javadoc line="30">
                Provide a default implementation for several generic functions.                
                <version>
                    $Id: BaseAbstractUnivariateIntegrator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_ABSOLUTE_ACCURACY" type="double" line="38"/>
            <javadoc line="38">
                Default absolute accuracy.                
            </javadoc>
            <declaration name="DEFAULT_RELATIVE_ACCURACY" type="double" line="41"/>
            <javadoc line="41">
                Default relative accuracy.                
            </javadoc>
            <declaration name="DEFAULT_MIN_ITERATIONS_COUNT" type="int" line="44"/>
            <javadoc line="44">
                Default minimal iteration count.                
            </javadoc>
            <declaration name="DEFAULT_MAX_ITERATIONS_COUNT" type="int" line="47"/>
            <javadoc line="47">
                Default maximal iteration count.                
            </javadoc>
            <declaration name="iterations" type="Incrementor" line="50"/>
            <javadoc line="50">
                The iteration count.                
            </javadoc>
            <declaration name="absoluteAccuracy" type="double" line="53"/>
            <javadoc line="53">
                Maximum absolute error.                
            </javadoc>
            <declaration name="relativeAccuracy" type="double" line="56"/>
            <javadoc line="56">
                Maximum relative error.                
            </javadoc>
            <declaration name="minimalIterationCount" type="int" line="59"/>
            <javadoc line="59">
                minimum number of iterations                
            </javadoc>
            <declaration name="evaluations" type="Incrementor" line="62"/>
            <javadoc line="62">
                The functions evaluation count.                
            </javadoc>
            <declaration name="function" type="UnivariateFunction" line="65"/>
            <javadoc line="65">
                Function to integrate.                
            </javadoc>
            <declaration name="min" type="double" line="68"/>
            <javadoc line="68">
                Lower bound for the interval.                
            </javadoc>
            <declaration name="max" type="double" line="71"/>
            <javadoc line="71">
                Upper bound for the interval.                
            </javadoc>
            <javadoc line="74">
                Construct an integrator with given accuracies and iteration counts.
                  &lt;p&gt;
                  The meanings of the various parameters are:
                  &lt;ul&gt;
                  &lt;li&gt;relative accuracy:
                  this is used to stop iterations if the absolute accuracy can&apos;t be
                  achieved due to large values or short mantissa length. If this
                  should be the primary criterion for convergence rather then a
                  safety measure, set the absolute accuracy to a ridiculously small value,
                  like {@link org.apache.commons.math3.util.Precision#SAFE_MIN Precision.SAFE_MIN}.&lt;/li&gt;
                  &lt;li&gt;absolute accuracy:
                  The default is usually chosen so that results in the interval
                  -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the
                  expected absolute value of your results is of much smaller magnitude, set
                  this to a smaller value.&lt;/li&gt;
                  &lt;li&gt;minimum number of iterations:
                  minimal iteration is needed to avoid false early convergence, e.g.
                  the sample points happen to be zeroes of the function. Users can
                  use the default value or choose one that they see as appropriate.&lt;/li&gt;
                  &lt;li&gt;maximum number of iterations:
                  usually a high iteration count indicates convergence problems. However,
                  the &quot;reasonable value&quot; varies widely for different algorithms. Users are
                  advised to use the default value supplied by the algorithm.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    relativeAccuracy relative accuracy of the result                    
                </param>
                <param>
                    absoluteAccuracy absolute accuracy of the result                    
                </param>
                <param>
                    minimalIterationCount minimum number of iterations                    
                </param>
                <param>
                    maximalIterationCount maximum number of iterations                    
                </param>
                <exception>
                    NotStrictlyPositiveException if minimal number of iterations
                      is not strictly positive                    
                </exception>
                <exception>
                    NumberIsTooSmallException if maximal number of iterations
                      is lesser than or equal to the minimal number of iterations                    
                </exception>
            </javadoc>
            <method name="BaseAbstractUnivariateIntegrator" type="constructor" line="113">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="minimalIterationCount" type="int"/>
                    <param name="maximalIterationCount" type="int"/>
                </params>
                <comment line="116">
                    accuracy settings                    
                </comment>
                <comment line="120">
                    iterations count settings                    
                </comment>
                <comment line="131">
                    prepare evaluations counter, but do not set it yet                    
                </comment>
                <scope line="120"/>
                <scope line="123"/>
            </method>
            <javadoc line="135">
                Construct an integrator with given accuracies.                
                <param>
                    relativeAccuracy relative accuracy of the result                    
                </param>
                <param>
                    absoluteAccuracy absolute accuracy of the result                    
                </param>
            </javadoc>
            <method name="BaseAbstractUnivariateIntegrator" type="constructor" line="141">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="146">
                Construct an integrator with given iteration counts.                
                <param>
                    minimalIterationCount minimum number of iterations                    
                </param>
                <param>
                    maximalIterationCount maximum number of iterations                    
                </param>
                <exception>
                    NotStrictlyPositiveException if minimal number of iterations
                      is not strictly positive                    
                </exception>
                <exception>
                    NumberIsTooSmallException if maximal number of iterations
                      is lesser than or equal to the minimal number of iterations                    
                </exception>
            </javadoc>
            <method name="BaseAbstractUnivariateIntegrator" type="constructor" line="157">
                <params>
                    <param name="minimalIterationCount" type="int"/>
                    <param name="maximalIterationCount" type="int"/>
                </params>
            </method>
            <javadoc line="162">
                {@inheritDoc}                
            </javadoc>
            <method name="getRelativeAccuracy" type="double" line="163"/>
            <javadoc line="167">
                {@inheritDoc}                
            </javadoc>
            <method name="getAbsoluteAccuracy" type="double" line="168"/>
            <javadoc line="172">
                {@inheritDoc}                
            </javadoc>
            <method name="getMinimalIterationCount" type="int" line="173"/>
            <javadoc line="177">
                {@inheritDoc}                
            </javadoc>
            <method name="getMaximalIterationCount" type="int" line="178"/>
            <javadoc line="182">
                {@inheritDoc}                
            </javadoc>
            <method name="getEvaluations" type="int" line="183"/>
            <javadoc line="187">
                {@inheritDoc}                
            </javadoc>
            <method name="getIterations" type="int" line="188"/>
            <javadoc line="192">
                @return the lower bound.                
            </javadoc>
            <method name="getMin" type="double" line="195"/>
            <javadoc line="198">
                @return the upper bound.                
            </javadoc>
            <method name="getMax" type="double" line="201"/>
            <javadoc line="205">
                Compute the objective function value.                
                <param>
                    point Point at which the objective function must be evaluated.                    
                </param>
                <return>
                    the objective function value at specified point.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of function
                      evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="computeObjectiveValue" type="double" line="214">
                <params>
                    <param name="point" type="double"/>
                </params>
                <scope line="215"/>
                <scope line="217"/>
            </method>
            <javadoc line="223">
                Prepare for computation.
                  Subclasses must call this method if they override any of the{@code solve} methods.                
                <param>
                    maxEval Maximum number of evaluations.                    
                </param>
                <param>
                    f the integrand function                    
                </param>
                <param>
                    lower the min bound for the interval                    
                </param>
                <param>
                    upper the upper bound for the interval                    
                </param>
                <throws>
                    NullArgumentException if {@code f} is {@code null}.                    
                </throws>
                <throws>
                    MathIllegalArgumentException if {@code min >= max}.                    
                </throws>
            </javadoc>
            <method name="setup" type="void" line="238">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <comment line="241">
                    Checks.                    
                </comment>
                <comment line="245">
                    Reset.                    
                </comment>
            </method>
            <javadoc line="254">
                {@inheritDoc}                
            </javadoc>
            <method name="integrate" type="double" line="258">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <comment line="261">
                    Initialization.                    
                </comment>
                <comment line="264">
                    Perform computation.                    
                </comment>
            </method>
            <method name="doIntegrate" type="double" line="268"/>
            <javadoc line="268">
                Method for implementing actual integration algorithms in derived
                  classes.                
                <return>
                    the root.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of evaluations
                      is exceeded.                    
                </throws>
                <throws>
                    MaxCountExceededException if the maximum iteration count is exceeded
                      or the integrator detects convergence problems otherwise                    
                </throws>
            </javadoc>
        </class>
    </source>