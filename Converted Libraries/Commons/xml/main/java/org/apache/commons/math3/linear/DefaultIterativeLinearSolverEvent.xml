<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <class name="DefaultIterativeLinearSolverEvent" line="3">
            <extends class="IterativeLinearSolverEvent"/>
            <javadoc line="3">
                A default concrete implementation of the abstract class{@link IterativeLinearSolverEvent}.                
                <version>
                    $Id: DefaultIterativeLinearSolverEvent.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="8"/>
            <javadoc line="8">
                                
            </javadoc>
            <declaration name="b" type="RealVector" line="11"/>
            <javadoc line="11">
                The right-hand side vector.                
            </javadoc>
            <declaration name="r" type="RealVector" line="15"/>
            <javadoc line="15">
                The current estimate of the residual.                
            </javadoc>
            <declaration name="rnorm" type="double" line="19"/>
            <javadoc line="19">
                The current estimate of the norm of the residual.                
            </javadoc>
            <declaration name="x" type="RealVector" line="23"/>
            <javadoc line="23">
                The current estimate of the solution.                
            </javadoc>
            <javadoc line="27">
                Creates a new instance of this class. This implementation does
                  &lt;em&gt;not&lt;/em&gt; deep copy the specified vectors {@code x}, {@code b},{@code r}. Therefore the user must make sure that these vectors are
                  either unmodifiable views or deep copies of the same vectors actually
                  used by the {@code source}. Failure to do so may compromise subsequent
                  iterations of the {@code source}. If the residual vector {@code r} is{@code null}, then {@link #getResidual()} throws a{@link MathUnsupportedOperationException}, and{@link #providesResidual()} returns {@code false}.                
                <param>
                    source the iterative solver which fired this event                    
                </param>
                <param>
                    iterations the number of iterations performed at the time{@code this} event is created                    
                </param>
                <param>
                    x the current estimate of the solution                    
                </param>
                <param>
                    b the right-hand side vector                    
                </param>
                <param>
                    r the current estimate of the residual (can be {@code null})                    
                </param>
                <param>
                    rnorm the norm of the current estimate of the residual                    
                </param>
            </javadoc>
            <method name="DefaultIterativeLinearSolverEvent" type="constructor" line="40">
                <params>
                    <param name="source" type="Object"/>
                    <param name="iterations" type="int"/>
                    <param name="x" type="RealVector"/>
                    <param name="b" type="RealVector"/>
                    <param name="r" type="RealVector"/>
                    <param name="rnorm" type="double"/>
                </params>
            </method>
            <javadoc line="47">
                Creates a new instance of this class. This implementation does
                  &lt;em&gt;not&lt;/em&gt; deep copy the specified vectors {@code x}, {@code b}.
                  Therefore the user must make sure that these vectors are either
                  unmodifiable views or deep copies of the same vectors actually used by
                  the {@code source}. Failure to do so may compromise subsequent iterations
                  of the {@code source}. Callling {@link #getResidual()} on instances
                  returned by this constructor throws a{@link MathUnsupportedOperationException}, while{@link #providesResidual()} returns {@code false}.                
                <param>
                    source the iterative solver which fired this event                    
                </param>
                <param>
                    iterations the number of iterations performed at the time{@code this} event is created                    
                </param>
                <param>
                    x the current estimate of the solution                    
                </param>
                <param>
                    b the right-hand side vector                    
                </param>
                <param>
                    rnorm the norm of the current estimate of the residual                    
                </param>
            </javadoc>
            <method name="DefaultIterativeLinearSolverEvent" type="constructor" line="61">
                <params>
                    <param name="source" type="Object"/>
                    <param name="iterations" type="int"/>
                    <param name="x" type="RealVector"/>
                    <param name="b" type="RealVector"/>
                    <param name="rnorm" type="double"/>
                </params>
            </method>
            <javadoc line="68">
                {@inheritDoc}                
            </javadoc>
            <method name="getNormOfResidual" type="double" line="71"/>
            <javadoc line="74">
                {@inheritDoc}This implementation throws an {@link MathUnsupportedOperationException}if no residual vector {@code r} was provided at construction time.                
            </javadoc>
            <method name="getResidual" type="RealVector" line="77">
                <scope line="78"/>
            </method>
            <javadoc line="83">
                {@inheritDoc}                
            </javadoc>
            <method name="getRightHandSideVector" type="RealVector" line="86"/>
            <javadoc line="89">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolution" type="RealVector" line="92"/>
            <javadoc line="95">
                {@inheritDoc}This implementation returns {@code true} if a non-{@code null} value was
                  specified for the residual vector {@code r} at construction time.                
                <return>
                    {@code true} if {@code r != null}                    
                </return>
            </javadoc>
            <method name="providesResidual" type="boolean" line="100"/>
        </class>
    </source>