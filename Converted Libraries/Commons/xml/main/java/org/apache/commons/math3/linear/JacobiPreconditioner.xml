<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.analysis.function.Sqrt"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="JacobiPreconditioner" line="4">
            <extends class="RealLinearOperator"/>
            <javadoc line="4">
                This class implements the standard Jacobi (diagonal) preconditioner. For a
                  matrix A&lt;sub&gt;ij&lt;/sub&gt;, this preconditioner is
                  M = diag(1 / A&lt;sub&gt;11&lt;/sub&gt;, 1 / A&lt;sub&gt;22&lt;/sub&gt;, &amp;hellip;).                
                <version>
                    $Id: JacobiPreconditioner.java 1422195 2012-12-15 06:45:18Z psteitz $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="diag" type="ArrayRealVector" line="12"/>
            <javadoc line="12">
                The diagonal coefficients of the preconditioner.                
            </javadoc>
            <javadoc line="16">
                Creates a new instance of this class.                
                <param>
                    diag the diagonal coefficients of the linear operator to be
                      preconditioned                    
                </param>
                <param>
                    deep {@code true} if a deep copy of the above array should be
                      performed                    
                </param>
            </javadoc>
            <method name="JacobiPreconditioner" type="constructor" line="23">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="26">
                Creates a new instance of this class. This method extracts the diagonal
                  coefficients of the specified linear operator. If {@code a} does not
                  extend {@link AbstractRealMatrix}, then the coefficients of the
                  underlying matrix are not accessible, coefficient extraction is made by
                  matrix-vector products with the basis vectors (and might therefore take
                  some time). With matrices, direct entry access is carried out.                
                <param>
                    a the linear operator for which the preconditioner should be built                    
                </param>
                <return>
                    the diagonal preconditioner made of the inverse of the diagonal
                      coefficients of the specified linear operator                    
                </return>
                <throws>
                    NonSquareOperatorException if {@code a} is not square                    
                </throws>
            </javadoc>
            <method name="create" type="JacobiPreconditioner" line="38">
                <params>
                    <param name="a" type="RealLinearOperator"/>
                </params>
                <declaration name="n" type="int" line="39"/>
                <scope line="40"/>
                <declaration name="diag" type="double[]" line="43"/>
                <scope line="44">
                    <declaration name="m" type="AbstractRealMatrix" line="45"/>
                    <scope line="46"/>
                </scope>
                <scope line="50">
                    <declaration name="x" type="ArrayRealVector" line="51"/>
                    <scope line="52"/>
                </scope>
            </method>
            <javadoc line="60">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="63"/>
            <javadoc line="66">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="69"/>
            <javadoc line="72">
                {@inheritDoc}                
            </javadoc>
            <method name="operate" type="RealVector" line="75">
                <params>
                    <param name="x" type="RealVector"/>
                </params>
            </method>
            <javadoc line="78">
                Returns the square root of {@code this} diagonal operator. More
                  precisely, this method returns
                  P = diag(1 / &amp;radic;A&lt;sub&gt;11&lt;/sub&gt;, 1 / &amp;radic;A&lt;sub&gt;22&lt;/sub&gt;, &amp;hellip;).                
                <return>
                    the square root of {@code this} preconditioner                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="sqrt" type="RealLinearOperator" line="85">
                <declaration name="sqrtDiag" type="RealVector" line="86"/>
                <anonymous_class line="87">
                    <javadoc line="88">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="operate" type="RealVector" line="91">
                        <params>
                            <param name="x" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="94">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getRowDimension" type="int" line="97"/>
                    <javadoc line="100">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getColumnDimension" type="int" line="103"/>
                </anonymous_class>
            </method>
        </class>
    </source>