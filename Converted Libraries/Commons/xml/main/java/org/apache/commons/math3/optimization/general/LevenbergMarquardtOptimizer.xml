<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.general">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.optimization.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="LevenbergMarquardtOptimizer" line="10">
            <extends class="AbstractLeastSquaresOptimizer"/>
            <javadoc line="10">
                This class solves a least squares problem using the Levenberg-Marquardt algorithm.
                  &lt;p&gt;This implementation &lt;em&gt;should&lt;/em&gt; work even for over-determined systems
                  (i.e. systems having more point than equations). Over-determined systems
                  are solved by ignoring the point which have the smallest impact according
                  to their jacobian column norm. Only the rank of the matrix and some loop bounds
                  are changed to implement this.&lt;/p&gt;
                  &lt;p&gt;The resolution engine is a simple translation of the MINPACK &lt;a
                  href=&quot;http://www.netlib.org/minpack/lmder.f&quot;&gt;lmder&lt;/a&gt; routine with minor
                  changes. The changes include the over-determined resolution, the use of
                  inherited convergence checker and the Q.R. decomposition which has been
                  rewritten following the algorithm described in the
                  P. Lascaux and R. Theodor book &lt;i&gt;Analyse num&amp;eacute;rique matricielle
                  appliqu&amp;eacute;e &amp;agrave; l&apos;art de l&apos;ing&amp;eacute;nieur&lt;/i&gt;, Masson 1986.&lt;/p&gt;
                  &lt;p&gt;The authors of the original fortran version are:
                  &lt;ul&gt;
                  &lt;li&gt;Argonne National Laboratory. MINPACK project. March 1980&lt;/li&gt;
                  &lt;li&gt;Burton S. Garbow&lt;/li&gt;
                  &lt;li&gt;Kenneth E. Hillstrom&lt;/li&gt;
                  &lt;li&gt;Jorge J. More&lt;/li&gt;
                  &lt;/ul&gt;
                  The redistribution policy for MINPACK is available &lt;a
                  href=&quot;http://www.netlib.org/minpack/disclaimer&quot;&gt;here&lt;/a&gt;, for convenience, it
                  is reproduced below.&lt;/p&gt;
                  &lt;table border=&quot;0&quot; width=&quot;80%&quot; cellpadding=&quot;10&quot; align=&quot;center&quot; bgcolor=&quot;#E0E0E0&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;
                  Minpack Copyright Notice (1999) University of Chicago.
                  All rights reserved
                  &lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;
                  Redistribution and use in source and binary forms, with or without
                  modification, are permitted provided that the following conditions
                  are met:
                  &lt;ol&gt;
                  &lt;li&gt;Redistributions of source code must retain the above copyright
                  notice, this list of conditions and the following disclaimer.&lt;/li&gt;
                  &lt;li&gt;Redistributions in binary form must reproduce the above
                  copyright notice, this list of conditions and the following
                  disclaimer in the documentation and/or other materials provided
                  with the distribution.&lt;/li&gt;
                  &lt;li&gt;The end-user documentation included with the redistribution, if any,
                  must include the following acknowledgment:
                  &lt;code&gt;This product includes software developed by the University of
                  Chicago, as Operator of Argonne National Laboratory.&lt;/code&gt;
                  Alternately, this acknowledgment may appear in the software itself,
                  if and wherever such third-party acknowledgments normally appear.&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED &quot;AS IS&quot;
                  WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE
                  UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND
                  THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR
                  IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES
                  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE
                  OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY
                  OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR
                  USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF
                  THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)
                  DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
                  UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL
                  BE CORRECTED.&lt;/strong&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
                  HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF
                  ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,
                  INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF
                  ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF
                  PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER
                  SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT
                  (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,
                  EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
                  POSSIBILITY OF SUCH LOSS OR DAMAGES.&lt;/strong&gt;&lt;/li&gt;
                  &lt;ol&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;                
                <version>
                    $Id: LevenbergMarquardtOptimizer.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="solvedCols" type="int" line="86"/>
            <javadoc line="86">
                Number of solved point.                
            </javadoc>
            <declaration name="diagR" type="double[]" line="90"/>
            <javadoc line="90">
                Diagonal elements of the R matrix in the Q.R. decomposition.                
            </javadoc>
            <declaration name="jacNorm" type="double[]" line="94"/>
            <javadoc line="94">
                Norms of the columns of the jacobian matrix.                
            </javadoc>
            <declaration name="beta" type="double[]" line="98"/>
            <javadoc line="98">
                Coefficients of the Householder transforms vectors.                
            </javadoc>
            <declaration name="permutation" type="int[]" line="102"/>
            <javadoc line="102">
                Columns permutation array.                
            </javadoc>
            <declaration name="rank" type="int" line="106"/>
            <javadoc line="106">
                Rank of the jacobian matrix.                
            </javadoc>
            <declaration name="lmPar" type="double" line="110"/>
            <javadoc line="110">
                Levenberg-Marquardt parameter.                
            </javadoc>
            <declaration name="lmDir" type="double[]" line="114"/>
            <javadoc line="114">
                Parameters evolution direction associated with lmPar.                
            </javadoc>
            <declaration name="initialStepBoundFactor" type="double" line="118"/>
            <javadoc line="118">
                Positive input variable used in determining the initial step bound.                
            </javadoc>
            <declaration name="costRelativeTolerance" type="double" line="122"/>
            <javadoc line="122">
                Desired relative error in the sum of squares.                
            </javadoc>
            <declaration name="parRelativeTolerance" type="double" line="126"/>
            <javadoc line="126">
                Desired relative error in the approximate solution parameters.                
            </javadoc>
            <declaration name="orthoTolerance" type="double" line="130"/>
            <javadoc line="130">
                Desired max cosine on the orthogonality between the function vector
                  and the columns of the jacobian.                
            </javadoc>
            <declaration name="qrRankingThreshold" type="double" line="135"/>
            <javadoc line="135">
                Threshold for QR ranking.                
            </javadoc>
            <declaration name="weightedResidual" type="double[]" line="139"/>
            <javadoc line="139">
                Weighted residuals.                
            </javadoc>
            <declaration name="weightedJacobian" type="double[][]" line="143"/>
            <javadoc line="143">
                Weighted Jacobian.                
            </javadoc>
            <javadoc line="147">
                Build an optimizer for least squares problems with default values
                  for all the tuning parameters (see the {@link #LevenbergMarquardtOptimizer(double,double,double,double,double)other contructor}.
                  The default values for the algorithm settings are:
                  &lt;ul&gt;
                  &lt;li&gt;Initial step bound factor: 100&lt;/li&gt;
                  &lt;li&gt;Cost relative tolerance: 1e-10&lt;/li&gt;
                  &lt;li&gt;Parameters relative tolerance: 1e-10&lt;/li&gt;
                  &lt;li&gt;Orthogonality tolerance: 1e-10&lt;/li&gt;
                  &lt;li&gt;QR ranking threshold: {@link Precision#SAFE_MIN}&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="LevenbergMarquardtOptimizer" type="constructor" line="159"/>
            <javadoc line="162">
                Constructor that allows the specification of a custom convergence
                  checker.
                  Note that all the usual convergence checks will be &lt;em&gt;disabled&lt;/em&gt;.
                  The default values for the algorithm settings are:
                  &lt;ul&gt;
                  &lt;li&gt;Initial step bound factor: 100&lt;/li&gt;
                  &lt;li&gt;Cost relative tolerance: 1e-10&lt;/li&gt;
                  &lt;li&gt;Parameters relative tolerance: 1e-10&lt;/li&gt;
                  &lt;li&gt;Orthogonality tolerance: 1e-10&lt;/li&gt;
                  &lt;li&gt;QR ranking threshold: {@link Precision#SAFE_MIN}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    checker Convergence checker.                    
                </param>
            </javadoc>
            <method name="LevenbergMarquardtOptimizer" type="constructor" line="176">
                <params>
                    <param name="checker" type="ConvergenceChecker<PointVectorValuePair>"/>
                </params>
            </method>
            <javadoc line="179">
                Constructor that allows the specification of a custom convergence
                  checker, in addition to the standard ones.                
                <param>
                    initialStepBoundFactor Positive input variable used in
                      determining the initial step bound. This bound is set to the
                      product of initialStepBoundFactor and the euclidean norm of{@code diag  x} if non-zero, or else to {@code initialStepBoundFactor}itself. In most cases factor should lie in the interval{@code (0.1, 100.0)}. {@code 100} is a generally recommended value.                    
                </param>
                <param>
                    checker Convergence checker.                    
                </param>
                <param>
                    costRelativeTolerance Desired relative error in the sum of
                      squares.                    
                </param>
                <param>
                    parRelativeTolerance Desired relative error in the approximate
                      solution parameters.                    
                </param>
                <param>
                    orthoTolerance Desired max cosine on the orthogonality between
                      the function vector and the columns of the Jacobian.                    
                </param>
                <param>
                    threshold Desired threshold for QR ranking. If the squared norm
                      of a column vector is smaller or equal to this threshold during QR
                      decomposition, it is considered to be a zero vector and hence the rank
                      of the matrix is reduced.                    
                </param>
            </javadoc>
            <method name="LevenbergMarquardtOptimizer" type="constructor" line="197">
                <params>
                    <param name="initialStepBoundFactor" type="double"/>
                    <param name="checker" type="ConvergenceChecker<PointVectorValuePair>"/>
                    <param name="costRelativeTolerance" type="double"/>
                    <param name="parRelativeTolerance" type="double"/>
                    <param name="orthoTolerance" type="double"/>
                    <param name="threshold" type="double"/>
                </params>
            </method>
            <javadoc line="205">
                Build an optimizer for least squares problems with default values
                  for some of the tuning parameters (see the {@link #LevenbergMarquardtOptimizer(double,double,double,double,double)other contructor}.
                  The default values for the algorithm settings are:
                  &lt;ul&gt;
                  &lt;li&gt;Initial step bound factor}: 100&lt;/li&gt;
                  &lt;li&gt;QR ranking threshold}: {@link Precision#SAFE_MIN}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    costRelativeTolerance Desired relative error in the sum of
                      squares.                    
                </param>
                <param>
                    parRelativeTolerance Desired relative error in the approximate
                      solution parameters.                    
                </param>
                <param>
                    orthoTolerance Desired max cosine on the orthogonality between
                      the function vector and the columns of the Jacobian.                    
                </param>
            </javadoc>
            <method name="LevenbergMarquardtOptimizer" type="constructor" line="220">
                <params>
                    <param name="costRelativeTolerance" type="double"/>
                    <param name="parRelativeTolerance" type="double"/>
                    <param name="orthoTolerance" type="double"/>
                </params>
            </method>
            <javadoc line="223">
                The arguments control the behaviour of the default convergence checking
                  procedure.
                  Additional criteria can defined through the setting of a {@link ConvergenceChecker}.                
                <param>
                    initialStepBoundFactor Positive input variable used in
                      determining the initial step bound. This bound is set to the
                      product of initialStepBoundFactor and the euclidean norm of{@code diag  x} if non-zero, or else to {@code initialStepBoundFactor}itself. In most cases factor should lie in the interval{@code (0.1, 100.0)}. {@code 100} is a generally recommended value.                    
                </param>
                <param>
                    costRelativeTolerance Desired relative error in the sum of
                      squares.                    
                </param>
                <param>
                    parRelativeTolerance Desired relative error in the approximate
                      solution parameters.                    
                </param>
                <param>
                    orthoTolerance Desired max cosine on the orthogonality between
                      the function vector and the columns of the Jacobian.                    
                </param>
                <param>
                    threshold Desired threshold for QR ranking. If the squared norm
                      of a column vector is smaller or equal to this threshold during QR
                      decomposition, it is considered to be a zero vector and hence the rank
                      of the matrix is reduced.                    
                </param>
            </javadoc>
            <method name="LevenbergMarquardtOptimizer" type="constructor" line="241">
                <params>
                    <param name="initialStepBoundFactor" type="double"/>
                    <param name="costRelativeTolerance" type="double"/>
                    <param name="parRelativeTolerance" type="double"/>
                    <param name="orthoTolerance" type="double"/>
                    <param name="threshold" type="double"/>
                </params>
            </method>
            <javadoc line="249">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointVectorValuePair" line="252">
                <declaration name="nR" type="int" line="253"/>
                <declaration name="currentPoint" type="double[]" line="254"/>
                <declaration name="nC" type="int" line="255"/>
                <declaration name="delta" type="double" line="262"/>
                <declaration name="xNorm" type="double" line="263"/>
                <declaration name="diag" type="double[]" line="264"/>
                <declaration name="oldX" type="double[]" line="265"/>
                <declaration name="oldRes" type="double[]" line="266"/>
                <declaration name="oldObj" type="double[]" line="267"/>
                <declaration name="qtf" type="double[]" line="268"/>
                <declaration name="work1" type="double[]" line="269"/>
                <declaration name="work2" type="double[]" line="270"/>
                <declaration name="work3" type="double[]" line="271"/>
                <declaration name="weightMatrixSqrt" type="RealMatrix" line="272"/>
                <declaration name="currentObjective" type="double[]" line="273"/>
                <declaration name="currentResiduals" type="double[]" line="274"/>
                <declaration name="current" type="PointVectorValuePair" line="275"/>
                <declaration name="currentCost" type="double" line="276"/>
                <declaration name="firstIteration" type="boolean" line="278"/>
                <declaration name="iter" type="int" line="279"/>
                <declaration name="checker" type="ConvergenceChecker&lt;PointVectorValuePair&gt;" line="280"/>
                <scope line="281">
                    <declaration name="previous" type="PointVectorValuePair" line="283"/>
                    <scope line="286"/>
                    <scope line="290">
                        <declaration name="pk" type="int" line="291"/>
                    </scope>
                    <scope line="294">
                        <scope line="296">
                            <declaration name="dk" type="double" line="297"/>
                            <scope line="298"/>
                            <declaration name="xk" type="double" line="301"/>
                        </scope>
                    </scope>
                    <declaration name="maxCosine" type="double" line="308"/>
                    <scope line="309">
                        <scope line="310">
                            <declaration name="pj" type="int" line="311"/>
                            <declaration name="s" type="double" line="312"/>
                            <scope line="313">
                                <declaration name="sum" type="double" line="314"/>
                                <scope line="315"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="322"/>
                    <scope line="327"/>
                    <scope line="330">
                        <scope line="331">
                            <declaration name="pj" type="int" line="332"/>
                        </scope>
                        <declaration name="previousCost" type="double" line="335"/>
                        <declaration name="tmpVec" type="double[]" line="336"/>
                        <declaration name="lmNorm" type="double" line="343"/>
                        <scope line="344">
                            <declaration name="pj" type="int" line="345"/>
                            <declaration name="s" type="double" line="348"/>
                        </scope>
                        <scope line="352"/>
                        <declaration name="actRed" type="double" line="359"/>
                        <scope line="360">
                            <declaration name="r" type="double" line="361"/>
                        </scope>
                        <scope line="364">
                            <declaration name="pj" type="int" line="365"/>
                            <declaration name="dirJ" type="double" line="366"/>
                            <scope line="368"/>
                        </scope>
                        <declaration name="coeff1" type="double" line="372"/>
                        <scope line="373"/>
                        <declaration name="pc2" type="double" line="376"/>
                        <declaration name="coeff2" type="double" line="378"/>
                        <declaration name="preRed" type="double" line="379"/>
                        <declaration name="dirDer" type="double" line="380"/>
                        <scope line="382">
                            <declaration name="tmp" type="double" line="383"/>
                            <scope line="384"/>
                        </scope>
                        <scope line="390"/>
                        <scope line="394">
                            <scope line="397">
                                <declaration name="xK" type="double" line="398"/>
                            </scope>
                            <scope line="402"/>
                        </scope>
                        <scope line="408">
                            <scope line="410">
                                <declaration name="pj" type="int" line="411"/>
                            </scope>
                        </scope>
                        <scope line="422"/>
                        <scope line="427"/>
                        <scope line="430"/>
                        <scope line="433"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="439">
                Determine the Levenberg-Marquardt parameter.
                  &lt;p&gt;This implementation is a translation in Java of the MINPACK
                  &lt;a href=&quot;http://www.netlib.org/minpack/lmpar.f&quot;&gt;lmpar&lt;/a&gt;
                  routine.&lt;/p&gt;
                  &lt;p&gt;This method sets the lmPar and lmDir attributes.&lt;/p&gt;
                  &lt;p&gt;The authors of the original fortran function are:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Argonne National Laboratory. MINPACK project. March 1980&lt;/li&gt;
                  &lt;li&gt;Burton  S. Garbow&lt;/li&gt;
                  &lt;li&gt;Kenneth E. Hillstrom&lt;/li&gt;
                  &lt;li&gt;Jorge   J. More&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Luc Maisonobe did the Java translation.&lt;/p&gt;                
                <param>
                    qy array containing qTy                    
                </param>
                <param>
                    delta upper bound on the euclidean norm of diagR  lmDir                    
                </param>
                <param>
                    diag diagonal matrix                    
                </param>
                <param>
                    work1 work array                    
                </param>
                <param>
                    work2 work array                    
                </param>
                <param>
                    work3 work array                    
                </param>
            </javadoc>
            <method name="determineLMParameter" type="void" line="460">
                <params>
                    <param name="qy" type="double[]"/>
                    <param name="delta" type="double"/>
                    <param name="diag" type="double[]"/>
                    <param name="work1" type="double[]"/>
                    <param name="work2" type="double[]"/>
                    <param name="work3" type="double[]"/>
                </params>
                <declaration name="nC" type="int" line="461"/>
                <scope line="462"/>
                <scope line="465"/>
                <scope line="468">
                    <declaration name="pk" type="int" line="469"/>
                    <declaration name="ypk" type="double" line="470"/>
                    <scope line="471"/>
                </scope>
                <declaration name="dxNorm" type="double" line="476"/>
                <scope line="477">
                    <declaration name="pj" type="int" line="478"/>
                    <declaration name="s" type="double" line="479"/>
                </scope>
                <declaration name="fp" type="double" line="484"/>
                <scope line="485"/>
                <declaration name="sum2" type="double" line="489"/>
                <declaration name="parl" type="double" line="490"/>
                <scope line="491">
                    <scope line="492">
                        <declaration name="pj" type="int" line="493"/>
                    </scope>
                    <scope line="497">
                        <declaration name="pj" type="int" line="498"/>
                        <declaration name="sum" type="double" line="499"/>
                        <scope line="500"/>
                        <declaration name="s" type="double" line="503"/>
                    </scope>
                </scope>
                <scope line="510">
                    <declaration name="pj" type="int" line="511"/>
                    <declaration name="sum" type="double" line="512"/>
                    <scope line="513"/>
                </scope>
                <declaration name="gNorm" type="double" line="519"/>
                <declaration name="paru" type="double" line="520"/>
                <scope line="521"/>
                <scope line="525"/>
                <scope line="528">
                    <scope line="529"/>
                    <declaration name="sPar" type="double" line="532"/>
                    <scope line="533">
                        <declaration name="pj" type="int" line="534"/>
                    </scope>
                    <scope line="539">
                        <declaration name="pj" type="int" line="540"/>
                        <declaration name="s" type="double" line="541"/>
                    </scope>
                    <declaration name="previousFP" type="double" line="546"/>
                    <scope line="548"/>
                    <scope line="551">
                        <declaration name="pj" type="int" line="552"/>
                    </scope>
                    <scope line="555">
                        <declaration name="pj" type="int" line="556"/>
                        <declaration name="tmp" type="double" line="558"/>
                        <scope line="559"/>
                    </scope>
                    <scope line="564">
                        <declaration name="s" type="double" line="565"/>
                    </scope>
                    <declaration name="correction" type="double" line="568"/>
                    <scope line="569"/>
                    <scope line="572"/>
                </scope>
            </method>
            <javadoc line="578">
                Solve ax = b and dx = 0 in the least squares sense.
                  &lt;p&gt;This implementation is a translation in Java of the MINPACK
                  &lt;a href=&quot;http://www.netlib.org/minpack/qrsolv.f&quot;&gt;qrsolv&lt;/a&gt;
                  routine.&lt;/p&gt;
                  &lt;p&gt;This method sets the lmDir and lmDiag attributes.&lt;/p&gt;
                  &lt;p&gt;The authors of the original fortran function are:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Argonne National Laboratory. MINPACK project. March 1980&lt;/li&gt;
                  &lt;li&gt;Burton  S. Garbow&lt;/li&gt;
                  &lt;li&gt;Kenneth E. Hillstrom&lt;/li&gt;
                  &lt;li&gt;Jorge   J. More&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Luc Maisonobe did the Java translation.&lt;/p&gt;                
                <param>
                    qy array containing qTy                    
                </param>
                <param>
                    diag diagonal matrix                    
                </param>
                <param>
                    lmDiag diagonal elements associated with lmDir                    
                </param>
                <param>
                    work work array                    
                </param>
            </javadoc>
            <method name="determineLMDirection" type="void" line="597">
                <params>
                    <param name="qy" type="double[]"/>
                    <param name="diag" type="double[]"/>
                    <param name="lmDiag" type="double[]"/>
                    <param name="work" type="double[]"/>
                </params>
                <scope line="598">
                    <declaration name="pj" type="int" line="599"/>
                    <scope line="600"/>
                </scope>
                <scope line="606">
                    <declaration name="pj" type="int" line="607"/>
                    <declaration name="dpj" type="double" line="608"/>
                    <scope line="609"/>
                    <declaration name="qtbpj" type="double" line="613"/>
                    <scope line="614">
                        <declaration name="pk" type="int" line="615"/>
                        <scope line="616">
                            <declaration name="sin" type="double" line="617"/>
                            <declaration name="cos" type="double" line="618"/>
                            <declaration name="rkk" type="double" line="619"/>
                            <scope line="620">
                                <declaration name="cotan" type="double" line="621"/>
                            </scope>
                            <scope line="625">
                                <declaration name="tan" type="double" line="626"/>
                            </scope>
                            <declaration name="temp" type="double" line="631"/>
                            <scope line="634">
                                <declaration name="rik" type="double" line="635"/>
                                <declaration name="temp2" type="double" line="636"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="nSing" type="int" line="645"/>
                <scope line="646">
                    <scope line="647"/>
                    <scope line="650"/>
                </scope>
                <scope line="654">
                    <scope line="655">
                        <declaration name="pj" type="int" line="656"/>
                        <declaration name="sum" type="double" line="657"/>
                        <scope line="658"/>
                    </scope>
                </scope>
                <scope line="664"/>
            </method>
            <javadoc line="668">
                Decompose a matrix A as A.P = Q.R using Householder transforms.
                  &lt;p&gt;As suggested in the P. Lascaux and R. Theodor book
                  &lt;i&gt;Analyse num&amp;eacute;rique matricielle appliqu&amp;eacute;e &amp;agrave;
                  l&apos;art de l&apos;ing&amp;eacute;nieur&lt;/i&gt; (Masson, 1986), instead of representing
                  the Householder transforms with u&lt;sub&gt;k&lt;/sub&gt; unit vectors such that:
                  &lt;pre&gt;
                  H&lt;sub&gt;k&lt;/sub&gt; = I - 2u&lt;sub&gt;k&lt;/sub&gt;.u&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;t&lt;/sup&gt;
                  &lt;/pre&gt;
                  we use &lt;sub&gt;k&lt;/sub&gt; non-unit vectors such that:
                  &lt;pre&gt;
                  H&lt;sub&gt;k&lt;/sub&gt; = I - beta&lt;sub&gt;k&lt;/sub&gt;v&lt;sub&gt;k&lt;/sub&gt;.v&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;t&lt;/sup&gt;
                  &lt;/pre&gt;
                  where v&lt;sub&gt;k&lt;/sub&gt; = a&lt;sub&gt;k&lt;/sub&gt; - alpha&lt;sub&gt;k&lt;/sub&gt; e&lt;sub&gt;k&lt;/sub&gt;.
                  The beta&lt;sub&gt;k&lt;/sub&gt; coefficients are provided upon exit as recomputing
                  them from the v&lt;sub&gt;k&lt;/sub&gt; vectors would be costly.&lt;/p&gt;
                  &lt;p&gt;This decomposition handles rank deficient cases since the tranformations
                  are performed in non-increasing columns norms order thanks to columns
                  pivoting. The diagonal elements of the R matrix are therefore also in
                  non-increasing absolute values order.&lt;/p&gt;                
                <param>
                    jacobian Weighted Jacobian matrix at the current point.                    
                </param>
                <exception>
                    ConvergenceException if the decomposition cannot be performed                    
                </exception>
            </javadoc>
            <method name="qrDecomposition" type="void" line="691">
                <params>
                    <param name="jacobian" type="RealMatrix"/>
                </params>
                <declaration name="nR" type="int" line="693"/>
                <declaration name="nC" type="int" line="694"/>
                <scope line="695">
                    <declaration name="norm2" type="double" line="697"/>
                    <scope line="698">
                        <declaration name="akk" type="double" line="699"/>
                    </scope>
                </scope>
                <scope line="704">
                    <declaration name="nextColumn" type="int" line="705"/>
                    <declaration name="ak2" type="double" line="706"/>
                    <scope line="707">
                        <declaration name="norm2" type="double" line="708"/>
                        <scope line="709">
                            <declaration name="aki" type="double" line="710"/>
                        </scope>
                        <scope line="713"/>
                        <scope line="716"/>
                    </scope>
                    <scope line="721"/>
                    <declaration name="pk" type="int" line="725"/>
                    <declaration name="akk" type="double" line="728"/>
                    <declaration name="alpha" type="double" line="729"/>
                    <declaration name="betak" type="double" line="730"/>
                    <scope line="734">
                        <declaration name="gamma" type="double" line="735"/>
                        <scope line="736"/>
                        <scope line="740"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="747">
                Compute the product Qt.y for some Q.R. decomposition.                
                <param>
                    y vector to multiply (will be overwritten with the result)                    
                </param>
            </javadoc>
            <method name="qTy" type="void" line="751">
                <params>
                    <param name="y" type="double[]"/>
                </params>
                <declaration name="nR" type="int" line="752"/>
                <declaration name="nC" type="int" line="753"/>
                <scope line="754">
                    <declaration name="pk" type="int" line="755"/>
                    <declaration name="gamma" type="double" line="756"/>
                    <scope line="757"/>
                    <scope line="761"/>
                </scope>
            </method>
        </class>
    </source>