<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector.jacobian">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.DiagonalMatrix"/>
        <import package="org.apache.commons.math3.linear.DecompositionSolver"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.QRDecomposition"/>
        <import package="org.apache.commons.math3.linear.EigenDecomposition"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.Weight"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="AbstractLeastSquaresOptimizer" line="35">
            <extends class="JacobianMultivariateVectorOptimizer"/>
            <javadoc line="35">
                Base class for implementing least-squares optimizers.
                  It provides methods for error estimation.                
                <version>
                    $Id: AbstractLeastSquaresOptimizer.java 1515242 2013-08-18 23:27:29Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
                <deprecated>
                    All classes and interfaces in this package are deprecated.
                      The optimizers that were provided here were moved to the{@link org.apache.commons.math3.fitting.leastsquares} package
                      (cf. MATH-1008).                    
                </deprecated>
            </javadoc>
            <declaration name="weightMatrixSqrt" type="RealMatrix" line="49"/>
            <javadoc line="49">
                Square-root of the weight matrix.                
            </javadoc>
            <declaration name="cost" type="double" line="51"/>
            <javadoc line="51">
                Cost value (square root of the sum of the residuals).                
            </javadoc>
            <javadoc line="54">
                @param checker Convergence checker.                
            </javadoc>
            <method name="AbstractLeastSquaresOptimizer" type="constructor" line="57">
                <params>
                    <param name="checker" type="ConvergenceChecker&lt;PointVectorValuePair&gt;"/>
                </params>
            </method>
            <javadoc line="61">
                Computes the weighted Jacobian matrix.                
                <param>
                    params Model parameters at which to compute the Jacobian.                    
                </param>
                <return>
                    the weighted Jacobian: W&lt;sup&gt;1/2&lt;/sup&gt; J.                    
                </return>
                <throws>
                    DimensionMismatchException if the Jacobian dimension does not
                      match problem dimension.                    
                </throws>
            </javadoc>
            <method name="computeWeightedJacobian" type="RealMatrix" line="69">
                <params>
                    <param name="params" type="double[]"/>
                </params>
            </method>
            <javadoc line="73">
                Computes the cost.                
                <param>
                    residuals Residuals.                    
                </param>
                <return>
                    the cost.                    
                </return>
                <see>
                    #computeResiduals(double[])                    
                </see>
            </javadoc>
            <method name="computeCost" type="double" line="80">
                <params>
                    <param name="residuals" type="double[]"/>
                </params>
                <declaration name="r" type="ArrayRealVector" line="81"/>
            </method>
            <javadoc line="85">
                Gets the root-mean-square (RMS) value.
                  The RMS the root of the arithmetic mean of the square of all weighted
                  residuals.
                  This is related to the criterion that is minimized by the optimizer
                  as follows: If &lt;em&gt;c&lt;/em&gt; if the criterion, and &lt;em&gt;n&lt;/em&gt; is the
                  number of measurements, then the RMS is &lt;em&gt;sqrt (c/n)&lt;/em&gt;.                
                <return>
                    the RMS value.                    
                </return>
            </javadoc>
            <method name="getRMS" type="double" line="96"/>
            <javadoc line="100">
                Get a Chi-Square-like value assuming the N residuals follow N
                  distinct normal distributions centered on 0 and whose variances are
                  the reciprocal of the weights.                
                <return>
                    chi-square value                    
                </return>
            </javadoc>
            <method name="getChiSquare" type="double" line="106"/>
            <javadoc line="110">
                Gets the square-root of the weight matrix.                
                <return>
                    the square-root of the weight matrix.                    
                </return>
            </javadoc>
            <method name="getWeightSquareRoot" type="RealMatrix" line="115"/>
            <javadoc line="119">
                Sets the cost.                
                <param>
                    cost Cost value.                    
                </param>
            </javadoc>
            <method name="setCost" type="void" line="124">
                <params>
                    <param name="cost" type="double"/>
                </params>
            </method>
            <javadoc line="128">
                Get the covariance matrix of the optimized parameters.
                  &lt;br/&gt;
                  Note that this operation involves the inversion of the
                  &lt;code&gt;J&lt;sup&gt;T&lt;/sup&gt;J&lt;/code&gt; matrix, where {@code J} is the
                  Jacobian matrix.
                  The {@code threshold} parameter is a way for the caller to specify
                  that the result of this computation should be considered meaningless,
                  and thus trigger an exception.                
                <param>
                    params Model parameters.                    
                </param>
                <param>
                    threshold Singularity threshold.                    
                </param>
                <return>
                    the covariance matrix.                    
                </return>
                <throws>
                    org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed (singular problem).                    
                </throws>
            </javadoc>
            <method name="computeCovariances" type="double[][]" line="145">
                <params>
                    <param name="params" type="double[]"/>
                    <param name="threshold" type="double"/>
                </params>
                <comment line="147">
                    Set up the Jacobian.                    
                </comment>
                <comment line="150">
                    Compute transpose(J)J.                    
                </comment>
                <comment line="153">
                    Compute the covariances matrix.                    
                </comment>
                <declaration name="j" type="RealMatrix" line="147"/>
                <declaration name="jTj" type="RealMatrix" line="150"/>
                <declaration name="solver" type="DecompositionSolver" line="153"/>
            </method>
            <javadoc line="158">
                Computes an estimate of the standard deviation of the parameters. The
                  returned values are the square root of the diagonal coefficients of the
                  covariance matrix, {@code sd(a[i]) ~= sqrt(C[i][i])}, where {@code a[i]}is the optimized value of the {@code i}-th parameter, and {@code C} is
                  the covariance matrix.                
                <param>
                    params Model parameters.                    
                </param>
                <param>
                    covarianceSingularityThreshold Singularity threshold (see{@link #computeCovariances(double[],double) computeCovariances}).                    
                </param>
                <return>
                    an estimate of the standard deviation of the optimized parameters                    
                </return>
                <throws>
                    org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed.                    
                </throws>
            </javadoc>
            <method name="computeSigma" type="double[]" line="173">
                <params>
                    <param name="params" type="double[]"/>
                    <param name="covarianceSingularityThreshold" type="double"/>
                </params>
                <declaration name="nC" type="int" line="174"/>
                <declaration name="sig" type="double[]" line="175"/>
                <declaration name="cov" type="double[][]" line="176"/>
                <scope line="177"/>
            </method>
            <javadoc line="183">
                {@inheritDoc}                
                <param>
                    optData Optimization data. In addition to those documented in{@link JacobianMultivariateVectorOptimizer#parseOptimizationData(OptimizationData[])JacobianMultivariateVectorOptimizer}, this method will register the following data:
                      &lt;ul&gt;
                      &lt;li&gt;{@link org.apache.commons.math3.optim.nonlinear.vector.Weight}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </param>
                <return>
                    {@inheritDoc}                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
                <throws>
                    DimensionMismatchException if the initial guess, target, and weight
                      arguments have inconsistent dimensions.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PointVectorValuePair" line="200">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="202">
                    Set up base class and perform computation.                    
                </comment>
            </method>
            <javadoc line="205">
                Computes the residuals.
                  The residual is the difference between the observed (target)
                  values and the model (objective function) value.
                  There is one residual for each element of the vector-valued
                  function.                
                <param>
                    objectiveValue Value of the the objective function. This is
                      the value returned from a call to{@link #computeObjectiveValue(double[]) computeObjectiveValue}(whose array argument contains the model parameters).                    
                </param>
                <return>
                    the residuals.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code params} has a wrong
                      length.                    
                </throws>
            </javadoc>
            <method name="computeResiduals" type="double[]" line="220">
                <params>
                    <param name="objectiveValue" type="double[]"/>
                </params>
                <declaration name="target" type="double[]" line="221"/>
                <scope line="222"/>
                <declaration name="residuals" type="double[]" line="227"/>
                <scope line="228"/>
            </method>
            <javadoc line="235">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.
                  If the weight matrix is specified, the {@link #weightMatrixSqrt}field is recomputed.                
                <param>
                    optData Optimization data. The following data will be looked for:
                      &lt;ul&gt;
                      &lt;li&gt;{@link Weight}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="247">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="249">
                    Allow base class to register its own data.                    
                </comment>
                <comment line="252">
                    The existing values (as set by the previous call) are reused if
                     not provided in the argument list.                    
                </comment>
                <comment line="257">
                    If more data must be parsed, this statement _must_ be
                     changed to &quot;continue&quot;.                    
                </comment>
                <scope line="253">
                    <scope line="254"/>
                </scope>
            </method>
            <javadoc line="263">
                Computes the square-root of the weight matrix.                
                <param>
                    m Symmetric, positive-definite (weight) matrix.                    
                </param>
                <return>
                    the square-root of the weight matrix.                    
                </return>
            </javadoc>
            <method name="squareRoot" type="RealMatrix" line="269">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <scope line="270">
                    <declaration name="dim" type="int" line="271"/>
                    <declaration name="sqrtM" type="RealMatrix" line="272"/>
                    <scope line="273"/>
                </scope>
                <scope line="277">
                    <declaration name="dec" type="EigenDecomposition" line="278"/>
                </scope>
            </method>
        </class>
    </source>