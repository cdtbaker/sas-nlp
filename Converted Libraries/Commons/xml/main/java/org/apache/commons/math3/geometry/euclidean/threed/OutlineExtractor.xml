<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.util.ArrayList"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTree"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BoundaryAttribute"/>
        <import package="org.apache.commons.math3.geometry.partitioning.RegionFactory"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="OutlineExtractor" line="13">
            <javadoc line="13">
                Extractor for {@link PolygonsSet polyhedrons sets} outlines.
                  &lt;p&gt;This class extracts the 2D outlines from {{@link PolygonsSetpolyhedrons sets} in a specified projection plane.&lt;/p&gt;                
                <version>
                    $Id: OutlineExtractor.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="u" type="Vector3D" line="20"/>
            <javadoc line="20">
                Abscissa axis of the projection plane.                
            </javadoc>
            <declaration name="v" type="Vector3D" line="24"/>
            <javadoc line="24">
                Ordinate axis of the projection plane.                
            </javadoc>
            <declaration name="w" type="Vector3D" line="28"/>
            <javadoc line="28">
                Normal of the projection plane (viewing direction).                
            </javadoc>
            <javadoc line="32">
                Build an extractor for a specific projection plane.                
                <param>
                    u abscissa axis of the projection point                    
                </param>
                <param>
                    v ordinate axis of the projection point                    
                </param>
            </javadoc>
            <method name="OutlineExtractor" type="constructor" line="37">
                <params>
                    <param name="u" type="Vector3D"/>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="42">
                Extract the outline of a polyhedrons set.                
                <param>
                    polyhedronsSet polyhedrons set whose outline must be extracted                    
                </param>
                <return>
                    an outline, as an array of loops.                    
                </return>
            </javadoc>
            <method name="getOutline" type="Vector2D[][]" line="47">
                <params>
                    <param name="polyhedronsSet" type="PolyhedronsSet"/>
                </params>
                <declaration name="projector" type="BoundaryProjector" line="48"/>
                <declaration name="projected" type="PolygonsSet" line="50"/>
                <declaration name="outline" type="Vector2D[][]" line="51"/>
                <scope line="52">
                    <declaration name="rawLoop" type="Vector2D[]" line="53"/>
                    <declaration name="end" type="int" line="54"/>
                    <declaration name="j" type="int" line="55"/>
                    <scope line="56">
                        <scope line="57">
                            <scope line="58"/>
                        </scope>
                        <scope line="63"/>
                    </scope>
                    <scope line="67"/>
                </scope>
            </method>
            <javadoc line="74">
                Check if a point is geometrically between its neighbour in an array.
                  &lt;p&gt;The neighbours are computed considering the array is a loop
                  (i.e. point at index (n-1) is before point at index 0)&lt;/p&gt;                
                <param>
                    loop points array                    
                </param>
                <param>
                    n number of points to consider in the array                    
                </param>
                <param>
                    i index of the point to check (must be between 0 and n-1)                    
                </param>
                <return>
                    true if the point is exactly between its neighbours                    
                </return>
            </javadoc>
            <method name="pointIsBetween" type="boolean" line="83">
                <params>
                    <param name="loop" type="Vector2D[]"/>
                    <param name="n" type="int"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="previous" type="Vector2D" line="84"/>
                <declaration name="current" type="Vector2D" line="85"/>
                <declaration name="next" type="Vector2D" line="86"/>
                <declaration name="dx1" type="double" line="87"/>
                <declaration name="dy1" type="double" line="88"/>
                <declaration name="dx2" type="double" line="89"/>
                <declaration name="dy2" type="double" line="90"/>
                <declaration name="cross" type="double" line="91"/>
                <declaration name="dot" type="double" line="92"/>
                <declaration name="d1d2" type="double" line="93"/>
            </method>
            <class name="BoundaryProjector" line="96">
                <implements interface="BSPTreeVisitor">
                    <type_params>
                        <type_param name="Euclidean3D"/>
                    </type_params>
                </implements>
                <javadoc line="96">
                    Visitor projecting the boundary facets on a plane.                    
                </javadoc>
                <declaration name="projected" type="PolygonsSet" line="100"/>
                <javadoc line="100">
                    Projection of the polyhedrons set on the plane.                    
                </javadoc>
                <javadoc line="104">
                    Simple constructor.                    
                </javadoc>
                <method name="BoundaryProjector" type="constructor" line="107"/>
                <javadoc line="110">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitOrder" type="Order" line="113">
                    <params>
                        <param name="node" type="BSPTree<Euclidean3D>"/>
                    </params>
                </method>
                <javadoc line="116">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitInternalNode" type="void" line="119">
                    <params>
                        <param name="node" type="BSPTree<Euclidean3D>"/>
                    </params>
                    <declaration name="attribute" type="BoundaryAttribute&lt;Euclidean3D&gt;" line="120"/>
                    <scope line="121"/>
                    <scope line="124"/>
                </method>
                <javadoc line="128">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitLeafNode" type="void" line="131">
                    <params>
                        <param name="node" type="BSPTree<Euclidean3D>"/>
                    </params>
                </method>
                <javadoc line="133">
                    Add he contribution of a boundary facet.                    
                    <param>
                        facet boundary facet                        
                    </param>
                    <param>
                        reversed if true, the facet has the inside on its plus side                        
                    </param>
                </javadoc>
                <method name="addContribution" type="void" line="138">
                    <params>
                        <param name="facet" type="SubHyperplane<Euclidean3D>"/>
                        <param name="reversed" type="boolean"/>
                    </params>
                    <declaration name="absFacet" type="AbstractSubHyperplane&lt;Euclidean3D,Euclidean2D&gt;" line="139"/>
                    <declaration name="plane" type="Plane" line="140"/>
                    <declaration name="scal" type="double" line="141"/>
                    <scope line="142">
                        <declaration name="vertices" type="Vector2D[][]" line="143"/>
                        <scope line="144">
                            <declaration name="newVertices" type="Vector2D[][]" line="145"/>
                            <scope line="146">
                                <declaration name="loop" type="Vector2D[]" line="147"/>
                                <declaration name="newLoop" type="Vector2D[]" line="148"/>
                                <scope line="149">
                                    <scope line="151"/>
                                </scope>
                                <scope line="155">
                                    <scope line="156"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="edges" type="ArrayList&lt;SubHyperplane&lt;Euclidean2D&gt;&gt;" line="164"/>
                        <scope line="165">
                            <declaration name="closed" type="boolean" line="166"/>
                            <declaration name="previous" type="int" line="167"/>
                            <declaration name="previous3D" type="Vector3D" line="168"/>
                            <declaration name="current" type="int" line="169"/>
                            <declaration name="pPoint" type="Vector2D" line="170"/>
                            <scope line="171">
                                <declaration name="current3D" type="Vector3D" line="172"/>
                                <declaration name="cPoint" type="Vector2D" line="173"/>
                                <declaration name="line" type="org.apache.commons.math3.geometry.euclidean.twod.Line" line="174"/>
                                <declaration name="edge" type="SubHyperplane&lt;Euclidean2D&gt;" line="175"/>
                                <scope line="176">
                                    <declaration name="angle" type="double" line="177"/>
                                    <declaration name="l" type="org.apache.commons.math3.geometry.euclidean.twod.Line" line="178"/>
                                </scope>
                                <scope line="181">
                                    <declaration name="angle" type="double" line="182"/>
                                    <declaration name="l" type="org.apache.commons.math3.geometry.euclidean.twod.Line" line="183"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="projectedFacet" type="PolygonsSet" line="192"/>
                    </scope>
                </method>
                <javadoc line="196">
                    Get the projection of the polyhedrons set on the plane.                    
                    <return>
                        projection of the polyhedrons set on the plane                        
                    </return>
                </javadoc>
                <method name="getProjected" type="PolygonsSet" line="200"/>
            </class>
        </class>
    </source>