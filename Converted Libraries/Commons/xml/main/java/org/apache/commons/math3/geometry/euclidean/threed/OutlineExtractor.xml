<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.util.ArrayList"/>
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTree"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BoundaryAttribute"/>
        <import package="org.apache.commons.math3.geometry.partitioning.RegionFactory"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="OutlineExtractor" line="33">
            <javadoc line="33">
                Extractor for {@link PolygonsSet polyhedrons sets} outlines.
                  &lt;p&gt;This class extracts the 2D outlines from {{@link PolygonsSetpolyhedrons sets} in a specified projection plane.&lt;/p&gt;                
                <version>
                    $Id: OutlineExtractor.java 1555174 2014-01-03 18:06:20Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="u" type="Vector3D" line="41"/>
            <javadoc line="41">
                Abscissa axis of the projection plane.                
            </javadoc>
            <declaration name="v" type="Vector3D" line="44"/>
            <javadoc line="44">
                Ordinate axis of the projection plane.                
            </javadoc>
            <declaration name="w" type="Vector3D" line="47"/>
            <javadoc line="47">
                Normal of the projection plane (viewing direction).                
            </javadoc>
            <javadoc line="50">
                Build an extractor for a specific projection plane.                
                <param>
                    u abscissa axis of the projection point                    
                </param>
                <param>
                    v ordinate axis of the projection point                    
                </param>
            </javadoc>
            <method name="OutlineExtractor" type="constructor" line="54">
                <params>
                    <param name="u" type="Vector3D"/>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="60">
                Extract the outline of a polyhedrons set.                
                <param>
                    polyhedronsSet polyhedrons set whose outline must be extracted                    
                </param>
                <return>
                    an outline, as an array of loops.                    
                </return>
            </javadoc>
            <method name="getOutline" type="Vector2D[][]" line="64">
                <params>
                    <param name="polyhedronsSet" type="PolyhedronsSet"/>
                </params>
                <comment line="67">
                    project all boundary facets into one polygons set                    
                </comment>
                <comment line="72">
                    Remove the spurious intermediate vertices from the outline                    
                </comment>
                <comment line="80">
                    the point should be removed                    
                </comment>
                <comment line="86">
                    the point remains in the loop                    
                </comment>
                <comment line="91">
                    resize the array                    
                </comment>
                <declaration name="projector" type="BoundaryProjector" line="67"/>
                <declaration name="projected" type="PolygonsSet" line="69"/>
                <declaration name="outline" type="Vector2D[][]" line="72"/>
                <scope line="73">
                    <declaration name="rawLoop" type="Vector2D[]" line="74"/>
                    <declaration name="end" type="int" line="75"/>
                    <declaration name="j" type="int" line="76"/>
                    <scope line="77">
                        <scope line="78">
                            <scope line="80"/>
                        </scope>
                        <scope line="84"/>
                    </scope>
                    <scope line="89"/>
                </scope>
            </method>
            <javadoc line="100">
                Check if a point is geometrically between its neighbor in an array.
                  &lt;p&gt;The neighbors are computed considering the array is a loop
                  (i.e. point at index (n-1) is before point at index 0)&lt;/p&gt;                
                <param>
                    loop points array                    
                </param>
                <param>
                    n number of points to consider in the array                    
                </param>
                <param>
                    i index of the point to check (must be between 0 and n-1)                    
                </param>
                <return>
                    true if the point is exactly between its neighbors                    
                </return>
            </javadoc>
            <method name="pointIsBetween" type="boolean" line="108">
                <params>
                    <param name="loop" type="Vector2D[]"/>
                    <param name="n" type="int"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="previous" type="Vector2D" line="109"/>
                <declaration name="current" type="Vector2D" line="110"/>
                <declaration name="next" type="Vector2D" line="111"/>
                <declaration name="dx1" type="double" line="112"/>
                <declaration name="dy1" type="double" line="113"/>
                <declaration name="dx2" type="double" line="114"/>
                <declaration name="dy2" type="double" line="115"/>
                <declaration name="cross" type="double" line="116"/>
                <declaration name="dot" type="double" line="117"/>
                <declaration name="d1d2" type="double" line="118"/>
            </method>
            <class name="BoundaryProjector" line="122">
                <implements interface="BSPTreeVisitor">
                    <type_params>
                        <type_param name="Euclidean3D"/>
                    </type_params>
                </implements>
                <javadoc line="122">
                    Visitor projecting the boundary facets on a plane.                    
                </javadoc>
                <declaration name="projected" type="PolygonsSet" line="125"/>
                <javadoc line="125">
                    Projection of the polyhedrons set on the plane.                    
                </javadoc>
                <declaration name="tolerance" type="double" line="128"/>
                <javadoc line="128">
                    Tolerance below which points are considered identical.                    
                </javadoc>
                <javadoc line="131">
                    Simple constructor.                    
                    <param>
                        tolerance tolerance below which points are considered identical                        
                    </param>
                </javadoc>
                <method name="BoundaryProjector" type="constructor" line="134">
                    <params>
                        <param name="tolerance" type="double"/>
                    </params>
                </method>
                <javadoc line="139">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitOrder" type="Order" line="140">
                    <params>
                        <param name="node" type="BSPTree&lt;Euclidean3D&gt;"/>
                    </params>
                </method>
                <javadoc line="144">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitInternalNode" type="void" line="145">
                    <params>
                        <param name="node" type="BSPTree&lt;Euclidean3D&gt;"/>
                    </params>
                    <declaration name="attribute" type="BoundaryAttribute&amp;lt;Euclidean3D&amp;gt;" line="146"/>
                    <scope line="149"/>
                    <scope line="152"/>
                </method>
                <javadoc line="157">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitLeafNode" type="void" line="158">
                    <params>
                        <param name="node" type="BSPTree&lt;Euclidean3D&gt;"/>
                    </params>
                </method>
                <javadoc line="161">
                    Add he contribution of a boundary facet.                    
                    <param>
                        facet boundary facet                        
                    </param>
                    <param>
                        reversed if true, the facet has the inside on its plus side                        
                    </param>
                </javadoc>
                <method name="addContribution" type="void" line="165">
                    <params>
                        <param name="facet" type="SubHyperplane&lt;Euclidean3D&gt;"/>
                        <param name="reversed" type="boolean"/>
                    </params>
                    <comment line="168">
                        extract the vertices of the facet                        
                    </comment>
                    <comment line="180">
                        the facet is seen from the inside,
                         we need to invert its boundary orientation                        
                    </comment>
                    <comment line="199">
                        use the reverted vertices                        
                    </comment>
                    <comment line="204">
                        compute the projection of the facet in the outline plane                        
                    </comment>
                    <comment line="223">
                        the previous point is a real vertex
                         it defines one bounding point of the edge                        
                    </comment>
                    <comment line="232">
                        the current point is a real vertex
                         it defines one bounding point of the edge                        
                    </comment>
                    <comment line="250">
                        add the contribution of the facet to the global outline                        
                    </comment>
                    <declaration name="absFacet" type="AbstractSubHyperplane&amp;lt;Euclidean3D,Euclidean2D&amp;gt;" line="168"/>
                    <declaration name="plane" type="Plane" line="171"/>
                    <declaration name="scal" type="double" line="173"/>
                    <scope line="174">
                        <declaration name="vertices" type="Vector2D[][]" line="175"/>
                        <scope line="178">
                            <declaration name="newVertices" type="Vector2D[][]" line="181"/>
                            <scope line="182">
                                <declaration name="loop" type="Vector2D[]" line="183"/>
                                <declaration name="newLoop" type="Vector2D[]" line="184"/>
                                <scope line="185">
                                    <scope line="187"/>
                                </scope>
                                <scope line="190">
                                    <scope line="191"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="edges" type="ArrayList&amp;lt;SubHyperplane&amp;lt;Euclidean2D&amp;gt;&amp;gt;" line="204"/>
                        <scope line="205">
                            <declaration name="closed" type="boolean" line="206"/>
                            <declaration name="previous" type="int" line="207"/>
                            <declaration name="previous3D" type="Vector3D" line="208"/>
                            <declaration name="current" type="int" line="209"/>
                            <declaration name="pPoint" type="Vector2D" line="210"/>
                            <scope line="212">
                                <declaration name="current3D" type="Vector3D" line="214"/>
                                <declaration name="cPoint" type="Vector2D" line="215"/>
                                <declaration name="line" type="org.apache.commons.math3.geometry.euclidean.twod.Line" line="217"/>
                                <declaration name="edge" type="SubHyperplane&amp;lt;Euclidean2D&amp;gt;" line="219"/>
                                <scope line="221">
                                    <declaration name="angle" type="double" line="224"/>
                                    <declaration name="l" type="org.apache.commons.math3.geometry.euclidean.twod.Line" line="225"/>
                                </scope>
                                <scope line="230">
                                    <declaration name="angle" type="double" line="233"/>
                                    <declaration name="l" type="org.apache.commons.math3.geometry.euclidean.twod.Line" line="234"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="projectedFacet" type="PolygonsSet" line="247"/>
                    </scope>
                </method>
                <javadoc line="255">
                    Get the projection of the polyhedrons set on the plane.                    
                    <return>
                        projection of the polyhedrons set on the plane                        
                    </return>
                </javadoc>
                <method name="getProjected" type="PolygonsSet" line="258"/>
            </class>
        </class>
    </source>