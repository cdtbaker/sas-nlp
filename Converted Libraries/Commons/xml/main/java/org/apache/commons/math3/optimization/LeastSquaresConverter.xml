<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <class name="LeastSquaresConverter" line="25">
            <implements interface="MultivariateFunction"/>
            <javadoc line="25">
                This class converts {@link MultivariateVectorFunction vectorial
                  objective functions} to {@link MultivariateFunction scalar objective functions}when the goal is to minimize them.
                  &lt;p&gt;
                  This class is mostly used when the vectorial objective function represents
                  a theoretical result computed from a point set applied to a model and
                  the models point must be adjusted to fit the theoretical result to some
                  reference observations. The observations may be obtained for example from
                  physical measurements whether the model is built from theoretical
                  considerations.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This class computes a possibly weighted squared sum of the residuals, which is
                  a scalar value. The residuals are the difference between the theoretical model
                  (i.e. the output of the vectorial objective function) and the observations. The
                  class implements the {@link MultivariateFunction} interface and can therefore be
                  minimized by any optimizer supporting scalar objectives functions.This is one way
                  to perform a least square estimation. There are other ways to do this without using
                  this converter, as some optimization algorithms directly support vectorial objective
                  functions.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This class support combination of residuals with or without weights and correlations.
                  &lt;/p&gt;                
                <see>
                    MultivariateFunction                    
                </see>
                <see>
                    MultivariateVectorFunction                    
                </see>
                <version>
                    $Id: LeastSquaresConverter.java 1591835 2014-05-02 09:04:01Z tn $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="function" type="MultivariateVectorFunction" line="60"/>
            <javadoc line="60">
                Underlying vectorial function.                
            </javadoc>
            <declaration name="observations" type="double[]" line="63"/>
            <javadoc line="63">
                Observations to be compared to objective function to compute residuals.                
            </javadoc>
            <declaration name="weights" type="double[]" line="66"/>
            <javadoc line="66">
                Optional weights for the residuals.                
            </javadoc>
            <declaration name="scale" type="RealMatrix" line="69"/>
            <javadoc line="69">
                Optional scaling matrix (weight and correlations) for the residuals.                
            </javadoc>
            <javadoc line="72">
                Build a simple converter for uncorrelated residuals with the same weight.                
                <param>
                    function vectorial residuals function to wrap                    
                </param>
                <param>
                    observations observations to be compared to objective function to compute residuals                    
                </param>
            </javadoc>
            <method name="LeastSquaresConverter" type="constructor" line="77">
                <params>
                    <param name="function" type="MultivariateVectorFunction"/>
                    <param name="observations" type="double[]"/>
                </params>
            </method>
            <javadoc line="84">
                Build a simple converter for uncorrelated residuals with the specific weights.
                  &lt;p&gt;
                  The scalar objective function value is computed as:
                  &lt;pre&gt;
                  objective = &amp;sum;weight&lt;sub&gt;i&lt;/sub&gt;(observation&lt;sub&gt;i&lt;/sub&gt;-objective&lt;sub&gt;i&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;
                  &lt;/pre&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Weights can be used for example to combine residuals with different standard
                  deviations. As an example, consider a residuals array in which even elements
                  are angular measurements in degrees with a 0.01&amp;deg; standard deviation and
                  odd elements are distance measurements in meters with a 15m standard deviation.
                  In this case, the weights array should be initialized with value
                  1.0/(0.01&lt;sup&gt;2&lt;/sup&gt;) in the even elements and 1.0/(15.0&lt;sup&gt;2&lt;/sup&gt;) in the
                  odd elements (i.e. reciprocals of variances).
                  &lt;/p&gt;
                  &lt;p&gt;
                  The array computed by the objective function, the observations array and the
                  weights array must have consistent sizes or a {@link DimensionMismatchException}will be triggered while computing the scalar objective.
                  &lt;/p&gt;                
                <param>
                    function vectorial residuals function to wrap                    
                </param>
                <param>
                    observations observations to be compared to objective function to compute residuals                    
                </param>
                <param>
                    weights weights to apply to the residuals                    
                </param>
                <exception>
                    DimensionMismatchException if the observations vector and the weights
                      vector dimensions do not match (objective function dimension is checked only when
                      the {@link #value(double[])} method is called)                    
                </exception>
            </javadoc>
            <method name="LeastSquaresConverter" type="constructor" line="113">
                <params>
                    <param name="function" type="MultivariateVectorFunction"/>
                    <param name="observations" type="double[]"/>
                    <param name="weights" type="double[]"/>
                </params>
                <scope line="114"/>
            </method>
            <javadoc line="123">
                Build a simple converter for correlated residuals with the specific weights.
                  &lt;p&gt;
                  The scalar objective function value is computed as:
                  &lt;pre&gt;
                  objective = y&lt;sup&gt;T&lt;/sup&gt;y with y = scale&amp;times;(observation-objective)
                  &lt;/pre&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  The array computed by the objective function, the observations array and the
                  the scaling matrix must have consistent sizes or a {@link DimensionMismatchException}will be triggered while computing the scalar objective.
                  &lt;/p&gt;                
                <param>
                    function vectorial residuals function to wrap                    
                </param>
                <param>
                    observations observations to be compared to objective function to compute residuals                    
                </param>
                <param>
                    scale scaling matrix                    
                </param>
                <throws>
                    DimensionMismatchException if the observations vector and the scale
                      matrix dimensions do not match (objective function dimension is checked only when
                      the {@link #value(double[])} method is called)                    
                </throws>
            </javadoc>
            <method name="LeastSquaresConverter" type="constructor" line="143">
                <params>
                    <param name="function" type="MultivariateVectorFunction"/>
                    <param name="observations" type="double[]"/>
                    <param name="scale" type="RealMatrix"/>
                </params>
                <scope line="144"/>
            </method>
            <javadoc line="153">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="154">
                <params>
                    <param name="point" type="double[]"/>
                </params>
                <comment line="156">
                    compute residuals                    
                </comment>
                <comment line="165">
                    compute sum of squares                    
                </comment>
                <declaration name="residuals" type="double[]" line="156"/>
                <scope line="157"/>
                <scope line="160"/>
                <declaration name="sumSquares" type="double" line="165"/>
                <scope line="166">
                    <scope line="167">
                        <declaration name="ri" type="double" line="168"/>
                    </scope>
                </scope>
                <scope line="171">
                    <scope line="172"/>
                </scope>
                <scope line="175">
                    <scope line="176"/>
                </scope>
            </method>
        </class>
    </source>