<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Array2DRowFieldMatrix" line="35">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="AbstractFieldMatrix">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <implements interface="Serializable"/>
            <javadoc line="35">
                Implementation of FieldMatrix&lt;T&gt; using a {@link FieldElement}[][] array to store entries.
                  &lt;p&gt;
                  As specified in the {@link FieldMatrix} interface, matrix element indexing
                  is 0-based -- e.g., &lt;code&gt;getEntry(0, 0)&lt;/code&gt;
                  returns the element in the first row, first column of the matrix.&lt;/li&gt;&lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    <T>
                       the type of the field elements                    
                </param>
                <version>
                    $Id: Array2DRowFieldMatrix.java 1449528 2013-02-24 19:06:20Z luc $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <javadoc line="49">
                Serializable version identifier                
            </javadoc>
            <declaration name="data" type="T[][]" line="51"/>
            <javadoc line="51">
                Entries of the matrix                
            </javadoc>
            <javadoc line="54">
                Creates a matrix with no data                
                <param>
                    field field to which the elements belong                    
                </param>
            </javadoc>
            <method name="Array2DRowFieldMatrix" type="constructor" line="58">
                <params>
                    <param name="field" type="Field<T>"/>
                </params>
            </method>
            <javadoc line="62">
                Create a new {@code FieldMatrix&lt;T&gt;} with the supplied row and column dimensions.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    rowDimension Number of rows in the new matrix.                    
                </param>
                <param>
                    columnDimension Number of columns in the new matrix.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if row or column dimension is not positive.                    
                </throws>
            </javadoc>
            <method name="Array2DRowFieldMatrix" type="constructor" line="72">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="77">
                Create a new {@code FieldMatrix&lt;T&gt;} using the input array as the underlying
                  data array.
                  &lt;p&gt;The input array is copied, not referenced. This constructor has
                  the same effect as calling {@link #Array2DRowFieldMatrix(FieldElement[][],boolean)}with the second argument set to {@code true}.&lt;/p&gt;                
                <param>
                    d Data for the new matrix.                    
                </param>
                <throws>
                    DimensionMismatchException if {@code d} is not rectangular.                    
                </throws>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    NoDataException if there are not at least one row and one column.                    
                </throws>
                <see>
                    #Array2DRowFieldMatrix(FieldElement[][],boolean)                    
                </see>
            </javadoc>
            <method name="Array2DRowFieldMatrix" type="constructor" line="92">
                <params>
                    <param name="d" type="T[][]"/>
                </params>
            </method>
            <javadoc line="96">
                Create a new {@code FieldMatrix&lt;T&gt;} using the input array as the underlying
                  data array.
                  &lt;p&gt;The input array is copied, not referenced. This constructor has
                  the same effect as calling {@link #Array2DRowFieldMatrix(FieldElement[][],boolean)}with the second argument set to {@code true}.&lt;/p&gt;                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    d Data for the new matrix.                    
                </param>
                <throws>
                    DimensionMismatchException if {@code d} is not rectangular.                    
                </throws>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    NoDataException if there are not at least one row and one column.                    
                </throws>
                <see>
                    #Array2DRowFieldMatrix(FieldElement[][],boolean)                    
                </see>
            </javadoc>
            <method name="Array2DRowFieldMatrix" type="constructor" line="112">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="d" type="T[][]"/>
                </params>
            </method>
            <javadoc line="117">
                Create a new {@code FieldMatrix&lt;T&gt;} using the input array as the underlying
                  data array.
                  &lt;p&gt;If an array is built specially in order to be embedded in a{@code FieldMatrix&lt;T&gt;} and not used directly, the {@code copyArray} may be
                  set to {@code false}. This will prevent the copying and improve
                  performance as no new array will be built and no data will be copied.&lt;/p&gt;                
                <param>
                    d Data for the new matrix.                    
                </param>
                <param>
                    copyArray Whether to copy or reference the input array.                    
                </param>
                <throws>
                    DimensionMismatchException if {@code d} is not rectangular.                    
                </throws>
                <throws>
                    NoDataException if there are not at least one row and one column.                    
                </throws>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #Array2DRowFieldMatrix(FieldElement[][])                    
                </see>
            </javadoc>
            <method name="Array2DRowFieldMatrix" type="constructor" line="134">
                <params>
                    <param name="d" type="T[][]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
            </method>
            <javadoc line="138">
                Create a new {@code FieldMatrix&lt;T&gt;} using the input array as the underlying
                  data array.
                  &lt;p&gt;If an array is built specially in order to be embedded in a{@code FieldMatrix&lt;T&gt;} and not used directly, the {@code copyArray} may be
                  set to {@code false}. This will prevent the copying and improve
                  performance as no new array will be built and no data will be copied.&lt;/p&gt;                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    d Data for the new matrix.                    
                </param>
                <param>
                    copyArray Whether to copy or reference the input array.                    
                </param>
                <throws>
                    DimensionMismatchException if {@code d} is not rectangular.                    
                </throws>
                <throws>
                    NoDataException if there are not at least one row and one column.                    
                </throws>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #Array2DRowFieldMatrix(FieldElement[][])                    
                </see>
            </javadoc>
            <method name="Array2DRowFieldMatrix" type="constructor" line="155">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="d" type="T[][]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
                <scope line="157"/>
                <scope line="159">
                    <declaration name="nRows" type="int" line="161"/>
                    <scope line="162"/>
                    <declaration name="nCols" type="int" line="165"/>
                    <scope line="166"/>
                    <scope line="169">
                        <scope line="170"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="178">
                Create a new (column) {@code FieldMatrix&lt;T&gt;} using {@code v} as the
                  data for the unique column of the created matrix.
                  The input array is copied.                
                <param>
                    v Column vector holding data for new matrix.                    
                </param>
                <throws>
                    NoDataException if v is empty                    
                </throws>
            </javadoc>
            <method name="Array2DRowFieldMatrix" type="constructor" line="186">
                <params>
                    <param name="v" type="T[]"/>
                </params>
            </method>
            <javadoc line="190">
                Create a new (column) {@code FieldMatrix&lt;T&gt;} using {@code v} as the
                  data for the unique column of the created matrix.
                  The input array is copied.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    v Column vector holding data for new matrix.                    
                </param>
            </javadoc>
            <method name="Array2DRowFieldMatrix" type="constructor" line="198">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="v" type="T[]"/>
                </params>
                <declaration name="nRows" type="int" line="200"/>
                <scope line="202"/>
            </method>
            <javadoc line="207">
                {@inheritDoc}                
            </javadoc>
            <method name="createMatrix" type="FieldMatrix<T>" line="211">
                <params>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="215">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="FieldMatrix<T>" line="217"/>
            <javadoc line="221">
                Add {@code m} to this matrix.                
                <param>
                    m Matrix to be added.                    
                </param>
                <return>
                    {@code this} + m.                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as this matrix.                    
                </throws>
            </javadoc>
            <method name="add" type="Array2DRowFieldMatrix<T>" line="230">
                <params>
                    <param name="m" type="Array2DRowFieldMatrix<T>"/>
                </params>
                <comment line="232">
                    safety check                    
                </comment>
                <declaration name="rowCount" type="int" line="234"/>
                <declaration name="columnCount" type="int" line="235"/>
                <declaration name="outData" type="T[][]" line="236"/>
                <scope line="237">
                    <declaration name="dataRow" type="T[]" line="238"/>
                    <declaration name="mRow" type="T[]" line="239"/>
                    <declaration name="outDataRow" type="T[]" line="240"/>
                    <scope line="241"/>
                </scope>
            </method>
            <javadoc line="249">
                Subtract {@code m} from this matrix.                
                <param>
                    m Matrix to be subtracted.                    
                </param>
                <return>
                    {@code this} + m.                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as this matrix.                    
                </throws>
            </javadoc>
            <method name="subtract" type="Array2DRowFieldMatrix<T>" line="258">
                <params>
                    <param name="m" type="Array2DRowFieldMatrix<T>"/>
                </params>
                <comment line="260">
                    safety check                    
                </comment>
                <declaration name="rowCount" type="int" line="262"/>
                <declaration name="columnCount" type="int" line="263"/>
                <declaration name="outData" type="T[][]" line="264"/>
                <scope line="265">
                    <declaration name="dataRow" type="T[]" line="266"/>
                    <declaration name="mRow" type="T[]" line="267"/>
                    <declaration name="outDataRow" type="T[]" line="268"/>
                    <scope line="269"/>
                </scope>
            </method>
            <javadoc line="278">
                Postmultiplying this matrix by {@code m}.                
                <param>
                    m Matrix to postmultiply by.                    
                </param>
                <return>
                    {@code this}  m.                    
                </return>
                <throws>
                    DimensionMismatchException if the number of columns of this
                      matrix is not equal to the number of rows of {@code m}.                    
                </throws>
            </javadoc>
            <method name="multiply" type="Array2DRowFieldMatrix<T>" line="287">
                <params>
                    <param name="m" type="Array2DRowFieldMatrix<T>"/>
                </params>
                <comment line="289">
                    safety check                    
                </comment>
                <declaration name="nRows" type="int" line="291"/>
                <declaration name="nCols" type="int" line="292"/>
                <declaration name="nSum" type="int" line="293"/>
                <declaration name="outData" type="T[][]" line="294"/>
                <scope line="295">
                    <declaration name="dataRow" type="T[]" line="296"/>
                    <declaration name="outDataRow" type="T[]" line="297"/>
                    <scope line="298">
                        <declaration name="sum" type="T" line="299"/>
                        <scope line="300"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="311">
                {@inheritDoc}                
            </javadoc>
            <method name="getData" type="T[][]" line="313"/>
            <javadoc line="317">
                Get a reference to the underlying data array.
                  This methods returns internal data, &lt;strong&gt;not&lt;/strong&gt; fresh copy of it.                
                <return>
                    the 2-dimensional array of entries.                    
                </return>
            </javadoc>
            <method name="getDataRef" type="T[][]" line="323"/>
            <javadoc line="327">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubMatrix" type="void" line="332">
                <params>
                    <param name="subMatrix" type="T[][]"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <scope line="333">
                    <scope line="334"/>
                    <scope line="337"/>
                    <declaration name="nRows" type="int" line="340"/>
                    <scope line="341"/>
                    <declaration name="nCols" type="int" line="345"/>
                    <scope line="346"/>
                    <scope line="350">
                        <scope line="351"/>
                    </scope>
                </scope>
                <scope line="356"/>
            </method>
            <javadoc line="362">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="T" line="365">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="372">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="375">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="T"/>
                </params>
            </method>
            <javadoc line="382">
                {@inheritDoc}                
            </javadoc>
            <method name="addToEntry" type="void" line="385">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="increment" type="T"/>
                </params>
            </method>
            <javadoc line="392">
                {@inheritDoc}                
            </javadoc>
            <method name="multiplyEntry" type="void" line="395">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="factor" type="T"/>
                </params>
            </method>
            <javadoc line="402">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="404"/>
            <javadoc line="408">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="410"/>
            <javadoc line="414">
                {@inheritDoc}                
            </javadoc>
            <method name="operate" type="T[]" line="416">
                <params>
                    <param name="v" type="T[]"/>
                </params>
                <declaration name="nRows" type="int" line="417"/>
                <declaration name="nCols" type="int" line="418"/>
                <scope line="419"/>
                <declaration name="out" type="T[]" line="422"/>
                <scope line="423">
                    <declaration name="dataRow" type="T[]" line="424"/>
                    <declaration name="sum" type="T" line="425"/>
                    <scope line="426"/>
                </scope>
            </method>
            <javadoc line="434">
                {@inheritDoc}                
            </javadoc>
            <method name="preMultiply" type="T[]" line="436">
                <params>
                    <param name="v" type="T[]"/>
                </params>
                <declaration name="nRows" type="int" line="437"/>
                <declaration name="nCols" type="int" line="438"/>
                <scope line="439"/>
                <declaration name="out" type="T[]" line="443"/>
                <scope line="444">
                    <declaration name="sum" type="T" line="445"/>
                    <scope line="446"/>
                </scope>
            </method>
            <javadoc line="455">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="T" line="457">
                <params>
                    <param name="visitor" type="FieldMatrixChangingVisitor<T>"/>
                </params>
                <declaration name="rows" type="int" line="458"/>
                <declaration name="columns" type="int" line="459"/>
                <scope line="461">
                    <declaration name="rowI" type="T[]" line="462"/>
                    <scope line="463"/>
                </scope>
            </method>
            <javadoc line="470">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="T" line="472">
                <params>
                    <param name="visitor" type="FieldMatrixPreservingVisitor<T>"/>
                </params>
                <declaration name="rows" type="int" line="473"/>
                <declaration name="columns" type="int" line="474"/>
                <scope line="476">
                    <declaration name="rowI" type="T[]" line="477"/>
                    <scope line="478"/>
                </scope>
            </method>
            <javadoc line="485">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="T" line="490">
                <params>
                    <param name="visitor" type="FieldMatrixChangingVisitor<T>"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="494">
                    <declaration name="rowI" type="T[]" line="495"/>
                    <scope line="496"/>
                </scope>
            </method>
            <javadoc line="503">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="T" line="508">
                <params>
                    <param name="visitor" type="FieldMatrixPreservingVisitor<T>"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="512">
                    <declaration name="rowI" type="T[]" line="513"/>
                    <scope line="514"/>
                </scope>
            </method>
            <javadoc line="521">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="523">
                <params>
                    <param name="visitor" type="FieldMatrixChangingVisitor<T>"/>
                </params>
                <declaration name="rows" type="int" line="524"/>
                <declaration name="columns" type="int" line="525"/>
                <scope line="527">
                    <scope line="528">
                        <declaration name="rowI" type="T[]" line="529"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="536">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="538">
                <params>
                    <param name="visitor" type="FieldMatrixPreservingVisitor<T>"/>
                </params>
                <declaration name="rows" type="int" line="539"/>
                <declaration name="columns" type="int" line="540"/>
                <scope line="542">
                    <scope line="543"/>
                </scope>
            </method>
            <javadoc line="550">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="555">
                <params>
                    <param name="visitor" type="FieldMatrixChangingVisitor<T>"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="559">
                    <scope line="560">
                        <declaration name="rowI" type="T[]" line="561"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="568">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="573">
                <params>
                    <param name="visitor" type="FieldMatrixPreservingVisitor<T>"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="577">
                    <scope line="578"/>
                </scope>
            </method>
            <javadoc line="585">
                Get a fresh copy of the underlying data array.                
                <return>
                    a copy of the underlying data array.                    
                </return>
            </javadoc>
            <method name="copyOut" type="T[][]" line="590">
                <comment line="594">
                    can&apos;t copy 2-d array in one shot, otherwise get row references                    
                </comment>
                <declaration name="nRows" type="int" line="591"/>
                <declaration name="out" type="T[][]" line="592"/>
                <scope line="594"/>
            </method>
            <javadoc line="600">
                Replace data with a fresh copy of the input array.                
                <param>
                    in Data to copy.                    
                </param>
                <throws>
                    NoDataException if the input array is empty.                    
                </throws>
                <throws>
                    DimensionMismatchException if the input array is not rectangular.                    
                </throws>
                <throws>
                    NullArgumentException if the input array is {@code null}.                    
                </throws>
            </javadoc>
            <method name="copyIn" type="void" line="610">
                <params>
                    <param name="in" type="T[][]"/>
                </params>
            </method>
        </class>
    </source>