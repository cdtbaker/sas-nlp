<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Vector1D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Embedding"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Hyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Transform"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Line" line="36">
            <implements interface="Hyperplane">
                <type_params>
                    <type_param name="Euclidean2D"/>
                </type_params>
            </implements>
            <implements interface="Embedding">
                <type_params>
                    <type_param name="Euclidean2D"/>
                    <type_param name="Euclidean1D"/>
                </type_params>
            </implements>
            <javadoc line="36">
                This class represents an oriented line in the 2D plane.
                  &lt;p&gt;An oriented line can be defined either by prolongating a line
                  segment between two points past these points, or by one point and
                  an angular direction (in trigonometric orientation).&lt;/p&gt;
                  &lt;p&gt;Since it is oriented the two half planes at its two sides are
                  unambiguously identified as a left half plane and a right half
                  plane. This can be used to identify the interior and the exterior
                  in a simple way by local properties only when part of a line is
                  used to define part of a polygon boundary.&lt;/p&gt;
                  &lt;p&gt;A line can also be used to completely define a reference frame
                  in the plane. It is sufficient to select one specific point in the
                  line (the orthogonal projection of the original reference frame on
                  the line) and to use the unit vector in the line direction and the
                  orthogonal vector oriented from left half plane to right half
                  plane. We define two coordinates by the process, the
                  &lt;em&gt;abscissa&lt;/em&gt; along the line, and the &lt;em&gt;offset&lt;/em&gt; across
                  the line. All points of the plane are uniquely identified by these
                  two coordinates. The line is the set of points at zero offset, the
                  left half plane is the set of points with negative offsets and the
                  right half plane is the set of points with positive offsets.&lt;/p&gt;                
                <version>
                    $Id: Line.java 1560115 2014-01-21 17:49:13Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_TOLERANCE" type="double" line="65"/>
            <javadoc line="65">
                Default value for tolerance.                
            </javadoc>
            <declaration name="angle" type="double" line="68"/>
            <javadoc line="68">
                Angle with respect to the abscissa axis.                
            </javadoc>
            <declaration name="cos" type="double" line="71"/>
            <javadoc line="71">
                Cosine of the line angle.                
            </javadoc>
            <declaration name="sin" type="double" line="74"/>
            <javadoc line="74">
                Sine of the line angle.                
            </javadoc>
            <declaration name="originOffset" type="double" line="77"/>
            <javadoc line="77">
                Offset of the frame origin.                
            </javadoc>
            <declaration name="tolerance" type="double" line="80"/>
            <javadoc line="80">
                Tolerance below which points are considered identical.                
            </javadoc>
            <javadoc line="83">
                Build a line from two points.
                  &lt;p&gt;The line is oriented from p1 to p2&lt;/p&gt;                
                <param>
                    p1 first point                    
                </param>
                <param>
                    p2 second point                    
                </param>
                <param>
                    tolerance tolerance below which points are considered identical                    
                </param>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="Line" type="constructor" line="90">
                <params>
                    <param name="p1" type="Vector2D"/>
                    <param name="p2" type="Vector2D"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="95">
                Build a line from a point and an angle.                
                <param>
                    p point belonging to the line                    
                </param>
                <param>
                    angle angle of the line with respect to abscissa axis                    
                </param>
                <param>
                    tolerance tolerance below which points are considered identical                    
                </param>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="Line" type="constructor" line="101">
                <params>
                    <param name="p" type="Vector2D"/>
                    <param name="angle" type="double"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="106">
                Build a line from its internal characteristics.                
                <param>
                    angle angle of the line with respect to abscissa axis                    
                </param>
                <param>
                    cos cosine of the angle                    
                </param>
                <param>
                    sin sine of the angle                    
                </param>
                <param>
                    originOffset offset of the origin                    
                </param>
                <param>
                    tolerance tolerance below which points are considered identical                    
                </param>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="Line" type="constructor" line="115">
                <params>
                    <param name="angle" type="double"/>
                    <param name="cos" type="double"/>
                    <param name="sin" type="double"/>
                    <param name="originOffset" type="double"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="123">
                Build a line from two points.
                  &lt;p&gt;The line is oriented from p1 to p2&lt;/p&gt;                
                <param>
                    p1 first point                    
                </param>
                <param>
                    p2 second point                    
                </param>
                <deprecated>
                    as of 3.3, replaced with {@link #Line(Vector2D,Vector2D,double)}                    
                </deprecated>
            </javadoc>
            <method name="Line" type="constructor" line="130">
                <params>
                    <param name="p1" type="Vector2D"/>
                    <param name="p2" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="134">
                Build a line from a point and an angle.                
                <param>
                    p point belonging to the line                    
                </param>
                <param>
                    angle angle of the line with respect to abscissa axis                    
                </param>
                <deprecated>
                    as of 3.3, replaced with {@link #Line(Vector2D,double,double)}                    
                </deprecated>
            </javadoc>
            <method name="Line" type="constructor" line="140">
                <params>
                    <param name="p" type="Vector2D"/>
                    <param name="angle" type="double"/>
                </params>
            </method>
            <javadoc line="144">
                Copy constructor.
                  &lt;p&gt;The created instance is completely independent from the
                  original instance, it is a deep copy.&lt;/p&gt;                
                <param>
                    line line to copy                    
                </param>
            </javadoc>
            <method name="Line" type="constructor" line="149">
                <params>
                    <param name="line" type="Line"/>
                </params>
            </method>
            <javadoc line="157">
                {@inheritDoc}                
            </javadoc>
            <method name="copySelf" type="Line" line="158"/>
            <javadoc line="162">
                Reset the instance as if built from two points.
                  &lt;p&gt;The line is oriented from p1 to p2&lt;/p&gt;                
                <param>
                    p1 first point                    
                </param>
                <param>
                    p2 second point                    
                </param>
            </javadoc>
            <method name="reset" type="void" line="167">
                <params>
                    <param name="p1" type="Vector2D"/>
                    <param name="p2" type="Vector2D"/>
                </params>
                <declaration name="dx" type="double" line="168"/>
                <declaration name="dy" type="double" line="169"/>
                <declaration name="d" type="double" line="170"/>
                <scope line="171"/>
                <scope line="176"/>
            </method>
            <javadoc line="184">
                Reset the instance as if built from a line and an angle.                
                <param>
                    p point belonging to the line                    
                </param>
                <param>
                    alpha angle of the line with respect to abscissa axis                    
                </param>
            </javadoc>
            <method name="reset" type="void" line="188">
                <params>
                    <param name="p" type="Vector2D"/>
                    <param name="alpha" type="double"/>
                </params>
            </method>
            <javadoc line="195">
                Revert the instance.                
            </javadoc>
            <method name="revertSelf" type="void" line="197">
                <scope line="198"/>
                <scope line="200"/>
            </method>
            <javadoc line="208">
                Get the reverse of the instance.
                  &lt;p&gt;Get a line with reversed orientation with respect to the
                  instance. A new object is built, the instance is untouched.&lt;/p&gt;                
                <return>
                    a new line, with orientation opposite to the instance orientation                    
                </return>
            </javadoc>
            <method name="getReverse" type="Line" line="213"/>
            <javadoc line="218">
                Transform a space point into a sub-space point.                
                <param>
                    vector n-dimension point of the space                    
                </param>
                <return>
                    (n-1)-dimension point of the sub-space corresponding to
                      the specified space point                    
                </return>
            </javadoc>
            <method name="toSubSpace" type="Vector1D" line="223">
                <params>
                    <param name="vector" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
            </method>
            <javadoc line="227">
                Transform a sub-space point into a space point.                
                <param>
                    vector (n-1)-dimension point of the sub-space                    
                </param>
                <return>
                    n-dimension point of the space corresponding to the
                      specified sub-space point                    
                </return>
            </javadoc>
            <method name="toSpace" type="Vector2D" line="232">
                <params>
                    <param name="vector" type="Vector&lt;Euclidean1D&gt;"/>
                </params>
            </method>
            <javadoc line="236">
                {@inheritDoc}                
            </javadoc>
            <method name="toSubSpace" type="Vector1D" line="237">
                <params>
                    <param name="point" type="Point&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="p2" type="Vector2D" line="238"/>
            </method>
            <javadoc line="242">
                {@inheritDoc}                
            </javadoc>
            <method name="toSpace" type="Vector2D" line="243">
                <params>
                    <param name="point" type="Point&lt;Euclidean1D&gt;"/>
                </params>
                <declaration name="abscissa" type="double" line="244"/>
            </method>
            <javadoc line="249">
                Get the intersection point of the instance and another line.                
                <param>
                    other other line                    
                </param>
                <return>
                    intersection point of the instance and the other line
                      or null if there are no intersection points                    
                </return>
            </javadoc>
            <method name="intersection" type="Vector2D" line="254">
                <params>
                    <param name="other" type="Line"/>
                </params>
                <declaration name="d" type="double" line="255"/>
                <scope line="256"/>
            </method>
            <javadoc line="263">
                {@inheritDoc}                
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="project" type="Point&lt;Euclidean2D&gt;" line="266">
                <params>
                    <param name="point" type="Point&lt;Euclidean2D&gt;"/>
                </params>
            </method>
            <javadoc line="270">
                {@inheritDoc}                
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="getTolerance" type="double" line="273"/>
            <javadoc line="277">
                {@inheritDoc}                
            </javadoc>
            <method name="wholeHyperplane" type="SubLine" line="278"/>
            <javadoc line="282">
                Build a region covering the whole space.                
                <return>
                    a region containing the instance (really a {@link PolygonsSet PolygonsSet} instance)                    
                </return>
            </javadoc>
            <method name="wholeSpace" type="PolygonsSet" line="286"/>
            <javadoc line="290">
                Get the offset (oriented distance) of a parallel line.
                  &lt;p&gt;This method should be called only for parallel lines otherwise
                  the result is not meaningful.&lt;/p&gt;
                  &lt;p&gt;The offset is 0 if both lines are the same, it is
                  positive if the line is on the right side of the instance and
                  negative if it is on the left side, according to its natural
                  orientation.&lt;/p&gt;                
                <param>
                    line line to check                    
                </param>
                <return>
                    offset of the line                    
                </return>
            </javadoc>
            <method name="getOffset" type="double" line="300">
                <params>
                    <param name="line" type="Line"/>
                </params>
            </method>
            <javadoc line="305">
                Get the offset (oriented distance) of a vector.                
                <param>
                    vector vector to check                    
                </param>
                <return>
                    offset of the vector                    
                </return>
            </javadoc>
            <method name="getOffset" type="double" line="309">
                <params>
                    <param name="vector" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
            </method>
            <javadoc line="313">
                {@inheritDoc}                
            </javadoc>
            <method name="getOffset" type="double" line="314">
                <params>
                    <param name="point" type="Point&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="p2" type="Vector2D" line="315"/>
            </method>
            <javadoc line="319">
                {@inheritDoc}                
            </javadoc>
            <method name="sameOrientationAs" type="boolean" line="320">
                <params>
                    <param name="other" type="Hyperplane&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="otherL" type="Line" line="321"/>
            </method>
            <javadoc line="325">
                Get one point from the plane.                
                <param>
                    abscissa desired abscissa for the point                    
                </param>
                <param>
                    offset desired offset for the point                    
                </param>
                <return>
                    one point in the plane, with given abscissa and offset
                      relative to the line                    
                </return>
            </javadoc>
            <method name="getPointAt" type="Vector2D" line="331">
                <params>
                    <param name="abscissa" type="Vector1D"/>
                    <param name="offset" type="double"/>
                </params>
                <declaration name="x" type="double" line="332"/>
                <declaration name="dOffset" type="double" line="333"/>
            </method>
            <javadoc line="337">
                Check if the line contains a point.                
                <param>
                    p point to check                    
                </param>
                <return>
                    true if p belongs to the line                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="341">
                <params>
                    <param name="p" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="345">
                Compute the distance between the instance and a point.
                  &lt;p&gt;This is a shortcut for invoking FastMath.abs(getOffset(p)),
                  and provides consistency with what is in the
                  org.apache.commons.math3.geometry.euclidean.threed.Line class.&lt;/p&gt;                
                <param>
                    p to check                    
                </param>
                <return>
                    distance between the instance and the point                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="distance" type="double" line="354">
                <params>
                    <param name="p" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="358">
                Check the instance is parallel to another line.                
                <param>
                    line other line to check                    
                </param>
                <return>
                    true if the instance is parallel to the other line
                      (they can have either the same or opposite orientations)                    
                </return>
            </javadoc>
            <method name="isParallelTo" type="boolean" line="363">
                <params>
                    <param name="line" type="Line"/>
                </params>
            </method>
            <javadoc line="367">
                Translate the line to force it passing by a point.                
                <param>
                    p point by which the line should pass                    
                </param>
            </javadoc>
            <method name="translateToPoint" type="void" line="370">
                <params>
                    <param name="p" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="374">
                Get the angle of the line.                
                <return>
                    the angle of the line with respect to the abscissa axis                    
                </return>
            </javadoc>
            <method name="getAngle" type="double" line="377"/>
            <javadoc line="381">
                Set the angle of the line.                
                <param>
                    angle new angle of the line with respect to the abscissa axis                    
                </param>
            </javadoc>
            <method name="setAngle" type="void" line="384">
                <params>
                    <param name="angle" type="double"/>
                </params>
            </method>
            <javadoc line="390">
                Get the offset of the origin.                
                <return>
                    the offset of the origin                    
                </return>
            </javadoc>
            <method name="getOriginOffset" type="double" line="393"/>
            <javadoc line="397">
                Set the offset of the origin.                
                <param>
                    offset offset of the origin                    
                </param>
            </javadoc>
            <method name="setOriginOffset" type="void" line="400">
                <params>
                    <param name="offset" type="double"/>
                </params>
            </method>
            <javadoc line="404">
                Get a {@link org.apache.commons.math3.geometry.partitioning.TransformTransform} embedding an affine transform.                
                <param>
                    transform affine transform to embed (must be inversible
                      otherwise the {@link org.apache.commons.math3.geometry.partitioning.Transform#apply(Hyperplane)apply(Hyperplane)} method would work only for some lines, and
                      fail for other ones)                    
                </param>
                <return>
                    a new transform that can be applied to either {@link Vector2D Vector2D}, {@link Line Line} or {@link org.apache.commons.math3.geometry.partitioning.SubHyperplaneSubHyperplane} instances                    
                </return>
                <exception>
                    MathIllegalArgumentException if the transform is non invertible                    
                </exception>
            </javadoc>
            <method name="getTransform" type="Transform&lt;Euclidean2D,Euclidean1D&gt;" line="418">
                <params>
                    <param name="transform" type="AffineTransform"/>
                </params>
            </method>
            <class name="LineTransform" line="422">
                <comment line="432">
                    CHECKSTYLE: stop JavadocVariable check                    
                </comment>
                <comment line="443">
                    CHECKSTYLE: resume JavadocVariable check                    
                </comment>
                <implements interface="Transform">
                    <type_params>
                        <type_param name="Euclidean2D"/>
                        <type_param name="Euclidean1D"/>
                    </type_params>
                </implements>
                <javadoc line="422">
                    Class embedding an affine transform.
                      &lt;p&gt;This class is used in order to apply an affine transform to a
                      line. Using a specific object allow to perform some computations
                      on the transform only once even if the same transform is to be
                      applied to a large number of lines (for example to a large
                      polygon)./&lt;p&gt;                    
                </javadoc>
                <declaration name="cXX" type="double" line="432"/>
                <declaration name="cXY" type="double" line="433"/>
                <declaration name="cX1" type="double" line="434"/>
                <declaration name="cYX" type="double" line="435"/>
                <declaration name="cYY" type="double" line="436"/>
                <declaration name="cY1" type="double" line="437"/>
                <declaration name="c1Y" type="double" line="439"/>
                <declaration name="c1X" type="double" line="440"/>
                <declaration name="c11" type="double" line="441"/>
                <javadoc line="444">
                    Build an affine line transform from a n {@code AffineTransform}.                    
                    <param>
                        transform transform to use (must be invertible otherwise
                          the {@link LineTransform#apply(Hyperplane)} method would work
                          only for some lines, and fail for other ones)                        
                    </param>
                    <exception>
                        MathIllegalArgumentException if the transform is non invertible                        
                    </exception>
                </javadoc>
                <method name="LineTransform" type="constructor" line="450">
                    <params>
                        <param name="transform" type="AffineTransform"/>
                    </params>
                    <declaration name="m" type="double[]" line="452"/>
                    <scope line="465"/>
                </method>
                <javadoc line="471">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="Vector2D" line="472">
                    <params>
                        <param name="point" type="Point&lt;Euclidean2D&gt;"/>
                    </params>
                    <declaration name="p2D" type="Vector2D" line="473"/>
                    <declaration name="x" type="double" line="474"/>
                    <declaration name="y" type="double" line="475"/>
                </method>
                <javadoc line="480">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="Line" line="481">
                    <params>
                        <param name="hyperplane" type="Hyperplane&lt;Euclidean2D&gt;"/>
                    </params>
                    <declaration name="line" type="Line" line="482"/>
                    <declaration name="rOffset" type="double" line="483"/>
                    <declaration name="rCos" type="double" line="484"/>
                    <declaration name="rSin" type="double" line="485"/>
                    <declaration name="inv" type="double" line="486"/>
                </method>
                <javadoc line="492">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="SubHyperplane&lt;Euclidean1D&gt;" line="495">
                    <params>
                        <param name="sub" type="SubHyperplane&lt;Euclidean1D&gt;"/>
                        <param name="original" type="Hyperplane&lt;Euclidean2D&gt;"/>
                        <param name="transformed" type="Hyperplane&lt;Euclidean2D&gt;"/>
                    </params>
                    <declaration name="op" type="OrientedPoint" line="496"/>
                    <declaration name="originalLine" type="Line" line="497"/>
                    <declaration name="transformedLine" type="Line" line="498"/>
                    <declaration name="newLoc" type="Vector1D" line="499"/>
                </method>
            </class>
        </class>
    </source>