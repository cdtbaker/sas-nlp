<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Gamma"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="PoissonDistribution" line="28">
            <extends class="AbstractIntegerDistribution"/>
            <javadoc line="28">
                Implementation of the Poisson distribution.                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Poisson distribution (Wikipedia)</a>                    
                </see>
                <see>
                    <a href="http://mathworld.wolfram.com/PoissonDistribution.html">Poisson distribution (MathWorld)</a>                    
                </see>
                <version>
                    $Id: PoissonDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_MAX_ITERATIONS" type="int" line="36"/>
            <javadoc line="36">
                Default maximum number of iterations for cumulative probability calculations.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="41"/>
            <javadoc line="41">
                Default convergence criterion.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="46"/>
            <javadoc line="46">
                Serializable version identifier.                
            </javadoc>
            <declaration name="normal" type="NormalDistribution" line="48"/>
            <javadoc line="48">
                Distribution used to compute normal approximation.                
            </javadoc>
            <declaration name="exponential" type="ExponentialDistribution" line="50"/>
            <javadoc line="50">
                Distribution needed for the {@link #sample()} method.                
            </javadoc>
            <declaration name="mean" type="double" line="52"/>
            <javadoc line="52">
                Mean of the distribution.                
            </javadoc>
            <declaration name="maxIterations" type="int" line="55"/>
            <javadoc line="55">
                Maximum number of iterations for cumulative probability. Cumulative
                  probabilities are estimated using either Lanczos series approximation
                  of {@link Gamma#regularizedGammaP(double,double,double,int)}or continued fraction approximation of{@link Gamma#regularizedGammaQ(double,double,double,int)}.                
            </javadoc>
            <declaration name="epsilon" type="double" line="64"/>
            <javadoc line="64">
                Convergence criterion for cumulative probability.                
            </javadoc>
            <javadoc line="67">
                Creates a new Poisson distribution with specified mean.                
                <param>
                    p the Poisson mean                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code p <= 0}.                    
                </throws>
            </javadoc>
            <method name="PoissonDistribution" type="constructor" line="73">
                <params>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="77">
                Creates a new Poisson distribution with specified mean, convergence
                  criterion and maximum number of iterations.                
                <param>
                    p Poisson mean.                    
                </param>
                <param>
                    epsilon Convergence criterion for cumulative probabilities.                    
                </param>
                <param>
                    maxIterations the maximum number of iterations for cumulative
                      probabilities.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code p <= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="PoissonDistribution" type="constructor" line="89">
                <params>
                    <param name="p" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="93">
                Creates a new Poisson distribution with specified mean, convergence
                  criterion and maximum number of iterations.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    p Poisson mean.                    
                </param>
                <param>
                    epsilon Convergence criterion for cumulative probabilities.                    
                </param>
                <param>
                    maxIterations the maximum number of iterations for cumulative
                      probabilities.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code p <= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="PoissonDistribution" type="constructor" line="109">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="p" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <comment line="120">
                    Use the same RNG instance as the parent class.                    
                </comment>
                <scope line="112"/>
            </method>
            <javadoc line="126">
                Creates a new Poisson distribution with the specified mean and
                  convergence criterion.                
                <param>
                    p Poisson mean.                    
                </param>
                <param>
                    epsilon Convergence criterion for cumulative probabilities.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code p <= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="PoissonDistribution" type="constructor" line="136">
                <params>
                    <param name="p" type="double"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="140">
                Creates a new Poisson distribution with the specified mean and maximum
                  number of iterations.                
                <param>
                    p Poisson mean.                    
                </param>
                <param>
                    maxIterations Maximum number of iterations for cumulative
                      probabilities.                    
                </param>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="PoissonDistribution" type="constructor" line="149">
                <params>
                    <param name="p" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="153">
                Get the mean for the distribution.                
                <return>
                    the mean for the distribution.                    
                </return>
            </javadoc>
            <method name="getMean" type="double" line="158"/>
            <javadoc line="162">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="163">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="ret" type="double" line="164"/>
                <scope line="165"/>
                <scope line="167"/>
                <scope line="169"/>
            </method>
            <javadoc line="177">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="178">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="179"/>
                <scope line="182"/>
            </method>
            <javadoc line="189">
                Calculates the Poisson distribution function using a normal
                  approximation. The {@code N(mean, sqrt(mean))} distribution is used
                  to approximate the Poisson distribution. The computation uses
                  &quot;half-correction&quot; (evaluating the normal distribution function at{@code x + 0.5}).                
                <param>
                    x Upper bound, inclusive.                    
                </param>
                <return>
                    the distribution function value calculated using a normal
                      approximation.                    
                </return>
            </javadoc>
            <method name="normalApproximateProbability" type="double" line="200">
                <params>
                    <param name="x" type="int"/>
                </params>
                <comment line="202">
                    calculate the probability using half-correction                    
                </comment>
            </method>
            <javadoc line="205">
                {@inheritDoc}For mean parameter {@code p}, the mean is {@code p}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="210"/>
            <javadoc line="214">
                {@inheritDoc}For mean parameter {@code p}, the variance is {@code p}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="219"/>
            <javadoc line="223">
                {@inheritDoc}The lower bound of the support is always 0 no matter the mean parameter.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="int" line="230"/>
            <javadoc line="234">
                {@inheritDoc}The upper bound of the support is positive infinity,
                  regardless of the parameter values. There is no integer infinity,
                  so this method returns {@code Integer.MAX_VALUE}.                
                <return>
                    upper bound of the support (always {@code Integer.MAX_VALUE} for
                      positive infinity)                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="int" line="244"/>
            <javadoc line="248">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="255"/>
            <javadoc line="259">
                {@inheritDoc}&lt;p&gt;
                  &lt;strong&gt;Algorithm Description&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;For small means, uses simulation of a Poisson process
                  using Uniform deviates, as described
                  &lt;a href=&quot;http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm&quot;&gt; here&lt;/a&gt;.
                  The Poisson process (and hence value returned) is bounded by 1000  mean.
                  &lt;/li&gt;
                  &lt;li&gt;For large means, uses the rejection algorithm described in
                  &lt;quote&gt;
                  Devroye, Luc. (1981).&lt;i&gt;The Computer Generation of Poisson Random Variables&lt;/i&gt;
                  &lt;strong&gt;Computing&lt;/strong&gt; vol. 26 pp. 197-207.
                  &lt;/quote&gt;
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <return>
                    a random value.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="sample" type="int" line="282"/>
            <javadoc line="286">
                @param meanPoisson Mean of the Poisson distribution.                
                <return>
                    the next sample.                    
                </return>
            </javadoc>
            <method name="nextPoisson" type="long" line="290">
                <params>
                    <param name="meanPoisson" type="double"/>
                </params>
                <declaration name="pivot" type="double" line="291"/>
                <scope line="292">
                    <declaration name="p" type="double" line="293"/>
                    <declaration name="n" type="long" line="294"/>
                    <declaration name="r" type="double" line="295"/>
                    <declaration name="rnd" type="double" line="296"/>
                    <scope line="298">
                        <scope line="301"/>
                        <scope line="303"/>
                    </scope>
                </scope>
                <scope line="308">
                    <declaration name="lambda" type="double" line="309"/>
                    <declaration name="lambdaFractional" type="double" line="310"/>
                    <declaration name="logLambda" type="double" line="311"/>
                    <declaration name="logLambdaFactorial" type="double" line="312"/>
                    <declaration name="y2" type="long" line="313"/>
                    <declaration name="delta" type="double" line="314"/>
                    <declaration name="halfDelta" type="double" line="315"/>
                    <declaration name="twolpd" type="double" line="316"/>
                    <declaration name="a1" type="double" line="317"/>
                    <declaration name="a2" type="double" line="318"/>
                    <declaration name="aSum" type="double" line="319"/>
                    <declaration name="p1" type="double" line="320"/>
                    <declaration name="p2" type="double" line="321"/>
                    <declaration name="c1" type="double" line="322"/>
                    <declaration name="x" type="double" line="324"/>
                    <declaration name="y" type="double" line="325"/>
                    <declaration name="v" type="double" line="326"/>
                    <declaration name="a" type="int" line="327"/>
                    <declaration name="t" type="double" line="328"/>
                    <declaration name="qr" type="double" line="329"/>
                    <declaration name="qa" type="double" line="330"/>
                    <scope line="331">
                        <declaration name="u" type="double" line="332"/>
                        <scope line="333">
                            <declaration name="n" type="double" line="334"/>
                            <scope line="336"/>
                            <declaration name="e" type="double" line="340"/>
                        </scope>
                        <scope line="342">
                            <scope line="343"/>
                            <scope line="346"/>
                        </scope>
                        <scope line="354"/>
                        <scope line="360"/>
                        <scope line="364"/>
                        <scope line="367"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>