<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Gamma"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="PoissonDistribution" line="10">
            <extends class="AbstractIntegerDistribution"/>
            <javadoc line="10">
                Implementation of the Poisson distribution.                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Poisson distribution (Wikipedia)</a>                    
                </see>
                <see>
                    <a href="http://mathworld.wolfram.com/PoissonDistribution.html">Poisson distribution (MathWorld)</a>                    
                </see>
                <version>
                    $Id: PoissonDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_MAX_ITERATIONS" type="int" line="17"/>
            <javadoc line="17">
                Default maximum number of iterations for cumulative probability calculations.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="22"/>
            <javadoc line="22">
                Default convergence criterion.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="27"/>
            <javadoc line="27">
                Serializable version identifier.                
            </javadoc>
            <declaration name="normal" type="NormalDistribution" line="31"/>
            <javadoc line="31">
                Distribution used to compute normal approximation.                
            </javadoc>
            <declaration name="exponential" type="ExponentialDistribution" line="35"/>
            <javadoc line="35">
                Distribution needed for the {@link #sample()} method.                
            </javadoc>
            <declaration name="mean" type="double" line="39"/>
            <javadoc line="39">
                Mean of the distribution.                
            </javadoc>
            <declaration name="maxIterations" type="int" line="43"/>
            <javadoc line="43">
                Maximum number of iterations for cumulative probability. Cumulative
                  probabilities are estimated using either Lanczos series approximation
                  of {@link Gamma#regularizedGammaP(double,double,double,int)}or continued fraction approximation of{@link Gamma#regularizedGammaQ(double,double,double,int)}.                
            </javadoc>
            <declaration name="epsilon" type="double" line="49"/>
            <javadoc line="49">
                Convergence criterion for cumulative probability.                
            </javadoc>
            <javadoc line="53">
                Creates a new Poisson distribution with specified mean.                
                <param>
                    p the Poisson mean                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code p <= 0}.                    
                </throws>
            </javadoc>
            <method name="PoissonDistribution" type="constructor" line="58">
                <params>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="61">
                Creates a new Poisson distribution with specified mean, convergence
                  criterion and maximum number of iterations.                
                <param>
                    p Poisson mean.                    
                </param>
                <param>
                    epsilon Convergence criterion for cumulative probabilities.                    
                </param>
                <param>
                    maxIterations the maximum number of iterations for cumulative
                      probabilities.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code p <= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="PoissonDistribution" type="constructor" line="71">
                <params>
                    <param name="p" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                Creates a new Poisson distribution with specified mean, convergence
                  criterion and maximum number of iterations.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    p Poisson mean.                    
                </param>
                <param>
                    epsilon Convergence criterion for cumulative probabilities.                    
                </param>
                <param>
                    maxIterations the maximum number of iterations for cumulative
                      probabilities.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code p <= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="PoissonDistribution" type="constructor" line="85">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="p" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <scope line="87"/>
            </method>
            <javadoc line="96">
                Creates a new Poisson distribution with the specified mean and
                  convergence criterion.                
                <param>
                    p Poisson mean.                    
                </param>
                <param>
                    epsilon Convergence criterion for cumulative probabilities.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code p <= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="PoissonDistribution" type="constructor" line="104">
                <params>
                    <param name="p" type="double"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="107">
                Creates a new Poisson distribution with the specified mean and maximum
                  number of iterations.                
                <param>
                    p Poisson mean.                    
                </param>
                <param>
                    maxIterations Maximum number of iterations for cumulative
                      probabilities.                    
                </param>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="PoissonDistribution" type="constructor" line="115">
                <params>
                    <param name="p" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                Get the mean for the distribution.                
                <return>
                    the mean for the distribution.                    
                </return>
            </javadoc>
            <method name="getMean" type="double" line="122"/>
            <javadoc line="125">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="128">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="ret" type="double" line="129"/>
                <scope line="130"/>
                <scope line="133"/>
                <scope line="136"/>
            </method>
            <javadoc line="141">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="144">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="145"/>
                <scope line="148"/>
            </method>
            <javadoc line="153">
                Calculates the Poisson distribution function using a normal
                  approximation. The {@code N(mean, sqrt(mean))} distribution is used
                  to approximate the Poisson distribution. The computation uses
                  &quot;half-correction&quot; (evaluating the normal distribution function at{@code x + 0.5}).                
                <param>
                    x Upper bound, inclusive.                    
                </param>
                <return>
                    the distribution function value calculated using a normal
                      approximation.                    
                </return>
            </javadoc>
            <method name="normalApproximateProbability" type="double" line="162">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="165">
                {@inheritDoc}For mean parameter {@code p}, the mean is {@code p}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="168"/>
            <javadoc line="171">
                {@inheritDoc}For mean parameter {@code p}, the variance is {@code p}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="174"/>
            <javadoc line="177">
                {@inheritDoc}The lower bound of the support is always 0 no matter the mean parameter.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="int" line="181"/>
            <javadoc line="184">
                {@inheritDoc}The upper bound of the support is positive infinity,
                  regardless of the parameter values. There is no integer infinity,
                  so this method returns {@code Integer.MAX_VALUE}.                
                <return>
                    upper bound of the support (always {@code Integer.MAX_VALUE} for
                      positive infinity)                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="int" line="191"/>
            <javadoc line="194">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="198"/>
            <javadoc line="201">
                {@inheritDoc}&lt;p&gt;
                  &lt;strong&gt;Algorithm Description&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;For small means, uses simulation of a Poisson process
                  using Uniform deviates, as described
                  &lt;a href=&quot;http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm&quot;&gt; here&lt;/a&gt;.
                  The Poisson process (and hence value returned) is bounded by 1000  mean.
                  &lt;/li&gt;
                  &lt;li&gt;For large means, uses the rejection algorithm described in
                  &lt;quote&gt;
                  Devroye, Luc. (1981).&lt;i&gt;The Computer Generation of Poisson Random Variables&lt;/i&gt;
                  &lt;strong&gt;Computing&lt;/strong&gt; vol. 26 pp. 197-207.
                  &lt;/quote&gt;
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <return>
                    a random value.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="sample" type="int" line="221"/>
            <javadoc line="224">
                @param meanPoisson Mean of the Poisson distribution.                
                <return>
                    the next sample.                    
                </return>
            </javadoc>
            <method name="nextPoisson" type="long" line="228">
                <params>
                    <param name="meanPoisson" type="double"/>
                </params>
                <declaration name="pivot" type="double" line="229"/>
                <scope line="230">
                    <declaration name="p" type="double" line="231"/>
                    <declaration name="n" type="long" line="232"/>
                    <declaration name="r" type="double" line="233"/>
                    <declaration name="rnd" type="double" line="234"/>
                    <scope line="235">
                        <scope line="238"/>
                        <scope line="241"/>
                    </scope>
                </scope>
                <scope line="247">
                    <declaration name="lambda" type="double" line="248"/>
                    <declaration name="lambdaFractional" type="double" line="249"/>
                    <declaration name="logLambda" type="double" line="250"/>
                    <declaration name="logLambdaFactorial" type="double" line="251"/>
                    <declaration name="y2" type="long" line="252"/>
                    <declaration name="delta" type="double" line="253"/>
                    <declaration name="halfDelta" type="double" line="254"/>
                    <declaration name="twolpd" type="double" line="255"/>
                    <declaration name="a1" type="double" line="256"/>
                    <declaration name="a2" type="double" line="257"/>
                    <declaration name="aSum" type="double" line="258"/>
                    <declaration name="p1" type="double" line="259"/>
                    <declaration name="p2" type="double" line="260"/>
                    <declaration name="c1" type="double" line="261"/>
                    <declaration name="x" type="double" line="262"/>
                    <declaration name="y" type="double" line="263"/>
                    <declaration name="v" type="double" line="264"/>
                    <declaration name="a" type="int" line="265"/>
                    <declaration name="t" type="double" line="266"/>
                    <declaration name="qr" type="double" line="267"/>
                    <declaration name="qa" type="double" line="268"/>
                    <scope line="269">
                        <declaration name="u" type="double" line="270"/>
                        <scope line="271">
                            <declaration name="n" type="double" line="272"/>
                            <scope line="274"/>
                            <declaration name="e" type="double" line="278"/>
                        </scope>
                        <scope line="281">
                            <scope line="282"/>
                            <scope line="286"/>
                        </scope>
                        <scope line="294"/>
                        <scope line="300"/>
                        <scope line="304"/>
                        <scope line="307"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>