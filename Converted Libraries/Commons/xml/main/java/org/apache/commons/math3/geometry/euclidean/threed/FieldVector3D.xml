<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.io.Serializable"/>
        <import package="java.text.NumberFormat"/>
        <import package="org.apache.commons.math3.RealFieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="FieldVector3D" line="10">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="Serializable"/>
            <javadoc line="10">
                This class is a re-implementation of {@link Vector3D} using {@link RealFieldElement}.
                  &lt;p&gt;Instance of this class are guaranteed to be immutable.&lt;/p&gt;                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <version>
                    $Id: FieldVector3D.java 1454903 2013-03-10 19:44:31Z luc $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="19"/>
            <javadoc line="19">
                Serializable version identifier.                
            </javadoc>
            <declaration name="x" type="T" line="23"/>
            <javadoc line="23">
                Abscissa.                
            </javadoc>
            <declaration name="y" type="T" line="27"/>
            <javadoc line="27">
                Ordinate.                
            </javadoc>
            <declaration name="z" type="T" line="31"/>
            <javadoc line="31">
                Height.                
            </javadoc>
            <javadoc line="35">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    x abscissa                    
                </param>
                <param>
                    y ordinate                    
                </param>
                <param>
                    z height                    
                </param>
                <see>
                    #getX()                    
                </see>
                <see>
                    #getY()                    
                </see>
                <see>
                    #getZ()                    
                </see>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="45">
                <params>
                    <param name="x" type="T"/>
                    <param name="y" type="T"/>
                    <param name="z" type="T"/>
                </params>
            </method>
            <javadoc line="50">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    v coordinates array                    
                </param>
                <exception>
                    DimensionMismatchException if array does not have 3 elements                    
                </exception>
                <see>
                    #toArray()                    
                </see>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="57">
                <params>
                    <param name="v" type="T[]"/>
                </params>
                <scope line="58"/>
            </method>
            <javadoc line="65">
                Simple constructor.
                  Build a vector from its azimuthal coordinates                
                <param>
                    alpha azimuth (&alpha;) around Z
                      (0 is +X, &pi;/2 is +Y, &pi; is -X and 3&pi;/2 is -Y)                    
                </param>
                <param>
                    delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2                    
                </param>
                <see>
                    #getAlpha()                    
                </see>
                <see>
                    #getDelta()                    
                </see>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="74">
                <params>
                    <param name="alpha" type="T"/>
                    <param name="delta" type="T"/>
                </params>
                <declaration name="cosDelta" type="T" line="75"/>
            </method>
            <javadoc line="80">
                Multiplicative constructor
                  Build a vector from another one and a scale factor.
                  The vector built will be a  u                
                <param>
                    a scale factor                    
                </param>
                <param>
                    u base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="87">
                <params>
                    <param name="a" type="T"/>
                    <param name="u" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="92">
                Multiplicative constructor
                  Build a vector from another one and a scale factor.
                  The vector built will be a  u                
                <param>
                    a scale factor                    
                </param>
                <param>
                    u base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="99">
                <params>
                    <param name="a" type="T"/>
                    <param name="u" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="104">
                Multiplicative constructor
                  Build a vector from another one and a scale factor.
                  The vector built will be a  u                
                <param>
                    a scale factor                    
                </param>
                <param>
                    u base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="111">
                <params>
                    <param name="a" type="double"/>
                    <param name="u" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="116">
                Linear constructor
                  Build a vector from two other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="125">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="126"/>
            </method>
            <javadoc line="131">
                Linear constructor
                  Build a vector from two other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="140">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="Vector3D"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="Vector3D"/>
                </params>
                <declaration name="prototype" type="T" line="141"/>
            </method>
            <javadoc line="146">
                Linear constructor
                  Build a vector from two other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="155">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="156"/>
            </method>
            <javadoc line="161">
                Linear constructor
                  Build a vector from three other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="172">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                    <param name="a3" type="T"/>
                    <param name="u3" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="173"/>
            </method>
            <javadoc line="178">
                Linear constructor
                  Build a vector from three other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="189">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="Vector3D"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="Vector3D"/>
                    <param name="a3" type="T"/>
                    <param name="u3" type="Vector3D"/>
                </params>
                <declaration name="prototype" type="T" line="190"/>
            </method>
            <javadoc line="195">
                Linear constructor
                  Build a vector from three other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="206">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="207"/>
            </method>
            <javadoc line="212">
                Linear constructor
                  Build a vector from four other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3 + a4  u4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    u4 fourth base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="225">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                    <param name="a3" type="T"/>
                    <param name="u3" type="FieldVector3D<T>"/>
                    <param name="a4" type="T"/>
                    <param name="u4" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="226"/>
            </method>
            <javadoc line="231">
                Linear constructor
                  Build a vector from four other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3 + a4  u4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    u4 fourth base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="244">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="Vector3D"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="Vector3D"/>
                    <param name="a3" type="T"/>
                    <param name="u3" type="Vector3D"/>
                    <param name="a4" type="T"/>
                    <param name="u4" type="Vector3D"/>
                </params>
                <declaration name="prototype" type="T" line="245"/>
            </method>
            <javadoc line="250">
                Linear constructor
                  Build a vector from four other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3 + a4  u4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    u4 fourth base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="263">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="FieldVector3D<T>"/>
                    <param name="a4" type="double"/>
                    <param name="u4" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="264"/>
            </method>
            <javadoc line="269">
                Get the abscissa of the vector.                
                <return>
                    abscissa of the vector                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement,RealFieldElement,RealFieldElement)                    
                </see>
            </javadoc>
            <method name="getX" type="T" line="274"/>
            <javadoc line="277">
                Get the ordinate of the vector.                
                <return>
                    ordinate of the vector                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement,RealFieldElement,RealFieldElement)                    
                </see>
            </javadoc>
            <method name="getY" type="T" line="282"/>
            <javadoc line="285">
                Get the height of the vector.                
                <return>
                    height of the vector                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement,RealFieldElement,RealFieldElement)                    
                </see>
            </javadoc>
            <method name="getZ" type="T" line="290"/>
            <javadoc line="293">
                Get the vector coordinates as a dimension 3 array.                
                <return>
                    vector coordinates                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement[])                    
                </see>
            </javadoc>
            <method name="toArray" type="T[]" line="298">
                <declaration name="array" type="T[]" line="299"/>
            </method>
            <javadoc line="305">
                Convert to a constant vector without derivatives.                
                <return>
                    a constant vector                    
                </return>
            </javadoc>
            <method name="toVector3D" type="Vector3D" line="309"/>
            <javadoc line="312">
                Get the L&lt;sub&gt;1&lt;/sub&gt; norm for the vector.                
                <return>
                    L<sub>1</sub> norm for the vector                    
                </return>
            </javadoc>
            <method name="getNorm1" type="T" line="316"/>
            <javadoc line="319">
                Get the L&lt;sub&gt;2&lt;/sub&gt; norm for the vector.                
                <return>
                    Euclidean norm for the vector                    
                </return>
            </javadoc>
            <method name="getNorm" type="T" line="323"/>
            <javadoc line="326">
                Get the square of the norm for the vector.                
                <return>
                    square of the Euclidean norm for the vector                    
                </return>
            </javadoc>
            <method name="getNormSq" type="T" line="330"/>
            <javadoc line="333">
                Get the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm for the vector.                
                <return>
                    L<sub>&infin;</sub> norm for the vector                    
                </return>
            </javadoc>
            <method name="getNormInf" type="T" line="337">
                <declaration name="xAbs" type="T" line="338"/>
                <declaration name="yAbs" type="T" line="339"/>
                <declaration name="zAbs" type="T" line="340"/>
                <scope line="341">
                    <scope line="342"/>
                    <scope line="345"/>
                </scope>
                <scope line="349">
                    <scope line="350"/>
                    <scope line="353"/>
                </scope>
            </method>
            <javadoc line="358">
                Get the azimuth of the vector.                
                <return>
                    azimuth (&alpha;) of the vector, between -&pi; and +&pi;                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement,RealFieldElement)                    
                </see>
            </javadoc>
            <method name="getAlpha" type="T" line="363"/>
            <javadoc line="366">
                Get the elevation of the vector.                
                <return>
                    elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement,RealFieldElement)                    
                </see>
            </javadoc>
            <method name="getDelta" type="T" line="371"/>
            <javadoc line="374">
                Add a vector to the instance.                
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="379">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="382">
                Add a vector to the instance.                
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="387">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="390">
                Add a scaled vector to the instance.                
                <param>
                    factor scale factor to apply to v before adding it                    
                </param>
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="396">
                <params>
                    <param name="factor" type="T"/>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="399">
                Add a scaled vector to the instance.                
                <param>
                    factor scale factor to apply to v before adding it                    
                </param>
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="405">
                <params>
                    <param name="factor" type="T"/>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="408">
                Add a scaled vector to the instance.                
                <param>
                    factor scale factor to apply to v before adding it                    
                </param>
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="414">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="417">
                Add a scaled vector to the instance.                
                <param>
                    factor scale factor to apply to v before adding it                    
                </param>
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="423">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="426">
                Subtract a vector from the instance.                
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="431">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="434">
                Subtract a vector from the instance.                
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="439">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="442">
                Subtract a scaled vector from the instance.                
                <param>
                    factor scale factor to apply to v before subtracting it                    
                </param>
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="448">
                <params>
                    <param name="factor" type="T"/>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="451">
                Subtract a scaled vector from the instance.                
                <param>
                    factor scale factor to apply to v before subtracting it                    
                </param>
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="457">
                <params>
                    <param name="factor" type="T"/>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="460">
                Subtract a scaled vector from the instance.                
                <param>
                    factor scale factor to apply to v before subtracting it                    
                </param>
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="466">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="469">
                Subtract a scaled vector from the instance.                
                <param>
                    factor scale factor to apply to v before subtracting it                    
                </param>
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="475">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="478">
                Get a normalized vector aligned with the instance.                
                <return>
                    a new normalized vector                    
                </return>
                <exception>
                    MathArithmeticException if the norm is zero                    
                </exception>
            </javadoc>
            <method name="normalize" type="FieldVector3D<T>" line="483">
                <declaration name="s" type="T" line="484"/>
                <scope line="485"/>
            </method>
            <javadoc line="490">
                Get a vector orthogonal to the instance.
                  &lt;p&gt;There are an infinite number of normalized vectors orthogonal
                  to the instance. This method picks up one of them almost
                  arbitrarily. It is useful when one needs to compute a reference
                  frame with one of the axes in a predefined direction. The
                  following example shows how to build a frame having the k axis
                  aligned with the known vector u :
                  &lt;pre&gt;&lt;code&gt;
                  Vector3D k = u.normalize();
                  Vector3D i = k.orthogonal();
                  Vector3D j = Vector3D.crossProduct(k, i);
                  &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;                
                <return>
                    a new normalized vector orthogonal to the instance                    
                </return>
                <exception>
                    MathArithmeticException if the norm of the instance is null                    
                </exception>
            </javadoc>
            <method name="orthogonal" type="FieldVector3D<T>" line="506">
                <declaration name="threshold" type="double" line="507"/>
                <scope line="508"/>
                <scope line="511">
                    <declaration name="inverse" type="T" line="512"/>
                </scope>
                <scope line="515">
                    <declaration name="inverse" type="T" line="516"/>
                </scope>
                <scope line="519">
                    <declaration name="inverse" type="T" line="520"/>
                </scope>
            </method>
            <javadoc line="524">
                Compute the angular separation between two vectors.
                  &lt;p&gt;This method computes the angular separation between two
                  vectors using the dot product for well separated vectors and the
                  cross product for almost aligned vectors. This allows to have a
                  good accuracy in all cases, even for vectors very close to each
                  other.&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    angular separation between v1 and v2                    
                </return>
                <exception>
                    MathArithmeticException if either vector has a null norm                    
                </exception>
            </javadoc>
            <method name="angle" type="T" line="538">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
                <declaration name="normProduct" type="T" line="539"/>
                <scope line="540"/>
                <declaration name="dot" type="T" line="543"/>
                <declaration name="threshold" type="double" line="544"/>
                <scope line="545">
                    <declaration name="v3" type="FieldVector3D&lt;T&gt;" line="546"/>
                    <scope line="547"/>
                </scope>
            </method>
            <javadoc line="554">
                Compute the angular separation between two vectors.
                  &lt;p&gt;This method computes the angular separation between two
                  vectors using the dot product for well separated vectors and the
                  cross product for almost aligned vectors. This allows to have a
                  good accuracy in all cases, even for vectors very close to each
                  other.&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    angular separation between v1 and v2                    
                </return>
                <exception>
                    MathArithmeticException if either vector has a null norm                    
                </exception>
            </javadoc>
            <method name="angle" type="T" line="568">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
                <declaration name="normProduct" type="T" line="569"/>
                <scope line="570"/>
                <declaration name="dot" type="T" line="573"/>
                <declaration name="threshold" type="double" line="574"/>
                <scope line="575">
                    <declaration name="v3" type="FieldVector3D&lt;T&gt;" line="576"/>
                    <scope line="577"/>
                </scope>
            </method>
            <javadoc line="584">
                Compute the angular separation between two vectors.
                  &lt;p&gt;This method computes the angular separation between two
                  vectors using the dot product for well separated vectors and the
                  cross product for almost aligned vectors. This allows to have a
                  good accuracy in all cases, even for vectors very close to each
                  other.&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    angular separation between v1 and v2                    
                </return>
                <exception>
                    MathArithmeticException if either vector has a null norm                    
                </exception>
            </javadoc>
            <method name="angle" type="T" line="598">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="601">
                Get the opposite of the instance.                
                <return>
                    a new vector which is opposite to the instance                    
                </return>
            </javadoc>
            <method name="negate" type="FieldVector3D<T>" line="605"/>
            <javadoc line="608">
                Multiply the instance by a scalar.                
                <param>
                    a scalar                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="scalarMultiply" type="FieldVector3D<T>" line="613">
                <params>
                    <param name="a" type="T"/>
                </params>
            </method>
            <javadoc line="616">
                Multiply the instance by a scalar.                
                <param>
                    a scalar                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="scalarMultiply" type="FieldVector3D<T>" line="621">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="624">
                Returns true if any coordinate of this vector is NaN; false otherwise                
                <return>
                    true if any coordinate of this vector is NaN; false otherwise                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="628"/>
            <javadoc line="631">
                Returns true if any coordinate of this vector is infinite and none are NaN;
                  false otherwise                
                <return>
                    true if any coordinate of this vector is infinite and none are NaN;
                      false otherwise                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="637"/>
            <javadoc line="640">
                Test for the equality of two 3D vectors.
                  &lt;p&gt;
                  If all coordinates of two 3D vectors are exactly the same, and none of their{@link RealFieldElement#getReal() real part} are &lt;code&gt;NaN&lt;/code&gt;, the
                  two 3D vectors are considered to be equal.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;NaN&lt;/code&gt; coordinates are considered to affect globally the vector
                  and be equals to each other - i.e, if either (or all) real part of the
                  coordinates of the 3D vector are &lt;code&gt;NaN&lt;/code&gt;, the 3D vector is &lt;code&gt;NaN&lt;/code&gt;.
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two 3D vector objects are equal, false if
                      object is null, not an instance of Vector3D, or
                      not equal to this Vector3D instance                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="656">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="657"/>
                <scope line="660">
                    <declaration name="rhs" type="FieldVector3D&lt;T&gt;" line="661"/>
                    <scope line="662"/>
                </scope>
            </method>
            <javadoc line="669">
                Get a hashCode for the 3D vector.
                  &lt;p&gt;
                  All NaN values have the same hash code.&lt;/p&gt;                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="675">
                <scope line="676"/>
            </method>
            <javadoc line="681">
                Compute the dot-product of the instance and another vector.
                  &lt;p&gt;
                  The implementation uses specific multiplication and addition
                  algorithms to preserve accuracy and reduce cancellation effects.
                  It should be very accurate even for nearly orthogonal vectors.
                  &lt;/p&gt;                
                <see>
                    MathArrays#linearCombination(double,double,double,double,double,double)                    
                </see>
                <param>
                    v second vector                    
                </param>
                <return>
                    the dot product this.v                    
                </return>
            </javadoc>
            <method name="dotProduct" type="T" line="692">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="695">
                Compute the dot-product of the instance and another vector.
                  &lt;p&gt;
                  The implementation uses specific multiplication and addition
                  algorithms to preserve accuracy and reduce cancellation effects.
                  It should be very accurate even for nearly orthogonal vectors.
                  &lt;/p&gt;                
                <see>
                    MathArrays#linearCombination(double,double,double,double,double,double)                    
                </see>
                <param>
                    v second vector                    
                </param>
                <return>
                    the dot product this.v                    
                </return>
            </javadoc>
            <method name="dotProduct" type="T" line="706">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="709">
                Compute the cross-product of the instance with another vector.                
                <param>
                    v other vector                    
                </param>
                <return>
                    the cross product this ^ v as a new Vector3D                    
                </return>
            </javadoc>
            <method name="crossProduct" type="FieldVector3D<T>" line="714">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="717">
                Compute the cross-product of the instance with another vector.                
                <param>
                    v other vector                    
                </param>
                <return>
                    the cross product this ^ v as a new Vector3D                    
                </return>
            </javadoc>
            <method name="crossProduct" type="FieldVector3D<T>" line="722">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="725">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L<sub>1</sub> norm                    
                </return>
            </javadoc>
            <method name="distance1" type="T" line="733">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
                <declaration name="dx" type="T" line="734"/>
                <declaration name="dy" type="T" line="735"/>
                <declaration name="dz" type="T" line="736"/>
            </method>
            <javadoc line="739">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L<sub>1</sub> norm                    
                </return>
            </javadoc>
            <method name="distance1" type="T" line="747">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
                <declaration name="dx" type="T" line="748"/>
                <declaration name="dy" type="T" line="749"/>
                <declaration name="dz" type="T" line="750"/>
            </method>
            <javadoc line="753">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L<sub>2</sub> norm                    
                </return>
            </javadoc>
            <method name="distance" type="T" line="761">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
                <declaration name="dx" type="T" line="762"/>
                <declaration name="dy" type="T" line="763"/>
                <declaration name="dz" type="T" line="764"/>
            </method>
            <javadoc line="767">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L<sub>2</sub> norm                    
                </return>
            </javadoc>
            <method name="distance" type="T" line="775">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
                <declaration name="dx" type="T" line="776"/>
                <declaration name="dy" type="T" line="777"/>
                <declaration name="dz" type="T" line="778"/>
            </method>
            <javadoc line="781">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L<sub>&infin;</sub> norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="T" line="789">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
                <declaration name="dx" type="T" line="790"/>
                <declaration name="dy" type="T" line="791"/>
                <declaration name="dz" type="T" line="792"/>
                <scope line="793">
                    <scope line="794"/>
                    <scope line="797"/>
                </scope>
                <scope line="801">
                    <scope line="802"/>
                    <scope line="805"/>
                </scope>
            </method>
            <javadoc line="810">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L<sub>&infin;</sub> norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="T" line="818">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
                <declaration name="dx" type="T" line="819"/>
                <declaration name="dy" type="T" line="820"/>
                <declaration name="dz" type="T" line="821"/>
                <scope line="822">
                    <scope line="823"/>
                    <scope line="826"/>
                </scope>
                <scope line="830">
                    <scope line="831"/>
                    <scope line="834"/>
                </scope>
            </method>
            <javadoc line="839">
                Compute the square of the distance between the instance and another vector.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the square of the distance between the instance and p                    
                </return>
            </javadoc>
            <method name="distanceSq" type="T" line="847">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
                <declaration name="dx" type="T" line="848"/>
                <declaration name="dy" type="T" line="849"/>
                <declaration name="dz" type="T" line="850"/>
            </method>
            <javadoc line="853">
                Compute the square of the distance between the instance and another vector.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the square of the distance between the instance and p                    
                </return>
            </javadoc>
            <method name="distanceSq" type="T" line="861">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
                <declaration name="dx" type="T" line="862"/>
                <declaration name="dy" type="T" line="863"/>
                <declaration name="dz" type="T" line="864"/>
            </method>
            <javadoc line="867">
                Compute the dot-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the dot product v1.v2                    
                </return>
            </javadoc>
            <method name="dotProduct" type="T" line="875">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="878">
                Compute the dot-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the dot product v1.v2                    
                </return>
            </javadoc>
            <method name="dotProduct" type="T" line="886">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="889">
                Compute the dot-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the dot product v1.v2                    
                </return>
            </javadoc>
            <method name="dotProduct" type="T" line="897">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="900">
                Compute the cross-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the cross product v1 ^ v2 as a new Vector                    
                </return>
            </javadoc>
            <method name="crossProduct" type="FieldVector3D<T>" line="908">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="911">
                Compute the cross-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the cross product v1 ^ v2 as a new Vector                    
                </return>
            </javadoc>
            <method name="crossProduct" type="FieldVector3D<T>" line="919">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="922">
                Compute the cross-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the cross product v1 ^ v2 as a new Vector                    
                </return>
            </javadoc>
            <method name="crossProduct" type="FieldVector3D<T>" line="930">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="933">
                Compute the distance between two vectors according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L<sub>1</sub> norm                    
                </return>
            </javadoc>
            <method name="distance1" type="T" line="944">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="947">
                Compute the distance between two vectors according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L<sub>1</sub> norm                    
                </return>
            </javadoc>
            <method name="distance1" type="T" line="958">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="961">
                Compute the distance between two vectors according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L<sub>1</sub> norm                    
                </return>
            </javadoc>
            <method name="distance1" type="T" line="972">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="975">
                Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L<sub>2</sub> norm                    
                </return>
            </javadoc>
            <method name="distance" type="T" line="986">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="989">
                Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L<sub>2</sub> norm                    
                </return>
            </javadoc>
            <method name="distance" type="T" line="1000">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="1003">
                Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L<sub>2</sub> norm                    
                </return>
            </javadoc>
            <method name="distance" type="T" line="1014">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1017">
                Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L<sub>&infin;</sub> norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="T" line="1028">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1031">
                Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L<sub>&infin;</sub> norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="T" line="1042">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="1045">
                Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L<sub>&infin;</sub> norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="T" line="1056">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1059">
                Compute the square of the distance between two vectors.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the square of the distance between v1 and v2                    
                </return>
            </javadoc>
            <method name="distanceSq" type="T" line="1070">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1073">
                Compute the square of the distance between two vectors.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the square of the distance between v1 and v2                    
                </return>
            </javadoc>
            <method name="distanceSq" type="T" line="1084">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="1087">
                Compute the square of the distance between two vectors.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <return>
                    the square of the distance between v1 and v2                    
                </return>
            </javadoc>
            <method name="distanceSq" type="T" line="1098">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1101">
                Get a string representation of this vector.                
                <return>
                    a string representation of this vector                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1105"/>
            <javadoc line="1108">
                Get a string representation of this vector.                
                <param>
                    format the custom format for components                    
                </param>
                <return>
                    a string representation of this vector                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1113">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
        </class>
    </source>