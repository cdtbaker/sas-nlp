<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.io.Serializable"/>
        <import package="java.text.NumberFormat"/>
        <import package="org.apache.commons.math3.RealFieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="FieldVector3D" line="30">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="Serializable"/>
            <javadoc line="30">
                This class is a re-implementation of {@link Vector3D} using {@link RealFieldElement}.
                  &lt;p&gt;Instance of this class are guaranteed to be immutable.&lt;/p&gt;                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <version>
                    $Id: FieldVector3D.java 1454903 2013-03-10 19:44:31Z luc $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <javadoc line="39">
                Serializable version identifier.                
            </javadoc>
            <declaration name="x" type="T" line="42"/>
            <javadoc line="42">
                Abscissa.                
            </javadoc>
            <declaration name="y" type="T" line="45"/>
            <javadoc line="45">
                Ordinate.                
            </javadoc>
            <declaration name="z" type="T" line="48"/>
            <javadoc line="48">
                Height.                
            </javadoc>
            <javadoc line="51">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    x abscissa                    
                </param>
                <param>
                    y ordinate                    
                </param>
                <param>
                    z height                    
                </param>
                <see>
                    #getX()                    
                </see>
                <see>
                    #getY()                    
                </see>
                <see>
                    #getZ()                    
                </see>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="60">
                <params>
                    <param name="x" type="T"/>
                    <param name="y" type="T"/>
                    <param name="z" type="T"/>
                </params>
            </method>
            <javadoc line="66">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    v coordinates array                    
                </param>
                <exception>
                    DimensionMismatchException if array does not have 3 elements                    
                </exception>
                <see>
                    #toArray()                    
                </see>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="72">
                <params>
                    <param name="v" type="T[]"/>
                </params>
                <scope line="73"/>
            </method>
            <javadoc line="81">
                Simple constructor.
                  Build a vector from its azimuthal coordinates                
                <param>
                    alpha azimuth (&amp;alpha;) around Z
                      (0 is +X, &amp;pi;/2 is +Y, &amp;pi; is -X and 3&amp;pi;/2 is -Y)                    
                </param>
                <param>
                    delta elevation (&amp;delta;) above (XY) plane, from -&amp;pi;/2 to +&amp;pi;/2                    
                </param>
                <see>
                    #getAlpha()                    
                </see>
                <see>
                    #getDelta()                    
                </see>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="89">
                <params>
                    <param name="alpha" type="T"/>
                    <param name="delta" type="T"/>
                </params>
                <declaration name="cosDelta" type="T" line="90"/>
            </method>
            <javadoc line="96">
                Multiplicative constructor
                  Build a vector from another one and a scale factor.
                  The vector built will be a  u                
                <param>
                    a scale factor                    
                </param>
                <param>
                    u base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="102">
                <params>
                    <param name="a" type="T"/>
                    <param name="u" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="108">
                Multiplicative constructor
                  Build a vector from another one and a scale factor.
                  The vector built will be a  u                
                <param>
                    a scale factor                    
                </param>
                <param>
                    u base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="114">
                <params>
                    <param name="a" type="T"/>
                    <param name="u" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="120">
                Multiplicative constructor
                  Build a vector from another one and a scale factor.
                  The vector built will be a  u                
                <param>
                    a scale factor                    
                </param>
                <param>
                    u base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="126">
                <params>
                    <param name="a" type="double"/>
                    <param name="u" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="132">
                Linear constructor
                  Build a vector from two other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="141">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="142"/>
            </method>
            <javadoc line="148">
                Linear constructor
                  Build a vector from two other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="157">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="Vector3D"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="Vector3D"/>
                </params>
                <declaration name="prototype" type="T" line="158"/>
            </method>
            <javadoc line="164">
                Linear constructor
                  Build a vector from two other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="173">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="174"/>
            </method>
            <javadoc line="180">
                Linear constructor
                  Build a vector from three other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="192">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                    <param name="a3" type="T"/>
                    <param name="u3" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="193"/>
            </method>
            <javadoc line="199">
                Linear constructor
                  Build a vector from three other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="211">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="Vector3D"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="Vector3D"/>
                    <param name="a3" type="T"/>
                    <param name="u3" type="Vector3D"/>
                </params>
                <declaration name="prototype" type="T" line="212"/>
            </method>
            <javadoc line="218">
                Linear constructor
                  Build a vector from three other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="230">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="231"/>
            </method>
            <javadoc line="237">
                Linear constructor
                  Build a vector from four other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3 + a4  u4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    u4 fourth base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="252">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                    <param name="a3" type="T"/>
                    <param name="u3" type="FieldVector3D<T>"/>
                    <param name="a4" type="T"/>
                    <param name="u4" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="253"/>
            </method>
            <javadoc line="259">
                Linear constructor
                  Build a vector from four other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3 + a4  u4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    u4 fourth base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="274">
                <params>
                    <param name="a1" type="T"/>
                    <param name="u1" type="Vector3D"/>
                    <param name="a2" type="T"/>
                    <param name="u2" type="Vector3D"/>
                    <param name="a3" type="T"/>
                    <param name="u3" type="Vector3D"/>
                    <param name="a4" type="T"/>
                    <param name="u4" type="Vector3D"/>
                </params>
                <declaration name="prototype" type="T" line="275"/>
            </method>
            <javadoc line="281">
                Linear constructor
                  Build a vector from four other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3 + a4  u4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    u4 fourth base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="FieldVector3D" type="constructor" line="296">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="FieldVector3D<T>"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="FieldVector3D<T>"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="FieldVector3D<T>"/>
                    <param name="a4" type="double"/>
                    <param name="u4" type="FieldVector3D<T>"/>
                </params>
                <declaration name="prototype" type="T" line="297"/>
            </method>
            <javadoc line="303">
                Get the abscissa of the vector.                
                <return>
                    abscissa of the vector                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement,RealFieldElement,RealFieldElement)                    
                </see>
            </javadoc>
            <method name="getX" type="T" line="307"/>
            <javadoc line="311">
                Get the ordinate of the vector.                
                <return>
                    ordinate of the vector                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement,RealFieldElement,RealFieldElement)                    
                </see>
            </javadoc>
            <method name="getY" type="T" line="315"/>
            <javadoc line="319">
                Get the height of the vector.                
                <return>
                    height of the vector                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement,RealFieldElement,RealFieldElement)                    
                </see>
            </javadoc>
            <method name="getZ" type="T" line="323"/>
            <javadoc line="327">
                Get the vector coordinates as a dimension 3 array.                
                <return>
                    vector coordinates                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement[])                    
                </see>
            </javadoc>
            <method name="toArray" type="T[]" line="331">
                <declaration name="array" type="T[]" line="332"/>
            </method>
            <javadoc line="339">
                Convert to a constant vector without derivatives.                
                <return>
                    a constant vector                    
                </return>
            </javadoc>
            <method name="toVector3D" type="Vector3D" line="342"/>
            <javadoc line="346">
                Get the L&lt;sub&gt;1&lt;/sub&gt; norm for the vector.                
                <return>
                    L&lt;sub&gt;1&lt;/sub&gt; norm for the vector                    
                </return>
            </javadoc>
            <method name="getNorm1" type="T" line="349"/>
            <javadoc line="353">
                Get the L&lt;sub&gt;2&lt;/sub&gt; norm for the vector.                
                <return>
                    Euclidean norm for the vector                    
                </return>
            </javadoc>
            <method name="getNorm" type="T" line="356">
                <comment line="358">
                    there are no cancellation problems here, so we use the straightforward formula                    
                </comment>
            </method>
            <javadoc line="361">
                Get the square of the norm for the vector.                
                <return>
                    square of the Euclidean norm for the vector                    
                </return>
            </javadoc>
            <method name="getNormSq" type="T" line="364">
                <comment line="366">
                    there are no cancellation problems here, so we use the straightforward formula                    
                </comment>
            </method>
            <javadoc line="369">
                Get the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm for the vector.                
                <return>
                    L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm for the vector                    
                </return>
            </javadoc>
            <method name="getNormInf" type="T" line="372">
                <declaration name="xAbs" type="T" line="373"/>
                <declaration name="yAbs" type="T" line="374"/>
                <declaration name="zAbs" type="T" line="375"/>
                <scope line="376">
                    <scope line="377"/>
                    <scope line="379"/>
                </scope>
                <scope line="382">
                    <scope line="383"/>
                    <scope line="385"/>
                </scope>
            </method>
            <javadoc line="391">
                Get the azimuth of the vector.                
                <return>
                    azimuth (&amp;alpha;) of the vector, between -&amp;pi; and +&amp;pi;                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement,RealFieldElement)                    
                </see>
            </javadoc>
            <method name="getAlpha" type="T" line="395"/>
            <javadoc line="399">
                Get the elevation of the vector.                
                <return>
                    elevation (&amp;delta;) of the vector, between -&amp;pi;/2 and +&amp;pi;/2                    
                </return>
                <see>
                    #FieldVector3D(RealFieldElement,RealFieldElement)                    
                </see>
            </javadoc>
            <method name="getDelta" type="T" line="403"/>
            <javadoc line="407">
                Add a vector to the instance.                
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="411">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="415">
                Add a vector to the instance.                
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="419">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="423">
                Add a scaled vector to the instance.                
                <param>
                    factor scale factor to apply to v before adding it                    
                </param>
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="428">
                <params>
                    <param name="factor" type="T"/>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="432">
                Add a scaled vector to the instance.                
                <param>
                    factor scale factor to apply to v before adding it                    
                </param>
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="437">
                <params>
                    <param name="factor" type="T"/>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="443">
                Add a scaled vector to the instance.                
                <param>
                    factor scale factor to apply to v before adding it                    
                </param>
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="448">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="452">
                Add a scaled vector to the instance.                
                <param>
                    factor scale factor to apply to v before adding it                    
                </param>
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector3D<T>" line="457">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="463">
                Subtract a vector from the instance.                
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="467">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="471">
                Subtract a vector from the instance.                
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="475">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="479">
                Subtract a scaled vector from the instance.                
                <param>
                    factor scale factor to apply to v before subtracting it                    
                </param>
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="484">
                <params>
                    <param name="factor" type="T"/>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="488">
                Subtract a scaled vector from the instance.                
                <param>
                    factor scale factor to apply to v before subtracting it                    
                </param>
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="493">
                <params>
                    <param name="factor" type="T"/>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="499">
                Subtract a scaled vector from the instance.                
                <param>
                    factor scale factor to apply to v before subtracting it                    
                </param>
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="504">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="508">
                Subtract a scaled vector from the instance.                
                <param>
                    factor scale factor to apply to v before subtracting it                    
                </param>
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="FieldVector3D<T>" line="513">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="519">
                Get a normalized vector aligned with the instance.                
                <return>
                    a new normalized vector                    
                </return>
                <exception>
                    MathArithmeticException if the norm is zero                    
                </exception>
            </javadoc>
            <method name="normalize" type="FieldVector3D<T>" line="523">
                <declaration name="s" type="T" line="524"/>
                <scope line="525"/>
            </method>
            <javadoc line="531">
                Get a vector orthogonal to the instance.
                  &lt;p&gt;There are an infinite number of normalized vectors orthogonal
                  to the instance. This method picks up one of them almost
                  arbitrarily. It is useful when one needs to compute a reference
                  frame with one of the axes in a predefined direction. The
                  following example shows how to build a frame having the k axis
                  aligned with the known vector u :
                  &lt;pre&gt;&lt;code&gt;
                  Vector3D k = u.normalize();
                  Vector3D i = k.orthogonal();
                  Vector3D j = Vector3D.crossProduct(k, i);
                  &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;                
                <return>
                    a new normalized vector orthogonal to the instance                    
                </return>
                <exception>
                    MathArithmeticException if the norm of the instance is null                    
                </exception>
            </javadoc>
            <method name="orthogonal" type="FieldVector3D<T>" line="546">
                <declaration name="threshold" type="double" line="548"/>
                <scope line="549"/>
                <scope line="553">
                    <declaration name="inverse" type="T" line="554"/>
                </scope>
                <scope line="556">
                    <declaration name="inverse" type="T" line="557"/>
                </scope>
                <scope line="559">
                    <declaration name="inverse" type="T" line="560"/>
                </scope>
            </method>
            <javadoc line="566">
                Compute the angular separation between two vectors.
                  &lt;p&gt;This method computes the angular separation between two
                  vectors using the dot product for well separated vectors and the
                  cross product for almost aligned vectors. This allows to have a
                  good accuracy in all cases, even for vectors very close to each
                  other.&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    angular separation between v1 and v2                    
                </return>
                <exception>
                    MathArithmeticException if either vector has a null norm                    
                </exception>
            </javadoc>
            <method name="angle" type="T" line="579">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
                <comment line="590">
                    the vectors are almost aligned, compute using the sine                    
                </comment>
                <comment line="598">
                    the vectors are sufficiently separated to use the cosine                    
                </comment>
                <declaration name="normProduct" type="T" line="581"/>
                <scope line="582"/>
                <declaration name="dot" type="T" line="586"/>
                <declaration name="threshold" type="double" line="587"/>
                <scope line="588">
                    <declaration name="v3" type="FieldVector3D&lt;T&gt;" line="590"/>
                    <scope line="591"/>
                </scope>
            </method>
            <javadoc line="602">
                Compute the angular separation between two vectors.
                  &lt;p&gt;This method computes the angular separation between two
                  vectors using the dot product for well separated vectors and the
                  cross product for almost aligned vectors. This allows to have a
                  good accuracy in all cases, even for vectors very close to each
                  other.&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    angular separation between v1 and v2                    
                </return>
                <exception>
                    MathArithmeticException if either vector has a null norm                    
                </exception>
            </javadoc>
            <method name="angle" type="T" line="615">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
                <comment line="626">
                    the vectors are almost aligned, compute using the sine                    
                </comment>
                <comment line="634">
                    the vectors are sufficiently separated to use the cosine                    
                </comment>
                <declaration name="normProduct" type="T" line="617"/>
                <scope line="618"/>
                <declaration name="dot" type="T" line="622"/>
                <declaration name="threshold" type="double" line="623"/>
                <scope line="624">
                    <declaration name="v3" type="FieldVector3D&lt;T&gt;" line="626"/>
                    <scope line="627"/>
                </scope>
            </method>
            <javadoc line="638">
                Compute the angular separation between two vectors.
                  &lt;p&gt;This method computes the angular separation between two
                  vectors using the dot product for well separated vectors and the
                  cross product for almost aligned vectors. This allows to have a
                  good accuracy in all cases, even for vectors very close to each
                  other.&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    angular separation between v1 and v2                    
                </return>
                <exception>
                    MathArithmeticException if either vector has a null norm                    
                </exception>
            </javadoc>
            <method name="angle" type="T" line="651">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="655">
                Get the opposite of the instance.                
                <return>
                    a new vector which is opposite to the instance                    
                </return>
            </javadoc>
            <method name="negate" type="FieldVector3D<T>" line="658"/>
            <javadoc line="662">
                Multiply the instance by a scalar.                
                <param>
                    a scalar                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="scalarMultiply" type="FieldVector3D<T>" line="666">
                <params>
                    <param name="a" type="T"/>
                </params>
            </method>
            <javadoc line="670">
                Multiply the instance by a scalar.                
                <param>
                    a scalar                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="scalarMultiply" type="FieldVector3D<T>" line="674">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="678">
                Returns true if any coordinate of this vector is NaN; false otherwise                
                <return>
                    true if any coordinate of this vector is NaN; false otherwise                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="682"/>
            <javadoc line="686">
                Returns true if any coordinate of this vector is infinite and none are NaN;
                  false otherwise                
                <return>
                    true if any coordinate of this vector is infinite and none are NaN;
                      false otherwise                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="692"/>
            <javadoc line="696">
                Test for the equality of two 3D vectors.
                  &lt;p&gt;
                  If all coordinates of two 3D vectors are exactly the same, and none of their{@link RealFieldElement#getReal() real part} are &lt;code&gt;NaN&lt;/code&gt;, the
                  two 3D vectors are considered to be equal.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;NaN&lt;/code&gt; coordinates are considered to affect globally the vector
                  and be equals to each other - i.e, if either (or all) real part of the
                  coordinates of the 3D vector are &lt;code&gt;NaN&lt;/code&gt;, the 3D vector is &lt;code&gt;NaN&lt;/code&gt;.
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two 3D vector objects are equal, false if
                      object is null, not an instance of Vector3D, or
                      not equal to this Vector3D instance                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="716">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="718"/>
                <scope line="722">
                    <declaration name="rhs" type="FieldVector3D&lt;T&gt;" line="723"/>
                    <scope line="725"/>
                </scope>
            </method>
            <javadoc line="735">
                Get a hashCode for the 3D vector.
                  &lt;p&gt;
                  All NaN values have the same hash code.&lt;/p&gt;                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="743">
                <scope line="744"/>
            </method>
            <javadoc line="750">
                Compute the dot-product of the instance and another vector.
                  &lt;p&gt;
                  The implementation uses specific multiplication and addition
                  algorithms to preserve accuracy and reduce cancellation effects.
                  It should be very accurate even for nearly orthogonal vectors.
                  &lt;/p&gt;                
                <see>
                    MathArrays#linearCombination(double,double,double,double,double,double)                    
                </see>
                <param>
                    v second vector                    
                </param>
                <return>
                    the dot product this.v                    
                </return>
            </javadoc>
            <method name="dotProduct" type="T" line="760">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="764">
                Compute the dot-product of the instance and another vector.
                  &lt;p&gt;
                  The implementation uses specific multiplication and addition
                  algorithms to preserve accuracy and reduce cancellation effects.
                  It should be very accurate even for nearly orthogonal vectors.
                  &lt;/p&gt;                
                <see>
                    MathArrays#linearCombination(double,double,double,double,double,double)                    
                </see>
                <param>
                    v second vector                    
                </param>
                <return>
                    the dot product this.v                    
                </return>
            </javadoc>
            <method name="dotProduct" type="T" line="774">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="778">
                Compute the cross-product of the instance with another vector.                
                <param>
                    v other vector                    
                </param>
                <return>
                    the cross product this ^ v as a new Vector3D                    
                </return>
            </javadoc>
            <method name="crossProduct" type="FieldVector3D<T>" line="782">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="788">
                Compute the cross-product of the instance with another vector.                
                <param>
                    v other vector                    
                </param>
                <return>
                    the cross product this ^ v as a new Vector3D                    
                </return>
            </javadoc>
            <method name="crossProduct" type="FieldVector3D<T>" line="792">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="798">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L&lt;sub&gt;1&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance1" type="T" line="805">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
                <declaration name="dx" type="T" line="806"/>
                <declaration name="dy" type="T" line="807"/>
                <declaration name="dz" type="T" line="808"/>
            </method>
            <javadoc line="812">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L&lt;sub&gt;1&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance1" type="T" line="819">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
                <declaration name="dx" type="T" line="820"/>
                <declaration name="dy" type="T" line="821"/>
                <declaration name="dz" type="T" line="822"/>
            </method>
            <javadoc line="826">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L&lt;sub&gt;2&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance" type="T" line="833">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
                <declaration name="dx" type="T" line="834"/>
                <declaration name="dy" type="T" line="835"/>
                <declaration name="dz" type="T" line="836"/>
            </method>
            <javadoc line="840">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L&lt;sub&gt;2&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance" type="T" line="847">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
                <declaration name="dx" type="T" line="848"/>
                <declaration name="dy" type="T" line="849"/>
                <declaration name="dz" type="T" line="850"/>
            </method>
            <javadoc line="854">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="T" line="861">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
                <declaration name="dx" type="T" line="862"/>
                <declaration name="dy" type="T" line="863"/>
                <declaration name="dz" type="T" line="864"/>
                <scope line="865">
                    <scope line="866"/>
                    <scope line="868"/>
                </scope>
                <scope line="871">
                    <scope line="872"/>
                    <scope line="874"/>
                </scope>
            </method>
            <javadoc line="880">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="T" line="887">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
                <declaration name="dx" type="T" line="888"/>
                <declaration name="dy" type="T" line="889"/>
                <declaration name="dz" type="T" line="890"/>
                <scope line="891">
                    <scope line="892"/>
                    <scope line="894"/>
                </scope>
                <scope line="897">
                    <scope line="898"/>
                    <scope line="900"/>
                </scope>
            </method>
            <javadoc line="906">
                Compute the square of the distance between the instance and another vector.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the square of the distance between the instance and p                    
                </return>
            </javadoc>
            <method name="distanceSq" type="T" line="913">
                <params>
                    <param name="v" type="FieldVector3D<T>"/>
                </params>
                <declaration name="dx" type="T" line="914"/>
                <declaration name="dy" type="T" line="915"/>
                <declaration name="dz" type="T" line="916"/>
            </method>
            <javadoc line="920">
                Compute the square of the distance between the instance and another vector.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the square of the distance between the instance and p                    
                </return>
            </javadoc>
            <method name="distanceSq" type="T" line="927">
                <params>
                    <param name="v" type="Vector3D"/>
                </params>
                <declaration name="dx" type="T" line="928"/>
                <declaration name="dy" type="T" line="929"/>
                <declaration name="dz" type="T" line="930"/>
            </method>
            <javadoc line="934">
                Compute the dot-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the dot product v1.v2                    
                </return>
            </javadoc>
            <method name="dotProduct" type="T" line="941">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="945">
                Compute the dot-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the dot product v1.v2                    
                </return>
            </javadoc>
            <method name="dotProduct" type="T" line="952">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="956">
                Compute the dot-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the dot product v1.v2                    
                </return>
            </javadoc>
            <method name="dotProduct" type="T" line="963">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="967">
                Compute the cross-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the cross product v1 ^ v2 as a new Vector                    
                </return>
            </javadoc>
            <method name="crossProduct" type="FieldVector3D<T>" line="974">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="978">
                Compute the cross-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the cross product v1 ^ v2 as a new Vector                    
                </return>
            </javadoc>
            <method name="crossProduct" type="FieldVector3D<T>" line="985">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="989">
                Compute the cross-product of two vectors.                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the cross product v1 ^ v2 as a new Vector                    
                </return>
            </javadoc>
            <method name="crossProduct" type="FieldVector3D<T>" line="996">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1002">
                Compute the distance between two vectors according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;1&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance1" type="T" line="1012">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1016">
                Compute the distance between two vectors according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;1&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance1" type="T" line="1026">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="1030">
                Compute the distance between two vectors according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;1&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance1" type="T" line="1040">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1044">
                Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;2&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance" type="T" line="1054">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1058">
                Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;2&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance" type="T" line="1068">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="1072">
                Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;2&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance" type="T" line="1082">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1086">
                Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="T" line="1096">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1100">
                Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="T" line="1110">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="1114">
                Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the distance between v1 and v2 according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="T" line="1124">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1128">
                Compute the square of the distance between two vectors.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the square of the distance between v1 and v2                    
                </return>
            </javadoc>
            <method name="distanceSq" type="T" line="1138">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1142">
                Compute the square of the distance between two vectors.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the square of the distance between v1 and v2                    
                </return>
            </javadoc>
            <method name="distanceSq" type="T" line="1152">
                <params>
                    <param name="v1" type="FieldVector3D<T>"/>
                    <param name="v2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="1156">
                Compute the square of the distance between two vectors.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;v1.subtract(v2).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <return>
                    the square of the distance between v1 and v2                    
                </return>
            </javadoc>
            <method name="distanceSq" type="T" line="1166">
                <params>
                    <param name="v1" type="Vector3D"/>
                    <param name="v2" type="FieldVector3D<T>"/>
                </params>
            </method>
            <javadoc line="1170">
                Get a string representation of this vector.                
                <return>
                    a string representation of this vector                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1174"/>
            <javadoc line="1178">
                Get a string representation of this vector.                
                <param>
                    format the custom format for components                    
                </param>
                <return>
                    a string representation of this vector                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1182">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
        </class>
    </source>