<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.StringTokenizer"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.MathParseException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="SobolSequenceGenerator" line="35">
            <implements interface="RandomVectorGenerator"/>
            <javadoc line="35">
                Implementation of a Sobol sequence.
                  &lt;p&gt;
                  A Sobol sequence is a low-discrepancy sequence with the property that for all values of N,
                  its subsequence (x1, ... xN) has a low discrepancy. It can be used to generate pseudo-random
                  points in a space S, which are equi-distributed.
                  &lt;p&gt;
                  The implementation already comes with support for up to 1000 dimensions with direction numbers
                  calculated from &lt;a href=&quot;http://web.maths.unsw.edu.au/~fkuo/sobol/&quot;&gt;Stephen Joe and Frances Kuo&lt;/a&gt;.
                  &lt;p&gt;
                  The generator supports two modes:
                  &lt;ul&gt;
                  &lt;li&gt;sequential generation of points: {@link #nextVector()}&lt;/li&gt;
                  &lt;li&gt;random access to the i-th point in the sequence: {@link #skipTo(int)}&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Sobol_sequence&quot;&gt;Sobol sequence (Wikipedia)&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://web.maths.unsw.edu.au/~fkuo/sobol/&quot;&gt;Sobol sequence direction numbers&lt;/a&gt;                    
                </see>
                <version>
                    $Id: SobolSequenceGenerator.java 1538368 2013-11-03 13:57:37Z erans $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="BITS" type="int" line="59"/>
            <javadoc line="59">
                The number of bits to use.                
            </javadoc>
            <declaration name="SCALE" type="double" line="62"/>
            <javadoc line="62">
                The scaling factor.                
            </javadoc>
            <declaration name="MAX_DIMENSION" type="int" line="65"/>
            <javadoc line="65">
                The maximum supported space dimension.                
            </javadoc>
            <declaration name="RESOURCE_NAME" type="String" line="68"/>
            <javadoc line="68">
                The resource containing the direction numbers.                
            </javadoc>
            <declaration name="FILE_CHARSET" type="String" line="71"/>
            <javadoc line="71">
                Character set for file input.                
            </javadoc>
            <declaration name="dimension" type="int" line="74"/>
            <javadoc line="74">
                Space dimension.                
            </javadoc>
            <declaration name="count" type="int" line="77"/>
            <javadoc line="77">
                The current index in the sequence.                
            </javadoc>
            <declaration name="direction" type="long[][]" line="80"/>
            <javadoc line="80">
                The direction vector for each component.                
            </javadoc>
            <declaration name="x" type="long[]" line="83"/>
            <javadoc line="83">
                The current state.                
            </javadoc>
            <javadoc line="86">
                Construct a new Sobol sequence generator for the given space dimension.                
                <param>
                    dimension the space dimension                    
                </param>
                <throws>
                    OutOfRangeException if the space dimension is outside the allowed range of [1, 1000]                    
                </throws>
            </javadoc>
            <method name="SobolSequenceGenerator" type="constructor" line="92">
                <params>
                    <param name="dimension" type="int"/>
                </params>
                <comment line="98">
                    initialize the other dimensions with direction numbers from a resource                    
                </comment>
                <comment line="106">
                    init data structures                    
                </comment>
                <comment line="113">
                    the internal resource file could not be read -&gt; should not happen                    
                </comment>
                <comment line="116">
                    the internal resource file could not be parsed -&gt; should not happen                    
                </comment>
                <comment line="121">
                    NOPMD                    
                </comment>
                <comment line="122">
                    ignore                    
                </comment>
                <scope line="93"/>
                <declaration name="is" type="InputStream" line="98"/>
                <scope line="99"/>
                <scope line="109"/>
                <scope line="111"/>
                <scope line="114"/>
                <scope line="117">
                    <scope line="118"/>
                    <scope line="120"/>
                </scope>
            </method>
            <javadoc line="126">
                Construct a new Sobol sequence generator for the given space dimension with
                  direction vectors loaded from the given stream.
                  &lt;p&gt;
                  The expected format is identical to the files available from
                  &lt;a href=&quot;http://web.maths.unsw.edu.au/~fkuo/sobol/&quot;&gt;Stephen Joe and Frances Kuo&lt;/a&gt;.
                  The first line will be ignored as it is assumed to contain only the column headers.
                  The columns are:
                  &lt;ul&gt;
                  &lt;li&gt;d: the dimension&lt;/li&gt;
                  &lt;li&gt;s: the degree of the primitive polynomial&lt;/li&gt;
                  &lt;li&gt;a: the number representing the coefficients&lt;/li&gt;
                  &lt;li&gt;m: the list of initial direction numbers&lt;/li&gt;
                  &lt;/ul&gt;
                  Example:
                  &lt;pre&gt;
                  d       s       a       m_i
                  2       1       0       1
                  3       2       1       1 3
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The input stream &lt;i&gt;must&lt;/i&gt; be an ASCII text containing one valid direction vector per line.                
                <param>
                    dimension the space dimension                    
                </param>
                <param>
                    is the stream to read the direction vectors from                    
                </param>
                <throws>
                    NotStrictlyPositiveException if the space dimension is &amp;lt; 1                    
                </throws>
                <throws>
                    OutOfRangeException if the space dimension is outside the range [1, max], where
                      max refers to the maximum dimension found in the input stream                    
                </throws>
                <throws>
                    MathParseException if the content in the stream could not be parsed successfully                    
                </throws>
                <throws>
                    IOException if an error occurs while reading from the input stream                    
                </throws>
            </javadoc>
            <method name="SobolSequenceGenerator" type="constructor" line="158">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="167">
                    init data structures                    
                </comment>
                <comment line="171">
                    initialize the other dimensions with direction numbers from the stream                    
                </comment>
                <scope line="160"/>
                <declaration name="lastDimension" type="int" line="171"/>
                <scope line="172"/>
            </method>
            <javadoc line="177">
                Load the direction vector for each dimension from the given stream.
                  &lt;p&gt;
                  The input stream &lt;i&gt;must&lt;/i&gt; be an ASCII text containing one
                  valid direction vector per line.                
                <param>
                    is the input stream to read the direction vector from                    
                </param>
                <return>
                    the last dimension that has been read from the input stream                    
                </return>
                <throws>
                    IOException if the stream could not be read                    
                </throws>
                <throws>
                    MathParseException if the content could not be parsed successfully                    
                </throws>
            </javadoc>
            <method name="initFromStream" type="int" line="188">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <comment line="191">
                    special case: dimension 1 -&gt; use unit initialization                    
                </comment>
                <comment line="201">
                    ignore first line                    
                </comment>
                <comment line="211">
                    we have found the right dimension                    
                </comment>
                <scope line="191"/>
                <declaration name="charset" type="Charset" line="195"/>
                <declaration name="reader" type="BufferedReader" line="196"/>
                <declaration name="dim" type="int" line="197"/>
                <scope line="199">
                    <declaration name="lineNumber" type="int" line="203"/>
                    <declaration name="index" type="int" line="204"/>
                    <declaration name="line" type="String" line="205"/>
                    <scope line="206">
                        <declaration name="st" type="StringTokenizer" line="207"/>
                        <scope line="208">
                            <scope line="210">
                                <declaration name="s" type="int" line="211"/>
                                <declaration name="a" type="int" line="212"/>
                                <declaration name="m" type="int[]" line="213"/>
                                <scope line="214"/>
                            </scope>
                            <scope line="220"/>
                        </scope>
                        <scope line="223"/>
                        <scope line="225"/>
                    </scope>
                </scope>
                <scope line="230"/>
            </method>
            <javadoc line="237">
                Calculate the direction numbers from the given polynomial.                
                <param>
                    d the dimension, zero-based                    
                </param>
                <param>
                    a the coefficients of the primitive polynomial                    
                </param>
                <param>
                    m the initial direction numbers                    
                </param>
            </javadoc>
            <method name="initDirectionVector" type="void" line="244">
                <params>
                    <param name="d" type="int"/>
                    <param name="a" type="int"/>
                    <param name="m" type="int[]"/>
                </params>
                <declaration name="s" type="int" line="245"/>
                <scope line="246"/>
                <scope line="249">
                    <scope line="251"/>
                </scope>
            </method>
            <javadoc line="257">
                {@inheritDoc}                
            </javadoc>
            <method name="nextVector" type="double[]" line="258">
                <comment line="266">
                    find the index c of the rightmost 0                    
                </comment>
                <declaration name="v" type="double[]" line="259"/>
                <scope line="260"/>
                <declaration name="c" type="int" line="266"/>
                <declaration name="value" type="int" line="267"/>
                <scope line="268"/>
                <scope line="273"/>
            </method>
            <javadoc line="281">
                Skip to the i-th point in the Sobol sequence.
                  &lt;p&gt;
                  This operation can be performed in O(1).                
                <param>
                    index the index in the sequence to skip to                    
                </param>
                <return>
                    the i-th point in the Sobol sequence                    
                </return>
                <throws>
                    NotPositiveException if index &amp;lt; 0                    
                </throws>
            </javadoc>
            <method name="skipTo" type="double[]" line="290">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="293">
                    reset x vector                    
                </comment>
                <comment line="297">
                    compute the gray code of i = i XOR floor(i / 2)                    
                </comment>
                <comment line="303">
                    stop, as all remaining bits will be zero                    
                </comment>
                <comment line="306">
                    the k-th bit of i                    
                </comment>
                <scope line="291"/>
                <scope line="294">
                    <declaration name="i" type="int" line="295"/>
                    <declaration name="grayCode" type="long" line="296"/>
                    <scope line="297">
                        <declaration name="result" type="long" line="298"/>
                        <scope line="299">
                            <declaration name="shift" type="long" line="300"/>
                            <scope line="301"/>
                            <declaration name="ik" type="long" line="306"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="316">
                Returns the index i of the next point in the Sobol sequence that will be returned
                  by calling {@link #nextVector()}.                
                <return>
                    the index of the next point                    
                </return>
            </javadoc>
            <method name="getNextIndex" type="int" line="322"/>
        </class>
    </source>