<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.function">
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Sinc" line="28">
            <implements interface="UnivariateDifferentiableFunction"/>
            <implements interface="DifferentiableUnivariateFunction"/>
            <javadoc line="28">
                &lt;a href=&quot;http://en.wikipedia.org/wiki/Sinc_function&quot;&gt;Sinc&lt;/a&gt; function,
                  defined by
                  &lt;pre&gt;&lt;code&gt;
                  sinc(x) = 1            if x = 0,
                  sin(x) / x   otherwise.
                  &lt;/code&gt;&lt;/pre&gt;                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: Sinc.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
            </javadoc>
            <declaration name="SHORTCUT" type="double" line="40"/>
            <javadoc line="40">
                Value below which the computations are done using Taylor series.
                  &lt;p&gt;
                  The Taylor series for sinc even order derivatives are:
                  &lt;pre&gt;
                  d^(2n)sinc/dx^(2n)     = Sum_(k&gt;=0) (-1)^(n+k) / ((2k)!(2n+2k+1)) x^(2k)
                  = (-1)^n     [ 1/(2n+1) - x^2/(4n+6) + x^4/(48n+120) - x^6/(1440n+5040) + O(x^8) ]
                  &lt;/pre&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  The Taylor series for sinc odd order derivatives are:
                  &lt;pre&gt;
                  d^(2n+1)sinc/dx^(2n+1) = Sum_(k&gt;=0) (-1)^(n+k+1) / ((2k+1)!(2n+2k+3)) x^(2k+1)
                  = (-1)^(n+1) [ x/(2n+3) - x^3/(12n+30) + x^5/(240n+840) - x^7/(10080n+45360) + O(x^9) ]
                  &lt;/pre&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  So the ratio of the fourth term with respect to the first term
                  is always smaller than x^6/720, for all derivative orders.
                  This implies that neglecting this term and using only the first three terms induces
                  a relative error bounded by x^6/720. The SHORTCUT value is chosen such that this
                  relative error is below double precision accuracy when |x| &lt;= SHORTCUT.
                  &lt;/p&gt;                
            </javadoc>
            <declaration name="normalized" type="boolean" line="65"/>
            <javadoc line="65">
                For normalized sinc function.                
            </javadoc>
            <javadoc line="68">
                The sinc function, {@code sin(x) / x}.                
            </javadoc>
            <method name="Sinc" type="constructor" line="71"/>
            <javadoc line="75">
                Instantiates the sinc function.                
                <param>
                    normalized If {@code true}, the function is
                      &lt;code&gt; sin(&amp;pi;x) / &amp;pi;x&lt;/code&gt;, otherwise {@code sin(x) / x}.                    
                </param>
            </javadoc>
            <method name="Sinc" type="constructor" line="81">
                <params>
                    <param name="normalized" type="boolean"/>
                </params>
            </method>
            <javadoc line="85">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="86">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="90">
                    use Taylor series                    
                </comment>
                <comment line="94">
                    use definition expression                    
                </comment>
                <declaration name="scaledX" type="double" line="87"/>
                <scope line="88">
                    <declaration name="scaledX2" type="double" line="90"/>
                </scope>
                <scope line="92"/>
            </method>
            <javadoc line="98">
                {@inheritDoc}                
                <deprecated>
                    as of 3.1, replaced by {@link #value(DerivativeStructure)}                    
                </deprecated>
            </javadoc>
            <method name="derivative" type="UnivariateFunction" line="102"/>
            <javadoc line="106">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="110">
                <params>
                    <param name="t" type="DerivativeStructure"/>
                </params>
                <comment line="123">
                    even derivation order                    
                </comment>
                <comment line="127">
                    odd derivation order                    
                </comment>
                <comment line="141">
                    the nth order derivative of sinc has the form:
                     dn(sinc(x)/dxn = [S_n(x) sin(x) + C_n(x) cos(x)] / x^(n+1)
                     where S_n(x) is an even polynomial with degree n-1 or n (depending on parity)
                     and C_n(x) is an odd polynomial with degree n-1 or n (depending on parity)
                     S_0(x) = 1, S_1(x) = -1, S_2(x) = -x^2 + 2, S_3(x) = 3x^2 - 6...
                     C_0(x) = 0, C_1(x) = x, C_2(x) = -2x, C_3(x) = -x^3 + 6x...
                     the general recurrence relations for S_n and C_n are:
                     S_n(x) = x S_(n-1)&apos;(x) - n S_(n-1)(x) - x C_(n-1)(x)
                     C_n(x) = x C_(n-1)&apos;(x) - n C_(n-1)(x) + x S_(n-1)(x)
                     as per polynomials parity, we can store both S_n and C_n in the same array                    
                </comment>
                <comment line="160">
                    update and evaluate polynomials S_n(x) and C_n(x)                    
                </comment>
                <comment line="163">
                    even derivation order, S_n is degree n and C_n is degree n-1                    
                </comment>
                <comment line="167">
                    odd derivation order, S_n is degree n-1 and C_n is degree n                    
                </comment>
                <comment line="173">
                    in this loop, k is always even                    
                </comment>
                <comment line="176">
                    sine part                    
                </comment>
                <comment line="180">
                    cosine part                    
                </comment>
                <declaration name="scaledX" type="double" line="112"/>
                <declaration name="scaledX2" type="double" line="113"/>
                <declaration name="f" type="double[]" line="115"/>
                <scope line="117">
                    <scope line="119">
                        <declaration name="k" type="int" line="120"/>
                        <scope line="121"/>
                        <scope line="125"/>
                    </scope>
                </scope>
                <scope line="132">
                    <declaration name="inv" type="double" line="134"/>
                    <declaration name="cos" type="double" line="135"/>
                    <declaration name="sin" type="double" line="136"/>
                    <declaration name="sc" type="double[]" line="150"/>
                    <declaration name="coeff" type="double" line="153"/>
                    <scope line="154">
                        <declaration name="s" type="double" line="156"/>
                        <declaration name="c" type="double" line="157"/>
                        <declaration name="kStart" type="int" line="160"/>
                        <scope line="161"/>
                        <scope line="165"/>
                        <scope line="173"/>
                    </scope>
                </scope>
                <scope line="194">
                    <declaration name="scale" type="double" line="195"/>
                    <scope line="196"/>
                </scope>
            </method>
        </class>
    </source>