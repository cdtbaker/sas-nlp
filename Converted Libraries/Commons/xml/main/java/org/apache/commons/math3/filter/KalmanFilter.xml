<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.filter">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.CholeskyDecomposition"/>
        <import package="org.apache.commons.math3.linear.DecompositionSolver"/>
        <import package="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.NonSquareMatrixException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.linear.SingularMatrixException"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="KalmanFilter" line="15">
            <javadoc line="15">
                Implementation of a Kalman filter to estimate the state &lt;i&gt;x&lt;sub&gt;k&lt;/sub&gt;&lt;/i&gt;
                  of a discrete-time controlled process that is governed by the linear
                  stochastic difference equation:
                  &lt;pre&gt;
                  &lt;i&gt;x&lt;sub&gt;k&lt;/sub&gt;&lt;/i&gt; = &lt;b&gt;A&lt;/b&gt;&lt;i&gt;x&lt;sub&gt;k-1&lt;/sub&gt;&lt;/i&gt; + &lt;b&gt;B&lt;/b&gt;&lt;i&gt;u&lt;sub&gt;k-1&lt;/sub&gt;&lt;/i&gt; + &lt;i&gt;w&lt;sub&gt;k-1&lt;/sub&gt;&lt;/i&gt;
                  &lt;/pre&gt;
                  with a measurement &lt;i&gt;x&lt;sub&gt;k&lt;/sub&gt;&lt;/i&gt; that is
                  &lt;pre&gt;
                  &lt;i&gt;z&lt;sub&gt;k&lt;/sub&gt;&lt;/i&gt; = &lt;b&gt;H&lt;/b&gt;&lt;i&gt;x&lt;sub&gt;k&lt;/sub&gt;&lt;/i&gt; + &lt;i&gt;v&lt;sub&gt;k&lt;/sub&gt;&lt;/i&gt;.
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The random variables &lt;i&gt;w&lt;sub&gt;k&lt;/sub&gt;&lt;/i&gt; and &lt;i&gt;v&lt;sub&gt;k&lt;/sub&gt;&lt;/i&gt; represent
                  the process and measurement noise and are assumed to be independent of each
                  other and distributed with normal probability (white noise).
                  &lt;p&gt;
                  The Kalman filter cycle involves the following steps:
                  &lt;ol&gt;
                  &lt;li&gt;predict: project the current state estimate ahead in time&lt;/li&gt;
                  &lt;li&gt;correct: adjust the projected estimate by an actual measurement&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt;
                  The Kalman filter is initialized with a {@link ProcessModel} and a{@link MeasurementModel}, which contain the corresponding transformation and
                  noise covariance matrices. The parameter names used in the respective models
                  correspond to the following names commonly used in the mathematical
                  literature:
                  &lt;ul&gt;
                  &lt;li&gt;A - state transition matrix&lt;/li&gt;
                  &lt;li&gt;B - control input matrix&lt;/li&gt;
                  &lt;li&gt;H - measurement matrix&lt;/li&gt;
                  &lt;li&gt;Q - process noise covariance matrix&lt;/li&gt;
                  &lt;li&gt;R - measurement noise covariance matrix&lt;/li&gt;
                  &lt;li&gt;P - error covariance matrix&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    <a href="http://www.cs.unc.edu/~welch/kalman/">Kalman filter
                           resources</a>                    
                </see>
                <see>
                    <a href="http://www.cs.unc.edu/~welch/media/pdf/kalman_intro.pdf">An
                           introduction to the Kalman filter by Greg Welch and Gary Bishop</a>                    
                </see>
                <see>
                    <a href="http://academic.csuohio.edu/simond/courses/eec644/kalman.pdf">
                           Kalman filter example by Dan Simon</a>                    
                </see>
                <see>
                    ProcessModel                    
                </see>
                <see>
                    MeasurementModel                    
                </see>
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: KalmanFilter.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="processModel" type="ProcessModel" line="61"/>
            <javadoc line="61">
                The process model used by this filter instance.                
            </javadoc>
            <declaration name="measurementModel" type="MeasurementModel" line="65"/>
            <javadoc line="65">
                The measurement model used by this filter instance.                
            </javadoc>
            <declaration name="transitionMatrix" type="RealMatrix" line="69"/>
            <javadoc line="69">
                The transition matrix, equivalent to A.                
            </javadoc>
            <declaration name="transitionMatrixT" type="RealMatrix" line="73"/>
            <javadoc line="73">
                The transposed transition matrix.                
            </javadoc>
            <declaration name="controlMatrix" type="RealMatrix" line="77"/>
            <javadoc line="77">
                The control matrix, equivalent to B.                
            </javadoc>
            <declaration name="measurementMatrix" type="RealMatrix" line="81"/>
            <javadoc line="81">
                The measurement matrix, equivalent to H.                
            </javadoc>
            <declaration name="measurementMatrixT" type="RealMatrix" line="85"/>
            <javadoc line="85">
                The transposed measurement matrix.                
            </javadoc>
            <declaration name="stateEstimation" type="RealVector" line="89"/>
            <javadoc line="89">
                The internal state estimation vector, equivalent to x hat.                
            </javadoc>
            <declaration name="errorCovariance" type="RealMatrix" line="93"/>
            <javadoc line="93">
                The error covariance matrix, equivalent to P.                
            </javadoc>
            <javadoc line="97">
                Creates a new Kalman filter with the given process and measurement models.                
                <param>
                    processthe model defining the underlying process dynamics                    
                </param>
                <param>
                    measurementthe model defining the given measurement characteristics                    
                </param>
                <throws>
                    NullArgumentExceptionif any of the given inputs is null (except for the control matrix)                    
                </throws>
                <throws>
                    NonSquareMatrixExceptionif the transition matrix is non square                    
                </throws>
                <throws>
                    DimensionMismatchExceptionif the column dimension of the transition matrix does not match the dimension of the
                      initial state estimation vector                    
                </throws>
                <throws>
                    MatrixDimensionMismatchExceptionif the matrix dimensions do not fit together                    
                </throws>
            </javadoc>
            <method name="KalmanFilter" type="constructor" line="107">
                <params>
                    <param name="process" type="ProcessModel"/>
                    <param name="measurement" type="MeasurementModel"/>
                </params>
                <scope line="115"/>
                <scope line="118"/>
                <declaration name="processNoise" type="RealMatrix" line="124"/>
                <declaration name="measNoise" type="RealMatrix" line="126"/>
                <scope line="128"/>
                <scope line="131"/>
                <scope line="134"/>
                <scope line="137"/>
                <scope line="140"/>
                <scope line="143"/>
                <scope line="146"/>
                <scope line="150"/>
                <scope line="153"/>
            </method>
            <javadoc line="157">
                Returns the dimension of the state estimation vector.                
                <return>
                    the state dimension                    
                </return>
            </javadoc>
            <method name="getStateDimension" type="int" line="161"/>
            <javadoc line="164">
                Returns the dimension of the measurement vector.                
                <return>
                    the measurement vector dimension                    
                </return>
            </javadoc>
            <method name="getMeasurementDimension" type="int" line="168"/>
            <javadoc line="171">
                Returns the current state estimation vector.                
                <return>
                    the state estimation vector                    
                </return>
            </javadoc>
            <method name="getStateEstimation" type="double[]" line="175"/>
            <javadoc line="178">
                Returns a copy of the current state estimation vector.                
                <return>
                    the state estimation vector                    
                </return>
            </javadoc>
            <method name="getStateEstimationVector" type="RealVector" line="182"/>
            <javadoc line="185">
                Returns the current error covariance matrix.                
                <return>
                    the error covariance matrix                    
                </return>
            </javadoc>
            <method name="getErrorCovariance" type="double[][]" line="189"/>
            <javadoc line="192">
                Returns a copy of the current error covariance matrix.                
                <return>
                    the error covariance matrix                    
                </return>
            </javadoc>
            <method name="getErrorCovarianceMatrix" type="RealMatrix" line="196"/>
            <javadoc line="199">
                Predict the internal state estimation one time step ahead.                
            </javadoc>
            <method name="predict" type="void" line="202"/>
            <javadoc line="205">
                Predict the internal state estimation one time step ahead.                
                <param>
                    uthe control vector                    
                </param>
                <throws>
                    DimensionMismatchExceptionif the dimension of the control vector does not fit                    
                </throws>
            </javadoc>
            <method name="predict" type="void" line="210">
                <params>
                    <param name="u" type="double[]"/>
                </params>
            </method>
            <javadoc line="213">
                Predict the internal state estimation one time step ahead.                
                <param>
                    uthe control vector                    
                </param>
                <throws>
                    DimensionMismatchExceptionif the dimension of the control vector does not match                    
                </throws>
            </javadoc>
            <method name="predict" type="void" line="218">
                <params>
                    <param name="u" type="RealVector"/>
                </params>
                <scope line="219"/>
                <scope line="223"/>
            </method>
            <javadoc line="228">
                Correct the current state estimate with an actual measurement.                
                <param>
                    zthe measurement vector                    
                </param>
                <throws>
                    NullArgumentExceptionif the measurement vector is {@code null}                    
                </throws>
                <throws>
                    DimensionMismatchExceptionif the dimension of the measurement vector does not fit                    
                </throws>
                <throws>
                    SingularMatrixExceptionif the covariance matrix could not be inverted                    
                </throws>
            </javadoc>
            <method name="correct" type="void" line="235">
                <params>
                    <param name="z" type="double[]"/>
                </params>
            </method>
            <javadoc line="238">
                Correct the current state estimate with an actual measurement.                
                <param>
                    zthe measurement vector                    
                </param>
                <throws>
                    NullArgumentExceptionif the measurement vector is {@code null}                    
                </throws>
                <throws>
                    DimensionMismatchExceptionif the dimension of the measurement vector does not fit                    
                </throws>
                <throws>
                    SingularMatrixExceptionif the covariance matrix could not be inverted                    
                </throws>
            </javadoc>
            <method name="correct" type="void" line="245">
                <params>
                    <param name="z" type="RealVector"/>
                </params>
                <scope line="247"/>
                <declaration name="s" type="RealMatrix" line="250"/>
                <declaration name="solver" type="DecompositionSolver" line="251"/>
                <declaration name="invertedS" type="RealMatrix" line="252"/>
                <declaration name="innovation" type="RealVector" line="253"/>
                <declaration name="kalmanGain" type="RealMatrix" line="254"/>
                <declaration name="identity" type="RealMatrix" line="256"/>
            </method>
        </class>
    </source>