<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="EigenDecomposition" line="10">
            <javadoc line="10">
                Calculates the eigen decomposition of a real matrix.
                  &lt;p&gt;The eigen decomposition of matrix A is a set of two matrices:
                  V and D such that A = V &amp;times; D &amp;times; V&lt;sup&gt;T&lt;/sup&gt;.
                  A, V and D are all m &amp;times; m matrices.&lt;/p&gt;
                  &lt;p&gt;This class is similar in spirit to the &lt;code&gt;EigenvalueDecomposition&lt;/code&gt;
                  class from the &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt;
                  library, with the following changes:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;a {@link #getVT() getVt} method has been added,&lt;/li&gt;
                  &lt;li&gt;two {@link #getRealEigenvalue(int) getRealEigenvalue} and {@link #getImagEigenvalue(int)getImagEigenvalue} methods to pick up a single eigenvalue have been added,&lt;/li&gt;
                  &lt;li&gt;a {@link #getEigenvector(int) getEigenvector} method to pick up a single
                  eigenvector has been added,&lt;/li&gt;
                  &lt;li&gt;a {@link #getDeterminant() getDeterminant} method has been added.&lt;/li&gt;
                  &lt;li&gt;a {@link #getSolver() getSolver} method has been added.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  As of 3.1, this class supports general real matrices (both symmetric and non-symmetric):
                  &lt;/p&gt;
                  &lt;p&gt;
                  If A is symmetric, then A = VDV&apos; where the eigenvalue matrix D is diagonal and the eigenvector
                  matrix V is orthogonal, i.e. A = V.multiply(D.multiply(V.transpose())) and
                  V.multiply(V.transpose()) equals the identity matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If A is not symmetric, then the eigenvalue matrix D is block diagonal with the real eigenvalues
                  in 1-by-1 blocks and any complex eigenvalues, lambda + imu, in 2-by-2 blocks:
                  &lt;pre&gt;
                  [lambda, mu    ]
                  [   -mu, lambda]
                  &lt;/pre&gt;
                  The columns of V represent the eigenvectors in the sense that AV = VD,
                  i.e. A.multiply(V) equals V.multiply(D).
                  The matrix V may be badly conditioned, or even singular, so the validity of the equation
                  A = VDinverse(V) depends upon the condition of V.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is based on the paper by A. Drubrulle, R.S. Martin and
                  J.H. Wilkinson &quot;The Implicit QL Algorithm&quot; in Wilksinson and Reinsch (1971)
                  Handbook for automatic computation, vol. 2, Linear algebra, Springer-Verlag,
                  New-York
                  &lt;/p&gt;                
                <see>
                    <a href="http://mathworld.wolfram.com/EigenDecomposition.html">MathWorld</a>                    
                </see>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix">Wikipedia</a>                    
                </see>
                <version>
                    $Id: EigenDecomposition.java 1452595 2013-03-04 23:29:39Z tn $                    
                </version>
                <since>
                    2.0 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="EPSILON" type="double" line="58"/>
            <javadoc line="58">
                Internally used epsilon criteria.                
            </javadoc>
            <declaration name="maxIter" type="byte" line="62"/>
            <javadoc line="62">
                Maximum number of iterations accepted in the implicit QL transformation                
            </javadoc>
            <declaration name="main" type="double[]" line="66"/>
            <javadoc line="66">
                Main diagonal of the tridiagonal matrix.                
            </javadoc>
            <declaration name="secondary" type="double[]" line="70"/>
            <javadoc line="70">
                Secondary diagonal of the tridiagonal matrix.                
            </javadoc>
            <declaration name="transformer" type="TriDiagonalTransformer" line="74"/>
            <javadoc line="74">
                Transformer to tridiagonal (may be null if matrix is already
                  tridiagonal).                
            </javadoc>
            <declaration name="realEigenvalues" type="double[]" line="79"/>
            <javadoc line="79">
                Real part of the realEigenvalues.                
            </javadoc>
            <declaration name="imagEigenvalues" type="double[]" line="83"/>
            <javadoc line="83">
                Imaginary part of the realEigenvalues.                
            </javadoc>
            <declaration name="eigenvectors" type="ArrayRealVector[]" line="87"/>
            <javadoc line="87">
                Eigenvectors.                
            </javadoc>
            <declaration name="cachedV" type="RealMatrix" line="91"/>
            <javadoc line="91">
                Cached value of V.                
            </javadoc>
            <declaration name="cachedD" type="RealMatrix" line="95"/>
            <javadoc line="95">
                Cached value of D.                
            </javadoc>
            <declaration name="cachedVt" type="RealMatrix" line="99"/>
            <javadoc line="99">
                Cached value of Vt.                
            </javadoc>
            <declaration name="isSymmetric" type="boolean" line="103"/>
            <javadoc line="103">
                Whether the matrix is symmetric.                
            </javadoc>
            <javadoc line="107">
                Calculates the eigen decomposition of the given real matrix.
                  &lt;p&gt;
                  Supports decomposition of a general matrix since 3.1.                
                <param>
                    matrix Matrix to decompose.                    
                </param>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
                <throws>
                    MathArithmeticException if the decomposition of a general matrix
                      results in a matrix with zero norm                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="EigenDecomposition" type="constructor" line="117">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="symTol" type="double" line="118"/>
                <scope line="120"/>
                <scope line="124">
                    <declaration name="t" type="SchurTransformer" line="125"/>
                </scope>
            </method>
            <javadoc line="129">
                Calculates the eigen decomposition of the given real matrix.                
                <param>
                    matrix Matrix to decompose.                    
                </param>
                <param>
                    splitTolerance Dummy parameter (present for backward
                      compatibility only).                    
                </param>
                <throws>
                    MathArithmeticException  if the decomposition of a general matrix
                      results in a matrix with zero norm                    
                </throws>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
                <deprecated>
                    in 3.1 (to be removed in 4.0) due to unused parameter                    
                </deprecated>
            </javadoc>
            <method name="EigenDecomposition" type="constructor" line="139">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="splitTolerance" type="double"/>
                </params>
            </method>
            <javadoc line="142">
                Calculates the eigen decomposition of the symmetric tridiagonal
                  matrix.  The Householder matrix is assumed to be the identity matrix.                
                <param>
                    main Main diagonal of the symmetric tridiagonal form.                    
                </param>
                <param>
                    secondary Secondary of the tridiagonal form.                    
                </param>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="EigenDecomposition" type="constructor" line="150">
                <params>
                    <param name="main" type="double[]"/>
                    <param name="secondary" type="double[]"/>
                </params>
                <declaration name="size" type="int" line="155"/>
                <declaration name="z" type="double[][]" line="156"/>
                <scope line="157"/>
            </method>
            <javadoc line="162">
                Calculates the eigen decomposition of the symmetric tridiagonal
                  matrix.  The Householder matrix is assumed to be the identity matrix.                
                <param>
                    main Main diagonal of the symmetric tridiagonal form.                    
                </param>
                <param>
                    secondary Secondary of the tridiagonal form.                    
                </param>
                <param>
                    splitTolerance Dummy parameter (present for backward
                      compatibility only).                    
                </param>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
                <deprecated>
                    in 3.1 (to be removed in 4.0) due to unused parameter                    
                </deprecated>
            </javadoc>
            <method name="EigenDecomposition" type="constructor" line="172">
                <params>
                    <param name="main" type="double[]"/>
                    <param name="secondary" type="double[]"/>
                    <param name="splitTolerance" type="double"/>
                </params>
            </method>
            <javadoc line="175">
                Gets the matrix V of the decomposition.
                  V is an orthogonal matrix, i.e. its transpose is also its inverse.
                  The columns of V are the eigenvectors of the original matrix.
                  No assumption is made about the orientation of the system axes formed
                  by the columns of V (e.g. in a 3-dimension space, V can form a left-
                  or right-handed system).                
                <return>
                    the V matrix.                    
                </return>
            </javadoc>
            <method name="getV" type="RealMatrix" line="184">
                <scope line="185">
                    <declaration name="m" type="int" line="186"/>
                    <scope line="188"/>
                </scope>
            </method>
            <javadoc line="194">
                Gets the block diagonal matrix D of the decomposition.
                  D is a block diagonal matrix.
                  Real eigenvalues are on the diagonal while complex values are on
                  2x2 blocks { {real +imaginary}, {-imaginary, real} }.                
                <return>
                    the D matrix.                    
                </return>
                <see>
                    #getRealEigenvalues()                    
                </see>
                <see>
                    #getImagEigenvalues()                    
                </see>
            </javadoc>
            <method name="getD" type="RealMatrix" line="203">
                <scope line="204">
                    <scope line="206">
                        <scope line="207"/>
                        <scope line="210"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="217">
                Gets the transpose of the matrix V of the decomposition.
                  V is an orthogonal matrix, i.e. its transpose is also its inverse.
                  The columns of V are the eigenvectors of the original matrix.
                  No assumption is made about the orientation of the system axes formed
                  by the columns of V (e.g. in a 3-dimension space, V can form a left-
                  or right-handed system).                
                <return>
                    the transpose of the V matrix.                    
                </return>
            </javadoc>
            <method name="getVT" type="RealMatrix" line="226">
                <scope line="227">
                    <declaration name="m" type="int" line="228"/>
                    <scope line="230"/>
                </scope>
            </method>
            <javadoc line="236">
                Returns whether the calculated eigen values are complex or real.
                  &lt;p&gt;The method performs a zero check for each element of the{@link #getImagEigenvalues()} array and returns {@code true} if any
                  element is not equal to zero.                
                <return>
                    {@code true} if the eigen values are complex, {@code false} otherwise                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="hasComplexEigenvalues" type="boolean" line="243">
                <scope line="244">
                    <scope line="245"/>
                </scope>
            </method>
            <javadoc line="251">
                Gets a copy of the real parts of the eigenvalues of the original matrix.                
                <return>
                    a copy of the real parts of the eigenvalues of the original matrix.                    
                </return>
                <see>
                    #getD()                    
                </see>
                <see>
                    #getRealEigenvalue(int)                    
                </see>
                <see>
                    #getImagEigenvalues()                    
                </see>
            </javadoc>
            <method name="getRealEigenvalues" type="double[]" line="258"/>
            <javadoc line="261">
                Returns the real part of the i&lt;sup&gt;th&lt;/sup&gt; eigenvalue of the original
                  matrix.                
                <param>
                    i index of the eigenvalue (counting from 0)                    
                </param>
                <return>
                    real part of the i<sup>th</sup> eigenvalue of the original
                      matrix.                    
                </return>
                <see>
                    #getD()                    
                </see>
                <see>
                    #getRealEigenvalues()                    
                </see>
                <see>
                    #getImagEigenvalue(int)                    
                </see>
            </javadoc>
            <method name="getRealEigenvalue" type="double" line="271">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="274">
                Gets a copy of the imaginary parts of the eigenvalues of the original
                  matrix.                
                <return>
                    a copy of the imaginary parts of the eigenvalues of the original
                      matrix.                    
                </return>
                <see>
                    #getD()                    
                </see>
                <see>
                    #getImagEigenvalue(int)                    
                </see>
                <see>
                    #getRealEigenvalues()                    
                </see>
            </javadoc>
            <method name="getImagEigenvalues" type="double[]" line="283"/>
            <javadoc line="286">
                Gets the imaginary part of the i&lt;sup&gt;th&lt;/sup&gt; eigenvalue of the original
                  matrix.                
                <param>
                    i Index of the eigenvalue (counting from 0).                    
                </param>
                <return>
                    the imaginary part of the i<sup>th</sup> eigenvalue of the original
                      matrix.                    
                </return>
                <see>
                    #getD()                    
                </see>
                <see>
                    #getImagEigenvalues()                    
                </see>
                <see>
                    #getRealEigenvalue(int)                    
                </see>
            </javadoc>
            <method name="getImagEigenvalue" type="double" line="296">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="299">
                Gets a copy of the i&lt;sup&gt;th&lt;/sup&gt; eigenvector of the original matrix.                
                <param>
                    i Index of the eigenvector (counting from 0).                    
                </param>
                <return>
                    a copy of the i<sup>th</sup> eigenvector of the original matrix.                    
                </return>
                <see>
                    #getD()                    
                </see>
            </javadoc>
            <method name="getEigenvector" type="RealVector" line="305">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="308">
                Computes the determinant of the matrix.                
                <return>
                    the determinant of the matrix.                    
                </return>
            </javadoc>
            <method name="getDeterminant" type="double" line="312">
                <declaration name="determinant" type="double" line="313"/>
                <scope line="314"/>
            </method>
            <javadoc line="319">
                Computes the square-root of the matrix.
                  This implementation assumes that the matrix is symmetric and positive
                  definite.                
                <return>
                    the square-root of the matrix.                    
                </return>
                <throws>
                    MathUnsupportedOperationException if the matrix is not
                      symmetric or not positive definite.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getSquareRoot" type="RealMatrix" line="328">
                <scope line="329"/>
                <declaration name="sqrtEigenValues" type="double[]" line="332"/>
                <scope line="333">
                    <declaration name="eigen" type="double" line="334"/>
                    <scope line="335"/>
                </scope>
                <declaration name="sqrtEigen" type="RealMatrix" line="340"/>
                <declaration name="v" type="RealMatrix" line="341"/>
                <declaration name="vT" type="RealMatrix" line="342"/>
            </method>
            <javadoc line="345">
                Gets a solver for finding the A &amp;times; X = B solution in exact
                  linear sense.
                  &lt;p&gt;
                  Since 3.1, eigen decomposition of a general matrix is supported,
                  but the {@link DecompositionSolver} only supports real eigenvalues.                
                <return>
                    a solver                    
                </return>
                <throws>
                    MathUnsupportedOperationException if the decomposition resulted in
                      complex eigenvalues                    
                </throws>
            </javadoc>
            <method name="getSolver" type="DecompositionSolver" line="355">
                <scope line="356"/>
            </method>
            <class name="Solver" line="361">
                <implements interface="DecompositionSolver"/>
                <javadoc line="361">
                    Specialized solver.                    
                </javadoc>
                <declaration name="realEigenvalues" type="double[]" line="365"/>
                <javadoc line="365">
                    Real part of the realEigenvalues.                    
                </javadoc>
                <declaration name="imagEigenvalues" type="double[]" line="369"/>
                <javadoc line="369">
                    Imaginary part of the realEigenvalues.                    
                </javadoc>
                <declaration name="eigenvectors" type="ArrayRealVector[]" line="373"/>
                <javadoc line="373">
                    Eigenvectors.                    
                </javadoc>
                <javadoc line="377">
                    Builds a solver from decomposed matrix.                    
                    <param>
                        realEigenvalues Real parts of the eigenvalues.                        
                    </param>
                    <param>
                        imagEigenvalues Imaginary parts of the eigenvalues.                        
                    </param>
                    <param>
                        eigenvectors Eigenvectors.                        
                    </param>
                </javadoc>
                <method name="Solver" type="constructor" line="383">
                    <params>
                        <param name="realEigenvalues" type="double[]"/>
                        <param name="imagEigenvalues" type="double[]"/>
                        <param name="eigenvectors" type="ArrayRealVector[]"/>
                    </params>
                </method>
                <javadoc line="388">
                    Solves the linear equation A &amp;times; X = B for symmetric matrices A.
                      &lt;p&gt;
                      This method only finds exact linear solutions, i.e. solutions for
                      which ||A &amp;times; X - B|| is exactly 0.
                      &lt;/p&gt;                    
                    <param>
                        b Right-hand side of the equation A &times; X = B.                        
                    </param>
                    <return>
                        a Vector X that minimizes the two norm of A &times; X - B.                        
                    </return>
                    <throws>
                        DimensionMismatchException if the matrices dimensions do not match.                        
                    </throws>
                    <throws>
                        SingularMatrixException if the decomposed matrix is singular.                        
                    </throws>
                </javadoc>
                <method name="solve" type="RealVector" line="399">
                    <params>
                        <param name="b" type="RealVector"/>
                    </params>
                    <scope line="400"/>
                    <declaration name="m" type="int" line="403"/>
                    <scope line="404"/>
                    <declaration name="bp" type="double[]" line="407"/>
                    <scope line="408">
                        <declaration name="v" type="ArrayRealVector" line="409"/>
                        <declaration name="vData" type="double[]" line="410"/>
                        <declaration name="s" type="double" line="411"/>
                        <scope line="412"/>
                    </scope>
                </method>
                <javadoc line="418">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="RealMatrix" line="421">
                    <params>
                        <param name="b" type="RealMatrix"/>
                    </params>
                    <scope line="422"/>
                    <declaration name="m" type="int" line="425"/>
                    <scope line="426"/>
                    <declaration name="nColB" type="int" line="429"/>
                    <declaration name="bp" type="double[][]" line="430"/>
                    <declaration name="tmpCol" type="double[]" line="431"/>
                    <scope line="432">
                        <scope line="433"/>
                        <scope line="437">
                            <declaration name="v" type="ArrayRealVector" line="438"/>
                            <declaration name="vData" type="double[]" line="439"/>
                            <declaration name="s" type="double" line="440"/>
                            <scope line="441"/>
                            <scope line="445"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="452">
                    Checks whether the decomposed matrix is non-singular.                    
                    <return>
                        true if the decomposed matrix is non-singular.                        
                    </return>
                </javadoc>
                <method name="isNonSingular" type="boolean" line="456">
                    <scope line="457">
                        <scope line="458"/>
                    </scope>
                </method>
                <javadoc line="464">
                    Get the inverse of the decomposed matrix.                    
                    <return>
                        the inverse matrix.                        
                    </return>
                    <throws>
                        SingularMatrixException if the decomposed matrix is singular.                        
                    </throws>
                </javadoc>
                <method name="getInverse" type="RealMatrix" line="469">
                    <scope line="470"/>
                    <declaration name="m" type="int" line="473"/>
                    <declaration name="invData" type="double[][]" line="474"/>
                    <scope line="475">
                        <declaration name="invI" type="double[]" line="476"/>
                        <scope line="477">
                            <declaration name="invIJ" type="double" line="478"/>
                            <scope line="479">
                                <declaration name="vK" type="double[]" line="480"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="489">
                Transforms the matrix to tridiagonal form.                
                <param>
                    matrix Matrix to transform.                    
                </param>
            </javadoc>
            <method name="transformToTridiagonal" type="void" line="493">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="498">
                Find eigenvalues and eigenvectors (Dubrulle et al., 1971)                
                <param>
                    householderMatrix Householder matrix of the transformation
                      to tridiagonal form.                    
                </param>
            </javadoc>
            <method name="findEigenVectors" type="void" line="503">
                <params>
                    <param name="householderMatrix" type="double[][]"/>
                </params>
                <declaration name="z" type="double[][]" line="504"/>
                <declaration name="n" type="int" line="505"/>
                <declaration name="e" type="double[]" line="508"/>
                <scope line="509"/>
                <declaration name="maxAbsoluteValue" type="double" line="515"/>
                <scope line="516">
                    <scope line="517"/>
                    <scope line="520"/>
                </scope>
                <scope line="524">
                    <scope line="525">
                        <scope line="526"/>
                        <scope line="529"/>
                    </scope>
                </scope>
                <scope line="534">
                    <declaration name="its" type="int" line="535"/>
                    <declaration name="m" type="int" line="536"/>
                    <scope line="537">
                        <scope line="538">
                            <declaration name="delta" type="double" line="539"/>
                            <scope line="540"/>
                        </scope>
                        <scope line="544">
                            <scope line="545"/>
                            <declaration name="q" type="double" line="549"/>
                            <declaration name="t" type="double" line="550"/>
                            <scope line="551"/>
                            <scope line="554"/>
                            <declaration name="u" type="double" line="557"/>
                            <declaration name="s" type="double" line="558"/>
                            <declaration name="c" type="double" line="559"/>
                            <declaration name="i" type="int" line="560"/>
                            <scope line="561">
                                <declaration name="p" type="double" line="562"/>
                                <declaration name="h" type="double" line="563"/>
                                <scope line="564"/>
                                <scope line="571"/>
                                <scope line="578"/>
                                <scope line="588"/>
                            </scope>
                            <scope line="594"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="604">
                    <declaration name="k" type="int" line="605"/>
                    <declaration name="p" type="double" line="606"/>
                    <scope line="607">
                        <scope line="608"/>
                    </scope>
                    <scope line="613">
                        <scope line="616"/>
                    </scope>
                </scope>
                <scope line="624">
                    <scope line="625"/>
                </scope>
                <scope line="629">
                    <scope line="630">
                        <scope line="631"/>
                    </scope>
                </scope>
                <declaration name="tmp" type="double[]" line="637"/>
                <scope line="638">
                    <scope line="639"/>
                </scope>
            </method>
            <javadoc line="645">
                Transforms the matrix to Schur form and calculates the eigenvalues.                
                <param>
                    matrix Matrix to transform.                    
                </param>
                <return>
                    the {@link SchurTransformer Shur transform} for this matrix                    
                </return>
            </javadoc>
            <method name="transformToSchur" type="SchurTransformer" line="650">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="schurTransform" type="SchurTransformer" line="651"/>
                <declaration name="matT" type="double[][]" line="652"/>
                <scope line="655">
                    <scope line="656"/>
                    <scope line="659">
                        <declaration name="x" type="double" line="660"/>
                        <declaration name="p" type="double" line="661"/>
                        <declaration name="z" type="double" line="662"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="672">
                Performs a division of two complex numbers.                
                <param>
                    xr real part of the first number                    
                </param>
                <param>
                    xi imaginary part of the first number                    
                </param>
                <param>
                    yr real part of the second number                    
                </param>
                <param>
                    yi imaginary part of the second number                    
                </param>
                <return>
                    result of the complex division                    
                </return>
            </javadoc>
            <method name="cdiv" type="Complex" line="680">
                <params>
                    <param name="xr" type="double"/>
                    <param name="xi" type="double"/>
                    <param name="yr" type="double"/>
                    <param name="yi" type="double"/>
                </params>
            </method>
            <javadoc line="683">
                Find eigenvectors from a matrix transformed to Schur form.                
                <param>
                    schur the schur transformation of the matrix                    
                </param>
                <throws>
                    MathArithmeticException if the Schur form has a norm of zero                    
                </throws>
            </javadoc>
            <method name="findEigenVectorsFromSchur" type="void" line="688">
                <params>
                    <param name="schur" type="SchurTransformer"/>
                </params>
                <declaration name="matrixT" type="double[][]" line="689"/>
                <declaration name="matrixP" type="double[][]" line="690"/>
                <declaration name="n" type="int" line="691"/>
                <declaration name="norm" type="double" line="692"/>
                <scope line="693">
                    <scope line="694"/>
                </scope>
                <scope line="698"/>
                <declaration name="r" type="double" line="701"/>
                <declaration name="s" type="double" line="702"/>
                <declaration name="z" type="double" line="703"/>
                <scope line="704">
                    <declaration name="p" type="double" line="705"/>
                    <declaration name="q" type="double" line="706"/>
                    <scope line="707">
                        <declaration name="l" type="int" line="708"/>
                        <scope line="710">
                            <declaration name="w" type="double" line="711"/>
                            <scope line="713"/>
                            <scope line="716"/>
                            <scope line="720">
                                <scope line="722">
                                    <scope line="723"/>
                                    <scope line="726"/>
                                </scope>
                                <scope line="730">
                                    <declaration name="x" type="double" line="731"/>
                                    <declaration name="y" type="double" line="732"/>
                                    <declaration name="t" type="double" line="734"/>
                                    <scope line="736"/>
                                    <scope line="739"/>
                                </scope>
                                <declaration name="t" type="double" line="743"/>
                                <scope line="744">
                                    <scope line="745"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="752">
                        <declaration name="l" type="int" line="753"/>
                        <scope line="754"/>
                        <scope line="758">
                            <declaration name="result" type="Complex" line="759"/>
                        </scope>
                        <scope line="765">
                            <declaration name="ra" type="double" line="766"/>
                            <declaration name="sa" type="double" line="767"/>
                            <scope line="768"/>
                            <declaration name="w" type="double" line="772"/>
                            <scope line="773"/>
                            <scope line="778">
                                <scope line="780">
                                    <declaration name="c" type="Complex" line="781"/>
                                </scope>
                                <scope line="785">
                                    <declaration name="x" type="double" line="786"/>
                                    <declaration name="y" type="double" line="787"/>
                                    <declaration name="vr" type="double" line="788"/>
                                    <declaration name="vi" type="double" line="789"/>
                                    <scope line="790"/>
                                    <declaration name="c" type="Complex" line="793"/>
                                    <scope line="796"/>
                                    <scope line="800">
                                        <declaration name="c2" type="Complex" line="801"/>
                                    </scope>
                                </scope>
                                <declaration name="t" type="double" line="806"/>
                                <scope line="807">
                                    <scope line="808"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="817">
                    <scope line="818">
                        <scope line="819"/>
                    </scope>
                </scope>
                <scope line="824">
                    <scope line="825">
                        <scope line="827"/>
                    </scope>
                </scope>
                <declaration name="tmp" type="double[]" line="834"/>
                <scope line="835">
                    <scope line="836"/>
                </scope>
            </method>
        </class>
    </source>