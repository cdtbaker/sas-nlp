<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="EigenDecomposition" line="29">
            <javadoc line="29">
                Calculates the eigen decomposition of a real matrix.
                  &lt;p&gt;The eigen decomposition of matrix A is a set of two matrices:
                  V and D such that A = V &amp;times; D &amp;times; V&lt;sup&gt;T&lt;/sup&gt;.
                  A, V and D are all m &amp;times; m matrices.&lt;/p&gt;
                  &lt;p&gt;This class is similar in spirit to the &lt;code&gt;EigenvalueDecomposition&lt;/code&gt;
                  class from the &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt;
                  library, with the following changes:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;a {@link #getVT() getVt} method has been added,&lt;/li&gt;
                  &lt;li&gt;two {@link #getRealEigenvalue(int) getRealEigenvalue} and {@link #getImagEigenvalue(int)getImagEigenvalue} methods to pick up a single eigenvalue have been added,&lt;/li&gt;
                  &lt;li&gt;a {@link #getEigenvector(int) getEigenvector} method to pick up a single
                  eigenvector has been added,&lt;/li&gt;
                  &lt;li&gt;a {@link #getDeterminant() getDeterminant} method has been added.&lt;/li&gt;
                  &lt;li&gt;a {@link #getSolver() getSolver} method has been added.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  As of 3.1, this class supports general real matrices (both symmetric and non-symmetric):
                  &lt;/p&gt;
                  &lt;p&gt;
                  If A is symmetric, then A = VDV&apos; where the eigenvalue matrix D is diagonal and the eigenvector
                  matrix V is orthogonal, i.e. A = V.multiply(D.multiply(V.transpose())) and
                  V.multiply(V.transpose()) equals the identity matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If A is not symmetric, then the eigenvalue matrix D is block diagonal with the real eigenvalues
                  in 1-by-1 blocks and any complex eigenvalues, lambda + imu, in 2-by-2 blocks:
                  &lt;pre&gt;
                  [lambda, mu    ]
                  [   -mu, lambda]
                  &lt;/pre&gt;
                  The columns of V represent the eigenvectors in the sense that AV = VD,
                  i.e. A.multiply(V) equals V.multiply(D).
                  The matrix V may be badly conditioned, or even singular, so the validity of the equation
                  A = VDinverse(V) depends upon the condition of V.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is based on the paper by A. Drubrulle, R.S. Martin and
                  J.H. Wilkinson &quot;The Implicit QL Algorithm&quot; in Wilksinson and Reinsch (1971)
                  Handbook for automatic computation, vol. 2, Linear algebra, Springer-Verlag,
                  New-York
                  &lt;/p&gt;                
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/EigenDecomposition.html&quot;&gt;MathWorld&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix&quot;&gt;Wikipedia&lt;/a&gt;                    
                </see>
                <version>
                    $Id: EigenDecomposition.java 1538368 2013-11-03 13:57:37Z erans $                    
                </version>
                <since>
                    2.0 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="EPSILON" type="double" line="78"/>
            <javadoc line="78">
                Internally used epsilon criteria.                
            </javadoc>
            <declaration name="maxIter" type="byte" line="80"/>
            <javadoc line="80">
                Maximum number of iterations accepted in the implicit QL transformation                
            </javadoc>
            <declaration name="main" type="double[]" line="82"/>
            <javadoc line="82">
                Main diagonal of the tridiagonal matrix.                
            </javadoc>
            <declaration name="secondary" type="double[]" line="84"/>
            <javadoc line="84">
                Secondary diagonal of the tridiagonal matrix.                
            </javadoc>
            <declaration name="transformer" type="TriDiagonalTransformer" line="86"/>
            <javadoc line="86">
                Transformer to tridiagonal (may be null if matrix is already
                  tridiagonal).                
            </javadoc>
            <declaration name="realEigenvalues" type="double[]" line="91"/>
            <javadoc line="91">
                Real part of the realEigenvalues.                
            </javadoc>
            <declaration name="imagEigenvalues" type="double[]" line="93"/>
            <javadoc line="93">
                Imaginary part of the realEigenvalues.                
            </javadoc>
            <declaration name="eigenvectors" type="ArrayRealVector[]" line="95"/>
            <javadoc line="95">
                Eigenvectors.                
            </javadoc>
            <declaration name="cachedV" type="RealMatrix" line="97"/>
            <javadoc line="97">
                Cached value of V.                
            </javadoc>
            <declaration name="cachedD" type="RealMatrix" line="99"/>
            <javadoc line="99">
                Cached value of D.                
            </javadoc>
            <declaration name="cachedVt" type="RealMatrix" line="101"/>
            <javadoc line="101">
                Cached value of Vt.                
            </javadoc>
            <declaration name="isSymmetric" type="boolean" line="103"/>
            <javadoc line="103">
                Whether the matrix is symmetric.                
            </javadoc>
            <javadoc line="106">
                Calculates the eigen decomposition of the given real matrix.
                  &lt;p&gt;
                  Supports decomposition of a general matrix since 3.1.                
                <param>
                    matrix Matrix to decompose.                    
                </param>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
                <throws>
                    MathArithmeticException if the decomposition of a general matrix
                      results in a matrix with zero norm                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="EigenDecomposition" type="constructor" line="118">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="symTol" type="double" line="119"/>
                <scope line="121"/>
                <scope line="124">
                    <declaration name="t" type="SchurTransformer" line="125"/>
                </scope>
            </method>
            <javadoc line="130">
                Calculates the eigen decomposition of the given real matrix.                
                <param>
                    matrix Matrix to decompose.                    
                </param>
                <param>
                    splitTolerance Dummy parameter (present for backward
                      compatibility only).                    
                </param>
                <throws>
                    MathArithmeticException  if the decomposition of a general matrix
                      results in a matrix with zero norm                    
                </throws>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
                <deprecated>
                    in 3.1 (to be removed in 4.0) due to unused parameter                    
                </deprecated>
            </javadoc>
            <method name="EigenDecomposition" type="constructor" line="144">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="splitTolerance" type="double"/>
                </params>
            </method>
            <javadoc line="148">
                Calculates the eigen decomposition of the symmetric tridiagonal
                  matrix.  The Householder matrix is assumed to be the identity matrix.                
                <param>
                    main Main diagonal of the symmetric tridiagonal form.                    
                </param>
                <param>
                    secondary Secondary of the tridiagonal form.                    
                </param>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="EigenDecomposition" type="constructor" line="157">
                <params>
                    <param name="main" type="double[]"/>
                    <param name="secondary" type="double[]"/>
                </params>
                <declaration name="size" type="int" line="162"/>
                <declaration name="z" type="double[][]" line="163"/>
                <scope line="164"/>
            </method>
            <javadoc line="170">
                Calculates the eigen decomposition of the symmetric tridiagonal
                  matrix.  The Householder matrix is assumed to be the identity matrix.                
                <param>
                    main Main diagonal of the symmetric tridiagonal form.                    
                </param>
                <param>
                    secondary Secondary of the tridiagonal form.                    
                </param>
                <param>
                    splitTolerance Dummy parameter (present for backward
                      compatibility only).                    
                </param>
                <throws>
                    MaxCountExceededException if the algorithm fails to converge.                    
                </throws>
                <deprecated>
                    in 3.1 (to be removed in 4.0) due to unused parameter                    
                </deprecated>
            </javadoc>
            <method name="EigenDecomposition" type="constructor" line="183">
                <params>
                    <param name="main" type="double[]"/>
                    <param name="secondary" type="double[]"/>
                    <param name="splitTolerance" type="double"/>
                </params>
            </method>
            <javadoc line="187">
                Gets the matrix V of the decomposition.
                  V is an orthogonal matrix, i.e. its transpose is also its inverse.
                  The columns of V are the eigenvectors of the original matrix.
                  No assumption is made about the orientation of the system axes formed
                  by the columns of V (e.g. in a 3-dimension space, V can form a left-
                  or right-handed system).                
                <return>
                    the V matrix.                    
                </return>
            </javadoc>
            <method name="getV" type="RealMatrix" line="197">
                <comment line="207">
                    return the cached matrix                    
                </comment>
                <scope line="199">
                    <declaration name="m" type="int" line="200"/>
                    <scope line="202"/>
                </scope>
            </method>
            <javadoc line="210">
                Gets the block diagonal matrix D of the decomposition.
                  D is a block diagonal matrix.
                  Real eigenvalues are on the diagonal while complex values are on
                  2x2 blocks { {real +imaginary}, {-imaginary, real} }.                
                <return>
                    the D matrix.                    
                </return>
                <see>
                    #getRealEigenvalues()                    
                </see>
                <see>
                    #getImagEigenvalues()                    
                </see>
            </javadoc>
            <method name="getD" type="RealMatrix" line="221">
                <comment line="225">
                    cache the matrix for subsequent calls                    
                </comment>
                <scope line="223">
                    <scope line="227">
                        <scope line="228"/>
                        <scope line="230"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="238">
                Gets the transpose of the matrix V of the decomposition.
                  V is an orthogonal matrix, i.e. its transpose is also its inverse.
                  The columns of V are the eigenvectors of the original matrix.
                  No assumption is made about the orientation of the system axes formed
                  by the columns of V (e.g. in a 3-dimension space, V can form a left-
                  or right-handed system).                
                <return>
                    the transpose of the V matrix.                    
                </return>
            </javadoc>
            <method name="getVT" type="RealMatrix" line="248">
                <comment line="259">
                    return the cached matrix                    
                </comment>
                <scope line="250">
                    <declaration name="m" type="int" line="251"/>
                    <scope line="253"/>
                </scope>
            </method>
            <javadoc line="262">
                Returns whether the calculated eigen values are complex or real.
                  &lt;p&gt;The method performs a zero check for each element of the{@link #getImagEigenvalues()} array and returns {@code true} if any
                  element is not equal to zero.                
                <return>
                    {@code true} if the eigen values are complex, {@code false} otherwise                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="hasComplexEigenvalues" type="boolean" line="271">
                <scope line="272">
                    <scope line="273"/>
                </scope>
            </method>
            <javadoc line="280">
                Gets a copy of the real parts of the eigenvalues of the original matrix.                
                <return>
                    a copy of the real parts of the eigenvalues of the original matrix.                    
                </return>
                <see>
                    #getD()                    
                </see>
                <see>
                    #getRealEigenvalue(int)                    
                </see>
                <see>
                    #getImagEigenvalues()                    
                </see>
            </javadoc>
            <method name="getRealEigenvalues" type="double[]" line="289"/>
            <javadoc line="293">
                Returns the real part of the i&lt;sup&gt;th&lt;/sup&gt; eigenvalue of the original
                  matrix.                
                <param>
                    i index of the eigenvalue (counting from 0)                    
                </param>
                <return>
                    real part of the i&lt;sup&gt;th&lt;/sup&gt; eigenvalue of the original
                      matrix.                    
                </return>
                <see>
                    #getD()                    
                </see>
                <see>
                    #getRealEigenvalues()                    
                </see>
                <see>
                    #getImagEigenvalue(int)                    
                </see>
            </javadoc>
            <method name="getRealEigenvalue" type="double" line="305">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="309">
                Gets a copy of the imaginary parts of the eigenvalues of the original
                  matrix.                
                <return>
                    a copy of the imaginary parts of the eigenvalues of the original
                      matrix.                    
                </return>
                <see>
                    #getD()                    
                </see>
                <see>
                    #getImagEigenvalue(int)                    
                </see>
                <see>
                    #getRealEigenvalues()                    
                </see>
            </javadoc>
            <method name="getImagEigenvalues" type="double[]" line="320"/>
            <javadoc line="324">
                Gets the imaginary part of the i&lt;sup&gt;th&lt;/sup&gt; eigenvalue of the original
                  matrix.                
                <param>
                    i Index of the eigenvalue (counting from 0).                    
                </param>
                <return>
                    the imaginary part of the i&lt;sup&gt;th&lt;/sup&gt; eigenvalue of the original
                      matrix.                    
                </return>
                <see>
                    #getD()                    
                </see>
                <see>
                    #getImagEigenvalues()                    
                </see>
                <see>
                    #getRealEigenvalue(int)                    
                </see>
            </javadoc>
            <method name="getImagEigenvalue" type="double" line="336">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="340">
                Gets a copy of the i&lt;sup&gt;th&lt;/sup&gt; eigenvector of the original matrix.                
                <param>
                    i Index of the eigenvector (counting from 0).                    
                </param>
                <return>
                    a copy of the i&lt;sup&gt;th&lt;/sup&gt; eigenvector of the original matrix.                    
                </return>
                <see>
                    #getD()                    
                </see>
            </javadoc>
            <method name="getEigenvector" type="RealVector" line="347">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="351">
                Computes the determinant of the matrix.                
                <return>
                    the determinant of the matrix.                    
                </return>
            </javadoc>
            <method name="getDeterminant" type="double" line="356">
                <declaration name="determinant" type="double" line="357"/>
                <scope line="358"/>
            </method>
            <javadoc line="364">
                Computes the square-root of the matrix.
                  This implementation assumes that the matrix is symmetric and positive
                  definite.                
                <return>
                    the square-root of the matrix.                    
                </return>
                <throws>
                    MathUnsupportedOperationException if the matrix is not
                      symmetric or not positive definite.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getSquareRoot" type="RealMatrix" line="374">
                <scope line="375"/>
                <declaration name="sqrtEigenValues" type="double[]" line="379"/>
                <scope line="380">
                    <declaration name="eigen" type="double" line="381"/>
                    <scope line="382"/>
                </scope>
                <declaration name="sqrtEigen" type="RealMatrix" line="387"/>
                <declaration name="v" type="RealMatrix" line="388"/>
                <declaration name="vT" type="RealMatrix" line="389"/>
            </method>
            <javadoc line="394">
                Gets a solver for finding the A &amp;times; X = B solution in exact
                  linear sense.
                  &lt;p&gt;
                  Since 3.1, eigen decomposition of a general matrix is supported,
                  but the {@link DecompositionSolver} only supports real eigenvalues.                
                <return>
                    a solver                    
                </return>
                <throws>
                    MathUnsupportedOperationException if the decomposition resulted in
                      complex eigenvalues                    
                </throws>
            </javadoc>
            <method name="getSolver" type="DecompositionSolver" line="405">
                <scope line="406"/>
            </method>
            <class name="Solver" line="412">
                <implements interface="DecompositionSolver"/>
                <javadoc line="412">
                    Specialized solver.                    
                </javadoc>
                <declaration name="realEigenvalues" type="double[]" line="414"/>
                <javadoc line="414">
                    Real part of the realEigenvalues.                    
                </javadoc>
                <declaration name="imagEigenvalues" type="double[]" line="416"/>
                <javadoc line="416">
                    Imaginary part of the realEigenvalues.                    
                </javadoc>
                <declaration name="eigenvectors" type="ArrayRealVector[]" line="418"/>
                <javadoc line="418">
                    Eigenvectors.                    
                </javadoc>
                <javadoc line="421">
                    Builds a solver from decomposed matrix.                    
                    <param>
                        realEigenvalues Real parts of the eigenvalues.                        
                    </param>
                    <param>
                        imagEigenvalues Imaginary parts of the eigenvalues.                        
                    </param>
                    <param>
                        eigenvectors Eigenvectors.                        
                    </param>
                </javadoc>
                <method name="Solver" type="constructor" line="430">
                    <params>
                        <param name="realEigenvalues" type="double[]"/>
                        <param name="imagEigenvalues" type="double[]"/>
                        <param name="eigenvectors" type="ArrayRealVector[]"/>
                    </params>
                </method>
                <javadoc line="436">
                    Solves the linear equation A &amp;times; X = B for symmetric matrices A.
                      &lt;p&gt;
                      This method only finds exact linear solutions, i.e. solutions for
                      which ||A &amp;times; X - B|| is exactly 0.
                      &lt;/p&gt;                    
                    <param>
                        b Right-hand side of the equation A &amp;times; X = B.                        
                    </param>
                    <return>
                        a Vector X that minimizes the two norm of A &amp;times; X - B.                        
                    </return>
                    <throws>
                        DimensionMismatchException if the matrices dimensions do not match.                        
                    </throws>
                    <throws>
                        SingularMatrixException if the decomposed matrix is singular.                        
                    </throws>
                </javadoc>
                <method name="solve" type="RealVector" line="449">
                    <params>
                        <param name="b" type="RealVector"/>
                    </params>
                    <scope line="450"/>
                    <declaration name="m" type="int" line="454"/>
                    <scope line="455"/>
                    <declaration name="bp" type="double[]" line="459"/>
                    <scope line="460">
                        <declaration name="v" type="ArrayRealVector" line="461"/>
                        <declaration name="vData" type="double[]" line="462"/>
                        <declaration name="s" type="double" line="463"/>
                        <scope line="464"/>
                    </scope>
                </method>
                <javadoc line="472">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="RealMatrix" line="473">
                    <params>
                        <param name="b" type="RealMatrix"/>
                    </params>
                    <scope line="475"/>
                    <declaration name="m" type="int" line="479"/>
                    <scope line="480"/>
                    <declaration name="nColB" type="int" line="484"/>
                    <declaration name="bp" type="double[][]" line="485"/>
                    <declaration name="tmpCol" type="double[]" line="486"/>
                    <scope line="487">
                        <scope line="488"/>
                        <scope line="492">
                            <declaration name="v" type="ArrayRealVector" line="493"/>
                            <declaration name="vData" type="double[]" line="494"/>
                            <declaration name="s" type="double" line="495"/>
                            <scope line="496"/>
                            <scope line="500"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="510">
                    Checks whether the decomposed matrix is non-singular.                    
                    <return>
                        true if the decomposed matrix is non-singular.                        
                    </return>
                </javadoc>
                <method name="isNonSingular" type="boolean" line="515">
                    <comment line="518">
                        Looping over all values (in case they are not sorted in decreasing
                         order of their norm).                        
                    </comment>
                    <comment line="523">
                        Corner case: zero matrix, all exactly 0 eigenvalues                        
                    </comment>
                    <comment line="528">
                        Looking for eigenvalues that are 0, where we consider anything much much smaller
                         than the largest eigenvalue to be effectively 0.                        
                    </comment>
                    <declaration name="largestEigenvalueNorm" type="double" line="516"/>
                    <scope line="519"/>
                    <scope line="523"/>
                    <scope line="526">
                        <scope line="529"/>
                    </scope>
                </method>
                <javadoc line="536">
                    @param i which eigenvalue to find the norm of                    
                    <return>
                        the norm of ith (complex) eigenvalue.                        
                    </return>
                </javadoc>
                <method name="eigenvalueNorm" type="double" line="540">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="re" type="double" line="541"/>
                    <declaration name="im" type="double" line="542"/>
                </method>
                <javadoc line="546">
                    Get the inverse of the decomposed matrix.                    
                    <return>
                        the inverse matrix.                        
                    </return>
                    <throws>
                        SingularMatrixException if the decomposed matrix is singular.                        
                    </throws>
                </javadoc>
                <method name="getInverse" type="RealMatrix" line="552">
                    <scope line="553"/>
                    <declaration name="m" type="int" line="557"/>
                    <declaration name="invData" type="double[][]" line="558"/>
                    <scope line="560">
                        <declaration name="invI" type="double[]" line="561"/>
                        <scope line="562">
                            <declaration name="invIJ" type="double" line="563"/>
                            <scope line="564">
                                <declaration name="vK" type="double[]" line="565"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="575">
                Transforms the matrix to tridiagonal form.                
                <param>
                    matrix Matrix to transform.                    
                </param>
            </javadoc>
            <method name="transformToTridiagonal" type="void" line="580">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <comment line="582">
                    transform the matrix to tridiagonal                    
                </comment>
            </method>
            <javadoc line="587">
                Find eigenvalues and eigenvectors (Dubrulle et al., 1971)                
                <param>
                    householderMatrix Householder matrix of the transformation
                      to tridiagonal form.                    
                </param>
            </javadoc>
            <method name="findEigenVectors" type="void" line="593">
                <params>
                    <param name="householderMatrix" type="double[][]"/>
                </params>
                <comment line="607">
                    Determine the largest main and secondary value in absolute term.                    
                </comment>
                <comment line="617">
                    Make null any main and secondary value too small to be significant                    
                </comment>
                <comment line="699">
                    Sort the eigen values (and vectors) in increase order                    
                </comment>
                <comment line="720">
                    Determine the largest eigen value in absolute term.                    
                </comment>
                <comment line="727">
                    Make null any eigen value too small to be significant                    
                </comment>
                <declaration name="z" type="double[][]" line="594"/>
                <declaration name="n" type="int" line="595"/>
                <declaration name="e" type="double[]" line="598"/>
                <scope line="599"/>
                <declaration name="maxAbsoluteValue" type="double" line="607"/>
                <scope line="608">
                    <scope line="609"/>
                    <scope line="612"/>
                </scope>
                <scope line="617">
                    <scope line="618">
                        <scope line="619"/>
                        <scope line="622"/>
                    </scope>
                </scope>
                <scope line="628">
                    <declaration name="its" type="int" line="629"/>
                    <declaration name="m" type="int" line="630"/>
                    <scope line="631">
                        <scope line="632">
                            <declaration name="delta" type="double" line="633"/>
                            <scope line="635"/>
                        </scope>
                        <scope line="639">
                            <scope line="640"/>
                            <declaration name="q" type="double" line="645"/>
                            <declaration name="t" type="double" line="646"/>
                            <scope line="647"/>
                            <scope line="649"/>
                            <declaration name="u" type="double" line="652"/>
                            <declaration name="s" type="double" line="653"/>
                            <declaration name="c" type="double" line="654"/>
                            <declaration name="i" type="int" line="655"/>
                            <scope line="656">
                                <declaration name="p" type="double" line="657"/>
                                <declaration name="h" type="double" line="658"/>
                                <scope line="659"/>
                                <scope line="665"/>
                                <scope line="672"/>
                                <scope line="682"/>
                            </scope>
                            <scope line="688"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="699">
                    <declaration name="k" type="int" line="700"/>
                    <declaration name="p" type="double" line="701"/>
                    <scope line="702">
                        <scope line="703"/>
                    </scope>
                    <scope line="708">
                        <scope line="711"/>
                    </scope>
                </scope>
                <scope line="721">
                    <scope line="722"/>
                </scope>
                <scope line="727">
                    <scope line="728">
                        <scope line="729"/>
                    </scope>
                </scope>
                <declaration name="tmp" type="double[]" line="735"/>
                <scope line="736">
                    <scope line="737"/>
                </scope>
            </method>
            <javadoc line="744">
                Transforms the matrix to Schur form and calculates the eigenvalues.                
                <param>
                    matrix Matrix to transform.                    
                </param>
                <return>
                    the {@link SchurTransformer Shur transform} for this matrix                    
                </return>
            </javadoc>
            <method name="transformToSchur" type="SchurTransformer" line="750">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="schurTransform" type="SchurTransformer" line="751"/>
                <declaration name="matT" type="double[][]" line="752"/>
                <scope line="757">
                    <scope line="759"/>
                    <scope line="761">
                        <declaration name="x" type="double" line="762"/>
                        <declaration name="p" type="double" line="763"/>
                        <declaration name="z" type="double" line="764"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="775">
                Performs a division of two complex numbers.                
                <param>
                    xr real part of the first number                    
                </param>
                <param>
                    xi imaginary part of the first number                    
                </param>
                <param>
                    yr real part of the second number                    
                </param>
                <param>
                    yi imaginary part of the second number                    
                </param>
                <return>
                    result of the complex division                    
                </return>
            </javadoc>
            <method name="cdiv" type="Complex" line="785">
                <params>
                    <param name="xr" type="double"/>
                    <param name="xi" type="double"/>
                    <param name="yr" type="double"/>
                    <param name="yi" type="double"/>
                </params>
            </method>
            <javadoc line="789">
                Find eigenvectors from a matrix transformed to Schur form.                
                <param>
                    schur the schur transformation of the matrix                    
                </param>
                <throws>
                    MathArithmeticException if the Schur form has a norm of zero                    
                </throws>
            </javadoc>
            <method name="findEigenVectorsFromSchur" type="void" line="796">
                <params>
                    <param name="schur" type="SchurTransformer"/>
                </params>
                <comment line="803">
                    compute matrix norm                    
                </comment>
                <comment line="811">
                    we can not handle a matrix with zero norm                    
                </comment>
                <comment line="816">
                    Backsubstitute to find vectors of upper triangular form                    
                </comment>
                <comment line="827">
                    Real vector                    
                </comment>
                <comment line="848">
                    Solve real equations                    
                </comment>
                <comment line="862">
                    Overflow control                    
                </comment>
                <comment line="872">
                    Complex vector                    
                </comment>
                <comment line="875">
                    Last vector component imaginary so matrix is triangular                    
                </comment>
                <comment line="909">
                    Solve complex equations                    
                </comment>
                <comment line="938">
                    Overflow control                    
                </comment>
                <comment line="952">
                    Back transformation to get eigenvectors of original matrix                    
                </comment>
                <declaration name="matrixT" type="double[][]" line="797"/>
                <declaration name="matrixP" type="double[][]" line="798"/>
                <declaration name="n" type="int" line="800"/>
                <declaration name="norm" type="double" line="803"/>
                <scope line="804">
                    <scope line="805"/>
                </scope>
                <scope line="811"/>
                <declaration name="r" type="double" line="817"/>
                <declaration name="s" type="double" line="818"/>
                <declaration name="z" type="double" line="819"/>
                <scope line="821">
                    <declaration name="p" type="double" line="822"/>
                    <declaration name="q" type="double" line="823"/>
                    <scope line="825">
                        <declaration name="l" type="int" line="827"/>
                        <scope line="829">
                            <declaration name="w" type="double" line="830"/>
                            <scope line="832"/>
                            <scope line="835"/>
                            <scope line="838">
                                <scope line="840">
                                    <scope line="841"/>
                                    <scope line="843"/>
                                </scope>
                                <scope line="846">
                                    <declaration name="x" type="double" line="848"/>
                                    <declaration name="y" type="double" line="849"/>
                                    <declaration name="t" type="double" line="852"/>
                                    <scope line="854"/>
                                    <scope line="856"/>
                                </scope>
                                <declaration name="t" type="double" line="862"/>
                                <scope line="863">
                                    <scope line="864"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="870">
                        <declaration name="l" type="int" line="872"/>
                        <scope line="875"/>
                        <scope line="878">
                            <declaration name="result" type="Complex" line="879"/>
                        </scope>
                        <scope line="888">
                            <declaration name="ra" type="double" line="889"/>
                            <declaration name="sa" type="double" line="890"/>
                            <scope line="891"/>
                            <declaration name="w" type="double" line="895"/>
                            <scope line="897"/>
                            <scope line="901">
                                <scope line="903">
                                    <declaration name="c" type="Complex" line="904"/>
                                </scope>
                                <scope line="907">
                                    <declaration name="x" type="double" line="909"/>
                                    <declaration name="y" type="double" line="910"/>
                                    <declaration name="vr" type="double" line="911"/>
                                    <declaration name="vi" type="double" line="913"/>
                                    <scope line="914"/>
                                    <declaration name="c" type="Complex" line="919"/>
                                    <scope line="924"/>
                                    <scope line="929">
                                        <declaration name="c2" type="Complex" line="930"/>
                                    </scope>
                                </scope>
                                <declaration name="t" type="double" line="938"/>
                                <scope line="940">
                                    <scope line="941"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="952">
                    <scope line="953">
                        <scope line="955"/>
                    </scope>
                </scope>
                <declaration name="tmp" type="double[]" line="963"/>
                <scope line="964">
                    <scope line="965"/>
                </scope>
            </method>
        </class>
    </source>