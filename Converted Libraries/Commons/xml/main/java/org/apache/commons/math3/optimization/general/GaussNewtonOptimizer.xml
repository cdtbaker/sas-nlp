<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.general">
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.linear.DecompositionSolver"/>
        <import package="org.apache.commons.math3.linear.LUDecomposition"/>
        <import package="org.apache.commons.math3.linear.QRDecomposition"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.SingularMatrixException"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optimization.SimpleVectorValueChecker"/>
        <import package="org.apache.commons.math3.optimization.PointVectorValuePair"/>
        <class name="GaussNewtonOptimizer" line="16">
            <extends class="AbstractLeastSquaresOptimizer"/>
            <javadoc line="16">
                Gauss-Newton least-squares solver.
                  &lt;p&gt;
                  This class solve a least-square problem by solving the normal equations
                  of the linearized problem at each iteration. Either LU decomposition or
                  QR decomposition can be used to solve the normal equations. LU decomposition
                  is faster but QR decomposition is more robust for difficult problems.
                  &lt;/p&gt;                
                <version>
                    $Id: GaussNewtonOptimizer.java 1423687 2012-12-18 21:56:18Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="useLU" type="boolean" line="29"/>
            <javadoc line="29">
                Indicator for using LU decomposition.                
            </javadoc>
            <javadoc line="33">
                Simple constructor with default settings.
                  The normal equations will be solved using LU decomposition and the
                  convergence check is set to a {@link SimpleVectorValueChecker}with default tolerances.                
                <deprecated>
                    See {@link SimpleVectorValueChecker#SimpleVectorValueChecker()}                    
                </deprecated>
            </javadoc>
            <method name="GaussNewtonOptimizer" type="constructor" line="39"/>
            <javadoc line="42">
                Simple constructor with default settings.
                  The normal equations will be solved using LU decomposition.                
                <param>
                    checker Convergence checker.                    
                </param>
            </javadoc>
            <method name="GaussNewtonOptimizer" type="constructor" line="47">
                <params>
                    <param name="checker" type="ConvergenceChecker<PointVectorValuePair>"/>
                </params>
            </method>
            <javadoc line="50">
                Simple constructor with default settings.
                  The convergence check is set to a {@link SimpleVectorValueChecker}with default tolerances.                
                <param>
                    useLU If {@code true}, the normal equations will be solved
                      using LU decomposition, otherwise they will be solved using QR
                      decomposition.                    
                </param>
                <deprecated>
                    See {@link SimpleVectorValueChecker#SimpleVectorValueChecker()}                    
                </deprecated>
            </javadoc>
            <method name="GaussNewtonOptimizer" type="constructor" line="58">
                <params>
                    <param name="useLU" type="boolean"/>
                </params>
            </method>
            <javadoc line="61">
                @param useLU If {@code true}, the normal equations will be solved
                  using LU decomposition, otherwise they will be solved using QR
                  decomposition.                
                <param>
                    checker Convergence checker.                    
                </param>
            </javadoc>
            <method name="GaussNewtonOptimizer" type="constructor" line="67">
                <params>
                    <param name="useLU" type="boolean"/>
                    <param name="checker" type="ConvergenceChecker<PointVectorValuePair>"/>
                </params>
            </method>
            <javadoc line="71">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointVectorValuePair" line="74">
                <declaration name="checker" type="ConvergenceChecker&lt;PointVectorValuePair&gt;" line="75"/>
                <scope line="76"/>
                <declaration name="targetValues" type="double[]" line="79"/>
                <declaration name="nR" type="int" line="80"/>
                <declaration name="weightMatrix" type="RealMatrix" line="81"/>
                <declaration name="residualsWeights" type="double[]" line="82"/>
                <scope line="83"/>
                <declaration name="currentPoint" type="double[]" line="86"/>
                <declaration name="nC" type="int" line="87"/>
                <declaration name="current" type="PointVectorValuePair" line="88"/>
                <declaration name="iter" type="int" line="89"/>
                <scope line="90">
                    <declaration name="previous" type="PointVectorValuePair" line="92"/>
                    <declaration name="currentObjective" type="double[]" line="93"/>
                    <declaration name="currentResiduals" type="double[]" line="94"/>
                    <declaration name="weightedJacobian" type="RealMatrix" line="95"/>
                    <declaration name="b" type="double[]" line="97"/>
                    <declaration name="a" type="double[][]" line="98"/>
                    <scope line="99">
                        <declaration name="grad" type="double[]" line="100"/>
                        <declaration name="weight" type="double" line="101"/>
                        <declaration name="residual" type="double" line="102"/>
                        <declaration name="wr" type="double" line="103"/>
                        <scope line="104"/>
                        <scope line="107">
                            <declaration name="ak" type="double[]" line="108"/>
                            <declaration name="wgk" type="double" line="109"/>
                            <scope line="110"/>
                        </scope>
                    </scope>
                    <scope line="115">
                        <declaration name="mA" type="RealMatrix" line="116"/>
                        <declaration name="solver" type="DecompositionSolver" line="117"/>
                        <declaration name="dX" type="double[]" line="118"/>
                        <scope line="119"/>
                    </scope>
                    <scope line="123"/>
                    <scope line="126">
                        <scope line="128"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>