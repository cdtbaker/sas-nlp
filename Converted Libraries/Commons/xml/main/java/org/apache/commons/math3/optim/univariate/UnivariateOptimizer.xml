<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.univariate">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.optim.BaseOptimizer"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <class name="UnivariateOptimizer" line="8">
            <extends class="BaseOptimizer">
                <type_params>
                    <type_param name="UnivariatePointValuePair"/>
                </type_params>
            </extends>
            <javadoc line="8">
                Base class for a univariate scalar function optimizer.                
                <version>
                    $Id: UnivariateOptimizer.java 1443444 2013-02-07 12:41:36Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="function" type="UnivariateFunction" line="14"/>
            <javadoc line="14">
                Objective function.                
            </javadoc>
            <declaration name="goal" type="GoalType" line="18"/>
            <javadoc line="18">
                Type of optimization.                
            </javadoc>
            <declaration name="start" type="double" line="22"/>
            <javadoc line="22">
                Initial guess.                
            </javadoc>
            <declaration name="min" type="double" line="26"/>
            <javadoc line="26">
                Lower bound.                
            </javadoc>
            <declaration name="max" type="double" line="30"/>
            <javadoc line="30">
                Upper bound.                
            </javadoc>
            <javadoc line="34">
                @param checker Convergence checker.                
            </javadoc>
            <method name="UnivariateOptimizer" type="constructor" line="37">
                <params>
                    <param name="checker" type="ConvergenceChecker<UnivariatePointValuePair>"/>
                </params>
            </method>
            <javadoc line="40">
                {@inheritDoc}                
                <param>
                    optData Optimization data. In addition to those documented in{@link BaseOptimizer#parseOptimizationData(OptimizationData[])BaseOptimizer}, this method will register the following data:
                      <ul>
                      <li>{@link GoalType}</li>
                      <li>{@link SearchInterval}</li>
                      <li>{@link UnivariateObjectiveFunction}</li>
                      </ul>                    
                </param>
                <return>
                    {@inheritDoc}                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="optimize" type="UnivariatePointValuePair" line="52">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <javadoc line="55">
                @return the optimization type.                
            </javadoc>
            <method name="getGoalType" type="GoalType" line="58"/>
            <javadoc line="61">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data.
                      The following data will be looked for:
                      <ul>
                      <li>{@link GoalType}</li>
                      <li>{@link SearchInterval}</li>
                      <li>{@link UnivariateObjectiveFunction}</li>
                      </ul>                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="72">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <scope line="74">
                    <scope line="75">
                        <declaration name="interval" type="SearchInterval" line="76"/>
                    </scope>
                    <scope line="82"/>
                    <scope line="86"/>
                </scope>
            </method>
            <javadoc line="92">
                @return the initial guess.                
            </javadoc>
            <method name="getStartValue" type="double" line="95"/>
            <javadoc line="98">
                @return the lower bounds.                
            </javadoc>
            <method name="getMin" type="double" line="101"/>
            <javadoc line="104">
                @return the upper bounds.                
            </javadoc>
            <method name="getMax" type="double" line="107"/>
            <javadoc line="110">
                Computes the objective function value.
                  This method &lt;em&gt;must&lt;/em&gt; be called by subclasses to enforce the
                  evaluation counter limit.                
                <param>
                    x Point at which the objective function must be evaluated.                    
                </param>
                <return>
                    the objective function value at the specified point.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="computeObjectiveValue" type="double" line="119">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
        </class>
    </source>