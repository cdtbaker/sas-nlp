<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.math.BigInteger"/>
        <import package="java.util.concurrent.atomic.AtomicReference"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.Localizable"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="ArithmeticUtils" line="9">
            <javadoc line="9">
                Some useful, arithmetics related, additions to the built-in functions in{@link Math}.                
                <version>
                    $Id: ArithmeticUtils.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="FACTORIALS" type="long[]" line="14"/>
            <javadoc line="14">
                All long-representable factorials                
            </javadoc>
            <declaration name="STIRLING_S2" type="AtomicReference&lt;long[][]&gt;" line="18"/>
            <javadoc line="18">
                Stirling numbers of the second kind.                
            </javadoc>
            <javadoc line="22">
                Private constructor.                
            </javadoc>
            <method name="ArithmeticUtils" type="constructor" line="25"/>
            <javadoc line="28">
                Add two integers, checking for overflow.                
                <param>
                    x an addend                    
                </param>
                <param>
                    y an addend                    
                </param>
                <return>
                    the sum {@code x+y}                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented
                      as an {@code int}.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="addAndCheck" type="int" line="37">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="s" type="long" line="38"/>
                <scope line="39"/>
            </method>
            <javadoc line="44">
                Add two long integers, checking for overflow.                
                <param>
                    a an addend                    
                </param>
                <param>
                    b an addend                    
                </param>
                <return>
                    the sum {@code a+b}                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented as an
                      long                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="addAndCheck" type="long" line="53">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
            </method>
            <javadoc line="56">
                Returns an exact representation of the &lt;a
                  href=&quot;http://mathworld.wolfram.com/BinomialCoefficient.html&quot;&gt; Binomial
                  Coefficient&lt;/a&gt;, &quot;{@code n choose k}&quot;, the number of{@code k}-element subsets that can be selected from an{@code n}-element set.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;li&gt; The result is small enough to fit into a {@code long}. The
                  largest value of {@code n} for which all coefficients are{@code  &lt; Long.MAX_VALUE} is 66. If the computed value exceeds{@code Long.MAX_VALUE} an {@code ArithMeticException} is
                  thrown.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the size of the subsets to be counted                    
                </param>
                <return>
                    {@code n choose k}                    
                </return>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k > n}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result is too large to be
                      represented by a long integer.                    
                </throws>
            </javadoc>
            <method name="binomialCoefficient" type="long" line="76">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <scope line="78"/>
                <scope line="81"/>
                <scope line="84"/>
                <declaration name="result" type="long" line="87"/>
                <scope line="88">
                    <declaration name="i" type="int" line="89"/>
                    <scope line="90"/>
                </scope>
                <scope line="95">
                    <declaration name="i" type="int" line="96"/>
                    <scope line="97">
                        <declaration name="d" type="long" line="98"/>
                    </scope>
                </scope>
                <scope line="103">
                    <declaration name="i" type="int" line="104"/>
                    <scope line="105">
                        <declaration name="d" type="long" line="106"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="113">
                Returns a {@code double} representation of the &lt;a
                  href=&quot;http://mathworld.wolfram.com/BinomialCoefficient.html&quot;&gt; Binomial
                  Coefficient&lt;/a&gt;, &quot;{@code n choose k}&quot;, the number of{@code k}-element subsets that can be selected from an{@code n}-element set.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;li&gt; The result is small enough to fit into a {@code double}. The
                  largest value of {@code n} for which all coefficients are &lt;
                  Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,
                  Double.POSITIVE_INFINITY is returned&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the size of the subsets to be counted                    
                </param>
                <return>
                    {@code n choose k}                    
                </return>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k > n}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result is too large to be
                      represented by a long integer.                    
                </throws>
            </javadoc>
            <method name="binomialCoefficientDouble" type="double" line="134">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <scope line="136"/>
                <scope line="139"/>
                <scope line="142"/>
                <scope line="145"/>
                <declaration name="result" type="double" line="148"/>
                <scope line="149"/>
            </method>
            <javadoc line="154">
                Returns the natural {@code log} of the &lt;a
                  href=&quot;http://mathworld.wolfram.com/BinomialCoefficient.html&quot;&gt; Binomial
                  Coefficient&lt;/a&gt;, &quot;{@code n choose k}&quot;, the number of{@code k}-element subsets that can be selected from an{@code n}-element set.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the size of the subsets to be counted                    
                </param>
                <return>
                    {@code n choose k}                    
                </return>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k > n}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result is too large to be
                      represented by a long integer.                    
                </throws>
            </javadoc>
            <method name="binomialCoefficientLog" type="double" line="171">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <scope line="173"/>
                <scope line="176"/>
                <scope line="179"/>
                <scope line="182"/>
                <scope line="185"/>
                <declaration name="logSum" type="double" line="188"/>
                <scope line="189"/>
                <scope line="192"/>
            </method>
            <javadoc line="197">
                Returns n!. Shorthand for {@code n} &lt;a
                  href=&quot;http://mathworld.wolfram.com/Factorial.html&quot;&gt; Factorial&lt;/a&gt;, the
                  product of the numbers {@code 1,...,n}.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code n &gt;= 0} (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;li&gt; The result is small enough to fit into a {@code long}. The
                  largest value of {@code n} for which {@code n!} &lt;
                  Long.MAX_VALUE} is 20. If the computed value exceeds {@code Long.MAX_VALUE}an {@code ArithMeticException } is thrown.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    n argument                    
                </param>
                <return>
                    {@code n!}                    
                </return>
                <throws>
                    MathArithmeticException if the result is too large to be represented
                      by a {@code long}.                    
                </throws>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
                <throws>
                    MathArithmeticException if {@code n > 20}: The factorial value is too
                      large to fit in a {@code long}.                    
                </throws>
            </javadoc>
            <method name="factorial" type="long" line="218">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="219"/>
                <scope line="222"/>
            </method>
            <javadoc line="227">
                Compute n!, the&lt;a href=&quot;http://mathworld.wolfram.com/Factorial.html&quot;&gt;
                  factorial&lt;/a&gt; of {@code n} (the product of the numbers 1 to n), as a{@code double}.
                  The result should be small enough to fit into a {@code double}: The
                  largest {@code n} for which {@code n! &lt; Double.MAX_VALUE} is 170.
                  If the computed value exceeds {@code Double.MAX_VALUE},{@code Double.POSITIVE_INFINITY} is returned.                
                <param>
                    n Argument.                    
                </param>
                <return>
                    {@code n!}                    
                </return>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
            </javadoc>
            <method name="factorialDouble" type="double" line="237">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="238"/>
                <scope line="241"/>
            </method>
            <javadoc line="246">
                Compute the natural logarithm of the factorial of {@code n}.                
                <param>
                    n Argument.                    
                </param>
                <return>
                    {@code n!}                    
                </return>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
            </javadoc>
            <method name="factorialLog" type="double" line="252">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="253"/>
                <scope line="256"/>
                <declaration name="logSum" type="double" line="259"/>
                <scope line="260"/>
            </method>
            <javadoc line="265">
                Computes the greatest common divisor of the absolute value of two
                  numbers, using a modified version of the &quot;binary gcd&quot; method.
                  See Knuth 4.5.2 algorithm B.
                  The algorithm is due to Josef Stein (1961).
                  &lt;br/&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations{@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},{@code gcd(Integer.MIN_VALUE, 0)} and{@code gcd(0, Integer.MIN_VALUE)} throw an{@code ArithmeticException}, because the result would be 2^31, which
                  is too large for an int value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code gcd(x, x)}, {@code gcd(0, x)} and{@code gcd(x, 0)} is the absolute value of {@code x}, except
                  for the special cases above.&lt;/li&gt;
                  &lt;li&gt;The invocation {@code gcd(0, 0)} is the only one which returns{@code 0}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    p Number.                    
                </param>
                <param>
                    q Number.                    
                </param>
                <return>
                    the greatest common divisor (never negative).                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented as
                      a non-negative {@code int} value.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="gcd" type="int" line="286">
                <params>
                    <param name="p" type="int"/>
                    <param name="q" type="int"/>
                </params>
                <declaration name="a" type="int" line="287"/>
                <declaration name="b" type="int" line="288"/>
                <scope line="289">
                    <scope line="290"/>
                </scope>
                <declaration name="al" type="long" line="295"/>
                <declaration name="bl" type="long" line="296"/>
                <declaration name="useLong" type="boolean" line="297"/>
                <scope line="298">
                    <scope line="299"/>
                    <scope line="302"/>
                </scope>
                <scope line="307">
                    <scope line="308"/>
                    <scope line="311"/>
                </scope>
                <scope line="316">
                    <scope line="317"/>
                    <declaration name="blbu" type="long" line="320"/>
                    <scope line="323">
                        <scope line="324"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="335">
                Computes the greatest common divisor of two &lt;em&gt;positive&lt;/em&gt; numbers
                  (this precondition is &lt;em&gt;not&lt;/em&gt; checked and the result is undefined
                  if not fulfilled) using the &quot;binary gcd&quot; method which avoids division
                  and modulo operations.
                  See Knuth 4.5.2 algorithm B.
                  The algorithm is due to Josef Stein (1961).
                  &lt;br/&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The result of {@code gcd(x, x)}, {@code gcd(0, x)} and{@code gcd(x, 0)} is the value of {@code x}.&lt;/li&gt;
                  &lt;li&gt;The invocation {@code gcd(0, 0)} is the only one which returns{@code 0}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    a Positive number.                    
                </param>
                <param>
                    b Positive number.                    
                </param>
                <return>
                    the greatest common divisor.                    
                </return>
            </javadoc>
            <method name="gcdPositive" type="int" line="352">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <scope line="353"/>
                <scope line="356"/>
                <declaration name="aTwos" type="int" line="359"/>
                <declaration name="bTwos" type="int" line="361"/>
                <declaration name="shift" type="int" line="363"/>
                <scope line="364">
                    <declaration name="delta" type="int" line="365"/>
                </scope>
            </method>
            <javadoc line="372">
                &lt;p&gt;
                  Gets the greatest common divisor of the absolute value of two numbers,
                  using the &quot;binary gcd&quot; method which avoids division and modulo
                  operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
                  Stein (1961).
                  &lt;/p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations{@code gcd(Long.MIN_VALUE, Long.MIN_VALUE)},{@code gcd(Long.MIN_VALUE, 0L)} and{@code gcd(0L, Long.MIN_VALUE)} throw an{@code ArithmeticException}, because the result would be 2^63, which
                  is too large for a long value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code gcd(x, x)}, {@code gcd(0L, x)} and{@code gcd(x, 0L)} is the absolute value of {@code x}, except
                  for the special cases above.
                  &lt;li&gt;The invocation {@code gcd(0L, 0L)} is the only one which returns{@code 0L}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    p Number.                    
                </param>
                <param>
                    q Number.                    
                </param>
                <return>
                    the greatest common divisor, never negative.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented as
                      a non-negative {@code long} value.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="gcd" type="long" line="394">
                <params>
                    <param name="p" type="long"/>
                    <param name="q" type="long"/>
                </params>
                <declaration name="u" type="long" line="395"/>
                <declaration name="v" type="long" line="396"/>
                <scope line="397">
                    <scope line="398"/>
                </scope>
                <scope line="403"/>
                <scope line="406"/>
                <declaration name="k" type="int" line="409"/>
                <scope line="410"/>
                <scope line="415"/>
                <declaration name="t" type="long" line="418"/>
                <scope line="419">
                    <scope line="420"/>
                    <scope line="423"/>
                    <scope line="426"/>
                </scope>
            </method>
            <javadoc line="434">
                &lt;p&gt;
                  Returns the least common multiple of the absolute value of two numbers,
                  using the formula {@code lcm(a,b) = (a / gcd(a,b))  b}.
                  &lt;/p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations {@code lcm(Integer.MIN_VALUE, n)} and{@code lcm(n, Integer.MIN_VALUE)}, where {@code abs(n)} is a
                  power of 2, throw an {@code ArithmeticException}, because the result
                  would be 2^31, which is too large for an int value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code lcm(0, x)} and {@code lcm(x, 0)} is{@code 0} for any {@code x}.
                  &lt;/ul&gt;                
                <param>
                    a Number.                    
                </param>
                <param>
                    b Number.                    
                </param>
                <return>
                    the least common multiple, never negative.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented as
                      a non-negative {@code int} value.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="lcm" type="int" line="453">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <scope line="454"/>
                <declaration name="lcm" type="int" line="457"/>
                <scope line="458"/>
            </method>
            <javadoc line="463">
                &lt;p&gt;
                  Returns the least common multiple of the absolute value of two numbers,
                  using the formula {@code lcm(a,b) = (a / gcd(a,b))  b}.
                  &lt;/p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations {@code lcm(Long.MIN_VALUE, n)} and{@code lcm(n, Long.MIN_VALUE)}, where {@code abs(n)} is a
                  power of 2, throw an {@code ArithmeticException}, because the result
                  would be 2^63, which is too large for an int value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code lcm(0L, x)} and {@code lcm(x, 0L)} is{@code 0L} for any {@code x}.
                  &lt;/ul&gt;                
                <param>
                    a Number.                    
                </param>
                <param>
                    b Number.                    
                </param>
                <return>
                    the least common multiple, never negative.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented
                      as a non-negative {@code long} value.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="lcm" type="long" line="482">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <scope line="483"/>
                <declaration name="lcm" type="long" line="486"/>
                <scope line="487"/>
            </method>
            <javadoc line="492">
                Multiply two integers, checking for overflow.                
                <param>
                    x Factor.                    
                </param>
                <param>
                    y Factor.                    
                </param>
                <return>
                    the product {@code x  y}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be
                      represented as an {@code int}.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="mulAndCheck" type="int" line="501">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="m" type="long" line="502"/>
                <scope line="503"/>
            </method>
            <javadoc line="508">
                Multiply two long integers, checking for overflow.                
                <param>
                    a Factor.                    
                </param>
                <param>
                    b Factor.                    
                </param>
                <return>
                    the product {@code a  b}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented
                      as a {@code long}.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="mulAndCheck" type="long" line="517">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <declaration name="ret" type="long" line="518"/>
                <scope line="519"/>
                <scope line="522">
                    <scope line="523">
                        <scope line="524">
                            <scope line="525"/>
                            <scope line="528"/>
                        </scope>
                        <scope line="532">
                            <scope line="533"/>
                            <scope line="536"/>
                        </scope>
                        <scope line="540"/>
                    </scope>
                    <scope line="544">
                        <scope line="545"/>
                        <scope line="548"/>
                    </scope>
                    <scope line="552"/>
                </scope>
            </method>
            <javadoc line="558">
                Subtract two integers, checking for overflow.                
                <param>
                    x Minuend.                    
                </param>
                <param>
                    y Subtrahend.                    
                </param>
                <return>
                    the difference {@code x - y}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented
                      as an {@code int}.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="subAndCheck" type="int" line="567">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="s" type="long" line="568"/>
                <scope line="569"/>
            </method>
            <javadoc line="574">
                Subtract two long integers, checking for overflow.                
                <param>
                    a Value.                    
                </param>
                <param>
                    b Value.                    
                </param>
                <return>
                    the difference {@code a - b}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented as a{@code long}.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="subAndCheck" type="long" line="582">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <declaration name="ret" type="long" line="583"/>
                <scope line="584">
                    <scope line="585"/>
                    <scope line="588"/>
                </scope>
                <scope line="592"/>
            </method>
            <javadoc line="597">
                Raise an int to an int power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="int" line="604">
                <params>
                    <param name="k" type="int"/>
                    <param name="e" type="int"/>
                </params>
                <scope line="605"/>
                <declaration name="result" type="int" line="608"/>
                <declaration name="k2p" type="int" line="609"/>
                <scope line="610">
                    <scope line="611"/>
                </scope>
            </method>
            <javadoc line="619">
                Raise an int to a long power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="int" line="626">
                <params>
                    <param name="k" type="int"/>
                    <param name="e" type="long"/>
                </params>
                <scope line="627"/>
                <declaration name="result" type="int" line="630"/>
                <declaration name="k2p" type="int" line="631"/>
                <scope line="632">
                    <scope line="633"/>
                </scope>
            </method>
            <javadoc line="641">
                Raise a long to an int power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="long" line="648">
                <params>
                    <param name="k" type="long"/>
                    <param name="e" type="int"/>
                </params>
                <scope line="649"/>
                <declaration name="result" type="long" line="652"/>
                <declaration name="k2p" type="long" line="653"/>
                <scope line="654">
                    <scope line="655"/>
                </scope>
            </method>
            <javadoc line="663">
                Raise a long to a long power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="long" line="670">
                <params>
                    <param name="k" type="long"/>
                    <param name="e" type="long"/>
                </params>
                <scope line="671"/>
                <declaration name="result" type="long" line="674"/>
                <declaration name="k2p" type="long" line="675"/>
                <scope line="676">
                    <scope line="677"/>
                </scope>
            </method>
            <javadoc line="685">
                Raise a BigInteger to an int power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="BigInteger" line="692">
                <params>
                    <param name="k" type="BigInteger"/>
                    <param name="e" type="int"/>
                </params>
                <scope line="693"/>
            </method>
            <javadoc line="698">
                Raise a BigInteger to a long power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="BigInteger" line="705">
                <params>
                    <param name="k" type="BigInteger"/>
                    <param name="e" type="long"/>
                </params>
                <scope line="706"/>
                <declaration name="result" type="BigInteger" line="709"/>
                <declaration name="k2p" type="BigInteger" line="710"/>
                <scope line="711">
                    <scope line="712"/>
                </scope>
            </method>
            <javadoc line="720">
                Raise a BigInteger to a BigInteger power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="BigInteger" line="727">
                <params>
                    <param name="k" type="BigInteger"/>
                    <param name="e" type="BigInteger"/>
                </params>
                <scope line="728"/>
                <declaration name="result" type="BigInteger" line="731"/>
                <declaration name="k2p" type="BigInteger" line="732"/>
                <scope line="733">
                    <scope line="734"/>
                </scope>
            </method>
            <javadoc line="742">
                Returns the &lt;a
                  href=&quot;http://mathworld.wolfram.com/StirlingNumberoftheSecondKind.html&quot;&gt;
                  Stirling number of the second kind&lt;/a&gt;, &quot;{@code S(n,k)}&quot;, the number of
                  ways of partitioning an {@code n}-element set into {@code k} non-empty
                  subsets.
                  &lt;p&gt;
                  The preconditions are {@code 0 &lt;= k &lt;= n } (otherwise{@code NotPositiveException} is thrown)
                  &lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the number of non-empty subsets                    
                </param>
                <return>
                    {@code S(n,k)}                    
                </return>
                <throws>
                    NotPositiveException if {@code k < 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k > n}.                    
                </throws>
                <throws>
                    MathArithmeticException if some overflow happens, typically for n exceeding 25 and
                      k between 20 and n-2 (S(n,n-1) is handled specifically and does not overflow)                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="stirlingS2" type="long" line="760">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <scope line="761"/>
                <scope line="764"/>
                <declaration name="stirlingS2" type="long[][]" line="767"/>
                <scope line="768">
                    <declaration name="maxIndex" type="int" line="769"/>
                    <scope line="772">
                        <scope line="777"/>
                    </scope>
                </scope>
                <scope line="783"/>
                <scope line="786">
                    <scope line="787"/>
                    <scope line="790"/>
                    <scope line="793"/>
                    <scope line="796"/>
                    <scope line="799">
                        <declaration name="sum" type="long" line="800"/>
                        <declaration name="sign" type="long" line="801"/>
                        <scope line="802">
                            <scope line="805"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="813">
                Add two long integers, checking for overflow.                
                <param>
                    a Addend.                    
                </param>
                <param>
                    b Addend.                    
                </param>
                <param>
                    pattern Pattern to use for any thrown exception.                    
                </param>
                <return>
                    the sum {@code a + b}.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented
                      as a {@code long}.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="addAndCheck" type="long" line="823">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                    <param name="pattern" type="Localizable"/>
                </params>
                <declaration name="ret" type="long" line="824"/>
                <scope line="825"/>
                <scope line="828">
                    <scope line="829">
                        <scope line="830">
                            <scope line="831"/>
                            <scope line="834"/>
                        </scope>
                        <scope line="838"/>
                    </scope>
                    <scope line="842">
                        <scope line="843"/>
                        <scope line="846"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="853">
                Check binomial preconditions.                
                <param>
                    n Size of the set.                    
                </param>
                <param>
                    k Size of the subsets to be counted.                    
                </param>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k > n}.                    
                </throws>
            </javadoc>
            <method name="checkBinomial" type="void" line="860">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <scope line="861"/>
                <scope line="864"/>
            </method>
            <javadoc line="868">
                Returns true if the argument is a power of two.                
                <param>
                    n the number to test                    
                </param>
                <return>
                    true if the argument is a power of two                    
                </return>
            </javadoc>
            <method name="isPowerOfTwo" type="boolean" line="873">
                <params>
                    <param name="n" type="long"/>
                </params>
            </method>
        </class>
    </source>