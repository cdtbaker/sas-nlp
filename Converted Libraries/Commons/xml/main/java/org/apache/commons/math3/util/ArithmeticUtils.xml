<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.math.BigInteger"/>
        <import package="java.util.concurrent.atomic.AtomicReference"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.Localizable"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="ArithmeticUtils" line="28">
            <javadoc line="28">
                Some useful, arithmetics related, additions to the built-in functions in{@link Math}.                
                <version>
                    $Id: ArithmeticUtils.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="FACTORIALS" type="long[]" line="36"/>
            <javadoc line="36">
                All long-representable factorials                
            </javadoc>
            <declaration name="STIRLING_S2" type="AtomicReference&lt;long[][]&gt;" line="46"/>
            <javadoc line="46">
                Stirling numbers of the second kind.                
            </javadoc>
            <javadoc line="49">
                Private constructor.                
            </javadoc>
            <method name="ArithmeticUtils" type="constructor" line="50"/>
            <javadoc line="54">
                Add two integers, checking for overflow.                
                <param>
                    x an addend                    
                </param>
                <param>
                    y an addend                    
                </param>
                <return>
                    the sum {@code x+y}                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented
                      as an {@code int}.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="addAndCheck" type="int" line="65">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="s" type="long" line="66"/>
                <scope line="67"/>
            </method>
            <javadoc line="73">
                Add two long integers, checking for overflow.                
                <param>
                    a an addend                    
                </param>
                <param>
                    b an addend                    
                </param>
                <return>
                    the sum {@code a+b}                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented as an
                      long                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="addAndCheck" type="long" line="83">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
            </method>
            <javadoc line="87">
                Returns an exact representation of the &lt;a
                  href=&quot;http://mathworld.wolfram.com/BinomialCoefficient.html&quot;&gt; Binomial
                  Coefficient&lt;/a&gt;, &quot;{@code n choose k}&quot;, the number of{@code k}-element subsets that can be selected from an{@code n}-element set.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;li&gt; The result is small enough to fit into a {@code long}. The
                  largest value of {@code n} for which all coefficients are{@code  &lt; Long.MAX_VALUE} is 66. If the computed value exceeds{@code Long.MAX_VALUE} an {@code ArithMeticException} is
                  thrown.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the size of the subsets to be counted                    
                </param>
                <return>
                    {@code n choose k}                    
                </return>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k > n}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result is too large to be
                      represented by a long integer.                    
                </throws>
            </javadoc>
            <method name="binomialCoefficient" type="long" line="114">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <comment line="122">
                    Use symmetry for large k                    
                </comment>
                <comment line="127">
                    We use the formula                    
                </comment>
                <comment line="128">
                    (n choose k) = n! / (n-k)! / k!                    
                </comment>
                <comment line="129">
                    (n choose k) == ((n-k+1)*...*n) / (1*...*k)                    
                </comment>
                <comment line="130">
                    which could be written                    
                </comment>
                <comment line="131">
                    (n choose k) == (n-1 choose k-1) * n / k                    
                </comment>
                <comment line="134">
                    For n &lt;= 61, the naive implementation cannot overflow.                    
                </comment>
                <comment line="141">
                    For n &gt; 61 but n &lt;= 66, the result cannot overflow,                    
                </comment>
                <comment line="142">
                    but we must take care not to overflow intermediate values.                    
                </comment>
                <comment line="145">
                    We know that (result * i) is divisible by j,                    
                </comment>
                <comment line="146">
                    but (result * i) may overflow, so we split j:                    
                </comment>
                <comment line="147">
                    Filter out the gcd, d, so j/d and i/d are integer.                    
                </comment>
                <comment line="148">
                    result is divisible by (j/d) because (j/d)                    
                </comment>
                <comment line="149">
                    is relative prime to (i/d) and is a divisor of                    
                </comment>
                <comment line="150">
                    result * (i/d).                    
                </comment>
                <comment line="156">
                    For n &gt; 66, a result overflow might occur, so we check                    
                </comment>
                <comment line="157">
                    the multiplication, taking care to not overflow                    
                </comment>
                <comment line="158">
                    unnecessary.                    
                </comment>
                <scope line="116"/>
                <scope line="119"/>
                <scope line="123"/>
                <declaration name="result" type="long" line="132"/>
                <scope line="133">
                    <declaration name="i" type="int" line="135"/>
                    <scope line="136"/>
                </scope>
                <scope line="140">
                    <declaration name="i" type="int" line="143"/>
                    <scope line="144">
                        <declaration name="d" type="long" line="151"/>
                    </scope>
                </scope>
                <scope line="155">
                    <declaration name="i" type="int" line="159"/>
                    <scope line="160">
                        <declaration name="d" type="long" line="161"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="169">
                Returns a {@code double} representation of the &lt;a
                  href=&quot;http://mathworld.wolfram.com/BinomialCoefficient.html&quot;&gt; Binomial
                  Coefficient&lt;/a&gt;, &quot;{@code n choose k}&quot;, the number of{@code k}-element subsets that can be selected from an{@code n}-element set.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;li&gt; The result is small enough to fit into a {@code double}. The
                  largest value of {@code n} for which all coefficients are &lt;
                  Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,
                  Double.POSITIVE_INFINITY is returned&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the size of the subsets to be counted                    
                </param>
                <return>
                    {@code n choose k}                    
                </return>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k > n}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result is too large to be
                      represented by a long integer.                    
                </throws>
            </javadoc>
            <method name="binomialCoefficientDouble" type="double" line="195">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <scope line="197"/>
                <scope line="200"/>
                <scope line="203"/>
                <scope line="206"/>
                <declaration name="result" type="double" line="210"/>
                <scope line="211"/>
            </method>
            <javadoc line="218">
                Returns the natural {@code log} of the &lt;a
                  href=&quot;http://mathworld.wolfram.com/BinomialCoefficient.html&quot;&gt; Binomial
                  Coefficient&lt;/a&gt;, &quot;{@code n choose k}&quot;, the number of{@code k}-element subsets that can be selected from an{@code n}-element set.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the size of the subsets to be counted                    
                </param>
                <return>
                    {@code n choose k}                    
                </return>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k > n}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result is too large to be
                      represented by a long integer.                    
                </throws>
            </javadoc>
            <method name="binomialCoefficientLog" type="double" line="240">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <comment line="249">
                    For values small enough to do exact integer computation,
                     return the log of the exact value                    
                </comment>
                <comment line="257">
                    Return the log of binomialCoefficientDouble for values that will not
                     overflow binomialCoefficientDouble                    
                </comment>
                <comment line="269">
                    Sum logs for values that could overflow                    
                </comment>
                <comment line="274">
                    n!/(n-k)!                    
                </comment>
                <comment line="279">
                    divide by k!                    
                </comment>
                <scope line="242"/>
                <scope line="245"/>
                <scope line="253"/>
                <scope line="261"/>
                <scope line="265"/>
                <declaration name="logSum" type="double" line="272"/>
                <scope line="275"/>
                <scope line="280"/>
            </method>
            <javadoc line="287">
                Returns n!. Shorthand for {@code n} &lt;a
                  href=&quot;http://mathworld.wolfram.com/Factorial.html&quot;&gt; Factorial&lt;/a&gt;, the
                  product of the numbers {@code 1,...,n}.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code n &gt;= 0} (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;li&gt; The result is small enough to fit into a {@code long}. The
                  largest value of {@code n} for which {@code n!} &lt;
                  Long.MAX_VALUE} is 20. If the computed value exceeds {@code Long.MAX_VALUE}an {@code ArithMeticException } is thrown.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    n argument                    
                </param>
                <return>
                    {@code n!}                    
                </return>
                <throws>
                    MathArithmeticException if the result is too large to be represented
                      by a {@code long}.                    
                </throws>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
                <throws>
                    MathArithmeticException if {@code n > 20}: The factorial value is too
                      large to fit in a {@code long}.                    
                </throws>
            </javadoc>
            <method name="factorial" type="long" line="311">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="312"/>
                <scope line="316"/>
            </method>
            <javadoc line="322">
                Compute n!, the&lt;a href=&quot;http://mathworld.wolfram.com/Factorial.html&quot;&gt;
                  factorial&lt;/a&gt; of {@code n} (the product of the numbers 1 to n), as a{@code double}.
                  The result should be small enough to fit into a {@code double}: The
                  largest {@code n} for which {@code n! &lt; Double.MAX_VALUE} is 170.
                  If the computed value exceeds {@code Double.MAX_VALUE},{@code Double.POSITIVE_INFINITY} is returned.                
                <param>
                    n Argument.                    
                </param>
                <return>
                    {@code n!}                    
                </return>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
            </javadoc>
            <method name="factorialDouble" type="double" line="335">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="336"/>
                <scope line="340"/>
            </method>
            <javadoc line="346">
                Compute the natural logarithm of the factorial of {@code n}.                
                <param>
                    n Argument.                    
                </param>
                <return>
                    {@code n!}                    
                </return>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
            </javadoc>
            <method name="factorialLog" type="double" line="353">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="354"/>
                <scope line="358"/>
                <declaration name="logSum" type="double" line="361"/>
                <scope line="362"/>
            </method>
            <javadoc line="368">
                Computes the greatest common divisor of the absolute value of two
                  numbers, using a modified version of the &quot;binary gcd&quot; method.
                  See Knuth 4.5.2 algorithm B.
                  The algorithm is due to Josef Stein (1961).
                  &lt;br/&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations{@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},{@code gcd(Integer.MIN_VALUE, 0)} and{@code gcd(0, Integer.MIN_VALUE)} throw an{@code ArithmeticException}, because the result would be 2^31, which
                  is too large for an int value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code gcd(x, x)}, {@code gcd(0, x)} and{@code gcd(x, 0)} is the absolute value of {@code x}, except
                  for the special cases above.&lt;/li&gt;
                  &lt;li&gt;The invocation {@code gcd(0, 0)} is the only one which returns{@code 0}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    p Number.                    
                </param>
                <param>
                    q Number.                    
                </param>
                <return>
                    the greatest common divisor (never negative).                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented as
                      a non-negative {@code int} value.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="gcd" type="int" line="398">
                <params>
                    <param name="p" type="int"/>
                    <param name="q" type="int"/>
                </params>
                <comment line="447">
                    Now &quot;al&quot; and &quot;bl&quot; fit in an &quot;int&quot;.                    
                </comment>
                <declaration name="a" type="int" line="399"/>
                <declaration name="b" type="int" line="400"/>
                <scope line="402">
                    <scope line="404"/>
                </scope>
                <declaration name="al" type="long" line="411"/>
                <declaration name="bl" type="long" line="412"/>
                <declaration name="useLong" type="boolean" line="413"/>
                <scope line="414">
                    <scope line="415"/>
                    <scope line="417"/>
                </scope>
                <scope line="422">
                    <scope line="423"/>
                    <scope line="425"/>
                </scope>
                <scope line="430">
                    <scope line="431"/>
                    <declaration name="blbu" type="long" line="435"/>
                    <scope line="438">
                        <scope line="439"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="455">
                Computes the greatest common divisor of two &lt;em&gt;positive&lt;/em&gt; numbers
                  (this precondition is &lt;em&gt;not&lt;/em&gt; checked and the result is undefined
                  if not fulfilled) using the &quot;binary gcd&quot; method which avoids division
                  and modulo operations.
                  See Knuth 4.5.2 algorithm B.
                  The algorithm is due to Josef Stein (1961).
                  &lt;br/&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The result of {@code gcd(x, x)}, {@code gcd(0, x)} and{@code gcd(x, 0)} is the value of {@code x}.&lt;/li&gt;
                  &lt;li&gt;The invocation {@code gcd(0, 0)} is the only one which returns{@code 0}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    a Positive number.                    
                </param>
                <param>
                    b Positive number.                    
                </param>
                <return>
                    the greatest common divisor.                    
                </return>
            </javadoc>
            <method name="gcdPositive" type="int" line="476">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <comment line="484">
                    Make &quot;a&quot; and &quot;b&quot; odd, keeping track of common power of 2.                    
                </comment>
                <comment line="491">
                    &quot;a&quot; and &quot;b&quot; are positive.                    
                </comment>
                <comment line="492">
                    If a &gt; b then &quot;gdc(a, b)&quot; is equal to &quot;gcd(a - b, b)&quot;.                    
                </comment>
                <comment line="493">
                    If a &lt; b then &quot;gcd(a, b)&quot; is equal to &quot;gcd(b - a, a)&quot;.                    
                </comment>
                <comment line="494">
                    Hence, in the successive iterations:                    
                </comment>
                <comment line="495">
                    &quot;a&quot; becomes the absolute difference of the current values,                    
                </comment>
                <comment line="496">
                    &quot;b&quot; becomes the minimum of the current values.                    
                </comment>
                <comment line="502">
                    Remove any power of 2 in &quot;a&quot; (&quot;b&quot; is guaranteed to be odd).                    
                </comment>
                <comment line="506">
                    Recover the common power of 2.                    
                </comment>
                <scope line="477"/>
                <scope line="480"/>
                <declaration name="aTwos" type="int" line="485"/>
                <declaration name="bTwos" type="int" line="487"/>
                <declaration name="shift" type="int" line="489"/>
                <scope line="497">
                    <declaration name="delta" type="int" line="498"/>
                </scope>
            </method>
            <javadoc line="510">
                &lt;p&gt;
                  Gets the greatest common divisor of the absolute value of two numbers,
                  using the &quot;binary gcd&quot; method which avoids division and modulo
                  operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
                  Stein (1961).
                  &lt;/p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations{@code gcd(Long.MIN_VALUE, Long.MIN_VALUE)},{@code gcd(Long.MIN_VALUE, 0L)} and{@code gcd(0L, Long.MIN_VALUE)} throw an{@code ArithmeticException}, because the result would be 2^63, which
                  is too large for a long value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code gcd(x, x)}, {@code gcd(0L, x)} and{@code gcd(x, 0L)} is the absolute value of {@code x}, except
                  for the special cases above.
                  &lt;li&gt;The invocation {@code gcd(0L, 0L)} is the only one which returns{@code 0L}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    p Number.                    
                </param>
                <param>
                    q Number.                    
                </param>
                <return>
                    the greatest common divisor, never negative.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented as
                      a non-negative {@code long} value.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="gcd" type="long" line="539">
                <params>
                    <param name="p" type="long"/>
                    <param name="q" type="long"/>
                </params>
                <comment line="549">
                    keep u and v negative, as negative integers range down to                    
                </comment>
                <comment line="550">
                    -2^63, while positive numbers can only be as large as 2^63-1                    
                </comment>
                <comment line="551">
                    (i.e. we can&apos;t necessarily negate a negative number without                    
                </comment>
                <comment line="552">
                    overflow)                    
                </comment>
                <comment line="553">
                                        
                </comment>
                <comment line="556">
                    make u negative                    
                </comment>
                <comment line="559">
                    make v negative                    
                </comment>
                <comment line="560">
                    B1. [Find power of 2]                    
                </comment>
                <comment line="562">
                    while u and v are                    
                </comment>
                <comment line="563">
                    both even...                    
                </comment>
                <comment line="566">
                    cast out twos.                    
                </comment>
                <comment line="572">
                    B2. Initialize: u and v have been divided by 2^k and at least                    
                </comment>
                <comment line="573">
                    one is odd.                    
                </comment>
                <comment line="574">
                                        
                </comment>
                <comment line="575">
                    t negative: u was odd, v may be even (t replaces v)                    
                </comment>
                <comment line="576">
                    t positive: u was even, v is odd (t replaces u)                    
                </comment>
                <comment line="578">
                                        
                </comment>
                <comment line="579">
                    B4/B3: cast out twos from t.                    
                </comment>
                <comment line="580">
                    while t is even..                    
                </comment>
                <comment line="581">
                    cast out twos                    
                </comment>
                <comment line="583">
                    B5 [reset max(u,v)]                    
                </comment>
                <comment line="589">
                    B6/B3. at this point both u and v should be odd.                    
                </comment>
                <comment line="591">
                    |u| larger: t positive (replace u)                    
                </comment>
                <comment line="592">
                    |v| larger: t negative (replace v)                    
                </comment>
                <comment line="594">
                    gcd is u*2^k                    
                </comment>
                <declaration name="u" type="long" line="540"/>
                <declaration name="v" type="long" line="541"/>
                <scope line="542">
                    <scope line="543"/>
                </scope>
                <scope line="554"/>
                <scope line="557"/>
                <declaration name="k" type="int" line="561"/>
                <scope line="562"/>
                <scope line="568"/>
                <declaration name="t" type="long" line="574"/>
                <scope line="577">
                    <scope line="580"/>
                    <scope line="584"/>
                    <scope line="586"/>
                </scope>
            </method>
            <javadoc line="597">
                &lt;p&gt;
                  Returns the least common multiple of the absolute value of two numbers,
                  using the formula {@code lcm(a,b) = (a / gcd(a,b))  b}.
                  &lt;/p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations {@code lcm(Integer.MIN_VALUE, n)} and{@code lcm(n, Integer.MIN_VALUE)}, where {@code abs(n)} is a
                  power of 2, throw an {@code ArithmeticException}, because the result
                  would be 2^31, which is too large for an int value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code lcm(0, x)} and {@code lcm(x, 0)} is{@code 0} for any {@code x}.
                  &lt;/ul&gt;                
                <param>
                    a Number.                    
                </param>
                <param>
                    b Number.                    
                </param>
                <return>
                    the least common multiple, never negative.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented as
                      a non-negative {@code int} value.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="lcm" type="int" line="619">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <scope line="620"/>
                <declaration name="lcm" type="int" line="623"/>
                <scope line="624"/>
            </method>
            <javadoc line="631">
                &lt;p&gt;
                  Returns the least common multiple of the absolute value of two numbers,
                  using the formula {@code lcm(a,b) = (a / gcd(a,b))  b}.
                  &lt;/p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations {@code lcm(Long.MIN_VALUE, n)} and{@code lcm(n, Long.MIN_VALUE)}, where {@code abs(n)} is a
                  power of 2, throw an {@code ArithmeticException}, because the result
                  would be 2^63, which is too large for an int value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code lcm(0L, x)} and {@code lcm(x, 0L)} is{@code 0L} for any {@code x}.
                  &lt;/ul&gt;                
                <param>
                    a Number.                    
                </param>
                <param>
                    b Number.                    
                </param>
                <return>
                    the least common multiple, never negative.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented
                      as a non-negative {@code long} value.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="lcm" type="long" line="653">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <scope line="654"/>
                <declaration name="lcm" type="long" line="657"/>
                <scope line="658"/>
            </method>
            <javadoc line="665">
                Multiply two integers, checking for overflow.                
                <param>
                    x Factor.                    
                </param>
                <param>
                    y Factor.                    
                </param>
                <return>
                    the product {@code x  y}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be
                      represented as an {@code int}.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="mulAndCheck" type="int" line="675">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="m" type="long" line="676"/>
                <scope line="677"/>
            </method>
            <javadoc line="683">
                Multiply two long integers, checking for overflow.                
                <param>
                    a Factor.                    
                </param>
                <param>
                    b Factor.                    
                </param>
                <return>
                    the product {@code a  b}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented
                      as a {@code long}.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="mulAndCheck" type="long" line="693">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <comment line="696">
                    use symmetry to reduce boundary cases                    
                </comment>
                <comment line="701">
                    check for positive overflow with negative a, negative b                    
                </comment>
                <comment line="708">
                    check for negative overflow with negative a, positive b                    
                </comment>
                <comment line="716">
                    assert b == 0                    
                </comment>
                <comment line="720">
                    assert a &gt; 0                    
                </comment>
                <comment line="721">
                    assert b &gt; 0                    
                </comment>
                <comment line="723">
                    check for positive overflow with positive a, positive b                    
                </comment>
                <comment line="730">
                    assert a == 0                    
                </comment>
                <declaration name="ret" type="long" line="694"/>
                <scope line="695"/>
                <scope line="698">
                    <scope line="699">
                        <scope line="700">
                            <scope line="702"/>
                            <scope line="704"/>
                        </scope>
                        <scope line="707">
                            <scope line="709"/>
                            <scope line="711"/>
                        </scope>
                        <scope line="715"/>
                    </scope>
                    <scope line="719">
                        <scope line="724"/>
                        <scope line="726"/>
                    </scope>
                    <scope line="729"/>
                </scope>
            </method>
            <javadoc line="737">
                Subtract two integers, checking for overflow.                
                <param>
                    x Minuend.                    
                </param>
                <param>
                    y Subtrahend.                    
                </param>
                <return>
                    the difference {@code x - y}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented
                      as an {@code int}.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="subAndCheck" type="int" line="747">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="s" type="long" line="748"/>
                <scope line="749"/>
            </method>
            <javadoc line="755">
                Subtract two long integers, checking for overflow.                
                <param>
                    a Value.                    
                </param>
                <param>
                    b Value.                    
                </param>
                <return>
                    the difference {@code a - b}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented as a{@code long}.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="subAndCheck" type="long" line="765">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <comment line="774">
                    use additive inverse                    
                </comment>
                <declaration name="ret" type="long" line="766"/>
                <scope line="767">
                    <scope line="768"/>
                    <scope line="770"/>
                </scope>
                <scope line="773"/>
            </method>
            <javadoc line="780">
                Raise an int to an int power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="int" line="788">
                <params>
                    <param name="k" type="int"/>
                    <param name="e" type="int"/>
                </params>
                <scope line="789"/>
                <declaration name="result" type="int" line="793"/>
                <declaration name="k2p" type="int" line="794"/>
                <scope line="795">
                    <scope line="796"/>
                </scope>
            </method>
            <javadoc line="806">
                Raise an int to a long power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="int" line="814">
                <params>
                    <param name="k" type="int"/>
                    <param name="e" type="long"/>
                </params>
                <scope line="815"/>
                <declaration name="result" type="int" line="819"/>
                <declaration name="k2p" type="int" line="820"/>
                <scope line="821">
                    <scope line="822"/>
                </scope>
            </method>
            <javadoc line="832">
                Raise a long to an int power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="long" line="840">
                <params>
                    <param name="k" type="long"/>
                    <param name="e" type="int"/>
                </params>
                <scope line="841"/>
                <declaration name="result" type="long" line="845"/>
                <declaration name="k2p" type="long" line="846"/>
                <scope line="847">
                    <scope line="848"/>
                </scope>
            </method>
            <javadoc line="858">
                Raise a long to a long power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="long" line="866">
                <params>
                    <param name="k" type="long"/>
                    <param name="e" type="long"/>
                </params>
                <scope line="867"/>
                <declaration name="result" type="long" line="871"/>
                <declaration name="k2p" type="long" line="872"/>
                <scope line="873">
                    <scope line="874"/>
                </scope>
            </method>
            <javadoc line="884">
                Raise a BigInteger to an int power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="BigInteger" line="892">
                <params>
                    <param name="k" type="BigInteger"/>
                    <param name="e" type="int"/>
                </params>
                <scope line="893"/>
            </method>
            <javadoc line="900">
                Raise a BigInteger to a long power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="BigInteger" line="908">
                <params>
                    <param name="k" type="BigInteger"/>
                    <param name="e" type="long"/>
                </params>
                <scope line="909"/>
                <declaration name="result" type="BigInteger" line="913"/>
                <declaration name="k2p" type="BigInteger" line="914"/>
                <scope line="915">
                    <scope line="916"/>
                </scope>
            </method>
            <javadoc line="927">
                Raise a BigInteger to a BigInteger power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k<sup>e</sup>                    
                </return>
                <throws>
                    NotPositiveException if {@code e < 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="BigInteger" line="935">
                <params>
                    <param name="k" type="BigInteger"/>
                    <param name="e" type="BigInteger"/>
                </params>
                <scope line="936"/>
                <declaration name="result" type="BigInteger" line="940"/>
                <declaration name="k2p" type="BigInteger" line="941"/>
                <scope line="942">
                    <scope line="943"/>
                </scope>
            </method>
            <javadoc line="953">
                Returns the &lt;a
                  href=&quot;http://mathworld.wolfram.com/StirlingNumberoftheSecondKind.html&quot;&gt;
                  Stirling number of the second kind&lt;/a&gt;, &quot;{@code S(n,k)}&quot;, the number of
                  ways of partitioning an {@code n}-element set into {@code k} non-empty
                  subsets.
                  &lt;p&gt;
                  The preconditions are {@code 0 &lt;= k &lt;= n } (otherwise{@code NotPositiveException} is thrown)
                  &lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the number of non-empty subsets                    
                </param>
                <return>
                    {@code S(n,k)}                    
                </return>
                <throws>
                    NotPositiveException if {@code k < 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k > n}.                    
                </throws>
                <throws>
                    MathArithmeticException if some overflow happens, typically for n exceeding 25 and
                      k between 20 and n-2 (S(n,n-1) is handled specifically and does not overflow)                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="stirlingS2" type="long" line="973">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <comment line="984">
                    the cache has never been initialized, compute the first numbers                    
                </comment>
                <comment line="985">
                    by direct recurrence relation                    
                </comment>
                <comment line="987">
                    as S(26,9) = 11201516780955125625 is larger than Long.MAX_VALUE                    
                </comment>
                <comment line="988">
                    we must stop computation at row 26                    
                </comment>
                <comment line="1002">
                    atomically save the cache                    
                </comment>
                <comment line="1008">
                    the number is in the small cache                    
                </comment>
                <comment line="1011">
                    use explicit formula to compute the number without caching it                    
                </comment>
                <comment line="1021">
                    definition formula: note that this may trigger some overflow                    
                </comment>
                <comment line="1028">
                    there was an overflow somewhere                    
                </comment>
                <scope line="974"/>
                <scope line="977"/>
                <declaration name="stirlingS2" type="long[][]" line="981"/>
                <scope line="983">
                    <declaration name="maxIndex" type="int" line="989"/>
                    <scope line="992">
                        <scope line="997"/>
                    </scope>
                </scope>
                <scope line="1007"/>
                <scope line="1010">
                    <scope line="1012"/>
                    <scope line="1014"/>
                    <scope line="1016"/>
                    <scope line="1018"/>
                    <scope line="1020">
                        <declaration name="sum" type="long" line="1022"/>
                        <declaration name="sign" type="long" line="1023"/>
                        <scope line="1024">
                            <scope line="1027"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1039">
                Add two long integers, checking for overflow.                
                <param>
                    a Addend.                    
                </param>
                <param>
                    b Addend.                    
                </param>
                <param>
                    pattern Pattern to use for any thrown exception.                    
                </param>
                <return>
                    the sum {@code a + b}.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented
                      as a {@code long}.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="addAndCheck" type="long" line="1050">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                    <param name="pattern" type="Localizable"/>
                </params>
                <comment line="1053">
                    use symmetry to reduce boundary cases                    
                </comment>
                <comment line="1056">
                    assert a &lt;= b                    
                </comment>
                <comment line="1060">
                    check for negative overflow                    
                </comment>
                <comment line="1067">
                    opposite sign addition is always safe                    
                </comment>
                <comment line="1071">
                    assert a &gt;= 0                    
                </comment>
                <comment line="1072">
                    assert b &gt;= 0                    
                </comment>
                <comment line="1074">
                    check for positive overflow                    
                </comment>
                <declaration name="ret" type="long" line="1051"/>
                <scope line="1052"/>
                <scope line="1055">
                    <scope line="1058">
                        <scope line="1059">
                            <scope line="1061"/>
                            <scope line="1063"/>
                        </scope>
                        <scope line="1066"/>
                    </scope>
                    <scope line="1070">
                        <scope line="1075"/>
                        <scope line="1077"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1085">
                Check binomial preconditions.                
                <param>
                    n Size of the set.                    
                </param>
                <param>
                    k Size of the subsets to be counted.                    
                </param>
                <throws>
                    NotPositiveException if {@code n < 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k > n}.                    
                </throws>
            </javadoc>
            <method name="checkBinomial" type="void" line="1093">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
                <scope line="1094"/>
                <scope line="1098"/>
            </method>
            <javadoc line="1103">
                Returns true if the argument is a power of two.                
                <param>
                    n the number to test                    
                </param>
                <return>
                    true if the argument is a power of two                    
                </return>
            </javadoc>
            <method name="isPowerOfTwo" type="boolean" line="1109">
                <params>
                    <param name="n" type="long"/>
                </params>
            </method>
        </class>
    </source>