<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.math.BigInteger"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.Localizable"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="ArithmeticUtils" line="27">
            <javadoc line="27">
                Some useful, arithmetics related, additions to the built-in functions in{@link Math}.                
                <version>
                    $Id: ArithmeticUtils.java 1591835 2014-05-02 09:04:01Z tn $                    
                </version>
            </javadoc>
            <javadoc line="35">
                Private constructor.                
            </javadoc>
            <method name="ArithmeticUtils" type="constructor" line="36"/>
            <javadoc line="40">
                Add two integers, checking for overflow.                
                <param>
                    x an addend                    
                </param>
                <param>
                    y an addend                    
                </param>
                <return>
                    the sum {@code x+y}                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented
                      as an {@code int}.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="addAndCheck" type="int" line="51">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="s" type="long" line="52"/>
                <scope line="53"/>
            </method>
            <javadoc line="59">
                Add two long integers, checking for overflow.                
                <param>
                    a an addend                    
                </param>
                <param>
                    b an addend                    
                </param>
                <return>
                    the sum {@code a+b}                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented as an long                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="addAndCheck" type="long" line="68">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
            </method>
            <javadoc line="72">
                Returns an exact representation of the &lt;a
                  href=&quot;http://mathworld.wolfram.com/BinomialCoefficient.html&quot;&gt; Binomial
                  Coefficient&lt;/a&gt;, &quot;{@code n choose k}&quot;, the number of{@code k}-element subsets that can be selected from an{@code n}-element set.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;li&gt; The result is small enough to fit into a {@code long}. The
                  largest value of {@code n} for which all coefficients are{@code  &lt; Long.MAX_VALUE} is 66. If the computed value exceeds{@code Long.MAX_VALUE} an {@code ArithMeticException} is
                  thrown.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the size of the subsets to be counted                    
                </param>
                <return>
                    {@code n choose k}                    
                </return>
                <throws>
                    NotPositiveException if {@code n &lt; 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k &gt; n}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result is too large to be
                      represented by a long integer.                    
                </throws>
                <deprecated>
                    use {@link CombinatoricsUtils#binomialCoefficient(int,int)}                    
                </deprecated>
            </javadoc>
            <method name="binomialCoefficient" type="long" line="101">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="105">
                Returns a {@code double} representation of the &lt;a
                  href=&quot;http://mathworld.wolfram.com/BinomialCoefficient.html&quot;&gt; Binomial
                  Coefficient&lt;/a&gt;, &quot;{@code n choose k}&quot;, the number of{@code k}-element subsets that can be selected from an{@code n}-element set.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;li&gt; The result is small enough to fit into a {@code double}. The
                  largest value of {@code n} for which all coefficients are &lt;
                  Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,
                  Double.POSITIVE_INFINITY is returned&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the size of the subsets to be counted                    
                </param>
                <return>
                    {@code n choose k}                    
                </return>
                <throws>
                    NotPositiveException if {@code n &lt; 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k &gt; n}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result is too large to be
                      represented by a long integer.                    
                </throws>
                <deprecated>
                    use {@link CombinatoricsUtils#binomialCoefficientDouble(int,int)}                    
                </deprecated>
            </javadoc>
            <method name="binomialCoefficientDouble" type="double" line="133">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="137">
                Returns the natural {@code log} of the &lt;a
                  href=&quot;http://mathworld.wolfram.com/BinomialCoefficient.html&quot;&gt; Binomial
                  Coefficient&lt;/a&gt;, &quot;{@code n choose k}&quot;, the number of{@code k}-element subsets that can be selected from an{@code n}-element set.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code 0 &lt;= k &lt;= n } (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the size of the subsets to be counted                    
                </param>
                <return>
                    {@code n choose k}                    
                </return>
                <throws>
                    NotPositiveException if {@code n &lt; 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k &gt; n}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result is too large to be
                      represented by a long integer.                    
                </throws>
                <deprecated>
                    use {@link CombinatoricsUtils#binomialCoefficientLog(int,int)}                    
                </deprecated>
            </javadoc>
            <method name="binomialCoefficientLog" type="double" line="161">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="165">
                Returns n!. Shorthand for {@code n} &lt;a
                  href=&quot;http://mathworld.wolfram.com/Factorial.html&quot;&gt; Factorial&lt;/a&gt;, the
                  product of the numbers {@code 1,...,n}.
                  &lt;p&gt;
                  &lt;Strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; {@code n &gt;= 0} (otherwise{@code IllegalArgumentException} is thrown)&lt;/li&gt;
                  &lt;li&gt; The result is small enough to fit into a {@code long}. The
                  largest value of {@code n} for which {@code n!} &lt;
                  Long.MAX_VALUE} is 20. If the computed value exceeds {@code Long.MAX_VALUE}an {@code ArithMeticException } is thrown.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    n argument                    
                </param>
                <return>
                    {@code n!}                    
                </return>
                <throws>
                    MathArithmeticException if the result is too large to be represented
                      by a {@code long}.                    
                </throws>
                <throws>
                    NotPositiveException if {@code n &lt; 0}.                    
                </throws>
                <throws>
                    MathArithmeticException if {@code n &gt; 20}: The factorial value is too
                      large to fit in a {@code long}.                    
                </throws>
                <deprecated>
                    use {@link CombinatoricsUtils#factorial(int)}                    
                </deprecated>
            </javadoc>
            <method name="factorial" type="long" line="191">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="195">
                Compute n!, the&lt;a href=&quot;http://mathworld.wolfram.com/Factorial.html&quot;&gt;
                  factorial&lt;/a&gt; of {@code n} (the product of the numbers 1 to n), as a{@code double}.
                  The result should be small enough to fit into a {@code double}: The
                  largest {@code n} for which {@code n! &lt; Double.MAX_VALUE} is 170.
                  If the computed value exceeds {@code Double.MAX_VALUE},{@code Double.POSITIVE_INFINITY} is returned.                
                <param>
                    n Argument.                    
                </param>
                <return>
                    {@code n!}                    
                </return>
                <throws>
                    NotPositiveException if {@code n &lt; 0}.                    
                </throws>
                <deprecated>
                    use {@link CombinatoricsUtils#factorialDouble(int)}                    
                </deprecated>
            </javadoc>
            <method name="factorialDouble" type="double" line="210">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="214">
                Compute the natural logarithm of the factorial of {@code n}.                
                <param>
                    n Argument.                    
                </param>
                <return>
                    {@code n!}                    
                </return>
                <throws>
                    NotPositiveException if {@code n &lt; 0}.                    
                </throws>
                <deprecated>
                    use {@link CombinatoricsUtils#factorialLog(int)}                    
                </deprecated>
            </javadoc>
            <method name="factorialLog" type="double" line="223">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="227">
                Computes the greatest common divisor of the absolute value of two
                  numbers, using a modified version of the &quot;binary gcd&quot; method.
                  See Knuth 4.5.2 algorithm B.
                  The algorithm is due to Josef Stein (1961).
                  &lt;br/&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations{@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},{@code gcd(Integer.MIN_VALUE, 0)} and{@code gcd(0, Integer.MIN_VALUE)} throw an{@code ArithmeticException}, because the result would be 2^31, which
                  is too large for an int value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code gcd(x, x)}, {@code gcd(0, x)} and{@code gcd(x, 0)} is the absolute value of {@code x}, except
                  for the special cases above.&lt;/li&gt;
                  &lt;li&gt;The invocation {@code gcd(0, 0)} is the only one which returns{@code 0}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    p Number.                    
                </param>
                <param>
                    q Number.                    
                </param>
                <return>
                    the greatest common divisor (never negative).                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented as
                      a non-negative {@code int} value.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="gcd" type="int" line="255">
                <params>
                    <param name="p" type="int"/>
                    <param name="q" type="int"/>
                </params>
                <comment line="305">
                    Now &quot;al&quot; and &quot;bl&quot; fit in an &quot;int&quot;.                    
                </comment>
                <declaration name="a" type="int" line="256"/>
                <declaration name="b" type="int" line="257"/>
                <scope line="259">
                    <scope line="261"/>
                </scope>
                <declaration name="al" type="long" line="268"/>
                <declaration name="bl" type="long" line="269"/>
                <declaration name="useLong" type="boolean" line="270"/>
                <scope line="271">
                    <scope line="272"/>
                    <scope line="274"/>
                </scope>
                <scope line="279">
                    <scope line="280"/>
                    <scope line="282"/>
                </scope>
                <scope line="287">
                    <scope line="288"/>
                    <declaration name="blbu" type="long" line="292"/>
                    <scope line="295">
                        <scope line="296"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="312">
                Computes the greatest common divisor of two &lt;em&gt;positive&lt;/em&gt; numbers
                  (this precondition is &lt;em&gt;not&lt;/em&gt; checked and the result is undefined
                  if not fulfilled) using the &quot;binary gcd&quot; method which avoids division
                  and modulo operations.
                  See Knuth 4.5.2 algorithm B.
                  The algorithm is due to Josef Stein (1961).
                  &lt;br/&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The result of {@code gcd(x, x)}, {@code gcd(0, x)} and{@code gcd(x, 0)} is the value of {@code x}.&lt;/li&gt;
                  &lt;li&gt;The invocation {@code gcd(0, 0)} is the only one which returns{@code 0}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    a Positive number.                    
                </param>
                <param>
                    b Positive number.                    
                </param>
                <return>
                    the greatest common divisor.                    
                </return>
            </javadoc>
            <method name="gcdPositive" type="int" line="332">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <comment line="341">
                    Make &quot;a&quot; and &quot;b&quot; odd, keeping track of common power of 2.                    
                </comment>
                <comment line="348">
                    &quot;a&quot; and &quot;b&quot; are positive.
                     If a &gt; b then &quot;gdc(a, b)&quot; is equal to &quot;gcd(a - b, b)&quot;.
                     If a &lt; b then &quot;gcd(a, b)&quot; is equal to &quot;gcd(b - a, a)&quot;.
                     Hence, in the successive iterations:
                      &quot;a&quot; becomes the absolute difference of the current values,
                      &quot;b&quot; becomes the minimum of the current values.                    
                </comment>
                <comment line="359">
                    Remove any power of 2 in &quot;a&quot; (&quot;b&quot; is guaranteed to be odd).                    
                </comment>
                <comment line="363">
                    Recover the common power of 2.                    
                </comment>
                <scope line="333"/>
                <scope line="336"/>
                <declaration name="aTwos" type="int" line="341"/>
                <declaration name="bTwos" type="int" line="343"/>
                <declaration name="shift" type="int" line="345"/>
                <scope line="353">
                    <declaration name="delta" type="int" line="354"/>
                </scope>
            </method>
            <javadoc line="366">
                &lt;p&gt;
                  Gets the greatest common divisor of the absolute value of two numbers,
                  using the &quot;binary gcd&quot; method which avoids division and modulo
                  operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
                  Stein (1961).
                  &lt;/p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations{@code gcd(Long.MIN_VALUE, Long.MIN_VALUE)},{@code gcd(Long.MIN_VALUE, 0L)} and{@code gcd(0L, Long.MIN_VALUE)} throw an{@code ArithmeticException}, because the result would be 2^63, which
                  is too large for a long value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code gcd(x, x)}, {@code gcd(0L, x)} and{@code gcd(x, 0L)} is the absolute value of {@code x}, except
                  for the special cases above.
                  &lt;li&gt;The invocation {@code gcd(0L, 0L)} is the only one which returns{@code 0L}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    p Number.                    
                </param>
                <param>
                    q Number.                    
                </param>
                <return>
                    the greatest common divisor, never negative.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented as
                      a non-negative {@code long} value.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="gcd" type="long" line="395">
                <params>
                    <param name="p" type="long"/>
                    <param name="q" type="long"/>
                </params>
                <comment line="406">
                    keep u and v negative, as negative integers range down to
                     -2^63, while positive numbers can only be as large as 2^63-1
                     (i.e. we can&apos;t necessarily negate a negative number without
                     overflow)                    
                </comment>
                <comment line="410">
                                        
                </comment>
                <comment line="413">
                    make u negative                    
                </comment>
                <comment line="416">
                    make v negative                    
                </comment>
                <comment line="417">
                    B1. [Find power of 2]                    
                </comment>
                <comment line="419">
                    while u and v are                    
                </comment>
                <comment line="420">
                    both even...                    
                </comment>
                <comment line="423">
                    cast out twos.                    
                </comment>
                <comment line="429">
                    B2. Initialize: u and v have been divided by 2^k and at least
                     one is odd.                    
                </comment>
                <comment line="431">
                                        
                </comment>
                <comment line="432">
                    t negative: u was odd, v may be even (t replaces v)
                     t positive: u was even, v is odd (t replaces u)                    
                </comment>
                <comment line="435">
                                        
                </comment>
                <comment line="436">
                    B4/B3: cast out twos from t.                    
                </comment>
                <comment line="437">
                    while t is even..                    
                </comment>
                <comment line="438">
                    cast out twos                    
                </comment>
                <comment line="440">
                    B5 [reset max(u,v)]                    
                </comment>
                <comment line="446">
                    B6/B3. at this point both u and v should be odd.                    
                </comment>
                <comment line="448">
                    |u| larger: t positive (replace u)
                     |v| larger: t negative (replace v)                    
                </comment>
                <comment line="451">
                    gcd is u*2^k                    
                </comment>
                <declaration name="u" type="long" line="396"/>
                <declaration name="v" type="long" line="397"/>
                <scope line="398">
                    <scope line="399"/>
                </scope>
                <scope line="410"/>
                <scope line="413"/>
                <declaration name="k" type="int" line="417"/>
                <scope line="418"/>
                <scope line="424"/>
                <declaration name="t" type="long" line="430"/>
                <scope line="433">
                    <scope line="436"/>
                    <scope line="440"/>
                    <scope line="442"/>
                </scope>
            </method>
            <javadoc line="453">
                &lt;p&gt;
                  Returns the least common multiple of the absolute value of two numbers,
                  using the formula {@code lcm(a,b) = (a / gcd(a,b))  b}.
                  &lt;/p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations {@code lcm(Integer.MIN_VALUE, n)} and{@code lcm(n, Integer.MIN_VALUE)}, where {@code abs(n)} is a
                  power of 2, throw an {@code ArithmeticException}, because the result
                  would be 2^31, which is too large for an int value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code lcm(0, x)} and {@code lcm(x, 0)} is{@code 0} for any {@code x}.
                  &lt;/ul&gt;                
                <param>
                    a Number.                    
                </param>
                <param>
                    b Number.                    
                </param>
                <return>
                    the least common multiple, never negative.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented as
                      a non-negative {@code int} value.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="lcm" type="int" line="475">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <scope line="476"/>
                <declaration name="lcm" type="int" line="479"/>
                <scope line="480"/>
            </method>
            <javadoc line="487">
                &lt;p&gt;
                  Returns the least common multiple of the absolute value of two numbers,
                  using the formula {@code lcm(a,b) = (a / gcd(a,b))  b}.
                  &lt;/p&gt;
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;The invocations {@code lcm(Long.MIN_VALUE, n)} and{@code lcm(n, Long.MIN_VALUE)}, where {@code abs(n)} is a
                  power of 2, throw an {@code ArithmeticException}, because the result
                  would be 2^63, which is too large for an int value.&lt;/li&gt;
                  &lt;li&gt;The result of {@code lcm(0L, x)} and {@code lcm(x, 0L)} is{@code 0L} for any {@code x}.
                  &lt;/ul&gt;                
                <param>
                    a Number.                    
                </param>
                <param>
                    b Number.                    
                </param>
                <return>
                    the least common multiple, never negative.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented
                      as a non-negative {@code long} value.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="lcm" type="long" line="509">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <scope line="510"/>
                <declaration name="lcm" type="long" line="513"/>
                <scope line="514"/>
            </method>
            <javadoc line="521">
                Multiply two integers, checking for overflow.                
                <param>
                    x Factor.                    
                </param>
                <param>
                    y Factor.                    
                </param>
                <return>
                    the product {@code x  y}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be
                      represented as an {@code int}.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="mulAndCheck" type="int" line="531">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="m" type="long" line="532"/>
                <scope line="533"/>
            </method>
            <javadoc line="539">
                Multiply two long integers, checking for overflow.                
                <param>
                    a Factor.                    
                </param>
                <param>
                    b Factor.                    
                </param>
                <return>
                    the product {@code a  b}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented
                      as a {@code long}.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="mulAndCheck" type="long" line="549">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <comment line="553">
                    use symmetry to reduce boundary cases                    
                </comment>
                <comment line="558">
                    check for positive overflow with negative a, negative b                    
                </comment>
                <comment line="565">
                    check for negative overflow with negative a, positive b                    
                </comment>
                <comment line="573">
                    assert b == 0                    
                </comment>
                <comment line="577">
                    assert a &gt; 0
                     assert b &gt; 0                    
                </comment>
                <comment line="580">
                    check for positive overflow with positive a, positive b                    
                </comment>
                <comment line="587">
                    assert a == 0                    
                </comment>
                <declaration name="ret" type="long" line="550"/>
                <scope line="551"/>
                <scope line="554">
                    <scope line="555">
                        <scope line="556">
                            <scope line="558"/>
                            <scope line="560"/>
                        </scope>
                        <scope line="563">
                            <scope line="565"/>
                            <scope line="567"/>
                        </scope>
                        <scope line="571"/>
                    </scope>
                    <scope line="575">
                        <scope line="580"/>
                        <scope line="582"/>
                    </scope>
                    <scope line="585"/>
                </scope>
            </method>
            <javadoc line="593">
                Subtract two integers, checking for overflow.                
                <param>
                    x Minuend.                    
                </param>
                <param>
                    y Subtrahend.                    
                </param>
                <return>
                    the difference {@code x - y}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented
                      as an {@code int}.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="subAndCheck" type="int" line="603">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="s" type="long" line="604"/>
                <scope line="605"/>
            </method>
            <javadoc line="611">
                Subtract two long integers, checking for overflow.                
                <param>
                    a Value.                    
                </param>
                <param>
                    b Value.                    
                </param>
                <return>
                    the difference {@code a - b}.                    
                </return>
                <throws>
                    MathArithmeticException if the result can not be represented as a{@code long}.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="subAndCheck" type="long" line="621">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <comment line="631">
                    use additive inverse                    
                </comment>
                <declaration name="ret" type="long" line="622"/>
                <scope line="623">
                    <scope line="624"/>
                    <scope line="626"/>
                </scope>
                <scope line="629"/>
            </method>
            <javadoc line="636">
                Raise an int to an int power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    \( k^e \)                    
                </return>
                <throws>
                    NotPositiveException if {@code e &lt; 0}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result would overflow.                    
                </throws>
            </javadoc>
            <method name="pow" type="int" line="648">
                <params>
                    <param name="k" type="int"/>
                    <param name="e" type="int"/>
                </params>
                <comment line="673">
                    Add context information.                    
                </comment>
                <comment line="678">
                    Rethrow.                    
                </comment>
                <scope line="649"/>
                <scope line="653">
                    <declaration name="exp" type="int" line="654"/>
                    <declaration name="result" type="int" line="655"/>
                    <declaration name="k2p" type="int" line="656"/>
                    <scope line="657">
                        <scope line="658"/>
                        <scope line="663"/>
                    </scope>
                </scope>
                <scope line="671"/>
            </method>
            <javadoc line="682">
                Raise an int to a long power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k&lt;sup&gt;e&lt;/sup&gt;                    
                </return>
                <throws>
                    NotPositiveException if {@code e &lt; 0}.                    
                </throws>
                <deprecated>
                    As of 3.3. Please use {@link #pow(int,int)} instead.                    
                </deprecated>
            </javadoc>
            <method name="pow" type="int" line="692">
                <params>
                    <param name="k" type="int"/>
                    <param name="e" type="long"/>
                </params>
                <scope line="693"/>
                <declaration name="result" type="int" line="697"/>
                <declaration name="k2p" type="int" line="698"/>
                <scope line="699">
                    <scope line="700"/>
                </scope>
            </method>
            <javadoc line="710">
                Raise a long to an int power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    \( k^e \)                    
                </return>
                <throws>
                    NotPositiveException if {@code e &lt; 0}.                    
                </throws>
                <throws>
                    MathArithmeticException if the result would overflow.                    
                </throws>
            </javadoc>
            <method name="pow" type="long" line="722">
                <params>
                    <param name="k" type="long"/>
                    <param name="e" type="int"/>
                </params>
                <comment line="747">
                    Add context information.                    
                </comment>
                <comment line="752">
                    Rethrow.                    
                </comment>
                <scope line="723"/>
                <scope line="727">
                    <declaration name="exp" type="int" line="728"/>
                    <declaration name="result" type="long" line="729"/>
                    <declaration name="k2p" type="long" line="730"/>
                    <scope line="731">
                        <scope line="732"/>
                        <scope line="737"/>
                    </scope>
                </scope>
                <scope line="745"/>
            </method>
            <javadoc line="756">
                Raise a long to a long power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k&lt;sup&gt;e&lt;/sup&gt;                    
                </return>
                <throws>
                    NotPositiveException if {@code e &lt; 0}.                    
                </throws>
                <deprecated>
                    As of 3.3. Please use {@link #pow(long,int)} instead.                    
                </deprecated>
            </javadoc>
            <method name="pow" type="long" line="766">
                <params>
                    <param name="k" type="long"/>
                    <param name="e" type="long"/>
                </params>
                <scope line="767"/>
                <declaration name="result" type="long" line="771"/>
                <declaration name="k2p" type="long" line="772"/>
                <scope line="773">
                    <scope line="774"/>
                </scope>
            </method>
            <javadoc line="784">
                Raise a BigInteger to an int power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k&lt;sup&gt;e&lt;/sup&gt;                    
                </return>
                <throws>
                    NotPositiveException if {@code e &lt; 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="BigInteger" line="792">
                <params>
                    <param name="k" type="BigInteger"/>
                    <param name="e" type="int"/>
                </params>
                <scope line="793"/>
            </method>
            <javadoc line="800">
                Raise a BigInteger to a long power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k&lt;sup&gt;e&lt;/sup&gt;                    
                </return>
                <throws>
                    NotPositiveException if {@code e &lt; 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="BigInteger" line="808">
                <params>
                    <param name="k" type="BigInteger"/>
                    <param name="e" type="long"/>
                </params>
                <scope line="809"/>
                <declaration name="result" type="BigInteger" line="813"/>
                <declaration name="k2p" type="BigInteger" line="814"/>
                <scope line="815">
                    <scope line="816"/>
                </scope>
            </method>
            <javadoc line="827">
                Raise a BigInteger to a BigInteger power.                
                <param>
                    k Number to raise.                    
                </param>
                <param>
                    e Exponent (must be positive or zero).                    
                </param>
                <return>
                    k&lt;sup&gt;e&lt;/sup&gt;                    
                </return>
                <throws>
                    NotPositiveException if {@code e &lt; 0}.                    
                </throws>
            </javadoc>
            <method name="pow" type="BigInteger" line="835">
                <params>
                    <param name="k" type="BigInteger"/>
                    <param name="e" type="BigInteger"/>
                </params>
                <scope line="836"/>
                <declaration name="result" type="BigInteger" line="840"/>
                <declaration name="k2p" type="BigInteger" line="841"/>
                <scope line="842">
                    <scope line="843"/>
                </scope>
            </method>
            <javadoc line="853">
                Returns the &lt;a
                  href=&quot;http://mathworld.wolfram.com/StirlingNumberoftheSecondKind.html&quot;&gt;
                  Stirling number of the second kind&lt;/a&gt;, &quot;{@code S(n,k)}&quot;, the number of
                  ways of partitioning an {@code n}-element set into {@code k} non-empty
                  subsets.
                  &lt;p&gt;
                  The preconditions are {@code 0 &lt;= k &lt;= n } (otherwise{@code NotPositiveException} is thrown)
                  &lt;/p&gt;                
                <param>
                    n the size of the set                    
                </param>
                <param>
                    k the number of non-empty subsets                    
                </param>
                <return>
                    {@code S(n,k)}                    
                </return>
                <throws>
                    NotPositiveException if {@code k &lt; 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code k &gt; n}.                    
                </throws>
                <throws>
                    MathArithmeticException if some overflow happens, typically for n exceeding 25 and
                      k between 20 and n-2 (S(n,n-1) is handled specifically and does not overflow)                    
                </throws>
                <since>
                    3.1                    
                </since>
                <deprecated>
                    use {@link CombinatoricsUtils#stirlingS2(int,int)}                    
                </deprecated>
            </javadoc>
            <method name="stirlingS2" type="long" line="875">
                <params>
                    <param name="n" type="int"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="880">
                Add two long integers, checking for overflow.                
                <param>
                    a Addend.                    
                </param>
                <param>
                    b Addend.                    
                </param>
                <param>
                    pattern Pattern to use for any thrown exception.                    
                </param>
                <return>
                    the sum {@code a + b}.                    
                </return>
                <throws>
                    MathArithmeticException if the result cannot be represented
                      as a {@code long}.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="addAndCheck" type="long" line="891">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                    <param name="pattern" type="Localizable"/>
                </params>
                <declaration name="result" type="long" line="892"/>
                <scope line="893"/>
            </method>
            <javadoc line="899">
                Returns true if the argument is a power of two.                
                <param>
                    n the number to test                    
                </param>
                <return>
                    true if the argument is a power of two                    
                </return>
            </javadoc>
            <method name="isPowerOfTwo" type="boolean" line="905">
                <params>
                    <param name="n" type="long"/>
                </params>
            </method>
        </class>
    </source>