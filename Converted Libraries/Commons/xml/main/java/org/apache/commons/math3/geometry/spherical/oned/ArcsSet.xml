<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.spherical.oned">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.partitioning.AbstractRegion"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTree"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BoundaryProjection"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Side"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="ArcsSet" line="39">
            <extends class="AbstractRegion">
                <type_params>
                    <type_param name="Sphere1D"/>
                    <type_param name="Sphere1D"/>
                </type_params>
            </extends>
            <implements interface="Iterable">
                <type_params>
                    <type_param name="double[]"/>
                </type_params>
            </implements>
            <javadoc line="39">
                This class represents a region of a circle: a set of arcs.
                  &lt;p&gt;
                  Note that due to the wrapping around \(2 \pi\), barycenter is
                  ill-defined here. It was defined only in order to fulfill
                  the requirements of the {@link org.apache.commons.math3.geometry.partitioning.Region Region}interface, but its use is discouraged.
                  &lt;/p&gt;                
                <version>
                    $Id: ArcsSet.java 1563714 2014-02-02 20:55:14Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <javadoc line="52">
                Build an arcs set representing the whole circle.                
                <param>
                    tolerance tolerance below which close sub-arcs are merged together                    
                </param>
            </javadoc>
            <method name="ArcsSet" type="constructor" line="55">
                <params>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="59">
                Build an arcs set corresponding to a single arc.
                  &lt;p&gt;
                  If either {@code lower} is equals to {@code upper} or
                  the interval exceeds \( 2 \pi \), the arc is considered
                  to be the full circle and its initial defining boundaries
                  will be forgotten. {@code lower} is not allowed to be greater
                  than {@code upper} (an exception is thrown in this case).
                  &lt;/p&gt;                
                <param>
                    lower lower bound of the arc                    
                </param>
                <param>
                    upper upper bound of the arc                    
                </param>
                <param>
                    tolerance tolerance below which close sub-arcs are merged together                    
                </param>
                <exception>
                    NumberIsTooLargeException if lower is greater than upper                    
                </exception>
            </javadoc>
            <method name="ArcsSet" type="constructor" line="73">
                <params>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="77">
                Build an arcs set from an inside/outside BSP tree.
                  &lt;p&gt;The leaf nodes of the BSP tree &lt;em&gt;must&lt;/em&gt; have a{@code Boolean} attribute representing the inside status of
                  the corresponding cell (true for inside cells, false for outside
                  cells). In order to avoid building too many small objects, it is
                  recommended to use the predefined constants{@code Boolean.TRUE} and {@code Boolean.FALSE}&lt;/p&gt;                
                <param>
                    tree inside/outside BSP tree representing the arcs set                    
                </param>
                <param>
                    tolerance tolerance below which close sub-arcs are merged together                    
                </param>
                <exception>
                    InconsistentStateAt2PiWrapping if the tree leaf nodes are not
                      consistent across the \( 0, 2 \pi \) crossing                    
                </exception>
            </javadoc>
            <method name="ArcsSet" type="constructor" line="90">
                <params>
                    <param name="tree" type="BSPTree&lt;Sphere1D&gt;"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="95">
                Build an arcs set from a Boundary REPresentation (B-rep).
                  &lt;p&gt;The boundary is provided as a collection of {@link SubHyperplane sub-hyperplanes}. Each sub-hyperplane has the
                  interior part of the region on its minus side and the exterior on
                  its plus side.&lt;/p&gt;
                  &lt;p&gt;The boundary elements can be in any order, and can form
                  several non-connected sets (like for example polygons with holes
                  or a set of disjoints polyhedrons considered as a whole). In
                  fact, the elements do not even need to be connected together
                  (their topological connections are not used here). However, if the
                  boundary does not really separate an inside open from an outside
                  open (open having here its topological meaning), then subsequent
                  calls to the {@link org.apache.commons.math3.geometry.partitioning.Region#checkPoint(org.apache.commons.math3.geometry.Point)checkPoint} method will not be meaningful anymore.&lt;/p&gt;
                  &lt;p&gt;If the boundary is empty, the region will represent the whole
                  space.&lt;/p&gt;                
                <param>
                    boundary collection of boundary elements                    
                </param>
                <param>
                    tolerance tolerance below which close sub-arcs are merged together                    
                </param>
                <exception>
                    InconsistentStateAt2PiWrapping if the tree leaf nodes are not
                      consistent across the \( 0, 2 \pi \) crossing                    
                </exception>
            </javadoc>
            <method name="ArcsSet" type="constructor" line="118">
                <params>
                    <param name="boundary" type="Collection&lt;SubHyperplane&lt;Sphere1D&gt;&gt;"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="123">
                Build an inside/outside tree representing a single arc.                
                <param>
                    lower lower angular bound of the arc                    
                </param>
                <param>
                    upper upper angular bound of the arc                    
                </param>
                <param>
                    tolerance tolerance below which close sub-arcs are merged together                    
                </param>
                <return>
                    the built tree                    
                </return>
                <exception>
                    NumberIsTooLargeException if lower is greater than upper                    
                </exception>
            </javadoc>
            <method name="buildTree" type="BSPTree&lt;Sphere1D&gt;" line="132">
                <params>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                    <param name="tolerance" type="double"/>
                </params>
                <comment line="136">
                    the tree must cover the whole circle                    
                </comment>
                <comment line="143">
                    this is a regular arc, covering only part of the circle                    
                </comment>
                <comment line="150">
                    simple arc starting after 0 and ending before 2 \pi                    
                </comment>
                <comment line="161">
                    arc wrapping around 2 \pi                    
                </comment>
                <scope line="134"/>
                <scope line="137"/>
                <declaration name="normalizedLower" type="double" line="143"/>
                <declaration name="normalizedUpper" type="double" line="144"/>
                <declaration name="lowerCut" type="SubHyperplane&amp;lt;Sphere1D&amp;gt;" line="145"/>
                <scope line="148">
                    <declaration name="upperCut" type="SubHyperplane&amp;lt;Sphere1D&amp;gt;" line="150"/>
                </scope>
                <scope line="159">
                    <declaration name="upperCut" type="SubHyperplane&amp;lt;Sphere1D&amp;gt;" line="161"/>
                </scope>
            </method>
            <javadoc line="174">
                Check consistency.                
                <exception>
                    InconsistentStateAt2PiWrapping if the tree leaf nodes are not
                      consistent across the \( 0, 2 \pi \) crossing                    
                </exception>
            </javadoc>
            <method name="check2PiConsistency" type="void" line="178">
                <comment line="181">
                    start search at the tree root                    
                </comment>
                <comment line="187">
                    find the inside/outside state before the smallest internal node                    
                </comment>
                <comment line="190">
                    find the inside/outside state after the largest internal node                    
                </comment>
                <declaration name="root" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="181"/>
                <scope line="182"/>
                <declaration name="stateBefore" type="Boolean" line="187"/>
                <declaration name="stateAfter" type="Boolean" line="190"/>
                <scope line="192"/>
            </method>
            <javadoc line="198">
                Get the first leaf node of a tree.                
                <param>
                    root tree root                    
                </param>
                <return>
                    first leaf node (i.e. node corresponding to the region just after 0.0 radians)                    
                </return>
            </javadoc>
            <method name="getFirstLeaf" type="BSPTree&lt;Sphere1D&gt;" line="202">
                <params>
                    <param name="root" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <comment line="209">
                    find the smallest internal node                    
                </comment>
                <scope line="204"/>
                <declaration name="smallest" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="209"/>
                <scope line="210"/>
            </method>
            <javadoc line="218">
                Get the last leaf node of a tree.                
                <param>
                    root tree root                    
                </param>
                <return>
                    last leaf node (i.e. node corresponding to the region just before \( 2 \pi \) radians)                    
                </return>
            </javadoc>
            <method name="getLastLeaf" type="BSPTree&lt;Sphere1D&gt;" line="222">
                <params>
                    <param name="root" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <comment line="229">
                    find the largest internal node                    
                </comment>
                <scope line="224"/>
                <declaration name="largest" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="229"/>
                <scope line="230"/>
            </method>
            <javadoc line="238">
                Get the node corresponding to the first arc start.                
                <return>
                    smallest internal node (i.e. first after 0.0 radians, in trigonometric direction),
                      or null if there are no internal nodes (i.e. the set is either empty or covers the full circle)                    
                </return>
            </javadoc>
            <method name="getFirstArcStart" type="BSPTree&lt;Sphere1D&gt;" line="242">
                <comment line="245">
                    start search at the tree root                    
                </comment>
                <comment line="251">
                    walk tree until we find the smallest internal node                    
                </comment>
                <comment line="254">
                    walk tree until we find an arc start                    
                </comment>
                <declaration name="node" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="245"/>
                <scope line="246"/>
                <scope line="254"/>
            </method>
            <javadoc line="262">
                Check if an internal node corresponds to the start angle of an arc.                
                <param>
                    node internal node to check                    
                </param>
                <return>
                    true if the node corresponds to the start angle of an arc                    
                </return>
            </javadoc>
            <method name="isArcStart" type="boolean" line="266">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <comment line="270">
                    it has an inside cell before it, it may end an arc but not start it                    
                </comment>
                <comment line="275">
                    it has an outside cell after it, it is a dummy cut away from real arcs                    
                </comment>
                <comment line="279">
                    the cell has an outside before and an inside after it
                     it is the start of an arc                    
                </comment>
                <scope line="268"/>
                <scope line="273"/>
            </method>
            <javadoc line="284">
                Check if an internal node corresponds to the end angle of an arc.                
                <param>
                    node internal node to check                    
                </param>
                <return>
                    true if the node corresponds to the end angle of an arc                    
                </return>
            </javadoc>
            <method name="isArcEnd" type="boolean" line="288">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <comment line="292">
                    it has an outside cell before it, it may start an arc but not end it                    
                </comment>
                <comment line="297">
                    it has an inside cell after it, it is a dummy cut in the middle of an arc                    
                </comment>
                <comment line="301">
                    the cell has an inside before and an outside after it
                     it is the end of an arc                    
                </comment>
                <scope line="290"/>
                <scope line="295"/>
            </method>
            <javadoc line="306">
                Get the next internal node.                
                <param>
                    node current internal node                    
                </param>
                <return>
                    next internal node in trigonometric order, or null
                      if this is the last internal node                    
                </return>
            </javadoc>
            <method name="nextInternalNode" type="BSPTree&lt;Sphere1D&gt;" line="311">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <comment line="315">
                    the next node is in the sub-tree                    
                </comment>
                <comment line="319">
                    there is nothing left deeper in the tree, we backtrack                    
                </comment>
                <scope line="313"/>
                <scope line="319"/>
            </method>
            <javadoc line="326">
                Get the previous internal node.                
                <param>
                    node current internal node                    
                </param>
                <return>
                    previous internal node in trigonometric order, or null
                      if this is the first internal node                    
                </return>
            </javadoc>
            <method name="previousInternalNode" type="BSPTree&lt;Sphere1D&gt;" line="331">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <comment line="335">
                    the next node is in the sub-tree                    
                </comment>
                <comment line="339">
                    there is nothing left deeper in the tree, we backtrack                    
                </comment>
                <scope line="333"/>
                <scope line="339"/>
            </method>
            <javadoc line="346">
                Find the leaf node just before an internal node.                
                <param>
                    node internal node at which the sub-tree starts                    
                </param>
                <return>
                    leaf node just before the internal node                    
                </return>
            </javadoc>
            <method name="leafBefore" type="BSPTree&lt;Sphere1D&gt;" line="350">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <scope line="353"/>
            </method>
            <javadoc line="361">
                Find the leaf node just after an internal node.                
                <param>
                    node internal node at which the sub-tree starts                    
                </param>
                <return>
                    leaf node just after the internal node                    
                </return>
            </javadoc>
            <method name="leafAfter" type="BSPTree&lt;Sphere1D&gt;" line="365">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <scope line="368"/>
            </method>
            <javadoc line="376">
                Check if a node is the child before its parent in trigonometric order.                
                <param>
                    node child node considered                    
                </param>
                <return>
                    true is the node has a parent end is before it in trigonometric order                    
                </return>
            </javadoc>
            <method name="isBeforeParent" type="boolean" line="380">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <declaration name="parent" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="381"/>
                <scope line="382"/>
                <scope line="384"/>
            </method>
            <javadoc line="389">
                Check if a node is the child after its parent in trigonometric order.                
                <param>
                    node child node considered                    
                </param>
                <return>
                    true is the node has a parent end is after it in trigonometric order                    
                </return>
            </javadoc>
            <method name="isAfterParent" type="boolean" line="393">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <declaration name="parent" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="394"/>
                <scope line="395"/>
                <scope line="397"/>
            </method>
            <javadoc line="402">
                Find the child node just before an internal node.                
                <param>
                    node internal node at which the sub-tree starts                    
                </param>
                <return>
                    child node just before the internal node                    
                </return>
            </javadoc>
            <method name="childBefore" type="BSPTree&lt;Sphere1D&gt;" line="406">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <comment line="409">
                    smaller angles are on minus side, larger angles are on plus side                    
                </comment>
                <comment line="412">
                    smaller angles are on plus side, larger angles are on minus side                    
                </comment>
                <scope line="407"/>
                <scope line="410"/>
            </method>
            <javadoc line="416">
                Find the child node just after an internal node.                
                <param>
                    node internal node at which the sub-tree starts                    
                </param>
                <return>
                    child node just after the internal node                    
                </return>
            </javadoc>
            <method name="childAfter" type="BSPTree&lt;Sphere1D&gt;" line="420">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
                <comment line="423">
                    smaller angles are on minus side, larger angles are on plus side                    
                </comment>
                <comment line="426">
                    smaller angles are on plus side, larger angles are on minus side                    
                </comment>
                <scope line="421"/>
                <scope line="424"/>
            </method>
            <javadoc line="430">
                Check if an internal node has a direct limit angle.                
                <param>
                    node internal node to check                    
                </param>
                <return>
                    true if the limit angle is direct                    
                </return>
            </javadoc>
            <method name="isDirect" type="boolean" line="434">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
            </method>
            <javadoc line="438">
                Get the limit angle of an internal node.                
                <param>
                    node internal node to check                    
                </param>
                <return>
                    limit angle                    
                </return>
            </javadoc>
            <method name="getAngle" type="double" line="442">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
            </method>
            <javadoc line="446">
                {@inheritDoc}                
            </javadoc>
            <method name="buildNew" type="ArcsSet" line="448">
                <params>
                    <param name="tree" type="BSPTree&lt;Sphere1D&gt;"/>
                </params>
            </method>
            <javadoc line="452">
                {@inheritDoc}                
            </javadoc>
            <method name="computeGeometricalProperties" type="void" line="454">
                <scope line="455"/>
                <scope line="458">
                    <declaration name="size" type="double" line="459"/>
                    <declaration name="sum" type="double" line="460"/>
                    <scope line="461">
                        <declaration name="length" type="double" line="462"/>
                    </scope>
                    <scope line="467"/>
                    <scope line="469"/>
                    <scope line="471">
                        <declaration name="limit" type="LimitAngle" line="472"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="478">
                {@inheritDoc}                
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="projectToBoundary" type="BoundaryProjection&lt;Sphere1D&gt;" line="482">
                <params>
                    <param name="point" type="Point&lt;Sphere1D&gt;"/>
                </params>
                <comment line="485">
                    get position of test point                    
                </comment>
                <comment line="494">
                    remember the first angle in case we need it later                    
                </comment>
                <comment line="500">
                    the test point lies between the previous and the current arcs
                     offset will be positive                    
                </comment>
                <comment line="503">
                    we need to wrap around the circle                    
                </comment>
                <comment line="515">
                    the test point lies within the current arc
                     offset will be negative                    
                </comment>
                <comment line="531">
                    there are no points at all in the arcs set                    
                </comment>
                <comment line="536">
                    the test point if before first arc and after last arc,
                     somewhere around the 0/2 \pi crossing                    
                </comment>
                <comment line="539">
                    the test point is between 0 and first                    
                </comment>
                <comment line="548">
                    the test point is between last and 2\pi                    
                </comment>
                <declaration name="alpha" type="double" line="485"/>
                <declaration name="wrapFirst" type="boolean" line="487"/>
                <declaration name="first" type="double" line="488"/>
                <declaration name="previous" type="double" line="489"/>
                <scope line="490">
                    <scope line="492"/>
                    <scope line="497">
                        <scope line="498">
                            <scope line="501"/>
                            <scope line="504">
                                <declaration name="previousOffset" type="double" line="505"/>
                                <declaration name="currentOffset" type="double" line="506"/>
                                <scope line="507"/>
                                <scope line="509"/>
                            </scope>
                        </scope>
                        <scope line="513">
                            <declaration name="offset0" type="double" line="516"/>
                            <declaration name="offset1" type="double" line="517"/>
                            <scope line="518"/>
                            <scope line="520"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="528"/>
                <scope line="533">
                    <scope line="537">
                        <declaration name="previousOffset" type="double" line="539"/>
                        <declaration name="currentOffset" type="double" line="540"/>
                        <scope line="541"/>
                        <scope line="543"/>
                    </scope>
                    <scope line="546">
                        <declaration name="previousOffset" type="double" line="548"/>
                        <declaration name="currentOffset" type="double" line="549"/>
                        <scope line="550"/>
                        <scope line="552"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="561">
                Build an ordered list of arcs representing the instance.
                  &lt;p&gt;This method builds this arcs set as an ordered list of{@link Arc Arc} elements. An empty tree will build an empty list
                  while a tree representing the whole circle will build a one
                  element list with bounds set to \( 0 and 2 \pi \).&lt;/p&gt;                
                <return>
                    a new ordered list containing {@link Arc Arc} elements                    
                </return>
            </javadoc>
            <method name="asList" type="List&lt;Arc&gt;" line="568">
                <declaration name="list" type="List&amp;lt;Arc&amp;gt;" line="569"/>
                <scope line="570"/>
            </method>
            <javadoc line="576">
                {@inheritDoc}&lt;p&gt;
                  The iterator returns the limit angles pairs of sub-arcs in trigonometric order.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The iterator does &lt;em&gt;not&lt;/em&gt; support the optional {@code remove} operation.
                  &lt;/p&gt;                
            </javadoc>
            <method name="iterator" type="Iterator&lt;double[]&gt;" line="584"/>
            <class name="SubArcsIterator" line="588">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="double[]"/>
                    </type_params>
                </implements>
                <javadoc line="588">
                    Local iterator for sub-arcs.                    
                </javadoc>
                <declaration name="firstStart" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="591"/>
                <javadoc line="591">
                    Start of the first arc.                    
                </javadoc>
                <declaration name="current" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="594"/>
                <javadoc line="594">
                    Current node.                    
                </javadoc>
                <declaration name="pending" type="double[]" line="597"/>
                <javadoc line="597">
                    Sub-arc no yet returned.                    
                </javadoc>
                <javadoc line="600">
                    Simple constructor.                    
                </javadoc>
                <method name="SubArcsIterator" type="constructor" line="602">
                    <comment line="609">
                        all the leaf tree nodes share the same inside/outside status                        
                    </comment>
                    <comment line="611">
                        it is an inside node, it represents the full circle                        
                    </comment>
                    <scope line="607">
                        <scope line="609"/>
                        <scope line="614"/>
                    </scope>
                    <scope line="617"/>
                </method>
                <javadoc line="622">
                    Walk the tree to select the pending sub-arc.                    
                </javadoc>
                <method name="selectPending" type="void" line="624">
                    <comment line="627">
                        look for the start of the arc                        
                    </comment>
                    <comment line="634">
                        we have exhausted the iterator                        
                    </comment>
                    <comment line="640">
                        look for the end of the arc                        
                    </comment>
                    <comment line="648">
                        we have identified the arc                        
                    </comment>
                    <comment line="653">
                        prepare search for next arc                        
                    </comment>
                    <comment line="658">
                        the final arc wraps around 2\pi, its end is before the first start                        
                    </comment>
                    <comment line="664">
                        this should never happen                        
                    </comment>
                    <comment line="668">
                        we have identified the last arc                        
                    </comment>
                    <comment line="673">
                        there won&apos;t be any other arcs                        
                    </comment>
                    <declaration name="start" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="627"/>
                    <scope line="628"/>
                    <scope line="632"/>
                    <declaration name="end" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="640"/>
                    <scope line="641"/>
                    <scope line="645"/>
                    <scope line="655">
                        <scope line="659"/>
                        <scope line="662"/>
                    </scope>
                </method>
                <javadoc line="679">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hasNext" type="boolean" line="680"/>
                <javadoc line="684">
                    {@inheritDoc}                    
                </javadoc>
                <method name="next" type="double[]" line="685">
                    <scope line="686"/>
                    <declaration name="next" type="double[]" line="689"/>
                </method>
                <javadoc line="694">
                    {@inheritDoc}                    
                </javadoc>
                <method name="remove" type="void" line="695"/>
            </class>
            <javadoc line="701">
                Compute the relative position of the instance with respect
                  to an arc.
                  &lt;p&gt;
                  The {@link Side#MINUS} side of the arc is the one covered by the arc.
                  &lt;/p&gt;                
                <param>
                    arc arc to check instance against                    
                </param>
                <return>
                    one of {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH}or {@link Side#HYPER}                    
                </return>
            </javadoc>
            <method name="side" type="Side" line="710">
                <params>
                    <param name="arc" type="Arc"/>
                </params>
                <declaration name="reference" type="double" line="712"/>
                <declaration name="arcLength" type="double" line="713"/>
                <declaration name="inMinus" type="boolean" line="715"/>
                <declaration name="inPlus" type="boolean" line="716"/>
                <scope line="717">
                    <declaration name="syncedStart" type="double" line="718"/>
                    <declaration name="arcOffset" type="double" line="719"/>
                    <declaration name="syncedEnd" type="double" line="720"/>
                    <scope line="721"/>
                    <scope line="724"/>
                </scope>
                <scope line="729">
                    <scope line="730"/>
                    <scope line="732"/>
                </scope>
                <scope line="735">
                    <scope line="736"/>
                    <scope line="738"/>
                </scope>
            </method>
            <javadoc line="745">
                Split the instance in two parts by an arc.                
                <param>
                    arc splitting arc                    
                </param>
                <return>
                    an object containing both the part of the instance
                      on the plus side of the arc and the part of the
                      instance on the minus side of the arc                    
                </return>
            </javadoc>
            <method name="split" type="Split" line="751">
                <params>
                    <param name="arc" type="Arc"/>
                </params>
                <comment line="765">
                    the start point a[0] is in the minus part of the arc                    
                </comment>
                <comment line="768">
                    the end point a[1] is past the end of the arc
                     so we leave the minus part and enter the plus part                    
                </comment>
                <comment line="774">
                    in fact the end point a[1] goes far enough that we
                     leave the plus part of the arc and enter the minus part again                    
                </comment>
                <comment line="781">
                    the end point a[1] is in the plus part of the arc                    
                </comment>
                <comment line="785">
                    the end point a[1] is in the minus part of the arc                    
                </comment>
                <comment line="789">
                    the start point a[0] is in the plus part of the arc                    
                </comment>
                <comment line="792">
                    the end point a[1] wraps around to the start of the arc
                     so we leave the plus part and enter the minus part                    
                </comment>
                <comment line="798">
                    in fact the end point a[1] goes far enough that we
                     leave the minus part of the arc and enter the plus part again                    
                </comment>
                <comment line="805">
                    the end point a[1] is in the minus part of the arc                    
                </comment>
                <comment line="809">
                    the end point a[1] is in the plus part of the arc                    
                </comment>
                <declaration name="minus" type="List&amp;lt;Double&amp;gt;" line="753"/>
                <declaration name="plus" type="List&amp;lt;Double&amp;gt;" line="754"/>
                <declaration name="reference" type="double" line="756"/>
                <declaration name="arcLength" type="double" line="757"/>
                <scope line="759">
                    <declaration name="syncedStart" type="double" line="760"/>
                    <declaration name="arcOffset" type="double" line="761"/>
                    <declaration name="syncedEnd" type="double" line="762"/>
                    <scope line="763">
                        <scope line="766">
                            <declaration name="minusToPlus" type="double" line="769"/>
                            <scope line="772">
                                <declaration name="plusToMinus" type="double" line="775"/>
                            </scope>
                            <scope line="779"/>
                        </scope>
                        <scope line="783"/>
                    </scope>
                    <scope line="787">
                        <scope line="790">
                            <declaration name="plusToMinus" type="double" line="793"/>
                            <scope line="796">
                                <declaration name="minusToPlus" type="double" line="799"/>
                            </scope>
                            <scope line="803"/>
                        </scope>
                        <scope line="807"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="818">
                Add an arc limit to a BSP tree under construction.                
                <param>
                    tree BSP tree under construction                    
                </param>
                <param>
                    alpha arc limit                    
                </param>
                <param>
                    isStart if true, the limit is the start of an arc                    
                </param>
            </javadoc>
            <method name="addArcLimit" type="void" line="823">
                <params>
                    <param name="tree" type="BSPTree&lt;Sphere1D&gt;"/>
                    <param name="alpha" type="double"/>
                    <param name="isStart" type="boolean"/>
                </params>
                <comment line="829">
                    this should never happen                    
                </comment>
                <declaration name="limit" type="LimitAngle" line="825"/>
                <declaration name="node" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="826"/>
                <scope line="827"/>
            </method>
            <javadoc line="839">
                Create a split part.
                  &lt;p&gt;
                  As per construction, the list of limit angles is known to have
                  an even number of entries, with start angles at even indices and
                  end angles at odd indices.
                  &lt;/p&gt;                
                <param>
                    limits limit angles of the split part                    
                </param>
                <return>
                    split part (may be null)                    
                </return>
            </javadoc>
            <method name="createSplitPart" type="ArcsSet" line="848">
                <params>
                    <param name="limits" type="List&lt;Double&gt;"/>
                </params>
                <comment line="854">
                    collapse close limit angles                    
                </comment>
                <comment line="860">
                    the two limits are too close to each other, we remove both of them                    
                </comment>
                <comment line="862">
                    regular case, the two entries are consecutive ones                    
                </comment>
                <comment line="867">
                    special case, i the the last entry and j is the first entry
                     we have wrapped around list end                    
                </comment>
                <comment line="872">
                    the ends were the only limits, is it a full circle or an empty circle?                    
                </comment>
                <comment line="874">
                    it was full circle                    
                </comment>
                <comment line="877">
                    it was an empty circle                    
                </comment>
                <comment line="881">
                    we have removed the first interval start, so our list
                     currently starts with an interval end, which is wrong
                     we need to move this interval end to the end of the list                    
                </comment>
                <comment line="890">
                    build the tree by adding all angular sectors                    
                </comment>
                <comment line="898">
                    we did not insert anything                    
                </comment>
                <scope line="849"/>
                <scope line="851">
                    <scope line="854">
                        <declaration name="j" type="int" line="855"/>
                        <declaration name="lA" type="double" line="856"/>
                        <declaration name="lB" type="double" line="857"/>
                        <scope line="858">
                            <scope line="860"/>
                            <scope line="865">
                                <declaration name="lEnd" type="double" line="868"/>
                                <declaration name="lStart" type="double" line="869"/>
                                <scope line="870">
                                    <scope line="872"/>
                                    <scope line="875"/>
                                </scope>
                                <scope line="879"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="tree" type="BSPTree&amp;lt;Sphere1D&amp;gt;" line="890"/>
                    <scope line="891"/>
                    <scope line="896"/>
                </scope>
            </method>
            <class name="Split" line="906">
                <javadoc line="906">
                    Class holding the results of the {@link #split split} method.                    
                </javadoc>
                <declaration name="plus" type="ArcsSet" line="910"/>
                <javadoc line="910">
                    Part of the arcs set on the plus side of the splitting arc.                    
                </javadoc>
                <declaration name="minus" type="ArcsSet" line="913"/>
                <javadoc line="913">
                    Part of the arcs set on the minus side of the splitting arc.                    
                </javadoc>
                <javadoc line="916">
                    Build a Split from its parts.                    
                    <param>
                        plus part of the arcs set on the plus side of the
                          splitting arc                        
                    </param>
                    <param>
                        minus part of the arcs set on the minus side of the
                          splitting arc                        
                    </param>
                </javadoc>
                <method name="Split" type="constructor" line="922">
                    <params>
                        <param name="plus" type="ArcsSet"/>
                        <param name="minus" type="ArcsSet"/>
                    </params>
                </method>
                <javadoc line="927">
                    Get the part of the arcs set on the plus side of the splitting arc.                    
                    <return>
                        part of the arcs set on the plus side of the splitting arc                        
                    </return>
                </javadoc>
                <method name="getPlus" type="ArcsSet" line="930"/>
                <javadoc line="934">
                    Get the part of the arcs set on the minus side of the splitting arc.                    
                    <return>
                        part of the arcs set on the minus side of the splitting arc                        
                    </return>
                </javadoc>
                <method name="getMinus" type="ArcsSet" line="937"/>
            </class>
            <class name="InconsistentStateAt2PiWrapping" line="943">
                <extends class="MathIllegalArgumentException"/>
                <javadoc line="943">
                    Specialized exception for inconsistent BSP tree state inconsistency.
                      &lt;p&gt;
                      This exception is thrown at {@link ArcsSet} construction time when the{@link org.apache.commons.math3.geometry.partitioning.Region.Location inside/outside}state is not consistent at the 0, \(2 \pi \) crossing.
                      &lt;/p&gt;                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="952"/>
                <javadoc line="952">
                    Serializable UID.                    
                </javadoc>
                <javadoc line="955">
                    Simple constructor.                    
                </javadoc>
                <method name="InconsistentStateAt2PiWrapping" type="constructor" line="957"/>
            </class>
        </class>
    </source>