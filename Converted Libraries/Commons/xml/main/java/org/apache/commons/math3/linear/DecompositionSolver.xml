<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <interface name="DecompositionSolver">
            <javadoc line="20">
                Interface handling decomposition algorithms that can solve A &amp;times; X = B.
                  &lt;p&gt;
                  Decomposition algorithms decompose an A matrix has a product of several specific
                  matrices from which they can solve A &amp;times; X = B in least squares sense: they find X
                  such that ||A &amp;times; X - B|| is minimal.
                  &lt;p&gt;
                  Some solvers like {@link LUDecomposition} can only find the solution for
                  square matrices and when the solution is an exact linear solution, i.e. when
                  ||A &amp;times; X - B|| is exactly 0. Other solvers can also find solutions
                  with non-square matrix A and with non-null minimal norm. If an exact linear
                  solution exists it is also the minimal norm solution.                
                <version>
                    $Id: DecompositionSolver.java 1566017 2014-02-08 14:13:34Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="solve" type="RealVector" line="38"/>
            <javadoc line="38">
                Solve the linear equation A &amp;times; X = B for matrices A.
                  &lt;p&gt;
                  The A matrix is implicit, it is provided by the underlying
                  decomposition algorithm.                
                <param>
                    b right-hand side of the equation A &amp;times; X = B                    
                </param>
                <return>
                    a vector X that minimizes the two norm of A &amp;times; X - B                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the matrices dimensions do not match.                    
                </throws>
                <throws>
                    SingularMatrixException if the decomposed matrix is singular.                    
                </throws>
            </javadoc>
            <method name="solve" type="RealMatrix" line="52"/>
            <javadoc line="52">
                Solve the linear equation A &amp;times; X = B for matrices A.
                  &lt;p&gt;
                  The A matrix is implicit, it is provided by the underlying
                  decomposition algorithm.                
                <param>
                    b right-hand side of the equation A &amp;times; X = B                    
                </param>
                <return>
                    a matrix X that minimizes the two norm of A &amp;times; X - B                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the matrices dimensions do not match.                    
                </throws>
                <throws>
                    SingularMatrixException if the decomposed matrix is singular.                    
                </throws>
            </javadoc>
            <method name="isNonSingular" type="boolean" line="66"/>
            <javadoc line="66">
                Check if the decomposed matrix is non-singular.                
                <return>
                    true if the decomposed matrix is non-singular.                    
                </return>
            </javadoc>
            <method name="getInverse" type="RealMatrix" line="72"/>
            <javadoc line="72">
                Get the &lt;a href=&quot;http://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_pseudoinverse&quot;&gt;pseudo-inverse&lt;/a&gt;
                  of the decomposed matrix.
                  &lt;p&gt;
                  &lt;em&gt;This is equal to the inverse  of the decomposed matrix, if such an inverse exists.&lt;/em&gt;
                  &lt;p&gt;
                  If no such inverse exists, then the result has properties that resemble that of an inverse.
                  &lt;p&gt;
                  In particular, in this case, if the decomposed matrix is A, then the system of equations
                  \( A x = b \) may have no solutions, or many. If it has no solutions, then the pseudo-inverse
                  \( A^+ \) gives the &quot;closest&quot; solution \( z = A^+ b \), meaning \( \left \| A z - b \right \|_2 \)
                  is minimized. If there are many solutions, then \( z = A^+ b \) is the smallest solution,
                  meaning \( \left \| z \right \|_2 \) is minimized.
                  &lt;p&gt;
                  Note however that some decompositions cannot compute a pseudo-inverse for all matrices.
                  For example, the {@link LUDecomposition} is not defined for non-square matrices to begin
                  with. The {@link QRDecomposition} can operate on non-square matrices, but will throw{@link SingularMatrixException} if the decomposed matrix is singular. Refer to the javadoc
                  of specific decomposition implementations for more details.                
                <return>
                    pseudo-inverse matrix (which is the inverse, if it exists),
                      if the decomposition can pseudo-invert the decomposed matrix                    
                </return>
                <throws>
                    SingularMatrixException if the decomposed matrix is singular and the decomposition
                      can not compute a pseudo-inverse                    
                </throws>
            </javadoc>
        </interface>
    </source>