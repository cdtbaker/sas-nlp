<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="TriDiagonalTransformer" line="4">
            <javadoc line="4">
                Class transforming a symmetrical matrix to tridiagonal shape.
                  &lt;p&gt;A symmetrical m &amp;times; m matrix A can be written as the product of three matrices:
                  A = Q &amp;times; T &amp;times; Q&lt;sup&gt;T&lt;/sup&gt; with Q an orthogonal matrix and T a symmetrical
                  tridiagonal matrix. Both Q and T are m &amp;times; m matrices.&lt;/p&gt;
                  &lt;p&gt;This implementation only uses the upper part of the matrix, the part below the
                  diagonal is not accessed at all.&lt;/p&gt;
                  &lt;p&gt;Transformation to tridiagonal shape is often not a goal by itself, but it is
                  an intermediate step in more general decomposition algorithms like {@link EigenDecomposition eigen decomposition}. This class is therefore intended for internal
                  use by the library and is not public. As a consequence of this explicitly limited scope,
                  many methods directly returns references to internal arrays, not copies.&lt;/p&gt;                
                <version>
                    $Id: TriDiagonalTransformer.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="householderVectors" type="double" line="19"/>
            <javadoc line="19">
                Householder vectors.                
            </javadoc>
            <declaration name="main" type="double[]" line="23"/>
            <javadoc line="23">
                Main diagonal.                
            </javadoc>
            <declaration name="secondary" type="double[]" line="27"/>
            <javadoc line="27">
                Secondary diagonal.                
            </javadoc>
            <declaration name="cachedQ" type="RealMatrix" line="31"/>
            <javadoc line="31">
                Cached value of Q.                
            </javadoc>
            <declaration name="cachedQt" type="RealMatrix" line="35"/>
            <javadoc line="35">
                Cached value of Qt.                
            </javadoc>
            <declaration name="cachedT" type="RealMatrix" line="39"/>
            <javadoc line="39">
                Cached value of T.                
            </javadoc>
            <javadoc line="43">
                Build the transformation to tridiagonal shape of a symmetrical matrix.
                  &lt;p&gt;The specified matrix is assumed to be symmetrical without any check.
                  Only the upper triangular part of the matrix is used.&lt;/p&gt;                
                <param>
                    matrix Symmetrical matrix to transform.                    
                </param>
                <throws>
                    NonSquareMatrixException if the matrix is not square.                    
                </throws>
            </javadoc>
            <method name="TriDiagonalTransformer" type="constructor" line="50">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <scope line="51"/>
                <declaration name="m" type="int" line="54"/>
            </method>
            <javadoc line="63">
                Returns the matrix Q of the transform.
                  &lt;p&gt;Q is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the Q matrix                    
                </return>
            </javadoc>
            <method name="getQ" type="RealMatrix" line="68">
                <scope line="69"/>
            </method>
            <javadoc line="74">
                Returns the transpose of the matrix Q of the transform.
                  &lt;p&gt;Q is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the Q matrix                    
                </return>
            </javadoc>
            <method name="getQT" type="RealMatrix" line="79">
                <scope line="80">
                    <declaration name="m" type="int" line="81"/>
                    <declaration name="qta" type="double[][]" line="82"/>
                    <scope line="83">
                        <declaration name="hK" type="double[]" line="84"/>
                        <scope line="86">
                            <declaration name="inv" type="double" line="87"/>
                            <declaration name="beta" type="double" line="88"/>
                            <scope line="90"/>
                            <scope line="93">
                                <scope line="95"/>
                                <scope line="100"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="111">
                Returns the tridiagonal matrix T of the transform.                
                <return>
                    the T matrix                    
                </return>
            </javadoc>
            <method name="getT" type="RealMatrix" line="115">
                <scope line="116">
                    <declaration name="m" type="int" line="117"/>
                    <declaration name="ta" type="double[][]" line="118"/>
                    <scope line="119">
                        <scope line="121"/>
                        <scope line="124"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="132">
                Get the Householder vectors of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the main diagonal elements of the B matrix                    
                </return>
            </javadoc>
            <method name="getHouseholderVectorsRef" type="double[][]" line="138"/>
            <javadoc line="141">
                Get the main diagonal elements of the matrix T of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the main diagonal elements of the T matrix                    
                </return>
            </javadoc>
            <method name="getMainDiagonalRef" type="double[]" line="147"/>
            <javadoc line="150">
                Get the secondary diagonal elements of the matrix T of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the secondary diagonal elements of the T matrix                    
                </return>
            </javadoc>
            <method name="getSecondaryDiagonalRef" type="double[]" line="156"/>
            <javadoc line="159">
                Transform original matrix to tridiagonal form.
                  &lt;p&gt;Transformation is done using Householder transforms.&lt;/p&gt;                
            </javadoc>
            <method name="transform" type="void" line="163">
                <declaration name="m" type="int" line="164"/>
                <declaration name="z" type="double[]" line="165"/>
                <scope line="166">
                    <declaration name="hK" type="double[]" line="167"/>
                    <declaration name="xNormSqr" type="double" line="169"/>
                    <scope line="170">
                        <declaration name="c" type="double" line="171"/>
                    </scope>
                    <declaration name="a" type="double" line="174"/>
                    <scope line="176">
                        <declaration name="beta" type="double" line="178"/>
                        <scope line="180">
                            <declaration name="hI" type="double[]" line="181"/>
                            <declaration name="hKI" type="double" line="182"/>
                            <declaration name="zI" type="double" line="183"/>
                            <scope line="184">
                                <declaration name="hIJ" type="double" line="185"/>
                            </scope>
                        </scope>
                        <declaration name="gamma" type="double" line="191"/>
                        <scope line="192"/>
                        <scope line="196"/>
                        <scope line="199">
                            <declaration name="hI" type="double[]" line="200"/>
                            <scope line="201"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>