<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="TriDiagonalTransformer" line="25">
            <javadoc line="25">
                Class transforming a symmetrical matrix to tridiagonal shape.
                  &lt;p&gt;A symmetrical m &amp;times; m matrix A can be written as the product of three matrices:
                  A = Q &amp;times; T &amp;times; Q&lt;sup&gt;T&lt;/sup&gt; with Q an orthogonal matrix and T a symmetrical
                  tridiagonal matrix. Both Q and T are m &amp;times; m matrices.&lt;/p&gt;
                  &lt;p&gt;This implementation only uses the upper part of the matrix, the part below the
                  diagonal is not accessed at all.&lt;/p&gt;
                  &lt;p&gt;Transformation to tridiagonal shape is often not a goal by itself, but it is
                  an intermediate step in more general decomposition algorithms like {@link EigenDecomposition eigen decomposition}. This class is therefore intended for internal
                  use by the library and is not public. As a consequence of this explicitly limited scope,
                  many methods directly returns references to internal arrays, not copies.&lt;/p&gt;                
                <version>
                    $Id: TriDiagonalTransformer.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="householderVectors" type="double" line="41"/>
            <javadoc line="41">
                Householder vectors.                
            </javadoc>
            <declaration name="main" type="double[]" line="43"/>
            <javadoc line="43">
                Main diagonal.                
            </javadoc>
            <declaration name="secondary" type="double[]" line="45"/>
            <javadoc line="45">
                Secondary diagonal.                
            </javadoc>
            <declaration name="cachedQ" type="RealMatrix" line="47"/>
            <javadoc line="47">
                Cached value of Q.                
            </javadoc>
            <declaration name="cachedQt" type="RealMatrix" line="49"/>
            <javadoc line="49">
                Cached value of Qt.                
            </javadoc>
            <declaration name="cachedT" type="RealMatrix" line="51"/>
            <javadoc line="51">
                Cached value of T.                
            </javadoc>
            <javadoc line="54">
                Build the transformation to tridiagonal shape of a symmetrical matrix.
                  &lt;p&gt;The specified matrix is assumed to be symmetrical without any check.
                  Only the upper triangular part of the matrix is used.&lt;/p&gt;                
                <param>
                    matrix Symmetrical matrix to transform.                    
                </param>
                <throws>
                    NonSquareMatrixException if the matrix is not square.                    
                </throws>
            </javadoc>
            <method name="TriDiagonalTransformer" type="constructor" line="62">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <comment line="76">
                    transform matrix                    
                </comment>
                <scope line="63"/>
                <declaration name="m" type="int" line="68"/>
            </method>
            <javadoc line="80">
                Returns the matrix Q of the transform.
                  &lt;p&gt;Q is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the Q matrix                    
                </return>
            </javadoc>
            <method name="getQ" type="RealMatrix" line="85">
                <scope line="86"/>
            </method>
            <javadoc line="92">
                Returns the transpose of the matrix Q of the transform.
                  &lt;p&gt;Q is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the Q matrix                    
                </return>
            </javadoc>
            <method name="getQT" type="RealMatrix" line="97">
                <comment line="102">
                    build up first part of the matrix by applying Householder transforms                    
                </comment>
                <comment line="130">
                    return the cached matrix                    
                </comment>
                <scope line="98">
                    <declaration name="m" type="int" line="99"/>
                    <declaration name="qta" type="double[][]" line="100"/>
                    <scope line="103">
                        <declaration name="hK" type="double[]" line="104"/>
                        <scope line="106">
                            <declaration name="inv" type="double" line="107"/>
                            <declaration name="beta" type="double" line="108"/>
                            <scope line="110"/>
                            <scope line="113">
                                <scope line="115"/>
                                <scope line="120"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="134">
                Returns the tridiagonal matrix T of the transform.                
                <return>
                    the T matrix                    
                </return>
            </javadoc>
            <method name="getT" type="RealMatrix" line="138">
                <comment line="154">
                    return the cached matrix                    
                </comment>
                <scope line="139">
                    <declaration name="m" type="int" line="140"/>
                    <declaration name="ta" type="double[][]" line="141"/>
                    <scope line="142">
                        <scope line="144"/>
                        <scope line="147"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="158">
                Get the Householder vectors of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the main diagonal elements of the B matrix                    
                </return>
            </javadoc>
            <method name="getHouseholderVectorsRef" type="double[][]" line="164"/>
            <javadoc line="168">
                Get the main diagonal elements of the matrix T of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the main diagonal elements of the T matrix                    
                </return>
            </javadoc>
            <method name="getMainDiagonalRef" type="double[]" line="174"/>
            <javadoc line="178">
                Get the secondary diagonal elements of the matrix T of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the secondary diagonal elements of the T matrix                    
                </return>
            </javadoc>
            <method name="getSecondaryDiagonalRef" type="double[]" line="184"/>
            <javadoc line="188">
                Transform original matrix to tridiagonal form.
                  &lt;p&gt;Transformation is done using Householder transforms.&lt;/p&gt;                
            </javadoc>
            <method name="transform" type="void" line="192">
                <comment line="197">
                    zero-out a row and a column simultaneously                    
                </comment>
                <comment line="208">
                    apply Householder transform from left and right simultaneously                    
                </comment>
                <comment line="213">
                    compute a = beta A v, where v is the Householder vector                    
                </comment>
                <comment line="214">
                    this loop is written in such a way                    
                </comment>
                <comment line="215">
                    1) only the upper triangular part of the matrix is accessed                    
                </comment>
                <comment line="216">
                    2) access is cache-friendly for a matrix stored in rows                    
                </comment>
                <comment line="230">
                    compute gamma = beta vT z / 2                    
                </comment>
                <comment line="237">
                    compute z = z - gamma v                    
                </comment>
                <comment line="242">
                    update matrix: A = A - v zT - z vT                    
                </comment>
                <comment line="243">
                    only the upper triangular part of the matrix is updated                    
                </comment>
                <declaration name="m" type="int" line="193"/>
                <declaration name="z" type="double[]" line="194"/>
                <scope line="195">
                    <declaration name="hK" type="double[]" line="198"/>
                    <declaration name="xNormSqr" type="double" line="200"/>
                    <scope line="201">
                        <declaration name="c" type="double" line="202"/>
                    </scope>
                    <declaration name="a" type="double" line="205"/>
                    <scope line="207">
                        <declaration name="beta" type="double" line="211"/>
                        <scope line="218">
                            <declaration name="hI" type="double[]" line="219"/>
                            <declaration name="hKI" type="double" line="220"/>
                            <declaration name="zI" type="double" line="221"/>
                            <scope line="222">
                                <declaration name="hIJ" type="double" line="223"/>
                            </scope>
                        </scope>
                        <declaration name="gamma" type="double" line="231"/>
                        <scope line="232"/>
                        <scope line="238"/>
                        <scope line="244">
                            <declaration name="hI" type="double[]" line="245"/>
                            <scope line="246"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>