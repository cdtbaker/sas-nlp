<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotANumberException"/>
        <import package="org.apache.commons.math3.exception.NotFiniteNumberException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <class name="EnumeratedIntegerDistribution" line="12">
            <extends class="AbstractIntegerDistribution"/>
            <javadoc line="12">
                &lt;p&gt;Implementation of an integer-valued {@link EnumeratedDistribution}.&lt;/p&gt;
                  &lt;p&gt;Values with zero-probability are allowed but they do not extend the
                  support.&lt;br/&gt;
                  Duplicate values are allowed. Probabilities of duplicate values are combined
                  when computing cumulative probabilities and statistics.&lt;/p&gt;                
                <version>
                    $Id: EnumeratedIntegerDistribution.java 1456769 2013-03-15 04:51:34Z psteitz $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="22"/>
            <javadoc line="22">
                Serializable UID.                
            </javadoc>
            <declaration name="innerDistribution" type="EnumeratedDistribution&lt;Integer&gt;" line="26"/>
            <javadoc line="26">
                {@link EnumeratedDistribution} instance (using the {@link Integer} wrapper)
                  used to generate the pmf.                
            </javadoc>
            <javadoc line="31">
                Create a discrete distribution using the given probability mass function
                  definition.                
                <param>
                    singletons array of random variable values.                    
                </param>
                <param>
                    probabilities array of probabilities.                    
                </param>
                <throws>
                    DimensionMismatchException if{@code singletons.length != probabilities.length}                    
                </throws>
                <throws>
                    NotPositiveException if any of the probabilities are negative.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the probabilities are infinite.                    
                </throws>
                <throws>
                    NotANumberException if any of the probabilities are NaN.                    
                </throws>
                <throws>
                    MathArithmeticException all of the probabilities are 0.                    
                </throws>
            </javadoc>
            <method name="EnumeratedIntegerDistribution" type="constructor" line="42">
                <params>
                    <param name="singletons" type="int[]"/>
                    <param name="probabilities" type="double[]"/>
                </params>
            </method>
            <javadoc line="45">
                Create a discrete distribution using the given random number generator
                  and probability mass function definition.                
                <param>
                    rng random number generator.                    
                </param>
                <param>
                    singletons array of random variable values.                    
                </param>
                <param>
                    probabilities array of probabilities.                    
                </param>
                <throws>
                    DimensionMismatchException if{@code singletons.length != probabilities.length}                    
                </throws>
                <throws>
                    NotPositiveException if any of the probabilities are negative.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the probabilities are infinite.                    
                </throws>
                <throws>
                    NotANumberException if any of the probabilities are NaN.                    
                </throws>
                <throws>
                    MathArithmeticException all of the probabilities are 0.                    
                </throws>
            </javadoc>
            <method name="EnumeratedIntegerDistribution" type="constructor" line="57">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="singletons" type="int[]"/>
                    <param name="probabilities" type="double[]"/>
                </params>
                <scope line="59"/>
                <declaration name="samples" type="List&lt;Pair&lt;Integer,Double&gt;&gt;" line="62"/>
                <scope line="63"/>
            </method>
            <javadoc line="68">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="71">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="77">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="probability" type="double" line="78"/>
                <scope line="79">
                    <scope line="80"/>
                </scope>
            </method>
            <javadoc line="86">
                {@inheritDoc}                
                <return>
                    {@code sum(singletons[i]  probabilities[i])}                    
                </return>
            </javadoc>
            <method name="getNumericalMean" type="double" line="90">
                <declaration name="mean" type="double" line="91"/>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                {@inheritDoc}                
                <return>
                    {@code sum((singletons[i] - mean) ^ 2  probabilities[i])}                    
                </return>
            </javadoc>
            <method name="getNumericalVariance" type="double" line="101">
                <declaration name="mean" type="double" line="102"/>
                <declaration name="meanOfSquares" type="double" line="103"/>
                <scope line="104"/>
            </method>
            <javadoc line="110">
                {@inheritDoc}Returns the lowest value with non-zero probability.                
                <return>
                    the lowest value with non-zero probability.                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="int" line="114">
                <declaration name="min" type="int" line="115"/>
                <scope line="116">
                    <scope line="117"/>
                </scope>
            </method>
            <javadoc line="123">
                {@inheritDoc}Returns the highest value with non-zero probability.                
                <return>
                    the highest value with non-zero probability.                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="int" line="127">
                <declaration name="max" type="int" line="128"/>
                <scope line="129">
                    <scope line="130"/>
                </scope>
            </method>
            <javadoc line="136">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="140"/>
            <javadoc line="143">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="int" line="146"/>
        </class>
    </source>