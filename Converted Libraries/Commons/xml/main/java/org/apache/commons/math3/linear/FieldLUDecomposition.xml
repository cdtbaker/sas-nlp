<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="FieldLUDecomposition" line="6">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="6">
                Calculates the LUP-decomposition of a square matrix.
                  &lt;p&gt;The LUP-decomposition of a matrix A consists of three matrices
                  L, U and P that satisfy: PA = LU, L is lower triangular, and U is
                  upper triangular and P is a permutation matrix. All matrices are
                  m&amp;times;m.&lt;/p&gt;
                  &lt;p&gt;Since {@link FieldElement field elements} do not provide an ordering
                  operator, the permutation matrix is computed here only in order to avoid
                  a zero pivot element, no attempt is done to get the largest pivot
                  element.&lt;/p&gt;
                  &lt;p&gt;This class is based on the class with similar name from the
                  &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; library.&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;a {@link #getP() getP} method has been added,&lt;/li&gt;
                  &lt;li&gt;the {@code det} method has been renamed as {@link #getDeterminant()getDeterminant},&lt;/li&gt;
                  &lt;li&gt;the {@code getDoublePivot} method has been removed (but the int based{@link #getPivot() getPivot} method has been kept),&lt;/li&gt;
                  &lt;li&gt;the {@code solve} and {@code isNonSingular} methods have been replaced
                  by a {@link #getSolver() getSolver} method and the equivalent methods
                  provided by the returned {@link DecompositionSolver}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <see>
                    <a href="http://mathworld.wolfram.com/LUDecomposition.html">MathWorld</a>                    
                </see>
                <see>
                    <a href="http://en.wikipedia.org/wiki/LU_decomposition">Wikipedia</a>                    
                </see>
                <version>
                    $Id: FieldLUDecomposition.java 1449528 2013-02-24 19:06:20Z luc $                    
                </version>
                <since>
                    2.0 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="field" type="Field&lt;T&gt;" line="34"/>
            <javadoc line="34">
                Field to which the elements belong.                
            </javadoc>
            <declaration name="lu" type="T[][]" line="38"/>
            <javadoc line="38">
                Entries of LU decomposition.                
            </javadoc>
            <declaration name="pivot" type="int[]" line="42"/>
            <javadoc line="42">
                Pivot permutation associated with LU decomposition.                
            </javadoc>
            <declaration name="even" type="boolean" line="46"/>
            <javadoc line="46">
                Parity of the permutation associated with the LU decomposition.                
            </javadoc>
            <declaration name="singular" type="boolean" line="50"/>
            <javadoc line="50">
                Singularity indicator.                
            </javadoc>
            <declaration name="cachedL" type="FieldMatrix&lt;T&gt;" line="54"/>
            <javadoc line="54">
                Cached value of L.                
            </javadoc>
            <declaration name="cachedU" type="FieldMatrix&lt;T&gt;" line="58"/>
            <javadoc line="58">
                Cached value of U.                
            </javadoc>
            <declaration name="cachedP" type="FieldMatrix&lt;T&gt;" line="62"/>
            <javadoc line="62">
                Cached value of P.                
            </javadoc>
            <javadoc line="66">
                Calculates the LU-decomposition of the given matrix.                
                <param>
                    matrix The matrix to decompose.                    
                </param>
                <throws>
                    NonSquareMatrixException if matrix is not square                    
                </throws>
            </javadoc>
            <method name="FieldLUDecomposition" type="constructor" line="71">
                <params>
                    <param name="matrix" type="FieldMatrix<T>"/>
                </params>
                <scope line="72"/>
                <declaration name="m" type="int" line="75"/>
                <scope line="82"/>
                <scope line="87">
                    <declaration name="sum" type="T" line="88"/>
                    <scope line="89">
                        <declaration name="luRow" type="T[]" line="90"/>
                        <scope line="92"/>
                    </scope>
                    <declaration name="nonZero" type="int" line="97"/>
                    <scope line="98">
                        <declaration name="luRow" type="T[]" line="99"/>
                        <scope line="101"/>
                        <scope line="105"/>
                    </scope>
                    <scope line="109"/>
                    <scope line="113">
                        <declaration name="tmp" type="T" line="114"/>
                        <scope line="115"/>
                        <declaration name="temp" type="int" line="120"/>
                    </scope>
                    <declaration name="luDiag" type="T" line="125"/>
                    <scope line="126">
                        <declaration name="luRow" type="T[]" line="127"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="132">
                Returns the matrix L of the decomposition.
                  &lt;p&gt;L is a lower-triangular matrix&lt;/p&gt;                
                <return>
                    the L matrix (or null if decomposed matrix is singular)                    
                </return>
            </javadoc>
            <method name="getL" type="FieldMatrix<T>" line="137">
                <scope line="138">
                    <declaration name="m" type="int" line="139"/>
                    <scope line="141">
                        <declaration name="luI" type="T[]" line="142"/>
                        <scope line="143"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="151">
                Returns the matrix U of the decomposition.
                  &lt;p&gt;U is an upper-triangular matrix&lt;/p&gt;                
                <return>
                    the U matrix (or null if decomposed matrix is singular)                    
                </return>
            </javadoc>
            <method name="getU" type="FieldMatrix<T>" line="156">
                <scope line="157">
                    <declaration name="m" type="int" line="158"/>
                    <scope line="160">
                        <declaration name="luI" type="T[]" line="161"/>
                        <scope line="162"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="169">
                Returns the P rows permutation matrix.
                  &lt;p&gt;P is a sparse matrix with exactly one element set to 1.0 in
                  each row and each column, all other elements being set to 0.0.&lt;/p&gt;
                  &lt;p&gt;The positions of the 1 elements are given by the {@link #getPivot()pivot permutation vector}.&lt;/p&gt;                
                <return>
                    the P rows permutation matrix (or null if decomposed matrix is singular)                    
                </return>
                <see>
                    #getPivot()                    
                </see>
            </javadoc>
            <method name="getP" type="FieldMatrix<T>" line="177">
                <scope line="178">
                    <declaration name="m" type="int" line="179"/>
                    <scope line="181"/>
                </scope>
            </method>
            <javadoc line="187">
                Returns the pivot permutation vector.                
                <return>
                    the pivot permutation vector                    
                </return>
                <see>
                    #getP()                    
                </see>
            </javadoc>
            <method name="getPivot" type="int[]" line="192"/>
            <javadoc line="195">
                Return the determinant of the matrix.                
                <return>
                    determinant of the matrix                    
                </return>
            </javadoc>
            <method name="getDeterminant" type="T" line="199">
                <scope line="200"/>
                <scope line="203">
                    <declaration name="m" type="int" line="204"/>
                    <declaration name="determinant" type="T" line="205"/>
                    <scope line="206"/>
                </scope>
            </method>
            <javadoc line="212">
                Get a solver for finding the A &amp;times; X = B solution in exact linear sense.                
                <return>
                    a solver                    
                </return>
            </javadoc>
            <method name="getSolver" type="FieldDecompositionSolver<T>" line="216"/>
            <class name="Solver" line="219">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <implements interface="FieldDecompositionSolver">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </implements>
                <javadoc line="219">
                    Specialized solver.                    
                </javadoc>
                <declaration name="field" type="Field&lt;T&gt;" line="223"/>
                <javadoc line="223">
                    Field to which the elements belong.                    
                </javadoc>
                <declaration name="lu" type="T[][]" line="227"/>
                <javadoc line="227">
                    Entries of LU decomposition.                    
                </javadoc>
                <declaration name="pivot" type="int[]" line="231"/>
                <javadoc line="231">
                    Pivot permutation associated with LU decomposition.                    
                </javadoc>
                <declaration name="singular" type="boolean" line="235"/>
                <javadoc line="235">
                    Singularity indicator.                    
                </javadoc>
                <javadoc line="239">
                    Build a solver from decomposed matrix.                    
                    <param>
                        field field to which the matrix elements belong                        
                    </param>
                    <param>
                        lu entries of LU decomposition                        
                    </param>
                    <param>
                        pivot pivot permutation associated with LU decomposition                        
                    </param>
                    <param>
                        singular singularity indicator                        
                    </param>
                </javadoc>
                <method name="Solver" type="constructor" line="246">
                    <params>
                        <param name="field" type="Field<T>"/>
                        <param name="lu" type="T[][]"/>
                        <param name="pivot" type="int[]"/>
                        <param name="singular" type="boolean"/>
                    </params>
                </method>
                <javadoc line="252">
                    {@inheritDoc}                    
                </javadoc>
                <method name="isNonSingular" type="boolean" line="255"/>
                <javadoc line="258">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="FieldVector<T>" line="261">
                    <params>
                        <param name="b" type="FieldVector<T>"/>
                    </params>
                    <scope line="262"/>
                    <scope line="265">
                        <declaration name="m" type="int" line="266"/>
                        <scope line="267"/>
                        <scope line="270"/>
                        <declaration name="bp" type="T[]" line="273"/>
                        <scope line="274"/>
                        <scope line="277">
                            <declaration name="bpCol" type="T" line="278"/>
                            <scope line="279"/>
                        </scope>
                        <scope line="283">
                            <declaration name="bpCol" type="T" line="285"/>
                            <scope line="286"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="293">
                    Solve the linear equation A &amp;times; X = B.
                      &lt;p&gt;The A matrix is implicit here. It is &lt;/p&gt;                    
                    <param>
                        b right-hand side of the equation A &times; X = B                        
                    </param>
                    <return>
                        a vector X such that A &times; X = B                        
                    </return>
                    <throws>
                        DimensionMismatchException if the matrices dimensions do not match.                        
                    </throws>
                    <throws>
                        SingularMatrixException if the decomposed matrix is singular.                        
                    </throws>
                </javadoc>
                <method name="solve" type="ArrayFieldVector<T>" line="301">
                    <params>
                        <param name="b" type="ArrayFieldVector<T>"/>
                    </params>
                    <declaration name="m" type="int" line="302"/>
                    <declaration name="length" type="int" line="303"/>
                    <scope line="304"/>
                    <scope line="307"/>
                    <declaration name="bp" type="T[]" line="310"/>
                    <scope line="311"/>
                    <scope line="314">
                        <declaration name="bpCol" type="T" line="315"/>
                        <scope line="316"/>
                    </scope>
                    <scope line="320">
                        <declaration name="bpCol" type="T" line="322"/>
                        <scope line="323"/>
                    </scope>
                </method>
                <javadoc line="329">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="FieldMatrix<T>" line="332">
                    <params>
                        <param name="b" type="FieldMatrix<T>"/>
                    </params>
                    <declaration name="m" type="int" line="333"/>
                    <scope line="334"/>
                    <scope line="337"/>
                    <declaration name="nColB" type="int" line="340"/>
                    <declaration name="bp" type="T[][]" line="341"/>
                    <scope line="342">
                        <declaration name="bpRow" type="T[]" line="343"/>
                        <declaration name="pRow" type="int" line="344"/>
                        <scope line="345"/>
                    </scope>
                    <scope line="349">
                        <declaration name="bpCol" type="T[]" line="350"/>
                        <scope line="351">
                            <declaration name="bpI" type="T[]" line="352"/>
                            <declaration name="luICol" type="T" line="353"/>
                            <scope line="354"/>
                        </scope>
                    </scope>
                    <scope line="359">
                        <declaration name="bpCol" type="T[]" line="360"/>
                        <declaration name="luDiag" type="T" line="361"/>
                        <scope line="362"/>
                        <scope line="365">
                            <declaration name="bpI" type="T[]" line="366"/>
                            <declaration name="luICol" type="T" line="367"/>
                            <scope line="368"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="375">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getInverse" type="FieldMatrix<T>" line="378">
                    <declaration name="m" type="int" line="379"/>
                    <declaration name="one" type="T" line="380"/>
                    <declaration name="identity" type="FieldMatrix&lt;T&gt;" line="381"/>
                    <scope line="382"/>
                </method>
            </class>
        </class>
    </source>