<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.partitioning">
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.geometry.Space"/>
        <interface name="Hyperplane">
            <type_params>
                <type_param name="S"/>
            </type_params>
            <javadoc line="4">
                This interface represents an hyperplane of a space.
                  &lt;p&gt;The most prominent place where hyperplane appears in space
                  partitioning is as cutters. Each partitioning node in a {@link BSPTree BSP tree} has a cut {@link SubHyperplane sub-hyperplane}which is either an hyperplane or a part of an hyperplane. In an
                  n-dimensions euclidean space, an hyperplane is an (n-1)-dimensions
                  hyperplane (for example a traditional plane in the 3D euclidean
                  space). They can be more exotic objects in specific fields, for
                  example a circle on the surface of the unit sphere.&lt;/p&gt;                
                <param>
                    <S>
                      Type of the space.                    
                </param>
                <version>
                    $Id: Hyperplane.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="copySelf" type="Hyperplane<S>" line="18"/>
            <javadoc line="18">
                Copy the instance.
                  &lt;p&gt;The instance created is completely independant of the original
                  one. A deep copy is used, none of the underlying objects are
                  shared (except for immutable objects).&lt;/p&gt;                
                <return>
                    a new hyperplane, copy of the instance                    
                </return>
            </javadoc>
            <method name="getOffset" type="double" line="26"/>
            <javadoc line="26">
                Get the offset (oriented distance) of a point.
                  &lt;p&gt;The offset is 0 if the point is on the underlying hyperplane,
                  it is positive if the point is on one particular side of the
                  hyperplane, and it is negative if the point is on the other side,
                  according to the hyperplane natural orientation.&lt;/p&gt;                
                <param>
                    point point to check                    
                </param>
                <return>
                    offset of the point                    
                </return>
            </javadoc>
            <method name="sameOrientationAs" type="boolean" line="36"/>
            <javadoc line="36">
                Check if the instance has the same orientation as another hyperplane.
                  &lt;p&gt;This method is expected to be called on parallel hyperplanes. The
                  method should &lt;em&gt;not&lt;/em&gt; re-check for parallelism, only for
                  orientation, typically by testing something like the sign of the
                  dot-products of normals.&lt;/p&gt;                
                <param>
                    other other hyperplane to check against the instance                    
                </param>
                <return>
                    true if the instance and the other hyperplane have
                      the same orientation                    
                </return>
            </javadoc>
            <method name="wholeHyperplane" type="SubHyperplane<S>" line="47"/>
            <javadoc line="47">
                Build a sub-hyperplane covering the whole hyperplane.                
                <return>
                    a sub-hyperplane covering the whole hyperplane                    
                </return>
            </javadoc>
            <method name="wholeSpace" type="Region<S>" line="52"/>
            <javadoc line="52">
                Build a region covering the whole space.                
                <return>
                    a region containing the instance                    
                </return>
            </javadoc>
        </interface>
    </source>