<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="java.io.Serializable"/>
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="AbstractFormat" line="29">
            <extends class="NumberFormat"/>
            <implements interface="Serializable"/>
            <javadoc line="29">
                Common part shared by both {@link FractionFormat} and {@link BigFractionFormat}.                
                <version>
                    $Id: AbstractFormat.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="36"/>
            <javadoc line="36">
                Serializable version identifier.                
            </javadoc>
            <declaration name="denominatorFormat" type="NumberFormat" line="39"/>
            <javadoc line="39">
                The format used for the denominator.                
            </javadoc>
            <declaration name="numeratorFormat" type="NumberFormat" line="42"/>
            <javadoc line="42">
                The format used for the numerator.                
            </javadoc>
            <javadoc line="45">
                Create an improper formatting instance with the default number format
                  for the numerator and denominator.                
            </javadoc>
            <method name="AbstractFormat" type="constructor" line="49"/>
            <javadoc line="53">
                Create an improper formatting instance with a custom number format for
                  both the numerator and denominator.                
                <param>
                    format the custom format for both the numerator and denominator.                    
                </param>
            </javadoc>
            <method name="AbstractFormat" type="constructor" line="58">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="62">
                Create an improper formatting instance with a custom number format for
                  the numerator and a custom number format for the denominator.                
                <param>
                    numeratorFormat the custom format for the numerator.                    
                </param>
                <param>
                    denominatorFormat the custom format for the denominator.                    
                </param>
            </javadoc>
            <method name="AbstractFormat" type="constructor" line="69">
                <params>
                    <param name="numeratorFormat" type="NumberFormat"/>
                    <param name="denominatorFormat" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="74">
                Create a default number format.  The default number format is based on{@link NumberFormat#getNumberInstance(java.util.Locale)}. The only
                  customization is the maximum number of BigFraction digits, which is set to 0.                
                <return>
                    the default number format.                    
                </return>
            </javadoc>
            <method name="getDefaultNumberFormat" type="NumberFormat" line="80"/>
            <javadoc line="84">
                Create a default number format.  The default number format is based on{@link NumberFormat#getNumberInstance(java.util.Locale)}. The only
                  customization is the maximum number of BigFraction digits, which is set to 0.                
                <param>
                    locale the specific locale used by the format.                    
                </param>
                <return>
                    the default number format specific to the given locale.                    
                </return>
            </javadoc>
            <method name="getDefaultNumberFormat" type="NumberFormat" line="91">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="nf" type="NumberFormat" line="92"/>
            </method>
            <javadoc line="98">
                Access the denominator format.                
                <return>
                    the denominator format.                    
                </return>
            </javadoc>
            <method name="getDenominatorFormat" type="NumberFormat" line="102"/>
            <javadoc line="106">
                Access the numerator format.                
                <return>
                    the numerator format.                    
                </return>
            </javadoc>
            <method name="getNumeratorFormat" type="NumberFormat" line="110"/>
            <javadoc line="114">
                Modify the denominator format.                
                <param>
                    format the new denominator format value.                    
                </param>
                <throws>
                    NullArgumentException if {@code format} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="setDenominatorFormat" type="void" line="119">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
                <scope line="120"/>
            </method>
            <javadoc line="126">
                Modify the numerator format.                
                <param>
                    format the new numerator format value.                    
                </param>
                <throws>
                    NullArgumentException if {@code format} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="setNumeratorFormat" type="void" line="131">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
                <scope line="132"/>
            </method>
            <javadoc line="138">
                Parses &lt;code&gt;source&lt;/code&gt; until a non-whitespace character is found.                
                <param>
                    source the string to parse                    
                </param>
                <param>
                    pos input/output parsing parameter.  On output, &lt;code&gt;pos&lt;/code&gt;
                      holds the index of the next non-whitespace character.                    
                </param>
            </javadoc>
            <method name="parseAndIgnoreWhitespace" type="void" line="145">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
            </method>
            <javadoc line="150">
                Parses &lt;code&gt;source&lt;/code&gt; until a non-whitespace character is found.                
                <param>
                    source the string to parse                    
                </param>
                <param>
                    pos input/output parsing parameter.                    
                </param>
                <return>
                    the first non-whitespace character.                    
                </return>
            </javadoc>
            <method name="parseNextCharacter" type="char" line="157">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <declaration name="index" type="int" line="158"/>
                <declaration name="n" type="int" line="159"/>
                <declaration name="ret" type="char" line="160"/>
                <scope line="162">
                    <declaration name="c" type="char" line="163"/>
                    <scope line="164"/>
                    <scope line="169"/>
                </scope>
            </method>
            <javadoc line="177">
                Formats a double value as a fraction and appends the result to a StringBuffer.                
                <param>
                    value the double value to format                    
                </param>
                <param>
                    buffer StringBuffer to append to                    
                </param>
                <param>
                    position On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </param>
                <return>
                    a reference to the appended buffer                    
                </return>
                <see>
                    #format(Object,StringBuffer,FieldPosition)                    
                </see>
            </javadoc>
            <method name="format" type="StringBuffer" line="189">
                <params>
                    <param name="value" type="double"/>
                    <param name="buffer" type="StringBuffer"/>
                    <param name="position" type="FieldPosition"/>
                </params>
            </method>
            <javadoc line="194">
                Formats a long value as a fraction and appends the result to a StringBuffer.                
                <param>
                    value the long value to format                    
                </param>
                <param>
                    buffer StringBuffer to append to                    
                </param>
                <param>
                    position On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </param>
                <return>
                    a reference to the appended buffer                    
                </return>
                <see>
                    #format(Object,StringBuffer,FieldPosition)                    
                </see>
            </javadoc>
            <method name="format" type="StringBuffer" line="206">
                <params>
                    <param name="value" type="long"/>
                    <param name="buffer" type="StringBuffer"/>
                    <param name="position" type="FieldPosition"/>
                </params>
            </method>
        </class>
    </source>