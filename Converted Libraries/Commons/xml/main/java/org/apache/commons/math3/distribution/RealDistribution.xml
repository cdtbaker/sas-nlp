<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <interface name="RealDistribution">
            <javadoc line="22">
                Base interface for distributions on the reals.                
                <version>
                    $Id: RealDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="probability" type="double" line="29"/>
            <javadoc line="29">
                For a random variable {@code X} whose values are distributed according
                  to this distribution, this method returns {@code P(X = x)}. In other
                  words, this method represents the probability mass function (PMF)
                  for the distribution.                
                <param>
                    x the point at which the PMF is evaluated                    
                </param>
                <return>
                    the value of the probability mass function at point {@code x}                    
                </return>
            </javadoc>
            <method name="density" type="double" line="40"/>
            <javadoc line="40">
                Returns the probability density function (PDF) of this distribution
                  evaluated at the specified point {@code x}. In general, the PDF is
                  the derivative of the {@link #cumulativeProbability(double) CDF}.
                  If the derivative does not exist at {@code x}, then an appropriate
                  replacement should be returned, e.g. {@code Double.POSITIVE_INFINITY},{@code Double.NaN}, or  the limit inferior or limit superior of the
                  difference quotient.                
                <param>
                    x the point at which the PDF is evaluated                    
                </param>
                <return>
                    the value of the probability density function at point {@code x}                    
                </return>
            </javadoc>
            <method name="cumulativeProbability" type="double" line="54"/>
            <javadoc line="54">
                For a random variable {@code X} whose values are distributed according
                  to this distribution, this method returns {@code P(X &lt;= x)}. In other
                  words, this method represents the (cumulative) distribution function
                  (CDF) for this distribution.                
                <param>
                    x the point at which the CDF is evaluated                    
                </param>
                <return>
                    the probability that a random variable with this
                      distribution takes a value less than or equal to {@code x}                    
                </return>
            </javadoc>
            <method name="cumulativeProbability" type="double" line="66"/>
            <javadoc line="66">
                For a random variable {@code X} whose values are distributed according
                  to this distribution, this method returns {@code P(x0 &lt; X &lt;= x1)}.                
                <param>
                    x0 the exclusive lower bound                    
                </param>
                <param>
                    x1 the inclusive upper bound                    
                </param>
                <return>
                    the probability that a random variable with this distribution
                      takes a value between {@code x0} and {@code x1},
                      excluding the lower and including the upper endpoint                    
                </return>
                <throws>
                    NumberIsTooLargeException if {@code x0 > x1}                    
                </throws>
                <deprecated>
                    As of 3.1. In 4.0, this method will be renamed{@code probability(double x0, double x1)}.                    
                </deprecated>
            </javadoc>
            <method name="inverseCumulativeProbability" type="double" line="83"/>
            <javadoc line="83">
                Computes the quantile function of this distribution. For a random
                  variable {@code X} distributed according to this distribution, the
                  returned value is
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;inf{x in R | P(X&lt;=x) &gt;= p}&lt;/code&gt; for {@code 0 &lt; p &lt;= 1},&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;inf{x in R | P(X&lt;=x) &gt; 0}&lt;/code&gt; for {@code p = 0}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    p the cumulative probability                    
                </param>
                <return>
                    the smallest {@code p}-quantile of this distribution
                      (largest 0-quantile for {@code p = 0})                    
                </return>
                <throws>
                    OutOfRangeException if {@code p < 0} or {@code p > 1}                    
                </throws>
            </javadoc>
            <method name="getNumericalMean" type="double" line="99"/>
            <javadoc line="99">
                Use this method to get the numerical value of the mean of this
                  distribution.                
                <return>
                    the mean or {@code Double.NaN} if it is not defined                    
                </return>
            </javadoc>
            <method name="getNumericalVariance" type="double" line="107"/>
            <javadoc line="107">
                Use this method to get the numerical value of the variance of this
                  distribution.                
                <return>
                    the variance (possibly {@code Double.POSITIVE_INFINITY} as
                      for certain cases in {@link TDistribution}) or {@code Double.NaN} if it
                      is not defined                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="117"/>
            <javadoc line="117">
                Access the lower bound of the support. This method must return the same
                  value as {@code inverseCumulativeProbability(0)}. In other words, this
                  method must return
                  &lt;p&gt;&lt;code&gt;inf {x in R | P(X &lt;= x) &gt; 0}&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    lower bound of the support (might be{@code Double.NEGATIVE_INFINITY})                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="128"/>
            <javadoc line="128">
                Access the upper bound of the support. This method must return the same
                  value as {@code inverseCumulativeProbability(1)}. In other words, this
                  method must return
                  &lt;p&gt;&lt;code&gt;inf {x in R | P(X &lt;= x) = 1}&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    upper bound of the support (might be{@code Double.POSITIVE_INFINITY})                    
                </return>
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="139"/>
            <javadoc line="139">
                Whether or not the lower bound of support is in the domain of the density
                  function.  Returns true iff {@code getSupporLowerBound()} is finite and{@code density(getSupportLowerBound())} returns a non-NaN, non-infinite
                  value.                
                <return>
                    true if the lower bound of support is finite and the density
                      function returns a non-NaN, non-infinite value there                    
                </return>
                <deprecated>
                    to be removed in 4.0                    
                </deprecated>
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="151"/>
            <javadoc line="151">
                Whether or not the upper bound of support is in the domain of the density
                  function.  Returns true iff {@code getSupportUpperBound()} is finite and{@code density(getSupportUpperBound())} returns a non-NaN, non-infinite
                  value.                
                <return>
                    true if the upper bound of support is finite and the density
                      function returns a non-NaN, non-infinite value there                    
                </return>
                <deprecated>
                    to be removed in 4.0                    
                </deprecated>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="163"/>
            <javadoc line="163">
                Use this method to get information about whether the support is connected,
                  i.e. whether all values between the lower and upper bound of the support
                  are included in the support.                
                <return>
                    whether the support is connected or not                    
                </return>
            </javadoc>
            <method name="reseedRandomGenerator" type="void" line="172"/>
            <javadoc line="172">
                Reseed the random generator used to generate samples.                
                <param>
                    seed the new seed                    
                </param>
            </javadoc>
            <method name="sample" type="double" line="179"/>
            <javadoc line="179">
                Generate a random value sampled from this distribution.                
                <return>
                    a random value.                    
                </return>
            </javadoc>
            <method name="sample" type="double[]" line="186"/>
            <javadoc line="186">
                Generate a random sample from the distribution.                
                <param>
                    sampleSize the number of random values to generate                    
                </param>
                <return>
                    an array representing the random sample                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif {@code sampleSize} is not positive                    
                </throws>
            </javadoc>
        </interface>
    </source>