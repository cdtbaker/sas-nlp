<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.integration.gauss">
        <import package="java.math.BigDecimal"/>
        <import package="java.math.MathContext"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <class name="LegendreHighPrecisionRuleFactory" line="25">
            <extends class="BaseRuleFactory">
                <type_params>
                    <type_param name="BigDecimal"/>
                </type_params>
            </extends>
            <javadoc line="25">
                Factory that creates Gauss-type quadrature rule using Legendre polynomials.
                  In this implementation, the lower and upper bounds of the natural interval
                  of integration are -1 and 1, respectively.
                  The Legendre polynomials are evaluated using the recurrence relation
                  presented in &lt;a href=&quot;http://en.wikipedia.org/wiki/Abramowitz_and_Stegun&quot;
                  Abramowitz and Stegun, 1964&lt;/a&gt;.                
                <since>
                    3.1                    
                </since>
                <version>
                    $Id: LegendreHighPrecisionRuleFactory.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
            </javadoc>
            <declaration name="mContext" type="MathContext" line="37"/>
            <javadoc line="37">
                Settings for enhanced precision computations.                
            </javadoc>
            <declaration name="two" type="BigDecimal" line="39"/>
            <javadoc line="39">
                The number {@code 2}.                
            </javadoc>
            <declaration name="minusOne" type="BigDecimal" line="41"/>
            <javadoc line="41">
                The number {@code -1}.                
            </javadoc>
            <declaration name="oneHalf" type="BigDecimal" line="43"/>
            <javadoc line="43">
                The number {@code 0.5}.                
            </javadoc>
            <javadoc line="46">
                Default precision is {@link MathContext#DECIMAL128 DECIMAL128}.                
            </javadoc>
            <method name="LegendreHighPrecisionRuleFactory" type="constructor" line="49"/>
            <javadoc line="53">
                @param mContext Precision setting for computing the quadrature rules.                
            </javadoc>
            <method name="LegendreHighPrecisionRuleFactory" type="constructor" line="56">
                <params>
                    <param name="mContext" type="MathContext"/>
                </params>
            </method>
            <javadoc line="63">
                {@inheritDoc}                
            </javadoc>
            <method name="computeRule" type="Pair<BigDecimal[],BigDecimal[]>" line="66">
                <params>
                    <param name="numberOfPoints" type="int"/>
                </params>
                <comment line="69">
                    Break recursion.                    
                </comment>
                <comment line="74">
                    Get previous rule.                    
                </comment>
                <comment line="75">
                    If it has not been computed yet it will trigger a recursive call                    
                </comment>
                <comment line="76">
                    to this method.                    
                </comment>
                <comment line="79">
                    Compute next rule.                    
                </comment>
                <comment line="83">
                    Find i-th root of P[n+1] by bracketing.                    
                </comment>
                <comment line="86">
                    Lower-bound of the interval.                    
                </comment>
                <comment line="88">
                    Upper-bound of the interval.                    
                </comment>
                <comment line="90">
                    P[j-1](a)                    
                </comment>
                <comment line="92">
                    P[j](a)                    
                </comment>
                <comment line="94">
                    P[j-1](b)                    
                </comment>
                <comment line="96">
                    P[j](b)                    
                </comment>
                <comment line="103">
                    Compute P[j+1](a)                    
                </comment>
                <comment line="104">
                    ppa = ((2 * j + 1) * a * pa - j * pma) / (j + 1);                    
                </comment>
                <comment line="109">
                    P[j+1](a)                    
                </comment>
                <comment line="113">
                    Compute P[j+1](b)                    
                </comment>
                <comment line="114">
                    ppb = ((2 * j + 1) * b * pb - j * pmb) / (j + 1);                    
                </comment>
                <comment line="119">
                    P[j+1](b)                    
                </comment>
                <comment line="128">
                    Now pa = P[n+1](a), and pma = P[n](a). Same holds for b.                    
                </comment>
                <comment line="129">
                    Middle of the interval.                    
                </comment>
                <comment line="131">
                    P[j-1](c)                    
                </comment>
                <comment line="133">
                    P[j](c)                    
                </comment>
                <comment line="147">
                    Compute P[j+1](c)                    
                </comment>
                <comment line="151">
                    P[j+1](c)                    
                </comment>
                <comment line="158">
                    Now pc = P[n+1](c) and pmc = P[n](c).                    
                </comment>
                <comment line="188">
                    If &quot;numberOfPoints&quot; is odd, 0 is a root.                    
                </comment>
                <comment line="189">
                    Note: as written, the test for oddness will work for negative                    
                </comment>
                <comment line="190">
                    integers too (although it is not necessary here), preventing                    
                </comment>
                <comment line="191">
                    a FindBugs warning.                    
                </comment>
                <comment line="198">
                    pmc = -j * pmc / (j + 1);                    
                </comment>
                <comment line="204">
                    2 / pow(numberOfPoints * pmc, 2);                    
                </comment>
                <scope line="68"/>
                <declaration name="previousPoints" type="BigDecimal[]" line="77"/>
                <declaration name="points" type="BigDecimal[]" line="80"/>
                <declaration name="weights" type="BigDecimal[]" line="81"/>
                <declaration name="iMax" type="int" line="84"/>
                <scope line="85">
                    <declaration name="a" type="BigDecimal" line="87"/>
                    <declaration name="b" type="BigDecimal" line="89"/>
                    <declaration name="pma" type="BigDecimal" line="91"/>
                    <declaration name="pa" type="BigDecimal" line="93"/>
                    <declaration name="pmb" type="BigDecimal" line="95"/>
                    <declaration name="pb" type="BigDecimal" line="97"/>
                    <scope line="98">
                        <declaration name="b_two_j_p_1" type="BigDecimal" line="99"/>
                        <declaration name="b_j" type="BigDecimal" line="100"/>
                        <declaration name="b_j_p_1" type="BigDecimal" line="101"/>
                        <declaration name="tmp1" type="BigDecimal" line="106"/>
                        <declaration name="tmp2" type="BigDecimal" line="108"/>
                        <declaration name="ppa" type="BigDecimal" line="110"/>
                        <declaration name="ppb" type="BigDecimal" line="120"/>
                    </scope>
                    <declaration name="c" type="BigDecimal" line="130"/>
                    <declaration name="pmc" type="BigDecimal" line="132"/>
                    <declaration name="pc" type="BigDecimal" line="134"/>
                    <declaration name="done" type="boolean" line="135"/>
                    <scope line="136">
                        <declaration name="tmp1" type="BigDecimal" line="137"/>
                        <declaration name="tmp2" type="BigDecimal" line="138"/>
                        <scope line="142">
                            <declaration name="b_two_j_p_1" type="BigDecimal" line="143"/>
                            <declaration name="b_j" type="BigDecimal" line="144"/>
                            <declaration name="b_j_p_1" type="BigDecimal" line="145"/>
                            <declaration name="ppc" type="BigDecimal" line="152"/>
                        </scope>
                        <scope line="159">
                            <scope line="160"/>
                            <scope line="164"/>
                        </scope>
                    </scope>
                    <declaration name="nP" type="BigDecimal" line="172"/>
                    <declaration name="tmp1" type="BigDecimal" line="173"/>
                    <declaration name="tmp2" type="BigDecimal" line="176"/>
                    <declaration name="idx" type="int" line="184"/>
                </scope>
                <scope line="192">
                    <declaration name="pmc" type="BigDecimal" line="193"/>
                    <scope line="194">
                        <declaration name="b_j" type="BigDecimal" line="195"/>
                        <declaration name="b_j_p_1" type="BigDecimal" line="196"/>
                    </scope>
                    <declaration name="nP" type="BigDecimal" line="205"/>
                    <declaration name="tmp1" type="BigDecimal" line="206"/>
                    <declaration name="tmp2" type="BigDecimal" line="208"/>
                </scope>
            </method>
        </class>
    </source>