<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.general">
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.solvers.BrentSolver"/>
        <import package="org.apache.commons.math3.analysis.solvers.UnivariateSolver"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.SimpleValueChecker"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="NonLinearConjugateGradientOptimizer" line="12">
            <extends class="AbstractScalarDifferentiableOptimizer"/>
            <javadoc line="12">
                Non-linear conjugate gradient optimizer.
                  &lt;p&gt;
                  This class supports both the Fletcher-Reeves and the Polak-Ribi&amp;egrave;re
                  update formulas for the conjugate search directions. It also supports
                  optional preconditioning.
                  &lt;/p&gt;                
                <version>
                    $Id: NonLinearConjugateGradientOptimizer.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="updateFormula" type="ConjugateGradientFormula" line="24"/>
            <javadoc line="24">
                Update formula for the beta parameter.                
            </javadoc>
            <declaration name="preconditioner" type="Preconditioner" line="28"/>
            <javadoc line="28">
                Preconditioner (may be null).                
            </javadoc>
            <declaration name="solver" type="UnivariateSolver" line="32"/>
            <javadoc line="32">
                solver to use in the line search (may be null).                
            </javadoc>
            <declaration name="initialStep" type="double" line="36"/>
            <javadoc line="36">
                Initial step used to bracket the optimum in line search.                
            </javadoc>
            <declaration name="point" type="double[]" line="40"/>
            <javadoc line="40">
                Current point.                
            </javadoc>
            <javadoc line="44">
                Constructor with default {@link SimpleValueChecker checker},{@link BrentSolver line search solver} and{@link IdentityPreconditioner preconditioner}.                
                <param>
                    updateFormula formula to use for updating the &beta; parameter,
                      must be one of {@link ConjugateGradientFormula#FLETCHER_REEVES} or {@link ConjugateGradientFormula#POLAK_RIBIERE}.                    
                </param>
                <deprecated>
                    See {@link SimpleValueChecker#SimpleValueChecker()}                    
                </deprecated>
            </javadoc>
            <method name="NonLinearConjugateGradientOptimizer" type="constructor" line="50">
                <params>
                    <param name="updateFormula" type="ConjugateGradientFormula"/>
                </params>
            </method>
            <javadoc line="53">
                Constructor with default {@link BrentSolver line search solver} and{@link IdentityPreconditioner preconditioner}.                
                <param>
                    updateFormula formula to use for updating the &beta; parameter,
                      must be one of {@link ConjugateGradientFormula#FLETCHER_REEVES} or {@link ConjugateGradientFormula#POLAK_RIBIERE}.                    
                </param>
                <param>
                    checker Convergence checker.                    
                </param>
            </javadoc>
            <method name="NonLinearConjugateGradientOptimizer" type="constructor" line="59">
                <params>
                    <param name="updateFormula" type="ConjugateGradientFormula"/>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                </params>
            </method>
            <javadoc line="62">
                Constructor with default {@link IdentityPreconditioner preconditioner}.                
                <param>
                    updateFormula formula to use for updating the &beta; parameter,
                      must be one of {@link ConjugateGradientFormula#FLETCHER_REEVES} or {@link ConjugateGradientFormula#POLAK_RIBIERE}.                    
                </param>
                <param>
                    checker Convergence checker.                    
                </param>
                <param>
                    lineSearchSolver Solver to use during line search.                    
                </param>
            </javadoc>
            <method name="NonLinearConjugateGradientOptimizer" type="constructor" line="69">
                <params>
                    <param name="updateFormula" type="ConjugateGradientFormula"/>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                    <param name="lineSearchSolver" type="UnivariateSolver"/>
                </params>
            </method>
            <javadoc line="72">
                @param updateFormula formula to use for updating the &amp;beta; parameter,
                  must be one of {@link ConjugateGradientFormula#FLETCHER_REEVES} or {@link ConjugateGradientFormula#POLAK_RIBIERE}.                
                <param>
                    checker Convergence checker.                    
                </param>
                <param>
                    lineSearchSolver Solver to use during line search.                    
                </param>
                <param>
                    preconditioner Preconditioner.                    
                </param>
            </javadoc>
            <method name="NonLinearConjugateGradientOptimizer" type="constructor" line="79">
                <params>
                    <param name="updateFormula" type="ConjugateGradientFormula"/>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                    <param name="lineSearchSolver" type="UnivariateSolver"/>
                    <param name="preconditioner" type="Preconditioner"/>
                </params>
            </method>
            <javadoc line="86">
                Set the initial step used to bracket the optimum in line search.
                  &lt;p&gt;
                  The initial step is a factor with respect to the search direction,
                  which itself is roughly related to the gradient of the function
                  &lt;/p&gt;                
                <param>
                    initialStep initial step used to bracket the optimum in line search,
                      if a non-positive value is used, the initial step is reset to its
                      default value of 1.0                    
                </param>
            </javadoc>
            <method name="setInitialStep" type="void" line="96">
                <params>
                    <param name="initialStep" type="double"/>
                </params>
                <scope line="97"/>
                <scope line="100"/>
            </method>
            <javadoc line="104">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="107">
                <declaration name="checker" type="ConvergenceChecker&lt;PointValuePair&gt;" line="108"/>
                <declaration name="goal" type="GoalType" line="110"/>
                <declaration name="n" type="int" line="111"/>
                <declaration name="r" type="double[]" line="112"/>
                <scope line="113">
                    <scope line="114"/>
                </scope>
                <declaration name="steepestDescent" type="double[]" line="118"/>
                <declaration name="searchDirection" type="double[]" line="119"/>
                <declaration name="delta" type="double" line="120"/>
                <scope line="121"/>
                <declaration name="current" type="PointValuePair" line="124"/>
                <declaration name="iter" type="int" line="125"/>
                <declaration name="maxEval" type="int" line="126"/>
                <scope line="127">
                    <declaration name="objective" type="double" line="129"/>
                    <declaration name="previous" type="PointValuePair" line="130"/>
                    <scope line="132"/>
                    <declaration name="lsf" type="UnivariateFunction" line="135"/>
                    <declaration name="uB" type="double" line="136"/>
                    <declaration name="step" type="double" line="137"/>
                    <scope line="139"/>
                    <scope line="143">
                        <scope line="144"/>
                    </scope>
                    <declaration name="deltaOld" type="double" line="148"/>
                    <declaration name="newSteepestDescent" type="double[]" line="149"/>
                    <scope line="151"/>
                    <declaration name="beta" type="double" line="154"/>
                    <scope line="155"/>
                    <scope line="158">
                        <declaration name="deltaMid" type="double" line="159"/>
                        <scope line="160"/>
                    </scope>
                    <scope line="166"/>
                    <scope line="169">
                        <scope line="170"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="176">
                Find the upper bound b ensuring bracketing of a root between a and b.                
                <param>
                    f function whose root must be bracketed.                    
                </param>
                <param>
                    a lower bound of the interval.                    
                </param>
                <param>
                    h initial step to try.                    
                </param>
                <return>
                    b such that f(a) and f(b) have opposite signs.                    
                </return>
                <throws>
                    MathIllegalStateException if no bracket can be found.                    
                </throws>
            </javadoc>
            <method name="findUpperBound" type="double" line="184">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="a" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <declaration name="yA" type="double" line="185"/>
                <declaration name="yB" type="double" line="186"/>
                <scope line="187">
                    <declaration name="b" type="double" line="188"/>
                    <scope line="190"/>
                </scope>
            </method>
            <class name="IdentityPreconditioner" line="196">
                <implements interface="Preconditioner"/>
                <javadoc line="196">
                    Default identity preconditioner.                    
                </javadoc>
                <javadoc line="200">
                    {@inheritDoc}                    
                </javadoc>
                <method name="precondition" type="double[]" line="203">
                    <params>
                        <param name="variables" type="double[]"/>
                        <param name="r" type="double[]"/>
                    </params>
                </method>
            </class>
            <class name="LineSearchFunction" line="207">
                <implements interface="UnivariateFunction"/>
                <javadoc line="207">
                    Internal class for line search.
                      &lt;p&gt;
                      The function represented by this class is the dot product of
                      the objective function gradient and the search direction. Its
                      value is zero when the gradient is orthogonal to the search
                      direction, i.e. when the objective function value is a local
                      extremum along the search direction.
                      &lt;/p&gt;                    
                </javadoc>
                <declaration name="searchDirection" type="double[]" line="218"/>
                <javadoc line="218">
                    Search direction.                    
                </javadoc>
                <javadoc line="222">
                    Simple constructor.                    
                    <param>
                        searchDirection search direction                        
                    </param>
                </javadoc>
                <method name="LineSearchFunction" type="constructor" line="226">
                    <params>
                        <param name="searchDirection" type="double[]"/>
                    </params>
                </method>
                <javadoc line="229">
                    {@inheritDoc}                    
                </javadoc>
                <method name="value" type="double" line="232">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                    <declaration name="shiftedPoint" type="double[]" line="233"/>
                    <scope line="234"/>
                    <declaration name="gradient" type="double[]" line="237"/>
                    <declaration name="dotProduct" type="double" line="238"/>
                    <scope line="239"/>
                </method>
            </class>
        </class>
    </source>