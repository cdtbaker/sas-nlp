<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim">
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.random.RandomVectorGenerator"/>
        <class name="BaseMultiStartMultivariateOptimizer" line="6">
            <type_params>
                <type_param name="PAIR"/>
            </type_params>
            <extends class="BaseMultivariateOptimizer">
                <type_params>
                    <type_param name="PAIR"/>
                </type_params>
            </extends>
            <javadoc line="6">
                Base class multi-start optimizer for a multivariate function.
                  &lt;br/&gt;
                  This class wraps an optimizer in order to use it several times in
                  turn with different starting points (trying to avoid being trapped
                  in a local extremum when looking for a global one).
                  &lt;em&gt;It is not a &quot;user&quot; class.&lt;/em&gt;                
                <param>
                    <PAIR>
                      Type of the point/value pair returned by the optimization
                      algorithm.                    
                </param>
                <version>
                    $Id: BaseMultiStartMultivariateOptimizer.java 1454746 2013-03-09 17:37:30Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="optimizer" type="BaseMultivariateOptimizer&lt;PAIR&gt;" line="20"/>
            <javadoc line="20">
                Underlying classical optimizer.                
            </javadoc>
            <declaration name="totalEvaluations" type="int" line="24"/>
            <javadoc line="24">
                Number of evaluations already performed for all starts.                
            </javadoc>
            <declaration name="starts" type="int" line="28"/>
            <javadoc line="28">
                Number of starts to go.                
            </javadoc>
            <declaration name="generator" type="RandomVectorGenerator" line="32"/>
            <javadoc line="32">
                Random generator for multi-start.                
            </javadoc>
            <declaration name="optimData" type="OptimizationData[]" line="36"/>
            <javadoc line="36">
                Optimization data.                
            </javadoc>
            <declaration name="maxEvalIndex" type="int" line="40"/>
            <javadoc line="40">
                Location in {@link #optimData} where the updated maximum
                  number of evaluations will be stored.                
            </javadoc>
            <declaration name="initialGuessIndex" type="int" line="45"/>
            <javadoc line="45">
                Location in {@link #optimData} where the updated start value
                  will be stored.                
            </javadoc>
            <javadoc line="50">
                Create a multi-start optimizer from a single-start optimizer.
                  &lt;p&gt;
                  Note that if there are bounds constraints (see {@link #getLowerBound()}and {@link #getUpperBound()}), then a simple rejection algorithm is used
                  at each restart. This implies that the random vector generator should have
                  a good probability to generate vectors in the bounded domain, otherwise the
                  rejection algorithm will hit the {@link #getMaxEvaluations()} count without
                  generating a proper restart point. Users must be take great care of the &lt;a
                  href=&quot;http://en.wikipedia.org/wiki/Curse_of_dimensionality&quot;&gt;curse of dimensionality&lt;/a&gt;.
                  &lt;/p&gt;                
                <param>
                    optimizer Single-start optimizer to wrap.                    
                </param>
                <param>
                    starts Number of starts to perform. If {@code starts == 1},
                      the {@link #optimize(OptimizationData[]) optimize} will return the
                      same solution as the given {@code optimizer} would return.                    
                </param>
                <param>
                    generator Random vector generator to use for restarts.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code starts < 1}.                    
                </throws>
            </javadoc>
            <method name="BaseMultiStartMultivariateOptimizer" type="constructor" line="67">
                <params>
                    <param name="optimizer" type="BaseMultivariateOptimizer<PAIR>"/>
                    <param name="starts" type="int"/>
                    <param name="generator" type="RandomVectorGenerator"/>
                </params>
                <scope line="69"/>
            </method>
            <javadoc line="76">
                {@inheritDoc}                
            </javadoc>
            <method name="getEvaluations" type="int" line="79"/>
            <method name="getOptima" type="PAIR[]" line="82"/>
            <javadoc line="82">
                Gets all the optima found during the last call to {@code optimize}.
                  The optimizer stores all the optima found during a set of
                  restarts. The {@code optimize} method returns the best point only.
                  This method returns all the points found at the end of each starts,
                  including the best one already returned by the {@code optimize} method.
                  &lt;br/&gt;
                  The returned array as one element for each start as specified
                  in the constructor. It is ordered with the results from the
                  runs that did converge first, sorted from best to worst
                  objective value (i.e in ascending order if minimizing and in
                  descending order if maximizing), followed by {@code null} elements
                  corresponding to the runs that did not converge. This means all
                  elements will be {@code null} if the {@code optimize} method did throw
                  an exception.
                  This also means that if the first element is not {@code null}, it is
                  the best point found across all starts.
                  &lt;br/&gt;
                  The behaviour is undefined if this method is called before{@code optimize}; it will likely throw {@code NullPointerException}.                
                <return>
                    an array containing the optima sorted from best to worst.                    
                </return>
            </javadoc>
            <javadoc line="104">
                {@inheritDoc}                
                <throws>
                    MathIllegalStateException if {@code optData} does not contain an
                      instance of {@link MaxEval} or {@link InitialGuess}.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PAIR" line="109">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <javadoc line="113">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PAIR" line="116">
                <scope line="117">
                    <scope line="118"/>
                    <scope line="122"/>
                </scope>
                <scope line="128"/>
                <scope line="131"/>
                <declaration name="lastException" type="RuntimeException" line="134"/>
                <declaration name="maxEval" type="int" line="137"/>
                <declaration name="min" type="double[]" line="138"/>
                <declaration name="max" type="double[]" line="139"/>
                <declaration name="startPoint" type="double[]" line="140"/>
                <scope line="141">
                    <scope line="142">
                        <declaration name="s" type="double[]" line="144"/>
                        <scope line="145"/>
                        <scope line="148">
                            <declaration name="attempts" type="int" line="149"/>
                            <scope line="150">
                                <scope line="151"/>
                                <scope line="155">
                                    <scope line="156"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="result" type="PAIR" line="163"/>
                    </scope>
                    <scope line="166"/>
                </scope>
                <declaration name="optima" type="PAIR[]" line="171"/>
                <scope line="172"/>
            </method>
            <method name="store" type="void" line="177"/>
            <javadoc line="177">
                Method that will be called in order to store each found optimum.                
                <param>
                    optimum Result of an optimization run.                    
                </param>
            </javadoc>
            <method name="clear" type="void" line="182"/>
            <javadoc line="182">
                Method that will called in order to clear all stored optima.                
            </javadoc>
        </class>
    </source>