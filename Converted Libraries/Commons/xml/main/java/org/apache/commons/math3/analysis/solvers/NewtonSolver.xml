<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <class name="NewtonSolver" line="24">
            <extends class="AbstractDifferentiableUnivariateSolver"/>
            <javadoc line="24">
                Implements &lt;a href=&quot;http://mathworld.wolfram.com/NewtonsMethod.html&quot;&gt;
                  Newton&apos;s Method&lt;/a&gt; for finding zeros of real univariate functions.
                  &lt;p&gt;
                  The function should be continuous but not necessarily smooth.&lt;/p&gt;                
                <deprecated>
                    as of 3.1, replaced by {@link NewtonRaphsonSolver}                    
                </deprecated>
                <version>
                    $Id: NewtonSolver.java 1395937 2012-10-09 10:04:36Z luc $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_ABSOLUTE_ACCURACY" type="double" line="35"/>
            <javadoc line="35">
                Default absolute accuracy.                
            </javadoc>
            <javadoc line="38">
                Construct a solver.                
            </javadoc>
            <method name="NewtonSolver" type="constructor" line="41"/>
            <javadoc line="44">
                Construct a solver.                
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
            </javadoc>
            <method name="NewtonSolver" type="constructor" line="49">
                <params>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="53">
                Find a zero near the midpoint of {@code min} and {@code max}.                
                <param>
                    f Function to solve.                    
                </param>
                <param>
                    min Lower bound for the interval.                    
                </param>
                <param>
                    max Upper bound for the interval.                    
                </param>
                <param>
                    maxEval Maximum number of evaluations.                    
                </param>
                <return>
                    the value where the function is zero.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum evaluation count is exceeded.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NumberIsTooLargeExceptionif {@code min >= max}.                    
                </throws>
            </javadoc>
            <method name="solve" type="double" line="69">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="DifferentiableUnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
            </method>
            <javadoc line="73">
                {@inheritDoc}                
            </javadoc>
            <method name="doSolve" type="double" line="78">
                <declaration name="startValue" type="double" line="79"/>
                <declaration name="absoluteAccuracy" type="double" line="80"/>
                <declaration name="x0" type="double" line="82"/>
                <declaration name="x1" type="double" line="83"/>
                <scope line="84">
                    <scope line="86"/>
                </scope>
            </method>
        </class>
    </source>