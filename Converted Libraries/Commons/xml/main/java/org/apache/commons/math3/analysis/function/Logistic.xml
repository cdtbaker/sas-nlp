<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.function">
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Logistic" line="12">
            <implements interface="UnivariateDifferentiableFunction"/>
            <implements interface="DifferentiableUnivariateFunction"/>
            <javadoc line="12">
                &lt;a href=&quot;http://en.wikipedia.org/wiki/Generalised_logistic_function&quot;&gt;
                  Generalised logistic&lt;/a&gt; function.                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: Logistic.java 1391927 2012-09-30 00:03:30Z erans $                    
                </version>
            </javadoc>
            <declaration name="a" type="double" line="19"/>
            <javadoc line="19">
                Lower asymptote.                
            </javadoc>
            <declaration name="k" type="double" line="23"/>
            <javadoc line="23">
                Upper asymptote.                
            </javadoc>
            <declaration name="b" type="double" line="27"/>
            <javadoc line="27">
                Growth rate.                
            </javadoc>
            <declaration name="oneOverN" type="double" line="31"/>
            <javadoc line="31">
                Parameter that affects near which asymptote maximum growth occurs.                
            </javadoc>
            <declaration name="q" type="double" line="35"/>
            <javadoc line="35">
                Parameter that affects the position of the curve along the ordinate axis.                
            </javadoc>
            <declaration name="m" type="double" line="39"/>
            <javadoc line="39">
                Abscissa of maximum growth.                
            </javadoc>
            <javadoc line="43">
                @param k If {@code b &gt; 0}, value of the function for x going towards +&amp;infin;.
                  If {@code b &lt; 0}, value of the function for x going towards -&amp;infin;.                
                <param>
                    m Abscissa of maximum growth.                    
                </param>
                <param>
                    b Growth rate.                    
                </param>
                <param>
                    q Parameter that affects the position of the curve along the
                      ordinate axis.                    
                </param>
                <param>
                    a If {@code b > 0}, value of the function for x going towards -&infin;.
                      If {@code b < 0}, value of the function for x going towards +&infin;.                    
                </param>
                <param>
                    n Parameter that affects near which asymptote the maximum
                      growth occurs.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code n <= 0}.                    
                </throws>
            </javadoc>
            <method name="Logistic" type="constructor" line="56">
                <params>
                    <param name="k" type="double"/>
                    <param name="m" type="double"/>
                    <param name="b" type="double"/>
                    <param name="q" type="double"/>
                    <param name="a" type="double"/>
                    <param name="n" type="double"/>
                </params>
                <scope line="57"/>
            </method>
            <javadoc line="67">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="70">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="73">
                {@inheritDoc}                
                <deprecated>
                    as of 3.1, replaced by {@link #value(DerivativeStructure)}                    
                </deprecated>
            </javadoc>
            <method name="derivative" type="UnivariateFunction" line="77"/>
            <class name="Parametric" line="80">
                <implements interface="ParametricUnivariateFunction"/>
                <javadoc line="80">
                    Parametric function where the input array contains the parameters of
                      the logit function, ordered as follows:
                      &lt;ul&gt;
                      &lt;li&gt;Lower asymptote&lt;/li&gt;
                      &lt;li&gt;Higher asymptote&lt;/li&gt;
                      &lt;/ul&gt;                    
                </javadoc>
                <javadoc line="89">
                    Computes the value of the sigmoid at {@code x}.                    
                    <param>
                        x Value for which the function must be computed.                        
                    </param>
                    <param>
                        param Values for {@code k}, {@code m}, {@code b}, {@code q},{@code a} and  {@code n}.                        
                    </param>
                    <return>
                        the value of the function.                        
                    </return>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 6.                        
                    </throws>
                    <throws>
                        NotStrictlyPositiveException if {@code param[5] <= 0}.                        
                    </throws>
                </javadoc>
                <method name="value" type="double" line="99">
                    <params>
                        <param name="x" type="double"/>
                        <param name="param" type="double"/>
                    </params>
                </method>
                <javadoc line="103">
                    Computes the value of the gradient at {@code x}.
                      The components of the gradient vector are the partial
                      derivatives of the function with respect to each of the
                      &lt;em&gt;parameters&lt;/em&gt;.                    
                    <param>
                        x Value at which the gradient must be computed.                        
                    </param>
                    <param>
                        param Values for {@code k}, {@code m}, {@code b}, {@code q},{@code a} and  {@code n}.                        
                    </param>
                    <return>
                        the gradient vector at {@code x}.                        
                    </return>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 6.                        
                    </throws>
                    <throws>
                        NotStrictlyPositiveException if {@code param[5] <= 0}.                        
                    </throws>
                </javadoc>
                <method name="gradient" type="double[]" line="116">
                    <params>
                        <param name="x" type="double"/>
                        <param name="param" type="double"/>
                    </params>
                    <declaration name="b" type="double" line="118"/>
                    <declaration name="q" type="double" line="119"/>
                    <declaration name="mMinusX" type="double" line="120"/>
                    <declaration name="oneOverN" type="double" line="121"/>
                    <declaration name="exp" type="double" line="122"/>
                    <declaration name="qExp" type="double" line="123"/>
                    <declaration name="qExp1" type="double" line="124"/>
                    <declaration name="factor1" type="double" line="125"/>
                    <declaration name="factor2" type="double" line="126"/>
                    <declaration name="gk" type="double" line="127"/>
                    <declaration name="gm" type="double" line="128"/>
                    <declaration name="gb" type="double" line="129"/>
                    <declaration name="gq" type="double" line="130"/>
                    <declaration name="ga" type="double" line="131"/>
                    <declaration name="gn" type="double" line="132"/>
                </method>
                <javadoc line="135">
                    Validates parameters to ensure they are appropriate for the evaluation of
                      the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.                    
                    <param>
                        param Values for {@code k}, {@code m}, {@code b}, {@code q},{@code a} and {@code n}.                        
                    </param>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 6.                        
                    </throws>
                    <throws>
                        NotStrictlyPositiveException if {@code param[5] <= 0}.                        
                    </throws>
                </javadoc>
                <method name="validateParameters" type="void" line="144">
                    <params>
                        <param name="param" type="double[]"/>
                    </params>
                    <scope line="145"/>
                    <scope line="148"/>
                    <scope line="151"/>
                </method>
            </class>
            <javadoc line="156">
                @param mMinusX {@code m - x}.                
                <param>
                    k {@code k}.                    
                </param>
                <param>
                    b {@code b}.                    
                </param>
                <param>
                    q {@code q}.                    
                </param>
                <param>
                    a {@code a}.                    
                </param>
                <param>
                    oneOverN {@code 1 / n}.                    
                </param>
                <return>
                    the value of the function.                    
                </return>
            </javadoc>
            <method name="value" type="double" line="165">
                <params>
                    <param name="mMinusX" type="double"/>
                    <param name="k" type="double"/>
                    <param name="b" type="double"/>
                    <param name="q" type="double"/>
                    <param name="a" type="double"/>
                    <param name="oneOverN" type="double"/>
                </params>
            </method>
            <javadoc line="168">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="172">
                <params>
                    <param name="t" type="DerivativeStructure"/>
                </params>
            </method>
        </class>
    </source>