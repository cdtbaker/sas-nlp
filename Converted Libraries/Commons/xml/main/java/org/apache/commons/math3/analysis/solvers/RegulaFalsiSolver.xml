<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <class name="RegulaFalsiSolver" line="2">
            <extends class="BaseSecantSolver"/>
            <javadoc line="2">
                Implements the &lt;em&gt;Regula Falsi&lt;/em&gt; or &lt;em&gt;False position&lt;/em&gt; method for
                  root-finding (approximating a zero of a univariate real function). It is a
                  modified {@link SecantSolver &lt;em&gt;Secant&lt;/em&gt;} method.
                  &lt;p&gt;The &lt;em&gt;Regula Falsi&lt;/em&gt; method is included for completeness, for
                  testing purposes, for educational purposes, for comparison to other
                  algorithms, etc. It is however &lt;strong&gt;not&lt;/strong&gt; intended to be used
                  for actual problems, as one of the bounds often remains fixed, resulting
                  in very slow convergence. Instead, one of the well-known modified
                  &lt;em&gt;Regula Falsi&lt;/em&gt; algorithms can be used ({@link IllinoisSolver&lt;em&gt;Illinois&lt;/em&gt;} or {@link PegasusSolver &lt;em&gt;Pegasus&lt;/em&gt;}). These two
                  algorithms solve the fundamental issues of the original &lt;em&gt;Regula
                  Falsi&lt;/em&gt; algorithm, and greatly out-performs it for most, if not all,
                  (practical) functions.
                  &lt;p&gt;Unlike the &lt;em&gt;Secant&lt;/em&gt; method, the &lt;em&gt;Regula Falsi&lt;/em&gt; guarantees
                  convergence, by maintaining a bracketed solution. Note however, that due to
                  the finite/limited precision of Java&apos;s {@link Double double} type, which is
                  used in this implementation, the algorithm may get stuck in a situation
                  where it no longer makes any progress. Such cases are detected and result
                  in a {@code ConvergenceException} exception being thrown. In other words,
                  the algorithm theoretically guarantees convergence, but the implementation
                  does not.&lt;/p&gt;
                  &lt;p&gt;The &lt;em&gt;Regula Falsi&lt;/em&gt; method assumes that the function is continuous,
                  but not necessarily smooth.&lt;/p&gt;
                  &lt;p&gt;Implementation based on the following article: M. Dowell and P. Jarratt,
                  &lt;em&gt;A modified regula falsi method for computing the root of an
                  equation&lt;/em&gt;, BIT Numerical Mathematics, volume 11, number 2,
                  pages 168-174, Springer, 1971.&lt;/p&gt;                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: RegulaFalsiSolver.java 1364387 2012-07-22 18:14:11Z tn $                    
                </version>
            </javadoc>
            <javadoc line="33">
                Construct a solver with default accuracy (1e-6).                
            </javadoc>
            <method name="RegulaFalsiSolver" type="constructor" line="36"/>
            <javadoc line="39">
                Construct a solver.                
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
            </javadoc>
            <method name="RegulaFalsiSolver" type="constructor" line="43">
                <params>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="46">
                Construct a solver.                
                <param>
                    relativeAccuracy Relative accuracy.                    
                </param>
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
            </javadoc>
            <method name="RegulaFalsiSolver" type="constructor" line="51">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="54">
                Construct a solver.                
                <param>
                    relativeAccuracy Relative accuracy.                    
                </param>
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
                <param>
                    functionValueAccuracy Maximum function value error.                    
                </param>
            </javadoc>
            <method name="RegulaFalsiSolver" type="constructor" line="60">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="functionValueAccuracy" type="double"/>
                </params>
            </method>
        </class>
    </source>