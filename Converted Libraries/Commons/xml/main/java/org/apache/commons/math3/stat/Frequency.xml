<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat">
        <import package="java.io.Serializable"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Map"/>
        <import package="java.util.TreeMap"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Frequency" line="13">
            <implements interface="Serializable"/>
            <javadoc line="13">
                Maintains a frequency distribution.
                  &lt;p&gt;
                  Accepts int, long, char or Comparable values.  New values added must be
                  comparable to those that have been added, otherwise the add method will
                  throw an IllegalArgumentException.&lt;/p&gt;
                  &lt;p&gt;
                  Integer values (int, long, Integer, Long) are not distinguished by type --
                  i.e. &lt;code&gt;addValue(Long.valueOf(2)), addValue(2), addValue(2l)&lt;/code&gt; all have
                  the same effect (similarly for arguments to &lt;code&gt;getCount,&lt;/code&gt; etc.).&lt;/p&gt;
                  &lt;p&gt;
                  char values are converted by &lt;code&gt;addValue&lt;/code&gt; to Character instances.
                  As such, these values are not comparable to integral values, so attempts
                  to combine integral types with chars in a frequency distribution will fail.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The values are ordered using the default (natural order), unless a
                  &lt;code&gt;Comparator&lt;/code&gt; is supplied in the constructor.&lt;/p&gt;                
                <version>
                    $Id: Frequency.java 1455703 2013-03-12 20:46:23Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="34"/>
            <javadoc line="34">
                Serializable version identifier                
            </javadoc>
            <declaration name="freqTable" type="TreeMap&lt;Comparable&lt;?&gt;,Long&gt;" line="38"/>
            <javadoc line="38">
                underlying collection                
            </javadoc>
            <javadoc line="42">
                Default constructor.                
            </javadoc>
            <method name="Frequency" type="constructor" line="45"/>
            <javadoc line="48">
                Constructor allowing values Comparator to be specified.                
                <param>
                    comparator Comparator used to order values                    
                </param>
            </javadoc>
            <method name="Frequency" type="constructor" line="52">
                <params>
                    <param name="comparator" type="Comparator<?>"/>
                </params>
            </method>
            <javadoc line="55">
                Return a string representation of this frequency
                  distribution.                
                <return>
                    a string representation.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="60">
                <declaration name="nf" type="NumberFormat" line="61"/>
                <declaration name="outBuffer" type="StringBuilder" line="62"/>
                <declaration name="iter" type="Iterator&lt;Comparable&lt;?&gt;&gt;" line="64"/>
                <scope line="65">
                    <declaration name="value" type="Comparable&lt;?&gt;" line="66"/>
                </scope>
            </method>
            <javadoc line="78">
                Adds 1 to the frequency count for v.
                  &lt;p&gt;
                  If other objects have already been added to this Frequency, v must
                  be comparable to those that have already been added.
                  &lt;/p&gt;                
                <param>
                    v the value to add.                    
                </param>
                <throws>
                    MathIllegalArgumentException if <code>v</code> is not comparable with previous entries                    
                </throws>
            </javadoc>
            <method name="addValue" type="void" line="87">
                <params>
                    <param name="v" type="Comparable<?>"/>
                </params>
            </method>
            <javadoc line="90">
                Increments the frequency count for v.
                  &lt;p&gt;
                  If other objects have already been added to this Frequency, v must
                  be comparable to those that have already been added.
                  &lt;/p&gt;                
                <param>
                    v the value to add.                    
                </param>
                <param>
                    increment the amount by which the value should be incremented                    
                </param>
                <throws>
                    IllegalArgumentException if <code>v</code> is not comparable with previous entries                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="incrementValue" type="void" line="101">
                <params>
                    <param name="v" type="Comparable<?>"/>
                    <param name="increment" type="long"/>
                </params>
                <declaration name="obj" type="Comparable&lt;?&gt;" line="102"/>
                <scope line="103"/>
                <scope line="106">
                    <declaration name="count" type="Long" line="107"/>
                    <scope line="108"/>
                    <scope line="111"/>
                </scope>
                <scope line="115"/>
            </method>
            <javadoc line="119">
                Adds 1 to the frequency count for v.                
                <param>
                    v the value to add.                    
                </param>
                <throws>
                    MathIllegalArgumentException if the table contains entries not
                      comparable to Integer                    
                </throws>
            </javadoc>
            <method name="addValue" type="void" line="125">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="128">
                Adds 1 to the frequency count for v.                
                <param>
                    v the value to add.                    
                </param>
                <throws>
                    MathIllegalArgumentException if the table contains entries not
                      comparable to Long                    
                </throws>
            </javadoc>
            <method name="addValue" type="void" line="134">
                <params>
                    <param name="v" type="long"/>
                </params>
            </method>
            <javadoc line="137">
                Adds 1 to the frequency count for v.                
                <param>
                    v the value to add.                    
                </param>
                <throws>
                    MathIllegalArgumentException if the table contains entries not
                      comparable to Char                    
                </throws>
            </javadoc>
            <method name="addValue" type="void" line="143">
                <params>
                    <param name="v" type="char"/>
                </params>
            </method>
            <javadoc line="146">
                Clears the frequency table                
            </javadoc>
            <method name="clear" type="void" line="149"/>
            <javadoc line="152">
                Returns an Iterator over the set of values that have been added.
                  &lt;p&gt;
                  If added values are integral (i.e., integers, longs, Integers, or Longs),
                  they are converted to Longs when they are added, so the objects returned
                  by the Iterator will in this case be Longs.&lt;/p&gt;                
                <return>
                    values Iterator                    
                </return>
            </javadoc>
            <method name="valuesIterator" type="Iterator<Comparable<?>>" line="160"/>
            <javadoc line="163">
                Return an Iterator over the set of keys and values that have been added.
                  Using the entry set to iterate is more efficient in the case where you
                  need to access respective counts as well as values, since it doesn&apos;t
                  require a &quot;get&quot; for every key...the value is provided in the Map.Entry.
                  &lt;p&gt;
                  If added values are integral (i.e., integers, longs, Integers, or Longs),
                  they are converted to Longs when they are added, so the values of the
                  map entries returned by the Iterator will in this case be Longs.&lt;/p&gt;                
                <return>
                    entry set Iterator                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="entrySetIterator" type="Iterator<Map.Entry<Comparable<?>,Long>>" line="175"/>
            <javadoc line="178">
                Returns the sum of all frequencies.                
                <return>
                    the total frequency count.                    
                </return>
            </javadoc>
            <method name="getSumFreq" type="long" line="182">
                <declaration name="result" type="long" line="183"/>
                <declaration name="iterator" type="Iterator&lt;Long&gt;" line="184"/>
                <scope line="185"/>
            </method>
            <javadoc line="190">
                Returns the number of values = v.
                  Returns 0 if the value is not comparable.                
                <param>
                    v the value to lookup.                    
                </param>
                <return>
                    the frequency of v.                    
                </return>
            </javadoc>
            <method name="getCount" type="long" line="196">
                <params>
                    <param name="v" type="Comparable<?>"/>
                </params>
                <scope line="197"/>
                <declaration name="result" type="long" line="200"/>
                <scope line="201">
                    <declaration name="count" type="Long" line="202"/>
                    <scope line="203"/>
                </scope>
                <scope line="207"/>
            </method>
            <javadoc line="211">
                Returns the number of values = v.                
                <param>
                    v the value to lookup.                    
                </param>
                <return>
                    the frequency of v.                    
                </return>
            </javadoc>
            <method name="getCount" type="long" line="216">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="219">
                Returns the number of values = v.                
                <param>
                    v the value to lookup.                    
                </param>
                <return>
                    the frequency of v.                    
                </return>
            </javadoc>
            <method name="getCount" type="long" line="224">
                <params>
                    <param name="v" type="long"/>
                </params>
            </method>
            <javadoc line="227">
                Returns the number of values = v.                
                <param>
                    v the value to lookup.                    
                </param>
                <return>
                    the frequency of v.                    
                </return>
            </javadoc>
            <method name="getCount" type="long" line="232">
                <params>
                    <param name="v" type="char"/>
                </params>
            </method>
            <javadoc line="235">
                Returns the number of values in the frequency table.                
                <return>
                    the number of unique values that have been added to the frequency table.                    
                </return>
                <see>
                    #valuesIterator()                    
                </see>
            </javadoc>
            <method name="getUniqueCount" type="int" line="240"/>
            <javadoc line="243">
                Returns the percentage of values that are equal to v
                  (as a proportion between 0 and 1).
                  &lt;p&gt;
                  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if no values have been added.&lt;/p&gt;                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values equal to v                    
                </return>
            </javadoc>
            <method name="getPct" type="double" line="251">
                <params>
                    <param name="v" type="Comparable<?>"/>
                </params>
                <declaration name="sumFreq" type="long" line="252"/>
                <scope line="253"/>
            </method>
            <javadoc line="258">
                Returns the percentage of values that are equal to v
                  (as a proportion between 0 and 1).                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values equal to v                    
                </return>
            </javadoc>
            <method name="getPct" type="double" line="264">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="267">
                Returns the percentage of values that are equal to v
                  (as a proportion between 0 and 1).                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values equal to v                    
                </return>
            </javadoc>
            <method name="getPct" type="double" line="273">
                <params>
                    <param name="v" type="long"/>
                </params>
            </method>
            <javadoc line="276">
                Returns the percentage of values that are equal to v
                  (as a proportion between 0 and 1).                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values equal to v                    
                </return>
            </javadoc>
            <method name="getPct" type="double" line="282">
                <params>
                    <param name="v" type="char"/>
                </params>
            </method>
            <javadoc line="285">
                Returns the cumulative frequency of values less than or equal to v.
                  &lt;p&gt;
                  Returns 0 if v is not comparable to the values set.&lt;/p&gt;                
                <param>
                    v the value to lookup.                    
                </param>
                <return>
                    the proportion of values equal to v                    
                </return>
            </javadoc>
            <method name="getCumFreq" type="long" line="292">
                <params>
                    <param name="v" type="Comparable<?>"/>
                </params>
                <scope line="293"/>
                <scope line="296"/>
                <declaration name="c" type="Comparator&lt;Comparable&lt;?&gt;&gt;" line="299"/>
                <scope line="300"/>
                <declaration name="result" type="long" line="303"/>
                <scope line="304">
                    <declaration name="value" type="Long" line="305"/>
                    <scope line="306"/>
                </scope>
                <scope line="310"/>
                <scope line="313"/>
                <scope line="316"/>
                <declaration name="values" type="Iterator&lt;Comparable&lt;?&gt;&gt;" line="319"/>
                <scope line="320">
                    <declaration name="nextValue" type="Comparable&lt;?&gt;" line="321"/>
                    <scope line="322"/>
                    <scope line="325"/>
                </scope>
            </method>
            <javadoc line="331">
                Returns the cumulative frequency of values less than or equal to v.
                  &lt;p&gt;
                  Returns 0 if v is not comparable to the values set.&lt;/p&gt;                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values equal to v                    
                </return>
            </javadoc>
            <method name="getCumFreq" type="long" line="338">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="341">
                Returns the cumulative frequency of values less than or equal to v.
                  &lt;p&gt;
                  Returns 0 if v is not comparable to the values set.&lt;/p&gt;                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values equal to v                    
                </return>
            </javadoc>
            <method name="getCumFreq" type="long" line="348">
                <params>
                    <param name="v" type="long"/>
                </params>
            </method>
            <javadoc line="351">
                Returns the cumulative frequency of values less than or equal to v.
                  &lt;p&gt;
                  Returns 0 if v is not comparable to the values set.&lt;/p&gt;                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values equal to v                    
                </return>
            </javadoc>
            <method name="getCumFreq" type="long" line="358">
                <params>
                    <param name="v" type="char"/>
                </params>
            </method>
            <javadoc line="361">
                Returns the cumulative percentage of values less than or equal to v
                  (as a proportion between 0 and 1).
                  &lt;p&gt;
                  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if no values have been added.
                  Returns 0 if at least one value has been added, but v is not comparable
                  to the values set.&lt;/p&gt;                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values less than or equal to v                    
                </return>
            </javadoc>
            <method name="getCumPct" type="double" line="371">
                <params>
                    <param name="v" type="Comparable<?>"/>
                </params>
                <declaration name="sumFreq" type="long" line="372"/>
                <scope line="373"/>
            </method>
            <javadoc line="378">
                Returns the cumulative percentage of values less than or equal to v
                  (as a proportion between 0 and 1).
                  &lt;p&gt;
                  Returns 0 if v is not comparable to the values set.&lt;/p&gt;                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values less than or equal to v                    
                </return>
            </javadoc>
            <method name="getCumPct" type="double" line="386">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="389">
                Returns the cumulative percentage of values less than or equal to v
                  (as a proportion between 0 and 1).
                  &lt;p&gt;
                  Returns 0 if v is not comparable to the values set.&lt;/p&gt;                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values less than or equal to v                    
                </return>
            </javadoc>
            <method name="getCumPct" type="double" line="397">
                <params>
                    <param name="v" type="long"/>
                </params>
            </method>
            <javadoc line="400">
                Returns the cumulative percentage of values less than or equal to v
                  (as a proportion between 0 and 1).
                  &lt;p&gt;
                  Returns 0 if v is not comparable to the values set.&lt;/p&gt;                
                <param>
                    v the value to lookup                    
                </param>
                <return>
                    the proportion of values less than or equal to v                    
                </return>
            </javadoc>
            <method name="getCumPct" type="double" line="408">
                <params>
                    <param name="v" type="char"/>
                </params>
            </method>
            <javadoc line="411">
                Merge another Frequency object&apos;s counts into this instance.
                  This Frequency&apos;s counts will be incremented (or set when not already set)
                  by the counts represented by other.                
                <param>
                    other the other {@link Frequency} object to be merged                    
                </param>
                <throws>
                    NullArgumentException if {@code other} is null                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="merge" type="void" line="419">
                <params>
                    <param name="other" type="Frequency"/>
                </params>
                <declaration name="iter" type="Iterator&lt;Map.Entry&lt;Comparable&lt;?&gt;,Long&gt;&gt;" line="421"/>
                <scope line="422">
                    <declaration name="entry" type="Map.Entry&lt;Comparable&lt;?&gt;,Long&gt;" line="423"/>
                </scope>
            </method>
            <javadoc line="427">
                Merge a {@link Collection} of {@link Frequency} objects into this instance.
                  This Frequency&apos;s counts will be incremented (or set when not already set)
                  by the counts represented by each of the others.                
                <param>
                    others the other {@link Frequency} objects to be merged                    
                </param>
                <throws>
                    NullArgumentException if the collection is null                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="merge" type="void" line="435">
                <params>
                    <param name="others" type="Collection<Frequency>"/>
                </params>
                <scope line="437"/>
            </method>
            <class name="NaturalComparator" line="441">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="Comparable<T>"/>
                    </type_params>
                </implements>
                <implements interface="Serializable"/>
                <javadoc line="441">
                    A Comparator that compares comparable objects using the
                      natural order.  Copied from Commons Collections ComparableComparator.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="446"/>
                <javadoc line="446">
                    Serializable version identifier                    
                </javadoc>
                <javadoc line="450">
                    Compare the two {@link Comparable Comparable} arguments.
                      This method is equivalent to:
                      &lt;pre&gt;(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)&lt;/pre&gt;                    
                    <param>
                        o1 the first object                        
                    </param>
                    <param>
                        o2 the second object                        
                    </param>
                    <return>
                        result of comparison                        
                    </return>
                    <throws>
                        NullPointerException when <i>o1</i> is <code>null</code>,
                          or when <code>((Comparable)o1).compareTo(o2)</code> does                        
                    </throws>
                    <throws>
                        ClassCastException when <i>o1</i> is not a {@link Comparable Comparable},
                          or when <code>((Comparable)o1).compareTo(o2)</code> does                        
                    </throws>
                </javadoc>
                <method name="compare" type="int" line="462">
                    <params>
                        <param name="o1" type="Comparable<T>"/>
                        <param name="o2" type="Comparable<T>"/>
                    </params>
                </method>
            </class>
            <javadoc line="466">
                {@inheritDoc}                
            </javadoc>
            <method name="hashCode" type="int" line="469">
                <declaration name="prime" type="int" line="470"/>
                <declaration name="result" type="int" line="471"/>
            </method>
            <javadoc line="475">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="478">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="479"/>
                <scope line="482"/>
                <declaration name="other" type="Frequency" line="485"/>
                <scope line="486">
                    <scope line="487"/>
                </scope>
                <scope line="491"/>
            </method>
        </class>
    </source>