<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="RRQRDecomposition" line="3">
            <extends class="QRDecomposition"/>
            <javadoc line="3">
                Calculates the rank-revealing QR-decomposition of a matrix, with column pivoting.
                  &lt;p&gt;The rank-revealing QR-decomposition of a matrix A consists of three matrices Q,
                  R and P such that AP=QR.  Q is orthogonal (Q&lt;sup&gt;T&lt;/sup&gt;Q = I), and R is upper triangular.
                  If A is m&amp;times;n, Q is m&amp;times;m and R is m&amp;times;n and P is n&amp;times;n.&lt;/p&gt;
                  &lt;p&gt;QR decomposition with column pivoting produces a rank-revealing QR
                  decomposition and the {@link #getRank(double)} method may be used to return the rank of the
                  input matrix A.&lt;/p&gt;
                  &lt;p&gt;This class compute the decomposition using Householder reflectors.&lt;/p&gt;
                  &lt;p&gt;For efficiency purposes, the decomposition in packed form is transposed.
                  This allows inner loop to iterate inside rows, which is much more cache-efficient
                  in Java.&lt;/p&gt;
                  &lt;p&gt;This class is based on the class with similar name from the
                  &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; library, with the
                  following changes:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;a {@link #getQT() getQT} method has been added,&lt;/li&gt;
                  &lt;li&gt;the {@code solve} and {@code isFullRank} methods have been replaced
                  by a {@link #getSolver() getSolver} method and the equivalent methods
                  provided by the returned {@link DecompositionSolver}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    <a href="http://mathworld.wolfram.com/QRDecomposition.html">MathWorld</a>                    
                </see>
                <see>
                    <a href="http://en.wikipedia.org/wiki/QR_decomposition">Wikipedia</a>                    
                </see>
                <version>
                    $Id: RRQRDecomposition.java 1456956 2013-03-15 13:54:20Z luc $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="p" type="int[]" line="30"/>
            <javadoc line="30">
                An array to record the column pivoting for later creation of P.                
            </javadoc>
            <declaration name="cachedP" type="RealMatrix" line="34"/>
            <javadoc line="34">
                Cached value of P.                
            </javadoc>
            <javadoc line="38">
                Calculates the QR-decomposition of the given matrix.
                  The singularity threshold defaults to zero.                
                <param>
                    matrix The matrix to decompose.                    
                </param>
                <see>
                    #RRQRDecomposition(RealMatrix,double)                    
                </see>
            </javadoc>
            <method name="RRQRDecomposition" type="constructor" line="44">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="47">
                Calculates the QR-decomposition of the given matrix.                
                <param>
                    matrix The matrix to decompose.                    
                </param>
                <param>
                    threshold Singularity threshold.                    
                </param>
                <see>
                    #RRQRDecomposition(RealMatrix)                    
                </see>
            </javadoc>
            <method name="RRQRDecomposition" type="constructor" line="53">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="threshold" type="double"/>
                </params>
            </method>
            <javadoc line="56">
                Decompose matrix.                
                <param>
                    qrt transposed matrix                    
                </param>
            </javadoc>
            <method name="decompose" type="void" line="60">
                <params>
                    <param name="qrt" type="double[][]"/>
                </params>
                <scope line="62"/>
            </method>
            <javadoc line="67">
                Perform Householder reflection for a minor A(minor, minor) of A.                
                <param>
                    minor minor index                    
                </param>
                <param>
                    qrt transposed matrix                    
                </param>
            </javadoc>
            <method name="performHouseholderReflection" type="void" line="72">
                <params>
                    <param name="minor" type="int"/>
                    <param name="qrt" type="double[][]"/>
                </params>
                <declaration name="l2NormSquaredMax" type="double" line="73"/>
                <declaration name="l2NormSquaredMaxIndex" type="int" line="74"/>
                <scope line="75">
                    <declaration name="l2NormSquared" type="double" line="76"/>
                    <scope line="77"/>
                    <scope line="80"/>
                </scope>
                <scope line="85">
                    <declaration name="tmp1" type="double[]" line="86"/>
                    <declaration name="tmp2" type="int" line="89"/>
                </scope>
            </method>
            <javadoc line="95">
                Returns the pivot matrix, P, used in the QR Decomposition of matrix A such that AP = QR.
                  If no pivoting is used in this decomposition then P is equal to the identity matrix.                
                <return>
                    a permutation matrix.                    
                </return>
            </javadoc>
            <method name="getP" type="RealMatrix" line="100">
                <scope line="101">
                    <declaration name="n" type="int" line="102"/>
                    <scope line="104"/>
                </scope>
            </method>
            <javadoc line="110">
                Return the effective numerical matrix rank.
                  &lt;p&gt;The effective numerical rank is the number of non-negligible
                  singular values.&lt;/p&gt;
                  &lt;p&gt;This implementation looks at Frobenius norms of the sequence of
                  bottom right submatrices.  When a large fall in norm is seen,
                  the rank is returned. The drop is computed as:&lt;/p&gt;
                  &lt;pre&gt;
                  (thisNorm/lastNorm)  rNorm &lt; dropThreshold
                  &lt;/pre&gt;
                  &lt;p&gt;
                  where thisNorm is the Frobenius norm of the current submatrix,
                  lastNorm is the Frobenius norm of the previous submatrix,
                  rNorm is is the Frobenius norm of the complete matrix
                  &lt;/p&gt;                
                <param>
                    dropThreshold threshold triggering rank computation                    
                </param>
                <return>
                    effective numerical matrix rank                    
                </return>
            </javadoc>
            <method name="getRank" type="int" line="128">
                <params>
                    <param name="dropThreshold" type="double"/>
                </params>
                <declaration name="r" type="RealMatrix" line="129"/>
                <declaration name="rows" type="int" line="130"/>
                <declaration name="columns" type="int" line="131"/>
                <declaration name="rank" type="int" line="132"/>
                <declaration name="lastNorm" type="double" line="133"/>
                <declaration name="rNorm" type="double" line="134"/>
                <scope line="135">
                    <declaration name="thisNorm" type="double" line="136"/>
                    <scope line="137"/>
                </scope>
            </method>
            <javadoc line="145">
                Get a solver for finding the A &amp;times; X = B solution in least square sense.                
                <return>
                    a solver                    
                </return>
            </javadoc>
            <method name="getSolver" type="DecompositionSolver" line="149"/>
            <class name="Solver" line="152">
                <implements interface="DecompositionSolver"/>
                <javadoc line="152">
                    Specialized solver.                    
                </javadoc>
                <declaration name="upper" type="DecompositionSolver" line="156"/>
                <javadoc line="156">
                    Upper level solver.                    
                </javadoc>
                <declaration name="p" type="RealMatrix" line="160"/>
                <javadoc line="160">
                    A permutation matrix for the pivots used in the QR decomposition                    
                </javadoc>
                <javadoc line="164">
                    Build a solver from decomposed matrix.                    
                    <param>
                        upper upper level solver.                        
                    </param>
                    <param>
                        p permutation matrix                        
                    </param>
                </javadoc>
                <method name="Solver" type="constructor" line="169">
                    <params>
                        <param name="upper" type="DecompositionSolver"/>
                        <param name="p" type="RealMatrix"/>
                    </params>
                </method>
                <javadoc line="173">
                    {@inheritDoc}                    
                </javadoc>
                <method name="isNonSingular" type="boolean" line="176"/>
                <javadoc line="179">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="RealVector" line="182">
                    <params>
                        <param name="b" type="RealVector"/>
                    </params>
                </method>
                <javadoc line="185">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="RealMatrix" line="188">
                    <params>
                        <param name="b" type="RealMatrix"/>
                    </params>
                </method>
                <javadoc line="191">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getInverse" type="RealMatrix" line="194"/>
            </class>
        </class>
    </source>