<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.partitioning.utilities">
        <class name="AVLTree" line="19">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="19">
                This class implements AVL trees.
                  &lt;p&gt;The purpose of this class is to sort elements while allowing
                  duplicate elements (i.e. such that {@code a.equals(b)} is
                  true). The {@code SortedSet} interface does not allow this, so
                  a specific class is needed. Null elements are not allowed.&lt;/p&gt;
                  &lt;p&gt;Since the {@code equals} method is not sufficient to
                  differentiate elements, the {@link #delete delete} method is
                  implemented using the equality operator.&lt;/p&gt;
                  &lt;p&gt;In order to clearly mark the methods provided here do not have
                  the same semantics as the ones specified in the{@code SortedSet} interface, different names are used
                  ({@code add} has been replaced by {@link #insert insert} and{@code remove} has been replaced by {@link #deletedelete}).&lt;/p&gt;
                  &lt;p&gt;This class is based on the C implementation Georg Kraml has put
                  in the public domain. Unfortunately, his &lt;a
                  href=&quot;www.purists.org/georg/avltree/index.html&quot;&gt;page&lt;/a&gt; seems not
                  to exist any more.&lt;/p&gt;                
                <param>
                    <T>
                       the type of the elements                    
                </param>
                <version>
                    $Id: AVLTree.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="top" type="Node" line="49"/>
            <javadoc line="49">
                Top level node.                
            </javadoc>
            <javadoc line="52">
                Build an empty tree.                
            </javadoc>
            <method name="AVLTree" type="constructor" line="54"/>
            <javadoc line="58">
                Insert an element in the tree.                
                <param>
                    element element to insert (silently ignored if null)                    
                </param>
            </javadoc>
            <method name="insert" type="void" line="61">
                <params>
                    <param name="element" type="T"/>
                </params>
                <scope line="62">
                    <scope line="63"/>
                    <scope line="65"/>
                </scope>
            </method>
            <javadoc line="71">
                Delete an element from the tree.
                  &lt;p&gt;The element is deleted only if there is a node {@code n}containing exactly the element instance specified, i.e. for which{@code n.getElement() == element}. This is purposely
                  &lt;em&gt;different&lt;/em&gt; from the specification of the{@code java.util.Set} {@code remove} method (in fact,
                  this is the reason why a specific class has been developed).&lt;/p&gt;                
                <param>
                    element element to delete (silently ignored if null)                    
                </param>
                <return>
                    true if the element was deleted from the tree                    
                </return>
            </javadoc>
            <method name="delete" type="boolean" line="81">
                <params>
                    <param name="element" type="T"/>
                </params>
                <comment line="85">
                    loop over all elements neither smaller nor larger
                     than the specified one                    
                </comment>
                <comment line="91">
                    all the remaining elements are known to be larger,
                     the element is not in the tree                    
                </comment>
                <scope line="82">
                    <scope line="83">
                        <scope line="86"/>
                        <scope line="89"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="99">
                Check if the tree is empty.                
                <return>
                    true if the tree is empty                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="102"/>
            <javadoc line="107">
                Get the number of elements of the tree.                
                <return>
                    number of elements contained in the tree                    
                </return>
            </javadoc>
            <method name="size" type="int" line="110"/>
            <javadoc line="114">
                Get the node whose element is the smallest one in the tree.                
                <return>
                    the tree node containing the smallest element in the tree
                      or null if the tree is empty                    
                </return>
                <see>
                    #getLargest                    
                </see>
                <see>
                    #getNotSmaller                    
                </see>
                <see>
                    #getNotLarger                    
                </see>
                <see>
                    Node#getPrevious                    
                </see>
                <see>
                    Node#getNext                    
                </see>
            </javadoc>
            <method name="getSmallest" type="Node" line="123"/>
            <javadoc line="127">
                Get the node whose element is the largest one in the tree.                
                <return>
                    the tree node containing the largest element in the tree
                      or null if the tree is empty                    
                </return>
                <see>
                    #getSmallest                    
                </see>
                <see>
                    #getNotSmaller                    
                </see>
                <see>
                    #getNotLarger                    
                </see>
                <see>
                    Node#getPrevious                    
                </see>
                <see>
                    Node#getNext                    
                </see>
            </javadoc>
            <method name="getLargest" type="Node" line="136"/>
            <javadoc line="140">
                Get the node whose element is not smaller than the reference object.                
                <param>
                    reference reference object (may not be in the tree)                    
                </param>
                <return>
                    the tree node containing the smallest element not smaller
                      than the reference object or null if either the tree is empty or
                      all its elements are smaller than the reference object                    
                </return>
                <see>
                    #getSmallest                    
                </see>
                <see>
                    #getLargest                    
                </see>
                <see>
                    #getNotLarger                    
                </see>
                <see>
                    Node#getPrevious                    
                </see>
                <see>
                    Node#getNext                    
                </see>
            </javadoc>
            <method name="getNotSmaller" type="Node" line="151">
                <params>
                    <param name="reference" type="T"/>
                </params>
                <declaration name="candidate" type="Node" line="152"/>
                <scope line="153">
                    <scope line="154">
                        <scope line="155"/>
                    </scope>
                    <scope line="159">
                        <scope line="161"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="170">
                Get the node whose element is not larger than the reference object.                
                <param>
                    reference reference object (may not be in the tree)                    
                </param>
                <return>
                    the tree node containing the largest element not larger
                      than the reference object (in which case the node is guaranteed
                      not to be empty) or null if either the tree is empty or all its
                      elements are larger than the reference object                    
                </return>
                <see>
                    #getSmallest                    
                </see>
                <see>
                    #getLargest                    
                </see>
                <see>
                    #getNotSmaller                    
                </see>
                <see>
                    Node#getPrevious                    
                </see>
                <see>
                    Node#getNext                    
                </see>
            </javadoc>
            <method name="getNotLarger" type="Node" line="182">
                <params>
                    <param name="reference" type="T"/>
                </params>
                <declaration name="candidate" type="Node" line="183"/>
                <scope line="184">
                    <scope line="185">
                        <scope line="186"/>
                    </scope>
                    <scope line="190">
                        <scope line="192"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="201">
                Enum for tree skew factor.                
            </javadoc>
            <javadoc line="203">
                Code for left high trees.                
            </javadoc>
            <javadoc line="206">
                Code for right high trees.                
            </javadoc>
            <javadoc line="209">
                Code for Skew.BALANCED trees.                
            </javadoc>
            <class name="Node" line="213">
                <javadoc line="213">
                    This class implements AVL trees nodes.
                      &lt;p&gt;AVL tree nodes implement all the logical structure of the
                      tree. Nodes are created by the {@link AVLTree AVLTree} class.&lt;/p&gt;
                      &lt;p&gt;The nodes are not independant from each other but must obey
                      specific balancing constraints and the tree structure is
                      rearranged as elements are inserted or deleted from the tree. The
                      creation, modification and tree-related navigation methods have
                      therefore restricted access. Only the order-related navigation,
                      reading and delete methods are public.&lt;/p&gt;                    
                    <see>
                        AVLTree                        
                    </see>
                </javadoc>
                <declaration name="element" type="T" line="226"/>
                <javadoc line="226">
                    Element contained in the current node.                    
                </javadoc>
                <declaration name="left" type="Node" line="229"/>
                <javadoc line="229">
                    Left sub-tree.                    
                </javadoc>
                <declaration name="right" type="Node" line="232"/>
                <javadoc line="232">
                    Right sub-tree.                    
                </javadoc>
                <declaration name="parent" type="Node" line="235"/>
                <javadoc line="235">
                    Parent tree.                    
                </javadoc>
                <declaration name="skew" type="Skew" line="238"/>
                <javadoc line="238">
                    Skew factor.                    
                </javadoc>
                <javadoc line="241">
                    Build a node for a specified element.                    
                    <param>
                        element element                        
                    </param>
                    <param>
                        parent parent node                        
                    </param>
                </javadoc>
                <method name="Node" type="constructor" line="245">
                    <params>
                        <param name="element" type="T"/>
                        <param name="parent" type="Node"/>
                    </params>
                </method>
                <javadoc line="253">
                    Get the contained element.                    
                    <return>
                        element contained in the node                        
                    </return>
                </javadoc>
                <method name="getElement" type="T" line="256"/>
                <javadoc line="260">
                    Get the number of elements of the tree rooted at this node.                    
                    <return>
                        number of elements contained in the tree rooted at this node                        
                    </return>
                </javadoc>
                <method name="size" type="int" line="263"/>
                <javadoc line="267">
                    Get the node whose element is the smallest one in the tree
                      rooted at this node.                    
                    <return>
                        the tree node containing the smallest element in the
                          tree rooted at this node or null if the tree is empty                        
                    </return>
                    <see>
                        #getLargest                        
                    </see>
                </javadoc>
                <method name="getSmallest" type="Node" line="273">
                    <declaration name="node" type="Node" line="274"/>
                    <scope line="275"/>
                </method>
                <javadoc line="281">
                    Get the node whose element is the largest one in the tree
                      rooted at this node.                    
                    <return>
                        the tree node containing the largest element in the
                          tree rooted at this node or null if the tree is empty                        
                    </return>
                    <see>
                        #getSmallest                        
                    </see>
                </javadoc>
                <method name="getLargest" type="Node" line="287">
                    <declaration name="node" type="Node" line="288"/>
                    <scope line="289"/>
                </method>
                <javadoc line="295">
                    Get the node containing the next smaller or equal element.                    
                    <return>
                        node containing the next smaller or equal element or
                          null if there is no smaller or equal element in the tree                        
                    </return>
                    <see>
                        #getNext                        
                    </see>
                </javadoc>
                <method name="getPrevious" type="Node" line="300">
                    <scope line="302">
                        <declaration name="node" type="Node" line="303"/>
                        <scope line="304"/>
                    </scope>
                    <scope line="309">
                        <scope line="310"/>
                    </scope>
                </method>
                <javadoc line="319">
                    Get the node containing the next larger or equal element.                    
                    <return>
                        node containing the next larger or equal element (in
                          which case the node is guaranteed not to be empty) or null if
                          there is no larger or equal element in the tree                        
                    </return>
                    <see>
                        #getPrevious                        
                    </see>
                </javadoc>
                <method name="getNext" type="Node" line="325">
                    <scope line="327">
                        <declaration name="node" type="Node" line="328"/>
                        <scope line="329"/>
                    </scope>
                    <scope line="334">
                        <scope line="335"/>
                    </scope>
                </method>
                <javadoc line="344">
                    Insert an element in a sub-tree.                    
                    <param>
                        newElement element to insert                        
                    </param>
                    <return>
                        true if the parent tree should be re-Skew.BALANCED                        
                    </return>
                </javadoc>
                <method name="insert" type="boolean" line="348">
                    <params>
                        <param name="newElement" type="T"/>
                    </params>
                    <comment line="351">
                        the inserted element is smaller than the node                        
                    </comment>
                    <comment line="359">
                        the inserted element is equal to or greater than the node                        
                    </comment>
                    <scope line="349">
                        <scope line="351"/>
                    </scope>
                    <scope line="359"/>
                </method>
                <javadoc line="367">
                    Delete the node from the tree.                    
                </javadoc>
                <method name="delete" type="void" line="369">
                    <comment line="372">
                        this was the last node, the tree is now empty                        
                    </comment>
                    <scope line="370"/>
                    <scope line="374">
                        <declaration name="node" type="Node" line="376"/>
                        <declaration name="child" type="Node" line="377"/>
                        <declaration name="leftShrunk" type="boolean" line="378"/>
                        <scope line="379"/>
                        <scope line="384"/>
                        <scope line="392"/>
                        <scope line="394"/>
                        <scope line="397"/>
                        <scope line="401">
                            <scope line="402"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="412">
                    Re-balance the instance as left sub-tree has grown.                    
                    <return>
                        true if the parent tree should be reSkew.BALANCED too                        
                    </return>
                </javadoc>
                <method name="rebalanceLeftGrown" type="boolean" line="415">
                    <scope line="418"/>
                    <scope line="422">
                        <declaration name="s" type="Skew" line="423"/>
                    </scope>
                </method>
                <javadoc line="451">
                    Re-balance the instance as right sub-tree has grown.                    
                    <return>
                        true if the parent tree should be reSkew.BALANCED too                        
                    </return>
                </javadoc>
                <method name="rebalanceRightGrown" type="boolean" line="454">
                    <scope line="460"/>
                    <scope line="464">
                        <declaration name="s" type="Skew" line="465"/>
                    </scope>
                </method>
                <javadoc line="490">
                    Re-balance the instance as left sub-tree has shrunk.                    
                    <return>
                        true if the parent tree should be reSkew.BALANCED too                        
                    </return>
                </javadoc>
                <method name="rebalanceLeftShrunk" type="boolean" line="493">
                    <scope line="499"/>
                    <scope line="504"/>
                    <scope line="509">
                        <declaration name="s" type="Skew" line="510"/>
                    </scope>
                </method>
                <javadoc line="535">
                    Re-balance the instance as right sub-tree has shrunk.                    
                    <return>
                        true if the parent tree should be reSkew.BALANCED too                        
                    </return>
                </javadoc>
                <method name="rebalanceRightShrunk" type="boolean" line="538">
                    <scope line="544"/>
                    <scope line="549"/>
                    <scope line="554">
                        <declaration name="s" type="Skew" line="555"/>
                    </scope>
                </method>
                <javadoc line="580">
                    Perform a clockwise rotation rooted at the instance.
                      &lt;p&gt;The skew factor are not updated by this method, they
                      &lt;em&gt;must&lt;/em&gt; be updated by the caller&lt;/p&gt;                    
                </javadoc>
                <method name="rotateCW" type="void" line="584">
                    <declaration name="tmpElt" type="T" line="586"/>
                    <declaration name="tmpNode" type="Node" line="590"/>
                    <scope line="596"/>
                    <scope line="599"/>
                </method>
                <javadoc line="605">
                    Perform a counter-clockwise rotation rooted at the instance.
                      &lt;p&gt;The skew factor are not updated by this method, they
                      &lt;em&gt;must&lt;/em&gt; be updated by the caller&lt;/p&gt;                    
                </javadoc>
                <method name="rotateCCW" type="void" line="609">
                    <declaration name="tmpElt" type="T" line="611"/>
                    <declaration name="tmpNode" type="Node" line="615"/>
                    <scope line="621"/>
                    <scope line="624"/>
                </method>
            </class>
        </class>
    </source>