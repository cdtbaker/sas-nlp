<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting">
        <import package="java.util.Arrays"/>
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.analysis.function.Gaussian"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="GaussianFitter" line="13">
            <extends class="CurveFitter">
                <type_params>
                    <type_param name="Gaussian.Parametric"/>
                </type_params>
            </extends>
            <javadoc line="13">
                Fits points to a {@link org.apache.commons.math3.analysis.function.Gaussian.Parametric Gaussian} function.
                  &lt;p&gt;
                  Usage example:
                  &lt;pre&gt;
                  GaussianFitter fitter = new GaussianFitter(
                  new LevenbergMarquardtOptimizer());
                  fitter.addObservedPoint(4.0254623,  531026.0);
                  fitter.addObservedPoint(4.03128248, 984167.0);
                  fitter.addObservedPoint(4.03839603, 1887233.0);
                  fitter.addObservedPoint(4.04421621, 2687152.0);
                  fitter.addObservedPoint(4.05132976, 3461228.0);
                  fitter.addObservedPoint(4.05326982, 3580526.0);
                  fitter.addObservedPoint(4.05779662, 3439750.0);
                  fitter.addObservedPoint(4.0636168,  2877648.0);
                  fitter.addObservedPoint(4.06943698, 2175960.0);
                  fitter.addObservedPoint(4.07525716, 1447024.0);
                  fitter.addObservedPoint(4.08237071, 717104.0);
                  fitter.addObservedPoint(4.08366408, 620014.0);
                  double[] parameters = fitter.fit();
                  &lt;/pre&gt;                
                <since>
                    2.2                    
                </since>
                <version>
                    $Id: GaussianFitter.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <javadoc line="38">
                Constructs an instance using the specified optimizer.                
                <param>
                    optimizer Optimizer to use for the fitting.                    
                </param>
            </javadoc>
            <method name="GaussianFitter" type="constructor" line="42">
                <params>
                    <param name="optimizer" type="MultivariateVectorOptimizer"/>
                </params>
            </method>
            <javadoc line="45">
                Fits a Gaussian function to the observed points.                
                <param>
                    initialGuess First guess values in the following order:
                      <ul>
                      <li>Norm</li>
                      <li>Mean</li>
                      <li>Sigma</li>
                      </ul>                    
                </param>
                <return>
                    the parameters of the Gaussian function that best fits the
                      observed points (in the same order as above).                    
                </return>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="fit" type="double[]" line="57">
                <params>
                    <param name="initialGuess" type="double[]"/>
                </params>
                <anonymous_class line="58">
                    <method name="value" type="double" line="59">
                        <params>
                            <param name="x" type="double"/>
                            <param name="p" type="double"/>
                        </params>
                        <declaration name="v" type="double" line="60"/>
                        <scope line="61"/>
                        <scope line="64"/>
                    </method>
                    <method name="gradient" type="double[]" line="68">
                        <params>
                            <param name="x" type="double"/>
                            <param name="p" type="double"/>
                        </params>
                        <declaration name="v" type="double[]" line="69"/>
                        <scope line="70"/>
                        <scope line="73"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="Gaussian.Parametric" line="58"/>
            </method>
            <javadoc line="81">
                Fits a Gaussian function to the observed points.                
                <return>
                    the parameters of the Gaussian function that best fits the
                      observed points (in the same order as above).                    
                </return>
            </javadoc>
            <method name="fit" type="double[]" line="86">
                <declaration name="guess" type="double[]" line="87"/>
            </method>
            <class name="ParameterGuesser" line="90">
                <javadoc line="90">
                    Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}of a {@link org.apache.commons.math3.analysis.function.Gaussian.Parametric}based on the specified observed points.                    
                </javadoc>
                <declaration name="norm" type="double" line="94"/>
                <javadoc line="94">
                    Normalization factor.                    
                </javadoc>
                <declaration name="mean" type="double" line="98"/>
                <javadoc line="98">
                    Mean.                    
                </javadoc>
                <declaration name="sigma" type="double" line="102"/>
                <javadoc line="102">
                    Standard deviation.                    
                </javadoc>
                <javadoc line="106">
                    Constructs instance with the specified observed points.                    
                    <param>
                        observations Observed points from which to guess the
                          parameters of the Gaussian.                        
                    </param>
                    <throws>
                        NullArgumentException if {@code observations} is{@code null}.                        
                    </throws>
                    <throws>
                        NumberIsTooSmallException if there are less than 3
                          observations.                        
                    </throws>
                </javadoc>
                <method name="ParameterGuesser" type="constructor" line="114">
                    <params>
                        <param name="observations" type="WeightedObservedPoint[]"/>
                    </params>
                    <scope line="115"/>
                    <scope line="118"/>
                    <declaration name="sorted" type="WeightedObservedPoint[]" line="121"/>
                    <declaration name="params" type="double[]" line="122"/>
                </method>
                <javadoc line="127">
                    Gets an estimation of the parameters.                    
                    <return>
                        the guessed parameters, in the following order:
                          <ul>
                          <li>Normalization factor</li>
                          <li>Mean</li>
                          <li>Standard deviation</li>
                          </ul>                        
                    </return>
                </javadoc>
                <method name="guess" type="double[]" line="136"/>
                <javadoc line="139">
                    Sort the observations.                    
                    <param>
                        unsorted Input observations.                        
                    </param>
                    <return>
                        the input observations, sorted.                        
                    </return>
                </javadoc>
                <method name="sortObservations" type="WeightedObservedPoint[]" line="144">
                    <params>
                        <param name="unsorted" type="WeightedObservedPoint[]"/>
                    </params>
                    <declaration name="observations" type="WeightedObservedPoint[]" line="145"/>
                    <anonymous_class line="146">
                        <method name="compare" type="int" line="147">
                            <params>
                                <param name="p1" type="WeightedObservedPoint"/>
                                <param name="p2" type="WeightedObservedPoint"/>
                            </params>
                            <scope line="148"/>
                            <scope line="151"/>
                            <scope line="154"/>
                            <scope line="157"/>
                            <scope line="160"/>
                            <scope line="163"/>
                            <scope line="166"/>
                            <scope line="169"/>
                            <scope line="172"/>
                        </method>
                    </anonymous_class>
                    <declaration name="cmp" type="Comparator&lt;WeightedObservedPoint&gt;" line="146"/>
                </method>
                <javadoc line="182">
                    Guesses the parameters based on the specified observed points.                    
                    <param>
                        points Observed points, sorted.                        
                    </param>
                    <return>
                        the guessed parameters (normalization factor, mean and
                          sigma).                        
                    </return>
                </javadoc>
                <method name="basicGuess" type="double[]" line="188">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                    </params>
                    <declaration name="maxYIdx" type="int" line="189"/>
                    <declaration name="n" type="double" line="190"/>
                    <declaration name="m" type="double" line="191"/>
                    <declaration name="fwhmApprox" type="double" line="192"/>
                    <scope line="193">
                        <declaration name="halfY" type="double" line="194"/>
                        <declaration name="fwhmX1" type="double" line="195"/>
                        <declaration name="fwhmX2" type="double" line="196"/>
                    </scope>
                    <scope line="199"/>
                    <declaration name="s" type="double" line="202"/>
                </method>
                <javadoc line="205">
                    Finds index of point in specified points with the largest Y.                    
                    <param>
                        points Points to search.                        
                    </param>
                    <return>
                        the index in specified points array.                        
                    </return>
                </javadoc>
                <method name="findMaxY" type="int" line="210">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                    </params>
                    <declaration name="maxYIdx" type="int" line="211"/>
                    <scope line="212">
                        <scope line="213"/>
                    </scope>
                </method>
                <javadoc line="219">
                    Interpolates using the specified points to determine X at the
                      specified Y.                    
                    <param>
                        points Points to use for interpolation.                        
                    </param>
                    <param>
                        startIdx Index within points from which to start the search for
                          interpolation bounds points.                        
                    </param>
                    <param>
                        idxStep Index step for searching interpolation bounds points.                        
                    </param>
                    <param>
                        y Y value for which X should be determined.                        
                    </param>
                    <return>
                        the value of X for the specified Y.                        
                    </return>
                    <throws>
                        ZeroException if {@code idxStep} is 0.                        
                    </throws>
                    <throws>
                        OutOfRangeException if specified {@code y} is not within the
                          range of the specified {@code points}.                        
                    </throws>
                </javadoc>
                <method name="interpolateXAtY" type="double" line="232">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                        <param name="startIdx" type="int"/>
                        <param name="idxStep" type="int"/>
                        <param name="y" type="double"/>
                    </params>
                    <scope line="233"/>
                    <declaration name="twoPoints" type="WeightedObservedPoint[]" line="236"/>
                    <declaration name="p1" type="WeightedObservedPoint" line="237"/>
                    <declaration name="p2" type="WeightedObservedPoint" line="238"/>
                    <scope line="239"/>
                    <scope line="242"/>
                </method>
                <javadoc line="247">
                    Gets the two bounding interpolation points from the specified points
                      suitable for determining X at the specified Y.                    
                    <param>
                        points Points to use for interpolation.                        
                    </param>
                    <param>
                        startIdx Index within points from which to start search for
                          interpolation bounds points.                        
                    </param>
                    <param>
                        idxStep Index step for search for interpolation bounds points.                        
                    </param>
                    <param>
                        y Y value for which X should be determined.                        
                    </param>
                    <return>
                        the array containing two points suitable for determining X at
                          the specified Y.                        
                    </return>
                    <throws>
                        ZeroException if {@code idxStep} is 0.                        
                    </throws>
                    <throws>
                        OutOfRangeException if specified {@code y} is not within the
                          range of the specified {@code points}.                        
                    </throws>
                </javadoc>
                <method name="getInterpolationPointsForY" type="WeightedObservedPoint[]" line="261">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                        <param name="startIdx" type="int"/>
                        <param name="idxStep" type="int"/>
                        <param name="y" type="double"/>
                    </params>
                    <scope line="262"/>
                    <scope line="265">
                        <declaration name="p1" type="WeightedObservedPoint" line="266"/>
                        <declaration name="p2" type="WeightedObservedPoint" line="267"/>
                        <scope line="268">
                            <scope line="269"/>
                            <scope line="272"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="279">
                    Determines whether a value is between two other values.                    
                    <param>
                        value Value to test whether it is between {@code boundary1}and {@code boundary2}.                        
                    </param>
                    <param>
                        boundary1 One end of the range.                        
                    </param>
                    <param>
                        boundary2 Other end of the range.                        
                    </param>
                    <return>
                        {@code true} if {@code value} is between {@code boundary1} and{@code boundary2} (inclusive), {@code false} otherwise.                        
                    </return>
                </javadoc>
                <method name="isBetween" type="boolean" line="286">
                    <params>
                        <param name="value" type="double"/>
                        <param name="boundary1" type="double"/>
                        <param name="boundary2" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>