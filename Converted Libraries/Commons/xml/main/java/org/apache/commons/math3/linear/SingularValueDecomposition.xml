<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SingularValueDecomposition" line="6">
            <javadoc line="6">
                Calculates the compact Singular Value Decomposition of a matrix.
                  &lt;p&gt;
                  The Singular Value Decomposition of matrix A is a set of three matrices: U,
                  &amp;Sigma; and V such that A = U &amp;times; &amp;Sigma; &amp;times; V&lt;sup&gt;T&lt;/sup&gt;. Let A be
                  a m &amp;times; n matrix, then U is a m &amp;times; p orthogonal matrix, &amp;Sigma; is a
                  p &amp;times; p diagonal matrix with positive or null elements, V is a p &amp;times;
                  n orthogonal matrix (hence V&lt;sup&gt;T&lt;/sup&gt; is also orthogonal) where
                  p=min(m,n).
                  &lt;/p&gt;
                  &lt;p&gt;This class is similar to the class with similar name from the
                  &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; library, with the
                  following changes:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;the {@code norm2} method which has been renamed as {@link #getNorm()getNorm},&lt;/li&gt;
                  &lt;li&gt;the {@code cond} method which has been renamed as {@link #getConditionNumber() getConditionNumber},&lt;/li&gt;
                  &lt;li&gt;the {@code rank} method which has been renamed as {@link #getRank()getRank},&lt;/li&gt;
                  &lt;li&gt;a {@link #getUT() getUT} method has been added,&lt;/li&gt;
                  &lt;li&gt;a {@link #getVT() getVT} method has been added,&lt;/li&gt;
                  &lt;li&gt;a {@link #getSolver() getSolver} method has been added,&lt;/li&gt;
                  &lt;li&gt;a {@link #getCovariance(double) getCovariance} method has been added.&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    <a href="http://mathworld.wolfram.com/SingularValueDecomposition.html">MathWorld</a>                    
                </see>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Singular_value_decomposition">Wikipedia</a>                    
                </see>
                <version>
                    $Id: SingularValueDecomposition.java 1456931 2013-03-15 12:34:35Z luc $                    
                </version>
                <since>
                    2.0 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="EPS" type="double" line="34"/>
            <javadoc line="34">
                Relative threshold for small singular values.                
            </javadoc>
            <declaration name="TINY" type="double" line="38"/>
            <javadoc line="38">
                Absolute threshold for small singular values.                
            </javadoc>
            <declaration name="singularValues" type="double[]" line="42"/>
            <javadoc line="42">
                Computed singular values.                
            </javadoc>
            <declaration name="m" type="int" line="46"/>
            <javadoc line="46">
                max(row dimension, column dimension).                
            </javadoc>
            <declaration name="n" type="int" line="50"/>
            <javadoc line="50">
                min(row dimension, column dimension).                
            </javadoc>
            <declaration name="transposed" type="boolean" line="54"/>
            <javadoc line="54">
                Indicator for transposed matrix.                
            </javadoc>
            <declaration name="cachedU" type="RealMatrix" line="58"/>
            <javadoc line="58">
                Cached value of U matrix.                
            </javadoc>
            <declaration name="cachedUt" type="RealMatrix" line="62"/>
            <javadoc line="62">
                Cached value of transposed U matrix.                
            </javadoc>
            <declaration name="cachedS" type="RealMatrix" line="66"/>
            <javadoc line="66">
                Cached value of S (diagonal) matrix.                
            </javadoc>
            <declaration name="cachedV" type="RealMatrix" line="70"/>
            <javadoc line="70">
                Cached value of V matrix.                
            </javadoc>
            <declaration name="cachedVt" type="RealMatrix" line="74"/>
            <javadoc line="74">
                Cached value of transposed V matrix.                
            </javadoc>
            <declaration name="tol" type="double" line="78"/>
            <javadoc line="78">
                Tolerance value for small singular values, calculated once we have
                  populated &quot;singularValues&quot;.                
            </javadoc>
            <javadoc line="83">
                Calculates the compact Singular Value Decomposition of the given matrix.                
                <param>
                    matrix Matrix to decompose.                    
                </param>
            </javadoc>
            <method name="SingularValueDecomposition" type="constructor" line="87">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="A" type="double[][]" line="88"/>
                <scope line="89"/>
                <scope line="95"/>
                <declaration name="U" type="double[][]" line="102"/>
                <declaration name="V" type="double[][]" line="103"/>
                <declaration name="e" type="double[]" line="104"/>
                <declaration name="work" type="double[]" line="105"/>
                <declaration name="nct" type="int" line="106"/>
                <declaration name="nrt" type="int" line="107"/>
                <scope line="108">
                    <scope line="109">
                        <scope line="111"/>
                        <scope line="114">
                            <scope line="115"/>
                            <scope line="118"/>
                        </scope>
                    </scope>
                    <scope line="125">
                        <scope line="126">
                            <declaration name="t" type="double" line="127"/>
                            <scope line="128"/>
                            <scope line="132"/>
                        </scope>
                    </scope>
                    <scope line="138">
                        <scope line="139"/>
                    </scope>
                    <scope line="143">
                        <scope line="145"/>
                        <scope line="148">
                            <scope line="149"/>
                            <scope line="152"/>
                        </scope>
                        <scope line="158">
                            <scope line="159"/>
                            <scope line="162">
                                <scope line="163"/>
                            </scope>
                            <scope line="167">
                                <declaration name="t" type="double" line="168"/>
                                <scope line="169"/>
                            </scope>
                        </scope>
                        <scope line="174"/>
                    </scope>
                </scope>
                <declaration name="p" type="int" line="179"/>
                <scope line="180"/>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="190">
                    <scope line="191"/>
                </scope>
                <scope line="196">
                    <scope line="197">
                        <scope line="198">
                            <declaration name="t" type="double" line="199"/>
                            <scope line="200"/>
                            <scope line="204"/>
                        </scope>
                        <scope line="208"/>
                        <scope line="212"/>
                    </scope>
                    <scope line="216">
                        <scope line="217"/>
                    </scope>
                </scope>
                <scope line="223">
                    <scope line="224">
                        <scope line="225">
                            <declaration name="t" type="double" line="226"/>
                            <scope line="227"/>
                            <scope line="231"/>
                        </scope>
                    </scope>
                    <scope line="236"/>
                </scope>
                <declaration name="pp" type="int" line="241"/>
                <declaration name="iter" type="int" line="242"/>
                <scope line="243">
                    <declaration name="k" type="int" line="244"/>
                    <declaration name="kase" type="int" line="245"/>
                    <scope line="246">
                        <declaration name="threshold" type="double" line="247"/>
                        <scope line="248"/>
                    </scope>
                    <scope line="253"/>
                    <scope line="256">
                        <declaration name="ks" type="int" line="257"/>
                        <scope line="258">
                            <scope line="259"/>
                            <declaration name="t" type="double" line="262"/>
                            <scope line="263"/>
                        </scope>
                        <scope line="268"/>
                        <scope line="271"/>
                        <scope line="274"/>
                    </scope>
                    <scope line="282">
                        <declaration name="f" type="double" line="283"/>
                        <scope line="285">
                            <declaration name="t" type="double" line="286"/>
                            <declaration name="cs" type="double" line="287"/>
                            <declaration name="sn" type="double" line="288"/>
                            <scope line="290"/>
                            <scope line="294"/>
                        </scope>
                    </scope>
                    <scope line="303">
                        <declaration name="f" type="double" line="304"/>
                        <scope line="306">
                            <declaration name="t" type="double" line="307"/>
                            <declaration name="cs" type="double" line="308"/>
                            <declaration name="sn" type="double" line="309"/>
                            <scope line="313"/>
                        </scope>
                    </scope>
                    <scope line="322">
                        <declaration name="maxPm1Pm2" type="double" line="323"/>
                        <declaration name="scale" type="double" line="324"/>
                        <declaration name="sp" type="double" line="325"/>
                        <declaration name="spm1" type="double" line="326"/>
                        <declaration name="epm1" type="double" line="327"/>
                        <declaration name="sk" type="double" line="328"/>
                        <declaration name="ek" type="double" line="329"/>
                        <declaration name="b" type="double" line="330"/>
                        <declaration name="c" type="double" line="331"/>
                        <declaration name="shift" type="double" line="332"/>
                        <scope line="333">
                            <scope line="335"/>
                        </scope>
                        <declaration name="f" type="double" line="340"/>
                        <declaration name="g" type="double" line="341"/>
                        <scope line="342">
                            <declaration name="t" type="double" line="343"/>
                            <declaration name="cs" type="double" line="344"/>
                            <declaration name="sn" type="double" line="345"/>
                            <scope line="346"/>
                            <scope line="353"/>
                            <scope line="366">
                                <scope line="367"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="379">
                        <scope line="380">
                            <scope line="382"/>
                        </scope>
                        <scope line="386">
                            <scope line="387"/>
                            <declaration name="t" type="double" line="390"/>
                            <scope line="393">
                                <scope line="394"/>
                            </scope>
                            <scope line="400">
                                <scope line="401"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="416"/>
                <scope line="420"/>
            </method>
            <javadoc line="425">
                Returns the matrix U of the decomposition.
                  &lt;p&gt;U is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the U matrix                    
                </return>
                <see>
                    #getUT()                    
                </see>
            </javadoc>
            <method name="getU" type="RealMatrix" line="431"/>
            <javadoc line="434">
                Returns the transpose of the matrix U of the decomposition.
                  &lt;p&gt;U is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the U matrix (or null if decomposed matrix is singular)                    
                </return>
                <see>
                    #getU()                    
                </see>
            </javadoc>
            <method name="getUT" type="RealMatrix" line="440">
                <scope line="441"/>
            </method>
            <javadoc line="446">
                Returns the diagonal matrix &amp;Sigma; of the decomposition.
                  &lt;p&gt;&amp;Sigma; is a diagonal matrix. The singular values are provided in
                  non-increasing order, for compatibility with Jama.&lt;/p&gt;                
                <return>
                    the &Sigma; matrix                    
                </return>
            </javadoc>
            <method name="getS" type="RealMatrix" line="452">
                <scope line="453"/>
            </method>
            <javadoc line="458">
                Returns the diagonal elements of the matrix &amp;Sigma; of the decomposition.
                  &lt;p&gt;The singular values are provided in non-increasing order, for
                  compatibility with Jama.&lt;/p&gt;                
                <return>
                    the diagonal elements of the &Sigma; matrix                    
                </return>
            </javadoc>
            <method name="getSingularValues" type="double[]" line="464"/>
            <javadoc line="467">
                Returns the matrix V of the decomposition.
                  &lt;p&gt;V is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the V matrix (or null if decomposed matrix is singular)                    
                </return>
                <see>
                    #getVT()                    
                </see>
            </javadoc>
            <method name="getV" type="RealMatrix" line="473"/>
            <javadoc line="476">
                Returns the transpose of the matrix V of the decomposition.
                  &lt;p&gt;V is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the V matrix (or null if decomposed matrix is singular)                    
                </return>
                <see>
                    #getV()                    
                </see>
            </javadoc>
            <method name="getVT" type="RealMatrix" line="482">
                <scope line="483"/>
            </method>
            <javadoc line="488">
                Returns the n &amp;times; n covariance matrix.
                  &lt;p&gt;The covariance matrix is V &amp;times; J &amp;times; V&lt;sup&gt;T&lt;/sup&gt;
                  where J is the diagonal matrix of the inverse of the squares of
                  the singular values.&lt;/p&gt;                
                <param>
                    minSingularValue value below which singular values are ignored
                      (a 0 or negative value implies all singular value will be used)                    
                </param>
                <return>
                    covariance matrix                    
                </return>
                <exception>
                    IllegalArgumentException if minSingularValue is larger than
                      the largest singular value, meaning all singular values are ignored                    
                </exception>
            </javadoc>
            <method name="getCovariance" type="RealMatrix" line="499">
                <params>
                    <param name="minSingularValue" type="double"/>
                </params>
                <declaration name="p" type="int" line="500"/>
                <declaration name="dimension" type="int" line="501"/>
                <scope line="502"/>
                <scope line="505"/>
                <declaration name="data" type="double[][]" line="508"/>
                <anonymous_class line="509">
                    <javadoc line="510">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="visit" type="void" line="513">
                        <params>
                            <param name="row" type="int"/>
                            <param name="column" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="jv" type="RealMatrix" line="518"/>
            </method>
            <javadoc line="521">
                Returns the L&lt;sub&gt;2&lt;/sub&gt; norm of the matrix.
                  &lt;p&gt;The L&lt;sub&gt;2&lt;/sub&gt; norm is max(|A &amp;times; u|&lt;sub&gt;2&lt;/sub&gt; /
                  |u|&lt;sub&gt;2&lt;/sub&gt;), where |.|&lt;sub&gt;2&lt;/sub&gt; denotes the vectorial 2-norm
                  (i.e. the traditional euclidian norm).&lt;/p&gt;                
                <return>
                    norm                    
                </return>
            </javadoc>
            <method name="getNorm" type="double" line="528"/>
            <javadoc line="531">
                Return the condition number of the matrix.                
                <return>
                    condition number of the matrix                    
                </return>
            </javadoc>
            <method name="getConditionNumber" type="double" line="535"/>
            <javadoc line="538">
                Computes the inverse of the condition number.
                  In cases of rank deficiency, the {@link #getConditionNumber() condition
                  number} will become undefined.                
                <return>
                    the inverse of the condition number.                    
                </return>
            </javadoc>
            <method name="getInverseConditionNumber" type="double" line="544"/>
            <javadoc line="547">
                Return the effective numerical matrix rank.
                  &lt;p&gt;The effective numerical rank is the number of non-negligible
                  singular values. The threshold used to identify non-negligible
                  terms is max(m,n) &amp;times; ulp(s&lt;sub&gt;1&lt;/sub&gt;) where ulp(s&lt;sub&gt;1&lt;/sub&gt;)
                  is the least significant bit of the largest singular value.&lt;/p&gt;                
                <return>
                    effective numerical matrix rank                    
                </return>
            </javadoc>
            <method name="getRank" type="int" line="555">
                <declaration name="r" type="int" line="556"/>
                <scope line="557">
                    <scope line="558"/>
                </scope>
            </method>
            <javadoc line="564">
                Get a solver for finding the A &amp;times; X = B solution in least square sense.                
                <return>
                    a solver                    
                </return>
            </javadoc>
            <method name="getSolver" type="DecompositionSolver" line="568"/>
            <class name="Solver" line="571">
                <implements interface="DecompositionSolver"/>
                <javadoc line="571">
                    Specialized solver.                    
                </javadoc>
                <declaration name="pseudoInverse" type="RealMatrix" line="575"/>
                <javadoc line="575">
                    Pseudo-inverse of the initial matrix.                    
                </javadoc>
                <declaration name="nonSingular" type="boolean" line="579"/>
                <javadoc line="579">
                    Singularity indicator.                    
                </javadoc>
                <javadoc line="583">
                    Build a solver from decomposed matrix.                    
                    <param>
                        singularValues Singular values.                        
                    </param>
                    <param>
                        uT U<sup>T</sup> matrix of the decomposition.                        
                    </param>
                    <param>
                        v V matrix of the decomposition.                        
                    </param>
                    <param>
                        nonSingular Singularity indicator.                        
                    </param>
                    <param>
                        tol tolerance for singular values                        
                    </param>
                </javadoc>
                <method name="Solver" type="constructor" line="591">
                    <params>
                        <param name="singularValues" type="double[]"/>
                        <param name="uT" type="RealMatrix"/>
                        <param name="v" type="RealMatrix"/>
                        <param name="nonSingular" type="boolean"/>
                        <param name="tol" type="double"/>
                    </params>
                    <declaration name="suT" type="double[][]" line="592"/>
                    <scope line="593">
                        <declaration name="a" type="double" line="594"/>
                        <scope line="595"/>
                        <scope line="598"/>
                        <declaration name="suTi" type="double[]" line="601"/>
                        <scope line="602"/>
                    </scope>
                </method>
                <javadoc line="609">
                    Solve the linear equation A &amp;times; X = B in least square sense.
                      &lt;p&gt;
                      The m&amp;times;n matrix A may not be square, the solution X is such that
                      ||A &amp;times; X - B|| is minimal.
                      &lt;/p&gt;                    
                    <param>
                        b Right-hand side of the equation A &times; X = B                        
                    </param>
                    <return>
                        a vector X that minimizes the two norm of A &times; X - B                        
                    </return>
                    <throws>
                        org.apache.commons.math3.exception.DimensionMismatchExceptionif the matrices dimensions do not match.                        
                    </throws>
                </javadoc>
                <method name="solve" type="RealVector" line="619">
                    <params>
                        <param name="b" type="RealVector"/>
                    </params>
                </method>
                <javadoc line="622">
                    Solve the linear equation A &amp;times; X = B in least square sense.
                      &lt;p&gt;
                      The m&amp;times;n matrix A may not be square, the solution X is such that
                      ||A &amp;times; X - B|| is minimal.
                      &lt;/p&gt;                    
                    <param>
                        b Right-hand side of the equation A &times; X = B                        
                    </param>
                    <return>
                        a matrix X that minimizes the two norm of A &times; X - B                        
                    </return>
                    <throws>
                        org.apache.commons.math3.exception.DimensionMismatchExceptionif the matrices dimensions do not match.                        
                    </throws>
                </javadoc>
                <method name="solve" type="RealMatrix" line="632">
                    <params>
                        <param name="b" type="RealMatrix"/>
                    </params>
                </method>
                <javadoc line="635">
                    Check if the decomposed matrix is non-singular.                    
                    <return>
                        {@code true} if the decomposed matrix is non-singular.                        
                    </return>
                </javadoc>
                <method name="isNonSingular" type="boolean" line="639"/>
                <javadoc line="642">
                    Get the pseudo-inverse of the decomposed matrix.                    
                    <return>
                        the inverse matrix.                        
                    </return>
                </javadoc>
                <method name="getInverse" type="RealMatrix" line="646"/>
            </class>
        </class>
    </source>