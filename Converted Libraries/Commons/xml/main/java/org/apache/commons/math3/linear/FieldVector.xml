<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <interface name="FieldVector">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="9">
                Interface defining a field-valued vector with basic algebraic operations.
                  &lt;p&gt;
                  vector element indexing is 0-based -- e.g., &lt;code&gt;getEntry(0)&lt;/code&gt;
                  returns the first element of the vector.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The various &lt;code&gt;mapXxx&lt;/code&gt; and &lt;code&gt;mapXxxToSelf&lt;/code&gt; methods operate
                  on vectors element-wise, i.e. they perform the same operation (adding a scalar,
                  applying a function ...) on each element in turn. The &lt;code&gt;mapXxx&lt;/code&gt;
                  versions create a new vector to hold the result and do not change the instance.
                  The &lt;code&gt;mapXxxToSelf&lt;/code&gt; versions use the instance itself to store the
                  results, so the instance is changed by these methods. In both cases, the result
                  vector is returned by the methods, this allows to use the &lt;i&gt;fluent API&lt;/i&gt;
                  style, like this:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  RealVector result = v.mapAddToSelf(3.0).mapTanToSelf().mapSquareToSelf();
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Note that as almost all operations on {@link FieldElement} throw {@link NullArgumentException} when operating on a null element, it is the responsibility
                  of &lt;code&gt;FieldVector&lt;/code&gt; implementations to make sure no null elements
                  are inserted into the vector. This must be done in all constructors and
                  all setters.
                  &lt;p&gt;                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <version>
                    $Id: FieldVector.java 1455233 2013-03-11 17:00:41Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="getField" type="Field<T>" line="40"/>
            <javadoc line="40">
                Get the type of field elements of the vector.                
                <return>
                    type of field elements of the vector                    
                </return>
            </javadoc>
            <method name="copy" type="FieldVector<T>" line="45"/>
            <javadoc line="45">
                Returns a (deep) copy of this.                
                <return>
                    vector copy                    
                </return>
            </javadoc>
            <method name="add" type="FieldVector<T>" line="50"/>
            <javadoc line="50">
                Compute the sum of {@code this} and {@code v}.                
                <param>
                    v vector to be added                    
                </param>
                <return>
                    {@code this + v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </throws>
            </javadoc>
            <method name="subtract" type="FieldVector<T>" line="57"/>
            <javadoc line="57">
                Compute {@code this} minus {@code v}.                
                <param>
                    v vector to be subtracted                    
                </param>
                <return>
                    {@code this - v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </throws>
            </javadoc>
            <method name="mapAdd" type="FieldVector<T>" line="64"/>
            <javadoc line="64">
                Map an addition operation to each entry.                
                <param>
                    d value to be added to each entry                    
                </param>
                <return>
                    {@code this + d}                    
                </return>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="mapAddToSelf" type="FieldVector<T>" line="71"/>
            <javadoc line="71">
                Map an addition operation to each entry.
                  &lt;p&gt;The instance &lt;strong&gt;is&lt;/strong&gt; changed by this method.&lt;/p&gt;                
                <param>
                    d value to be added to each entry                    
                </param>
                <return>
                    for convenience, return {@code this}                    
                </return>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="mapSubtract" type="FieldVector<T>" line="79"/>
            <javadoc line="79">
                Map a subtraction operation to each entry.                
                <param>
                    d value to be subtracted to each entry                    
                </param>
                <return>
                    {@code this - d}                    
                </return>
                <throws>
                    NullArgumentException if {@code d} is {@code null}                    
                </throws>
            </javadoc>
            <method name="mapSubtractToSelf" type="FieldVector<T>" line="86"/>
            <javadoc line="86">
                Map a subtraction operation to each entry.
                  &lt;p&gt;The instance &lt;strong&gt;is&lt;/strong&gt; changed by this method.&lt;/p&gt;                
                <param>
                    d value to be subtracted to each entry                    
                </param>
                <return>
                    for convenience, return {@code this}                    
                </return>
                <throws>
                    NullArgumentException if {@code d} is {@code null}                    
                </throws>
            </javadoc>
            <method name="mapMultiply" type="FieldVector<T>" line="94"/>
            <javadoc line="94">
                Map a multiplication operation to each entry.                
                <param>
                    d value to multiply all entries by                    
                </param>
                <return>
                    {@code this  d}                    
                </return>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="mapMultiplyToSelf" type="FieldVector<T>" line="101"/>
            <javadoc line="101">
                Map a multiplication operation to each entry.
                  &lt;p&gt;The instance &lt;strong&gt;is&lt;/strong&gt; changed by this method.&lt;/p&gt;                
                <param>
                    d value to multiply all entries by                    
                </param>
                <return>
                    for convenience, return {@code this}                    
                </return>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="mapDivide" type="FieldVector<T>" line="109"/>
            <javadoc line="109">
                Map a division operation to each entry.                
                <param>
                    d value to divide all entries by                    
                </param>
                <return>
                    {@code this / d}                    
                </return>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    MathArithmeticException if {@code d} is zero.                    
                </throws>
            </javadoc>
            <method name="mapDivideToSelf" type="FieldVector<T>" line="117"/>
            <javadoc line="117">
                Map a division operation to each entry.
                  &lt;p&gt;The instance &lt;strong&gt;is&lt;/strong&gt; changed by this method.&lt;/p&gt;                
                <param>
                    d value to divide all entries by                    
                </param>
                <return>
                    for convenience, return {@code this}                    
                </return>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    MathArithmeticException if {@code d} is zero.                    
                </throws>
            </javadoc>
            <method name="mapInv" type="FieldVector<T>" line="126"/>
            <javadoc line="126">
                Map the 1/x function to each entry.                
                <return>
                    a vector containing the result of applying the function to each entry.                    
                </return>
                <throws>
                    MathArithmeticException if one of the entries is zero.                    
                </throws>
            </javadoc>
            <method name="mapInvToSelf" type="FieldVector<T>" line="132"/>
            <javadoc line="132">
                Map the 1/x function to each entry.
                  &lt;p&gt;The instance &lt;strong&gt;is&lt;/strong&gt; changed by this method.&lt;/p&gt;                
                <return>
                    for convenience, return {@code this}                    
                </return>
                <throws>
                    MathArithmeticException if one of the entries is zero.                    
                </throws>
            </javadoc>
            <method name="ebeMultiply" type="FieldVector<T>" line="139"/>
            <javadoc line="139">
                Element-by-element multiplication.                
                <param>
                    v vector by which instance elements must be multiplied                    
                </param>
                <return>
                    a vector containing {@code this[i]  v[i]} for all {@code i}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </throws>
            </javadoc>
            <method name="ebeDivide" type="FieldVector<T>" line="146"/>
            <javadoc line="146">
                Element-by-element division.                
                <param>
                    v vector by which instance elements must be divided                    
                </param>
                <return>
                    a vector containing {@code this[i] / v[i]} for all {@code i}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </throws>
                <throws>
                    MathArithmeticException if one entry of {@code v} is zero.                    
                </throws>
            </javadoc>
            <method name="getData" type="T[]" line="154"/>
            <javadoc line="154">
                Returns vector entries as a T array.                
                <return>
                    T array of entries                    
                </return>
                <deprecated>
                    as of 3.1, to be removed in 4.0. Please use the {@link #toArray()} method instead.                    
                </deprecated>
            </javadoc>
            <method name="dotProduct" type="T" line="160"/>
            <javadoc line="160">
                Compute the dot product.                
                <param>
                    v vector with which dot product should be computed                    
                </param>
                <return>
                    the scalar dot product of {@code this} and {@code v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </throws>
            </javadoc>
            <method name="projection" type="FieldVector<T>" line="167"/>
            <javadoc line="167">
                Find the orthogonal projection of this vector onto another vector.                
                <param>
                    v vector onto which {@code this} must be projected                    
                </param>
                <return>
                    projection of {@code this} onto {@code v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as {@code this}                    
                </throws>
                <throws>
                    MathArithmeticException if {@code v} is the null vector.                    
                </throws>
            </javadoc>
            <method name="outerProduct" type="FieldMatrix<T>" line="175"/>
            <javadoc line="175">
                Compute the outer product.                
                <param>
                    v vector with which outer product should be computed                    
                </param>
                <return>
                    the matrix outer product between instance and v                    
                </return>
            </javadoc>
            <method name="getEntry" type="T" line="181"/>
            <javadoc line="181">
                Returns the entry in the specified index.                
                <param>
                    index Index location of entry to be fetched.                    
                </param>
                <return>
                    the vector entry at {@code index}.                    
                </return>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
                <see>
                    #setEntry(int,FieldElement)                    
                </see>
            </javadoc>
            <method name="setEntry" type="void" line="189"/>
            <javadoc line="189">
                Set a single element.                
                <param>
                    index element index.                    
                </param>
                <param>
                    value new value for the element.                    
                </param>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
                <see>
                    #getEntry(int)                    
                </see>
            </javadoc>
            <method name="getDimension" type="int" line="197"/>
            <javadoc line="197">
                Returns the size of the vector.                
                <return>
                    size                    
                </return>
            </javadoc>
            <method name="append" type="FieldVector<T>" line="202"/>
            <javadoc line="202">
                Construct a vector by appending a vector to this vector.                
                <param>
                    v vector to append to this one.                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="append" type="FieldVector<T>" line="208"/>
            <javadoc line="208">
                Construct a vector by appending a T to this vector.                
                <param>
                    d T to append.                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="getSubVector" type="FieldVector<T>" line="214"/>
            <javadoc line="214">
                Get a subvector from consecutive elements.                
                <param>
                    index index of first element.                    
                </param>
                <param>
                    n number of elements to be retrieved.                    
                </param>
                <return>
                    a vector containing n elements.                    
                </return>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
                <throws>
                    NotPositiveException if the number of elements if not positive.                    
                </throws>
            </javadoc>
            <method name="setSubVector" type="void" line="223"/>
            <javadoc line="223">
                Set a set of consecutive elements.                
                <param>
                    index index of first element to be set.                    
                </param>
                <param>
                    v vector containing the values to set.                    
                </param>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
            </javadoc>
            <method name="set" type="void" line="230"/>
            <javadoc line="230">
                Set all elements to a single value.                
                <param>
                    value single value to set for all elements                    
                </param>
            </javadoc>
            <method name="toArray" type="T[]" line="235"/>
            <javadoc line="235">
                Convert the vector to a T array.
                  &lt;p&gt;The array is independent from vector data, it&apos;s elements
                  are copied.&lt;/p&gt;                
                <return>
                    array containing a copy of vector elements                    
                </return>
            </javadoc>
        </interface>
    </source>