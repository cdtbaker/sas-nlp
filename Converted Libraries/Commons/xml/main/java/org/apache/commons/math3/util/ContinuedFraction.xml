<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="ContinuedFraction" line="5">
            <javadoc line="5">
                Provides a generic means to evaluate continued fractions.  Subclasses simply
                  provided the a and b coefficients to evaluate the continued fraction.
                  &lt;p&gt;
                  References:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/ContinuedFraction.html&quot;&gt;
                  Continued Fraction&lt;/a&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <version>
                    $Id: ContinuedFraction.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="18"/>
            <javadoc line="18">
                Maximum allowed numerical error.                
            </javadoc>
            <javadoc line="22">
                Default constructor.                
            </javadoc>
            <method name="ContinuedFraction" type="constructor" line="25"/>
            <method name="getA" type="double" line="28"/>
            <javadoc line="28">
                Access the n-th a coefficient of the continued fraction.  Since a can be
                  a function of the evaluation point, x, that is passed in as well.                
                <param>
                    n the coefficient index to retrieve.                    
                </param>
                <param>
                    x the evaluation point.                    
                </param>
                <return>
                    the n-th a coefficient.                    
                </return>
            </javadoc>
            <method name="getB" type="double" line="36"/>
            <javadoc line="36">
                Access the n-th b coefficient of the continued fraction.  Since b can be
                  a function of the evaluation point, x, that is passed in as well.                
                <param>
                    n the coefficient index to retrieve.                    
                </param>
                <param>
                    x the evaluation point.                    
                </param>
                <return>
                    the n-th b coefficient.                    
                </return>
            </javadoc>
            <javadoc line="44">
                Evaluates the continued fraction at the value x.                
                <param>
                    x the evaluation point.                    
                </param>
                <return>
                    the value of the continued fraction evaluated at x.                    
                </return>
                <throws>
                    ConvergenceException if the algorithm fails to converge.                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="50">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="53">
                Evaluates the continued fraction at the value x.                
                <param>
                    x the evaluation point.                    
                </param>
                <param>
                    epsilon maximum error allowed.                    
                </param>
                <return>
                    the value of the continued fraction evaluated at x.                    
                </return>
                <throws>
                    ConvergenceException if the algorithm fails to converge.                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="60">
                <params>
                    <param name="x" type="double"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="63">
                Evaluates the continued fraction at the value x.                
                <param>
                    x the evaluation point.                    
                </param>
                <param>
                    maxIterations maximum number of convergents                    
                </param>
                <return>
                    the value of the continued fraction evaluated at x.                    
                </return>
                <throws>
                    ConvergenceException if the algorithm fails to converge.                    
                </throws>
                <throws>
                    MaxCountExceededException if maximal number of iterations is reached                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="71">
                <params>
                    <param name="x" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                Evaluates the continued fraction at the value x.
                  &lt;p&gt;
                  The implementation of this method is based on the modified Lentz algorithm as described
                  on page 18 ff. in:
                  &lt;ul&gt;
                  &lt;li&gt;
                  I. J. Thompson,  A. R. Barnett. &quot;Coulomb and Bessel Functions of Complex Arguments and Order.&quot;
                  &lt;a target=&quot;_blank&quot; href=&quot;http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf&quot;&gt;
                  http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf&lt;/a&gt;
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;b&gt;Note:&lt;/b&gt; the implementation uses the terms a&lt;sub&gt;i&lt;/sub&gt; and b&lt;sub&gt;i&lt;/sub&gt; as defined in
                  &lt;a href=&quot;http://mathworld.wolfram.com/ContinuedFraction.html&quot;&gt;Continued Fraction @ MathWorld&lt;/a&gt;.
                  &lt;/p&gt;                
                <param>
                    x the evaluation point.                    
                </param>
                <param>
                    epsilon maximum error allowed.                    
                </param>
                <param>
                    maxIterations maximum number of convergents                    
                </param>
                <return>
                    the value of the continued fraction evaluated at x.                    
                </return>
                <throws>
                    ConvergenceException if the algorithm fails to converge.                    
                </throws>
                <throws>
                    MaxCountExceededException if maximal number of iterations is reached                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="96">
                <params>
                    <param name="x" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <declaration name="small" type="double" line="97"/>
                <declaration name="hPrev" type="double" line="98"/>
                <scope line="99"/>
                <declaration name="n" type="int" line="102"/>
                <declaration name="dPrev" type="double" line="103"/>
                <declaration name="cPrev" type="double" line="104"/>
                <declaration name="hN" type="double" line="105"/>
                <scope line="106">
                    <declaration name="a" type="double" line="107"/>
                    <declaration name="b" type="double" line="108"/>
                    <declaration name="dN" type="double" line="109"/>
                    <scope line="110"/>
                    <declaration name="cN" type="double" line="113"/>
                    <scope line="114"/>
                    <declaration name="deltaN" type="double" line="118"/>
                    <scope line="120"/>
                    <scope line="123"/>
                    <scope line="126"/>
                </scope>
                <scope line="134"/>
            </method>
        </class>
    </source>