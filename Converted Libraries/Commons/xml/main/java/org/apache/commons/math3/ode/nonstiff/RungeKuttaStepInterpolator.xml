<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="org.apache.commons.math3.ode.AbstractIntegrator"/>
        <import package="org.apache.commons.math3.ode.EquationsMapper"/>
        <import package="org.apache.commons.math3.ode.sampling.AbstractStepInterpolator"/>
        <class name="RungeKuttaStepInterpolator" line="28">
            <extends class="AbstractStepInterpolator"/>
            <javadoc line="28">
                This class represents an interpolator over the last step during an
                  ODE integration for Runge-Kutta and embedded Runge-Kutta integrators.                
                <see>
                    RungeKuttaIntegrator                    
                </see>
                <see>
                    EmbeddedRungeKuttaIntegrator                    
                </see>
                <version>
                    $Id: RungeKuttaStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="previousState" type="double[]" line="41"/>
            <javadoc line="41">
                Previous state.                
            </javadoc>
            <declaration name="yDotK" type="double[][]" line="44"/>
            <javadoc line="44">
                Slopes at the intermediate points                
            </javadoc>
            <declaration name="integrator" type="AbstractIntegrator" line="47"/>
            <javadoc line="47">
                Reference to the integrator.                
            </javadoc>
            <javadoc line="50">
                Simple constructor.
                  This constructor builds an instance that is not usable yet, the{@link #reinitialize} method should be called before using the
                  instance in order to initialize the internal arrays. This
                  constructor is used only in order to delay the initialization in
                  some cases. The {@link RungeKuttaIntegrator} and {@link EmbeddedRungeKuttaIntegrator} classes use the prototyping design
                  pattern to create the step interpolators by cloning an
                  uninitialized model and latter initializing the copy.                
            </javadoc>
            <method name="RungeKuttaStepInterpolator" type="constructor" line="60"/>
            <javadoc line="66">
                Copy constructor.
                  &lt;p&gt;The copied interpolator should have been finalized before the
                  copy, otherwise the copy will not be able to perform correctly any
                  interpolation and will throw a {@link NullPointerException}later. Since we don&apos;t want this constructor to throw the
                  exceptions finalization may involve and since we don&apos;t want this
                  method to modify the state of the copied interpolator,
                  finalization is &lt;strong&gt;not&lt;/strong&gt; done automatically, it
                  remains under user control.&lt;/p&gt;
                  &lt;p&gt;The copy is a deep copy: its arrays are separated from the
                  original arrays of the instance.&lt;/p&gt;                
                <param>
                    interpolator interpolator to copy from.                    
                </param>
            </javadoc>
            <method name="RungeKuttaStepInterpolator" type="constructor" line="83">
                <params>
                    <param name="interpolator" type="RungeKuttaStepInterpolator"/>
                </params>
                <comment line="102">
                    we cannot keep any reference to the equations in the copy
                     the interpolator should have been finalized before                    
                </comment>
                <scope line="87">
                    <scope line="92"/>
                </scope>
                <scope line="96"/>
            </method>
            <javadoc line="107">
                Reinitialize the instance
                  &lt;p&gt;Some Runge-Kutta integrators need fewer functions evaluations
                  than their counterpart step interpolators. So the interpolator
                  should perform the last evaluations they need by themselves. The{@link RungeKuttaIntegrator RungeKuttaIntegrator} and {@link EmbeddedRungeKuttaIntegrator EmbeddedRungeKuttaIntegrator}abstract classes call this method in order to let the step
                  interpolator perform the evaluations it needs. These evaluations
                  will be performed during the call to &lt;code&gt;doFinalize&lt;/code&gt; if
                  any, i.e. only if the step handler either calls the {@link AbstractStepInterpolator#finalizeStep finalizeStep} method or the{@link AbstractStepInterpolator#getInterpolatedStategetInterpolatedState} method (for an interpolator which needs a
                  finalization) or if it clones the step interpolator.&lt;/p&gt;                
                <param>
                    rkIntegrator integrator being used                    
                </param>
                <param>
                    y reference to the integrator array holding the state at
                      the end of the step                    
                </param>
                <param>
                    yDotArray reference to the integrator array holding all the
                      intermediate slopes                    
                </param>
                <param>
                    forward integration direction indicator                    
                </param>
                <param>
                    primaryMapper equations mapper for the primary equations set                    
                </param>
                <param>
                    secondaryMappers equations mappers for the secondary equations sets                    
                </param>
            </javadoc>
            <method name="reinitialize" type="void" line="133">
                <params>
                    <param name="rkIntegrator" type="AbstractIntegrator"/>
                    <param name="y" type="double[]"/>
                    <param name="yDotArray" type="double[][]"/>
                    <param name="forward" type="boolean"/>
                    <param name="primaryMapper" type="EquationsMapper"/>
                    <param name="secondaryMappers" type="EquationsMapper[]"/>
                </params>
            </method>
            <javadoc line="140">
                {@inheritDoc}                
            </javadoc>
            <method name="shift" type="void" line="142"/>
            <javadoc line="147">
                {@inheritDoc}                
            </javadoc>
            <method name="writeExternal" type="void" line="150">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
                <comment line="153">
                    save the state of the base class                    
                </comment>
                <comment line="156">
                    save the local attributes                    
                </comment>
                <comment line="170">
                    we do not save any reference to the equations                    
                </comment>
                <declaration name="n" type="int" line="156"/>
                <scope line="157"/>
                <declaration name="kMax" type="int" line="161"/>
                <scope line="163">
                    <scope line="164"/>
                </scope>
            </method>
            <javadoc line="173">
                {@inheritDoc}                
            </javadoc>
            <method name="readExternal" type="void" line="176">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
                <comment line="179">
                    read the base class                    
                </comment>
                <comment line="182">
                    read the local attributes                    
                </comment>
                <comment line="205">
                    we can now set the interpolated time and state                    
                </comment>
                <declaration name="t" type="double" line="179"/>
                <declaration name="n" type="int" line="182"/>
                <scope line="183"/>
                <scope line="185">
                    <scope line="187"/>
                </scope>
                <declaration name="kMax" type="int" line="192"/>
                <scope line="194">
                    <scope line="196"/>
                </scope>
                <scope line="203"/>
                <scope line="206"/>
            </method>
        </class>
    </source>