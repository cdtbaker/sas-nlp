<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <class name="NevilleInterpolator" line="7">
            <implements interface="UnivariateInterpolator"/>
            <implements interface="Serializable"/>
            <javadoc line="7">
                Implements the &lt;a href=&quot;http://mathworld.wolfram.com/NevillesAlgorithm.html&quot;&gt;
                  Neville&apos;s Algorithm&lt;/a&gt; for interpolation of real univariate functions. For
                  reference, see &lt;b&gt;Introduction to Numerical Analysis&lt;/b&gt;, ISBN 038795452X,
                  chapter 2.
                  &lt;p&gt;
                  The actual code of Neville&apos;s algorithm is in PolynomialFunctionLagrangeForm,
                  this class provides an easy-to-use interface to it.&lt;/p&gt;                
                <version>
                    $Id: NevilleInterpolator.java 1379904 2012-09-01 23:54:52Z erans $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="19"/>
            <javadoc line="19">
                serializable version identifier                
            </javadoc>
            <javadoc line="23">
                Computes an interpolating function for the data set.                
                <param>
                    x Interpolating points.                    
                </param>
                <param>
                    y Interpolating values.                    
                </param>
                <return>
                    a function which interpolates the data set                    
                </return>
                <throws>
                    DimensionMismatchException if the array lengths are different.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the number of points is less than 2.                    
                </throws>
                <throws>
                    NonMonotonicSequenceException if two abscissae have the same
                      value.                    
                </throws>
            </javadoc>
            <method name="interpolate" type="PolynomialFunctionLagrangeForm" line="33">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
        </class>
    </source>