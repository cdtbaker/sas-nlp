<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.IterationManager"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="PreconditionedIterativeLinearSolver" line="25">
            <extends class="IterativeLinearSolver"/>
            <javadoc line="25">
                &lt;p&gt;
                  This abstract class defines preconditioned iterative solvers. When A is
                  ill-conditioned, instead of solving system A &amp;middot; x = b directly, it is
                  preferable to solve either
                  &lt;center&gt;
                  (M &amp;middot; A) &amp;middot; x = M &amp;middot; b
                  &lt;/center&gt;
                  (left preconditioning), or
                  &lt;center&gt;
                  (A &amp;middot; M) &amp;middot; y = b, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;followed by
                  M &amp;middot; y = x
                  &lt;/center&gt;
                  (right preconditioning), where M approximates in some way A&lt;sup&gt;-1&lt;/sup&gt;,
                  while matrix-vector products of the type M &amp;middot; y remain comparatively
                  easy to compute. In this library, M (not M&lt;sup&gt;-1&lt;/sup&gt;!) is called the
                  &lt;em&gt;preconditionner&lt;/em&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Concrete implementations of this abstract class must be provided with the
                  preconditioner M, as a {@link RealLinearOperator}.
                  &lt;/p&gt;                
                <version>
                    $Id: PreconditionedIterativeLinearSolver.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <javadoc line="54">
                Creates a new instance of this class, with default iteration manager.                
                <param>
                    maxIterations the maximum number of iterations                    
                </param>
            </javadoc>
            <method name="PreconditionedIterativeLinearSolver" type="constructor" line="59">
                <params>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="63">
                Creates a new instance of this class, with custom iteration manager.                
                <param>
                    manager the custom iteration manager                    
                </param>
                <throws>
                    NullArgumentException if {@code manager} is {@code null}                    
                </throws>
            </javadoc>
            <method name="PreconditionedIterativeLinearSolver" type="constructor" line="70">
                <params>
                    <param name="manager" type="IterationManager"/>
                </params>
            </method>
            <javadoc line="74">
                Returns an estimate of the solution to the linear system A &amp;middot; x =
                  b.                
                <param>
                    a the linear operator A of the system                    
                </param>
                <param>
                    m the preconditioner, M (can be {@code null})                    
                </param>
                <param>
                    b the right-hand side vector                    
                </param>
                <param>
                    x0 the initial guess of the solution                    
                </param>
                <return>
                    a new vector containing the solution                    
                </return>
                <throws>
                    NullArgumentException if one of the parameters is {@code null}                    
                </throws>
                <throws>
                    NonSquareOperatorException if {@code a} or {@code m} is not
                      square                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code m}, {@code b} or{@code x0} have dimensions inconsistent with {@code a}                    
                </throws>
                <throws>
                    MaxCountExceededException at exhaustion of the iteration count,
                      unless a custom{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}has been set at construction of the {@link IterationManager}                    
                </throws>
            </javadoc>
            <method name="solve" type="RealVector" line="96">
                <params>
                    <param name="a" type="RealLinearOperator"/>
                    <param name="m" type="RealLinearOperator"/>
                    <param name="b" type="RealVector"/>
                    <param name="x0" type="RealVector"/>
                </params>
            </method>
            <javadoc line="101">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="RealVector" line="105">
                <params>
                    <param name="a" type="RealLinearOperator"/>
                    <param name="b" type="RealVector"/>
                </params>
                <declaration name="x" type="RealVector" line="107"/>
            </method>
            <javadoc line="112">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="RealVector" line="117">
                <params>
                    <param name="a" type="RealLinearOperator"/>
                    <param name="b" type="RealVector"/>
                    <param name="x0" type="RealVector"/>
                </params>
            </method>
            <javadoc line="122">
                Performs all dimension checks on the parameters of{@link #solve(RealLinearOperator,RealLinearOperator,RealVector,RealVector) solve}and{@link #solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector) solveInPlace},
                  and throws an exception if one of the checks fails.                
                <param>
                    a the linear operator A of the system                    
                </param>
                <param>
                    m the preconditioner, M (can be {@code null})                    
                </param>
                <param>
                    b the right-hand side vector                    
                </param>
                <param>
                    x0 the initial guess of the solution                    
                </param>
                <throws>
                    NullArgumentException if one of the parameters is {@code null}                    
                </throws>
                <throws>
                    NonSquareOperatorException if {@code a} or {@code m} is not
                      square                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code m}, {@code b} or{@code x0} have dimensions inconsistent with {@code a}                    
                </throws>
            </javadoc>
            <method name="checkParameters" type="void" line="142">
                <params>
                    <param name="a" type="RealLinearOperator"/>
                    <param name="m" type="RealLinearOperator"/>
                    <param name="b" type="RealVector"/>
                    <param name="x0" type="RealVector"/>
                </params>
                <scope line="144">
                    <scope line="145"/>
                    <scope line="149"/>
                </scope>
            </method>
            <javadoc line="156">
                Returns an estimate of the solution to the linear system A &amp;middot; x =
                  b.                
                <param>
                    a the linear operator A of the system                    
                </param>
                <param>
                    m the preconditioner, M (can be {@code null})                    
                </param>
                <param>
                    b the right-hand side vector                    
                </param>
                <return>
                    a new vector containing the solution                    
                </return>
                <throws>
                    NullArgumentException if one of the parameters is {@code null}                    
                </throws>
                <throws>
                    NonSquareOperatorException if {@code a} or {@code m} is not
                      square                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code m} or {@code b} have
                      dimensions inconsistent with {@code a}                    
                </throws>
                <throws>
                    MaxCountExceededException at exhaustion of the iteration count,
                      unless a custom{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}has been set at construction of the {@link IterationManager}                    
                </throws>
            </javadoc>
            <method name="solve" type="RealVector" line="176">
                <params>
                    <param name="a" type="RealLinearOperator"/>
                    <param name="m" type="RealLinearOperator"/>
                    <param name="b" type="RealVector"/>
                </params>
                <declaration name="x" type="RealVector" line="178"/>
            </method>
            <method name="solveInPlace" type="RealVector" line="182"/>
            <javadoc line="182">
                Returns an estimate of the solution to the linear system A &amp;middot; x =
                  b. The solution is computed in-place (initial guess is modified).                
                <param>
                    a the linear operator A of the system                    
                </param>
                <param>
                    m the preconditioner, M (can be {@code null})                    
                </param>
                <param>
                    b the right-hand side vector                    
                </param>
                <param>
                    x0 the initial guess of the solution                    
                </param>
                <return>
                    a reference to {@code x0} (shallow copy) updated with the
                      solution                    
                </return>
                <throws>
                    NullArgumentException if one of the parameters is {@code null}                    
                </throws>
                <throws>
                    NonSquareOperatorException if {@code a} or {@code m} is not
                      square                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code m}, {@code b} or{@code x0} have dimensions inconsistent with {@code a}                    
                </throws>
                <throws>
                    MaxCountExceededException at exhaustion of the iteration count,
                      unless a custom{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}has been set at construction of the {@link IterationManager}                    
                </throws>
            </javadoc>
            <javadoc line="207">
                {@inheritDoc}                
            </javadoc>
            <method name="solveInPlace" type="RealVector" line="212">
                <params>
                    <param name="a" type="RealLinearOperator"/>
                    <param name="b" type="RealVector"/>
                    <param name="x0" type="RealVector"/>
                </params>
            </method>
        </class>
    </source>