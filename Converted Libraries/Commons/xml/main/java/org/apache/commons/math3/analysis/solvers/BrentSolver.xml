<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="BrentSolver" line="26">
            <extends class="AbstractUnivariateSolver"/>
            <javadoc line="26">
                This class implements the &lt;a href=&quot;http://mathworld.wolfram.com/BrentsMethod.html&quot;&gt;
                  Brent algorithm&lt;/a&gt; for finding zeros of real univariate functions.
                  The function should be continuous but not necessarily smooth.
                  The {@code solve} method returns a zero {@code x} of the function {@code f}in the given interval {@code [a, b]} to within a tolerance{@code 6 eps abs(x) + t} where {@code eps} is the relative accuracy and{@code t} is the absolute accuracy.
                  The given interval must bracket the root.                
                <version>
                    $Id: BrentSolver.java 1379560 2012-08-31 19:40:30Z erans $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_ABSOLUTE_ACCURACY" type="double" line="40"/>
            <javadoc line="40">
                Default absolute accuracy.                
            </javadoc>
            <javadoc line="43">
                Construct a solver with default accuracy (1e-6).                
            </javadoc>
            <method name="BrentSolver" type="constructor" line="46"/>
            <javadoc line="49">
                Construct a solver.                
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
            </javadoc>
            <method name="BrentSolver" type="constructor" line="54">
                <params>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="57">
                Construct a solver.                
                <param>
                    relativeAccuracy Relative accuracy.                    
                </param>
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
            </javadoc>
            <method name="BrentSolver" type="constructor" line="64">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="67">
                Construct a solver.                
                <param>
                    relativeAccuracy Relative accuracy.                    
                </param>
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
                <param>
                    functionValueAccuracy Function value accuracy.                    
                </param>
            </javadoc>
            <method name="BrentSolver" type="constructor" line="76">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="functionValueAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="80">
                {@inheritDoc}                
            </javadoc>
            <method name="doSolve" type="double" line="87">
                <comment line="96">
                    Return the initial guess if it is good enough.                    
                </comment>
                <comment line="102">
                    Return the first endpoint if it is good enough.                    
                </comment>
                <comment line="108">
                    Reduce interval if min and initial bracket the root.                    
                </comment>
                <comment line="113">
                    Return the second endpoint if it is good enough.                    
                </comment>
                <comment line="119">
                    Reduce interval if initial and max bracket the root.                    
                </comment>
                <declaration name="min" type="double" line="88"/>
                <declaration name="max" type="double" line="89"/>
                <declaration name="initial" type="double" line="90"/>
                <declaration name="functionValueAccuracy" type="double" line="91"/>
                <declaration name="yInitial" type="double" line="96"/>
                <scope line="97"/>
                <declaration name="yMin" type="double" line="102"/>
                <scope line="103"/>
                <scope line="108"/>
                <declaration name="yMax" type="double" line="113"/>
                <scope line="114"/>
                <scope line="119"/>
            </method>
            <javadoc line="126">
                Search for a zero inside the provided interval.
                  This implementation is based on the algorithm described at page 58 of
                  the book
                  &lt;quote&gt;
                  &lt;b&gt;Algorithms for Minimization Without Derivatives&lt;/b&gt;
                  &lt;it&gt;Richard P. Brent&lt;/it&gt;
                  Dover 0-486-41998-3
                  &lt;/quote&gt;                
                <param>
                    lo Lower bound of the search interval.                    
                </param>
                <param>
                    hi Higher bound of the search interval.                    
                </param>
                <param>
                    fLo Function value at the lower bound of the search interval.                    
                </param>
                <param>
                    fHi Function value at the higher bound of the search interval.                    
                </param>
                <return>
                    the value where the function is zero.                    
                </return>
            </javadoc>
            <method name="brent" type="double" line="143">
                <params>
                    <param name="lo" type="double"/>
                    <param name="hi" type="double"/>
                    <param name="fLo" type="double"/>
                    <param name="fHi" type="double"/>
                </params>
                <comment line="176">
                    Force bisection.                    
                </comment>
                <comment line="183">
                    The equality test (a == c) is intentional,
                     it is part of the original Brent&apos;s method and
                     it should NOT be replaced by proximity test.                    
                </comment>
                <comment line="187">
                    Linear interpolation.                    
                </comment>
                <comment line="191">
                    Inverse quadratic interpolation.                    
                </comment>
                <comment line="206">
                    Inverse quadratic interpolation gives a value
                     in the wrong direction, or progress is slow.
                     Fall back to bisection.                    
                </comment>
                <declaration name="a" type="double" line="144"/>
                <declaration name="fa" type="double" line="145"/>
                <declaration name="b" type="double" line="146"/>
                <declaration name="fb" type="double" line="147"/>
                <declaration name="c" type="double" line="148"/>
                <declaration name="fc" type="double" line="149"/>
                <declaration name="d" type="double" line="150"/>
                <declaration name="e" type="double" line="151"/>
                <declaration name="t" type="double" line="153"/>
                <declaration name="eps" type="double" line="154"/>
                <scope line="156">
                    <scope line="157"/>
                    <declaration name="tol" type="double" line="166"/>
                    <declaration name="m" type="double" line="167"/>
                    <scope line="170"/>
                    <scope line="174"/>
                    <scope line="178">
                        <declaration name="s" type="double" line="179"/>
                        <declaration name="p" type="double" line="180"/>
                        <declaration name="q" type="double" line="181"/>
                        <scope line="185"/>
                        <scope line="189">
                            <declaration name="r" type="double" line="192"/>
                        </scope>
                        <scope line="196"/>
                        <scope line="198"/>
                        <scope line="204"/>
                        <scope line="210"/>
                    </scope>
                    <scope line="217"/>
                    <scope line="219"/>
                    <scope line="221"/>
                    <scope line="226"/>
                </scope>
            </method>
        </class>
    </source>