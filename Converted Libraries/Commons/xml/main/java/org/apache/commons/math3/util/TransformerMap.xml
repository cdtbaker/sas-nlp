<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.io.Serializable"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <class name="TransformerMap" line="8">
            <implements interface="NumberTransformer"/>
            <implements interface="Serializable"/>
            <javadoc line="8">
                This TansformerMap automates the transformation of mixed object types.
                  It provides a means to set NumberTransformers that will be selected
                  based on the Class of the object handed to the Maps
                  &lt;code&gt;double transform(Object o)&lt;/code&gt; method.                
                <version>
                    $Id: TransformerMap.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="16"/>
            <javadoc line="16">
                Serializable version identifier                
            </javadoc>
            <declaration name="defaultTransformer" type="NumberTransformer" line="20"/>
            <javadoc line="20">
                A default Number Transformer for Numbers and numeric Strings.                
            </javadoc>
            <declaration name="map" type="Map&lt;Class&lt;?&gt;,NumberTransformer&gt;" line="24"/>
            <javadoc line="24">
                The internal Map.                
            </javadoc>
            <javadoc line="28">
                Build a map containing only the default transformer.                
            </javadoc>
            <method name="TransformerMap" type="constructor" line="31"/>
            <javadoc line="35">
                Tests if a Class is present in the TransformerMap.                
                <param>
                    key Class to check                    
                </param>
                <return>
                    true|false                    
                </return>
            </javadoc>
            <method name="containsClass" type="boolean" line="40">
                <params>
                    <param name="key" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="43">
                Tests if a NumberTransformer is present in the TransformerMap.                
                <param>
                    value NumberTransformer to check                    
                </param>
                <return>
                    true|false                    
                </return>
            </javadoc>
            <method name="containsTransformer" type="boolean" line="48">
                <params>
                    <param name="value" type="NumberTransformer"/>
                </params>
            </method>
            <javadoc line="51">
                Returns the Transformer that is mapped to a class
                  if mapping is not present, this returns null.                
                <param>
                    key The Class of the object                    
                </param>
                <return>
                    the mapped NumberTransformer or null.                    
                </return>
            </javadoc>
            <method name="getTransformer" type="NumberTransformer" line="57">
                <params>
                    <param name="key" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="60">
                Sets a Class to Transformer Mapping in the Map. If
                  the Class is already present, this overwrites that
                  mapping.                
                <param>
                    key The Class                    
                </param>
                <param>
                    transformer The NumberTransformer                    
                </param>
                <return>
                    the replaced transformer if one is present                    
                </return>
            </javadoc>
            <method name="putTransformer" type="NumberTransformer" line="68">
                <params>
                    <param name="key" type="Class<?>"/>
                    <param name="transformer" type="NumberTransformer"/>
                </params>
            </method>
            <javadoc line="71">
                Removes a Class to Transformer Mapping in the Map.                
                <param>
                    key The Class                    
                </param>
                <return>
                    the removed transformer if one is present or
                      null if none was present.                    
                </return>
            </javadoc>
            <method name="removeTransformer" type="NumberTransformer" line="77">
                <params>
                    <param name="key" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="80">
                Clears all the Class to Transformer mappings.                
            </javadoc>
            <method name="clear" type="void" line="83"/>
            <javadoc line="86">
                Returns the Set of Classes used as keys in the map.                
                <return>
                    Set of Classes                    
                </return>
            </javadoc>
            <method name="classes" type="Set<Class<?>>" line="90"/>
            <javadoc line="93">
                Returns the Set of NumberTransformers used as values
                  in the map.                
                <return>
                    Set of NumberTransformers                    
                </return>
            </javadoc>
            <method name="transformers" type="Collection<NumberTransformer>" line="98"/>
            <javadoc line="101">
                Attempts to transform the Object against the map of
                  NumberTransformers. Otherwise it returns Double.NaN.                
                <param>
                    o the Object to be transformed.                    
                </param>
                <return>
                    the double value of the Object.                    
                </return>
                <throws>
                    MathIllegalArgumentException if the Object can not be
                      transformed into a Double.                    
                </throws>
                <see>
                    org.apache.commons.math3.util.NumberTransformer#transform(java.lang.Object)                    
                </see>
            </javadoc>
            <method name="transform" type="double" line="110">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="value" type="double" line="111"/>
                <scope line="112"/>
                <scope line="115">
                    <declaration name="trans" type="NumberTransformer" line="116"/>
                    <scope line="117"/>
                </scope>
            </method>
            <javadoc line="123">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="126">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="127"/>
                <scope line="130">
                    <declaration name="rhs" type="TransformerMap" line="131"/>
                    <scope line="132"/>
                    <scope line="135"/>
                    <scope line="138">
                        <scope line="139"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="147">
                {@inheritDoc}                
            </javadoc>
            <method name="hashCode" type="int" line="150">
                <declaration name="hash" type="int" line="151"/>
                <scope line="152"/>
            </method>
        </class>
    </source>