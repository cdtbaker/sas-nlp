<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="org.apache.commons.math3.fraction.BigFraction"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="PolynomialsUtils" line="9">
            <javadoc line="9">
                A collection of static methods that operate on or return polynomials.                
                <version>
                    $Id: PolynomialsUtils.java 1364387 2012-07-22 18:14:11Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="CHEBYSHEV_COEFFICIENTS" type="List&lt;BigFraction&gt;" line="15"/>
            <javadoc line="15">
                Coefficients for Chebyshev polynomials.                
            </javadoc>
            <declaration name="HERMITE_COEFFICIENTS" type="List&lt;BigFraction&gt;" line="19"/>
            <javadoc line="19">
                Coefficients for Hermite polynomials.                
            </javadoc>
            <declaration name="LAGUERRE_COEFFICIENTS" type="List&lt;BigFraction&gt;" line="23"/>
            <javadoc line="23">
                Coefficients for Laguerre polynomials.                
            </javadoc>
            <declaration name="LEGENDRE_COEFFICIENTS" type="List&lt;BigFraction&gt;" line="27"/>
            <javadoc line="27">
                Coefficients for Legendre polynomials.                
            </javadoc>
            <declaration name="JACOBI_COEFFICIENTS" type="Map&lt;JacobiKey,List&lt;BigFraction&gt;&gt;" line="31"/>
            <javadoc line="31">
                Coefficients for Jacobi polynomials.                
            </javadoc>
            <scope line="35"/>
            <javadoc line="54">
                Private constructor, to prevent instantiation.                
            </javadoc>
            <method name="PolynomialsUtils" type="constructor" line="57"/>
            <javadoc line="59">
                Create a Chebyshev polynomial of the first kind.
                  &lt;p&gt;&lt;a href=&quot;http://mathworld.wolfram.com/ChebyshevPolynomialoftheFirstKind.html&quot;&gt;Chebyshev
                  polynomials of the first kind&lt;/a&gt; are orthogonal polynomials.
                  They can be defined by the following recurrence relations:
                  &lt;pre&gt;
                  T&lt;sub&gt;0&lt;/sub&gt;(X)   = 1
                  T&lt;sub&gt;1&lt;/sub&gt;(X)   = X
                  T&lt;sub&gt;k+1&lt;/sub&gt;(X) = 2X T&lt;sub&gt;k&lt;/sub&gt;(X) - T&lt;sub&gt;k-1&lt;/sub&gt;(X)
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    degree degree of the polynomial                    
                </param>
                <return>
                    Chebyshev polynomial of specified degree                    
                </return>
            </javadoc>
            <method name="createChebyshevPolynomial" type="PolynomialFunction" line="72">
                <params>
                    <param name="degree" type="int"/>
                </params>
                <anonymous_class line="73">
                    <declaration name="coeffs" type="BigFraction[]" line="74"/>
                    <javadoc line="75">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="generate" type="BigFraction[]" line="78">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="84">
                Create a Hermite polynomial.
                  &lt;p&gt;&lt;a href=&quot;http://mathworld.wolfram.com/HermitePolynomial.html&quot;&gt;Hermite
                  polynomials&lt;/a&gt; are orthogonal polynomials.
                  They can be defined by the following recurrence relations:
                  &lt;pre&gt;
                  H&lt;sub&gt;0&lt;/sub&gt;(X)   = 1
                  H&lt;sub&gt;1&lt;/sub&gt;(X)   = 2X
                  H&lt;sub&gt;k+1&lt;/sub&gt;(X) = 2X H&lt;sub&gt;k&lt;/sub&gt;(X) - 2k H&lt;sub&gt;k-1&lt;/sub&gt;(X)
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    degree degree of the polynomial                    
                </param>
                <return>
                    Hermite polynomial of specified degree                    
                </return>
            </javadoc>
            <method name="createHermitePolynomial" type="PolynomialFunction" line="97">
                <params>
                    <param name="degree" type="int"/>
                </params>
                <anonymous_class line="98">
                    <javadoc line="99">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="generate" type="BigFraction[]" line="102">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="108">
                Create a Laguerre polynomial.
                  &lt;p&gt;&lt;a href=&quot;http://mathworld.wolfram.com/LaguerrePolynomial.html&quot;&gt;Laguerre
                  polynomials&lt;/a&gt; are orthogonal polynomials.
                  They can be defined by the following recurrence relations:
                  &lt;pre&gt;
                  L&lt;sub&gt;0&lt;/sub&gt;(X)   = 1
                  L&lt;sub&gt;1&lt;/sub&gt;(X)   = 1 - X
                  (k+1) L&lt;sub&gt;k+1&lt;/sub&gt;(X) = (2k + 1 - X) L&lt;sub&gt;k&lt;/sub&gt;(X) - k L&lt;sub&gt;k-1&lt;/sub&gt;(X)
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    degree degree of the polynomial                    
                </param>
                <return>
                    Laguerre polynomial of specified degree                    
                </return>
            </javadoc>
            <method name="createLaguerrePolynomial" type="PolynomialFunction" line="121">
                <params>
                    <param name="degree" type="int"/>
                </params>
                <anonymous_class line="122">
                    <javadoc line="123">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="generate" type="BigFraction[]" line="126">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                        <declaration name="kP1" type="int" line="127"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="133">
                Create a Legendre polynomial.
                  &lt;p&gt;&lt;a href=&quot;http://mathworld.wolfram.com/LegendrePolynomial.html&quot;&gt;Legendre
                  polynomials&lt;/a&gt; are orthogonal polynomials.
                  They can be defined by the following recurrence relations:
                  &lt;pre&gt;
                  P&lt;sub&gt;0&lt;/sub&gt;(X)   = 1
                  P&lt;sub&gt;1&lt;/sub&gt;(X)   = X
                  (k+1) P&lt;sub&gt;k+1&lt;/sub&gt;(X) = (2k+1) X P&lt;sub&gt;k&lt;/sub&gt;(X) - k P&lt;sub&gt;k-1&lt;/sub&gt;(X)
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    degree degree of the polynomial                    
                </param>
                <return>
                    Legendre polynomial of specified degree                    
                </return>
            </javadoc>
            <method name="createLegendrePolynomial" type="PolynomialFunction" line="146">
                <params>
                    <param name="degree" type="int"/>
                </params>
                <anonymous_class line="147">
                    <javadoc line="148">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="generate" type="BigFraction[]" line="151">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                        <declaration name="kP1" type="int" line="152"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="158">
                Create a Jacobi polynomial.
                  &lt;p&gt;&lt;a href=&quot;http://mathworld.wolfram.com/JacobiPolynomial.html&quot;&gt;Jacobi
                  polynomials&lt;/a&gt; are orthogonal polynomials.
                  They can be defined by the following recurrence relations:
                  &lt;pre&gt;
                  P&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;vw&lt;/sup&gt;(X)   = 1
                  P&lt;sub&gt;-1&lt;/sub&gt;&lt;sup&gt;vw&lt;/sup&gt;(X)  = 0
                  2k(k + v + w)(2k + v + w - 2) P&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;vw&lt;/sup&gt;(X) =
                  (2k + v + w - 1)[(2k + v + w)(2k + v + w - 2) X + v&lt;sup&gt;2&lt;/sup&gt; - w&lt;sup&gt;2&lt;/sup&gt;] P&lt;sub&gt;k-1&lt;/sub&gt;&lt;sup&gt;vw&lt;/sup&gt;(X)
                  - 2(k + v - 1)(k + w - 1)(2k + v + w) P&lt;sub&gt;k-2&lt;/sub&gt;&lt;sup&gt;vw&lt;/sup&gt;(X)
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    degree degree of the polynomial                    
                </param>
                <param>
                    v first exponent                    
                </param>
                <param>
                    w second exponent                    
                </param>
                <return>
                    Jacobi polynomial of specified degree                    
                </return>
            </javadoc>
            <method name="createJacobiPolynomial" type="PolynomialFunction" line="175">
                <params>
                    <param name="degree" type="int"/>
                    <param name="v" type="int"/>
                    <param name="w" type="int"/>
                </params>
                <declaration name="key" type="JacobiKey" line="176"/>
                <scope line="177">
                    <declaration name="list" type="List&lt;BigFraction&gt;" line="178"/>
                </scope>
                <anonymous_class line="184">
                    <javadoc line="185">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="generate" type="BigFraction[]" line="188">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                        <declaration name="kvw" type="int" line="190"/>
                        <declaration name="twoKvw" type="int" line="191"/>
                        <declaration name="twoKvwM1" type="int" line="192"/>
                        <declaration name="twoKvwM2" type="int" line="193"/>
                        <declaration name="den" type="int" line="194"/>
                    </method>
                </anonymous_class>
            </method>
            <class name="JacobiKey" line="200">
                <javadoc line="200">
                    Inner class for Jacobi polynomials keys.                    
                </javadoc>
                <declaration name="v" type="int" line="204"/>
                <javadoc line="204">
                    First exponent.                    
                </javadoc>
                <declaration name="w" type="int" line="208"/>
                <javadoc line="208">
                    Second exponent.                    
                </javadoc>
                <javadoc line="212">
                    Simple constructor.                    
                    <param>
                        v first exponent                        
                    </param>
                    <param>
                        w second exponent                        
                    </param>
                </javadoc>
                <method name="JacobiKey" type="constructor" line="217">
                    <params>
                        <param name="v" type="int"/>
                        <param name="w" type="int"/>
                    </params>
                </method>
                <javadoc line="221">
                    Get hash code.                    
                    <return>
                        hash code                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="225"/>
                <javadoc line="228">
                    Check if the instance represent the same key as another instance.                    
                    <param>
                        key other key                        
                    </param>
                    <return>
                        true if the instance and the other key refer to the same polynomial                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="233">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="234"/>
                    <declaration name="otherK" type="JacobiKey" line="237"/>
                </method>
            </class>
            <javadoc line="241">
                Compute the coefficients of the polynomial &lt;code&gt;P&lt;sub&gt;s&lt;/sub&gt;(x)&lt;/code&gt;
                  whose values at point {@code x} will be the same as the those from the
                  original polynomial &lt;code&gt;P(x)&lt;/code&gt; when computed at {@code x + shift}.
                  Thus, if &lt;code&gt;P(x) = &amp;Sigma;&lt;sub&gt;i&lt;/sub&gt; a&lt;sub&gt;i&lt;/sub&gt; x&lt;sup&gt;i&lt;/sup&gt;&lt;/code&gt;,
                  then
                  &lt;pre&gt;
                  &lt;table&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;code&gt;P&lt;sub&gt;s&lt;/sub&gt;(x)&lt;/td&gt;
                  &lt;td&gt;= &amp;Sigma;&lt;sub&gt;i&lt;/sub&gt; b&lt;sub&gt;i&lt;/sub&gt; x&lt;sup&gt;i&lt;/sup&gt;&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td&gt;= &amp;Sigma;&lt;sub&gt;i&lt;/sub&gt; a&lt;sub&gt;i&lt;/sub&gt; (x + shift)&lt;sup&gt;i&lt;/sup&gt;&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/pre&gt;                
                <param>
                    coefficients Coefficients of the original polynomial.                    
                </param>
                <param>
                    shift Shift value.                    
                </param>
                <return>
                    the coefficients <code>b<sub>i</sub></code> of the shifted
                      polynomial.                    
                </return>
            </javadoc>
            <method name="shift" type="double[]" line="264">
                <params>
                    <param name="coefficients" type="double[]"/>
                    <param name="shift" type="double"/>
                </params>
                <declaration name="dp1" type="int" line="265"/>
                <declaration name="newCoefficients" type="double[]" line="266"/>
                <declaration name="coeff" type="int[][]" line="267"/>
                <scope line="268">
                    <scope line="269"/>
                </scope>
                <scope line="273"/>
                <declaration name="d" type="int" line="276"/>
                <scope line="277">
                    <scope line="278"/>
                </scope>
            </method>
            <javadoc line="284">
                Get the coefficients array for a given degree.                
                <param>
                    degree degree of the polynomial                    
                </param>
                <param>
                    coefficients list where the computed coefficients are stored                    
                </param>
                <param>
                    generator recurrence coefficients generator                    
                </param>
                <return>
                    coefficients array                    
                </return>
            </javadoc>
            <method name="buildPolynomial" type="PolynomialFunction" line="291">
                <params>
                    <param name="degree" type="int"/>
                    <param name="coefficients" type="List<BigFraction>"/>
                    <param name="generator" type="RecurrenceCoefficientsGenerator"/>
                </params>
                <declaration name="maxDegree" type="int" line="292"/>
                <scope line="293">
                    <scope line="294"/>
                </scope>
                <declaration name="start" type="int" line="298"/>
                <declaration name="a" type="double[]" line="299"/>
                <scope line="300"/>
            </method>
            <javadoc line="305">
                Compute polynomial coefficients up to a given degree.                
                <param>
                    degree maximal degree                    
                </param>
                <param>
                    maxDegree current maximal degree                    
                </param>
                <param>
                    generator recurrence coefficients generator                    
                </param>
                <param>
                    coefficients list where the computed coefficients should be appended                    
                </param>
            </javadoc>
            <method name="computeUpToDegree" type="void" line="312">
                <params>
                    <param name="degree" type="int"/>
                    <param name="maxDegree" type="int"/>
                    <param name="generator" type="RecurrenceCoefficientsGenerator"/>
                    <param name="coefficients" type="List<BigFraction>"/>
                </params>
                <declaration name="startK" type="int" line="313"/>
                <scope line="314">
                    <declaration name="startKm1" type="int" line="315"/>
                    <declaration name="ai" type="BigFraction[]" line="317"/>
                    <declaration name="ck" type="BigFraction" line="318"/>
                    <declaration name="ckm1" type="BigFraction" line="319"/>
                    <scope line="321">
                        <declaration name="ckPrev" type="BigFraction" line="322"/>
                    </scope>
                    <declaration name="ckPrev" type="BigFraction" line="327"/>
                </scope>
            </method>
            <interface name="RecurrenceCoefficientsGenerator">
                <javadoc line="333">
                    Interface for recurrence coefficients generation.                    
                </javadoc>
                <method name="generate" type="BigFraction[]" line="337"/>
                <javadoc line="337">
                    Generate recurrence coefficients.                    
                    <param>
                        k highest degree of the polynomials used in the recurrence                        
                    </param>
                    <return>
                        an array of three coefficients such that
                          P<sub>k+1</sub>(X) = (a[0] + a[1] X) P<sub>k</sub>(X) - a[2] P<sub>k-1</sub>(X)                        
                    </return>
                </javadoc>
            </interface>
        </class>
    </source>