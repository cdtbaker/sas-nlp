<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="org.apache.commons.math3.fraction.BigFraction"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="PolynomialsUtils" line="28">
            <javadoc line="28">
                A collection of static methods that operate on or return polynomials.                
                <version>
                    $Id: PolynomialsUtils.java 1364387 2012-07-22 18:14:11Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="CHEBYSHEV_COEFFICIENTS" type="List&lt;BigFraction&gt;" line="36"/>
            <javadoc line="36">
                Coefficients for Chebyshev polynomials.                
            </javadoc>
            <declaration name="HERMITE_COEFFICIENTS" type="List&lt;BigFraction&gt;" line="39"/>
            <javadoc line="39">
                Coefficients for Hermite polynomials.                
            </javadoc>
            <declaration name="LAGUERRE_COEFFICIENTS" type="List&lt;BigFraction&gt;" line="42"/>
            <javadoc line="42">
                Coefficients for Laguerre polynomials.                
            </javadoc>
            <declaration name="LEGENDRE_COEFFICIENTS" type="List&lt;BigFraction&gt;" line="45"/>
            <javadoc line="45">
                Coefficients for Legendre polynomials.                
            </javadoc>
            <declaration name="JACOBI_COEFFICIENTS" type="Map&lt;JacobiKey,List&lt;BigFraction&gt;&gt;" line="48"/>
            <javadoc line="48">
                Coefficients for Jacobi polynomials.                
            </javadoc>
            <scope line="51"/>
            <javadoc line="86">
                Private constructor, to prevent instantiation.                
            </javadoc>
            <method name="PolynomialsUtils" type="constructor" line="89"/>
            <javadoc line="92">
                Create a Chebyshev polynomial of the first kind.
                  &lt;p&gt;&lt;a href=&quot;http://mathworld.wolfram.com/ChebyshevPolynomialoftheFirstKind.html&quot;&gt;Chebyshev
                  polynomials of the first kind&lt;/a&gt; are orthogonal polynomials.
                  They can be defined by the following recurrence relations:
                  &lt;pre&gt;
                  T&lt;sub&gt;0&lt;/sub&gt;(X)   = 1
                  T&lt;sub&gt;1&lt;/sub&gt;(X)   = X
                  T&lt;sub&gt;k+1&lt;/sub&gt;(X) = 2X T&lt;sub&gt;k&lt;/sub&gt;(X) - T&lt;sub&gt;k-1&lt;/sub&gt;(X)
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    degree degree of the polynomial                    
                </param>
                <return>
                    Chebyshev polynomial of specified degree                    
                </return>
            </javadoc>
            <method name="createChebyshevPolynomial" type="PolynomialFunction" line="105">
                <params>
                    <param name="degree" type="int"/>
                </params>
                <anonymous_class line="107">
                    <declaration name="coeffs" type="BigFraction[]" line="108"/>
                    <javadoc line="109">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="generate" type="BigFraction[]" line="110">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="116">
                Create a Hermite polynomial.
                  &lt;p&gt;&lt;a href=&quot;http://mathworld.wolfram.com/HermitePolynomial.html&quot;&gt;Hermite
                  polynomials&lt;/a&gt; are orthogonal polynomials.
                  They can be defined by the following recurrence relations:
                  &lt;pre&gt;
                  H&lt;sub&gt;0&lt;/sub&gt;(X)   = 1
                  H&lt;sub&gt;1&lt;/sub&gt;(X)   = 2X
                  H&lt;sub&gt;k+1&lt;/sub&gt;(X) = 2X H&lt;sub&gt;k&lt;/sub&gt;(X) - 2k H&lt;sub&gt;k-1&lt;/sub&gt;(X)
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    degree degree of the polynomial                    
                </param>
                <return>
                    Hermite polynomial of specified degree                    
                </return>
            </javadoc>
            <method name="createHermitePolynomial" type="PolynomialFunction" line="130">
                <params>
                    <param name="degree" type="int"/>
                </params>
                <anonymous_class line="132">
                    <javadoc line="133">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="generate" type="BigFraction[]" line="134">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="143">
                Create a Laguerre polynomial.
                  &lt;p&gt;&lt;a href=&quot;http://mathworld.wolfram.com/LaguerrePolynomial.html&quot;&gt;Laguerre
                  polynomials&lt;/a&gt; are orthogonal polynomials.
                  They can be defined by the following recurrence relations:
                  &lt;pre&gt;
                  L&lt;sub&gt;0&lt;/sub&gt;(X)   = 1
                  L&lt;sub&gt;1&lt;/sub&gt;(X)   = 1 - X
                  (k+1) L&lt;sub&gt;k+1&lt;/sub&gt;(X) = (2k + 1 - X) L&lt;sub&gt;k&lt;/sub&gt;(X) - k L&lt;sub&gt;k-1&lt;/sub&gt;(X)
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    degree degree of the polynomial                    
                </param>
                <return>
                    Laguerre polynomial of specified degree                    
                </return>
            </javadoc>
            <method name="createLaguerrePolynomial" type="PolynomialFunction" line="156">
                <params>
                    <param name="degree" type="int"/>
                </params>
                <anonymous_class line="158">
                    <javadoc line="159">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="generate" type="BigFraction[]" line="160">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                        <declaration name="kP1" type="int" line="161"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="170">
                Create a Legendre polynomial.
                  &lt;p&gt;&lt;a href=&quot;http://mathworld.wolfram.com/LegendrePolynomial.html&quot;&gt;Legendre
                  polynomials&lt;/a&gt; are orthogonal polynomials.
                  They can be defined by the following recurrence relations:
                  &lt;pre&gt;
                  P&lt;sub&gt;0&lt;/sub&gt;(X)   = 1
                  P&lt;sub&gt;1&lt;/sub&gt;(X)   = X
                  (k+1) P&lt;sub&gt;k+1&lt;/sub&gt;(X) = (2k+1) X P&lt;sub&gt;k&lt;/sub&gt;(X) - k P&lt;sub&gt;k-1&lt;/sub&gt;(X)
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    degree degree of the polynomial                    
                </param>
                <return>
                    Legendre polynomial of specified degree                    
                </return>
            </javadoc>
            <method name="createLegendrePolynomial" type="PolynomialFunction" line="183">
                <params>
                    <param name="degree" type="int"/>
                </params>
                <anonymous_class line="185">
                    <javadoc line="186">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="generate" type="BigFraction[]" line="187">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                        <declaration name="kP1" type="int" line="188"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="197">
                Create a Jacobi polynomial.
                  &lt;p&gt;&lt;a href=&quot;http://mathworld.wolfram.com/JacobiPolynomial.html&quot;&gt;Jacobi
                  polynomials&lt;/a&gt; are orthogonal polynomials.
                  They can be defined by the following recurrence relations:
                  &lt;pre&gt;
                  P&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;vw&lt;/sup&gt;(X)   = 1
                  P&lt;sub&gt;-1&lt;/sub&gt;&lt;sup&gt;vw&lt;/sup&gt;(X)  = 0
                  2k(k + v + w)(2k + v + w - 2) P&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;vw&lt;/sup&gt;(X) =
                  (2k + v + w - 1)[(2k + v + w)(2k + v + w - 2) X + v&lt;sup&gt;2&lt;/sup&gt; - w&lt;sup&gt;2&lt;/sup&gt;] P&lt;sub&gt;k-1&lt;/sub&gt;&lt;sup&gt;vw&lt;/sup&gt;(X)
                  - 2(k + v - 1)(k + w - 1)(2k + v + w) P&lt;sub&gt;k-2&lt;/sub&gt;&lt;sup&gt;vw&lt;/sup&gt;(X)
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    degree degree of the polynomial                    
                </param>
                <param>
                    v first exponent                    
                </param>
                <param>
                    w second exponent                    
                </param>
                <return>
                    Jacobi polynomial of specified degree                    
                </return>
            </javadoc>
            <method name="createJacobiPolynomial" type="PolynomialFunction" line="214">
                <params>
                    <param name="degree" type="int"/>
                    <param name="v" type="int"/>
                    <param name="w" type="int"/>
                </params>
                <comment line="216">
                    select the appropriate list                    
                </comment>
                <comment line="221">
                    allocate a new list for v, w                    
                </comment>
                <comment line="225">
                    Pv,w,0(x) = 1;                    
                </comment>
                <comment line="228">
                    P1(x) = (v - w) / 2 + (2 + v + w) * X / 2                    
                </comment>
                <declaration name="key" type="JacobiKey" line="217"/>
                <scope line="219">
                    <declaration name="list" type="List&lt;BigFraction&gt;" line="222"/>
                </scope>
                <anonymous_class line="235">
                    <javadoc line="236">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="generate" type="BigFraction[]" line="237">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                        <declaration name="kvw" type="int" line="239"/>
                        <declaration name="twoKvw" type="int" line="240"/>
                        <declaration name="twoKvwM1" type="int" line="241"/>
                        <declaration name="twoKvwM2" type="int" line="242"/>
                        <declaration name="den" type="int" line="243"/>
                    </method>
                </anonymous_class>
            </method>
            <class name="JacobiKey" line="255">
                <javadoc line="255">
                    Inner class for Jacobi polynomials keys.                    
                </javadoc>
                <declaration name="v" type="int" line="258"/>
                <javadoc line="258">
                    First exponent.                    
                </javadoc>
                <declaration name="w" type="int" line="261"/>
                <javadoc line="261">
                    Second exponent.                    
                </javadoc>
                <javadoc line="264">
                    Simple constructor.                    
                    <param>
                        v first exponent                        
                    </param>
                    <param>
                        w second exponent                        
                    </param>
                </javadoc>
                <method name="JacobiKey" type="constructor" line="268">
                    <params>
                        <param name="v" type="int"/>
                        <param name="w" type="int"/>
                    </params>
                </method>
                <javadoc line="273">
                    Get hash code.                    
                    <return>
                        hash code                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="277"/>
                <javadoc line="281">
                    Check if the instance represent the same key as another instance.                    
                    <param>
                        key other key                        
                    </param>
                    <return>
                        true if the instance and the other key refer to the same polynomial                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="286">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="288"/>
                    <declaration name="otherK" type="JacobiKey" line="292"/>
                </method>
            </class>
            <javadoc line="298">
                Compute the coefficients of the polynomial &lt;code&gt;P&lt;sub&gt;s&lt;/sub&gt;(x)&lt;/code&gt;
                  whose values at point {@code x} will be the same as the those from the
                  original polynomial &lt;code&gt;P(x)&lt;/code&gt; when computed at {@code x + shift}.
                  Thus, if &lt;code&gt;P(x) = &amp;Sigma;&lt;sub&gt;i&lt;/sub&gt; a&lt;sub&gt;i&lt;/sub&gt; x&lt;sup&gt;i&lt;/sup&gt;&lt;/code&gt;,
                  then
                  &lt;pre&gt;
                  &lt;table&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;code&gt;P&lt;sub&gt;s&lt;/sub&gt;(x)&lt;/td&gt;
                  &lt;td&gt;= &amp;Sigma;&lt;sub&gt;i&lt;/sub&gt; b&lt;sub&gt;i&lt;/sub&gt; x&lt;sup&gt;i&lt;/sup&gt;&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td&gt;= &amp;Sigma;&lt;sub&gt;i&lt;/sub&gt; a&lt;sub&gt;i&lt;/sub&gt; (x + shift)&lt;sup&gt;i&lt;/sup&gt;&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/pre&gt;                
                <param>
                    coefficients Coefficients of the original polynomial.                    
                </param>
                <param>
                    shift Shift value.                    
                </param>
                <return>
                    the coefficients <code>b<sub>i</sub></code> of the shifted
                      polynomial.                    
                </return>
            </javadoc>
            <method name="shift" type="double[]" line="323">
                <params>
                    <param name="coefficients" type="double[]"/>
                    <param name="shift" type="double"/>
                </params>
                <comment line="327">
                    Pascal triangle.                    
                </comment>
                <comment line="335">
                    First polynomial coefficient.                    
                </comment>
                <comment line="340">
                    Superior order.                    
                </comment>
                <declaration name="dp1" type="int" line="324"/>
                <declaration name="newCoefficients" type="double[]" line="325"/>
                <declaration name="coeff" type="int[][]" line="328"/>
                <scope line="329">
                    <scope line="330"/>
                </scope>
                <scope line="336"/>
                <declaration name="d" type="int" line="341"/>
                <scope line="342">
                    <scope line="343"/>
                </scope>
            </method>
            <javadoc line="353">
                Get the coefficients array for a given degree.                
                <param>
                    degree degree of the polynomial                    
                </param>
                <param>
                    coefficients list where the computed coefficients are stored                    
                </param>
                <param>
                    generator recurrence coefficients generator                    
                </param>
                <return>
                    coefficients array                    
                </return>
            </javadoc>
            <method name="buildPolynomial" type="PolynomialFunction" line="361">
                <params>
                    <param name="degree" type="int"/>
                    <param name="coefficients" type="List<BigFraction>"/>
                    <param name="generator" type="RecurrenceCoefficientsGenerator"/>
                </params>
                <comment line="370">
                    coefficient  for polynomial 0 is  l [0]                    
                </comment>
                <comment line="371">
                    coefficients for polynomial 1 are l [1] ... l [2] (degrees 0 ... 1)                    
                </comment>
                <comment line="372">
                    coefficients for polynomial 2 are l [3] ... l [5] (degrees 0 ... 2)                    
                </comment>
                <comment line="373">
                    coefficients for polynomial 3 are l [6] ... l [9] (degrees 0 ... 3)                    
                </comment>
                <comment line="374">
                    coefficients for polynomial 4 are l[10] ... l[14] (degrees 0 ... 4)                    
                </comment>
                <comment line="375">
                    coefficients for polynomial 5 are l[15] ... l[20] (degrees 0 ... 5)                    
                </comment>
                <comment line="376">
                    coefficients for polynomial 6 are l[21] ... l[27] (degrees 0 ... 6)                    
                </comment>
                <comment line="377">
                    ...                    
                </comment>
                <comment line="385">
                    build the polynomial                    
                </comment>
                <declaration name="maxDegree" type="int" line="363"/>
                <scope line="364">
                    <scope line="365"/>
                </scope>
                <declaration name="start" type="int" line="378"/>
                <declaration name="a" type="double[]" line="380"/>
                <scope line="381"/>
            </method>
            <javadoc line="390">
                Compute polynomial coefficients up to a given degree.                
                <param>
                    degree maximal degree                    
                </param>
                <param>
                    maxDegree current maximal degree                    
                </param>
                <param>
                    generator recurrence coefficients generator                    
                </param>
                <param>
                    coefficients list where the computed coefficients should be appended                    
                </param>
            </javadoc>
            <method name="computeUpToDegree" type="void" line="398">
                <params>
                    <param name="degree" type="int"/>
                    <param name="maxDegree" type="int"/>
                    <param name="generator" type="RecurrenceCoefficientsGenerator"/>
                    <param name="coefficients" type="List<BigFraction>"/>
                </params>
                <comment line="403">
                    start indices of two previous polynomials Pk(X) and Pk-1(X)                    
                </comment>
                <comment line="407">
                    Pk+1(X) = (a[0] + a[1] X) Pk(X) - a[2] Pk-1(X)                    
                </comment>
                <comment line="413">
                    degree 0 coefficient                    
                </comment>
                <comment line="416">
                    degree 1 to degree k-1 coefficients                    
                </comment>
                <comment line="424">
                    degree k coefficient                    
                </comment>
                <comment line="429">
                    degree k+1 coefficient                    
                </comment>
                <declaration name="startK" type="int" line="400"/>
                <scope line="401">
                    <declaration name="startKm1" type="int" line="404"/>
                    <declaration name="ai" type="BigFraction[]" line="408"/>
                    <declaration name="ck" type="BigFraction" line="410"/>
                    <declaration name="ckm1" type="BigFraction" line="411"/>
                    <scope line="417">
                        <declaration name="ckPrev" type="BigFraction" line="418"/>
                    </scope>
                    <declaration name="ckPrev" type="BigFraction" line="425"/>
                </scope>
            </method>
            <interface name="RecurrenceCoefficientsGenerator">
                <javadoc line="436">
                    Interface for recurrence coefficients generation.                    
                </javadoc>
                <method name="generate" type="BigFraction[]" line="438"/>
                <javadoc line="438">
                    Generate recurrence coefficients.                    
                    <param>
                        k highest degree of the polynomials used in the recurrence                        
                    </param>
                    <return>
                        an array of three coefficients such that
                          P<sub>k+1</sub>(X) = (a[0] + a[1] X) P<sub>k</sub>(X) - a[2] P<sub>k-1</sub>(X)                        
                    </return>
                </javadoc>
            </interface>
        </class>
    </source>