<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optim.BaseMultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <class name="MultivariateOptimizer" line="8">
            <extends class="BaseMultivariateOptimizer">
                <type_params>
                    <type_param name="PointValuePair"/>
                </type_params>
            </extends>
            <javadoc line="8">
                Base class for a multivariate scalar function optimizer.                
                <version>
                    $Id: MultivariateOptimizer.java 1443444 2013-02-07 12:41:36Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="function" type="MultivariateFunction" line="14"/>
            <javadoc line="14">
                Objective function.                
            </javadoc>
            <declaration name="goal" type="GoalType" line="18"/>
            <javadoc line="18">
                Type of optimization.                
            </javadoc>
            <javadoc line="22">
                @param checker Convergence checker.                
            </javadoc>
            <method name="MultivariateOptimizer" type="constructor" line="25">
                <params>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                </params>
            </method>
            <javadoc line="28">
                {@inheritDoc}                
                <param>
                    optData Optimization data. In addition to those documented in{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])BaseMultivariateOptimizer}, this method will register the following data:
                      <ul>
                      <li>{@link ObjectiveFunction}</li>
                      <li>{@link GoalType}</li>
                      </ul>                    
                </param>
                <return>
                    {@inheritDoc}                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PointValuePair" line="39">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <javadoc line="42">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data.
                      The following data will be looked for:
                      <ul>
                      <li>{@link ObjectiveFunction}</li>
                      <li>{@link GoalType}</li>
                      </ul>                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="52">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <scope line="54">
                    <scope line="55"/>
                    <scope line="59"/>
                </scope>
            </method>
            <javadoc line="65">
                @return the optimization type.                
            </javadoc>
            <method name="getGoalType" type="GoalType" line="68"/>
            <javadoc line="71">
                Computes the objective function value.
                  This method &lt;em&gt;must&lt;/em&gt; be called by subclasses to enforce the
                  evaluation counter limit.                
                <param>
                    params Point at which the objective function must be evaluated.                    
                </param>
                <return>
                    the objective function value at the specified point.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="computeObjectiveValue" type="double" line="80">
                <params>
                    <param name="params" type="double[]"/>
                </params>
            </method>
        </class>
    </source>