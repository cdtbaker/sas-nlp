<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.moment">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.stat.descriptive.WeightedEvaluation"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.Sum"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Mean" line="28">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <implements interface="WeightedEvaluation"/>
            <javadoc line="28">
                &lt;p&gt;Computes the arithmetic mean of a set of values. Uses the definitional
                  formula:&lt;/p&gt;
                  &lt;p&gt;
                  mean = sum(x_i) / n
                  &lt;/p&gt;
                  &lt;p&gt;where &lt;code&gt;n&lt;/code&gt; is the number of observations.
                  &lt;/p&gt;
                  &lt;p&gt;When {@link #increment(double)} is used to add data incrementally from a
                  stream of (unstored) values, the value of the statistic that{@link #getResult()} returns is computed using the following recursive
                  updating algorithm: &lt;/p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;Initialize &lt;code&gt;m = &lt;/code&gt; the first value&lt;/li&gt;
                  &lt;li&gt;For each additional value, update using &lt;br&gt;
                  &lt;code&gt;m = m + (new value - m) / (number of observations)&lt;/code&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt; If {@link #evaluate(double[])} is used to compute the mean of an array
                  of stored values, a two-pass, corrected algorithm is used, starting with
                  the definitional formula computed using the array of stored values and then
                  correcting this by adding the mean deviation of the data values from the
                  arithmetic mean. See, e.g. &quot;Comparison of Several Algorithms for Computing
                  Sample Means and Variances,&quot; Robert F. Ling, Journal of the American
                  Statistical Association, Vol. 69, No. 348 (Dec., 1974), pp. 859-866. &lt;/p&gt;
                  &lt;p&gt;
                  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if the dataset is empty.
                  &lt;/p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.                
                <version>
                    $Id: Mean.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="65"/>
            <javadoc line="65">
                Serializable version identifier                
            </javadoc>
            <declaration name="moment" type="FirstMoment" line="68"/>
            <javadoc line="68">
                First moment on which this statistic is based.                
            </javadoc>
            <declaration name="incMoment" type="boolean" line="71"/>
            <javadoc line="71">
                Determines whether or not this statistic can be incremented or cleared.
                  &lt;p&gt;
                  Statistics based on (constructed from) external moments cannot
                  be incremented or cleared.&lt;/p&gt;                
            </javadoc>
            <javadoc line="79">
                Constructs a Mean.                
            </javadoc>
            <method name="Mean" type="constructor" line="80"/>
            <javadoc line="85">
                Constructs a Mean with an External Moment.                
                <param>
                    m1 the moment                    
                </param>
            </javadoc>
            <method name="Mean" type="constructor" line="90">
                <params>
                    <param name="m1" type="FirstMoment"/>
                </params>
            </method>
            <javadoc line="95">
                Copy constructor, creates a new {@code Mean} identical
                  to the {@code original}                
                <param>
                    original the {@code Mean} instance to copy                    
                </param>
                <throws>
                    NullArgumentException if original is null                    
                </throws>
            </javadoc>
            <method name="Mean" type="constructor" line="102">
                <params>
                    <param name="original" type="Mean"/>
                </params>
            </method>
            <javadoc line="106">
                {@inheritDoc}&lt;p&gt;Note that when {@link #Mean(FirstMoment)} is used to
                  create a Mean, this method does nothing. In that case, the
                  FirstMoment should be incremented directly.&lt;/p&gt;                
            </javadoc>
            <method name="increment" type="void" line="113">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="114"/>
            </method>
            <javadoc line="119">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="123">
                <scope line="124"/>
            </method>
            <javadoc line="129">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="133"/>
            <javadoc line="137">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="140"/>
            <javadoc line="144">
                Returns the arithmetic mean of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link Mean} for details on the computing algorithm.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the mean of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="162">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="168">
                    Compute initial estimate using definitional formula                    
                </comment>
                <comment line="171">
                    Compute correction factor in second pass                    
                </comment>
                <scope line="163">
                    <declaration name="sum" type="Sum" line="164"/>
                    <declaration name="sampleSize" type="double" line="165"/>
                    <declaration name="xbar" type="double" line="168"/>
                    <declaration name="correction" type="double" line="171"/>
                    <scope line="172"/>
                </scope>
            </method>
            <javadoc line="180">
                Returns the weighted arithmetic mean of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if either array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link Mean} for details on the computing algorithm. The two-pass algorithm
                  described above is used here, with weights applied in computing both the original
                  estimate and the correction factor.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if any of the following are true:
                  &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                  &lt;li&gt;the weights array is null&lt;/li&gt;
                  &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                  &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                  &lt;li&gt;the start and length arguments do not determine a valid array&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    weights the weights array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the mean of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="evaluate" type="double" line="210">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="weights" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="215">
                    Compute initial estimate using definitional formula                    
                </comment>
                <comment line="219">
                    Compute correction factor in second pass                    
                </comment>
                <scope line="211">
                    <declaration name="sum" type="Sum" line="212"/>
                    <declaration name="sumw" type="double" line="215"/>
                    <declaration name="xbarw" type="double" line="216"/>
                    <declaration name="correction" type="double" line="219"/>
                    <scope line="220"/>
                </scope>
            </method>
            <javadoc line="228">
                Returns the weighted arithmetic mean of the entries in the input array.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if either array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link Mean} for details on the computing algorithm. The two-pass algorithm
                  described above is used here, with weights applied in computing both the original
                  estimate and the correction factor.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                  &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                  &lt;li&gt;the weights array is null&lt;/li&gt;
                  &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                  &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    weights the weights array                    
                </param>
                <return>
                    the mean of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="evaluate" type="double" line="253">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="weights" type="double[]"/>
                </params>
            </method>
            <javadoc line="257">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="Mean" line="261">
                <comment line="264">
                    No try-catch or advertised exception because args are guaranteed non-null                    
                </comment>
                <declaration name="result" type="Mean" line="262"/>
            </method>
            <javadoc line="269">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source Mean to copy                    
                </param>
                <param>
                    dest Mean to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="278">
                <params>
                    <param name="source" type="Mean"/>
                    <param name="dest" type="Mean"/>
                </params>
            </method>
        </class>
    </source>