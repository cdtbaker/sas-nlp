<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.function">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Sigmoid" line="32">
            <implements interface="UnivariateDifferentiableFunction"/>
            <implements interface="DifferentiableUnivariateFunction"/>
            <javadoc line="32">
                &lt;a href=&quot;http://en.wikipedia.org/wiki/Sigmoid_function&quot;&gt;
                  Sigmoid&lt;/a&gt; function.
                  It is the inverse of the {@link Logit logit} function.
                  A more flexible version, the generalised logistic, is implemented
                  by the {@link Logistic} class.                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: Sigmoid.java 1513430 2013-08-13 10:46:48Z erans $                    
                </version>
            </javadoc>
            <declaration name="lo" type="double" line="43"/>
            <javadoc line="43">
                Lower asymptote.                
            </javadoc>
            <declaration name="hi" type="double" line="45"/>
            <javadoc line="45">
                Higher asymptote.                
            </javadoc>
            <javadoc line="48">
                Usual sigmoid function, where the lower asymptote is 0 and the higher
                  asymptote is 1.                
            </javadoc>
            <method name="Sigmoid" type="constructor" line="52"/>
            <javadoc line="56">
                Sigmoid function.                
                <param>
                    lo Lower asymptote.                    
                </param>
                <param>
                    hi Higher asymptote.                    
                </param>
            </javadoc>
            <method name="Sigmoid" type="constructor" line="63">
                <params>
                    <param name="lo" type="double"/>
                    <param name="hi" type="double"/>
                </params>
            </method>
            <javadoc line="68">
                {@inheritDoc}                
                <deprecated>
                    as of 3.1, replaced by {@link #value(DerivativeStructure)}                    
                </deprecated>
            </javadoc>
            <method name="derivative" type="UnivariateFunction" line="72"/>
            <javadoc line="76">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="77">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <class name="Parametric" line="81">
                <implements interface="ParametricUnivariateFunction"/>
                <javadoc line="81">
                    Parametric function where the input array contains the parameters of
                      the {@link Sigmoid#Sigmoid(double,double) sigmoid function}, ordered
                      as follows:
                      &lt;ul&gt;
                      &lt;li&gt;Lower asymptote&lt;/li&gt;
                      &lt;li&gt;Higher asymptote&lt;/li&gt;
                      &lt;/ul&gt;                    
                </javadoc>
                <javadoc line="91">
                    Computes the value of the sigmoid at {@code x}.                    
                    <param>
                        x Value for which the function must be computed.                        
                    </param>
                    <param>
                        param Values of lower asymptote and higher asymptote.                        
                    </param>
                    <return>
                        the value of the function.                        
                    </return>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 2.                        
                    </throws>
                </javadoc>
                <method name="value" type="double" line="103">
                    <params>
                        <param name="x" type="double"/>
                        <param name="param" type="double"/>
                    </params>
                </method>
                <javadoc line="108">
                    Computes the value of the gradient at {@code x}.
                      The components of the gradient vector are the partial
                      derivatives of the function with respect to each of the
                      &lt;em&gt;parameters&lt;/em&gt; (lower asymptote and higher asymptote).                    
                    <param>
                        x Value at which the gradient must be computed.                        
                    </param>
                    <param>
                        param Values for lower asymptote and higher asymptote.                        
                    </param>
                    <return>
                        the gradient vector at {@code x}.                        
                    </return>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 2.                        
                    </throws>
                </javadoc>
                <method name="gradient" type="double[]" line="123">
                    <params>
                        <param name="x" type="double"/>
                        <param name="param" type="double"/>
                    </params>
                    <declaration name="invExp1" type="double" line="126"/>
                </method>
                <javadoc line="131">
                    Validates parameters to ensure they are appropriate for the evaluation of
                      the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.                    
                    <param>
                        param Values for lower and higher asymptotes.                        
                    </param>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 2.                        
                    </throws>
                </javadoc>
                <method name="validateParameters" type="void" line="143">
                    <params>
                        <param name="param" type="double[]"/>
                    </params>
                    <scope line="144"/>
                    <scope line="147"/>
                </method>
            </class>
            <javadoc line="153">
                @param x Value at which to compute the sigmoid.                
                <param>
                    lo Lower asymptote.                    
                </param>
                <param>
                    hi Higher asymptote.                    
                </param>
                <return>
                    the value of the sigmoid function at {@code x}.                    
                </return>
            </javadoc>
            <method name="value" type="double" line="161">
                <params>
                    <param name="x" type="double"/>
                    <param name="lo" type="double"/>
                    <param name="hi" type="double"/>
                </params>
            </method>
            <javadoc line="165">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="169">
                <params>
                    <param name="t" type="DerivativeStructure"/>
                </params>
                <comment line="176">
                    special handling near lower boundary, to avoid NaN                    
                </comment>
                <comment line="182">
                    the nth order derivative of sigmoid has the form:
                     dn(sigmoid(x)/dxn = P_n(exp(-x)) / (1+exp(-x))^(n+1)
                     where P_n(t) is a degree n polynomial with normalized higher term
                     P_0(t) = 1, P_1(t) = t, P_2(t) = t^2 - t, P_3(t) = t^3 - 4 t^2 + t...
                     the general recurrence relation for P_n is:
                     P_n(x) = n t P_(n-1)(t) - t (1 + t) P_(n-1)&apos;(t)                    
                </comment>
                <comment line="194">
                    update and evaluate polynomial P_n(t)                    
                </comment>
                <comment line="211">
                    fix function value                    
                </comment>
                <declaration name="f" type="double[]" line="171"/>
                <declaration name="exp" type="double" line="172"/>
                <scope line="173"/>
                <scope line="179">
                    <declaration name="p" type="double[]" line="187"/>
                    <declaration name="inv" type="double" line="189"/>
                    <declaration name="coeff" type="double" line="190"/>
                    <scope line="191">
                        <declaration name="v" type="double" line="194"/>
                        <scope line="196">
                            <scope line="198"/>
                            <scope line="200"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>