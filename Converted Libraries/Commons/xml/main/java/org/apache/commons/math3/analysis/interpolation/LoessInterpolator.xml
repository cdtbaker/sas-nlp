<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NotFiniteNumberException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="LoessInterpolator" line="16">
            <implements interface="UnivariateInterpolator"/>
            <implements interface="Serializable"/>
            <javadoc line="16">
                Implements the &lt;a href=&quot;http://en.wikipedia.org/wiki/Local_regression&quot;&gt;
                  Local Regression Algorithm&lt;/a&gt; (also Loess, Lowess) for interpolation of
                  real univariate functions.
                  &lt;p/&gt;
                  For reference, see
                  &lt;a href=&quot;http://www.math.tau.ac.il/~yekutiel/MA seminar/Cleveland 1979.pdf&quot;&gt;
                  William S. Cleveland - Robust Locally Weighted Regression and Smoothing
                  Scatterplots&lt;/a&gt;
                  &lt;p/&gt;
                  This class implements both the loess method and serves as an interpolation
                  adapter to it, allowing one to build a spline on the obtained loess fit.                
                <version>
                    $Id: LoessInterpolator.java 1379904 2012-09-01 23:54:52Z erans $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_BANDWIDTH" type="double" line="32"/>
            <javadoc line="32">
                Default value of the bandwidth parameter.                
            </javadoc>
            <declaration name="DEFAULT_ROBUSTNESS_ITERS" type="int" line="36"/>
            <javadoc line="36">
                Default value of the number of robustness iterations.                
            </javadoc>
            <declaration name="DEFAULT_ACCURACY" type="double" line="40"/>
            <javadoc line="40">
                Default value for accuracy.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <javadoc line="45">
                serializable version identifier.                
            </javadoc>
            <declaration name="bandwidth" type="double" line="49"/>
            <javadoc line="49">
                The bandwidth parameter: when computing the loess fit at
                  a particular point, this fraction of source points closest
                  to the current point is taken into account for computing
                  a least-squares regression.
                  &lt;p/&gt;
                  A sensible value is usually 0.25 to 0.5.                
            </javadoc>
            <declaration name="robustnessIters" type="int" line="58"/>
            <javadoc line="58">
                The number of robustness iterations parameter: this many
                  robustness iterations are done.
                  &lt;p/&gt;
                  A sensible value is usually 0 (just the initial fit without any
                  robustness iterations) to 4.                
            </javadoc>
            <declaration name="accuracy" type="double" line="66"/>
            <javadoc line="66">
                If the median residual at a certain robustness iteration
                  is less than this amount, no more iterations are done.                
            </javadoc>
            <javadoc line="71">
                Constructs a new {@link LoessInterpolator}with a bandwidth of {@link #DEFAULT_BANDWIDTH},{@link #DEFAULT_ROBUSTNESS_ITERS} robustness iterations
                  and an accuracy of {#link #DEFAULT_ACCURACY}.
                  See {@link #LoessInterpolator(double,int,double)} for an explanation of
                  the parameters.                
            </javadoc>
            <method name="LoessInterpolator" type="constructor" line="77"/>
            <javadoc line="82">
                Construct a new {@link LoessInterpolator}with given bandwidth and number of robustness iterations.
                  &lt;p&gt;
                  Calling this constructor is equivalent to calling {link {@link #LoessInterpolator(double,int,double) LoessInterpolator(bandwidth,
                  robustnessIters, LoessInterpolator.DEFAULT_ACCURACY)}&lt;/p&gt;                
                <param>
                    bandwidth  when computing the loess fit at
                      a particular point, this fraction of source points closest
                      to the current point is taken into account for computing
                      a least-squares regression.</br>
                      A sensible value is usually 0.25 to 0.5, the default value is{@link #DEFAULT_BANDWIDTH}.                    
                </param>
                <param>
                    robustnessIters This many robustness iterations are done.</br>
                      A sensible value is usually 0 (just the initial fit without any
                      robustness iterations) to 4, the default value is{@link #DEFAULT_ROBUSTNESS_ITERS}.                    
                </param>
                <see>
                    #LoessInterpolator(double,int,double)                    
                </see>
            </javadoc>
            <method name="LoessInterpolator" type="constructor" line="97">
                <params>
                    <param name="bandwidth" type="double"/>
                    <param name="robustnessIters" type="int"/>
                </params>
            </method>
            <javadoc line="100">
                Construct a new {@link LoessInterpolator}with given bandwidth, number of robustness iterations and accuracy.                
                <param>
                    bandwidth  when computing the loess fit at
                      a particular point, this fraction of source points closest
                      to the current point is taken into account for computing
                      a least-squares regression.</br>
                      A sensible value is usually 0.25 to 0.5, the default value is{@link #DEFAULT_BANDWIDTH}.                    
                </param>
                <param>
                    robustnessIters This many robustness iterations are done.</br>
                      A sensible value is usually 0 (just the initial fit without any
                      robustness iterations) to 4, the default value is{@link #DEFAULT_ROBUSTNESS_ITERS}.                    
                </param>
                <param>
                    accuracy If the median residual at a certain robustness iteration
                      is less than this amount, no more iterations are done.                    
                </param>
                <throws>
                    OutOfRangeException if bandwidth does not lie in the interval [0,1].                    
                </throws>
                <throws>
                    NotPositiveException if {@code robustnessIters} is negative.                    
                </throws>
                <see>
                    #LoessInterpolator(double,int)                    
                </see>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="LoessInterpolator" type="constructor" line="117">
                <params>
                    <param name="bandwidth" type="double"/>
                    <param name="robustnessIters" type="int"/>
                    <param name="accuracy" type="double"/>
                </params>
                <scope line="118"/>
                <scope line="122"/>
            </method>
            <javadoc line="128">
                Compute an interpolating function by performing a loess fit
                  on the data at the original abscissae and then building a cubic spline
                  with a{@link org.apache.commons.math3.analysis.interpolation.SplineInterpolator}on the resulting fit.                
                <param>
                    xval the arguments for the interpolation points                    
                </param>
                <param>
                    yval the values for the interpolation points                    
                </param>
                <return>
                    A cubic spline built upon a loess fit to the data at the original abscissae                    
                </return>
                <throws>
                    NonMonotonicSequenceException if {@code xval} not sorted in
                      strictly increasing order.                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code xval} and {@code yval} have
                      different sizes.                    
                </throws>
                <throws>
                    NoDataException if {@code xval} or {@code yval} has zero size.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the arguments and values are
                      not finite real numbers.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the bandwidth is too small to
                      accomodate the size of the input data (i.e. the bandwidth must be
                      larger than 2/n).                    
                </throws>
            </javadoc>
            <method name="interpolate" type="PolynomialSplineFunction" line="146">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                </params>
            </method>
            <javadoc line="149">
                Compute a weighted loess fit on the data at the original abscissae.                
                <param>
                    xval Arguments for the interpolation points.                    
                </param>
                <param>
                    yval Values for the interpolation points.                    
                </param>
                <param>
                    weights point weights: coefficients by which the robustness weight
                      of a point is multiplied.                    
                </param>
                <return>
                    the values of the loess fit at corresponding original abscissae.                    
                </return>
                <throws>
                    NonMonotonicSequenceException if {@code xval} not sorted in
                      strictly increasing order.                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code xval} and {@code yval} have
                      different sizes.                    
                </throws>
                <throws>
                    NoDataException if {@code xval} or {@code yval} has zero size.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the arguments and values are
                      not finite real numbers.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the bandwidth is too small to
                      accomodate the size of the input data (i.e. the bandwidth must be
                      larger than 2/n).                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="smooth" type="double[]" line="168">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                    <param name="weights" type="double[]"/>
                </params>
                <scope line="169"/>
                <declaration name="n" type="int" line="172"/>
                <scope line="173"/>
                <scope line="180"/>
                <scope line="183"/>
                <declaration name="bandwidthInPoints" type="int" line="186"/>
                <scope line="187"/>
                <declaration name="res" type="double[]" line="190"/>
                <declaration name="residuals" type="double[]" line="191"/>
                <declaration name="sortedResiduals" type="double[]" line="192"/>
                <declaration name="robustnessWeights" type="double[]" line="193"/>
                <scope line="195">
                    <declaration name="bandwidthInterval" type="int[]" line="196"/>
                    <scope line="197">
                        <declaration name="x" type="double" line="198"/>
                        <scope line="199"/>
                        <declaration name="ileft" type="int" line="202"/>
                        <declaration name="iright" type="int" line="203"/>
                        <declaration name="edge" type="int" line="204"/>
                        <scope line="205"/>
                        <scope line="208"/>
                        <declaration name="sumWeights" type="double" line="211"/>
                        <declaration name="sumX" type="double" line="212"/>
                        <declaration name="sumXSquared" type="double" line="213"/>
                        <declaration name="sumY" type="double" line="214"/>
                        <declaration name="sumXY" type="double" line="215"/>
                        <declaration name="denom" type="double" line="216"/>
                        <scope line="217">
                            <declaration name="xk" type="double" line="218"/>
                            <declaration name="yk" type="double" line="219"/>
                            <declaration name="dist" type="double" line="220"/>
                            <declaration name="w" type="double" line="221"/>
                            <declaration name="xkw" type="double" line="222"/>
                        </scope>
                        <declaration name="meanX" type="double" line="229"/>
                        <declaration name="meanY" type="double" line="230"/>
                        <declaration name="meanXY" type="double" line="231"/>
                        <declaration name="meanXSquared" type="double" line="232"/>
                        <declaration name="beta" type="double" line="233"/>
                        <scope line="234"/>
                        <scope line="237"/>
                        <declaration name="alpha" type="double" line="240"/>
                    </scope>
                    <scope line="244"/>
                    <declaration name="medianResidual" type="double" line="249"/>
                    <scope line="250"/>
                    <scope line="253">
                        <declaration name="arg" type="double" line="254"/>
                        <scope line="255"/>
                        <scope line="258">
                            <declaration name="w" type="double" line="259"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="266">
                Compute a loess fit on the data at the original abscissae.                
                <param>
                    xval the arguments for the interpolation points                    
                </param>
                <param>
                    yval the values for the interpolation points                    
                </param>
                <return>
                    values of the loess fit at corresponding original abscissae                    
                </return>
                <throws>
                    NonMonotonicSequenceException if {@code xval} not sorted in
                      strictly increasing order.                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code xval} and {@code yval} have
                      different sizes.                    
                </throws>
                <throws>
                    NoDataException if {@code xval} or {@code yval} has zero size.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the arguments and values are
                      not finite real numbers.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the bandwidth is too small to
                      accomodate the size of the input data (i.e. the bandwidth must be
                      larger than 2/n).                    
                </throws>
            </javadoc>
            <method name="smooth" type="double[]" line="282">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                </params>
                <scope line="283"/>
                <declaration name="unitWeights" type="double[]" line="286"/>
            </method>
            <javadoc line="290">
                Given an index interval into xval that embraces a certain number of
                  points closest to {@code xval[i-1]}, update the interval so that it
                  embraces the same number of points closest to {@code xval[i]},
                  ignoring zero weights.                
                <param>
                    xval Arguments array.                    
                </param>
                <param>
                    weights Weights array.                    
                </param>
                <param>
                    i Index around which the new interval should be computed.                    
                </param>
                <param>
                    bandwidthInterval a two-element array {left, right} such that:{@code (left==0 or xval[i] - xval[left-1] > xval[right] - xval[i])}and{@code (right==xval.length-1 or xval[right+1] - xval[i] > xval[i] - xval[left])}.
                      The array will be updated.                    
                </param>
            </javadoc>
            <method name="updateBandwidthInterval" type="void" line="301">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="weights" type="double[]"/>
                    <param name="i" type="int"/>
                    <param name="bandwidthInterval" type="int[]"/>
                </params>
                <declaration name="left" type="int" line="302"/>
                <declaration name="right" type="int" line="303"/>
                <declaration name="nextRight" type="int" line="304"/>
                <scope line="305">
                    <declaration name="nextLeft" type="int" line="306"/>
                </scope>
            </method>
            <javadoc line="311">
                Return the smallest index {@code j} such that{@code j &gt; i &amp;&amp; (j == weights.length || weights[j] != 0)}.                
                <param>
                    weights Weights array.                    
                </param>
                <param>
                    i Index from which to start search.                    
                </param>
                <return>
                    the smallest compliant index.                    
                </return>
            </javadoc>
            <method name="nextNonzero" type="int" line="317">
                <params>
                    <param name="weights" type="double[]"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="j" type="int" line="318"/>
                <scope line="319"/>
            </method>
            <javadoc line="324">
                Compute the
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Local_regression#Weight_function&quot;&gt;tricube&lt;/a&gt;
                  weight function                
                <param>
                    x Argument.                    
                </param>
                <return>
                    <code>(1 - |x|<sup>3</sup>)<sup>3</sup></code> for |x| &lt; 1, 0 otherwise.                    
                </return>
            </javadoc>
            <method name="tricube" type="double" line="331">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="absX" type="double" line="332"/>
                <scope line="333"/>
                <declaration name="tmp" type="double" line="336"/>
            </method>
            <javadoc line="339">
                Check that all elements of an array are finite real numbers.                
                <param>
                    values Values array.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NotFiniteNumberExceptionif one of the values is not a finite real number.                    
                </throws>
            </javadoc>
            <method name="checkAllFiniteReal" type="void" line="344">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <scope line="345"/>
            </method>
        </class>
    </source>