<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.linear">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimplexTableau" line="20">
            <implements interface="Serializable"/>
            <javadoc line="20">
                A tableau for use in the Simplex method.
                  &lt;p&gt;
                  Example:
                  &lt;pre&gt;
                  W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS
                  ---------------------------------------------------
                  -1    0    0     0     0     0     0     1     0   &amp;lt;= phase 1 objective
                  0    1   -15   -10    0     0     0     0     0   &amp;lt;= phase 2 objective
                  0    0    1     0     0     1     0     0     2   &amp;lt;= constraint 1
                  0    0    0     1     0     0     1     0     3   &amp;lt;= constraint 2
                  0    0    1     1     0     0     0     1     4   &amp;lt;= constraint 3
                  &lt;/pre&gt;
                  W: Phase 1 objective function&lt;/br&gt;
                  Z: Phase 2 objective function&lt;/br&gt;
                  x1 &amp;amp; x2: Decision variables&lt;/br&gt;
                  x-: Extra decision variable to allow for negative values&lt;/br&gt;
                  s1 &amp;amp; s2: Slack/Surplus variables&lt;/br&gt;
                  a1: Artificial variable&lt;/br&gt;
                  RHS: Right hand side&lt;/br&gt;
                  &lt;/p&gt;                
                <version>
                    $Id: SimplexTableau.java 1422230 2012-12-15 12:11:13Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="NEGATIVE_VAR_COLUMN_LABEL" type="String" line="46"/>
            <javadoc line="46">
                Column label for negative vars.                
            </javadoc>
            <declaration name="DEFAULT_ULPS" type="int" line="50"/>
            <javadoc line="50">
                Default amount of error to accept in floating point comparisons (as ulps).                
            </javadoc>
            <declaration name="CUTOFF_THRESHOLD" type="double" line="54"/>
            <javadoc line="54">
                The cut-off threshold to zero-out entries.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="58"/>
            <javadoc line="58">
                Serializable version identifier.                
            </javadoc>
            <declaration name="f" type="LinearObjectiveFunction" line="62"/>
            <javadoc line="62">
                Linear objective function.                
            </javadoc>
            <declaration name="constraints" type="List&lt;LinearConstraint&gt;" line="66"/>
            <javadoc line="66">
                Linear constraints.                
            </javadoc>
            <declaration name="restrictToNonNegative" type="boolean" line="70"/>
            <javadoc line="70">
                Whether to restrict the variables to non-negative values.                
            </javadoc>
            <declaration name="columnLabels" type="List&lt;String&gt;" line="74"/>
            <javadoc line="74">
                The variables each column represents                
            </javadoc>
            <declaration name="tableau" type="RealMatrix" line="78"/>
            <javadoc line="78">
                Simple tableau.                
            </javadoc>
            <declaration name="numDecisionVariables" type="int" line="82"/>
            <javadoc line="82">
                Number of decision variables.                
            </javadoc>
            <declaration name="numSlackVariables" type="int" line="86"/>
            <javadoc line="86">
                Number of slack variables.                
            </javadoc>
            <declaration name="numArtificialVariables" type="int" line="90"/>
            <javadoc line="90">
                Number of artificial variables.                
            </javadoc>
            <declaration name="epsilon" type="double" line="94"/>
            <javadoc line="94">
                Amount of error to accept when checking for optimality.                
            </javadoc>
            <declaration name="maxUlps" type="int" line="98"/>
            <javadoc line="98">
                Amount of error to accept in floating point comparisons.                
            </javadoc>
            <javadoc line="102">
                Build a tableau for a linear problem.                
                <param>
                    f linear objective function                    
                </param>
                <param>
                    constraints linear constraints                    
                </param>
                <param>
                    goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}                    
                </param>
                <param>
                    restrictToNonNegative whether to restrict the variables to non-negative values                    
                </param>
                <param>
                    epsilon amount of error to accept when checking for optimality                    
                </param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="110">
                <params>
                    <param name="f" type="LinearObjectiveFunction"/>
                    <param name="constraints" type="Collection<LinearConstraint>"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="restrictToNonNegative" type="boolean"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="113">
                Build a tableau for a linear problem.                
                <param>
                    f linear objective function                    
                </param>
                <param>
                    constraints linear constraints                    
                </param>
                <param>
                    goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}                    
                </param>
                <param>
                    restrictToNonNegative whether to restrict the variables to non-negative values                    
                </param>
                <param>
                    epsilon amount of error to accept when checking for optimality                    
                </param>
                <param>
                    maxUlps amount of error to accept in floating point comparisons                    
                </param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="122">
                <params>
                    <param name="f" type="LinearObjectiveFunction"/>
                    <param name="constraints" type="Collection<LinearConstraint>"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="restrictToNonNegative" type="boolean"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="134">
                Initialize the labels for the columns.                
            </javadoc>
            <method name="initializeColumnLabels" type="void" line="137">
                <scope line="138"/>
                <scope line="142"/>
                <scope line="145"/>
                <scope line="148"/>
                <scope line="151"/>
            </method>
            <javadoc line="156">
                Create the tableau by itself.                
                <param>
                    maximize if true, goal is to maximize the objective function                    
                </param>
                <return>
                    created tableau                    
                </return>
            </javadoc>
            <method name="createTableau" type="RealMatrix" line="161">
                <params>
                    <param name="maximize" type="boolean"/>
                </params>
                <declaration name="width" type="int" line="162"/>
                <declaration name="height" type="int" line="163"/>
                <declaration name="matrix" type="Array2DRowRealMatrix" line="164"/>
                <scope line="165"/>
                <declaration name="zIndex" type="int" line="168"/>
                <declaration name="objectiveCoefficients" type="RealVector" line="170"/>
                <scope line="173"/>
                <declaration name="slackVar" type="int" line="176"/>
                <declaration name="artificialVar" type="int" line="177"/>
                <scope line="178">
                    <declaration name="constraint" type="LinearConstraint" line="179"/>
                    <declaration name="row" type="int" line="180"/>
                    <scope line="182"/>
                    <scope line="186"/>
                    <scope line="189"/>
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="200">
                Get new versions of the constraints which have positive right hand sides.                
                <param>
                    originalConstraints original (not normalized) constraints                    
                </param>
                <return>
                    new versions of the constraints                    
                </return>
            </javadoc>
            <method name="normalizeConstraints" type="List<LinearConstraint>" line="205">
                <params>
                    <param name="originalConstraints" type="Collection<LinearConstraint>"/>
                </params>
                <declaration name="normalized" type="List&lt;LinearConstraint&gt;" line="206"/>
                <scope line="207"/>
            </method>
            <javadoc line="212">
                Get a new equation equivalent to this one with a positive right hand side.                
                <param>
                    constraint reference constraint                    
                </param>
                <return>
                    new equation                    
                </return>
            </javadoc>
            <method name="normalize" type="LinearConstraint" line="217">
                <params>
                    <param name="constraint" type="LinearConstraint"/>
                </params>
                <scope line="218"/>
            </method>
            <javadoc line="223">
                Get the number of objective functions in this tableau.                
                <return>
                    2 for Phase 1.  1 for Phase 2.                    
                </return>
            </javadoc>
            <method name="getNumObjectiveFunctions" type="int" line="227"/>
            <javadoc line="230">
                Get a count of constraints corresponding to a specified relationship.                
                <param>
                    relationship relationship to count                    
                </param>
                <return>
                    number of constraint with the specified relationship                    
                </return>
            </javadoc>
            <method name="getConstraintTypeCounts" type="int" line="235">
                <params>
                    <param name="relationship" type="Relationship"/>
                </params>
                <declaration name="count" type="int" line="236"/>
                <scope line="237">
                    <scope line="238"/>
                </scope>
            </method>
            <javadoc line="244">
                Get the -1 times the sum of all coefficients in the given array.                
                <param>
                    coefficients coefficients to sum                    
                </param>
                <return>
                    the -1 times the sum of all coefficients in the given array.                    
                </return>
            </javadoc>
            <method name="getInvertedCoefficientSum" type="double" line="249">
                <params>
                    <param name="coefficients" type="RealVector"/>
                </params>
                <declaration name="sum" type="double" line="250"/>
                <scope line="251"/>
            </method>
            <javadoc line="256">
                Checks whether the given column is basic.                
                <param>
                    col index of the column to check                    
                </param>
                <return>
                    the row that the variable is basic in.  null if the column is not basic                    
                </return>
            </javadoc>
            <method name="getBasicRow" type="Integer" line="261">
                <params>
                    <param name="col" type="int"/>
                </params>
                <declaration name="row" type="Integer" line="262"/>
                <scope line="263">
                    <declaration name="entry" type="double" line="264"/>
                    <scope line="265"/>
                    <scope line="268"/>
                </scope>
            </method>
            <javadoc line="274">
                Removes the phase 1 objective function, positive cost non-artificial variables,
                  and the non-basic artificial variables from this tableau.                
            </javadoc>
            <method name="dropPhase1Objective" type="void" line="278">
                <scope line="279"/>
                <declaration name="columnsToDrop" type="Set&lt;Integer&gt;" line="282"/>
                <scope line="284">
                    <declaration name="entry" type="double" line="285"/>
                    <scope line="286"/>
                </scope>
                <scope line="290">
                    <declaration name="col" type="int" line="291"/>
                    <scope line="292"/>
                </scope>
                <declaration name="matrix" type="double[][]" line="296"/>
                <scope line="297">
                    <declaration name="col" type="int" line="298"/>
                    <scope line="299">
                        <scope line="300"/>
                    </scope>
                </scope>
                <declaration name="drop" type="Integer[]" line="305"/>
                <scope line="306"/>
            </method>
            <javadoc line="312">
                @param src the source array                
                <param>
                    dest the destination array                    
                </param>
            </javadoc>
            <method name="copyArray" type="void" line="316">
                <params>
                    <param name="src" type="double[]"/>
                    <param name="dest" type="double[]"/>
                </params>
            </method>
            <javadoc line="319">
                Returns whether the problem is at an optimal state.                
                <return>
                    whether the model has been solved                    
                </return>
            </javadoc>
            <method name="isOptimal" type="boolean" line="323">
                <scope line="324">
                    <declaration name="entry" type="double" line="325"/>
                    <scope line="326"/>
                </scope>
            </method>
            <javadoc line="332">
                Get the current solution.                
                <return>
                    current solution                    
                </return>
            </javadoc>
            <method name="getSolution" type="PointValuePair" line="336">
                <declaration name="negativeVarColumn" type="int" line="337"/>
                <declaration name="negativeVarBasicRow" type="Integer" line="338"/>
                <declaration name="mostNegative" type="double" line="339"/>
                <declaration name="basicRows" type="Set&lt;Integer&gt;" line="340"/>
                <declaration name="coefficients" type="double[]" line="341"/>
                <scope line="342">
                    <declaration name="colIndex" type="int" line="343"/>
                    <scope line="344"/>
                    <declaration name="basicRow" type="Integer" line="348"/>
                    <scope line="349"/>
                    <scope line="352"/>
                    <scope line="355"/>
                </scope>
            </method>
            <javadoc line="362">
                Subtracts a multiple of one row from another.
                  &lt;p&gt;
                  After application of this operation, the following will hold:
                  &lt;pre&gt;minuendRow = minuendRow - multiple  subtrahendRow&lt;/pre&gt;                
                <param>
                    dividendRow index of the row                    
                </param>
                <param>
                    divisor value of the divisor                    
                </param>
            </javadoc>
            <method name="divideRow" type="void" line="370">
                <params>
                    <param name="dividendRow" type="int"/>
                    <param name="divisor" type="double"/>
                </params>
                <scope line="371"/>
            </method>
            <javadoc line="375">
                Subtracts a multiple of one row from another.
                  &lt;p&gt;
                  After application of this operation, the following will hold:
                  &lt;pre&gt;minuendRow = minuendRow - multiple  subtrahendRow&lt;/pre&gt;                
                <param>
                    minuendRow row index                    
                </param>
                <param>
                    subtrahendRow row index                    
                </param>
                <param>
                    multiple multiplication factor                    
                </param>
            </javadoc>
            <method name="subtractRow" type="void" line="384">
                <params>
                    <param name="minuendRow" type="int"/>
                    <param name="subtrahendRow" type="int"/>
                    <param name="multiple" type="double"/>
                </params>
                <scope line="385">
                    <declaration name="result" type="double" line="386"/>
                    <scope line="387"/>
                </scope>
            </method>
            <javadoc line="393">
                Get the width of the tableau.                
                <return>
                    width of the tableau                    
                </return>
            </javadoc>
            <method name="getWidth" type="int" line="397"/>
            <javadoc line="400">
                Get the height of the tableau.                
                <return>
                    height of the tableau                    
                </return>
            </javadoc>
            <method name="getHeight" type="int" line="404"/>
            <javadoc line="407">
                Get an entry of the tableau.                
                <param>
                    row row index                    
                </param>
                <param>
                    column column index                    
                </param>
                <return>
                    entry at (row, column)                    
                </return>
            </javadoc>
            <method name="getEntry" type="double" line="413">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="416">
                Set an entry of the tableau.                
                <param>
                    row row index                    
                </param>
                <param>
                    column column index                    
                </param>
                <param>
                    value for the entry                    
                </param>
            </javadoc>
            <method name="setEntry" type="void" line="422">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="425">
                Get the offset of the first slack variable.                
                <return>
                    offset of the first slack variable                    
                </return>
            </javadoc>
            <method name="getSlackVariableOffset" type="int" line="429"/>
            <javadoc line="432">
                Get the offset of the first artificial variable.                
                <return>
                    offset of the first artificial variable                    
                </return>
            </javadoc>
            <method name="getArtificialVariableOffset" type="int" line="436"/>
            <javadoc line="439">
                Get the offset of the right hand side.                
                <return>
                    offset of the right hand side                    
                </return>
            </javadoc>
            <method name="getRhsOffset" type="int" line="443"/>
            <javadoc line="446">
                Get the number of decision variables.
                  &lt;p&gt;
                  If variables are not restricted to positive values, this will include 1 extra decision variable to represent
                  the absolute value of the most negative variable.                
                <return>
                    number of decision variables                    
                </return>
                <see>
                    #getOriginalNumDecisionVariables()                    
                </see>
            </javadoc>
            <method name="getNumDecisionVariables" type="int" line="454"/>
            <javadoc line="457">
                Get the original number of decision variables.                
                <return>
                    original number of decision variables                    
                </return>
                <see>
                    #getNumDecisionVariables()                    
                </see>
            </javadoc>
            <method name="getOriginalNumDecisionVariables" type="int" line="462"/>
            <javadoc line="465">
                Get the number of slack variables.                
                <return>
                    number of slack variables                    
                </return>
            </javadoc>
            <method name="getNumSlackVariables" type="int" line="469"/>
            <javadoc line="472">
                Get the number of artificial variables.                
                <return>
                    number of artificial variables                    
                </return>
            </javadoc>
            <method name="getNumArtificialVariables" type="int" line="476"/>
            <javadoc line="479">
                Get the tableau data.                
                <return>
                    tableau data                    
                </return>
            </javadoc>
            <method name="getData" type="double[][]" line="483"/>
            <method name="equals" type="boolean" line="486">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="487"/>
                <scope line="490">
                    <declaration name="rhs" type="SimplexTableau" line="491"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="496"/>
            <javadoc line="499">
                Serialize the instance.                
                <param>
                    oos stream where object should be written                    
                </param>
                <throws>
                    IOException if object cannot be written to stream                    
                </throws>
            </javadoc>
            <method name="writeObject" type="void" line="504">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="508">
                Deserialize the instance.                
                <param>
                    ois stream from which the object should be read                    
                </param>
                <throws>
                    ClassNotFoundException if a class in the stream cannot be found                    
                </throws>
                <throws>
                    IOException if object cannot be read from the stream                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="514">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>