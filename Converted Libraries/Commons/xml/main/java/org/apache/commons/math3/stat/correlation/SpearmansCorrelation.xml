<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.correlation">
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.stat.ranking.NaNStrategy"/>
        <import package="org.apache.commons.math3.stat.ranking.NaturalRanking"/>
        <import package="org.apache.commons.math3.stat.ranking.RankingAlgorithm"/>
        <class name="SpearmansCorrelation" line="14">
            <javadoc line="14">
                Spearman&apos;s rank correlation. This implementation performs a rank
                  transformation on the input data and then computes {@link PearsonsCorrelation}on the ranked data.
                  &lt;p&gt;
                  By default, ranks are computed using {@link NaturalRanking} with default
                  strategies for handling NaNs and ties in the data (NaNs maximal, ties averaged).
                  The ranking algorithm can be set using a constructor argument.                
                <since>
                    2.0                    
                </since>
                <version>
                    $Id: SpearmansCorrelation.java 1461822 2013-03-27 19:44:22Z tn $                    
                </version>
            </javadoc>
            <declaration name="data" type="RealMatrix" line="25"/>
            <javadoc line="25">
                Input data                
            </javadoc>
            <declaration name="rankingAlgorithm" type="RankingAlgorithm" line="29"/>
            <javadoc line="29">
                Ranking algorithm                
            </javadoc>
            <declaration name="rankCorrelation" type="PearsonsCorrelation" line="33"/>
            <javadoc line="33">
                Rank correlation                
            </javadoc>
            <javadoc line="37">
                Create a SpearmansCorrelation without data.                
            </javadoc>
            <method name="SpearmansCorrelation" type="constructor" line="40"/>
            <javadoc line="43">
                Create a SpearmansCorrelation with the given ranking algorithm.
                  &lt;p&gt;
                  From version 4.0 onwards this constructor will throw an exception
                  if the provided {@link NaturalRanking} uses a {@link NaNStrategy#REMOVED} strategy.                
                <param>
                    rankingAlgorithm ranking algorithm                    
                </param>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="SpearmansCorrelation" type="constructor" line="51">
                <params>
                    <param name="rankingAlgorithm" type="RankingAlgorithm"/>
                </params>
            </method>
            <javadoc line="56">
                Create a SpearmansCorrelation from the given data matrix.                
                <param>
                    dataMatrix matrix of data with columns representing
                      variables to correlate                    
                </param>
            </javadoc>
            <method name="SpearmansCorrelation" type="constructor" line="61">
                <params>
                    <param name="dataMatrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="64">
                Create a SpearmansCorrelation with the given input data matrix
                  and ranking algorithm.
                  &lt;p&gt;
                  From version 4.0 onwards this constructor will throw an exception
                  if the provided {@link NaturalRanking} uses a {@link NaNStrategy#REMOVED} strategy.                
                <param>
                    dataMatrix matrix of data with columns representing
                      variables to correlate                    
                </param>
                <param>
                    rankingAlgorithm ranking algorithm                    
                </param>
            </javadoc>
            <method name="SpearmansCorrelation" type="constructor" line="74">
                <params>
                    <param name="dataMatrix" type="RealMatrix"/>
                    <param name="rankingAlgorithm" type="RankingAlgorithm"/>
                </params>
            </method>
            <javadoc line="79">
                Calculate the Spearman Rank Correlation Matrix.                
                <return>
                    Spearman Rank Correlation Matrix                    
                </return>
            </javadoc>
            <method name="getCorrelationMatrix" type="RealMatrix" line="83"/>
            <javadoc line="86">
                Returns a {@link PearsonsCorrelation} instance constructed from the
                  ranked input data. That is,
                  &lt;code&gt;new SpearmansCorrelation(matrix).getRankCorrelation()&lt;/code&gt;
                  is equivalent to
                  &lt;code&gt;new PearsonsCorrelation(rankTransform(matrix))&lt;/code&gt; where
                  &lt;code&gt;rankTransform(matrix)&lt;/code&gt; is the result of applying the
                  configured &lt;code&gt;RankingAlgorithm&lt;/code&gt; to each of the columns of
                  &lt;code&gt;matrix.&lt;/code&gt;                
                <return>
                    PearsonsCorrelation among ranked column data                    
                </return>
            </javadoc>
            <method name="getRankCorrelation" type="PearsonsCorrelation" line="97"/>
            <javadoc line="100">
                Computes the Spearman&apos;s rank correlation matrix for the columns of the
                  input matrix.                
                <param>
                    matrix matrix with columns representing variables to correlate                    
                </param>
                <return>
                    correlation matrix                    
                </return>
            </javadoc>
            <method name="computeCorrelationMatrix" type="RealMatrix" line="106">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="matrixCopy" type="RealMatrix" line="107"/>
            </method>
            <javadoc line="110">
                Computes the Spearman&apos;s rank correlation matrix for the columns of the
                  input rectangular array.  The columns of the array represent values
                  of variables to be correlated.                
                <param>
                    matrix matrix with columns representing variables to correlate                    
                </param>
                <return>
                    correlation matrix                    
                </return>
            </javadoc>
            <method name="computeCorrelationMatrix" type="RealMatrix" line="117">
                <params>
                    <param name="matrix" type="double[][]"/>
                </params>
            </method>
            <javadoc line="120">
                Computes the Spearman&apos;s rank correlation coefficient between the two arrays.                
                <param>
                    xArray first data array                    
                </param>
                <param>
                    yArray second data array                    
                </param>
                <return>
                    Returns Spearman's rank correlation coefficient for the two arrays                    
                </return>
                <throws>
                    DimensionMismatchException if the arrays lengths do not match                    
                </throws>
                <throws>
                    MathIllegalArgumentException if the array length is less than 2                    
                </throws>
            </javadoc>
            <method name="correlation" type="double" line="128">
                <params>
                    <param name="xArray" type="double[]"/>
                    <param name="yArray" type="double[]"/>
                </params>
                <scope line="129"/>
                <scope line="132"/>
                <scope line="135">
                    <declaration name="x" type="double[]" line="136"/>
                    <declaration name="y" type="double[]" line="137"/>
                    <scope line="138">
                        <declaration name="nanPositions" type="Set&lt;Integer&gt;" line="139"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="148">
                Applies rank transform to each of the columns of &lt;code&gt;matrix&lt;/code&gt;
                  using the current &lt;code&gt;rankingAlgorithm&lt;/code&gt;.                
                <param>
                    matrix matrix to transform                    
                </param>
                <return>
                    a rank-transformed matrix                    
                </return>
            </javadoc>
            <method name="rankTransform" type="RealMatrix" line="154">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="transformed" type="RealMatrix" line="155"/>
                <scope line="156">
                    <declaration name="nanPositions" type="Set&lt;Integer&gt;" line="157"/>
                    <scope line="158"/>
                    <scope line="161">
                        <scope line="163"/>
                    </scope>
                </scope>
                <scope line="168"/>
                <scope line="171"/>
            </method>
            <javadoc line="176">
                Returns a list containing the indices of NaN values in the input array.                
                <param>
                    input the input array                    
                </param>
                <return>
                    a list of NaN positions in the input array                    
                </return>
            </javadoc>
            <method name="getNaNPositions" type="List<Integer>" line="181">
                <params>
                    <param name="input" type="double[]"/>
                </params>
                <declaration name="positions" type="List&lt;Integer&gt;" line="182"/>
                <scope line="183">
                    <scope line="184"/>
                </scope>
            </method>
            <javadoc line="190">
                Removes all values from the input array at the specified indices.                
                <param>
                    input the input array                    
                </param>
                <param>
                    indices a set containing the indices to be removed                    
                </param>
                <return>
                    the input array without the values at the specified indices                    
                </return>
            </javadoc>
            <method name="removeValues" type="double[]" line="196">
                <params>
                    <param name="input" type="double[]"/>
                    <param name="indices" type="Set<Integer>"/>
                </params>
                <scope line="197"/>
                <declaration name="result" type="double[]" line="200"/>
                <scope line="201">
                    <scope line="202"/>
                </scope>
            </method>
        </class>
    </source>