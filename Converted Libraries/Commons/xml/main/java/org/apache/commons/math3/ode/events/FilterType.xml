<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.events">
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <javadoc line="22">
            Enumerate for {@link EventFilter filtering events}.            
            <version>
                $Id: FilterType.java 1458491 2013-03-19 20:13:11Z luc $                
            </version>
            <since>
                3.2                
            </since>
        </javadoc>
        <javadoc line="30">
            Constant for triggering only decreasing events.
              &lt;p&gt;When this filter is used, the wrapped {@link EventHandlerevent handler} {@link EventHandler#eventOccurred(double,double[],boolean) eventOccurred} method will be called &lt;em&gt;only&lt;/em&gt; with
              its {@code increasing} argument set to false.&lt;/p&gt;            
        </javadoc>
        <anonymous_class line="36">
            <javadoc line="38">
                {@inheritDoc}                
            </javadoc>
            <method name="getTriggeredIncreasing" type="boolean" line="39"/>
            <javadoc line="43">
                {@inheritDoc}&lt;p&gt;
                  states scheduling for computing h(t,y) as an altered version of g(t, y)
                  &lt;ul&gt;
                  &lt;li&gt;0 are triggered events for which a zero is produced (here decreasing events)&lt;/li&gt;
                  &lt;li&gt;X are ignored events for which zero is masked (here increasing events)&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;pre&gt;
                  g(t)
                  ___                     ___                     ___
                  /   \                   /   \                   /   \
                  /     \                 /     \                 /     \
                  /  g&gt;0  \               /  g&gt;0  \               /  g&gt;0  \
                  /         \             /         \             /         \
                  ----- X --------- 0 --------- X --------- 0 --------- X --------- 0 ---
                  /             \         /             \         /             \
                  /               \ g&lt;0   /               \  g&lt;0  /               \ g&lt;0
                  /                 \     /                 \     /                 \     /
                  ___/                   \___/                   \___/                   \___/
                  &lt;/pre&gt;
                  &lt;pre&gt;
                  h(t,y)) as an alteration of g(t,y)
                  ___                                 ___         ___
                  \       /   \                               /   \       /   \
                  \     /     \ h=+g                        /     \     /     \
                  \   /       \      h=min(-s,-g,+g)      /       \   /       \
                  \_/         \                         /         \_/         \
                  ------ ---------- 0 ----------_---------- 0 --------------------- 0 ---
                  \         / \         /                         \
                  h=max(+s,-g,+g)    \       /   \       /       h=max(+s,-g,+g)     \
                  \     /     \     / h=-g                        \     /
                  \___/       \___/                               \___/
                  &lt;/pre&gt;
                  &lt;p&gt;
                  As shown by the figure above, several expressions are used to compute h,
                  depending on the current state:
                  &lt;ul&gt;
                  &lt;li&gt;h = max(+s,-g,+g)&lt;/li&gt;
                  &lt;li&gt;h = +g&lt;/li&gt;
                  &lt;li&gt;h = min(-s,-g,+g)&lt;/li&gt;
                  &lt;li&gt;h = -g&lt;/li&gt;
                  &lt;/ul&gt;
                  where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.
                  &lt;/p&gt;                
            </javadoc>
            <method name="selectTransformer" type="Transformer" line="90">
                <params>
                    <param name="previous" type="Transformer"/>
                    <param name="g" type="double"/>
                    <param name="forward" type="boolean"/>
                </params>
                <comment line="95">
                    we are initializing the first point                    
                </comment>
                <comment line="97">
                    initialize as if previous root (i.e. backward one) was an ignored increasing event                    
                </comment>
                <comment line="100">
                    initialize as if previous root (i.e. backward one) was a triggered decreasing event                    
                </comment>
                <comment line="103">
                    we are exactly at a root, we don&apos;t know if it is an increasing
                     or a decreasing event, we remain in uninitialized state                    
                </comment>
                <comment line="109">
                    we have crossed the zero line on an ignored increasing event,
                     we must change the transformer                    
                </comment>
                <comment line="113">
                    we are still in the same status                    
                </comment>
                <comment line="118">
                    we have crossed the zero line on an ignored increasing event,
                     we must change the transformer                    
                </comment>
                <comment line="122">
                    we are still in the same status                    
                </comment>
                <comment line="127">
                    we have crossed the zero line on a triggered decreasing event,
                     we must change the transformer                    
                </comment>
                <comment line="131">
                    we are still in the same status                    
                </comment>
                <comment line="136">
                    we have crossed the zero line on a triggered decreasing event,
                     we must change the transformer                    
                </comment>
                <comment line="140">
                    we are still in the same status                    
                </comment>
                <comment line="144">
                    this should never happen                    
                </comment>
                <comment line="150">
                    we are initializing the first point                    
                </comment>
                <comment line="152">
                    initialize as if previous root (i.e. forward one) was a triggered decreasing event                    
                </comment>
                <comment line="155">
                    initialize as if previous root (i.e. forward one) was an ignored increasing event                    
                </comment>
                <comment line="158">
                    we are exactly at a root, we don&apos;t know if it is an increasing
                     or a decreasing event, we remain in uninitialized state                    
                </comment>
                <comment line="164">
                    we have crossed the zero line on an ignored increasing event,
                     we must change the transformer                    
                </comment>
                <comment line="168">
                    we are still in the same status                    
                </comment>
                <comment line="173">
                    we have crossed the zero line on an ignored increasing event,
                     we must change the transformer                    
                </comment>
                <comment line="177">
                    we are still in the same status                    
                </comment>
                <comment line="182">
                    we have crossed the zero line on a triggered decreasing event,
                     we must change the transformer                    
                </comment>
                <comment line="186">
                    we are still in the same status                    
                </comment>
                <comment line="191">
                    we have crossed the zero line on a triggered decreasing event,
                     we must change the transformer                    
                </comment>
                <comment line="195">
                    we are still in the same status                    
                </comment>
                <comment line="199">
                    this should never happen                    
                </comment>
                <scope line="91">
                    <scope line="95"/>
                    <scope line="98"/>
                    <scope line="101"/>
                    <scope line="107"/>
                    <scope line="111"/>
                    <scope line="116"/>
                    <scope line="120"/>
                    <scope line="125"/>
                    <scope line="129"/>
                    <scope line="134"/>
                    <scope line="138"/>
                </scope>
                <scope line="146">
                    <scope line="150"/>
                    <scope line="153"/>
                    <scope line="156"/>
                    <scope line="162"/>
                    <scope line="166"/>
                    <scope line="171"/>
                    <scope line="175"/>
                    <scope line="180"/>
                    <scope line="184"/>
                    <scope line="189"/>
                    <scope line="193"/>
                </scope>
            </method>
        </anonymous_class>
        <javadoc line="206">
            Constant for triggering only increasing events.
              &lt;p&gt;When this filter is used, the wrapped {@link EventHandlerevent handler} {@link EventHandler#eventOccurred(double,double[],boolean) eventOccurred} method will be called &lt;em&gt;only&lt;/em&gt; with
              its {@code increasing} argument set to true.&lt;/p&gt;            
        </javadoc>
        <anonymous_class line="212">
            <javadoc line="214">
                {@inheritDoc}                
            </javadoc>
            <method name="getTriggeredIncreasing" type="boolean" line="215"/>
            <javadoc line="219">
                {@inheritDoc}&lt;p&gt;
                  states scheduling for computing h(t,y) as an altered version of g(t, y)
                  &lt;ul&gt;
                  &lt;li&gt;0 are triggered events for which a zero is produced (here increasing events)&lt;/li&gt;
                  &lt;li&gt;X are ignored events for which zero is masked (here decreasing events)&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;pre&gt;
                  g(t)
                  ___                     ___                     ___
                  /   \                   /   \                   /   \
                  /     \                 /     \                 /     \
                  /  g&gt;0  \               /  g&gt;0  \               /  g&gt;0  \
                  /         \             /         \             /         \
                  ----- 0 --------- X --------- 0 --------- X --------- 0 --------- X ---
                  /             \         /             \         /             \
                  /               \ g&lt;0   /               \  g&lt;0  /               \ g&lt;0
                  /                 \     /                 \     /                 \     /
                  ___/                   \___/                   \___/                   \___/
                  &lt;/pre&gt;
                  &lt;pre&gt;
                  h(t,y)) as an alteration of g(t,y)
                  ___         ___
                  \                               /   \       /   \
                  \ h=-g                        /     \     /     \ h=-g
                  \      h=min(-s,-g,+g)      /       \   /       \      h=min(-s,-g,+g)
                  \                         /         \_/         \
                  ------0 ----------_---------- 0 --------------------- 0 --------- _ ---
                  \         / \         /                         \         / \
                  \       /   \       /       h=max(+s,-g,+g)     \       /   \
                  \     /     \     / h=+g                        \     /     \     /
                  \___/       \___/                               \___/       \___/
                  &lt;/pre&gt;
                  &lt;p&gt;
                  As shown by the figure above, several expressions are used to compute h,
                  depending on the current state:
                  &lt;ul&gt;
                  &lt;li&gt;h = max(+s,-g,+g)&lt;/li&gt;
                  &lt;li&gt;h = +g&lt;/li&gt;
                  &lt;li&gt;h = min(-s,-g,+g)&lt;/li&gt;
                  &lt;li&gt;h = -g&lt;/li&gt;
                  &lt;/ul&gt;
                  where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.
                  &lt;/p&gt;                
            </javadoc>
            <method name="selectTransformer" type="Transformer" line="266">
                <params>
                    <param name="previous" type="Transformer"/>
                    <param name="g" type="double"/>
                    <param name="forward" type="boolean"/>
                </params>
                <comment line="271">
                    we are initializing the first point                    
                </comment>
                <comment line="273">
                    initialize as if previous root (i.e. backward one) was a triggered increasing event                    
                </comment>
                <comment line="276">
                    initialize as if previous root (i.e. backward one) was an ignored decreasing event                    
                </comment>
                <comment line="279">
                    we are exactly at a root, we don&apos;t know if it is an increasing
                     or a decreasing event, we remain in uninitialized state                    
                </comment>
                <comment line="285">
                    we have crossed the zero line on an ignored decreasing event,
                     we must change the transformer                    
                </comment>
                <comment line="289">
                    we are still in the same status                    
                </comment>
                <comment line="294">
                    we have crossed the zero line on an ignored decreasing event,
                     we must change the transformer                    
                </comment>
                <comment line="298">
                    we are still in the same status                    
                </comment>
                <comment line="303">
                    we have crossed the zero line on a triggered increasing event,
                     we must change the transformer                    
                </comment>
                <comment line="307">
                    we are still in the same status                    
                </comment>
                <comment line="312">
                    we have crossed the zero line on a triggered increasing event,
                     we must change the transformer                    
                </comment>
                <comment line="316">
                    we are still in the same status                    
                </comment>
                <comment line="320">
                    this should never happen                    
                </comment>
                <comment line="326">
                    we are initializing the first point                    
                </comment>
                <comment line="328">
                    initialize as if previous root (i.e. forward one) was an ignored decreasing event                    
                </comment>
                <comment line="331">
                    initialize as if previous root (i.e. forward one) was a triggered increasing event                    
                </comment>
                <comment line="334">
                    we are exactly at a root, we don&apos;t know if it is an increasing
                     or a decreasing event, we remain in uninitialized state                    
                </comment>
                <comment line="340">
                    we have crossed the zero line on an ignored decreasing event,
                     we must change the transformer                    
                </comment>
                <comment line="344">
                    we are still in the same status                    
                </comment>
                <comment line="349">
                    we have crossed the zero line on an ignored decreasing event,
                     we must change the transformer                    
                </comment>
                <comment line="353">
                    we are still in the same status                    
                </comment>
                <comment line="358">
                    we have crossed the zero line on a triggered increasing event,
                     we must change the transformer                    
                </comment>
                <comment line="362">
                    we are still in the same status                    
                </comment>
                <comment line="367">
                    we have crossed the zero line on a triggered increasing event,
                     we must change the transformer                    
                </comment>
                <comment line="371">
                    we are still in the same status                    
                </comment>
                <comment line="375">
                    this should never happen                    
                </comment>
                <scope line="267">
                    <scope line="271"/>
                    <scope line="274"/>
                    <scope line="277"/>
                    <scope line="283"/>
                    <scope line="287"/>
                    <scope line="292"/>
                    <scope line="296"/>
                    <scope line="301"/>
                    <scope line="305"/>
                    <scope line="310"/>
                    <scope line="314"/>
                </scope>
                <scope line="322">
                    <scope line="326"/>
                    <scope line="329"/>
                    <scope line="332"/>
                    <scope line="338"/>
                    <scope line="342"/>
                    <scope line="347"/>
                    <scope line="351"/>
                    <scope line="356"/>
                    <scope line="360"/>
                    <scope line="365"/>
                    <scope line="369"/>
                </scope>
            </method>
        </anonymous_class>
        <method name="getTriggeredIncreasing" type="boolean" line="382"/>
        <javadoc line="382">
            Get the increasing status of triggered events.            
            <return>
                true if triggered events are increasing events                
            </return>
        </javadoc>
        <method name="selectTransformer" type="Transformer" line="387"/>
        <javadoc line="387">
            Get next function transformer in the specified direction.            
            <param>
                previous transformer active on the previous point with respect
                  to integration direction (may be null if no previous point is known)                
            </param>
            <param>
                g current value of the g function                
            </param>
            <param>
                forward true if integration goes forward                
            </param>
            <return>
                next transformer transformer                
            </return>
        </javadoc>
    </source>