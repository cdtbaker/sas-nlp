<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <class name="NelderMeadSimplex" line="5">
            <extends class="AbstractSimplex"/>
            <javadoc line="5">
                This class implements the Nelder-Mead simplex algorithm.                
                <version>
                    $Id: NelderMeadSimplex.java 1422230 2012-12-15 12:11:13Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_RHO" type="double" line="12"/>
            <javadoc line="12">
                Default value for {@link #rho}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_KHI" type="double" line="16"/>
            <javadoc line="16">
                Default value for {@link #khi}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_GAMMA" type="double" line="20"/>
            <javadoc line="20">
                Default value for {@link #gamma}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_SIGMA" type="double" line="24"/>
            <javadoc line="24">
                Default value for {@link #sigma}: {@value}.                
            </javadoc>
            <declaration name="rho" type="double" line="28"/>
            <javadoc line="28">
                Reflection coefficient.                
            </javadoc>
            <declaration name="khi" type="double" line="32"/>
            <javadoc line="32">
                Expansion coefficient.                
            </javadoc>
            <declaration name="gamma" type="double" line="36"/>
            <javadoc line="36">
                Contraction coefficient.                
            </javadoc>
            <declaration name="sigma" type="double" line="40"/>
            <javadoc line="40">
                Shrinkage coefficient.                
            </javadoc>
            <javadoc line="44">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    n Dimension of the simplex.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="50">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="53">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    n Dimension of the simplex.                    
                </param>
                <param>
                    sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="61">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                </params>
            </method>
            <javadoc line="64">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
                <param>
                    sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="74">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="81">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int)}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="89">
                <params>
                    <param name="n" type="int"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="92">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="99">
                <params>
                    <param name="steps" type="double[]"/>
                </params>
            </method>
            <javadoc line="102">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
                <throws>
                    IllegalArgumentException if one of the steps is zero.                    
                </throws>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="112">
                <params>
                    <param name="steps" type="double[]"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="119">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="125">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                </params>
            </method>
            <javadoc line="128">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.                    
                </throws>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="138">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="145">
                {@inheritDoc}                
            </javadoc>
            <method name="iterate" type="void" line="148">
                <params>
                    <param name="evaluationFunction" type="MultivariateFunction"/>
                    <param name="comparator" type="Comparator<PointValuePair>"/>
                </params>
                <declaration name="n" type="int" line="149"/>
                <declaration name="best" type="PointValuePair" line="150"/>
                <declaration name="secondBest" type="PointValuePair" line="151"/>
                <declaration name="worst" type="PointValuePair" line="152"/>
                <declaration name="xWorst" type="double[]" line="153"/>
                <declaration name="centroid" type="double[]" line="154"/>
                <scope line="155">
                    <declaration name="x" type="double[]" line="156"/>
                    <scope line="157"/>
                </scope>
                <declaration name="scaling" type="double" line="161"/>
                <scope line="162"/>
                <declaration name="xR" type="double[]" line="165"/>
                <scope line="166"/>
                <declaration name="reflected" type="PointValuePair" line="169"/>
                <scope line="170"/>
                <scope line="173">
                    <declaration name="xE" type="double[]" line="174"/>
                    <scope line="175"/>
                    <declaration name="expanded" type="PointValuePair" line="178"/>
                    <scope line="179"/>
                    <scope line="182"/>
                </scope>
                <scope line="186">
                    <scope line="187">
                        <declaration name="xC" type="double[]" line="188"/>
                        <scope line="189"/>
                        <declaration name="outContracted" type="PointValuePair" line="192"/>
                        <scope line="193"/>
                    </scope>
                    <scope line="198">
                        <declaration name="xC" type="double[]" line="199"/>
                        <scope line="200"/>
                        <declaration name="inContracted" type="PointValuePair" line="203"/>
                        <scope line="204"/>
                    </scope>
                    <declaration name="xSmallest" type="double[]" line="209"/>
                    <scope line="210">
                        <declaration name="x" type="double[]" line="211"/>
                        <scope line="212"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>