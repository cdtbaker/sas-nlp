<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="DiagonalMatrix" line="11">
            <extends class="AbstractRealMatrix"/>
            <implements interface="Serializable"/>
            <javadoc line="11">
                Implementation of a diagonal matrix.                
                <version>
                    $Id$                    
                </version>
                <since>
                    3.1.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="17"/>
            <javadoc line="17">
                Serializable version identifier.                
            </javadoc>
            <declaration name="data" type="double[]" line="21"/>
            <javadoc line="21">
                Entries of the diagonal.                
            </javadoc>
            <javadoc line="25">
                Creates a matrix with the supplied dimension.                
                <param>
                    dimension Number of rows and columns in the new matrix.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if the dimension is
                      not positive.                    
                </throws>
            </javadoc>
            <method name="DiagonalMatrix" type="constructor" line="31">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="35">
                Creates a matrix using the input array as the underlying data.
                  &lt;br/&gt;
                  The input array is copied, not referenced.                
                <param>
                    d Data for the new matrix.                    
                </param>
            </javadoc>
            <method name="DiagonalMatrix" type="constructor" line="41">
                <params>
                    <param name="d" type="double[]"/>
                </params>
            </method>
            <javadoc line="44">
                Creates a matrix using the input array as the underlying data.
                  &lt;br/&gt;
                  If an array is created specially in order to be embedded in a
                  this instance and not used directly, the {@code copyArray} may be
                  set to {@code false}.
                  This will prevent the copying and improve performance as no new
                  array will be built and no data will be copied.                
                <param>
                    d Data for new matrix.                    
                </param>
                <param>
                    copyArray if {@code true}, the input array will be copied,
                      otherwise it will be referenced.                    
                </param>
                <exception>
                    NullArgumentException if d is null                    
                </exception>
            </javadoc>
            <method name="DiagonalMatrix" type="constructor" line="57">
                <params>
                    <param name="d" type="double[]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
            </method>
            <javadoc line="61">
                {@inheritDoc}                
                <throws>
                    DimensionMismatchException if the requested dimensions are not equal.                    
                </throws>
            </javadoc>
            <method name="createMatrix" type="RealMatrix" line="65">
                <params>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
                <scope line="66"/>
            </method>
            <javadoc line="71">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="RealMatrix" line="74"/>
            <javadoc line="77">
                Compute the sum of {@code this} and {@code m}.                
                <param>
                    m Matrix to be added.                    
                </param>
                <return>
                    {@code this + m}.                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this}.                    
                </throws>
            </javadoc>
            <method name="add" type="DiagonalMatrix" line="84">
                <params>
                    <param name="m" type="DiagonalMatrix"/>
                </params>
                <declaration name="dim" type="int" line="86"/>
                <declaration name="outData" type="double[]" line="87"/>
                <scope line="88"/>
            </method>
            <javadoc line="93">
                Returns {@code this} minus {@code m}.                
                <param>
                    m Matrix to be subtracted.                    
                </param>
                <return>
                    {@code this - m}                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="DiagonalMatrix" line="100">
                <params>
                    <param name="m" type="DiagonalMatrix"/>
                </params>
                <declaration name="dim" type="int" line="102"/>
                <declaration name="outData" type="double[]" line="103"/>
                <scope line="104"/>
            </method>
            <javadoc line="109">
                Returns the result of postmultiplying {@code this} by {@code m}.                
                <param>
                    m matrix to postmultiply by                    
                </param>
                <return>
                    {@code this  m}                    
                </return>
                <throws>
                    DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}                    
                </throws>
            </javadoc>
            <method name="multiply" type="DiagonalMatrix" line="115">
                <params>
                    <param name="m" type="DiagonalMatrix"/>
                </params>
                <declaration name="dim" type="int" line="117"/>
                <declaration name="outData" type="double[]" line="118"/>
                <scope line="119"/>
            </method>
            <javadoc line="124">
                Returns the result of postmultiplying {@code this} by {@code m}.                
                <param>
                    m matrix to postmultiply by                    
                </param>
                <return>
                    {@code this  m}                    
                </return>
                <throws>
                    DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}                    
                </throws>
            </javadoc>
            <method name="multiply" type="RealMatrix" line="130">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <scope line="131"/>
                <scope line="134">
                    <declaration name="nRows" type="int" line="136"/>
                    <declaration name="nCols" type="int" line="137"/>
                    <declaration name="product" type="double[][]" line="138"/>
                    <scope line="139">
                        <scope line="140"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="147">
                {@inheritDoc}                
            </javadoc>
            <method name="getData" type="double[][]" line="150">
                <declaration name="dim" type="int" line="151"/>
                <declaration name="out" type="double[][]" line="152"/>
                <scope line="153"/>
            </method>
            <javadoc line="158">
                Gets a reference to the underlying data array.                
                <return>
                    1-dimensional array of entries.                    
                </return>
            </javadoc>
            <method name="getDataRef" type="double[]" line="162"/>
            <javadoc line="165">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="double" line="168">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="172">
                {@inheritDoc}                
                <throws>
                    NumberIsTooLargeException if {@code row != column} and value is non-zero.                    
                </throws>
            </javadoc>
            <method name="setEntry" type="void" line="176">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="177"/>
                <scope line="181"/>
            </method>
            <javadoc line="185">
                {@inheritDoc}                
                <throws>
                    NumberIsTooLargeException if {@code row != column} and increment is non-zero.                    
                </throws>
            </javadoc>
            <method name="addToEntry" type="void" line="189">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="increment" type="double"/>
                </params>
                <scope line="190"/>
                <scope line="194"/>
            </method>
            <javadoc line="198">
                {@inheritDoc}                
            </javadoc>
            <method name="multiplyEntry" type="void" line="201">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="factor" type="double"/>
                </params>
                <scope line="202"/>
            </method>
            <javadoc line="207">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="210"/>
            <javadoc line="213">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="216"/>
            <javadoc line="219">
                {@inheritDoc}                
            </javadoc>
            <method name="operate" type="double[]" line="222">
                <params>
                    <param name="v" type="double[]"/>
                </params>
            </method>
            <javadoc line="225">
                {@inheritDoc}                
            </javadoc>
            <method name="preMultiply" type="double[]" line="228">
                <params>
                    <param name="v" type="double[]"/>
                </params>
            </method>
            <javadoc line="231">
                Ensure a value is zero.                
                <param>
                    value value to check                    
                </param>
                <exception>
                    NumberIsTooLargeException if value is not zero                    
                </exception>
            </javadoc>
            <method name="ensureZero" type="void" line="236">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="237"/>
            </method>
        </class>
    </source>