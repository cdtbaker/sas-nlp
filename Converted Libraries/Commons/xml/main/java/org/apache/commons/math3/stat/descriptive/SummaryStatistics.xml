<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.GeometricMean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Mean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.SecondMoment"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Max"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Min"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.Sum"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfLogs"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfSquares"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="SummaryStatistics" line="37">
            <comment line="407">
                Getters and setters for statistics implementations                
            </comment>
            <implements interface="StatisticalSummary"/>
            <implements interface="Serializable"/>
            <javadoc line="37">
                &lt;p&gt;
                  Computes summary statistics for a stream of data values added using the{@link #addValue(double) addValue} method. The data values are not stored in
                  memory, so this class can be used to compute statistics for very large data
                  streams.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The {@link StorelessUnivariateStatistic} instances used to maintain summary
                  state and compute statistics are configurable via setters. For example, the
                  default implementation for the variance can be overridden by calling{@link #setVarianceImpl(StorelessUnivariateStatistic)}. Actual parameters to
                  these methods must implement the {@link StorelessUnivariateStatistic}interface and configuration must be completed before &lt;code&gt;addValue&lt;/code&gt;
                  is called. No configuration is necessary to use the default, commons-math
                  provided implementations.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Note: This class is not thread-safe. Use{@link SynchronizedSummaryStatistics} if concurrent access from multiple
                  threads is required.
                  &lt;/p&gt;                
                <version>
                    $Id: SummaryStatistics.java 1520076 2013-09-04 17:24:02Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="63"/>
            <javadoc line="63">
                Serialization UID                
            </javadoc>
            <declaration name="n" type="long" line="66"/>
            <javadoc line="66">
                count of values that have been added                
            </javadoc>
            <declaration name="secondMoment" type="SecondMoment" line="69"/>
            <javadoc line="69">
                SecondMoment is used to compute the mean and variance                
            </javadoc>
            <declaration name="sum" type="Sum" line="72"/>
            <javadoc line="72">
                sum of values that have been added                
            </javadoc>
            <declaration name="sumsq" type="SumOfSquares" line="75"/>
            <javadoc line="75">
                sum of the square of each value that has been added                
            </javadoc>
            <declaration name="min" type="Min" line="78"/>
            <javadoc line="78">
                min of values that have been added                
            </javadoc>
            <declaration name="max" type="Max" line="81"/>
            <javadoc line="81">
                max of values that have been added                
            </javadoc>
            <declaration name="sumLog" type="SumOfLogs" line="84"/>
            <javadoc line="84">
                sumLog of values that have been added                
            </javadoc>
            <declaration name="geoMean" type="GeometricMean" line="87"/>
            <javadoc line="87">
                geoMean of values that have been added                
            </javadoc>
            <declaration name="mean" type="Mean" line="90"/>
            <javadoc line="90">
                mean of values that have been added                
            </javadoc>
            <declaration name="variance" type="Variance" line="93"/>
            <javadoc line="93">
                variance of values that have been added                
            </javadoc>
            <declaration name="sumImpl" type="StorelessUnivariateStatistic" line="96"/>
            <javadoc line="96">
                Sum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="sumsqImpl" type="StorelessUnivariateStatistic" line="99"/>
            <javadoc line="99">
                Sum of squares statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="minImpl" type="StorelessUnivariateStatistic" line="102"/>
            <javadoc line="102">
                Minimum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="maxImpl" type="StorelessUnivariateStatistic" line="105"/>
            <javadoc line="105">
                Maximum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="sumLogImpl" type="StorelessUnivariateStatistic" line="108"/>
            <javadoc line="108">
                Sum of log statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="geoMeanImpl" type="StorelessUnivariateStatistic" line="111"/>
            <javadoc line="111">
                Geometric mean statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="meanImpl" type="StorelessUnivariateStatistic" line="114"/>
            <javadoc line="114">
                Mean statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="varianceImpl" type="StorelessUnivariateStatistic" line="117"/>
            <javadoc line="117">
                Variance statistic implementation - can be reset by setter.                
            </javadoc>
            <javadoc line="120">
                Construct a SummaryStatistics instance                
            </javadoc>
            <method name="SummaryStatistics" type="constructor" line="123"/>
            <javadoc line="126">
                A copy constructor. Creates a deep-copy of the {@code original}.                
                <param>
                    original the {@code SummaryStatistics} instance to copy                    
                </param>
                <throws>
                    NullArgumentException if original is null                    
                </throws>
            </javadoc>
            <method name="SummaryStatistics" type="constructor" line="132">
                <params>
                    <param name="original" type="SummaryStatistics"/>
                </params>
            </method>
            <javadoc line="136">
                Return a {@link StatisticalSummaryValues} instance reporting current
                  statistics.                
                <return>
                    Current values of statistics                    
                </return>
            </javadoc>
            <method name="getSummary" type="StatisticalSummary" line="141"/>
            <javadoc line="146">
                Add a value to the data                
                <param>
                    value the value to add                    
                </param>
            </javadoc>
            <method name="addValue" type="void" line="150">
                <params>
                    <param name="value" type="double"/>
                </params>
                <comment line="158">
                    If mean, variance or geomean have been overridden,
                     need to increment these                    
                </comment>
                <scope line="159"/>
                <scope line="162"/>
                <scope line="165"/>
            </method>
            <javadoc line="171">
                Returns the number of available values                
                <return>
                    The number of available values                    
                </return>
            </javadoc>
            <method name="getN" type="long" line="175"/>
            <javadoc line="179">
                Returns the sum of the values that have been added                
                <return>
                    The sum or &lt;code&gt;Double.NaN&lt;/code&gt; if no values have been added                    
                </return>
            </javadoc>
            <method name="getSum" type="double" line="183"/>
            <javadoc line="187">
                Returns the sum of the squares of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    The sum of squares                    
                </return>
            </javadoc>
            <method name="getSumsq" type="double" line="194"/>
            <javadoc line="198">
                Returns the mean of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the mean                    
                </return>
            </javadoc>
            <method name="getMean" type="double" line="205"/>
            <javadoc line="209">
                Returns the standard deviation of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the standard deviation                    
                </return>
            </javadoc>
            <method name="getStandardDeviation" type="double" line="216">
                <declaration name="stdDev" type="double" line="217"/>
                <scope line="218">
                    <scope line="219"/>
                    <scope line="221"/>
                </scope>
            </method>
            <javadoc line="228">
                Returns the (sample) variance of the available values.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected
                  population variance.&lt;/p&gt;
                  &lt;p&gt;Double.NaN is returned if no values have been added.&lt;/p&gt;                
                <return>
                    the variance                    
                </return>
            </javadoc>
            <method name="getVariance" type="double" line="239"/>
            <javadoc line="243">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the values that have been added.
                  &lt;p&gt;Double.NaN is returned if no values have been added.&lt;/p&gt;                
                <return>
                    the population variance                    
                </return>
            </javadoc>
            <method name="getPopulationVariance" type="double" line="251">
                <declaration name="populationVariance" type="Variance" line="252"/>
            </method>
            <javadoc line="257">
                Returns the maximum of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the maximum                    
                </return>
            </javadoc>
            <method name="getMax" type="double" line="264"/>
            <javadoc line="268">
                Returns the minimum of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the minimum                    
                </return>
            </javadoc>
            <method name="getMin" type="double" line="275"/>
            <javadoc line="279">
                Returns the geometric mean of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the geometric mean                    
                </return>
            </javadoc>
            <method name="getGeometricMean" type="double" line="286"/>
            <javadoc line="290">
                Returns the sum of the logs of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the sum of logs                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSumOfLogs" type="double" line="298"/>
            <javadoc line="302">
                Returns a statistic related to the Second Central Moment.  Specifically,
                  what is returned is the sum of squared deviations from the sample mean
                  among the values that have been added.
                  &lt;p&gt;
                  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if no data values have been added and
                  returns &lt;code&gt;0&lt;/code&gt; if there is just one value in the data set.&lt;/p&gt;
                  &lt;p&gt;                
                <return>
                    second central moment statistic                    
                </return>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="getSecondMoment" type="double" line="313"/>
            <javadoc line="317">
                Generates a text report displaying summary statistics from values that
                  have been added.                
                <return>
                    String with line feeds displaying statistics                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="324">
                <declaration name="outBuffer" type="StringBuilder" line="325"/>
                <declaration name="endl" type="String" line="326"/>
            </method>
            <javadoc line="342">
                Resets all statistics and storage                
            </javadoc>
            <method name="clear" type="void" line="345">
                <scope line="354"/>
                <scope line="357"/>
            </method>
            <javadoc line="362">
                Returns true iff &lt;code&gt;object&lt;/code&gt; is a
                  &lt;code&gt;SummaryStatistics&lt;/code&gt; instance and all statistics have the
                  same values as this.                
                <param>
                    object the object to test equality against.                    
                </param>
                <return>
                    true if object equals this                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="370">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="371"/>
                <scope line="374"/>
                <declaration name="stat" type="SummaryStatistics" line="377"/>
            </method>
            <javadoc line="388">
                Returns hash code based on values of statistics                
                <return>
                    hash code                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="393">
                <declaration name="result" type="int" line="394"/>
            </method>
            <javadoc line="407">
                Returns the currently configured Sum implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the sum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSumImpl" type="StorelessUnivariateStatistic" line="412"/>
            <javadoc line="416">
                &lt;p&gt;
                  Sets the implementation for the Sum.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method cannot be activated after data has been added - i.e.,
                  after {@link #addValue(double) addValue} has been used to add data.
                  If it is activated after data has been added, an IllegalStateException
                  will be thrown.
                  &lt;/p&gt;                
                <param>
                    sumImpl the StorelessUnivariateStatistic instance to use for
                      computing the Sum                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n &gt;0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setSumImpl" type="void" line="432">
                <params>
                    <param name="sumImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="437">
                Returns the currently configured sum of squares implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the sum of squares                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSumsqImpl" type="StorelessUnivariateStatistic" line="442"/>
            <javadoc line="446">
                &lt;p&gt;
                  Sets the implementation for the sum of squares.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method cannot be activated after data has been added - i.e.,
                  after {@link #addValue(double) addValue} has been used to add data.
                  If it is activated after data has been added, an IllegalStateException
                  will be thrown.
                  &lt;/p&gt;                
                <param>
                    sumsqImpl the StorelessUnivariateStatistic instance to use for
                      computing the sum of squares                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n &gt; 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setSumsqImpl" type="void" line="462">
                <params>
                    <param name="sumsqImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="467">
                Returns the currently configured minimum implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the minimum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMinImpl" type="StorelessUnivariateStatistic" line="472"/>
            <javadoc line="476">
                &lt;p&gt;
                  Sets the implementation for the minimum.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method cannot be activated after data has been added - i.e.,
                  after {@link #addValue(double) addValue} has been used to add data.
                  If it is activated after data has been added, an IllegalStateException
                  will be thrown.
                  &lt;/p&gt;                
                <param>
                    minImpl the StorelessUnivariateStatistic instance to use for
                      computing the minimum                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n &gt; 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setMinImpl" type="void" line="492">
                <params>
                    <param name="minImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="497">
                Returns the currently configured maximum implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the maximum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMaxImpl" type="StorelessUnivariateStatistic" line="502"/>
            <javadoc line="506">
                &lt;p&gt;
                  Sets the implementation for the maximum.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method cannot be activated after data has been added - i.e.,
                  after {@link #addValue(double) addValue} has been used to add data.
                  If it is activated after data has been added, an IllegalStateException
                  will be thrown.
                  &lt;/p&gt;                
                <param>
                    maxImpl the StorelessUnivariateStatistic instance to use for
                      computing the maximum                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n &gt; 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setMaxImpl" type="void" line="522">
                <params>
                    <param name="maxImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="527">
                Returns the currently configured sum of logs implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the log sum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSumLogImpl" type="StorelessUnivariateStatistic" line="532"/>
            <javadoc line="536">
                &lt;p&gt;
                  Sets the implementation for the sum of logs.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method cannot be activated after data has been added - i.e.,
                  after {@link #addValue(double) addValue} has been used to add data.
                  If it is activated after data has been added, an IllegalStateException
                  will be thrown.
                  &lt;/p&gt;                
                <param>
                    sumLogImpl the StorelessUnivariateStatistic instance to use for
                      computing the log sum                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n &gt; 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setSumLogImpl" type="void" line="552">
                <params>
                    <param name="sumLogImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="558">
                Returns the currently configured geometric mean implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the geometric mean                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getGeoMeanImpl" type="StorelessUnivariateStatistic" line="563"/>
            <javadoc line="567">
                &lt;p&gt;
                  Sets the implementation for the geometric mean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method cannot be activated after data has been added - i.e.,
                  after {@link #addValue(double) addValue} has been used to add data.
                  If it is activated after data has been added, an IllegalStateException
                  will be thrown.
                  &lt;/p&gt;                
                <param>
                    geoMeanImpl the StorelessUnivariateStatistic instance to use for
                      computing the geometric mean                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n &gt; 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setGeoMeanImpl" type="void" line="583">
                <params>
                    <param name="geoMeanImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="588">
                Returns the currently configured mean implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the mean                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMeanImpl" type="StorelessUnivariateStatistic" line="593"/>
            <javadoc line="597">
                &lt;p&gt;
                  Sets the implementation for the mean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method cannot be activated after data has been added - i.e.,
                  after {@link #addValue(double) addValue} has been used to add data.
                  If it is activated after data has been added, an IllegalStateException
                  will be thrown.
                  &lt;/p&gt;                
                <param>
                    meanImpl the StorelessUnivariateStatistic instance to use for
                      computing the mean                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n &gt; 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setMeanImpl" type="void" line="613">
                <params>
                    <param name="meanImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="618">
                Returns the currently configured variance implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the variance                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getVarianceImpl" type="StorelessUnivariateStatistic" line="623"/>
            <javadoc line="627">
                &lt;p&gt;
                  Sets the implementation for the variance.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method cannot be activated after data has been added - i.e.,
                  after {@link #addValue(double) addValue} has been used to add data.
                  If it is activated after data has been added, an IllegalStateException
                  will be thrown.
                  &lt;/p&gt;                
                <param>
                    varianceImpl the StorelessUnivariateStatistic instance to use for
                      computing the variance                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n &gt; 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setVarianceImpl" type="void" line="643">
                <params>
                    <param name="varianceImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="648">
                Throws IllegalStateException if n &gt; 0.                
                <throws>
                    MathIllegalStateException if data has been added                    
                </throws>
            </javadoc>
            <method name="checkEmpty" type="void" line="652">
                <scope line="653"/>
            </method>
            <javadoc line="659">
                Returns a copy of this SummaryStatistics instance with the same internal state.                
                <return>
                    a copy of this                    
                </return>
            </javadoc>
            <method name="copy" type="SummaryStatistics" line="664">
                <comment line="667">
                    No try-catch or advertised exception because arguments are guaranteed non-null                    
                </comment>
                <declaration name="result" type="SummaryStatistics" line="665"/>
            </method>
            <javadoc line="671">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source SummaryStatistics to copy                    
                </param>
                <param>
                    dest SummaryStatistics to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="680">
                <params>
                    <param name="source" type="SummaryStatistics"/>
                    <param name="dest" type="SummaryStatistics"/>
                </params>
                <comment line="692">
                    Keep commons-math supplied statistics with embedded moments in synch                    
                </comment>
                <comment line="709">
                    Make sure that if stat == statImpl in source, same
                     holds in dest; otherwise copy stat                    
                </comment>
                <scope line="692"/>
                <scope line="694"/>
                <scope line="697"/>
                <scope line="699"/>
                <scope line="702"/>
                <scope line="704"/>
                <scope line="710"/>
                <scope line="712"/>
                <scope line="715"/>
                <scope line="717"/>
                <scope line="720"/>
                <scope line="722"/>
                <scope line="725"/>
                <scope line="727"/>
                <scope line="730"/>
                <scope line="732"/>
                <scope line="735"/>
                <scope line="737"/>
                <scope line="740"/>
                <scope line="742"/>
                <scope line="745"/>
                <scope line="747"/>
            </method>
        </class>
    </source>