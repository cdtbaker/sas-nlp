<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.GeometricMean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Mean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.SecondMoment"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Max"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Min"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.Sum"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfLogs"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfSquares"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="SummaryStatistics" line="18">
            <implements interface="StatisticalSummary"/>
            <implements interface="Serializable"/>
            <javadoc line="18">
                &lt;p&gt;
                  Computes summary statistics for a stream of data values added using the{@link #addValue(double) addValue} method. The data values are not stored in
                  memory, so this class can be used to compute statistics for very large data
                  streams.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The {@link StorelessUnivariateStatistic} instances used to maintain summary
                  state and compute statistics are configurable via setters. For example, the
                  default implementation for the variance can be overridden by calling{@link #setVarianceImpl(StorelessUnivariateStatistic)}. Actual parameters to
                  these methods must implement the {@link StorelessUnivariateStatistic}interface and configuration must be completed before &lt;code&gt;addValue&lt;/code&gt;
                  is called. No configuration is necessary to use the default, commons-math
                  provided implementations.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Note: This class is not thread-safe. Use{@link SynchronizedSummaryStatistics} if concurrent access from multiple
                  threads is required.
                  &lt;/p&gt;                
                <version>
                    $Id: SummaryStatistics.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <javadoc line="39">
                Serialization UID                
            </javadoc>
            <declaration name="n" type="long" line="43"/>
            <javadoc line="43">
                count of values that have been added                
            </javadoc>
            <declaration name="secondMoment" type="SecondMoment" line="47"/>
            <javadoc line="47">
                SecondMoment is used to compute the mean and variance                
            </javadoc>
            <declaration name="sum" type="Sum" line="51"/>
            <javadoc line="51">
                sum of values that have been added                
            </javadoc>
            <declaration name="sumsq" type="SumOfSquares" line="55"/>
            <javadoc line="55">
                sum of the square of each value that has been added                
            </javadoc>
            <declaration name="min" type="Min" line="59"/>
            <javadoc line="59">
                min of values that have been added                
            </javadoc>
            <declaration name="max" type="Max" line="63"/>
            <javadoc line="63">
                max of values that have been added                
            </javadoc>
            <declaration name="sumLog" type="SumOfLogs" line="67"/>
            <javadoc line="67">
                sumLog of values that have been added                
            </javadoc>
            <declaration name="geoMean" type="GeometricMean" line="71"/>
            <javadoc line="71">
                geoMean of values that have been added                
            </javadoc>
            <declaration name="mean" type="Mean" line="75"/>
            <javadoc line="75">
                mean of values that have been added                
            </javadoc>
            <declaration name="variance" type="Variance" line="79"/>
            <javadoc line="79">
                variance of values that have been added                
            </javadoc>
            <declaration name="sumImpl" type="StorelessUnivariateStatistic" line="83"/>
            <javadoc line="83">
                Sum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="sumsqImpl" type="StorelessUnivariateStatistic" line="87"/>
            <javadoc line="87">
                Sum of squares statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="minImpl" type="StorelessUnivariateStatistic" line="91"/>
            <javadoc line="91">
                Minimum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="maxImpl" type="StorelessUnivariateStatistic" line="95"/>
            <javadoc line="95">
                Maximum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="sumLogImpl" type="StorelessUnivariateStatistic" line="99"/>
            <javadoc line="99">
                Sum of log statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="geoMeanImpl" type="StorelessUnivariateStatistic" line="103"/>
            <javadoc line="103">
                Geometric mean statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="meanImpl" type="StorelessUnivariateStatistic" line="107"/>
            <javadoc line="107">
                Mean statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="varianceImpl" type="StorelessUnivariateStatistic" line="111"/>
            <javadoc line="111">
                Variance statistic implementation - can be reset by setter.                
            </javadoc>
            <javadoc line="115">
                Construct a SummaryStatistics instance                
            </javadoc>
            <method name="SummaryStatistics" type="constructor" line="118"/>
            <javadoc line="120">
                A copy constructor. Creates a deep-copy of the {@code original}.                
                <param>
                    original the {@code SummaryStatistics} instance to copy                    
                </param>
                <throws>
                    NullArgumentException if original is null                    
                </throws>
            </javadoc>
            <method name="SummaryStatistics" type="constructor" line="125">
                <params>
                    <param name="original" type="SummaryStatistics"/>
                </params>
            </method>
            <javadoc line="128">
                Return a {@link StatisticalSummaryValues} instance reporting current
                  statistics.                
                <return>
                    Current values of statistics                    
                </return>
            </javadoc>
            <method name="getSummary" type="StatisticalSummary" line="133"/>
            <javadoc line="136">
                Add a value to the data                
                <param>
                    value the value to add                    
                </param>
            </javadoc>
            <method name="addValue" type="void" line="140">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="147"/>
                <scope line="150"/>
                <scope line="153"/>
            </method>
            <javadoc line="158">
                Returns the number of available values                
                <return>
                    The number of available values                    
                </return>
            </javadoc>
            <method name="getN" type="long" line="162"/>
            <javadoc line="165">
                Returns the sum of the values that have been added                
                <return>
                    The sum or <code>Double.NaN</code> if no values have been added                    
                </return>
            </javadoc>
            <method name="getSum" type="double" line="169"/>
            <javadoc line="172">
                Returns the sum of the squares of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    The sum of squares                    
                </return>
            </javadoc>
            <method name="getSumsq" type="double" line="179"/>
            <javadoc line="182">
                Returns the mean of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the mean                    
                </return>
            </javadoc>
            <method name="getMean" type="double" line="189"/>
            <javadoc line="192">
                Returns the standard deviation of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the standard deviation                    
                </return>
            </javadoc>
            <method name="getStandardDeviation" type="double" line="199">
                <declaration name="stdDev" type="double" line="200"/>
                <scope line="201">
                    <scope line="202"/>
                    <scope line="205"/>
                </scope>
            </method>
            <javadoc line="211">
                Returns the (sample) variance of the available values.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected
                  population variance.&lt;/p&gt;
                  &lt;p&gt;Double.NaN is returned if no values have been added.&lt;/p&gt;                
                <return>
                    the variance                    
                </return>
            </javadoc>
            <method name="getVariance" type="double" line="219"/>
            <javadoc line="222">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the values that have been added.
                  &lt;p&gt;Double.NaN is returned if no values have been added.&lt;/p&gt;                
                <return>
                    the population variance                    
                </return>
            </javadoc>
            <method name="getPopulationVariance" type="double" line="228">
                <declaration name="populationVariance" type="Variance" line="229"/>
            </method>
            <javadoc line="233">
                Returns the maximum of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the maximum                    
                </return>
            </javadoc>
            <method name="getMax" type="double" line="240"/>
            <javadoc line="243">
                Returns the minimum of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the minimum                    
                </return>
            </javadoc>
            <method name="getMin" type="double" line="250"/>
            <javadoc line="253">
                Returns the geometric mean of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the geometric mean                    
                </return>
            </javadoc>
            <method name="getGeometricMean" type="double" line="260"/>
            <javadoc line="263">
                Returns the sum of the logs of the values that have been added.
                  &lt;p&gt;
                  Double.NaN is returned if no values have been added.
                  &lt;/p&gt;                
                <return>
                    the sum of logs                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSumOfLogs" type="double" line="271"/>
            <javadoc line="274">
                Returns a statistic related to the Second Central Moment.  Specifically,
                  what is returned is the sum of squared deviations from the sample mean
                  among the values that have been added.
                  &lt;p&gt;
                  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if no data values have been added and
                  returns &lt;code&gt;0&lt;/code&gt; if there is just one value in the data set.&lt;/p&gt;
                  &lt;p&gt;                
                <return>
                    second central moment statistic                    
                </return>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="getSecondMoment" type="double" line="285"/>
            <javadoc line="288">
                Generates a text report displaying summary statistics from values that
                  have been added.                
                <return>
                    String with line feeds displaying statistics                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="294">
                <declaration name="outBuffer" type="StringBuilder" line="295"/>
                <declaration name="endl" type="String" line="296"/>
            </method>
            <javadoc line="309">
                Resets all statistics and storage                
            </javadoc>
            <method name="clear" type="void" line="312">
                <scope line="321"/>
                <scope line="324"/>
            </method>
            <javadoc line="328">
                Returns true iff &lt;code&gt;object&lt;/code&gt; is a
                  &lt;code&gt;SummaryStatistics&lt;/code&gt; instance and all statistics have the
                  same values as this.                
                <param>
                    object the object to test equality against.                    
                </param>
                <return>
                    true if object equals this                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="335">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="336"/>
                <scope line="339"/>
                <declaration name="stat" type="SummaryStatistics" line="342"/>
            </method>
            <javadoc line="345">
                Returns hash code based on values of statistics                
                <return>
                    hash code                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="349">
                <declaration name="result" type="int" line="350"/>
            </method>
            <javadoc line="361">
                Returns the currently configured Sum implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the sum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSumImpl" type="StorelessUnivariateStatistic" line="366"/>
            <javadoc line="369">
                &lt;p&gt;
                  Sets the implementation for the Sum.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.
                  &lt;/p&gt;                
                <param>
                    sumImpl the StorelessUnivariateStatistic instance to use for
                      computing the Sum                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n >0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setSumImpl" type="void" line="383">
                <params>
                    <param name="sumImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="387">
                Returns the currently configured sum of squares implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the sum of squares                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSumsqImpl" type="StorelessUnivariateStatistic" line="392"/>
            <javadoc line="395">
                &lt;p&gt;
                  Sets the implementation for the sum of squares.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.
                  &lt;/p&gt;                
                <param>
                    sumsqImpl the StorelessUnivariateStatistic instance to use for
                      computing the sum of squares                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n > 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setSumsqImpl" type="void" line="409">
                <params>
                    <param name="sumsqImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="413">
                Returns the currently configured minimum implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the minimum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMinImpl" type="StorelessUnivariateStatistic" line="418"/>
            <javadoc line="421">
                &lt;p&gt;
                  Sets the implementation for the minimum.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.
                  &lt;/p&gt;                
                <param>
                    minImpl the StorelessUnivariateStatistic instance to use for
                      computing the minimum                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n > 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setMinImpl" type="void" line="435">
                <params>
                    <param name="minImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="439">
                Returns the currently configured maximum implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the maximum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMaxImpl" type="StorelessUnivariateStatistic" line="444"/>
            <javadoc line="447">
                &lt;p&gt;
                  Sets the implementation for the maximum.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.
                  &lt;/p&gt;                
                <param>
                    maxImpl the StorelessUnivariateStatistic instance to use for
                      computing the maximum                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n > 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setMaxImpl" type="void" line="461">
                <params>
                    <param name="maxImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="465">
                Returns the currently configured sum of logs implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the log sum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSumLogImpl" type="StorelessUnivariateStatistic" line="470"/>
            <javadoc line="473">
                &lt;p&gt;
                  Sets the implementation for the sum of logs.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.
                  &lt;/p&gt;                
                <param>
                    sumLogImpl the StorelessUnivariateStatistic instance to use for
                      computing the log sum                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n > 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setSumLogImpl" type="void" line="487">
                <params>
                    <param name="sumLogImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="492">
                Returns the currently configured geometric mean implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the geometric mean                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getGeoMeanImpl" type="StorelessUnivariateStatistic" line="497"/>
            <javadoc line="500">
                &lt;p&gt;
                  Sets the implementation for the geometric mean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.
                  &lt;/p&gt;                
                <param>
                    geoMeanImpl the StorelessUnivariateStatistic instance to use for
                      computing the geometric mean                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n > 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setGeoMeanImpl" type="void" line="514">
                <params>
                    <param name="geoMeanImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="518">
                Returns the currently configured mean implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the mean                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMeanImpl" type="StorelessUnivariateStatistic" line="523"/>
            <javadoc line="526">
                &lt;p&gt;
                  Sets the implementation for the mean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.
                  &lt;/p&gt;                
                <param>
                    meanImpl the StorelessUnivariateStatistic instance to use for
                      computing the mean                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n > 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setMeanImpl" type="void" line="540">
                <params>
                    <param name="meanImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="544">
                Returns the currently configured variance implementation                
                <return>
                    the StorelessUnivariateStatistic implementing the variance                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getVarianceImpl" type="StorelessUnivariateStatistic" line="549"/>
            <javadoc line="552">
                &lt;p&gt;
                  Sets the implementation for the variance.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method must be activated before any data has been added - i.e.,
                  before {@link #addValue(double) addValue} has been used to add data;
                  otherwise an IllegalStateException will be thrown.
                  &lt;/p&gt;                
                <param>
                    varianceImpl the StorelessUnivariateStatistic instance to use for
                      computing the variance                    
                </param>
                <throws>
                    MathIllegalStateException if data has already been added (i.e if n > 0)                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setVarianceImpl" type="void" line="566">
                <params>
                    <param name="varianceImpl" type="StorelessUnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="570">
                Throws IllegalStateException if n &gt; 0.                
                <throws>
                    MathIllegalStateException if data has been added                    
                </throws>
            </javadoc>
            <method name="checkEmpty" type="void" line="574">
                <scope line="575"/>
            </method>
            <javadoc line="579">
                Returns a copy of this SummaryStatistics instance with the same internal state.                
                <return>
                    a copy of this                    
                </return>
            </javadoc>
            <method name="copy" type="SummaryStatistics" line="583">
                <declaration name="result" type="SummaryStatistics" line="584"/>
            </method>
            <javadoc line="588">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source SummaryStatistics to copy                    
                </param>
                <param>
                    dest SummaryStatistics to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="595">
                <params>
                    <param name="source" type="SummaryStatistics"/>
                    <param name="dest" type="SummaryStatistics"/>
                </params>
                <scope line="605"/>
                <scope line="608"/>
                <scope line="611"/>
                <scope line="614"/>
                <scope line="617"/>
                <scope line="620"/>
                <scope line="623"/>
                <scope line="626"/>
                <scope line="629"/>
                <scope line="632"/>
                <scope line="635"/>
                <scope line="638"/>
                <scope line="641"/>
                <scope line="644"/>
                <scope line="647"/>
                <scope line="650"/>
                <scope line="653"/>
                <scope line="656"/>
                <scope line="659"/>
                <scope line="662"/>
                <scope line="665"/>
                <scope line="668"/>
            </method>
        </class>
    </source>