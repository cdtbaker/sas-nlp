<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="KMeansPlusPlusClusterer" line="13">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="13">
                Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.                
                <param>
                    <T>
                      type of the points to cluster                    
                </param>
                <see>
                    <a href="http://en.wikipedia.org/wiki/K-means%2B%2B">K-means++ (wikipedia)</a>                    
                </see>
                <version>
                    $Id: KMeansPlusPlusClusterer.java 1461871 2013-03-27 22:01:25Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
                <deprecated>
                    As of 3.2 (to be removed in 4.0),
                      use {@link org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer} instead                    
                </deprecated>
            </javadoc>
            <declaration name="EmptyClusterStrategy" type="enum" line="24"/>
            <javadoc line="24">
                Strategies to use for replacing an empty cluster.                
            </javadoc>
            <scope line="27"/>
            <declaration name="random" type="Random" line="40"/>
            <javadoc line="40">
                Random generator for choosing initial centers.                
            </javadoc>
            <declaration name="emptyStrategy" type="EmptyClusterStrategy" line="44"/>
            <javadoc line="44">
                Selected strategy for empty clusters.                
            </javadoc>
            <javadoc line="48">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.
                  &lt;/p&gt;                
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="56">
                <params>
                    <param name="random" type="Random"/>
                </params>
            </method>
            <javadoc line="59">
                Build a clusterer.                
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
                <param>
                    emptyStrategy strategy to use for handling empty clusters that
                      may appear during algorithm iterations                    
                </param>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="66">
                <params>
                    <param name="random" type="Random"/>
                    <param name="emptyStrategy" type="EmptyClusterStrategy"/>
                </params>
            </method>
            <javadoc line="70">
                Runs the K-means++ clustering algorithm.                
                <param>
                    points the points to cluster                    
                </param>
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    numTrials number of trial runs                    
                </param>
                <param>
                    maxIterationsPerTrial the maximum number of iterations to run the algorithm
                      for at each trial run.  If negative, no maximum will be used                    
                </param>
                <return>
                    a list of clusters containing the points                    
                </return>
                <throws>
                    MathIllegalArgumentException if the data points are null or the number
                      of clusters is larger than the number of data points                    
                </throws>
                <throws>
                    ConvergenceException if an empty cluster is encountered and the{@link #emptyStrategy} is set to {@code ERROR}                    
                </throws>
            </javadoc>
            <method name="cluster" type="List<Cluster<T>>" line="82">
                <params>
                    <param name="points" type="Collection<T>"/>
                    <param name="k" type="int"/>
                    <param name="numTrials" type="int"/>
                    <param name="maxIterationsPerTrial" type="int"/>
                </params>
                <declaration name="best" type="List&lt;Cluster&lt;T&gt;&gt;" line="83"/>
                <declaration name="bestVarianceSum" type="double" line="84"/>
                <scope line="85">
                    <declaration name="clusters" type="List&lt;Cluster&lt;T&gt;&gt;" line="86"/>
                    <declaration name="varianceSum" type="double" line="87"/>
                    <scope line="88">
                        <scope line="89">
                            <declaration name="center" type="T" line="90"/>
                            <declaration name="stat" type="Variance" line="91"/>
                            <scope line="92"/>
                        </scope>
                    </scope>
                    <scope line="98"/>
                </scope>
            </method>
            <javadoc line="105">
                Runs the K-means++ clustering algorithm.                
                <param>
                    points the points to cluster                    
                </param>
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm
                      for.  If negative, no maximum will be used                    
                </param>
                <return>
                    a list of clusters containing the points                    
                </return>
                <throws>
                    MathIllegalArgumentException if the data points are null or the number
                      of clusters is larger than the number of data points                    
                </throws>
                <throws>
                    ConvergenceException if an empty cluster is encountered and the{@link #emptyStrategy} is set to {@code ERROR}                    
                </throws>
            </javadoc>
            <method name="cluster" type="List<Cluster<T>>" line="116">
                <params>
                    <param name="points" type="Collection<T>"/>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <scope line="118"/>
                <declaration name="clusters" type="List&lt;Cluster&lt;T&gt;&gt;" line="121"/>
                <declaration name="assignments" type="int[]" line="122"/>
                <declaration name="max" type="int" line="124"/>
                <scope line="125">
                    <declaration name="emptyCluster" type="boolean" line="126"/>
                    <declaration name="newClusters" type="List&lt;Cluster&lt;T&gt;&gt;" line="127"/>
                    <scope line="128">
                        <declaration name="newCenter" type="T" line="129"/>
                        <scope line="130"/>
                        <scope line="146"/>
                    </scope>
                    <declaration name="changes" type="int" line="151"/>
                    <scope line="153"/>
                </scope>
            </method>
            <javadoc line="159">
                Adds the given points to the closest {@link Cluster}.                
                <param>
                    <T>
                      type of the points to cluster                    
                </param>
                <param>
                    clusters the {@link Cluster}s to add the points to                    
                </param>
                <param>
                    points the points to add to the given {@link Cluster}s                    
                </param>
                <param>
                    assignments points assignments to clusters                    
                </param>
                <return>
                    the number of points assigned to different clusters as the iteration before                    
                </return>
            </javadoc>
            <method name="assignPointsToClusters" type="int" line="168">
                <params>
                    <param name="clusters" type="List<Cluster<T>>"/>
                    <param name="points" type="Collection<T>"/>
                    <param name="assignments" type="int[]"/>
                </params>
                <declaration name="assignedDifferently" type="int" line="169"/>
                <declaration name="pointIndex" type="int" line="170"/>
                <scope line="171">
                    <declaration name="clusterIndex" type="int" line="172"/>
                    <scope line="173"/>
                    <declaration name="cluster" type="Cluster&lt;T&gt;" line="176"/>
                </scope>
            </method>
            <javadoc line="182">
                Use K-means++ to choose the initial centers.                
                <param>
                    <T>
                      type of the points to cluster                    
                </param>
                <param>
                    points the points to choose the initial centers from                    
                </param>
                <param>
                    k the number of centers to choose                    
                </param>
                <param>
                    random random generator to use                    
                </param>
                <return>
                    the initial centers                    
                </return>
            </javadoc>
            <method name="chooseInitialCenters" type="List<Cluster<T>>" line="191">
                <params>
                    <param name="points" type="Collection<T>"/>
                    <param name="k" type="int"/>
                    <param name="random" type="Random"/>
                </params>
                <declaration name="pointList" type="List&lt;T&gt;" line="192"/>
                <declaration name="numPoints" type="int" line="193"/>
                <declaration name="taken" type="boolean[]" line="194"/>
                <declaration name="resultSet" type="List&lt;Cluster&lt;T&gt;&gt;" line="195"/>
                <declaration name="firstPointIndex" type="int" line="196"/>
                <declaration name="firstPoint" type="T" line="197"/>
                <declaration name="minDistSquared" type="double[]" line="200"/>
                <scope line="201">
                    <scope line="202">
                        <declaration name="d" type="double" line="203"/>
                    </scope>
                </scope>
                <scope line="207">
                    <declaration name="distSqSum" type="double" line="208"/>
                    <scope line="209">
                        <scope line="210"/>
                    </scope>
                    <declaration name="r" type="double" line="214"/>
                    <declaration name="nextPointIndex" type="int" line="215"/>
                    <declaration name="sum" type="double" line="216"/>
                    <scope line="217">
                        <scope line="218">
                            <scope line="220"/>
                        </scope>
                    </scope>
                    <scope line="226">
                        <scope line="227">
                            <scope line="228"/>
                        </scope>
                    </scope>
                    <scope line="234">
                        <declaration name="p" type="T" line="235"/>
                        <scope line="238">
                            <scope line="239">
                                <scope line="240">
                                    <declaration name="d" type="double" line="241"/>
                                    <declaration name="d2" type="double" line="242"/>
                                    <scope line="243"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="250"/>
                </scope>
            </method>
            <javadoc line="256">
                Get a random point from the {@link Cluster} with the largest distance variance.                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    a random point from the selected cluster                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getPointFromLargestVarianceCluster" type="T" line="262">
                <params>
                    <param name="clusters" type="Collection<Cluster<T>>"/>
                </params>
                <declaration name="maxVariance" type="double" line="263"/>
                <declaration name="selected" type="Cluster&lt;T&gt;" line="264"/>
                <scope line="265">
                    <scope line="266">
                        <declaration name="center" type="T" line="267"/>
                        <declaration name="stat" type="Variance" line="268"/>
                        <scope line="269"/>
                        <declaration name="variance" type="double" line="272"/>
                        <scope line="273"/>
                    </scope>
                </scope>
                <scope line="279"/>
                <declaration name="selectedPoints" type="List&lt;T&gt;" line="282"/>
            </method>
            <javadoc line="285">
                Get a random point from the {@link Cluster} with the largest number of points                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    a random point from the selected cluster                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getPointFromLargestNumberCluster" type="T" line="291">
                <params>
                    <param name="clusters" type="Collection<Cluster<T>>"/>
                </params>
                <declaration name="maxNumber" type="int" line="292"/>
                <declaration name="selected" type="Cluster&lt;T&gt;" line="293"/>
                <scope line="294">
                    <declaration name="number" type="int" line="295"/>
                    <scope line="296"/>
                </scope>
                <scope line="301"/>
                <declaration name="selectedPoints" type="List&lt;T&gt;" line="304"/>
            </method>
            <javadoc line="307">
                Get the point farthest to its cluster center                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    point farthest to its cluster center                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getFarthestPoint" type="T" line="313">
                <params>
                    <param name="clusters" type="Collection<Cluster<T>>"/>
                </params>
                <declaration name="maxDistance" type="double" line="314"/>
                <declaration name="selectedCluster" type="Cluster&lt;T&gt;" line="315"/>
                <declaration name="selectedPoint" type="int" line="316"/>
                <scope line="317">
                    <declaration name="center" type="T" line="318"/>
                    <declaration name="points" type="List&lt;T&gt;" line="319"/>
                    <scope line="320">
                        <declaration name="distance" type="double" line="321"/>
                        <scope line="322"/>
                    </scope>
                </scope>
                <scope line="329"/>
            </method>
            <javadoc line="334">
                Returns the nearest {@link Cluster} to the given point                
                <param>
                    <T>
                      type of the points to cluster                    
                </param>
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <param>
                    point the point to find the nearest {@link Cluster} for                    
                </param>
                <return>
                    the index of the nearest {@link Cluster} to the given point                    
                </return>
            </javadoc>
            <method name="getNearestCluster" type="int" line="342">
                <params>
                    <param name="clusters" type="Collection<Cluster<T>>"/>
                    <param name="point" type="T"/>
                </params>
                <declaration name="minDistance" type="double" line="343"/>
                <declaration name="clusterIndex" type="int" line="344"/>
                <declaration name="minCluster" type="int" line="345"/>
                <scope line="346">
                    <declaration name="distance" type="double" line="347"/>
                    <scope line="348"/>
                </scope>
            </method>
        </class>
    </source>