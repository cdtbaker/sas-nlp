<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="KMeansPlusPlusClusterer" line="33">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="33">
                Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.                
                <param>
                    <T>
                       type of the points to cluster                    
                </param>
                <see>
                    <a href="http://en.wikipedia.org/wiki/K-means%2B%2B">K-means++ (wikipedia)</a>                    
                </see>
                <version>
                    $Id: KMeansPlusPlusClusterer.java 1461871 2013-03-27 22:01:25Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
                <deprecated>
                    As of 3.2 (to be removed in 4.0),
                      use {@link org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer} instead                    
                </deprecated>
            </javadoc>
            <javadoc line="45">
                Strategies to use for replacing an empty cluster.                
            </javadoc>
            <javadoc line="48">
                Split the cluster with largest distance variance.                
            </javadoc>
            <javadoc line="51">
                Split the cluster with largest number of points.                
            </javadoc>
            <javadoc line="54">
                Create a cluster around the point farthest from its centroid.                
            </javadoc>
            <javadoc line="57">
                Generate an error.                
            </javadoc>
            <declaration name="random" type="Random" line="62"/>
            <javadoc line="62">
                Random generator for choosing initial centers.                
            </javadoc>
            <declaration name="emptyStrategy" type="EmptyClusterStrategy" line="65"/>
            <javadoc line="65">
                Selected strategy for empty clusters.                
            </javadoc>
            <javadoc line="68">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.
                  &lt;/p&gt;                
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="75">
                <params>
                    <param name="random" type="Random"/>
                </params>
            </method>
            <javadoc line="79">
                Build a clusterer.                
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
                <param>
                    emptyStrategy strategy to use for handling empty clusters that
                      may appear during algorithm iterations                    
                </param>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="85">
                <params>
                    <param name="random" type="Random"/>
                    <param name="emptyStrategy" type="EmptyClusterStrategy"/>
                </params>
            </method>
            <javadoc line="90">
                Runs the K-means++ clustering algorithm.                
                <param>
                    points the points to cluster                    
                </param>
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    numTrials number of trial runs                    
                </param>
                <param>
                    maxIterationsPerTrial the maximum number of iterations to run the algorithm
                      for at each trial run.  If negative, no maximum will be used                    
                </param>
                <return>
                    a list of clusters containing the points                    
                </return>
                <throws>
                    MathIllegalArgumentException if the data points are null or the number
                      of clusters is larger than the number of data points                    
                </throws>
                <throws>
                    ConvergenceException if an empty cluster is encountered and the{@link #emptyStrategy} is set to {@code ERROR}                    
                </throws>
            </javadoc>
            <method name="cluster" type="List<Cluster<T>>" line="106">
                <params>
                    <param name="points" type="Collection<T>"/>
                    <param name="k" type="int"/>
                    <param name="numTrials" type="int"/>
                    <param name="maxIterationsPerTrial" type="int"/>
                </params>
                <comment line="109">
                    at first, we have not found any clusters list yet                    
                </comment>
                <comment line="113">
                    do several clustering trials                    
                </comment>
                <comment line="116">
                    compute a clusters list                    
                </comment>
                <comment line="119">
                    compute the variance of the current list                    
                </comment>
                <comment line="124">
                    compute the distance variance of the current cluster                    
                </comment>
                <comment line="136">
                    this one is the best we have found so far, remember it                    
                </comment>
                <comment line="143">
                    return the best clusters list found                    
                </comment>
                <declaration name="best" type="List&lt;Cluster&lt;T&gt;&gt;" line="109"/>
                <declaration name="bestVarianceSum" type="double" line="110"/>
                <scope line="113">
                    <declaration name="clusters" type="List&lt;Cluster&lt;T&gt;&gt;" line="116"/>
                    <declaration name="varianceSum" type="double" line="119"/>
                    <scope line="120">
                        <scope line="121">
                            <declaration name="center" type="T" line="124"/>
                            <declaration name="stat" type="Variance" line="125"/>
                            <scope line="126"/>
                        </scope>
                    </scope>
                    <scope line="134"/>
                </scope>
            </method>
            <javadoc line="147">
                Runs the K-means++ clustering algorithm.                
                <param>
                    points the points to cluster                    
                </param>
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm
                      for.  If negative, no maximum will be used                    
                </param>
                <return>
                    a list of clusters containing the points                    
                </return>
                <throws>
                    MathIllegalArgumentException if the data points are null or the number
                      of clusters is larger than the number of data points                    
                </throws>
                <throws>
                    ConvergenceException if an empty cluster is encountered and the{@link #emptyStrategy} is set to {@code ERROR}                    
                </throws>
            </javadoc>
            <method name="cluster" type="List<Cluster<T>>" line="162">
                <params>
                    <param name="points" type="Collection<T>"/>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <comment line="165">
                    sanity checks                    
                </comment>
                <comment line="168">
                    number of clusters has to be smaller or equal the number of data points                    
                </comment>
                <comment line="173">
                    create the initial clusters                    
                </comment>
                <comment line="176">
                    create an array containing the latest assignment of a point to a cluster
                     no need to initialize the array, as it will be filled with the first assignment                    
                </comment>
                <comment line="181">
                    iterate through updating the centers until we&apos;re done                    
                </comment>
                <comment line="211">
                    if there were no more changes in the point-to-cluster assignment
                     and there are no empty clusters left, return the current clusters                    
                </comment>
                <scope line="168"/>
                <declaration name="clusters" type="List&lt;Cluster&lt;T&gt;&gt;" line="173"/>
                <declaration name="assignments" type="int[]" line="177"/>
                <declaration name="max" type="int" line="181"/>
                <scope line="182">
                    <declaration name="emptyCluster" type="boolean" line="183"/>
                    <declaration name="newClusters" type="List&lt;Cluster&lt;T&gt;&gt;" line="184"/>
                    <scope line="185">
                        <declaration name="newCenter" type="T" line="186"/>
                        <scope line="187"/>
                        <scope line="202"/>
                    </scope>
                    <declaration name="changes" type="int" line="207"/>
                    <scope line="212"/>
                </scope>
            </method>
            <javadoc line="219">
                Adds the given points to the closest {@link Cluster}.                
                <param>
                    <T>
                       type of the points to cluster                    
                </param>
                <param>
                    clusters the {@link Cluster}s to add the points to                    
                </param>
                <param>
                    points the points to add to the given {@link Cluster}s                    
                </param>
                <param>
                    assignments points assignments to clusters                    
                </param>
                <return>
                    the number of points assigned to different clusters as the iteration before                    
                </return>
            </javadoc>
            <method name="assignPointsToClusters" type="int" line="230">
                <params>
                    <param name="clusters" type="List<Cluster<T>>"/>
                    <param name="points" type="Collection<T>"/>
                    <param name="assignments" type="int[]"/>
                </params>
                <declaration name="assignedDifferently" type="int" line="231"/>
                <declaration name="pointIndex" type="int" line="232"/>
                <scope line="233">
                    <declaration name="clusterIndex" type="int" line="234"/>
                    <scope line="235"/>
                    <declaration name="cluster" type="Cluster&lt;T&gt;" line="239"/>
                </scope>
            </method>
            <javadoc line="247">
                Use K-means++ to choose the initial centers.                
                <param>
                    <T>
                       type of the points to cluster                    
                </param>
                <param>
                    points the points to choose the initial centers from                    
                </param>
                <param>
                    k the number of centers to choose                    
                </param>
                <param>
                    random random generator to use                    
                </param>
                <return>
                    the initial centers                    
                </return>
            </javadoc>
            <method name="chooseInitialCenters" type="List<Cluster<T>>" line="257">
                <params>
                    <param name="points" type="Collection<T>"/>
                    <param name="k" type="int"/>
                    <param name="random" type="Random"/>
                </params>
                <comment line="260">
                    Convert to list for indexed access. Make it unmodifiable, since removal of items
                     would screw up the logic of this method.                    
                </comment>
                <comment line="264">
                    The number of points in the list.                    
                </comment>
                <comment line="267">
                    Set the corresponding element in this array to indicate when
                     elements of pointList are no longer available.                    
                </comment>
                <comment line="271">
                    The resulting list of initial centers.                    
                </comment>
                <comment line="274">
                    Choose one center uniformly at random from among the data points.                    
                </comment>
                <comment line="281">
                    Must mark it as taken                    
                </comment>
                <comment line="284">
                    To keep track of the minimum distance squared of elements of
                     pointList to elements of resultSet.                    
                </comment>
                <comment line="288">
                    Initialize the elements.  Since the only point in resultSet is firstPoint,
                     this is very easy.                    
                </comment>
                <comment line="291">
                    That point isn&apos;t considered                    
                </comment>
                <comment line="299">
                    Sum up the squared distances for the points in pointList not
                     already taken.                    
                </comment>
                <comment line="309">
                    Add one new data point as a center. Each point x is chosen with
                     probability proportional to D(x)2                    
                </comment>
                <comment line="313">
                    The index of the next point to be added to the resultSet.                    
                </comment>
                <comment line="316">
                    Sum through the squared min distances again, stopping when
                     sum &gt;= r.                    
                </comment>
                <comment line="329">
                    If it&apos;s not set to &gt;= 0, the point wasn&apos;t found in the previous
                     for loop, probably because distances are extremely small.  Just pick
                     the last available point.                    
                </comment>
                <comment line="341">
                    We found one.                    
                </comment>
                <comment line="348">
                    Mark it as taken.                    
                </comment>
                <comment line="352">
                    Now update elements of minDistSquared.  We only have to compute
                     the distance to the new center to do this.                    
                </comment>
                <comment line="355">
                    Only have to worry about the points still not taken.                    
                </comment>
                <comment line="367">
                    None found --
                     Break from the while loop to prevent
                     an infinite loop.                    
                </comment>
                <declaration name="pointList" type="List&lt;T&gt;" line="261"/>
                <declaration name="numPoints" type="int" line="264"/>
                <declaration name="taken" type="boolean[]" line="268"/>
                <declaration name="resultSet" type="List&lt;Cluster&lt;T&gt;&gt;" line="271"/>
                <declaration name="firstPointIndex" type="int" line="274"/>
                <declaration name="firstPoint" type="T" line="276"/>
                <declaration name="minDistSquared" type="double[]" line="285"/>
                <scope line="289">
                    <scope line="290">
                        <declaration name="d" type="double" line="291"/>
                    </scope>
                </scope>
                <scope line="296">
                    <declaration name="distSqSum" type="double" line="300"/>
                    <scope line="302">
                        <scope line="303"/>
                    </scope>
                    <declaration name="r" type="double" line="310"/>
                    <declaration name="nextPointIndex" type="int" line="313"/>
                    <declaration name="sum" type="double" line="317"/>
                    <scope line="318">
                        <scope line="319">
                            <scope line="321"/>
                        </scope>
                    </scope>
                    <scope line="331">
                        <scope line="332">
                            <scope line="333"/>
                        </scope>
                    </scope>
                    <scope line="341">
                        <declaration name="p" type="T" line="343"/>
                        <scope line="350">
                            <scope line="353">
                                <scope line="355">
                                    <declaration name="d" type="double" line="356"/>
                                    <declaration name="d2" type="double" line="357"/>
                                    <scope line="358"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="365"/>
                </scope>
            </method>
            <javadoc line="376">
                Get a random point from the {@link Cluster} with the largest distance variance.                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    a random point from the selected cluster                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getPointFromLargestVarianceCluster" type="T" line="384">
                <params>
                    <param name="clusters" type="Collection<Cluster<T>>"/>
                </params>
                <comment line="392">
                    compute the distance variance of the current cluster                    
                </comment>
                <comment line="400">
                    select the cluster with the largest variance                    
                </comment>
                <comment line="409">
                    did we find at least one non-empty cluster ?                    
                </comment>
                <comment line="414">
                    extract a random point from the cluster                    
                </comment>
                <declaration name="maxVariance" type="double" line="386"/>
                <declaration name="selected" type="Cluster&lt;T&gt;" line="387"/>
                <scope line="388">
                    <scope line="389">
                        <declaration name="center" type="T" line="392"/>
                        <declaration name="stat" type="Variance" line="393"/>
                        <scope line="394"/>
                        <declaration name="variance" type="double" line="397"/>
                        <scope line="400"/>
                    </scope>
                </scope>
                <scope line="409"/>
                <declaration name="selectedPoints" type="List&lt;T&gt;" line="414"/>
            </method>
            <javadoc line="419">
                Get a random point from the {@link Cluster} with the largest number of points                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    a random point from the selected cluster                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getPointFromLargestNumberCluster" type="T" line="426">
                <params>
                    <param name="clusters" type="Collection<Cluster<T>>"/>
                </params>
                <comment line="433">
                    get the number of points of the current cluster                    
                </comment>
                <comment line="436">
                    select the cluster with the largest number of points                    
                </comment>
                <comment line="444">
                    did we find at least one non-empty cluster ?                    
                </comment>
                <comment line="449">
                    extract a random point from the cluster                    
                </comment>
                <declaration name="maxNumber" type="int" line="428"/>
                <declaration name="selected" type="Cluster&lt;T&gt;" line="429"/>
                <scope line="430">
                    <declaration name="number" type="int" line="433"/>
                    <scope line="436"/>
                </scope>
                <scope line="444"/>
                <declaration name="selectedPoints" type="List&lt;T&gt;" line="449"/>
            </method>
            <javadoc line="454">
                Get the point farthest to its cluster center                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    point farthest to its cluster center                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getFarthestPoint" type="T" line="461">
                <params>
                    <param name="clusters" type="Collection<Cluster<T>>"/>
                </params>
                <comment line="469">
                    get the farthest point                    
                </comment>
                <comment line="483">
                    did we find at least one non-empty cluster ?                    
                </comment>
                <declaration name="maxDistance" type="double" line="463"/>
                <declaration name="selectedCluster" type="Cluster&lt;T&gt;" line="464"/>
                <declaration name="selectedPoint" type="int" line="465"/>
                <scope line="466">
                    <declaration name="center" type="T" line="469"/>
                    <declaration name="points" type="List&lt;T&gt;" line="470"/>
                    <scope line="471">
                        <declaration name="distance" type="double" line="472"/>
                        <scope line="473"/>
                    </scope>
                </scope>
                <scope line="483"/>
            </method>
            <javadoc line="491">
                Returns the nearest {@link Cluster} to the given point                
                <param>
                    <T>
                       type of the points to cluster                    
                </param>
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <param>
                    point the point to find the nearest {@link Cluster} for                    
                </param>
                <return>
                    the index of the nearest {@link Cluster} to the given point                    
                </return>
            </javadoc>
            <method name="getNearestCluster" type="int" line="500">
                <params>
                    <param name="clusters" type="Collection<Cluster<T>>"/>
                    <param name="point" type="T"/>
                </params>
                <declaration name="minDistance" type="double" line="501"/>
                <declaration name="clusterIndex" type="int" line="502"/>
                <declaration name="minCluster" type="int" line="503"/>
                <scope line="504">
                    <declaration name="distance" type="double" line="505"/>
                    <scope line="506"/>
                </scope>
            </method>
        </class>
    </source>