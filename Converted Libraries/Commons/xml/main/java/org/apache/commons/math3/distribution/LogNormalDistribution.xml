<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Erf"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="LogNormalDistribution" line="28">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="28">
                Implementation of the log-normal (gaussian) distribution.
                  &lt;p&gt;
                  &lt;strong&gt;Parameters:&lt;/strong&gt;{@code X} is log-normally distributed if its natural logarithm {@code log(X)}is normally distributed. The probability distribution function of {@code X}is given by (for {@code x &gt; 0})
                  &lt;/p&gt;
                  &lt;p&gt;{@code exp(-0.5  ((ln(x) - m) / s)^2) / (s  sqrt(2  pi)  x)}&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@code m} is the &lt;em&gt;scale&lt;/em&gt; parameter: this is the mean of the
                  normally distributed natural logarithm of this distribution,&lt;/li&gt;
                  &lt;li&gt;{@code s} is the &lt;em&gt;shape&lt;/em&gt; parameter: this is the standard
                  deviation of the normally distributed natural logarithm of this
                  distribution.
                  &lt;/ul&gt;                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Log-normal_distribution&quot;&gt;
                      Log-normal distribution (Wikipedia)&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/LogNormalDistribution.html&quot;&gt;
                      Log Normal distribution (MathWorld)&lt;/a&gt;                    
                </see>
                <version>
                    $Id: LogNormalDistribution.java 1538998 2013-11-05 13:51:24Z erans $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="57"/>
            <javadoc line="57">
                Default inverse cumulative probability accuracy.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="60"/>
            <javadoc line="60">
                Serializable version identifier.                
            </javadoc>
            <declaration name="SQRT2PI" type="double" line="63"/>
            <javadoc line="63">
                &amp;radic;(2 &amp;pi;)                
            </javadoc>
            <declaration name="SQRT2" type="double" line="66"/>
            <javadoc line="66">
                &amp;radic;(2)                
            </javadoc>
            <declaration name="scale" type="double" line="69"/>
            <javadoc line="69">
                The scale parameter of this distribution.                
            </javadoc>
            <declaration name="shape" type="double" line="72"/>
            <javadoc line="72">
                The shape parameter of this distribution.                
            </javadoc>
            <declaration name="logShapePlusHalfLog2Pi" type="double" line="74"/>
            <javadoc line="74">
                The value of {@code log(shape) + 0.5  log(2PI)} stored for faster computation.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="77"/>
            <javadoc line="77">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <javadoc line="80">
                Create a log-normal distribution, where the mean and standard deviation
                  of the {@link NormalDistribution normally distributed} natural
                  logarithm of the log-normal distribution are equal to zero and one
                  respectively. In other words, the scale of the returned distribution is{@code 0}, while its shape is {@code 1}.                
            </javadoc>
            <method name="LogNormalDistribution" type="constructor" line="87"/>
            <javadoc line="91">
                Create a log-normal distribution using the specified scale and shape.                
                <param>
                    scale the scale parameter of this distribution                    
                </param>
                <param>
                    shape the shape parameter of this distribution                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="LogNormalDistribution" type="constructor" line="99">
                <params>
                    <param name="scale" type="double"/>
                    <param name="shape" type="double"/>
                </params>
            </method>
            <javadoc line="103">
                Create a log-normal distribution using the specified scale, shape and
                  inverse cumulative distribution accuracy.                
                <param>
                    scale the scale parameter of this distribution                    
                </param>
                <param>
                    shape the shape parameter of this distribution                    
                </param>
                <param>
                    inverseCumAccuracy Inverse cumulative probability accuracy.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="LogNormalDistribution" type="constructor" line="113">
                <params>
                    <param name="scale" type="double"/>
                    <param name="shape" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="117">
                Creates a log-normal distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    scale Scale parameter of this distribution.                    
                </param>
                <param>
                    shape Shape parameter of this distribution.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape &lt;= 0}.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="LogNormalDistribution" type="constructor" line="127">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="scale" type="double"/>
                    <param name="shape" type="double"/>
                </params>
            </method>
            <javadoc line="131">
                Creates a log-normal distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    scale Scale parameter of this distribution.                    
                </param>
                <param>
                    shape Shape parameter of this distribution.                    
                </param>
                <param>
                    inverseCumAccuracy Inverse cumulative probability accuracy.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape &lt;= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="LogNormalDistribution" type="constructor" line="145">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="scale" type="double"/>
                    <param name="shape" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
                <scope line="148"/>
            </method>
            <javadoc line="158">
                Returns the scale parameter of this distribution.                
                <return>
                    the scale parameter                    
                </return>
            </javadoc>
            <method name="getScale" type="double" line="163"/>
            <javadoc line="167">
                Returns the shape parameter of this distribution.                
                <return>
                    the shape parameter                    
                </return>
            </javadoc>
            <method name="getShape" type="double" line="172"/>
            <javadoc line="176">
                {@inheritDoc}For scale {@code m}, and shape {@code s} of this distribution, the PDF
                  is given by
                  &lt;ul&gt;
                  &lt;li&gt;{@code 0} if {@code x &lt;= 0},&lt;/li&gt;
                  &lt;li&gt;{@code exp(-0.5  ((ln(x) - m) / s)^2) / (s  sqrt(2  pi)  x)}otherwise.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="density" type="double" line="187">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="188"/>
                <declaration name="x0" type="double" line="191"/>
                <declaration name="x1" type="double" line="192"/>
            </method>
            <javadoc line="196">
                {@inheritDoc}See documentation of {@link #density(double)} for computation details.                
            </javadoc>
            <method name="logDensity" type="double" line="201">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="202"/>
                <declaration name="logX" type="double" line="205"/>
                <declaration name="x0" type="double" line="206"/>
                <declaration name="x1" type="double" line="207"/>
            </method>
            <javadoc line="211">
                {@inheritDoc}For scale {@code m}, and shape {@code s} of this distribution, the CDF
                  is given by
                  &lt;ul&gt;
                  &lt;li&gt;{@code 0} if {@code x &lt;= 0},&lt;/li&gt;
                  &lt;li&gt;{@code 0} if {@code ln(x) - m &lt; 0} and {@code m - ln(x) &gt; 40  s}, as
                  in these cases the actual value is within {@code Double.MIN_VALUE} of 0,
                  &lt;li&gt;{@code 1} if {@code ln(x) - m &gt;= 0} and {@code ln(x) - m &gt; 40  s},
                  as in these cases the actual value is within {@code Double.MIN_VALUE} of
                  1,&lt;/li&gt;
                  &lt;li&gt;{@code 0.5 + 0.5  erf((ln(x) - m) / (s  sqrt(2))} otherwise.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="226">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="227"/>
                <declaration name="dev" type="double" line="230"/>
                <scope line="231"/>
            </method>
            <javadoc line="237">
                {@inheritDoc}                
                <deprecated>
                    See {@link RealDistribution#cumulativeProbability(double,double)}                    
                </deprecated>
            </javadoc>
            <method name="cumulativeProbability" type="double" line="244">
                <params>
                    <param name="x0" type="double"/>
                    <param name="x1" type="double"/>
                </params>
            </method>
            <javadoc line="248">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="252">
                <params>
                    <param name="x0" type="double"/>
                    <param name="x1" type="double"/>
                </params>
                <scope line="253"/>
                <scope line="257"/>
                <declaration name="denom" type="double" line="260"/>
                <declaration name="v0" type="double" line="261"/>
                <declaration name="v1" type="double" line="262"/>
            </method>
            <javadoc line="266">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="268"/>
            <javadoc line="272">
                {@inheritDoc}For scale {@code m} and shape {@code s}, the mean is{@code exp(m + s^2 / 2)}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="278">
                <declaration name="s" type="double" line="279"/>
            </method>
            <javadoc line="283">
                {@inheritDoc}For scale {@code m} and shape {@code s}, the variance is{@code (exp(s^2) - 1)  exp(2  m + s^2)}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="289">
                <declaration name="s" type="double" line="290"/>
                <declaration name="ss" type="double" line="291"/>
            </method>
            <javadoc line="295">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="302"/>
            <javadoc line="306">
                {@inheritDoc}The upper bound of the support is always positive infinity
                  no matter the parameters.                
                <return>
                    upper bound of the support (always{@code Double.POSITIVE_INFINITY})                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="315"/>
            <javadoc line="319">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="320"/>
            <javadoc line="324">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="325"/>
            <javadoc line="329">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="336"/>
            <javadoc line="340">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="double" line="342">
                <declaration name="n" type="double" line="343"/>
            </method>
        </class>
    </source>