<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.special">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Erf" line="3">
            <javadoc line="3">
                This is a utility class that provides computation methods related to the
                  error functions.                
                <version>
                    $Id: Erf.java 1456905 2013-03-15 11:37:35Z luc $                    
                </version>
            </javadoc>
            <declaration name="X_CRIT" type="double" line="9"/>
            <javadoc line="9">
                The number {@code X_CRIT} is used by {@link #erf(double,double)} internally.
                  This number solves {@code erf(x)=0.5} within 1ulp.
                  More precisely, the current implementations of{@link #erf(double)} and {@link #erfc(double)} satisfy:&lt;br/&gt;{@code erf(X_CRIT) &lt; 0.5},&lt;br/&gt;{@code erf(Math.nextUp(X_CRIT) &gt; 0.5},&lt;br/&gt;{@code erfc(X_CRIT) = 0.5}, and&lt;br/&gt;{@code erfc(Math.nextUp(X_CRIT) &lt; 0.5}                
            </javadoc>
            <javadoc line="15">
                Default constructor.  Prohibit instantiation.                
            </javadoc>
            <method name="Erf" type="constructor" line="18"/>
            <javadoc line="20">
                Returns the error function.
                  &lt;p&gt;erf(x) = 2/&amp;radic;&amp;pi; &lt;sub&gt;0&lt;/sub&gt;&amp;int;&lt;sup&gt;x&lt;/sup&gt; e&lt;sup&gt;-t&lt;sup&gt;2&lt;/sup&gt;&lt;/sup&gt;dt &lt;/p&gt;
                  &lt;p&gt;This implementation computes erf(x) using the{@link Gamma#regularizedGammaP(double,double,double,int) regularized gamma function},
                  following &lt;a href=&quot;http://mathworld.wolfram.com/Erf.html&quot;&gt; Erf&lt;/a&gt;, equation (3)&lt;/p&gt;
                  &lt;p&gt;The value returned is always between -1 and 1 (inclusive).
                  If {@code abs(x) &gt; 40}, then {@code erf(x)} is indistinguishable from
                  either 1 or -1 as a double, so the appropriate extreme value is returned.
                  &lt;/p&gt;                
                <param>
                    x the value.                    
                </param>
                <return>
                    the error function erf(x)                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.                    
                </throws>
                <see>
                    Gamma#regularizedGammaP(double,double,double,int)                    
                </see>
            </javadoc>
            <method name="erf" type="double" line="34">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="35"/>
                <declaration name="ret" type="double" line="38"/>
            </method>
            <javadoc line="41">
                Returns the complementary error function.
                  &lt;p&gt;erfc(x) = 2/&amp;radic;&amp;pi; &lt;sub&gt;x&lt;/sub&gt;&amp;int;&lt;sup&gt;&amp;infin;&lt;/sup&gt; e&lt;sup&gt;-t&lt;sup&gt;2&lt;/sup&gt;&lt;/sup&gt;dt
                  &lt;br/&gt;
                  = 1 - {@link #erf(double) erf(x)} &lt;/p&gt;
                  &lt;p&gt;This implementation computes erfc(x) using the{@link Gamma#regularizedGammaQ(double,double,double,int) regularized gamma function},
                  following &lt;a href=&quot;http://mathworld.wolfram.com/Erf.html&quot;&gt; Erf&lt;/a&gt;, equation (3).&lt;/p&gt;
                  &lt;p&gt;The value returned is always between 0 and 2 (inclusive).
                  If {@code abs(x) &gt; 40}, then {@code erf(x)} is indistinguishable from
                  either 0 or 2 as a double, so the appropriate extreme value is returned.
                  &lt;/p&gt;                
                <param>
                    x the value                    
                </param>
                <return>
                    the complementary error function erfc(x)                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.                    
                </throws>
                <see>
                    Gamma#regularizedGammaQ(double,double,double,int)                    
                </see>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="erfc" type="double" line="58">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="59"/>
                <declaration name="ret" type="double" line="62"/>
            </method>
            <javadoc line="65">
                Returns the difference between erf(x1) and erf(x2).
                  The implementation uses either erf(double) or erfc(double)
                  depending on which provides the most precise result.                
                <param>
                    x1 the first value                    
                </param>
                <param>
                    x2 the second value                    
                </param>
                <return>
                    erf(x2) - erf(x1)                    
                </return>
            </javadoc>
            <method name="erf" type="double" line="73">
                <params>
                    <param name="x1" type="double"/>
                    <param name="x2" type="double"/>
                </params>
                <scope line="74"/>
            </method>
            <javadoc line="79">
                Returns the inverse erf.
                  &lt;p&gt;
                  This implementation is described in the paper:
                  &lt;a href=&quot;http://people.maths.ox.ac.uk/gilesm/files/gems_erfinv.pdf&quot;&gt;Approximating
                  the erfinv function&lt;/a&gt; by Mike Giles, Oxford-Man Institute of Quantitative Finance,
                  which was published in GPU Computing Gems, volume 2, 2010.
                  The source code is available &lt;a href=&quot;http://gpucomputing.net/?q=node/1828&quot;&gt;here&lt;/a&gt;.
                  &lt;/p&gt;                
                <param>
                    x the value                    
                </param>
                <return>
                    t such that x = erf(t)                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="erfInv" type="double" line="92">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="w" type="double" line="93"/>
                <declaration name="p" type="double" line="94"/>
                <scope line="95"/>
                <scope line="121"/>
                <scope line="143"/>
                <scope line="163"/>
            </method>
            <javadoc line="168">
                Returns the inverse erfc.                
                <param>
                    x the value                    
                </param>
                <return>
                    t such that x = erfc(t)                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="erfcInv" type="double" line="174">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
        </class>
    </source>