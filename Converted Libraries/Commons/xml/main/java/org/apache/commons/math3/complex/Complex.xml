<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.complex">
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Complex" line="31">
            <comment line="61">
                CHECKSTYLE: stop ConstantName                
            </comment>
            <comment line="64">
                CHECKSTYLE: resume ConstantName                
            </comment>
            <implements interface="FieldElement">
                <type_params>
                    <type_param name="Complex"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="31">
                Representation of a Complex number, i.e. a number which has both a
                  real and imaginary part.
                  &lt;br/&gt;
                  Implementations of arithmetic operations handle {@code NaN} and
                  infinite values according to the rules for {@link java.lang.Double}, i.e.{@link #equals} is an equivalence relation for all instances that have
                  a {@code NaN} in either real or imaginary part, e.g. the following are
                  considered equal:
                  &lt;ul&gt;
                  &lt;li&gt;{@code 1 + NaNi}&lt;/li&gt;
                  &lt;li&gt;{@code NaN + i}&lt;/li&gt;
                  &lt;li&gt;{@code NaN + NaNi}&lt;/li&gt;
                  &lt;/ul&gt;
                  Note that this is in contradiction with the IEEE-754 standard for floating
                  point numbers (according to which the test {@code x == x} must fail if{@code x} is {@code NaN}). The method{@link org.apache.commons.math3.util.Precision#equals(double,double,int)equals for primitive double} in {@link org.apache.commons.math3.util.Precision}conforms with IEEE-754 while this class conforms with the standard behavior
                  for Java object types.
                  &lt;br/&gt;
                  Implements Serializable since 2.0                
                <version>
                    $Id: Complex.java 1459927 2013-03-22 18:55:58Z luc $                    
                </version>
            </javadoc>
            <declaration name="I" type="Complex" line="58"/>
            <javadoc line="58">
                The square root of -1. A number representing &quot;0.0 + 1.0i&quot;                
            </javadoc>
            <declaration name="NaN" type="Complex" line="61"/>
            <javadoc line="61">
                A complex number representing &quot;NaN + NaNi&quot;                
            </javadoc>
            <declaration name="INF" type="Complex" line="64"/>
            <javadoc line="64">
                A complex number representing &quot;+INF + INFi&quot;                
            </javadoc>
            <declaration name="ONE" type="Complex" line="66"/>
            <javadoc line="66">
                A complex number representing &quot;1.0 + 0.0i&quot;                
            </javadoc>
            <declaration name="ZERO" type="Complex" line="68"/>
            <javadoc line="68">
                A complex number representing &quot;0.0 + 0.0i&quot;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="71"/>
            <javadoc line="71">
                Serializable version identifier                
            </javadoc>
            <declaration name="imaginary" type="double" line="74"/>
            <javadoc line="74">
                The imaginary part.                
            </javadoc>
            <declaration name="real" type="double" line="76"/>
            <javadoc line="76">
                The real part.                
            </javadoc>
            <declaration name="isNaN" type="boolean" line="78"/>
            <javadoc line="78">
                Record whether this complex number is equal to NaN.                
            </javadoc>
            <declaration name="isInfinite" type="boolean" line="80"/>
            <javadoc line="80">
                Record whether this complex number is infinite.                
            </javadoc>
            <javadoc line="83">
                Create a complex number given only the real part.                
                <param>
                    real Real part.                    
                </param>
            </javadoc>
            <method name="Complex" type="constructor" line="88">
                <params>
                    <param name="real" type="double"/>
                </params>
            </method>
            <javadoc line="92">
                Create a complex number given the real and imaginary parts.                
                <param>
                    real Real part.                    
                </param>
                <param>
                    imaginary Imaginary part.                    
                </param>
            </javadoc>
            <method name="Complex" type="constructor" line="98">
                <params>
                    <param name="real" type="double"/>
                    <param name="imaginary" type="double"/>
                </params>
            </method>
            <javadoc line="107">
                Return the absolute value of this complex number.
                  Returns {@code NaN} if either real or imaginary part is {@code NaN}and {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},
                  but at least one part is infinite.                
                <return>
                    the absolute value.                    
                </return>
            </javadoc>
            <method name="abs" type="double" line="115">
                <scope line="116"/>
                <scope line="119"/>
                <scope line="122">
                    <scope line="123"/>
                    <declaration name="q" type="double" line="126"/>
                </scope>
                <scope line="128">
                    <scope line="129"/>
                    <declaration name="q" type="double" line="132"/>
                </scope>
            </method>
            <javadoc line="137">
                Returns a {@code Complex} whose value is{@code (this + addend)}.
                  Uses the definitional formula
                  &lt;pre&gt;
                  &lt;code&gt;
                  (a + bi) + (c + di) = (a+c) + (b+d)i
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  &lt;br/&gt;
                  If either {@code this} or {@code addend} has a {@code NaN} value in
                  either part, {@link #NaN} is returned; otherwise {@code Infinite}and {@code NaN} values are returned in the parts of the result
                  according to the rules for {@link java.lang.Double} arithmetic.                
                <param>
                    addend Value to be added to this {@code Complex}.                    
                </param>
                <return>
                    {@code this + addend}.                    
                </return>
                <throws>
                    NullArgumentException if {@code addend} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="add" type="Complex" line="156">
                <params>
                    <param name="addend" type="Complex"/>
                </params>
                <scope line="158"/>
            </method>
            <javadoc line="166">
                Returns a {@code Complex} whose value is {@code (this + addend)},
                  with {@code addend} interpreted as a real number.                
                <param>
                    addend Value to be added to this {@code Complex}.                    
                </param>
                <return>
                    {@code this + addend}.                    
                </return>
                <see>
                    #add(Complex)                    
                </see>
            </javadoc>
            <method name="add" type="Complex" line="174">
                <params>
                    <param name="addend" type="double"/>
                </params>
                <scope line="175"/>
            </method>
            <javadoc line="182">
                Return the conjugate of this complex number.
                  The conjugate of {@code a + bi} is {@code a - bi}.
                  &lt;br/&gt;{@link #NaN} is returned if either the real or imaginary
                  part of this Complex number equals {@code Double.NaN}.
                  &lt;br/&gt;
                  If the imaginary part is infinite, and the real part is not{@code NaN}, the returned value has infinite imaginary part
                  of the opposite sign, e.g. the conjugate of{@code 1 + POSITIVE_INFINITY i} is {@code 1 - NEGATIVE_INFINITY i}.                
                <return>
                    the conjugate of this Complex object.                    
                </return>
            </javadoc>
            <method name="conjugate" type="Complex" line="196">
                <scope line="197"/>
            </method>
            <javadoc line="204">
                Returns a {@code Complex} whose value is{@code (this / divisor)}.
                  Implements the definitional formula
                  &lt;pre&gt;
                  &lt;code&gt;
                  a + bi          ac + bd + (bc - ad)i
                  ----------- = -------------------------
                  c + di         c&lt;sup&gt;2&lt;/sup&gt; + d&lt;sup&gt;2&lt;/sup&gt;
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  but uses
                  &lt;a href=&quot;http://doi.acm.org/10.1145/1039813.1039814&quot;&gt;
                  prescaling of operands&lt;/a&gt; to limit the effects of overflows and
                  underflows in the computation.
                  &lt;br/&gt;{@code Infinite} and {@code NaN} values are handled according to the
                  following rules, applied in the order presented:
                  &lt;ul&gt;
                  &lt;li&gt;If either {@code this} or {@code divisor} has a {@code NaN} value
                  in either part, {@link #NaN} is returned.
                  &lt;/li&gt;
                  &lt;li&gt;If {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.
                  &lt;/li&gt;
                  &lt;li&gt;If {@code this} and {@code divisor} are both infinite,{@link #NaN} is returned.
                  &lt;/li&gt;
                  &lt;li&gt;If {@code this} is finite (i.e., has no {@code Infinite} or{@code NaN} parts) and {@code divisor} is infinite (one or both parts
                  infinite), {@link #ZERO} is returned.
                  &lt;/li&gt;
                  &lt;li&gt;If {@code this} is infinite and {@code divisor} is finite,{@code NaN} values are returned in the parts of the result if the{@link java.lang.Double} rules applied to the definitional formula
                  force {@code NaN} results.
                  &lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    divisor Value by which this {@code Complex} is to be divided.                    
                </param>
                <return>
                    {@code this / divisor}.                    
                </return>
                <throws>
                    NullArgumentException if {@code divisor} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="divide" type="Complex" line="247">
                <params>
                    <param name="divisor" type="Complex"/>
                </params>
                <scope line="249"/>
                <declaration name="c" type="double" line="253"/>
                <declaration name="d" type="double" line="254"/>
                <scope line="255"/>
                <scope line="259"/>
                <scope line="263">
                    <declaration name="q" type="double" line="264"/>
                    <declaration name="denominator" type="double" line="265"/>
                </scope>
                <scope line="268">
                    <declaration name="q" type="double" line="269"/>
                    <declaration name="denominator" type="double" line="270"/>
                </scope>
            </method>
            <javadoc line="276">
                Returns a {@code Complex} whose value is {@code (this / divisor)},
                  with {@code divisor} interpreted as a real number.                
                <param>
                    divisor Value by which this {@code Complex} is to be divided.                    
                </param>
                <return>
                    {@code this / divisor}.                    
                </return>
                <see>
                    #divide(Complex)                    
                </see>
            </javadoc>
            <method name="divide" type="Complex" line="284">
                <params>
                    <param name="divisor" type="double"/>
                </params>
                <scope line="285"/>
                <scope line="288"/>
                <scope line="291"/>
            </method>
            <javadoc line="298">
                {@inheritDoc}                
            </javadoc>
            <method name="reciprocal" type="Complex" line="299">
                <scope line="300"/>
                <scope line="304"/>
                <scope line="308"/>
                <scope line="312">
                    <declaration name="q" type="double" line="313"/>
                    <declaration name="scale" type="double" line="314"/>
                </scope>
                <scope line="316">
                    <declaration name="q" type="double" line="317"/>
                    <declaration name="scale" type="double" line="318"/>
                </scope>
            </method>
            <javadoc line="323">
                Test for the equality of two Complex objects.
                  If both the real and imaginary parts of two complex numbers
                  are exactly the same, and neither is {@code Double.NaN}, the two
                  Complex objects are considered to be equal.
                  All {@code NaN} values are considered to be equal - i.e, if either
                  (or both) real and imaginary parts of the complex number are equal
                  to {@code Double.NaN}, the complex number is equal to{@code NaN}.                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two Complex objects are equal, false if object is{@code null}, not an instance of Complex, or not equal to this Complex
                      instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="339">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="340"/>
                <scope line="343">
                    <declaration name="c" type="Complex" line="344"/>
                    <scope line="345"/>
                    <scope line="347"/>
                </scope>
            </method>
            <javadoc line="354">
                Get a hashCode for the complex number.
                  Any {@code Double.NaN} value in real or imaginary part produces
                  the same hash code {@code 7}.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="362">
                <scope line="363"/>
            </method>
            <javadoc line="370">
                Access the imaginary part.                
                <return>
                    the imaginary part.                    
                </return>
            </javadoc>
            <method name="getImaginary" type="double" line="375"/>
            <javadoc line="379">
                Access the real part.                
                <return>
                    the real part.                    
                </return>
            </javadoc>
            <method name="getReal" type="double" line="384"/>
            <javadoc line="388">
                Checks whether either or both parts of this complex number is{@code NaN}.                
                <return>
                    true if either or both parts of this complex number is{@code NaN}; false otherwise.                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="395"/>
            <javadoc line="399">
                Checks whether either the real or imaginary part of this complex number
                  takes an infinite value (either {@code Double.POSITIVE_INFINITY} or{@code Double.NEGATIVE_INFINITY}) and neither part
                  is {@code NaN}.                
                <return>
                    true if one or both parts of this complex number are infinite
                      and neither part is {@code NaN}.                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="408"/>
            <javadoc line="412">
                Returns a {@code Complex} whose value is {@code this  factor}.
                  Implements preliminary checks for {@code NaN} and infinity followed by
                  the definitional formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  (a + bi)(c + di) = (ac - bd) + (ad + bc)i
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  Returns {@link #NaN} if either {@code this} or {@code factor} has one or
                  more {@code NaN} parts.
                  &lt;br/&gt;
                  Returns {@link #INF} if neither {@code this} nor {@code factor} has one
                  or more {@code NaN} parts and if either {@code this} or {@code factor}has one or more infinite parts (same result is returned regardless of
                  the sign of the components).
                  &lt;br/&gt;
                  Returns finite values in components of the result per the definitional
                  formula in all remaining cases.                
                <param>
                    factor value to be multiplied by this {@code Complex}.                    
                </param>
                <return>
                    {@code this  factor}.                    
                </return>
                <throws>
                    NullArgumentException if {@code factor} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="multiply" type="Complex" line="437">
                <params>
                    <param name="factor" type="Complex"/>
                </params>
                <comment line="446">
                    we don&apos;t use isInfinite() to avoid testing for NaN again                    
                </comment>
                <scope line="439"/>
                <scope line="445"/>
            </method>
            <javadoc line="453">
                Returns a {@code Complex} whose value is {@code this  factor}, with {@code factor}interpreted as a integer number.                
                <param>
                    factor value to be multiplied by this {@code Complex}.                    
                </param>
                <return>
                    {@code this  factor}.                    
                </return>
                <see>
                    #multiply(Complex)                    
                </see>
            </javadoc>
            <method name="multiply" type="Complex" line="461">
                <params>
                    <param name="factor" type="int"/>
                </params>
                <scope line="462"/>
                <scope line="466"/>
            </method>
            <javadoc line="472">
                Returns a {@code Complex} whose value is {@code this  factor}, with {@code factor}interpreted as a real number.                
                <param>
                    factor value to be multiplied by this {@code Complex}.                    
                </param>
                <return>
                    {@code this  factor}.                    
                </return>
                <see>
                    #multiply(Complex)                    
                </see>
            </javadoc>
            <method name="multiply" type="Complex" line="480">
                <params>
                    <param name="factor" type="double"/>
                </params>
                <comment line="487">
                    we don&apos;t use isInfinite() to avoid testing for NaN again                    
                </comment>
                <scope line="481"/>
                <scope line="486"/>
            </method>
            <javadoc line="493">
                Returns a {@code Complex} whose value is {@code (-this)}.
                  Returns {@code NaN} if either real or imaginary
                  part of this Complex number equals {@code Double.NaN}.                
                <return>
                    {@code -this}.                    
                </return>
            </javadoc>
            <method name="negate" type="Complex" line="500">
                <scope line="501"/>
            </method>
            <javadoc line="508">
                Returns a {@code Complex} whose value is{@code (this - subtrahend)}.
                  Uses the definitional formula
                  &lt;pre&gt;
                  &lt;code&gt;
                  (a + bi) - (c + di) = (a-c) + (b-d)i
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,{@link #NaN} is returned; otherwise infinite and {@code NaN} values are
                  returned in the parts of the result according to the rules for{@link java.lang.Double} arithmetic.                
                <param>
                    subtrahend value to be subtracted from this {@code Complex}.                    
                </param>
                <return>
                    {@code this - subtrahend}.                    
                </return>
                <throws>
                    NullArgumentException if {@code subtrahend} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="Complex" line="527">
                <params>
                    <param name="subtrahend" type="Complex"/>
                </params>
                <scope line="529"/>
            </method>
            <javadoc line="537">
                Returns a {@code Complex} whose value is{@code (this - subtrahend)}.                
                <param>
                    subtrahend value to be subtracted from this {@code Complex}.                    
                </param>
                <return>
                    {@code this - subtrahend}.                    
                </return>
                <see>
                    #subtract(Complex)                    
                </see>
            </javadoc>
            <method name="subtract" type="Complex" line="545">
                <params>
                    <param name="subtrahend" type="double"/>
                </params>
                <scope line="546"/>
            </method>
            <javadoc line="552">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/InverseCosine.html&quot; TARGET=&quot;_top&quot;&gt;
                  inverse cosine&lt;/a&gt; of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  acos(z) = -i (log(z + i (sqrt(1 - z&lt;sup&gt;2&lt;/sup&gt;))))
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN} or infinite.                
                <return>
                    the inverse cosine of this complex number.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="acos" type="Complex" line="568">
                <scope line="569"/>
            </method>
            <javadoc line="576">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/InverseSine.html&quot; TARGET=&quot;_top&quot;&gt;
                  inverse sine&lt;/a&gt; of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  asin(z) = -i (log(sqrt(1 - z&lt;sup&gt;2&lt;/sup&gt;) + iz))
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN} or infinite.                
                <return>
                    the inverse sine of this complex number.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="asin" type="Complex" line="592">
                <scope line="593"/>
            </method>
            <javadoc line="600">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/InverseTangent.html&quot; TARGET=&quot;_top&quot;&gt;
                  inverse tangent&lt;/a&gt; of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  atan(z) = (i/2) log((i + z)/(i - z))
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN} or infinite.                
                <return>
                    the inverse tangent of this complex number                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="atan" type="Complex" line="616">
                <scope line="617"/>
            </method>
            <javadoc line="625">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/Cosine.html&quot; TARGET=&quot;_top&quot;&gt;
                  cosine&lt;/a&gt;
                  of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  where the (real) functions on the right-hand side are{@link java.lang.Math#sin}, {@link java.lang.Math#cos},{@link FastMath#cosh} and {@link FastMath#sinh}.
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN}.
                  &lt;br/&gt;
                  Infinite values in real or imaginary parts of the input may result in
                  infinite or NaN values returned in parts of the result.
                  &lt;pre&gt;
                  Examples:
                  &lt;code&gt;
                  cos(1 &amp;plusmn; INFINITY i) = 1 &amp;#x2213; INFINITY i
                  cos(&amp;plusmn;INFINITY + i) = NaN + NaN i
                  cos(&amp;plusmn;INFINITY &amp;plusmn; INFINITY i) = NaN + NaN i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
                <return>
                    the cosine of this complex number.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="cos" type="Complex" line="657">
                <scope line="658"/>
            </method>
            <javadoc line="666">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/HyperbolicCosine.html&quot; TARGET=&quot;_top&quot;&gt;
                  hyperbolic cosine&lt;/a&gt; of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i}
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  where the (real) functions on the right-hand side are{@link java.lang.Math#sin}, {@link java.lang.Math#cos},{@link FastMath#cosh} and {@link FastMath#sinh}.
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN}.
                  &lt;br/&gt;
                  Infinite values in real or imaginary parts of the input may result in
                  infinite or NaN values returned in parts of the result.
                  &lt;pre&gt;
                  Examples:
                  &lt;code&gt;
                  cosh(1 &amp;plusmn; INFINITY i) = NaN + NaN i
                  cosh(&amp;plusmn;INFINITY + i) = INFINITY &amp;plusmn; INFINITY i
                  cosh(&amp;plusmn;INFINITY &amp;plusmn; INFINITY i) = NaN + NaN i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
                <return>
                    the hyperbolic cosine of this complex number.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="cosh" type="Complex" line="697">
                <scope line="698"/>
            </method>
            <javadoc line="706">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/ExponentialFunction.html&quot; TARGET=&quot;_top&quot;&gt;
                  exponential function&lt;/a&gt; of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  where the (real) functions on the right-hand side are{@link java.lang.Math#exp}, {@link java.lang.Math#cos}, and{@link java.lang.Math#sin}.
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN}.
                  &lt;br/&gt;
                  Infinite values in real or imaginary parts of the input may result in
                  infinite or NaN values returned in parts of the result.
                  &lt;pre&gt;
                  Examples:
                  &lt;code&gt;
                  exp(1 &amp;plusmn; INFINITY i) = NaN + NaN i
                  exp(INFINITY + i) = INFINITY + INFINITY i
                  exp(-INFINITY + i) = 0 + 0i
                  exp(&amp;plusmn;INFINITY &amp;plusmn; INFINITY i) = NaN + NaN i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
                <return>
                    <code><i>e</i><sup>this</sup></code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="exp" type="Complex" line="738">
                <scope line="739"/>
                <declaration name="expReal" type="double" line="743"/>
            </method>
            <javadoc line="748">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/NaturalLogarithm.html&quot; TARGET=&quot;_top&quot;&gt;
                  natural logarithm&lt;/a&gt; of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  log(a + bi) = ln(|a + bi|) + arg(a + bi)i
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  where ln on the right hand side is {@link java.lang.Math#log},{@code |a + bi|} is the modulus, {@link Complex#abs},  and{@code arg(a + bi) = }{@link java.lang.Math#atan2}(b, a).
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN}.
                  &lt;br/&gt;
                  Infinite (or critical) values in real or imaginary parts of the input may
                  result in infinite or NaN values returned in parts of the result.
                  &lt;pre&gt;
                  Examples:
                  &lt;code&gt;
                  log(1 &amp;plusmn; INFINITY i) = INFINITY &amp;plusmn; (&amp;pi;/2)i
                  log(INFINITY + i) = INFINITY + 0i
                  log(-INFINITY + i) = INFINITY + &amp;pi;i
                  log(INFINITY &amp;plusmn; INFINITY i) = INFINITY &amp;plusmn; (&amp;pi;/4)i
                  log(-INFINITY &amp;plusmn; INFINITY i) = INFINITY &amp;plusmn; (3&amp;pi;/4)i
                  log(0 + 0i) = -INFINITY + 0i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
                <return>
                    the value <code>ln &nbsp; this</code>, the natural logarithm
                      of {@code this}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="log" type="Complex" line="783">
                <scope line="784"/>
            </method>
            <javadoc line="792">
                Returns of value of this complex number raised to the power of {@code x}.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  y&lt;sup&gt;x&lt;/sup&gt; = exp(x&amp;middot;log(y))
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  where {@code exp} and {@code log} are {@link #exp} and{@link #log}, respectively.
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN} or infinite, or if {@code y}equals {@link Complex#ZERO}.                
                <param>
                    x exponent to which this {@code Complex} is to be raised.                    
                </param>
                <return>
                    <code> this<sup>{@code x}</sup></code>.                    
                </return>
                <throws>
                    NullArgumentException if x is {@code null}.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="pow" type="Complex" line="813">
                <params>
                    <param name="x" type="Complex"/>
                </params>
            </method>
            <javadoc line="818">
                Returns of value of this complex number raised to the power of {@code x}.                
                <param>
                    x exponent to which this {@code Complex} is to be raised.                    
                </param>
                <return>
                    <code>this<sup>x</sup></code>.                    
                </return>
                <see>
                    #pow(Complex)                    
                </see>
            </javadoc>
            <method name="pow" type="Complex" line="825">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="829">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/Sine.html&quot; TARGET=&quot;_top&quot;&gt;
                  sine&lt;/a&gt;
                  of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  where the (real) functions on the right-hand side are{@link java.lang.Math#sin}, {@link java.lang.Math#cos},{@link FastMath#cosh} and {@link FastMath#sinh}.
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN}.
                  &lt;br/&gt;
                  Infinite values in real or imaginary parts of the input may result in
                  infinite or {@code NaN} values returned in parts of the result.
                  &lt;pre&gt;
                  Examples:
                  &lt;code&gt;
                  sin(1 &amp;plusmn; INFINITY i) = 1 &amp;plusmn; INFINITY i
                  sin(&amp;plusmn;INFINITY + i) = NaN + NaN i
                  sin(&amp;plusmn;INFINITY &amp;plusmn; INFINITY i) = NaN + NaN i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
                <return>
                    the sine of this complex number.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="sin" type="Complex" line="861">
                <scope line="862"/>
            </method>
            <javadoc line="870">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/HyperbolicSine.html&quot; TARGET=&quot;_top&quot;&gt;
                  hyperbolic sine&lt;/a&gt; of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  where the (real) functions on the right-hand side are{@link java.lang.Math#sin}, {@link java.lang.Math#cos},{@link FastMath#cosh} and {@link FastMath#sinh}.
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN}.
                  &lt;br/&gt;
                  Infinite values in real or imaginary parts of the input may result in
                  infinite or NaN values returned in parts of the result.
                  &lt;pre&gt;
                  Examples:
                  &lt;code&gt;
                  sinh(1 &amp;plusmn; INFINITY i) = NaN + NaN i
                  sinh(&amp;plusmn;INFINITY + i) = &amp;plusmn; INFINITY + INFINITY i
                  sinh(&amp;plusmn;INFINITY &amp;plusmn; INFINITY i) = NaN + NaN i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
                <return>
                    the hyperbolic sine of {@code this}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="sinh" type="Complex" line="901">
                <scope line="902"/>
            </method>
            <javadoc line="910">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/SquareRoot.html&quot; TARGET=&quot;_top&quot;&gt;
                  square root&lt;/a&gt; of this complex number.
                  Implements the following algorithm to compute {@code sqrt(a + bi)}:
                  &lt;ol&gt;&lt;li&gt;Let {@code t = sqrt((|a| + |a + bi|) / 2)}&lt;/li&gt;
                  &lt;li&gt;&lt;pre&gt;if {@code  a &amp;#8805; 0} return {@code t + (b/2t)i}else return {@code |b|/2t + sign(b)t i }&lt;/pre&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  where &lt;ul&gt;
                  &lt;li&gt;{@code |a| = }{@link Math#abs}(a)&lt;/li&gt;
                  &lt;li&gt;{@code |a + bi| = }{@link Complex#abs}(a + bi)&lt;/li&gt;
                  &lt;li&gt;{@code sign(b) =  }{@link FastMath#copySign(double,double) copySign(1d, b)}&lt;/ul&gt;
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN}.
                  &lt;br/&gt;
                  Infinite values in real or imaginary parts of the input may result in
                  infinite or NaN values returned in parts of the result.
                  &lt;pre&gt;
                  Examples:
                  &lt;code&gt;
                  sqrt(1 &amp;plusmn; INFINITY i) = INFINITY + NaN i
                  sqrt(INFINITY + i) = INFINITY + 0i
                  sqrt(-INFINITY + i) = 0 + INFINITY i
                  sqrt(INFINITY &amp;plusmn; INFINITY i) = INFINITY + NaN i
                  sqrt(-INFINITY &amp;plusmn; INFINITY i) = NaN &amp;plusmn; INFINITY i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
                <return>
                    the square root of {@code this}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="sqrt" type="Complex" line="944">
                <scope line="945"/>
                <scope line="949"/>
                <declaration name="t" type="double" line="953"/>
                <scope line="954"/>
                <scope line="956"/>
            </method>
            <javadoc line="962">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/SquareRoot.html&quot; TARGET=&quot;_top&quot;&gt;
                  square root&lt;/a&gt; of &lt;code&gt;1 - this&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt; for this complex
                  number.
                  Computes the result directly as{@code sqrt(ONE.subtract(z.multiply(z)))}.
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN}.
                  &lt;br/&gt;
                  Infinite values in real or imaginary parts of the input may result in
                  infinite or NaN values returned in parts of the result.                
                <return>
                    the square root of <code>1 - this<sup>2</sup></code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="sqrt1z" type="Complex" line="979"/>
            <javadoc line="983">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/Tangent.html&quot; TARGET=&quot;_top&quot;&gt;
                  tangent&lt;/a&gt; of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  where the (real) functions on the right-hand side are{@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and{@link FastMath#sinh}.
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN}.
                  &lt;br/&gt;
                  Infinite (or critical) values in real or imaginary parts of the input may
                  result in infinite or NaN values returned in parts of the result.
                  &lt;pre&gt;
                  Examples:
                  &lt;code&gt;
                  tan(a &amp;plusmn; INFINITY i) = 0 &amp;plusmn; i
                  tan(&amp;plusmn;INFINITY + bi) = NaN + NaN i
                  tan(&amp;plusmn;INFINITY &amp;plusmn; INFINITY i) = NaN + NaN i
                  tan(&amp;plusmn;&amp;pi;/2 + 0 i) = &amp;plusmn;INFINITY + NaN i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
                <return>
                    the tangent of {@code this}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="tan" type="Complex" line="1015">
                <scope line="1016"/>
                <scope line="1019"/>
                <scope line="1022"/>
                <declaration name="real2" type="double" line="1026"/>
                <declaration name="imaginary2" type="double" line="1027"/>
                <declaration name="d" type="double" line="1028"/>
            </method>
            <javadoc line="1034">
                Compute the
                  &lt;a href=&quot;http://mathworld.wolfram.com/HyperbolicTangent.html&quot; TARGET=&quot;_top&quot;&gt;
                  hyperbolic tangent&lt;/a&gt; of this complex number.
                  Implements the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  where the (real) functions on the right-hand side are{@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and{@link FastMath#sinh}.
                  &lt;br/&gt;
                  Returns {@link Complex#NaN} if either real or imaginary part of the
                  input argument is {@code NaN}.
                  &lt;br/&gt;
                  Infinite values in real or imaginary parts of the input may result in
                  infinite or NaN values returned in parts of the result.
                  &lt;pre&gt;
                  Examples:
                  &lt;code&gt;
                  tanh(a &amp;plusmn; INFINITY i) = NaN + NaN i
                  tanh(&amp;plusmn;INFINITY + bi) = &amp;plusmn;1 + 0 i
                  tanh(&amp;plusmn;INFINITY &amp;plusmn; INFINITY i) = NaN + NaN i
                  tanh(0 + (&amp;pi;/2)i) = NaN + INFINITY i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
                <return>
                    the hyperbolic tangent of {@code this}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="tanh" type="Complex" line="1066">
                <scope line="1067"/>
                <scope line="1070"/>
                <scope line="1073"/>
                <declaration name="real2" type="double" line="1076"/>
                <declaration name="imaginary2" type="double" line="1077"/>
                <declaration name="d" type="double" line="1078"/>
            </method>
            <javadoc line="1086">
                Compute the argument of this complex number.
                  The argument is the angle phi between the positive real axis and
                  the point representing this number in the complex plane.
                  The value returned is between -PI (not inclusive)
                  and PI (inclusive), with negative values returned for numbers with
                  negative imaginary parts.
                  &lt;br/&gt;
                  If either real or imaginary part (or both) is NaN, NaN is returned.
                  Infinite parts are handled as {@code Math.atan2} handles them,
                  essentially treating finite parts as zero in the presence of an
                  infinite coordinate and returning a multiple of pi/4 depending on
                  the signs of the infinite parts.
                  See the javadoc for {@code Math.atan2} for full details.                
                <return>
                    the argument of {@code this}.                    
                </return>
            </javadoc>
            <method name="getArgument" type="double" line="1103"/>
            <javadoc line="1107">
                Computes the n-th roots of this complex number.
                  The nth roots are defined by the formula:
                  &lt;pre&gt;
                  &lt;code&gt;
                  z&lt;sub&gt;k&lt;/sub&gt; = abs&lt;sup&gt;1/n&lt;/sup&gt; (cos(phi + 2&amp;pi;k/n) + i (sin(phi + 2&amp;pi;k/n))
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  for &lt;i&gt;{@code k=0, 1, ..., n-1}&lt;/i&gt;, where {@code abs} and {@code phi}are respectively the {@link #abs() modulus} and{@link #getArgument() argument} of this complex number.
                  &lt;br/&gt;
                  If one or both parts of this complex number is NaN, a list with just
                  one element, {@link #NaN} is returned.
                  if neither part is NaN, but at least one part is infinite, the result
                  is a one-element list containing {@link #INF}.                
                <param>
                    n Degree of root.                    
                </param>
                <return>
                    a List<Complex> of all {@code n}-th roots of {@code this}.                    
                </return>
                <throws>
                    NotPositiveException if {@code n <= 0}.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="nthRoot" type="List<Complex>" line="1129">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="1147">
                    nth root of abs -- faster / more accurate to use a solver here?                    
                </comment>
                <comment line="1150">
                    Compute nth roots of complex number with k = 0, 1, ... n-1                    
                </comment>
                <comment line="1155">
                    inner part                    
                </comment>
                <scope line="1131"/>
                <declaration name="result" type="List&lt;Complex&gt;" line="1136"/>
                <scope line="1138"/>
                <scope line="1142"/>
                <declaration name="nthRootOfAbs" type="double" line="1148"/>
                <declaration name="nthPhi" type="double" line="1151"/>
                <declaration name="slice" type="double" line="1152"/>
                <declaration name="innerPart" type="double" line="1153"/>
                <scope line="1154">
                    <declaration name="realPart" type="double" line="1156"/>
                    <declaration name="imaginaryPart" type="double" line="1157"/>
                </scope>
            </method>
            <javadoc line="1165">
                Create a complex number given the real and imaginary parts.                
                <param>
                    realPart Real part.                    
                </param>
                <param>
                    imaginaryPart Imaginary part.                    
                </param>
                <return>
                    a new complex number instance.                    
                </return>
                <since>
                    1.2                    
                </since>
                <see>
                    #valueOf(double,double)                    
                </see>
            </javadoc>
            <method name="createComplex" type="Complex" line="1175">
                <params>
                    <param name="realPart" type="double"/>
                    <param name="imaginaryPart" type="double"/>
                </params>
            </method>
            <javadoc line="1179">
                Create a complex number given the real and imaginary parts.                
                <param>
                    realPart Real part.                    
                </param>
                <param>
                    imaginaryPart Imaginary part.                    
                </param>
                <return>
                    a Complex instance.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Complex" line="1187">
                <params>
                    <param name="realPart" type="double"/>
                    <param name="imaginaryPart" type="double"/>
                </params>
                <scope line="1189"/>
            </method>
            <javadoc line="1195">
                Create a complex number given only the real part.                
                <param>
                    realPart Real part.                    
                </param>
                <return>
                    a Complex instance.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Complex" line="1201">
                <params>
                    <param name="realPart" type="double"/>
                </params>
                <scope line="1202"/>
            </method>
            <javadoc line="1208">
                Resolve the transient fields in a deserialized Complex Object.
                  Subclasses will need to override {@link #createComplex} to
                  deserialize properly.                
                <return>
                    A Complex instance with all fields resolved.                    
                </return>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="readResolve" type="Object" line="1216"/>
            <javadoc line="1220">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="ComplexField" line="1221"/>
            <javadoc line="1225">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="1227"/>
        </class>
    </source>