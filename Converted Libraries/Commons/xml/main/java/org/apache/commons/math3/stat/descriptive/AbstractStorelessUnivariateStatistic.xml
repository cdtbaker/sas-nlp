<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive">
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="AbstractStorelessUnivariateStatistic" line="7">
            <extends class="AbstractUnivariateStatistic"/>
            <implements interface="StorelessUnivariateStatistic"/>
            <javadoc line="7">
                Abstract implementation of the {@link StorelessUnivariateStatistic} interface.
                  &lt;p&gt;
                  Provides default &lt;code&gt;evaluate()&lt;/code&gt; and &lt;code&gt;incrementAll(double[])&lt;/code&gt;
                  implementations.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note that these implementations are not synchronized.&lt;/strong&gt;&lt;/p&gt;                
                <version>
                    $Id: AbstractStorelessUnivariateStatistic.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <javadoc line="17">
                This default implementation calls {@link #clear}, then invokes{@link #increment} in a loop over the the input array, and then uses{@link #getResult} to compute the return value.
                  &lt;p&gt;
                  Note that this implementation changes the internal state of the
                  statistic.  Its side effects are the same as invoking {@link #clear} and
                  then {@link #incrementAll(double[])}.&lt;/p&gt;
                  &lt;p&gt;
                  Implementations may override this method with a more efficient and
                  possibly more accurate implementation that works directly with the
                  input array.&lt;/p&gt;
                  &lt;p&gt;
                  If the array is null, a MathIllegalArgumentException is thrown.&lt;/p&gt;                
                <param>
                    values input array                    
                </param>
                <return>
                    the value of the statistic applied to the input array                    
                </return>
                <throws>
                    MathIllegalArgumentException if values is null                    
                </throws>
                <see>
                    org.apache.commons.math3.stat.descriptive.UnivariateStatistic#evaluate(double[])                    
                </see>
            </javadoc>
            <method name="evaluate" type="double" line="34">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <scope line="35"/>
            </method>
            <javadoc line="40">
                This default implementation calls {@link #clear}, then invokes{@link #increment} in a loop over the specified portion of the input
                  array, and then uses {@link #getResult} to compute the return value.
                  &lt;p&gt;
                  Note that this implementation changes the internal state of the
                  statistic.  Its side effects are the same as invoking {@link #clear} and
                  then {@link #incrementAll(double[],int,int)}.&lt;/p&gt;
                  &lt;p&gt;
                  Implementations may override this method with a more efficient and
                  possibly more accurate implementation that works directly with the
                  input array.&lt;/p&gt;
                  &lt;p&gt;
                  If the array is null or the index parameters are not valid, an
                  MathIllegalArgumentException is thrown.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin the index of the first element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the value of the statistic applied to the included array entries                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the indices are not valid                    
                </throws>
                <see>
                    org.apache.commons.math3.stat.descriptive.UnivariateStatistic#evaluate(double[],int,int)                    
                </see>
            </javadoc>
            <method name="evaluate" type="double" line="61">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="62"/>
            </method>
            <method name="copy" type="StorelessUnivariateStatistic" line="68"/>
            <javadoc line="68">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="72"/>
            <javadoc line="72">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="76"/>
            <javadoc line="76">
                {@inheritDoc}                
            </javadoc>
            <method name="increment" type="void" line="80"/>
            <javadoc line="80">
                {@inheritDoc}                
            </javadoc>
            <javadoc line="84">
                This default implementation just calls {@link #increment} in a loop over
                  the input array.
                  &lt;p&gt;
                  Throws IllegalArgumentException if the input values array is null.&lt;/p&gt;                
                <param>
                    values values to add                    
                </param>
                <throws>
                    MathIllegalArgumentException if values is null                    
                </throws>
                <see>
                    org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic#incrementAll(double[])                    
                </see>
            </javadoc>
            <method name="incrementAll" type="void" line="93">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <scope line="94"/>
            </method>
            <javadoc line="99">
                This default implementation just calls {@link #increment} in a loop over
                  the specified portion of the input array.
                  &lt;p&gt;
                  Throws IllegalArgumentException if the input values array is null.&lt;/p&gt;                
                <param>
                    values  array holding values to add                    
                </param>
                <param>
                    begin   index of the first array element to add                    
                </param>
                <param>
                    length  number of array elements to add                    
                </param>
                <throws>
                    MathIllegalArgumentException if values is null                    
                </throws>
                <see>
                    org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic#incrementAll(double[],int,int)                    
                </see>
            </javadoc>
            <method name="incrementAll" type="void" line="110">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="111">
                    <declaration name="k" type="int" line="112"/>
                    <scope line="113"/>
                </scope>
            </method>
            <javadoc line="118">
                Returns true iff &lt;code&gt;object&lt;/code&gt; is an
                  &lt;code&gt;AbstractStorelessUnivariateStatistic&lt;/code&gt; returning the same
                  values as this for &lt;code&gt;getResult()&lt;/code&gt; and &lt;code&gt;getN()&lt;/code&gt;                
                <param>
                    object object to test equality against.                    
                </param>
                <return>
                    true if object returns the same value as this                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="125">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="126"/>
                <scope line="129"/>
                <declaration name="stat" type="AbstractStorelessUnivariateStatistic" line="132"/>
            </method>
            <javadoc line="135">
                Returns hash code based on getResult() and getN()                
                <return>
                    hash code                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="139"/>
        </class>
    </source>