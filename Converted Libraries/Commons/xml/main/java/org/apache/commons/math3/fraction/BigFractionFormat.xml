<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigInteger"/>
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathParseException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="BigFractionFormat" line="31">
            <extends class="AbstractFormat"/>
            <implements interface="Serializable"/>
            <javadoc line="31">
                Formats a BigFraction number in proper format or improper format.
                  &lt;p&gt;
                  The number format for each of the whole number, numerator and,
                  denominator can be configured.
                  &lt;/p&gt;                
                <since>
                    2.0                    
                </since>
                <version>
                    $Id: BigFractionFormat.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="43">
                Serializable version identifier                
            </javadoc>
            <javadoc line="46">
                Create an improper formatting instance with the default number format
                  for the numerator and denominator.                
            </javadoc>
            <method name="BigFractionFormat" type="constructor" line="50"/>
            <javadoc line="53">
                Create an improper formatting instance with a custom number format for
                  both the numerator and denominator.                
                <param>
                    format the custom format for both the numerator and denominator.                    
                </param>
            </javadoc>
            <method name="BigFractionFormat" type="constructor" line="58">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="62">
                Create an improper formatting instance with a custom number format for
                  the numerator and a custom number format for the denominator.                
                <param>
                    numeratorFormat the custom format for the numerator.                    
                </param>
                <param>
                    denominatorFormat the custom format for the denominator.                    
                </param>
            </javadoc>
            <method name="BigFractionFormat" type="constructor" line="69">
                <params>
                    <param name="numeratorFormat" type="NumberFormat"/>
                    <param name="denominatorFormat" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="73">
                Get the set of locales for which complex formats are available.  This
                  is the same set as the {@link NumberFormat} set.                
                <return>
                    available complex format locales.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="78"/>
            <javadoc line="82">
                This static method calls formatBigFraction() on a default instance of
                  BigFractionFormat.                
                <param>
                    f BigFraction object to format                    
                </param>
                <return>
                    A formatted BigFraction in proper form.                    
                </return>
            </javadoc>
            <method name="formatBigFraction" type="String" line="89">
                <params>
                    <param name="f" type="BigFraction"/>
                </params>
            </method>
            <javadoc line="93">
                Returns the default complex format for the current locale.                
                <return>
                    the default complex format.                    
                </return>
            </javadoc>
            <method name="getImproperInstance" type="BigFractionFormat" line="97"/>
            <javadoc line="101">
                Returns the default complex format for the given locale.                
                <param>
                    locale the specific locale used by the format.                    
                </param>
                <return>
                    the complex format specific to the given locale.                    
                </return>
            </javadoc>
            <method name="getImproperInstance" type="BigFractionFormat" line="106">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="110">
                Returns the default complex format for the current locale.                
                <return>
                    the default complex format.                    
                </return>
            </javadoc>
            <method name="getProperInstance" type="BigFractionFormat" line="114"/>
            <javadoc line="118">
                Returns the default complex format for the given locale.                
                <param>
                    locale the specific locale used by the format.                    
                </param>
                <return>
                    the complex format specific to the given locale.                    
                </return>
            </javadoc>
            <method name="getProperInstance" type="BigFractionFormat" line="123">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="127">
                Formats a {@link BigFraction} object to produce a string.  The BigFraction is
                  output in improper format.                
                <param>
                    BigFraction the object to format.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended                    
                </param>
                <param>
                    pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </param>
                <return>
                    the value passed in as toAppendTo.                    
                </return>
            </javadoc>
            <method name="format" type="StringBuffer" line="138">
                <params>
                    <param name="BigFraction" type="BigFraction"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
            </method>
            <javadoc line="150">
                Formats an object and appends the result to a StringBuffer.
                  &lt;code&gt;obj&lt;/code&gt; must be either a  {@link BigFraction} object or a{@link BigInteger} object or a {@link Number} object. Any other type of
                  object will result in an {@link IllegalArgumentException} being thrown.                
                <param>
                    obj the object to format.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended                    
                </param>
                <param>
                    pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </param>
                <return>
                    the value passed in as toAppendTo.                    
                </return>
                <see>
                    java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)                    
                </see>
                <throws>
                    MathIllegalArgumentException if <code>obj</code> is not a valid type.                    
                </throws>
            </javadoc>
            <method name="format" type="StringBuffer" line="166">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <declaration name="ret" type="StringBuffer" line="168"/>
                <scope line="169"/>
                <scope line="171"/>
                <scope line="173"/>
                <scope line="176"/>
            </method>
            <javadoc line="183">
                Parses a string to produce a {@link BigFraction} object.                
                <param>
                    source the string to parse                    
                </param>
                <return>
                    the parsed {@link BigFraction} object.                    
                </return>
                <exception>
                    MathParseException if the beginning of the specified string
                      cannot be parsed.                    
                </exception>
            </javadoc>
            <method name="parse" type="BigFraction" line="191">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="parsePosition" type="ParsePosition" line="192"/>
                <declaration name="result" type="BigFraction" line="193"/>
                <scope line="194"/>
            </method>
            <javadoc line="200">
                Parses a string to produce a {@link BigFraction} object.
                  This method expects the string to be formatted as an improper BigFraction.                
                <param>
                    source the string to parse                    
                </param>
                <param>
                    pos input/output parsing parameter.                    
                </param>
                <return>
                    the parsed {@link BigFraction} object.                    
                </return>
            </javadoc>
            <method name="parse" type="BigFraction" line="208">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <comment line="212">
                    parse whitespace                    
                </comment>
                <comment line="215">
                    parse numerator                    
                </comment>
                <comment line="218">
                    invalid integer number
                     set index back to initial, error index should already be set
                     character examined.                    
                </comment>
                <comment line="225">
                    parse &apos;/&apos;                    
                </comment>
                <comment line="230">
                    no &apos;/&apos;
                     return num as a BigFraction                    
                </comment>
                <comment line="234">
                    found &apos;/&apos;, continue parsing denominator                    
                </comment>
                <comment line="237">
                    invalid &apos;/&apos;
                     set index back to initial, error index should be the last
                     character examined.                    
                </comment>
                <comment line="245">
                    parse whitespace                    
                </comment>
                <comment line="248">
                    parse denominator                    
                </comment>
                <comment line="251">
                    invalid integer number
                     set index back to initial, error index should already be set
                     character examined.                    
                </comment>
                <declaration name="initialIndex" type="int" line="209"/>
                <declaration name="num" type="BigInteger" line="215"/>
                <scope line="216"/>
                <declaration name="startIndex" type="int" line="225"/>
                <declaration name="c" type="char" line="226"/>
                <declaration name="den" type="BigInteger" line="248"/>
                <scope line="249"/>
            </method>
            <javadoc line="260">
                Parses a string to produce a &lt;code&gt;BigInteger&lt;/code&gt;.                
                <param>
                    source the string to parse                    
                </param>
                <param>
                    pos input/output parsing parameter.                    
                </param>
                <return>
                    a parsed <code>BigInteger</code> or null if string does not
                      contain a BigInteger at the specified position                    
                </return>
            </javadoc>
            <method name="parseNextBigInteger" type="BigInteger" line="268">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <declaration name="start" type="int" line="270"/>
                <declaration name="end" type="int" line="271"/>
                <scope line="273"/>
                <scope line="277">
                    <declaration name="n" type="BigInteger" line="278"/>
                </scope>
                <scope line="281"/>
            </method>
        </class>
    </source>