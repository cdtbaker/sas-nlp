<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigInteger"/>
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathParseException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="BigFractionFormat" line="11">
            <extends class="AbstractFormat"/>
            <implements interface="Serializable"/>
            <javadoc line="11">
                Formats a BigFraction number in proper format or improper format.
                  &lt;p&gt;
                  The number format for each of the whole number, numerator and,
                  denominator can be configured.
                  &lt;/p&gt;                
                <since>
                    2.0                    
                </since>
                <version>
                    $Id: BigFractionFormat.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="21"/>
            <javadoc line="21">
                Serializable version identifier                
            </javadoc>
            <javadoc line="25">
                Create an improper formatting instance with the default number format
                  for the numerator and denominator.                
            </javadoc>
            <method name="BigFractionFormat" type="constructor" line="29"/>
            <javadoc line="31">
                Create an improper formatting instance with a custom number format for
                  both the numerator and denominator.                
                <param>
                    format the custom format for both the numerator and denominator.                    
                </param>
            </javadoc>
            <method name="BigFractionFormat" type="constructor" line="36">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="39">
                Create an improper formatting instance with a custom number format for
                  the numerator and a custom number format for the denominator.                
                <param>
                    numeratorFormat the custom format for the numerator.                    
                </param>
                <param>
                    denominatorFormat the custom format for the denominator.                    
                </param>
            </javadoc>
            <method name="BigFractionFormat" type="constructor" line="45">
                <params>
                    <param name="numeratorFormat" type="NumberFormat"/>
                    <param name="denominatorFormat" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="48">
                Get the set of locales for which complex formats are available.  This
                  is the same set as the {@link NumberFormat} set.                
                <return>
                    available complex format locales.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="53"/>
            <javadoc line="56">
                This static method calls formatBigFraction() on a default instance of
                  BigFractionFormat.                
                <param>
                    f BigFraction object to format                    
                </param>
                <return>
                    A formatted BigFraction in proper form.                    
                </return>
            </javadoc>
            <method name="formatBigFraction" type="String" line="62">
                <params>
                    <param name="f" type="BigFraction"/>
                </params>
            </method>
            <javadoc line="65">
                Returns the default complex format for the current locale.                
                <return>
                    the default complex format.                    
                </return>
            </javadoc>
            <method name="getImproperInstance" type="BigFractionFormat" line="69"/>
            <javadoc line="72">
                Returns the default complex format for the given locale.                
                <param>
                    locale the specific locale used by the format.                    
                </param>
                <return>
                    the complex format specific to the given locale.                    
                </return>
            </javadoc>
            <method name="getImproperInstance" type="BigFractionFormat" line="77">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="80">
                Returns the default complex format for the current locale.                
                <return>
                    the default complex format.                    
                </return>
            </javadoc>
            <method name="getProperInstance" type="BigFractionFormat" line="84"/>
            <javadoc line="87">
                Returns the default complex format for the given locale.                
                <param>
                    locale the specific locale used by the format.                    
                </param>
                <return>
                    the complex format specific to the given locale.                    
                </return>
            </javadoc>
            <method name="getProperInstance" type="BigFractionFormat" line="92">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="95">
                Formats a {@link BigFraction} object to produce a string.  The BigFraction is
                  output in improper format.                
                <param>
                    BigFraction the object to format.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended                    
                </param>
                <param>
                    pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </param>
                <return>
                    the value passed in as toAppendTo.                    
                </return>
            </javadoc>
            <method name="format" type="StringBuffer" line="104">
                <params>
                    <param name="BigFraction" type="BigFraction"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
            </method>
            <javadoc line="112">
                Formats an object and appends the result to a StringBuffer.
                  &lt;code&gt;obj&lt;/code&gt; must be either a  {@link BigFraction} object or a{@link BigInteger} object or a {@link Number} object. Any other type of
                  object will result in an {@link IllegalArgumentException} being thrown.                
                <param>
                    obj the object to format.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended                    
                </param>
                <param>
                    pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </param>
                <return>
                    the value passed in as toAppendTo.                    
                </return>
                <see>
                    java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)                    
                </see>
                <throws>
                    MathIllegalArgumentException if <code>obj</code> is not a valid type.                    
                </throws>
            </javadoc>
            <method name="format" type="StringBuffer" line="124">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <declaration name="ret" type="StringBuffer" line="125"/>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="132"/>
                <scope line="135"/>
            </method>
            <javadoc line="140">
                Parses a string to produce a {@link BigFraction} object.                
                <param>
                    source the string to parse                    
                </param>
                <return>
                    the parsed {@link BigFraction} object.                    
                </return>
                <exception>
                    MathParseException if the beginning of the specified string
                      cannot be parsed.                    
                </exception>
            </javadoc>
            <method name="parse" type="BigFraction" line="147">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="parsePosition" type="ParsePosition" line="148"/>
                <declaration name="result" type="BigFraction" line="149"/>
                <scope line="150"/>
            </method>
            <javadoc line="155">
                Parses a string to produce a {@link BigFraction} object.
                  This method expects the string to be formatted as an improper BigFraction.                
                <param>
                    source the string to parse                    
                </param>
                <param>
                    pos input/output parsing parameter.                    
                </param>
                <return>
                    the parsed {@link BigFraction} object.                    
                </return>
            </javadoc>
            <method name="parse" type="BigFraction" line="162">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <declaration name="initialIndex" type="int" line="163"/>
                <declaration name="num" type="BigInteger" line="165"/>
                <scope line="166"/>
                <declaration name="startIndex" type="int" line="170"/>
                <declaration name="c" type="char" line="171"/>
                <declaration name="den" type="BigInteger" line="183"/>
                <scope line="184"/>
            </method>
            <javadoc line="190">
                Parses a string to produce a &lt;code&gt;BigInteger&lt;/code&gt;.                
                <param>
                    source the string to parse                    
                </param>
                <param>
                    pos input/output parsing parameter.                    
                </param>
                <return>
                    a parsed <code>BigInteger</code> or null if string does not
                      contain a BigInteger at the specified position                    
                </return>
            </javadoc>
            <method name="parseNextBigInteger" type="BigInteger" line="197">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <declaration name="start" type="int" line="198"/>
                <declaration name="end" type="int" line="199"/>
                <scope line="200"/>
                <scope line="203">
                    <declaration name="n" type="BigInteger" line="204"/>
                </scope>
                <scope line="208"/>
            </method>
        </class>
    </source>