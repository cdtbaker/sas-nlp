<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <class name="NelderMeadSimplex" line="24">
            <extends class="AbstractSimplex"/>
            <javadoc line="24">
                This class implements the Nelder-Mead simplex algorithm.                
                <version>
                    $Id: NelderMeadSimplex.java 1435539 2013-01-19 13:27:24Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_RHO" type="double" line="31"/>
            <javadoc line="31">
                Default value for {@link #rho}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_KHI" type="double" line="33"/>
            <javadoc line="33">
                Default value for {@link #khi}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_GAMMA" type="double" line="35"/>
            <javadoc line="35">
                Default value for {@link #gamma}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_SIGMA" type="double" line="37"/>
            <javadoc line="37">
                Default value for {@link #sigma}: {@value}.                
            </javadoc>
            <declaration name="rho" type="double" line="39"/>
            <javadoc line="39">
                Reflection coefficient.                
            </javadoc>
            <declaration name="khi" type="double" line="41"/>
            <javadoc line="41">
                Expansion coefficient.                
            </javadoc>
            <declaration name="gamma" type="double" line="43"/>
            <javadoc line="43">
                Contraction coefficient.                
            </javadoc>
            <declaration name="sigma" type="double" line="45"/>
            <javadoc line="45">
                Shrinkage coefficient.                
            </javadoc>
            <javadoc line="48">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    n Dimension of the simplex.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="55">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="59">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    n Dimension of the simplex.                    
                </param>
                <param>
                    sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="68">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                </params>
            </method>
            <javadoc line="73">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
                <param>
                    sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="87">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="96">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int)}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="108">
                <params>
                    <param name="n" type="int"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="112">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="120">
                <params>
                    <param name="steps" type="double[]"/>
                </params>
            </method>
            <javadoc line="124">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
                <throws>
                    IllegalArgumentException if one of the steps is zero.                    
                </throws>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="138">
                <params>
                    <param name="steps" type="double[]"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="147">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="155">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                </params>
            </method>
            <javadoc line="159">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.                    
                </throws>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="175">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="184">
                {@inheritDoc}                
            </javadoc>
            <method name="iterate" type="void" line="187">
                <params>
                    <param name="evaluationFunction" type="MultivariateFunction"/>
                    <param name="comparator" type="Comparator&lt;PointValuePair&gt;"/>
                </params>
                <comment line="189">
                    The simplex has n + 1 points if dimension is n.                    
                </comment>
                <comment line="192">
                    Interesting values.                    
                </comment>
                <comment line="198">
                    Compute the centroid of the best vertices (dismissing the worst
                     point at index n).                    
                </comment>
                <comment line="212">
                    compute the reflection point                    
                </comment>
                <comment line="222">
                    Accept the reflected point.                    
                </comment>
                <comment line="225">
                    Compute the expansion point.                    
                </comment>
                <comment line="234">
                    Accept the expansion point.                    
                </comment>
                <comment line="237">
                    Accept the reflected point.                    
                </comment>
                <comment line="242">
                    Perform an outside contraction.                    
                </comment>
                <comment line="250">
                    Accept the contraction point.                    
                </comment>
                <comment line="255">
                    Perform an inside contraction.                    
                </comment>
                <comment line="264">
                    Accept the contraction point.                    
                </comment>
                <comment line="270">
                    Perform a shrink.                    
                </comment>
                <declaration name="n" type="int" line="189"/>
                <declaration name="best" type="PointValuePair" line="192"/>
                <declaration name="secondBest" type="PointValuePair" line="193"/>
                <declaration name="worst" type="PointValuePair" line="194"/>
                <declaration name="xWorst" type="double[]" line="195"/>
                <declaration name="centroid" type="double[]" line="199"/>
                <scope line="200">
                    <declaration name="x" type="double[]" line="201"/>
                    <scope line="202"/>
                </scope>
                <declaration name="scaling" type="double" line="206"/>
                <scope line="207"/>
                <declaration name="xR" type="double[]" line="212"/>
                <scope line="213"/>
                <declaration name="reflected" type="PointValuePair" line="216"/>
                <scope line="220"/>
                <scope line="223">
                    <declaration name="xE" type="double[]" line="225"/>
                    <scope line="226"/>
                    <declaration name="expanded" type="PointValuePair" line="229"/>
                    <scope line="232"/>
                    <scope line="235"/>
                </scope>
                <scope line="239">
                    <scope line="240">
                        <declaration name="xC" type="double[]" line="242"/>
                        <scope line="243"/>
                        <declaration name="outContracted" type="PointValuePair" line="246"/>
                        <scope line="248"/>
                    </scope>
                    <scope line="253">
                        <declaration name="xC" type="double[]" line="255"/>
                        <scope line="256"/>
                        <declaration name="inContracted" type="PointValuePair" line="259"/>
                        <scope line="262"/>
                    </scope>
                    <declaration name="xSmallest" type="double[]" line="270"/>
                    <scope line="271">
                        <declaration name="x" type="double[]" line="272"/>
                        <scope line="273"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>