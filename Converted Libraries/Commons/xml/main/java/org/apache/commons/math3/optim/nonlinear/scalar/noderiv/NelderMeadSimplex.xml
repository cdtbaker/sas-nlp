<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <class name="NelderMeadSimplex" line="5">
            <extends class="AbstractSimplex"/>
            <javadoc line="5">
                This class implements the Nelder-Mead simplex algorithm.                
                <version>
                    $Id: NelderMeadSimplex.java 1435539 2013-01-19 13:27:24Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_RHO" type="double" line="11"/>
            <javadoc line="11">
                Default value for {@link #rho}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_KHI" type="double" line="15"/>
            <javadoc line="15">
                Default value for {@link #khi}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_GAMMA" type="double" line="19"/>
            <javadoc line="19">
                Default value for {@link #gamma}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_SIGMA" type="double" line="23"/>
            <javadoc line="23">
                Default value for {@link #sigma}: {@value}.                
            </javadoc>
            <declaration name="rho" type="double" line="27"/>
            <javadoc line="27">
                Reflection coefficient.                
            </javadoc>
            <declaration name="khi" type="double" line="31"/>
            <javadoc line="31">
                Expansion coefficient.                
            </javadoc>
            <declaration name="gamma" type="double" line="35"/>
            <javadoc line="35">
                Contraction coefficient.                
            </javadoc>
            <declaration name="sigma" type="double" line="39"/>
            <javadoc line="39">
                Shrinkage coefficient.                
            </javadoc>
            <javadoc line="43">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    n Dimension of the simplex.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="49">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="52">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    n Dimension of the simplex.                    
                </param>
                <param>
                    sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="60">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                </params>
            </method>
            <javadoc line="63">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
                <param>
                    sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="73">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="80">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int)}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="88">
                <params>
                    <param name="n" type="int"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="91">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="98">
                <params>
                    <param name="steps" type="double[]"/>
                </params>
            </method>
            <javadoc line="101">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
                <throws>
                    IllegalArgumentException if one of the steps is zero.                    
                </throws>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="111">
                <params>
                    <param name="steps" type="double[]"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="118">
                Build a Nelder-Mead simplex with default coefficients.
                  The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
                  for both gamma and sigma.                
                <param>
                    referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </param>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="124">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                </params>
            </method>
            <javadoc line="127">
                Build a Nelder-Mead simplex with specified coefficients.                
                <param>
                    referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </param>
                <param>
                    rho Reflection coefficient.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <param>
                    sigma Shrinkage coefficient.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.                    
                </throws>
            </javadoc>
            <method name="NelderMeadSimplex" type="constructor" line="137">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                    <param name="rho" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="144">
                {@inheritDoc}                
            </javadoc>
            <method name="iterate" type="void" line="147">
                <params>
                    <param name="evaluationFunction" type="MultivariateFunction"/>
                    <param name="comparator" type="Comparator<PointValuePair>"/>
                </params>
                <declaration name="n" type="int" line="148"/>
                <declaration name="best" type="PointValuePair" line="149"/>
                <declaration name="secondBest" type="PointValuePair" line="150"/>
                <declaration name="worst" type="PointValuePair" line="151"/>
                <declaration name="xWorst" type="double[]" line="152"/>
                <declaration name="centroid" type="double[]" line="153"/>
                <scope line="154">
                    <declaration name="x" type="double[]" line="155"/>
                    <scope line="156"/>
                </scope>
                <declaration name="scaling" type="double" line="160"/>
                <scope line="161"/>
                <declaration name="xR" type="double[]" line="164"/>
                <scope line="165"/>
                <declaration name="reflected" type="PointValuePair" line="168"/>
                <scope line="169"/>
                <scope line="172">
                    <declaration name="xE" type="double[]" line="173"/>
                    <scope line="174"/>
                    <declaration name="expanded" type="PointValuePair" line="177"/>
                    <scope line="178"/>
                    <scope line="181"/>
                </scope>
                <scope line="185">
                    <scope line="186">
                        <declaration name="xC" type="double[]" line="187"/>
                        <scope line="188"/>
                        <declaration name="outContracted" type="PointValuePair" line="191"/>
                        <scope line="192"/>
                    </scope>
                    <scope line="197">
                        <declaration name="xC" type="double[]" line="198"/>
                        <scope line="199"/>
                        <declaration name="inContracted" type="PointValuePair" line="202"/>
                        <scope line="203"/>
                    </scope>
                    <declaration name="xSmallest" type="double[]" line="208"/>
                    <scope line="209">
                        <declaration name="x" type="double[]" line="210"/>
                        <scope line="211"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>