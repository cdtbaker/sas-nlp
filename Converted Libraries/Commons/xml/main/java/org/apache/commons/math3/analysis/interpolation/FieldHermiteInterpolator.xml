<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="FieldHermiteInterpolator" line="13">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="13">
                Polynomial interpolator using both sample values and sample derivatives.
                  &lt;p&gt;
                  The interpolation polynomials match all sample points, including both values
                  and provided derivatives. There is one polynomial for each component of
                  the values vector. All polynomials have the same degree. The degree of the
                  polynomials depends on the number of points and number of derivatives at each
                  point. For example the interpolation polynomials for n sample points without
                  any derivatives all have degree n-1. The interpolation polynomials for n
                  sample points with the two extreme points having value and first derivative
                  and the remaining points having value only all have degree n+1. The
                  interpolation polynomial for n sample points with value, first and second
                  derivative for all points all have degree 3n-1.
                  &lt;/p&gt;                
                <param>
                    <T>
                      Type of the field elements.                    
                </param>
                <version>
                    $Id: FieldHermiteInterpolator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="abscissae" type="List&lt;T&gt;" line="33"/>
            <javadoc line="33">
                Sample abscissae.                
            </javadoc>
            <declaration name="topDiagonal" type="List&lt;T[]&gt;" line="37"/>
            <javadoc line="37">
                Top diagonal of the divided differences array.                
            </javadoc>
            <declaration name="bottomDiagonal" type="List&lt;T[]&gt;" line="41"/>
            <javadoc line="41">
                Bottom diagonal of the divided differences array.                
            </javadoc>
            <javadoc line="45">
                Create an empty interpolator.                
            </javadoc>
            <method name="FieldHermiteInterpolator" type="constructor" line="48"/>
            <javadoc line="53">
                Add a sample point.
                  &lt;p&gt;
                  This method must be called once for each sample point. It is allowed to
                  mix some calls with values only with calls with values and first
                  derivatives.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The point abscissae for all calls &lt;em&gt;must&lt;/em&gt; be different.
                  &lt;/p&gt;                
                <param>
                    x abscissa of the sample point                    
                </param>
                <param>
                    value value and derivatives of the sample point
                      (if only one row is passed, it is the value, if two rows are
                      passed the first one is the value and the second the derivative
                      and so on)                    
                </param>
                <exception>
                    ZeroException if the abscissa difference between added point
                      and a previous point is zero (i.e. the two points are at same abscissa)                    
                </exception>
                <exception>
                    MathArithmeticException if the number of derivatives is larger
                      than 20, which prevents computation of a factorial                    
                </exception>
                <throws>
                    DimensionMismatchException if derivative structures are inconsistent                    
                </throws>
                <throws>
                    NullArgumentException if x is null                    
                </throws>
            </javadoc>
            <method name="addSamplePoint" type="void" line="75">
                <params>
                    <param name="x" type="T"/>
                    <param name="value" type="T[]"/>
                </params>
                <declaration name="factorial" type="T" line="77"/>
                <scope line="78">
                    <declaration name="y" type="T[]" line="79"/>
                    <scope line="80">
                        <declaration name="inv" type="T" line="82"/>
                        <scope line="83"/>
                    </scope>
                    <declaration name="n" type="int" line="87"/>
                    <declaration name="bottom0" type="T[]" line="89"/>
                    <scope line="90">
                        <declaration name="bottom1" type="T[]" line="91"/>
                        <scope line="92"/>
                        <declaration name="inv" type="T" line="95"/>
                        <scope line="96"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="105">
                Interpolate value at a specified abscissa.                
                <param>
                    x interpolation abscissa                    
                </param>
                <return>
                    interpolated value                    
                </return>
                <exception>
                    NoDataException if sample is empty                    
                </exception>
                <throws>
                    NullArgumentException if x is null                    
                </throws>
            </javadoc>
            <method name="value" type="T[]" line="112">
                <params>
                    <param name="x" type="T"/>
                </params>
                <scope line="114"/>
                <declaration name="value" type="T[]" line="117"/>
                <declaration name="valueCoeff" type="T" line="118"/>
                <scope line="119">
                    <declaration name="dividedDifference" type="T[]" line="120"/>
                    <scope line="121"/>
                    <declaration name="deltaX" type="T" line="124"/>
                </scope>
            </method>
            <javadoc line="129">
                Interpolate value and first derivatives at a specified abscissa.                
                <param>
                    x interpolation abscissa                    
                </param>
                <param>
                    order maximum derivation order                    
                </param>
                <return>
                    interpolated value and derivatives (value in row 0,
                      1<sup>st</sup> derivative in row 1, ... n<sup>th</sup> derivative in row n)                    
                </return>
                <exception>
                    NoDataException if sample is empty                    
                </exception>
                <throws>
                    NullArgumentException if x is null                    
                </throws>
            </javadoc>
            <method name="derivatives" type="T[][]" line="138">
                <params>
                    <param name="x" type="T"/>
                    <param name="order" type="int"/>
                </params>
                <scope line="140"/>
                <declaration name="zero" type="T" line="143"/>
                <declaration name="one" type="T" line="144"/>
                <declaration name="tj" type="T[]" line="145"/>
                <scope line="147"/>
                <declaration name="derivatives" type="T[][]" line="150"/>
                <declaration name="valueCoeff" type="T[]" line="151"/>
                <scope line="153">
                    <declaration name="dividedDifference" type="T[]" line="154"/>
                    <declaration name="deltaX" type="T" line="155"/>
                    <scope line="156">
                        <scope line="157"/>
                        <scope line="161"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>