<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.ode.AbstractIntegrator"/>
        <import package="org.apache.commons.math3.ode.ExpandableStatefulODE"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="AdaptiveStepsizeIntegrator" line="29">
            <extends class="AbstractIntegrator"/>
            <javadoc line="29">
                This abstract class holds the common part of all adaptive
                  stepsize integrators for Ordinary Differential Equations.
                  &lt;p&gt;These algorithms perform integration with stepsize control, which
                  means the user does not specify the integration step but rather a
                  tolerance on error. The error threshold is computed as
                  &lt;pre&gt;
                  threshold_i = absTol_i + relTol_i  max (abs (ym), abs (ym+1))
                  &lt;/pre&gt;
                  where absTol_i is the absolute tolerance for component i of the
                  state vector and relTol_i is the relative tolerance for the same
                  component. The user can also use only two scalar values absTol and
                  relTol which will be used for all components.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the Ordinary Differential Equations is an {@link ExpandableStatefulODEextended ODE} rather than a {@link org.apache.commons.math3.ode.FirstOrderDifferentialEquations basic ODE}, then
                  &lt;em&gt;only&lt;/em&gt; the {@link ExpandableStatefulODE#getPrimaryState() primary part}of the state vector is used for stepsize control, not the complete state vector.
                  &lt;/p&gt;
                  &lt;p&gt;If the estimated error for ym+1 is such that
                  &lt;pre&gt;
                  sqrt((sum (errEst_i / threshold_i)^2 ) / n) &lt; 1
                  &lt;/pre&gt;
                  (where n is the main set dimension) then the step is accepted,
                  otherwise the step is rejected and a new attempt is made with a new
                  stepsize.&lt;/p&gt;                
                <version>
                    $Id: AdaptiveStepsizeIntegrator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="scalAbsoluteTolerance" type="double" line="69"/>
            <javadoc line="69">
                Allowed absolute scalar error.                
            </javadoc>
            <declaration name="scalRelativeTolerance" type="double" line="72"/>
            <javadoc line="72">
                Allowed relative scalar error.                
            </javadoc>
            <declaration name="vecAbsoluteTolerance" type="double[]" line="75"/>
            <javadoc line="75">
                Allowed absolute vectorial error.                
            </javadoc>
            <declaration name="vecRelativeTolerance" type="double[]" line="78"/>
            <javadoc line="78">
                Allowed relative vectorial error.                
            </javadoc>
            <declaration name="mainSetDimension" type="int" line="81"/>
            <javadoc line="81">
                Main set dimension.                
            </javadoc>
            <declaration name="initialStep" type="double" line="84"/>
            <javadoc line="84">
                User supplied initial step.                
            </javadoc>
            <declaration name="minStep" type="double" line="87"/>
            <javadoc line="87">
                Minimal step.                
            </javadoc>
            <declaration name="maxStep" type="double" line="90"/>
            <javadoc line="90">
                Maximal step.                
            </javadoc>
            <javadoc line="93">
                Build an integrator with the given stepsize bounds.
                  The default step handler does nothing.                
                <param>
                    name name of the method                    
                </param>
                <param>
                    minStep minimal step (sign is irrelevant, regardless of
                      integration direction, forward or backward), the last step can
                      be smaller than this                    
                </param>
                <param>
                    maxStep maximal step (sign is irrelevant, regardless of
                      integration direction, forward or backward), the last step can
                      be smaller than this                    
                </param>
                <param>
                    scalAbsoluteTolerance allowed absolute error                    
                </param>
                <param>
                    scalRelativeTolerance allowed relative error                    
                </param>
            </javadoc>
            <method name="AdaptiveStepsizeIntegrator" type="constructor" line="108">
                <params>
                    <param name="name" type="String"/>
                    <param name="minStep" type="double"/>
                    <param name="maxStep" type="double"/>
                    <param name="scalAbsoluteTolerance" type="double"/>
                    <param name="scalRelativeTolerance" type="double"/>
                </params>
            </method>
            <javadoc line="116">
                Build an integrator with the given stepsize bounds.
                  The default step handler does nothing.                
                <param>
                    name name of the method                    
                </param>
                <param>
                    minStep minimal step (sign is irrelevant, regardless of
                      integration direction, forward or backward), the last step can
                      be smaller than this                    
                </param>
                <param>
                    maxStep maximal step (sign is irrelevant, regardless of
                      integration direction, forward or backward), the last step can
                      be smaller than this                    
                </param>
                <param>
                    vecAbsoluteTolerance allowed absolute error                    
                </param>
                <param>
                    vecRelativeTolerance allowed relative error                    
                </param>
            </javadoc>
            <method name="AdaptiveStepsizeIntegrator" type="constructor" line="131">
                <params>
                    <param name="name" type="String"/>
                    <param name="minStep" type="double"/>
                    <param name="maxStep" type="double"/>
                    <param name="vecAbsoluteTolerance" type="double[]"/>
                    <param name="vecRelativeTolerance" type="double[]"/>
                </params>
            </method>
            <javadoc line="139">
                Set the adaptive step size control parameters.
                  &lt;p&gt;
                  A side effect of this method is to also reset the initial
                  step so it will be automatically computed by the integrator
                  if {@link #setInitialStepSize(double) setInitialStepSize}is not called by the user.
                  &lt;/p&gt;                
                <param>
                    minimalStep minimal step (must be positive even for backward
                      integration), the last step can be smaller than this                    
                </param>
                <param>
                    maximalStep maximal step (must be positive even for backward
                      integration)                    
                </param>
                <param>
                    absoluteTolerance allowed absolute error                    
                </param>
                <param>
                    relativeTolerance allowed relative error                    
                </param>
            </javadoc>
            <method name="setStepSizeControl" type="void" line="155">
                <params>
                    <param name="minimalStep" type="double"/>
                    <param name="maximalStep" type="double"/>
                    <param name="absoluteTolerance" type="double"/>
                    <param name="relativeTolerance" type="double"/>
                </params>
            </method>
            <javadoc line="168">
                Set the adaptive step size control parameters.
                  &lt;p&gt;
                  A side effect of this method is to also reset the initial
                  step so it will be automatically computed by the integrator
                  if {@link #setInitialStepSize(double) setInitialStepSize}is not called by the user.
                  &lt;/p&gt;                
                <param>
                    minimalStep minimal step (must be positive even for backward
                      integration), the last step can be smaller than this                    
                </param>
                <param>
                    maximalStep maximal step (must be positive even for backward
                      integration)                    
                </param>
                <param>
                    absoluteTolerance allowed absolute error                    
                </param>
                <param>
                    relativeTolerance allowed relative error                    
                </param>
            </javadoc>
            <method name="setStepSizeControl" type="void" line="184">
                <params>
                    <param name="minimalStep" type="double"/>
                    <param name="maximalStep" type="double"/>
                    <param name="absoluteTolerance" type="double[]"/>
                    <param name="relativeTolerance" type="double[]"/>
                </params>
            </method>
            <javadoc line="197">
                Set the initial step size.
                  &lt;p&gt;This method allows the user to specify an initial positive
                  step size instead of letting the integrator guess it by
                  itself. If this method is not called before integration is
                  started, the initial step size will be estimated by the
                  integrator.&lt;/p&gt;                
                <param>
                    initialStepSize initial step size to use (must be positive even
                      for backward integration ; providing a negative value or a value
                      outside of the min/max step interval will lead the integrator to
                      ignore the value and compute the initial step size by itself)                    
                </param>
            </javadoc>
            <method name="setInitialStepSize" type="void" line="208">
                <params>
                    <param name="initialStepSize" type="double"/>
                </params>
                <scope line="209"/>
                <scope line="211"/>
            </method>
            <javadoc line="216">
                {@inheritDoc}                
            </javadoc>
            <method name="sanityChecks" type="void" line="219">
                <params>
                    <param name="equations" type="ExpandableStatefulODE"/>
                    <param name="t" type="double"/>
                </params>
                <scope line="225"/>
                <scope line="229"/>
            </method>
            <javadoc line="235">
                Initialize the integration step.                
                <param>
                    forward forward integration indicator                    
                </param>
                <param>
                    order order of the method                    
                </param>
                <param>
                    scale scaling vector for the state vector (can be shorter than state vector)                    
                </param>
                <param>
                    t0 start time                    
                </param>
                <param>
                    y0 state vector at t0                    
                </param>
                <param>
                    yDot0 first time derivative of y0                    
                </param>
                <param>
                    y1 work array for a state vector                    
                </param>
                <param>
                    yDot1 work array for the first time derivative of y1                    
                </param>
                <return>
                    first integration step                    
                </return>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded                    
                </exception>
                <exception>
                    DimensionMismatchException if arrays dimensions do not match equations settings                    
                </exception>
            </javadoc>
            <method name="initializeStep" type="double" line="251">
                <params>
                    <param name="forward" type="boolean"/>
                    <param name="order" type="int"/>
                    <param name="scale" type="double[]"/>
                    <param name="t0" type="double"/>
                    <param name="y0" type="double[]"/>
                    <param name="yDot0" type="double[]"/>
                    <param name="y1" type="double[]"/>
                    <param name="yDot1" type="double[]"/>
                </params>
                <comment line="255">
                    use the user provided value                    
                </comment>
                <comment line="259">
                    very rough first guess : h = 0.01 * ||y/scale|| / ||y&apos;/scale||
                     this guess will be used to perform an Euler step                    
                </comment>
                <comment line="277">
                    perform an Euler step using the preceding rough guess                    
                </comment>
                <comment line="283">
                    estimate the second derivative of the solution                    
                </comment>
                <comment line="291">
                    step size is computed such that
                     h^order * max (||y&apos;/tol||, ||y&apos;&apos;/tol||) = 0.01                    
                </comment>
                <comment line="298">
                    avoids cancellation when computing t1 - t0                    
                </comment>
                <scope line="253"/>
                <declaration name="ratio" type="double" line="260"/>
                <declaration name="yOnScale2" type="double" line="261"/>
                <declaration name="yDotOnScale2" type="double" line="262"/>
                <scope line="263"/>
                <declaration name="h" type="double" line="270"/>
                <scope line="272"/>
                <scope line="277"/>
                <declaration name="yDDotOnScale" type="double" line="283"/>
                <scope line="284"/>
                <declaration name="maxInv2" type="double" line="292"/>
                <declaration name="h1" type="double" line="293"/>
                <scope line="298"/>
                <scope line="301"/>
                <scope line="304"/>
            </method>
            <javadoc line="312">
                Filter the integration step.                
                <param>
                    h signed step                    
                </param>
                <param>
                    forward forward integration indicator                    
                </param>
                <param>
                    acceptSmall if true, steps smaller than the minimal value
                      are silently increased up to this value, if false such small
                      steps generate an exception                    
                </param>
                <return>
                    a bounded integration step (h if no bound is reach, or a bounded value)                    
                </return>
                <exception>
                    NumberIsTooSmallException if the step is too small and acceptSmall is false                    
                </exception>
            </javadoc>
            <method name="filterStep" type="double" line="322">
                <params>
                    <param name="h" type="double"/>
                    <param name="forward" type="boolean"/>
                    <param name="acceptSmall" type="boolean"/>
                </params>
                <declaration name="filteredH" type="double" line="324"/>
                <scope line="325">
                    <scope line="326"/>
                    <scope line="328"/>
                </scope>
                <scope line="334"/>
                <scope line="336"/>
            </method>
            <method name="integrate" type="void" line="344"/>
            <javadoc line="344">
                {@inheritDoc}                
            </javadoc>
            <javadoc line="350">
                {@inheritDoc}                
            </javadoc>
            <method name="getCurrentStepStart" type="double" line="352"/>
            <javadoc line="356">
                Reset internal state to dummy values.                
            </javadoc>
            <method name="resetInternalState" type="void" line="357"/>
            <javadoc line="362">
                Get the minimal step.                
                <return>
                    minimal step                    
                </return>
            </javadoc>
            <method name="getMinStep" type="double" line="365"/>
            <javadoc line="369">
                Get the maximal step.                
                <return>
                    maximal step                    
                </return>
            </javadoc>
            <method name="getMaxStep" type="double" line="372"/>
        </class>
    </source>