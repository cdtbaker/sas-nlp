<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <class name="HermiteInterpolator" line="13">
            <implements interface="UnivariateDifferentiableVectorFunction"/>
            <javadoc line="13">
                Polynomial interpolator using both sample values and sample derivatives.
                  &lt;p&gt;
                  The interpolation polynomials match all sample points, including both values
                  and provided derivatives. There is one polynomial for each component of
                  the values vector. All polynomials have the same degree. The degree of the
                  polynomials depends on the number of points and number of derivatives at each
                  point. For example the interpolation polynomials for n sample points without
                  any derivatives all have degree n-1. The interpolation polynomials for n
                  sample points with the two extreme points having value and first derivative
                  and the remaining points having value only all have degree n+1. The
                  interpolation polynomial for n sample points with value, first and second
                  derivative for all points all have degree 3n-1.
                  &lt;/p&gt;                
                <version>
                    $Id: HermiteInterpolator.java 1410460 2012-11-16 16:49:38Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="abscissae" type="List&lt;Double&gt;" line="31"/>
            <javadoc line="31">
                Sample abscissae.                
            </javadoc>
            <declaration name="topDiagonal" type="List&lt;double[]&gt;" line="35"/>
            <javadoc line="35">
                Top diagonal of the divided differences array.                
            </javadoc>
            <declaration name="bottomDiagonal" type="List&lt;double[]&gt;" line="39"/>
            <javadoc line="39">
                Bottom diagonal of the divided differences array.                
            </javadoc>
            <javadoc line="43">
                Create an empty interpolator.                
            </javadoc>
            <method name="HermiteInterpolator" type="constructor" line="46"/>
            <javadoc line="51">
                Add a sample point.
                  &lt;p&gt;
                  This method must be called once for each sample point. It is allowed to
                  mix some calls with values only with calls with values and first
                  derivatives.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The point abscissae for all calls &lt;em&gt;must&lt;/em&gt; be different.
                  &lt;/p&gt;                
                <param>
                    x abscissa of the sample point                    
                </param>
                <param>
                    value value and derivatives of the sample point
                      (if only one row is passed, it is the value, if two rows are
                      passed the first one is the value and the second the derivative
                      and so on)                    
                </param>
                <exception>
                    ZeroException if the abscissa difference between added point
                      and a previous point is zero (i.e. the two points are at same abscissa)                    
                </exception>
                <exception>
                    MathArithmeticException if the number of derivatives is larger
                      than 20, which prevents computation of a factorial                    
                </exception>
            </javadoc>
            <method name="addSamplePoint" type="void" line="71">
                <params>
                    <param name="x" type="double"/>
                    <param name="value" type="double[]"/>
                </params>
                <scope line="72">
                    <declaration name="y" type="double[]" line="73"/>
                    <scope line="74">
                        <declaration name="inv" type="double" line="75"/>
                        <scope line="76"/>
                    </scope>
                    <declaration name="n" type="int" line="80"/>
                    <declaration name="bottom0" type="double[]" line="82"/>
                    <scope line="83">
                        <declaration name="bottom1" type="double[]" line="84"/>
                        <declaration name="inv" type="double" line="85"/>
                        <scope line="86"/>
                        <scope line="89"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="98">
                Compute the interpolation polynomials.                
                <return>
                    interpolation polynomials array                    
                </return>
                <exception>
                    NoDataException if sample is empty                    
                </exception>
            </javadoc>
            <method name="getPolynomials" type="PolynomialFunction[]" line="103">
                <declaration name="zero" type="PolynomialFunction" line="105"/>
                <declaration name="polynomials" type="PolynomialFunction[]" line="106"/>
                <scope line="107"/>
                <declaration name="coeff" type="PolynomialFunction" line="110"/>
                <scope line="111">
                    <declaration name="tdi" type="double[]" line="112"/>
                    <scope line="113"/>
                </scope>
            </method>
            <javadoc line="120">
                Interpolate value at a specified abscissa.
                  &lt;p&gt;
                  Calling this method is equivalent to call the {@link PolynomialFunction#value(double)value} methods of all polynomials returned by {@link #getPolynomials() getPolynomials},
                  except it does not build the intermediate polynomials, so this method is faster and
                  numerically more stable.
                  &lt;/p&gt;                
                <param>
                    x interpolation abscissa                    
                </param>
                <return>
                    interpolated value                    
                </return>
                <exception>
                    NoDataException if sample is empty                    
                </exception>
            </javadoc>
            <method name="value" type="double[]" line="131">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="value" type="double[]" line="133"/>
                <declaration name="valueCoeff" type="double" line="134"/>
                <scope line="135">
                    <declaration name="dividedDifference" type="double[]" line="136"/>
                    <scope line="137"/>
                    <declaration name="deltaX" type="double" line="140"/>
                </scope>
            </method>
            <javadoc line="145">
                Interpolate value at a specified abscissa.
                  &lt;p&gt;
                  Calling this method is equivalent to call the {@link PolynomialFunction#value(DerivativeStructure) value} methods of all polynomials
                  returned by {@link #getPolynomials() getPolynomials}, except it does not build the
                  intermediate polynomials, so this method is faster and numerically more stable.
                  &lt;/p&gt;                
                <param>
                    x interpolation abscissa                    
                </param>
                <return>
                    interpolated value                    
                </return>
                <exception>
                    NoDataException if sample is empty                    
                </exception>
            </javadoc>
            <method name="value" type="DerivativeStructure[]" line="156">
                <params>
                    <param name="x" type="DerivativeStructure"/>
                </params>
                <declaration name="value" type="DerivativeStructure[]" line="158"/>
                <declaration name="valueCoeff" type="DerivativeStructure" line="160"/>
                <scope line="161">
                    <declaration name="dividedDifference" type="double[]" line="162"/>
                    <scope line="163"/>
                    <declaration name="deltaX" type="DerivativeStructure" line="166"/>
                </scope>
            </method>
            <javadoc line="171">
                Check interpolation can be performed.                
                <exception>
                    NoDataException if interpolation cannot be performed
                      because sample is empty                    
                </exception>
            </javadoc>
            <method name="checkInterpolation" type="void" line="176">
                <scope line="177"/>
            </method>
            <javadoc line="181">
                Create a polynomial from its coefficients.                
                <param>
                    c polynomials coefficients                    
                </param>
                <return>
                    polynomial                    
                </return>
            </javadoc>
            <method name="polynomial" type="PolynomialFunction" line="186">
                <params>
                    <param name="c" type="double"/>
                </params>
            </method>
        </class>
    </source>