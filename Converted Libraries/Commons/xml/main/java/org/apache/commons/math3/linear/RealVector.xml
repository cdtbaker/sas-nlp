<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.util.Iterator"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.function.Add"/>
        <import package="org.apache.commons.math3.analysis.function.Multiply"/>
        <import package="org.apache.commons.math3.analysis.function.Divide"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="RealVector" line="37">
            <javadoc line="37">
                Class defining a real-valued vector with basic algebraic operations.
                  &lt;p&gt;
                  vector element indexing is 0-based -- e.g., {@code getEntry(0)}returns the first element of the vector.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The {@code code map} and {@code mapToSelf} methods operate
                  on vectors element-wise, i.e. they perform the same operation (adding a scalar,
                  applying a function ...) on each element in turn. The {@code map}versions create a new vector to hold the result and do not change the instance.
                  The {@code mapToSelf} version uses the instance itself to store the
                  results, so the instance is changed by this method. In all cases, the result
                  vector is returned by the methods, allowing the &lt;i&gt;fluent API&lt;/i&gt;
                  style, like this:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  RealVector result = v.mapAddToSelf(3.4).mapToSelf(new Tan()).mapToSelf(new Power(2.3));
                  &lt;/pre&gt;                
                <version>
                    $Id: RealVector.java 1570510 2014-02-21 10:16:52Z luc $                    
                </version>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="getDimension" type="int" line="61"/>
            <javadoc line="61">
                Returns the size of the vector.                
                <return>
                    the size of this vector.                    
                </return>
            </javadoc>
            <method name="getEntry" type="double" line="68"/>
            <javadoc line="68">
                Return the entry at the specified index.                
                <param>
                    index Index location of entry to be fetched.                    
                </param>
                <return>
                    the vector entry at {@code index}.                    
                </return>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
                <see>
                    #setEntry(int,double)                    
                </see>
            </javadoc>
            <method name="setEntry" type="void" line="78"/>
            <javadoc line="78">
                Set a single element.                
                <param>
                    index element index.                    
                </param>
                <param>
                    value new value for the element.                    
                </param>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
                <see>
                    #getEntry(int)                    
                </see>
            </javadoc>
            <javadoc line="89">
                Change an entry at the specified index.                
                <param>
                    index Index location of entry to be set.                    
                </param>
                <param>
                    increment Value to add to the vector entry.                    
                </param>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="addToEntry" type="void" line="98">
                <params>
                    <param name="index" type="int"/>
                    <param name="increment" type="double"/>
                </params>
            </method>
            <method name="append" type="RealVector" line="102"/>
            <javadoc line="102">
                Construct a new vector by appending a vector to this vector.                
                <param>
                    v vector to append to this one.                    
                </param>
                <return>
                    a new vector.                    
                </return>
            </javadoc>
            <method name="append" type="RealVector" line="110"/>
            <javadoc line="110">
                Construct a new vector by appending a double to this vector.                
                <param>
                    d double to append.                    
                </param>
                <return>
                    a new vector.                    
                </return>
            </javadoc>
            <method name="getSubVector" type="RealVector" line="118"/>
            <javadoc line="118">
                Get a subvector from consecutive elements.                
                <param>
                    index index of first element.                    
                </param>
                <param>
                    n number of elements to be retrieved.                    
                </param>
                <return>
                    a vector containing n elements.                    
                </return>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
                <throws>
                    NotPositiveException if the number of elements is not positive.                    
                </throws>
            </javadoc>
            <method name="setSubVector" type="void" line="130"/>
            <javadoc line="130">
                Set a sequence of consecutive elements.                
                <param>
                    index index of first element to be set.                    
                </param>
                <param>
                    v vector containing the values to set.                    
                </param>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
            </javadoc>
            <method name="isNaN" type="boolean" line="140"/>
            <javadoc line="140">
                Check whether any coordinate of this vector is {@code NaN}.                
                <return>
                    {@code true} if any coordinate of this vector is {@code NaN},{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="148"/>
            <javadoc line="148">
                Check whether any coordinate of this vector is infinite and none are {@code NaN}.                
                <return>
                    {@code true} if any coordinate of this vector is infinite and
                      none are {@code NaN}, {@code false} otherwise.                    
                </return>
            </javadoc>
            <javadoc line="156">
                Check if instance and specified vectors have the same dimension.                
                <param>
                    v Vector to compare instance with.                    
                </param>
                <throws>
                    DimensionMismatchException if the vectors do not
                      have the same dimension.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="164">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
            </method>
            <javadoc line="168">
                Check if instance dimension is equal to some expected value.                
                <param>
                    n Expected dimension.                    
                </param>
                <throws>
                    DimensionMismatchException if the dimension is
                      inconsistent with the vector size.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="176">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="d" type="int" line="177"/>
                <scope line="178"/>
            </method>
            <javadoc line="183">
                Check if an index is valid.                
                <param>
                    index Index to check.                    
                </param>
                <exception>
                    OutOfRangeException if {@code index} is not valid.                    
                </exception>
            </javadoc>
            <method name="checkIndex" type="void" line="189">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="191"/>
            </method>
            <javadoc line="197">
                Checks that the indices of a subvector are valid.                
                <param>
                    start the index of the first entry of the subvector                    
                </param>
                <param>
                    end the index of the last entry of the subvector (inclusive)                    
                </param>
                <throws>
                    OutOfRangeException if {@code start} of {@code end} are not valid                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="checkIndices" type="void" line="207">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="219">
                    TODO Use more specific error message                    
                </comment>
                <declaration name="dim" type="int" line="208"/>
                <scope line="209"/>
                <scope line="213"/>
                <scope line="217"/>
            </method>
            <javadoc line="224">
                Compute the sum of this vector and {@code v}.
                  Returns a new vector. Does not change instance data.                
                <param>
                    v Vector to be added.                    
                </param>
                <return>
                    {@code this} + {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
            </javadoc>
            <method name="add" type="RealVector" line="233">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="result" type="RealVector" line="235"/>
                <declaration name="it" type="Iterator&amp;lt;Entry&amp;gt;" line="236"/>
                <scope line="237">
                    <declaration name="e" type="Entry" line="238"/>
                    <declaration name="index" type="int" line="239"/>
                </scope>
            </method>
            <javadoc line="245">
                Subtract {@code v} from this vector.
                  Returns a new vector. Does not change instance data.                
                <param>
                    v Vector to be subtracted.                    
                </param>
                <return>
                    {@code this} - {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
            </javadoc>
            <method name="subtract" type="RealVector" line="254">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="result" type="RealVector" line="256"/>
                <declaration name="it" type="Iterator&amp;lt;Entry&amp;gt;" line="257"/>
                <scope line="258">
                    <declaration name="e" type="Entry" line="259"/>
                    <declaration name="index" type="int" line="260"/>
                </scope>
            </method>
            <javadoc line="266">
                Add a value to each entry.
                  Returns a new vector. Does not change instance data.                
                <param>
                    d Value to be added to each entry.                    
                </param>
                <return>
                    {@code this} + {@code d}.                    
                </return>
            </javadoc>
            <method name="mapAdd" type="RealVector" line="273">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="277">
                Add a value to each entry.
                  The instance is changed in-place.                
                <param>
                    d Value to be added to each entry.                    
                </param>
                <return>
                    {@code this}.                    
                </return>
            </javadoc>
            <method name="mapAddToSelf" type="RealVector" line="284">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="285"/>
            </method>
            <method name="copy" type="RealVector" line="291"/>
            <javadoc line="291">
                Returns a (deep) copy of this vector.                
                <return>
                    a vector copy.                    
                </return>
            </javadoc>
            <javadoc line="298">
                Compute the dot product of this vector with {@code v}.                
                <param>
                    v Vector with which dot product should be computed                    
                </param>
                <return>
                    the scalar dot product between this instance and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
            </javadoc>
            <method name="dotProduct" type="double" line="306">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="d" type="double" line="308"/>
                <declaration name="n" type="int" line="309"/>
                <scope line="310"/>
            </method>
            <javadoc line="316">
                Computes the cosine of the angle between this vector and the
                  argument.                
                <param>
                    v Vector.                    
                </param>
                <return>
                    the cosine of the angle between this vector and {@code v}.                    
                </return>
                <throws>
                    MathArithmeticException if {@code this} or {@code v} is the null
                      vector                    
                </throws>
                <throws>
                    DimensionMismatchException if the dimensions of {@code this} and{@code v} do not match                    
                </throws>
            </javadoc>
            <method name="cosine" type="double" line="328">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="norm" type="double" line="329"/>
                <declaration name="vNorm" type="double" line="330"/>
                <scope line="333"/>
            </method>
            <method name="ebeDivide" type="RealVector" line="339"/>
            <javadoc line="339">
                Element-by-element division.                
                <param>
                    v Vector by which instance elements must be divided.                    
                </param>
                <return>
                    a vector containing this[i] / v[i] for all i.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
            </javadoc>
            <method name="ebeMultiply" type="RealVector" line="350"/>
            <javadoc line="350">
                Element-by-element multiplication.                
                <param>
                    v Vector by which instance elements must be multiplied                    
                </param>
                <return>
                    a vector containing this[i]  v[i] for all i.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
            </javadoc>
            <javadoc line="361">
                Distance between two vectors.
                  &lt;p&gt;This method computes the distance consistent with the
                  L&lt;sub&gt;2&lt;/sub&gt; norm, i.e. the square root of the sum of
                  element differences, or Euclidean distance.&lt;/p&gt;                
                <param>
                    v Vector to which distance is requested.                    
                </param>
                <return>
                    the distance between two vectors.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
                <see>
                    #getL1Distance(RealVector)                    
                </see>
                <see>
                    #getLInfDistance(RealVector)                    
                </see>
                <see>
                    #getNorm()                    
                </see>
            </javadoc>
            <method name="getDistance" type="double" line="375">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="d" type="double" line="377"/>
                <declaration name="it" type="Iterator&amp;lt;Entry&amp;gt;" line="378"/>
                <scope line="379">
                    <declaration name="e" type="Entry" line="380"/>
                    <declaration name="diff" type="double" line="381"/>
                </scope>
            </method>
            <javadoc line="387">
                Returns the L&lt;sub&gt;2&lt;/sub&gt; norm of the vector.
                  &lt;p&gt;The L&lt;sub&gt;2&lt;/sub&gt; norm is the root of the sum of
                  the squared elements.&lt;/p&gt;                
                <return>
                    the norm.                    
                </return>
                <see>
                    #getL1Norm()                    
                </see>
                <see>
                    #getLInfNorm()                    
                </see>
                <see>
                    #getDistance(RealVector)                    
                </see>
            </javadoc>
            <method name="getNorm" type="double" line="397">
                <declaration name="sum" type="double" line="398"/>
                <declaration name="it" type="Iterator&amp;lt;Entry&amp;gt;" line="399"/>
                <scope line="400">
                    <declaration name="e" type="Entry" line="401"/>
                    <declaration name="value" type="double" line="402"/>
                </scope>
            </method>
            <javadoc line="408">
                Returns the L&lt;sub&gt;1&lt;/sub&gt; norm of the vector.
                  &lt;p&gt;The L&lt;sub&gt;1&lt;/sub&gt; norm is the sum of the absolute
                  values of the elements.&lt;/p&gt;                
                <return>
                    the norm.                    
                </return>
                <see>
                    #getNorm()                    
                </see>
                <see>
                    #getLInfNorm()                    
                </see>
                <see>
                    #getL1Distance(RealVector)                    
                </see>
            </javadoc>
            <method name="getL1Norm" type="double" line="418">
                <declaration name="norm" type="double" line="419"/>
                <declaration name="it" type="Iterator&amp;lt;Entry&amp;gt;" line="420"/>
                <scope line="421">
                    <declaration name="e" type="Entry" line="422"/>
                </scope>
            </method>
            <javadoc line="428">
                Returns the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm of the vector.
                  &lt;p&gt;The L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm is the max of the absolute
                  values of the elements.&lt;/p&gt;                
                <return>
                    the norm.                    
                </return>
                <see>
                    #getNorm()                    
                </see>
                <see>
                    #getL1Norm()                    
                </see>
                <see>
                    #getLInfDistance(RealVector)                    
                </see>
            </javadoc>
            <method name="getLInfNorm" type="double" line="438">
                <declaration name="norm" type="double" line="439"/>
                <declaration name="it" type="Iterator&amp;lt;Entry&amp;gt;" line="440"/>
                <scope line="441">
                    <declaration name="e" type="Entry" line="442"/>
                </scope>
            </method>
            <javadoc line="448">
                Distance between two vectors.
                  &lt;p&gt;This method computes the distance consistent with
                  L&lt;sub&gt;1&lt;/sub&gt; norm, i.e. the sum of the absolute values of
                  the elements differences.&lt;/p&gt;                
                <param>
                    v Vector to which distance is requested.                    
                </param>
                <return>
                    the distance between two vectors.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
            </javadoc>
            <method name="getL1Distance" type="double" line="460">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="d" type="double" line="462"/>
                <declaration name="it" type="Iterator&amp;lt;Entry&amp;gt;" line="463"/>
                <scope line="464">
                    <declaration name="e" type="Entry" line="465"/>
                </scope>
            </method>
            <javadoc line="471">
                Distance between two vectors.
                  &lt;p&gt;This method computes the distance consistent with
                  L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm, i.e. the max of the absolute values of
                  element differences.&lt;/p&gt;                
                <param>
                    v Vector to which distance is requested.                    
                </param>
                <return>
                    the distance between two vectors.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
                <see>
                    #getDistance(RealVector)                    
                </see>
                <see>
                    #getL1Distance(RealVector)                    
                </see>
                <see>
                    #getLInfNorm()                    
                </see>
            </javadoc>
            <method name="getLInfDistance" type="double" line="486">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="d" type="double" line="488"/>
                <declaration name="it" type="Iterator&amp;lt;Entry&amp;gt;" line="489"/>
                <scope line="490">
                    <declaration name="e" type="Entry" line="491"/>
                </scope>
            </method>
            <javadoc line="497">
                Get the index of the minimum entry.                
                <return>
                    the index of the minimum entry or -1 if vector length is 0
                      or all entries are {@code NaN}.                    
                </return>
            </javadoc>
            <method name="getMinIndex" type="int" line="503">
                <declaration name="minIndex" type="int" line="504"/>
                <declaration name="minValue" type="double" line="505"/>
                <declaration name="iterator" type="Iterator&amp;lt;Entry&amp;gt;" line="506"/>
                <scope line="507">
                    <declaration name="entry" type="Entry" line="508"/>
                    <scope line="509"/>
                </scope>
            </method>
            <javadoc line="517">
                Get the value of the minimum entry.                
                <return>
                    the value of the minimum entry or {@code NaN} if all
                      entries are {@code NaN}.                    
                </return>
            </javadoc>
            <method name="getMinValue" type="double" line="523">
                <declaration name="minIndex" type="int" line="524"/>
            </method>
            <javadoc line="528">
                Get the index of the maximum entry.                
                <return>
                    the index of the maximum entry or -1 if vector length is 0
                      or all entries are {@code NaN}                    
                </return>
            </javadoc>
            <method name="getMaxIndex" type="int" line="534">
                <declaration name="maxIndex" type="int" line="535"/>
                <declaration name="maxValue" type="double" line="536"/>
                <declaration name="iterator" type="Iterator&amp;lt;Entry&amp;gt;" line="537"/>
                <scope line="538">
                    <declaration name="entry" type="Entry" line="539"/>
                    <scope line="540"/>
                </scope>
            </method>
            <javadoc line="548">
                Get the value of the maximum entry.                
                <return>
                    the value of the maximum entry or {@code NaN} if all
                      entries are {@code NaN}.                    
                </return>
            </javadoc>
            <method name="getMaxValue" type="double" line="554">
                <declaration name="maxIndex" type="int" line="555"/>
            </method>
            <javadoc line="560">
                Multiply each entry by the argument. Returns a new vector.
                  Does not change instance data.                
                <param>
                    d Multiplication factor.                    
                </param>
                <return>
                    {@code this}  {@code d}.                    
                </return>
            </javadoc>
            <method name="mapMultiply" type="RealVector" line="567">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="571">
                Multiply each entry.
                  The instance is changed in-place.                
                <param>
                    d Multiplication factor.                    
                </param>
                <return>
                    {@code this}.                    
                </return>
            </javadoc>
            <method name="mapMultiplyToSelf" type="RealVector" line="578">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="582">
                Subtract a value from each entry. Returns a new vector.
                  Does not change instance data.                
                <param>
                    d Value to be subtracted.                    
                </param>
                <return>
                    {@code this} - {@code d}.                    
                </return>
            </javadoc>
            <method name="mapSubtract" type="RealVector" line="589">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="593">
                Subtract a value from each entry.
                  The instance is changed in-place.                
                <param>
                    d Value to be subtracted.                    
                </param>
                <return>
                    {@code this}.                    
                </return>
            </javadoc>
            <method name="mapSubtractToSelf" type="RealVector" line="600">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="604">
                Divide each entry by the argument. Returns a new vector.
                  Does not change instance data.                
                <param>
                    d Value to divide by.                    
                </param>
                <return>
                    {@code this} / {@code d}.                    
                </return>
            </javadoc>
            <method name="mapDivide" type="RealVector" line="611">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="615">
                Divide each entry by the argument.
                  The instance is changed in-place.                
                <param>
                    d Value to divide by.                    
                </param>
                <return>
                    {@code this}.                    
                </return>
            </javadoc>
            <method name="mapDivideToSelf" type="RealVector" line="622">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="626">
                Compute the outer product.                
                <param>
                    v Vector with which outer product should be computed.                    
                </param>
                <return>
                    the matrix outer product between this instance and {@code v}.                    
                </return>
            </javadoc>
            <method name="outerProduct" type="RealMatrix" line="632">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="m" type="int" line="633"/>
                <declaration name="n" type="int" line="634"/>
                <declaration name="product" type="RealMatrix" line="635"/>
                <scope line="636"/>
                <scope line="638"/>
                <scope line="641">
                    <scope line="642"/>
                </scope>
            </method>
            <javadoc line="649">
                Find the orthogonal projection of this vector onto another vector.                
                <param>
                    v vector onto which instance must be projected.                    
                </param>
                <return>
                    projection of the instance onto {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
                <throws>
                    MathArithmeticException if {@code this} or {@code v} is the null
                      vector                    
                </throws>
            </javadoc>
            <method name="projection" type="RealVector" line="660">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="norm2" type="double" line="661"/>
                <scope line="662"/>
            </method>
            <javadoc line="668">
                Set all elements to a single value.                
                <param>
                    value Single value to set for all elements.                    
                </param>
            </javadoc>
            <method name="set" type="void" line="673">
                <params>
                    <param name="value" type="double"/>
                </params>
                <declaration name="it" type="Iterator&amp;lt;Entry&amp;gt;" line="674"/>
                <scope line="675">
                    <declaration name="e" type="Entry" line="676"/>
                </scope>
            </method>
            <javadoc line="681">
                Convert the vector to an array of {@code double}s.
                  The array is independent from this vector data: the elements
                  are copied.                
                <return>
                    an array containing a copy of the vector elements.                    
                </return>
            </javadoc>
            <method name="toArray" type="double[]" line="688">
                <declaration name="dim" type="int" line="689"/>
                <declaration name="values" type="double[]" line="690"/>
                <scope line="691"/>
            </method>
            <javadoc line="697">
                Creates a unit vector pointing in the direction of this vector.
                  The instance is not changed by this method.                
                <return>
                    a unit vector pointing in direction of this vector.                    
                </return>
                <throws>
                    MathArithmeticException if the norm is zero.                    
                </throws>
            </javadoc>
            <method name="unitVector" type="RealVector" line="704">
                <declaration name="norm" type="double" line="705"/>
                <scope line="706"/>
            </method>
            <javadoc line="712">
                Converts this vector into a unit vector.
                  The instance itself is changed by this method.                
                <throws>
                    MathArithmeticException if the norm is zero.                    
                </throws>
            </javadoc>
            <method name="unitize" type="void" line="718">
                <declaration name="norm" type="double" line="719"/>
                <scope line="720"/>
            </method>
            <javadoc line="726">
                Create a sparse iterator over the vector, which may omit some entries.
                  The ommitted entries are either exact zeroes (for dense implementations)
                  or are the entries which are not stored (for real sparse vectors).
                  No guarantees are made about order of iteration.
                  &lt;p&gt;Note: derived classes are required to return an {@link Iterator} that
                  returns non-null {@link Entry} objects as long as {@link Iterator#hasNext()}returns {@code true}.&lt;/p&gt;                
                <return>
                    a sparse iterator.                    
                </return>
            </javadoc>
            <method name="sparseIterator" type="Iterator&lt;Entry&gt;" line="738"/>
            <javadoc line="742">
                Generic dense iterator. Iteration is in increasing order
                  of the vector index.
                  &lt;p&gt;Note: derived classes are required to return an {@link Iterator} that
                  returns non-null {@link Entry} objects as long as {@link Iterator#hasNext()}returns {@code true}.&lt;/p&gt;                
                <return>
                    a dense iterator.                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator&lt;Entry&gt;" line="752">
                <declaration name="dim" type="int" line="753"/>
                <anonymous_class line="754">
                    <declaration name="i" type="int" line="756"/>
                    <javadoc line="756">
                        Current index.                        
                    </javadoc>
                    <declaration name="e" type="Entry" line="759"/>
                    <javadoc line="759">
                        Current entry.                        
                    </javadoc>
                    <javadoc line="762">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="hasNext" type="boolean" line="763"/>
                    <javadoc line="767">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="next" type="Entry" line="768">
                        <scope line="769"/>
                        <scope line="772"/>
                    </method>
                    <javadoc line="777">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="remove" type="void" line="782"/>
                </anonymous_class>
            </method>
            <javadoc line="788">
                Acts as if implemented as:
                  &lt;pre&gt;
                  return copy().mapToSelf(function);
                  &lt;/pre&gt;
                  Returns a new vector. Does not change instance data.                
                <param>
                    function Function to apply to each entry.                    
                </param>
                <return>
                    a new vector.                    
                </return>
            </javadoc>
            <method name="map" type="RealVector" line="798">
                <params>
                    <param name="function" type="UnivariateFunction"/>
                </params>
            </method>
            <javadoc line="802">
                Acts as if it is implemented as:
                  &lt;pre&gt;
                  Entry e = null;
                  for(Iterator&lt;Entry&gt; it = iterator(); it.hasNext(); e = it.next()) {
                  e.setValue(function.value(e.getValue()));
                  }
                  &lt;/pre&gt;
                  Entries of this vector are modified in-place by this method.                
                <param>
                    function Function to apply to each entry.                    
                </param>
                <return>
                    a reference to this vector.                    
                </return>
            </javadoc>
            <method name="mapToSelf" type="RealVector" line="815">
                <params>
                    <param name="function" type="UnivariateFunction"/>
                </params>
                <declaration name="it" type="Iterator&amp;lt;Entry&amp;gt;" line="816"/>
                <scope line="817">
                    <declaration name="e" type="Entry" line="818"/>
                </scope>
            </method>
            <javadoc line="824">
                Returns a new vector representing {@code a  this + b  y}, the linear
                  combination of {@code this} and {@code y}.
                  Returns a new vector. Does not change instance data.                
                <param>
                    a Coefficient of {@code this}.                    
                </param>
                <param>
                    b Coefficient of {@code y}.                    
                </param>
                <param>
                    y Vector with which {@code this} is linearly combined.                    
                </param>
                <return>
                    a vector containing {@code a  this[i] + b  y[i]} for all{@code i}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code y} is not the same size as{@code this} vector.                    
                </throws>
            </javadoc>
            <method name="combine" type="RealVector" line="838">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="y" type="RealVector"/>
                </params>
            </method>
            <javadoc line="842">
                Updates {@code this} with the linear combination of {@code this} and{@code y}.                
                <param>
                    a Weight of {@code this}.                    
                </param>
                <param>
                    b Weight of {@code y}.                    
                </param>
                <param>
                    y Vector with which {@code this} is linearly combined.                    
                </param>
                <return>
                    {@code this}, with components equal to{@code a  this[i] + b  y[i]} for all {@code i}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code y} is not the same size as{@code this} vector.                    
                </throws>
            </javadoc>
            <method name="combineToSelf" type="RealVector" line="855">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="y" type="RealVector"/>
                </params>
                <scope line="857">
                    <declaration name="xi" type="double" line="858"/>
                    <declaration name="yi" type="double" line="859"/>
                </scope>
            </method>
            <javadoc line="865">
                Visits (but does not alter) all entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor the visitor to be used to process the entries of this
                      vector                    
                </param>
                <return>
                    the value returned by {@link RealVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="875">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                </params>
                <declaration name="dim" type="int" line="876"/>
                <scope line="878"/>
            </method>
            <javadoc line="884">
                Visits (but does not alter) some entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link RealVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="899">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="902"/>
            </method>
            <javadoc line="908">
                Visits (but does not alter) all entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor the visitor to be used to process the entries of this
                      vector                    
                </param>
                <return>
                    the value returned by {@link RealVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="920">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                </params>
            </method>
            <javadoc line="924">
                Visits (but does not alter) some entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link RealVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="941">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="945">
                Visits (and possibly alters) all entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor the visitor to be used to process and modify the entries
                      of this vector                    
                </param>
                <return>
                    the value returned by {@link RealVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="955">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                </params>
                <declaration name="dim" type="int" line="956"/>
                <scope line="958"/>
            </method>
            <javadoc line="964">
                Visits (and possibly alters) some entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link RealVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="979">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="982"/>
            </method>
            <javadoc line="988">
                Visits (and possibly alters) all entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor the visitor to be used to process the entries of this
                      vector                    
                </param>
                <return>
                    the value returned by {@link RealVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="1000">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                </params>
            </method>
            <javadoc line="1004">
                Visits (and possibly change) some entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link RealVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="1021">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <class name="Entry" line="1025">
                <javadoc line="1025">
                    An entry in the vector.                    
                </javadoc>
                <declaration name="index" type="int" line="1027"/>
                <javadoc line="1027">
                    Index of this entry.                    
                </javadoc>
                <javadoc line="1030">
                    Simple constructor.                    
                </javadoc>
                <method name="Entry" type="constructor" line="1031"/>
                <javadoc line="1035">
                    Get the value of the entry.                    
                    <return>
                        the value of the entry.                        
                    </return>
                </javadoc>
                <method name="getValue" type="double" line="1040"/>
                <javadoc line="1044">
                    Set the value of the entry.                    
                    <param>
                        value New value for the entry.                        
                    </param>
                </javadoc>
                <method name="setValue" type="void" line="1049">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="1053">
                    Get the index of the entry.                    
                    <return>
                        the index of the entry.                        
                    </return>
                </javadoc>
                <method name="getIndex" type="int" line="1058"/>
                <javadoc line="1062">
                    Set the index of the entry.                    
                    <param>
                        index New index for the entry.                        
                    </param>
                </javadoc>
                <method name="setIndex" type="void" line="1067">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
            </class>
            <javadoc line="1072">
                &lt;p&gt;
                  Test for the equality of two real vectors. If all coordinates of two real
                  vectors are exactly the same, and none are {@code NaN}, the two real
                  vectors are considered to be equal. {@code NaN} coordinates are
                  considered to affect globally the vector and be equals to each other -
                  i.e, if either (or all) coordinates of the real vector are equal to{@code NaN}, the real vector is equal to a vector with all {@code NaN}coordinates.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method &lt;em&gt;must&lt;/em&gt; be overriden by concrete subclasses of{@link RealVector} (the current implementation throws an exception).
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality.                    
                </param>
                <return>
                    {@code true} if two vector objects are equal, {@code false} if{@code other} is null, not an instance of {@code RealVector}, or
                      not equal to this {@code RealVector} instance.                    
                </return>
                <throws>
                    MathUnsupportedOperationException if this method is not
                      overridden.                    
                </throws>
            </javadoc>
            <method name="equals" type="boolean" line="1096">
                <params>
                    <param name="other" type="Object"/>
                </params>
            </method>
            <javadoc line="1100">
                {@inheritDoc}. This method &lt;em&gt;must&lt;/em&gt; be overriden by concrete
                  subclasses of {@link RealVector} (current implementation throws an
                  exception).                
                <throws>
                    MathUnsupportedOperationException if this method is not
                      overridden.                    
                </throws>
            </javadoc>
            <method name="hashCode" type="int" line="1109"/>
            <class name="SparseEntryIterator" line="1113">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="Entry"/>
                    </type_params>
                </implements>
                <javadoc line="1113">
                    This class should rarely be used, but is here to provide
                      a default implementation of sparseIterator(), which is implemented
                      by walking over the entries, skipping those that are zero.
                      Concrete subclasses which are SparseVector implementations should
                      make their own sparse iterator, rather than using this one.
                      This implementation might be useful for ArrayRealVector, when expensive
                      operations which preserve the default value are to be done on the entries,
                      and the fraction of non-default values is small (i.e. someone took a
                      SparseVector, and passed it into the copy-constructor of ArrayRealVector)                    
                </javadoc>
                <declaration name="dim" type="int" line="1128"/>
                <javadoc line="1128">
                    Dimension of the vector.                    
                </javadoc>
                <declaration name="current" type="Entry" line="1130"/>
                <javadoc line="1130">
                    Last entry returned by {@link #next()}.                    
                </javadoc>
                <declaration name="next" type="Entry" line="1132"/>
                <javadoc line="1132">
                    Next entry for {@link #next()} to return.                    
                </javadoc>
                <javadoc line="1135">
                    Simple constructor.                    
                </javadoc>
                <method name="SparseEntryIterator" type="constructor" line="1136">
                    <scope line="1140"/>
                </method>
                <javadoc line="1145">
                    Advance an entry up to the next nonzero one.                    
                    <param>
                        e entry to advance.                        
                    </param>
                </javadoc>
                <method name="advance" type="void" line="1150">
                    <params>
                        <param name="e" type="Entry"/>
                    </params>
                    <scope line="1151"/>
                    <scope line="1154"/>
                    <scope line="1157"/>
                </method>
                <javadoc line="1162">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hasNext" type="boolean" line="1163"/>
                <javadoc line="1167">
                    {@inheritDoc}                    
                </javadoc>
                <method name="next" type="Entry" line="1168">
                    <declaration name="index" type="int" line="1169"/>
                    <scope line="1170"/>
                </method>
                <javadoc line="1178">
                    {@inheritDoc}                    
                    <throws>
                        MathUnsupportedOperationException in all circumstances.                        
                    </throws>
                </javadoc>
                <method name="remove" type="void" line="1183"/>
            </class>
            <javadoc line="1188">
                Returns an unmodifiable view of the specified vector.
                  The returned vector has read-only access. An attempt to modify it will
                  result in a {@link MathUnsupportedOperationException}. However, the
                  returned vector is &lt;em&gt;not&lt;/em&gt; immutable, since any modification of{@code v} will also change the returned view.
                  For example, in the following piece of code
                  &lt;pre&gt;
                  RealVector v = new ArrayRealVector(2);
                  RealVector w = RealVector.unmodifiableRealVector(v);
                  v.setEntry(0, 1.2);
                  v.setEntry(1, -3.4);
                  &lt;/pre&gt;
                  the changes will be seen in the {@code w} view of {@code v}.                
                <param>
                    v Vector for which an unmodifiable view is to be returned.                    
                </param>
                <return>
                    an unmodifiable view of {@code v}.                    
                </return>
            </javadoc>
            <method name="unmodifiableRealVector" type="RealVector" line="1206">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <comment line="1208">
                    This anonymous class is an implementation of {@link RealVector}
                     with read-only access.
                     It wraps any {@link RealVector}, and exposes all methods which
                     do not modify it. Invoking methods which should normally result
                     in the modification of the calling {@link RealVector} results in
                     a {@link MathUnsupportedOperationException}. It should be noted
                     that {@link UnmodifiableVector} is &lt;em&gt;not&lt;em&gt; immutable.                    
                </comment>
                <anonymous_class line="1216">
                    <javadoc line="1217">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="mapToSelf" type="RealVector" line="1224">
                        <params>
                            <param name="function" type="UnivariateFunction"/>
                        </params>
                    </method>
                    <javadoc line="1228">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="map" type="RealVector" line="1230">
                        <params>
                            <param name="function" type="UnivariateFunction"/>
                        </params>
                    </method>
                    <javadoc line="1234">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="iterator" type="Iterator&lt;Entry&gt;" line="1236">
                        <declaration name="i" type="Iterator&amp;lt;Entry&amp;gt;" line="1237"/>
                        <anonymous_class line="1238">
                            <declaration name="e" type="UnmodifiableEntry" line="1239"/>
                            <javadoc line="1239">
                                The current entry.                                
                            </javadoc>
                            <javadoc line="1242">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="hasNext" type="boolean" line="1243"/>
                            <javadoc line="1247">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="next" type="Entry" line="1248"/>
                            <javadoc line="1253">
                                {@inheritDoc}                                
                                <throws>
                                    MathUnsupportedOperationException in all
                                      circumstances.                                    
                                </throws>
                            </javadoc>
                            <method name="remove" type="void" line="1259"/>
                        </anonymous_class>
                    </method>
                    <javadoc line="1265">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="sparseIterator" type="Iterator&lt;Entry&gt;" line="1267">
                        <declaration name="i" type="Iterator&amp;lt;Entry&amp;gt;" line="1268"/>
                        <anonymous_class line="1270">
                            <declaration name="e" type="UnmodifiableEntry" line="1271"/>
                            <javadoc line="1271">
                                The current entry.                                
                            </javadoc>
                            <javadoc line="1274">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="hasNext" type="boolean" line="1275"/>
                            <javadoc line="1279">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="next" type="Entry" line="1280"/>
                            <javadoc line="1285">
                                {@inheritDoc}                                
                                <throws>
                                    MathUnsupportedOperationException in all
                                      circumstances.                                    
                                </throws>
                            </javadoc>
                            <method name="remove" type="void" line="1292"/>
                        </anonymous_class>
                    </method>
                    <javadoc line="1298">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="copy" type="RealVector" line="1300"/>
                    <javadoc line="1304">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="add" type="RealVector" line="1307">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1311">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="subtract" type="RealVector" line="1314">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1318">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="mapAdd" type="RealVector" line="1320">
                        <params>
                            <param name="d" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1324">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all
                              circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="mapAddToSelf" type="RealVector" line="1332">
                        <params>
                            <param name="d" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1336">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="mapSubtract" type="RealVector" line="1338">
                        <params>
                            <param name="d" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1342">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all
                              circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="mapSubtractToSelf" type="RealVector" line="1350">
                        <params>
                            <param name="d" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1354">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="mapMultiply" type="RealVector" line="1356">
                        <params>
                            <param name="d" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1360">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all
                              circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="mapMultiplyToSelf" type="RealVector" line="1368">
                        <params>
                            <param name="d" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1372">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="mapDivide" type="RealVector" line="1374">
                        <params>
                            <param name="d" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1378">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all
                              circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="mapDivideToSelf" type="RealVector" line="1386">
                        <params>
                            <param name="d" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1390">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="ebeMultiply" type="RealVector" line="1393">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1397">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="ebeDivide" type="RealVector" line="1400">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1404">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="dotProduct" type="double" line="1407">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1411">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="cosine" type="double" line="1414">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1418">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getNorm" type="double" line="1420"/>
                    <javadoc line="1424">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getL1Norm" type="double" line="1426"/>
                    <javadoc line="1430">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getLInfNorm" type="double" line="1432"/>
                    <javadoc line="1436">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getDistance" type="double" line="1439">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1443">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getL1Distance" type="double" line="1446">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1450">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getLInfDistance" type="double" line="1453">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1457">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="unitVector" type="RealVector" line="1459"/>
                    <javadoc line="1463">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all
                              circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="unitize" type="void" line="1470"/>
                    <javadoc line="1474">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="outerProduct" type="RealMatrix" line="1476">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1480">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getEntry" type="double" line="1482">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                    </method>
                    <javadoc line="1486">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all
                              circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="setEntry" type="void" line="1494">
                        <params>
                            <param name="index" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1498">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all
                              circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="addToEntry" type="void" line="1506">
                        <params>
                            <param name="index" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1510">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getDimension" type="int" line="1512"/>
                    <javadoc line="1516">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="append" type="RealVector" line="1518">
                        <params>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1522">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="append" type="RealVector" line="1524">
                        <params>
                            <param name="d" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1528">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getSubVector" type="RealVector" line="1531">
                        <params>
                            <param name="index" type="int"/>
                            <param name="n" type="int"/>
                        </params>
                    </method>
                    <javadoc line="1535">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all
                              circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="setSubVector" type="void" line="1543">
                        <params>
                            <param name="index" type="int"/>
                            <param name="w" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1547">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all
                              circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="set" type="void" line="1555">
                        <params>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                    <javadoc line="1559">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="toArray" type="double[]" line="1561"/>
                    <javadoc line="1565">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="isNaN" type="boolean" line="1567"/>
                    <javadoc line="1571">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="isInfinite" type="boolean" line="1573"/>
                    <javadoc line="1577">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="combine" type="RealVector" line="1580">
                        <params>
                            <param name="a" type="double"/>
                            <param name="b" type="double"/>
                            <param name="y" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="1584">
                        {@inheritDoc}                        
                        <throws>
                            MathUnsupportedOperationException in all
                              circumstances.                            
                        </throws>
                    </javadoc>
                    <method name="combineToSelf" type="RealVector" line="1592">
                        <params>
                            <param name="a" type="double"/>
                            <param name="b" type="double"/>
                            <param name="y" type="RealVector"/>
                        </params>
                    </method>
                    <class name="UnmodifiableEntry" line="1596">
                        <extends class="Entry"/>
                        <javadoc line="1596">
                            An entry in the vector.                            
                        </javadoc>
                        <javadoc line="1598">
                            {@inheritDoc}                            
                        </javadoc>
                        <method name="getValue" type="double" line="1600"/>
                        <javadoc line="1604">
                            {@inheritDoc}                            
                            <throws>
                                MathUnsupportedOperationException in all
                                  circumstances.                                
                            </throws>
                        </javadoc>
                        <method name="setValue" type="void" line="1612">
                            <params>
                                <param name="value" type="double"/>
                            </params>
                        </method>
                    </class>
                </anonymous_class>
            </method>
        </class>
    </source>