<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.OpenIntToDoubleHashMap"/>
        <import package="org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator"/>
        <class name="OpenMapRealVector" line="30">
            <extends class="SparseRealVector"/>
            <implements interface="Serializable"/>
            <javadoc line="30">
                This class implements the {@link RealVector} interface with a{@link OpenIntToDoubleHashMap} backing store.                
                <version>
                    $Id: OpenMapRealVector.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
                <deprecated>
                    As of version 3.1, this class is deprecated, for reasons exposed
                      in this JIRA
                      <a href="https://issues.apache.org/jira/browse/MATH-870">ticket</a>. This
                      class will be removed in version 4.0.                    
                </deprecated>
            </javadoc>
            <declaration name="DEFAULT_ZERO_TOLERANCE" type="double" line="43"/>
            <javadoc line="43">
                Default Tolerance for having a value considered zero.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <javadoc line="45">
                Serializable version identifier.                
            </javadoc>
            <declaration name="entries" type="OpenIntToDoubleHashMap" line="47"/>
            <javadoc line="47">
                Entries of the vector.                
            </javadoc>
            <declaration name="virtualSize" type="int" line="49"/>
            <javadoc line="49">
                Dimension of the vector.                
            </javadoc>
            <declaration name="epsilon" type="double" line="51"/>
            <javadoc line="51">
                Tolerance for having a value considered zero.                
            </javadoc>
            <javadoc line="54">
                Build a 0-length vector.
                  Zero-length vectors may be used to initialized construction of vectors
                  by data gathering. We start with zero-length and use either the {@link #OpenMapRealVector(OpenMapRealVector,int)} constructor
                  or one of the {@code append} method ({@link #append(double)},{@link #append(RealVector)}) to gather data into this vector.                
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="62"/>
            <javadoc line="66">
                Construct a vector of zeroes.                
                <param>
                    dimension Size of the vector.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="71">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="75">
                Construct a vector of zeroes, specifying zero tolerance.                
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    epsilon Tolerance below which a value considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="81">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="87">
                Build a resized vector, for use with append.                
                <param>
                    v Original vector.                    
                </param>
                <param>
                    resize Amount to add.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="93">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                    <param name="resize" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Build a vector with known the sparseness (for advanced use only).                
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    expectedSize The expected number of non-zero entries.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="105">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="expectedSize" type="int"/>
                </params>
            </method>
            <javadoc line="109">
                Build a vector with known the sparseness and zero tolerance
                  setting (for advanced use only).                
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    expectedSize Expected number of non-zero entries.                    
                </param>
                <param>
                    epsilon Tolerance below which a value is considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="117">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="expectedSize" type="int"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="123">
                Create from an array.
                  Only non-zero entries will be stored.                
                <param>
                    values Set of values to create from.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="129">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="133">
                Create from an array, specifying zero tolerance.
                  Only non-zero entries will be stored.                
                <param>
                    values Set of values to create from.                    
                </param>
                <param>
                    epsilon Tolerance below which a value is considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="140">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="epsilon" type="double"/>
                </params>
                <scope line="144">
                    <declaration name="value" type="double" line="145"/>
                    <scope line="146"/>
                </scope>
            </method>
            <javadoc line="152">
                Create from an array.
                  Only non-zero entries will be stored.                
                <param>
                    values The set of values to create from                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="158">
                <params>
                    <param name="values" type="Double[]"/>
                </params>
            </method>
            <javadoc line="162">
                Create from an array.
                  Only non-zero entries will be stored.                
                <param>
                    values Set of values to create from.                    
                </param>
                <param>
                    epsilon Tolerance below which a value is considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="169">
                <params>
                    <param name="values" type="Double[]"/>
                    <param name="epsilon" type="double"/>
                </params>
                <scope line="173">
                    <declaration name="value" type="double" line="174"/>
                    <scope line="175"/>
                </scope>
            </method>
            <javadoc line="181">
                Copy constructor.                
                <param>
                    v Instance to copy from.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="186">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
            </method>
            <javadoc line="192">
                Generic copy constructor.                
                <param>
                    v Instance to copy from.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="197">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="201">
                    <declaration name="value" type="double" line="202"/>
                    <scope line="203"/>
                </scope>
            </method>
            <javadoc line="209">
                Get the entries of this instance.                
                <return>
                    the entries of this instance.                    
                </return>
            </javadoc>
            <method name="getEntries" type="OpenIntToDoubleHashMap" line="214"/>
            <javadoc line="218">
                Determine if this value is within epsilon of zero.                
                <param>
                    value Value to test                    
                </param>
                <return>
                    {@code true} if this value is within epsilon to zero,{@code false} otherwise.                    
                </return>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="isDefaultValue" type="boolean" line="226">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="230">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="RealVector" line="233">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="235"/>
                <scope line="237"/>
            </method>
            <javadoc line="242">
                Optimized method to add two OpenMapRealVectors.
                  It copies the larger vector, then iterates over the smaller.                
                <param>
                    v Vector to add.                    
                </param>
                <return>
                    the sum of {@code this} and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="add" type="OpenMapRealVector" line="251">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="copyThis" type="boolean" line="253"/>
                <declaration name="res" type="OpenMapRealVector" line="254"/>
                <declaration name="iter" type="Iterator" line="255"/>
                <declaration name="randomAccess" type="OpenIntToDoubleHashMap" line="256"/>
                <scope line="257">
                    <declaration name="key" type="int" line="259"/>
                    <scope line="260"/>
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="269">
                Optimized method to append a OpenMapRealVector.                
                <param>
                    v vector to append                    
                </param>
                <return>
                    The result of appending {@code v} to self                    
                </return>
            </javadoc>
            <method name="append" type="OpenMapRealVector" line="274">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="275"/>
                <declaration name="iter" type="Iterator" line="276"/>
                <scope line="277"/>
            </method>
            <javadoc line="284">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="OpenMapRealVector" line="286">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="287"/>
                <scope line="289">
                    <declaration name="res" type="OpenMapRealVector" line="290"/>
                    <scope line="291"/>
                </scope>
            </method>
            <javadoc line="298">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="OpenMapRealVector" line="300">
                <params>
                    <param name="d" type="double"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="301"/>
            </method>
            <javadoc line="306">
                {@inheritDoc}                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="copy" type="OpenMapRealVector" line="311"/>
            <javadoc line="315">
                Computes the dot product.
                  Note that the computation is now performed in the parent class: no
                  performance improvement is to be expected from this overloaded
                  method.
                  The previous implementation was buggy and cannot be easily fixed
                  (see MATH-795).                
                <param>
                    v Vector.                    
                </param>
                <return>
                    the dot product of this vector with {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
                <deprecated>
                    as of 3.1 (to be removed in 4.0). The computation is
                      performed by the parent class. The method must be kept to maintain
                      backwards compatibility.                    
                </deprecated>
            </javadoc>
            <method name="dotProduct" type="double" line="334">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
            </method>
            <javadoc line="338">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="OpenMapRealVector" line="341">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <comment line="345">
                    MATH-803: it is not sufficient to loop through non zero entries of
                     this only. Indeed, if this[i] = 0d and v[i] = 0d, then
                     this[i]  v[i] = NaN, and not 0d.                    
                </comment>
                <declaration name="res" type="OpenMapRealVector" line="343"/>
                <declaration name="n" type="int" line="349"/>
                <scope line="350"/>
            </method>
            <javadoc line="356">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="OpenMapRealVector" line="359">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <comment line="368">
                    MATH-803: the above loop assumes that 0d  x  = 0d for any double x,
                     which allows to consider only the non-zero entries of this. However,
                     this fails if this[i] == 0d and (v[i] = NaN or v[i] = Infinity).
                    
                     These special cases are handled below.                    
                </comment>
                <declaration name="res" type="OpenMapRealVector" line="361"/>
                <declaration name="iter" type="Iterator" line="362"/>
                <scope line="363"/>
                <scope line="374">
                    <declaration name="n" type="int" line="375"/>
                    <scope line="376">
                        <declaration name="y" type="double" line="377"/>
                        <scope line="378"/>
                        <scope line="380">
                            <declaration name="x" type="double" line="381"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="389">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="OpenMapRealVector" line="392">
                <params>
                    <param name="index" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="394"/>
                <declaration name="res" type="OpenMapRealVector" line="398"/>
                <declaration name="end" type="int" line="399"/>
                <declaration name="iter" type="Iterator" line="400"/>
                <scope line="401">
                    <declaration name="key" type="int" line="403"/>
                    <scope line="404"/>
                </scope>
            </method>
            <javadoc line="411">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="413"/>
            <javadoc line="417">
                Optimized method to compute distance.                
                <param>
                    v Vector to compute distance to.                    
                </param>
                <return>
                    the distance from {@code this} and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="getDistance" type="double" line="425">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="iter" type="Iterator" line="427"/>
                <declaration name="res" type="double" line="428"/>
                <scope line="429">
                    <declaration name="key" type="int" line="431"/>
                    <declaration name="delta" type="double" line="432"/>
                </scope>
                <scope line="437">
                    <declaration name="key" type="int" line="439"/>
                    <scope line="440">
                        <declaration name="value" type="double" line="441"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="448">
                {@inheritDoc}                
            </javadoc>
            <method name="getDistance" type="double" line="450">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="452"/>
                <scope line="454"/>
            </method>
            <javadoc line="459">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="double" line="461">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="466">
                Distance between two vectors.
                  This method computes the distance consistent with
                  L&lt;sub&gt;1&lt;/sub&gt; norm, i.e. the sum of the absolute values of
                  elements differences.                
                <param>
                    v Vector to which distance is requested.                    
                </param>
                <return>
                    distance between this vector and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="getL1Distance" type="double" line="477">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="max" type="double" line="479"/>
                <declaration name="iter" type="Iterator" line="480"/>
                <scope line="481">
                    <declaration name="delta" type="double" line="483"/>
                </scope>
                <scope line="487">
                    <declaration name="key" type="int" line="489"/>
                    <scope line="490">
                        <declaration name="delta" type="double" line="491"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="498">
                {@inheritDoc}                
            </javadoc>
            <method name="getL1Distance" type="double" line="501">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="503"/>
                <scope line="505"/>
            </method>
            <javadoc line="510">
                Optimized method to compute LInfDistance.                
                <param>
                    v Vector to compute distance from.                    
                </param>
                <return>
                    the LInfDistance.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="getLInfDistance" type="double" line="518">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="max" type="double" line="520"/>
                <declaration name="iter" type="Iterator" line="521"/>
                <scope line="522">
                    <declaration name="delta" type="double" line="524"/>
                    <scope line="525"/>
                </scope>
                <scope line="530">
                    <declaration name="key" type="int" line="532"/>
                    <scope line="533"/>
                </scope>
            </method>
            <javadoc line="540">
                {@inheritDoc}                
            </javadoc>
            <method name="getLInfDistance" type="double" line="543">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="545"/>
                <scope line="547"/>
            </method>
            <javadoc line="552">
                {@inheritDoc}                
            </javadoc>
            <method name="isInfinite" type="boolean" line="554">
                <declaration name="infiniteFound" type="boolean" line="555"/>
                <declaration name="iter" type="Iterator" line="556"/>
                <scope line="557">
                    <declaration name="value" type="double" line="559"/>
                    <scope line="560"/>
                    <scope line="563"/>
                </scope>
            </method>
            <javadoc line="570">
                {@inheritDoc}                
            </javadoc>
            <method name="isNaN" type="boolean" line="572">
                <declaration name="iter" type="Iterator" line="573"/>
                <scope line="574">
                    <scope line="576"/>
                </scope>
            </method>
            <javadoc line="583">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAdd" type="OpenMapRealVector" line="585">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="589">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="OpenMapRealVector" line="591">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="592"/>
            </method>
            <javadoc line="598">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="601">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="603"/>
                <scope line="605"/>
            </method>
            <javadoc line="610">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="613">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="616"/>
            </method>
            <javadoc line="621">
                {@inheritDoc}                
            </javadoc>
            <method name="set" type="void" line="623">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="624"/>
            </method>
            <javadoc line="629">
                Optimized method to subtract OpenMapRealVectors.                
                <param>
                    v Vector to subtract from {@code this}.                    
                </param>
                <return>
                    the difference of {@code this} and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="subtract" type="OpenMapRealVector" line="637">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="639"/>
                <declaration name="iter" type="Iterator" line="640"/>
                <scope line="641">
                    <declaration name="key" type="int" line="643"/>
                    <scope line="644"/>
                    <scope line="646"/>
                </scope>
            </method>
            <javadoc line="653">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="RealVector" line="656">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="658"/>
                <scope line="660"/>
            </method>
            <javadoc line="665">
                {@inheritDoc}                
            </javadoc>
            <method name="unitVector" type="OpenMapRealVector" line="667">
                <declaration name="res" type="OpenMapRealVector" line="668"/>
            </method>
            <javadoc line="673">
                {@inheritDoc}                
            </javadoc>
            <method name="unitize" type="void" line="675">
                <declaration name="norm" type="double" line="676"/>
                <scope line="677"/>
                <declaration name="iter" type="Iterator" line="680"/>
                <scope line="681"/>
            </method>
            <javadoc line="687">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="double[]" line="689">
                <declaration name="res" type="double[]" line="690"/>
                <declaration name="iter" type="Iterator" line="691"/>
                <scope line="692"/>
            </method>
            <javadoc line="699">
                {@inheritDoc}Implementation Note: This works on exact values, and as a result
                  it is possible for {@code a.subtract(b)} to be the zero vector, while{@code a.hashCode() != b.hashCode()}.                
            </javadoc>
            <method name="hashCode" type="int" line="706">
                <declaration name="prime" type="int" line="707"/>
                <declaration name="result" type="int" line="708"/>
                <declaration name="temp" type="long" line="709"/>
                <declaration name="iter" type="Iterator" line="713"/>
                <scope line="714"/>
            </method>
            <javadoc line="722">
                {@inheritDoc}Implementation Note: This performs an exact comparison, and as a result
                  it is possible for {@code a.subtract(b}} to be the zero vector, while{@code  a.equals(b) == false}.                
            </javadoc>
            <method name="equals" type="boolean" line="729">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="730"/>
                <scope line="733"/>
                <declaration name="other" type="OpenMapRealVector" line="736"/>
                <scope line="737"/>
                <scope line="741"/>
                <declaration name="iter" type="Iterator" line="744"/>
                <scope line="745">
                    <declaration name="test" type="double" line="747"/>
                    <scope line="748"/>
                </scope>
                <scope line="753">
                    <declaration name="test" type="double" line="755"/>
                    <scope line="756"/>
                </scope>
            </method>
            <javadoc line="763">
                @return the percentage of none zero elements as a decimal percent.                
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="getSparsity" type="double" line="768"/>
            <javadoc line="772">
                {@inheritDoc}                
            </javadoc>
            <method name="sparseIterator" type="java.util.Iterator<Entry>" line="774"/>
            <class name="OpenMapEntry" line="778">
                <extends class="Entry"/>
                <javadoc line="778">
                    Implementation of {@code Entry} optimized for OpenMap.
                      This implementation does not allow arbitrary calls to {@code setIndex}since the order in which entries are returned is undefined.                    
                </javadoc>
                <declaration name="iter" type="Iterator" line="784"/>
                <javadoc line="784">
                    Iterator pointing to the entry.                    
                </javadoc>
                <javadoc line="787">
                    Build an entry from an iterator point to an element.                    
                    <param>
                        iter Iterator pointing to the entry.                        
                    </param>
                </javadoc>
                <method name="OpenMapEntry" type="constructor" line="792">
                    <params>
                        <param name="iter" type="Iterator"/>
                    </params>
                </method>
                <javadoc line="796">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getValue" type="double" line="798"/>
                <javadoc line="802">
                    {@inheritDoc}                    
                </javadoc>
                <method name="setValue" type="void" line="804">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="808">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getIndex" type="int" line="810"/>
            </class>
            <class name="OpenMapSparseIterator" line="816">
                <implements interface="java.util.Iterator">
                    <type_params>
                        <type_param name="Entry"/>
                    </type_params>
                </implements>
                <javadoc line="816">
                    Iterator class to do iteration over just the non-zero elements.
                      This implementation is fail-fast, so cannot be used to modify
                      any zero element.                    
                </javadoc>
                <declaration name="iter" type="Iterator" line="822"/>
                <javadoc line="822">
                    Underlying iterator.                    
                </javadoc>
                <declaration name="current" type="Entry" line="824"/>
                <javadoc line="824">
                    Current entry.                    
                </javadoc>
                <javadoc line="827">
                    Simple constructor.                    
                </javadoc>
                <method name="OpenMapSparseIterator" type="constructor" line="828"/>
                <javadoc line="833">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hasNext" type="boolean" line="834"/>
                <javadoc line="838">
                    {@inheritDoc}                    
                </javadoc>
                <method name="next" type="Entry" line="839"/>
                <javadoc line="844">
                    {@inheritDoc}                    
                </javadoc>
                <method name="remove" type="void" line="845"/>
            </class>
        </class>
    </source>