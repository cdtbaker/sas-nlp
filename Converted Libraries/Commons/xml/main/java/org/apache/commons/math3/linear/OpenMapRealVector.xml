<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.OpenIntToDoubleHashMap"/>
        <import package="org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator"/>
        <class name="OpenMapRealVector" line="30">
            <extends class="SparseRealVector"/>
            <implements interface="Serializable"/>
            <javadoc line="30">
                This class implements the {@link RealVector} interface with a{@link OpenIntToDoubleHashMap} backing store.
                  &lt;p&gt;
                  Caveat: This implementation assumes that, for any {@code x},
                  the equality {@code x  0d == 0d} holds. But it is is not true for{@code NaN}. Moreover, zero entries will lose their sign.
                  Some operations (that involve {@code NaN} and/or infinities) may
                  thus give incorrect results, like multiplications, divisions or
                  functions mapping.
                  &lt;/p&gt;                
                <version>
                    $Id: OpenMapRealVector.java 1570254 2014-02-20 16:16:19Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_ZERO_TOLERANCE" type="double" line="46"/>
            <javadoc line="46">
                Default Tolerance for having a value considered zero.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="48"/>
            <javadoc line="48">
                Serializable version identifier.                
            </javadoc>
            <declaration name="entries" type="OpenIntToDoubleHashMap" line="50"/>
            <javadoc line="50">
                Entries of the vector.                
            </javadoc>
            <declaration name="virtualSize" type="int" line="52"/>
            <javadoc line="52">
                Dimension of the vector.                
            </javadoc>
            <declaration name="epsilon" type="double" line="54"/>
            <javadoc line="54">
                Tolerance for having a value considered zero.                
            </javadoc>
            <javadoc line="57">
                Build a 0-length vector.
                  Zero-length vectors may be used to initialized construction of vectors
                  by data gathering. We start with zero-length and use either the {@link #OpenMapRealVector(OpenMapRealVector,int)} constructor
                  or one of the {@code append} method ({@link #append(double)},{@link #append(RealVector)}) to gather data into this vector.                
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="65"/>
            <javadoc line="69">
                Construct a vector of zeroes.                
                <param>
                    dimension Size of the vector.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="74">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="78">
                Construct a vector of zeroes, specifying zero tolerance.                
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    epsilon Tolerance below which a value considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="84">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="90">
                Build a resized vector, for use with append.                
                <param>
                    v Original vector.                    
                </param>
                <param>
                    resize Amount to add.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="96">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                    <param name="resize" type="int"/>
                </params>
            </method>
            <javadoc line="102">
                Build a vector with known the sparseness (for advanced use only).                
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    expectedSize The expected number of non-zero entries.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="108">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="expectedSize" type="int"/>
                </params>
            </method>
            <javadoc line="112">
                Build a vector with known the sparseness and zero tolerance
                  setting (for advanced use only).                
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    expectedSize Expected number of non-zero entries.                    
                </param>
                <param>
                    epsilon Tolerance below which a value is considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="120">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="expectedSize" type="int"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="126">
                Create from an array.
                  Only non-zero entries will be stored.                
                <param>
                    values Set of values to create from.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="132">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="136">
                Create from an array, specifying zero tolerance.
                  Only non-zero entries will be stored.                
                <param>
                    values Set of values to create from.                    
                </param>
                <param>
                    epsilon Tolerance below which a value is considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="143">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="epsilon" type="double"/>
                </params>
                <scope line="147">
                    <declaration name="value" type="double" line="148"/>
                    <scope line="149"/>
                </scope>
            </method>
            <javadoc line="155">
                Create from an array.
                  Only non-zero entries will be stored.                
                <param>
                    values The set of values to create from                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="161">
                <params>
                    <param name="values" type="Double[]"/>
                </params>
            </method>
            <javadoc line="165">
                Create from an array.
                  Only non-zero entries will be stored.                
                <param>
                    values Set of values to create from.                    
                </param>
                <param>
                    epsilon Tolerance below which a value is considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="172">
                <params>
                    <param name="values" type="Double[]"/>
                    <param name="epsilon" type="double"/>
                </params>
                <scope line="176">
                    <declaration name="value" type="double" line="177"/>
                    <scope line="178"/>
                </scope>
            </method>
            <javadoc line="184">
                Copy constructor.                
                <param>
                    v Instance to copy from.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="189">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
            </method>
            <javadoc line="195">
                Generic copy constructor.                
                <param>
                    v Instance to copy from.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="200">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="204">
                    <declaration name="value" type="double" line="205"/>
                    <scope line="206"/>
                </scope>
            </method>
            <javadoc line="212">
                Get the entries of this instance.                
                <return>
                    the entries of this instance.                    
                </return>
            </javadoc>
            <method name="getEntries" type="OpenIntToDoubleHashMap" line="217"/>
            <javadoc line="221">
                Determine if this value is within epsilon of zero.                
                <param>
                    value Value to test                    
                </param>
                <return>
                    {@code true} if this value is within epsilon to zero,{@code false} otherwise.                    
                </return>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="isDefaultValue" type="boolean" line="229">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="233">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="RealVector" line="236">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="238"/>
                <scope line="240"/>
            </method>
            <javadoc line="245">
                Optimized method to add two OpenMapRealVectors.
                  It copies the larger vector, then iterates over the smaller.                
                <param>
                    v Vector to add.                    
                </param>
                <return>
                    the sum of {@code this} and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="add" type="OpenMapRealVector" line="254">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="copyThis" type="boolean" line="256"/>
                <declaration name="res" type="OpenMapRealVector" line="257"/>
                <declaration name="iter" type="Iterator" line="258"/>
                <declaration name="randomAccess" type="OpenIntToDoubleHashMap" line="259"/>
                <scope line="260">
                    <declaration name="key" type="int" line="262"/>
                    <scope line="263"/>
                    <scope line="265"/>
                </scope>
            </method>
            <javadoc line="272">
                Optimized method to append a OpenMapRealVector.                
                <param>
                    v vector to append                    
                </param>
                <return>
                    The result of appending {@code v} to self                    
                </return>
            </javadoc>
            <method name="append" type="OpenMapRealVector" line="277">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="278"/>
                <declaration name="iter" type="Iterator" line="279"/>
                <scope line="280"/>
            </method>
            <javadoc line="287">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="OpenMapRealVector" line="289">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="290"/>
                <scope line="292">
                    <declaration name="res" type="OpenMapRealVector" line="293"/>
                    <scope line="294"/>
                </scope>
            </method>
            <javadoc line="301">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="OpenMapRealVector" line="303">
                <params>
                    <param name="d" type="double"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="304"/>
            </method>
            <javadoc line="309">
                {@inheritDoc}                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="copy" type="OpenMapRealVector" line="314"/>
            <javadoc line="318">
                Computes the dot product.
                  Note that the computation is now performed in the parent class: no
                  performance improvement is to be expected from this overloaded
                  method.
                  The previous implementation was buggy and cannot be easily fixed
                  (see MATH-795).                
                <param>
                    v Vector.                    
                </param>
                <return>
                    the dot product of this vector with {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
                <deprecated>
                    as of 3.1 (to be removed in 4.0). The computation is
                      performed by the parent class. The method must be kept to maintain
                      backwards compatibility.                    
                </deprecated>
            </javadoc>
            <method name="dotProduct" type="double" line="337">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
            </method>
            <javadoc line="341">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="OpenMapRealVector" line="344">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <comment line="348">
                    MATH-803: it is not sufficient to loop through non zero entries of
                     this only. Indeed, if this[i] = 0d and v[i] = 0d, then
                     this[i]  v[i] = NaN, and not 0d.                    
                </comment>
                <declaration name="res" type="OpenMapRealVector" line="346"/>
                <declaration name="n" type="int" line="352"/>
                <scope line="353"/>
            </method>
            <javadoc line="359">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="OpenMapRealVector" line="362">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="364"/>
                <declaration name="iter" type="Iterator" line="365"/>
                <scope line="366"/>
            </method>
            <javadoc line="373">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="OpenMapRealVector" line="376">
                <params>
                    <param name="index" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="378"/>
                <declaration name="res" type="OpenMapRealVector" line="382"/>
                <declaration name="end" type="int" line="383"/>
                <declaration name="iter" type="Iterator" line="384"/>
                <scope line="385">
                    <declaration name="key" type="int" line="387"/>
                    <scope line="388"/>
                </scope>
            </method>
            <javadoc line="395">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="397"/>
            <javadoc line="401">
                Optimized method to compute distance.                
                <param>
                    v Vector to compute distance to.                    
                </param>
                <return>
                    the distance from {@code this} and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="getDistance" type="double" line="409">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="iter" type="Iterator" line="411"/>
                <declaration name="res" type="double" line="412"/>
                <scope line="413">
                    <declaration name="key" type="int" line="415"/>
                    <declaration name="delta" type="double" line="416"/>
                </scope>
                <scope line="421">
                    <declaration name="key" type="int" line="423"/>
                    <scope line="424">
                        <declaration name="value" type="double" line="425"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="432">
                {@inheritDoc}                
            </javadoc>
            <method name="getDistance" type="double" line="434">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="436"/>
                <scope line="438"/>
            </method>
            <javadoc line="443">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="double" line="445">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="450">
                Distance between two vectors.
                  This method computes the distance consistent with
                  L&lt;sub&gt;1&lt;/sub&gt; norm, i.e. the sum of the absolute values of
                  elements differences.                
                <param>
                    v Vector to which distance is requested.                    
                </param>
                <return>
                    distance between this vector and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="getL1Distance" type="double" line="461">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="max" type="double" line="463"/>
                <declaration name="iter" type="Iterator" line="464"/>
                <scope line="465">
                    <declaration name="delta" type="double" line="467"/>
                </scope>
                <scope line="471">
                    <declaration name="key" type="int" line="473"/>
                    <scope line="474">
                        <declaration name="delta" type="double" line="475"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="482">
                {@inheritDoc}                
            </javadoc>
            <method name="getL1Distance" type="double" line="485">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="487"/>
                <scope line="489"/>
            </method>
            <javadoc line="494">
                Optimized method to compute LInfDistance.                
                <param>
                    v Vector to compute distance from.                    
                </param>
                <return>
                    the LInfDistance.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="getLInfDistance" type="double" line="502">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="max" type="double" line="504"/>
                <declaration name="iter" type="Iterator" line="505"/>
                <scope line="506">
                    <declaration name="delta" type="double" line="508"/>
                    <scope line="509"/>
                </scope>
                <scope line="514">
                    <declaration name="key" type="int" line="516"/>
                    <scope line="517"/>
                </scope>
            </method>
            <javadoc line="524">
                {@inheritDoc}                
            </javadoc>
            <method name="getLInfDistance" type="double" line="527">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="529"/>
                <scope line="531"/>
            </method>
            <javadoc line="536">
                {@inheritDoc}                
            </javadoc>
            <method name="isInfinite" type="boolean" line="538">
                <declaration name="infiniteFound" type="boolean" line="539"/>
                <declaration name="iter" type="Iterator" line="540"/>
                <scope line="541">
                    <declaration name="value" type="double" line="543"/>
                    <scope line="544"/>
                    <scope line="547"/>
                </scope>
            </method>
            <javadoc line="554">
                {@inheritDoc}                
            </javadoc>
            <method name="isNaN" type="boolean" line="556">
                <declaration name="iter" type="Iterator" line="557"/>
                <scope line="558">
                    <scope line="560"/>
                </scope>
            </method>
            <javadoc line="567">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAdd" type="OpenMapRealVector" line="569">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="573">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="OpenMapRealVector" line="575">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="576"/>
            </method>
            <javadoc line="582">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="585">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="587"/>
                <scope line="589"/>
            </method>
            <javadoc line="594">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="597">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="600"/>
            </method>
            <javadoc line="605">
                {@inheritDoc}                
            </javadoc>
            <method name="set" type="void" line="607">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="608"/>
            </method>
            <javadoc line="613">
                Optimized method to subtract OpenMapRealVectors.                
                <param>
                    v Vector to subtract from {@code this}.                    
                </param>
                <return>
                    the difference of {@code this} and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="subtract" type="OpenMapRealVector" line="621">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="623"/>
                <declaration name="iter" type="Iterator" line="624"/>
                <scope line="625">
                    <declaration name="key" type="int" line="627"/>
                    <scope line="628"/>
                    <scope line="630"/>
                </scope>
            </method>
            <javadoc line="637">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="RealVector" line="640">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="642"/>
                <scope line="644"/>
            </method>
            <javadoc line="649">
                {@inheritDoc}                
            </javadoc>
            <method name="unitVector" type="OpenMapRealVector" line="651">
                <declaration name="res" type="OpenMapRealVector" line="652"/>
            </method>
            <javadoc line="657">
                {@inheritDoc}                
            </javadoc>
            <method name="unitize" type="void" line="659">
                <declaration name="norm" type="double" line="660"/>
                <scope line="661"/>
                <declaration name="iter" type="Iterator" line="664"/>
                <scope line="665"/>
            </method>
            <javadoc line="671">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="double[]" line="673">
                <declaration name="res" type="double[]" line="674"/>
                <declaration name="iter" type="Iterator" line="675"/>
                <scope line="676"/>
            </method>
            <javadoc line="683">
                {@inheritDoc}Implementation Note: This works on exact values, and as a result
                  it is possible for {@code a.subtract(b)} to be the zero vector, while{@code a.hashCode() != b.hashCode()}.                
            </javadoc>
            <method name="hashCode" type="int" line="690">
                <declaration name="prime" type="int" line="691"/>
                <declaration name="result" type="int" line="692"/>
                <declaration name="temp" type="long" line="693"/>
                <declaration name="iter" type="Iterator" line="697"/>
                <scope line="698"/>
            </method>
            <javadoc line="706">
                {@inheritDoc}Implementation Note: This performs an exact comparison, and as a result
                  it is possible for {@code a.subtract(b}} to be the zero vector, while{@code  a.equals(b) == false}.                
            </javadoc>
            <method name="equals" type="boolean" line="713">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="714"/>
                <scope line="717"/>
                <declaration name="other" type="OpenMapRealVector" line="720"/>
                <scope line="721"/>
                <scope line="725"/>
                <declaration name="iter" type="Iterator" line="728"/>
                <scope line="729">
                    <declaration name="test" type="double" line="731"/>
                    <scope line="732"/>
                </scope>
                <scope line="737">
                    <declaration name="test" type="double" line="739"/>
                    <scope line="740"/>
                </scope>
            </method>
            <javadoc line="747">
                @return the percentage of none zero elements as a decimal percent.                
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="getSparsity" type="double" line="752"/>
            <javadoc line="756">
                {@inheritDoc}                
            </javadoc>
            <method name="sparseIterator" type="java.util.Iterator&lt;Entry&gt;" line="758"/>
            <class name="OpenMapEntry" line="762">
                <extends class="Entry"/>
                <javadoc line="762">
                    Implementation of {@code Entry} optimized for OpenMap.
                      This implementation does not allow arbitrary calls to {@code setIndex}since the order in which entries are returned is undefined.                    
                </javadoc>
                <declaration name="iter" type="Iterator" line="768"/>
                <javadoc line="768">
                    Iterator pointing to the entry.                    
                </javadoc>
                <javadoc line="771">
                    Build an entry from an iterator point to an element.                    
                    <param>
                        iter Iterator pointing to the entry.                        
                    </param>
                </javadoc>
                <method name="OpenMapEntry" type="constructor" line="776">
                    <params>
                        <param name="iter" type="Iterator"/>
                    </params>
                </method>
                <javadoc line="780">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getValue" type="double" line="782"/>
                <javadoc line="786">
                    {@inheritDoc}                    
                </javadoc>
                <method name="setValue" type="void" line="788">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="792">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getIndex" type="int" line="794"/>
            </class>
            <class name="OpenMapSparseIterator" line="800">
                <implements interface="java.util.Iterator">
                    <type_params>
                        <type_param name="Entry"/>
                    </type_params>
                </implements>
                <javadoc line="800">
                    Iterator class to do iteration over just the non-zero elements.
                      This implementation is fail-fast, so cannot be used to modify
                      any zero element.                    
                </javadoc>
                <declaration name="iter" type="Iterator" line="806"/>
                <javadoc line="806">
                    Underlying iterator.                    
                </javadoc>
                <declaration name="current" type="Entry" line="808"/>
                <javadoc line="808">
                    Current entry.                    
                </javadoc>
                <javadoc line="811">
                    Simple constructor.                    
                </javadoc>
                <method name="OpenMapSparseIterator" type="constructor" line="812"/>
                <javadoc line="817">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hasNext" type="boolean" line="818"/>
                <javadoc line="822">
                    {@inheritDoc}                    
                </javadoc>
                <method name="next" type="Entry" line="823"/>
                <javadoc line="828">
                    {@inheritDoc}                    
                </javadoc>
                <method name="remove" type="void" line="829"/>
            </class>
        </class>
    </source>