<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.OpenIntToDoubleHashMap"/>
        <import package="org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator"/>
        <class name="OpenMapRealVector" line="11">
            <extends class="SparseRealVector"/>
            <implements interface="Serializable"/>
            <javadoc line="11">
                This class implements the {@link RealVector} interface with a{@link OpenIntToDoubleHashMap} backing store.                
                <version>
                    $Id: OpenMapRealVector.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
                <deprecated>
                    As of version 3.1, this class is deprecated, for reasons exposed
                      in this JIRA
                      <a href="https://issues.apache.org/jira/browse/MATH-870">ticket</a>. This
                      class will be removed in version 4.0.                    
                </deprecated>
            </javadoc>
            <declaration name="DEFAULT_ZERO_TOLERANCE" type="double" line="21"/>
            <javadoc line="21">
                Default Tolerance for having a value considered zero.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="25"/>
            <javadoc line="25">
                Serializable version identifier.                
            </javadoc>
            <declaration name="entries" type="OpenIntToDoubleHashMap" line="29"/>
            <javadoc line="29">
                Entries of the vector.                
            </javadoc>
            <declaration name="virtualSize" type="int" line="33"/>
            <javadoc line="33">
                Dimension of the vector.                
            </javadoc>
            <declaration name="epsilon" type="double" line="37"/>
            <javadoc line="37">
                Tolerance for having a value considered zero.                
            </javadoc>
            <javadoc line="41">
                Build a 0-length vector.
                  Zero-length vectors may be used to initialized construction of vectors
                  by data gathering. We start with zero-length and use either the {@link #OpenMapRealVector(OpenMapRealVector,int)} constructor
                  or one of the {@code append} method ({@link #append(double)},{@link #append(RealVector)}) to gather data into this vector.                
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="47"/>
            <javadoc line="50">
                Construct a vector of zeroes.                
                <param>
                    dimension Size of the vector.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="54">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                Construct a vector of zeroes, specifying zero tolerance.                
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    epsilon Tolerance below which a value considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="62">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="67">
                Build a resized vector, for use with append.                
                <param>
                    v Original vector.                    
                </param>
                <param>
                    resize Amount to add.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="72">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                    <param name="resize" type="int"/>
                </params>
            </method>
            <javadoc line="77">
                Build a vector with known the sparseness (for advanced use only).                
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    expectedSize The expected number of non-zero entries.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="82">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="expectedSize" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                Build a vector with known the sparseness and zero tolerance
                  setting (for advanced use only).                
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    expectedSize Expected number of non-zero entries.                    
                </param>
                <param>
                    epsilon Tolerance below which a value is considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="92">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="expectedSize" type="int"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="97">
                Create from an array.
                  Only non-zero entries will be stored.                
                <param>
                    values Set of values to create from.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="102">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="105">
                Create from an array, specifying zero tolerance.
                  Only non-zero entries will be stored.                
                <param>
                    values Set of values to create from.                    
                </param>
                <param>
                    epsilon Tolerance below which a value is considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="111">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="epsilon" type="double"/>
                </params>
                <scope line="115">
                    <declaration name="value" type="double" line="116"/>
                    <scope line="117"/>
                </scope>
            </method>
            <javadoc line="122">
                Create from an array.
                  Only non-zero entries will be stored.                
                <param>
                    values The set of values to create from                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="127">
                <params>
                    <param name="values" type="Double[]"/>
                </params>
            </method>
            <javadoc line="130">
                Create from an array.
                  Only non-zero entries will be stored.                
                <param>
                    values Set of values to create from.                    
                </param>
                <param>
                    epsilon Tolerance below which a value is considered zero.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="136">
                <params>
                    <param name="values" type="Double[]"/>
                    <param name="epsilon" type="double"/>
                </params>
                <scope line="140">
                    <declaration name="value" type="double" line="141"/>
                    <scope line="142"/>
                </scope>
            </method>
            <javadoc line="147">
                Copy constructor.                
                <param>
                    v Instance to copy from.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="151">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
            </method>
            <javadoc line="156">
                Generic copy constructor.                
                <param>
                    v Instance to copy from.                    
                </param>
            </javadoc>
            <method name="OpenMapRealVector" type="constructor" line="160">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="164">
                    <declaration name="value" type="double" line="165"/>
                    <scope line="166"/>
                </scope>
            </method>
            <javadoc line="171">
                Get the entries of this instance.                
                <return>
                    the entries of this instance.                    
                </return>
            </javadoc>
            <method name="getEntries" type="OpenIntToDoubleHashMap" line="175"/>
            <javadoc line="178">
                Determine if this value is within epsilon of zero.                
                <param>
                    value Value to test                    
                </param>
                <return>
                    {@code true} if this value is within epsilon to zero,{@code false} otherwise.                    
                </return>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="isDefaultValue" type="boolean" line="184">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="187">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="RealVector" line="190">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="192"/>
                <scope line="195"/>
            </method>
            <javadoc line="199">
                Optimized method to add two OpenMapRealVectors.
                  It copies the larger vector, then iterates over the smaller.                
                <param>
                    v Vector to add.                    
                </param>
                <return>
                    the sum of {@code this} and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="add" type="OpenMapRealVector" line="206">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="copyThis" type="boolean" line="208"/>
                <declaration name="res" type="OpenMapRealVector" line="209"/>
                <declaration name="iter" type="Iterator" line="210"/>
                <declaration name="randomAccess" type="OpenIntToDoubleHashMap" line="211"/>
                <scope line="212">
                    <declaration name="key" type="int" line="214"/>
                    <scope line="215"/>
                    <scope line="218"/>
                </scope>
            </method>
            <javadoc line="224">
                Optimized method to append a OpenMapRealVector.                
                <param>
                    v vector to append                    
                </param>
                <return>
                    The result of appending {@code v} to self                    
                </return>
            </javadoc>
            <method name="append" type="OpenMapRealVector" line="229">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="230"/>
                <declaration name="iter" type="Iterator" line="231"/>
                <scope line="232"/>
            </method>
            <javadoc line="238">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="OpenMapRealVector" line="241">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="242"/>
                <scope line="245">
                    <declaration name="res" type="OpenMapRealVector" line="246"/>
                    <scope line="247"/>
                </scope>
            </method>
            <javadoc line="253">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="OpenMapRealVector" line="256">
                <params>
                    <param name="d" type="double"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="257"/>
            </method>
            <javadoc line="261">
                {@inheritDoc}                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="copy" type="OpenMapRealVector" line="265"/>
            <javadoc line="268">
                Computes the dot product.
                  Note that the computation is now performed in the parent class: no
                  performance improvement is to be expected from this overloaded
                  method.
                  The previous implementation was buggy and cannot be easily fixed
                  (see MATH-795).                
                <param>
                    v Vector.                    
                </param>
                <return>
                    the dot product of this vector with {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this} vector.                    
                </throws>
                <deprecated>
                    as of 3.1 (to be removed in 4.0). The computation is
                      performed by the parent class. The method must be kept to maintain
                      backwards compatibility.                    
                </deprecated>
            </javadoc>
            <method name="dotProduct" type="double" line="282">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
            </method>
            <javadoc line="285">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="OpenMapRealVector" line="288">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="290"/>
                <declaration name="n" type="int" line="291"/>
                <scope line="292"/>
            </method>
            <javadoc line="297">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="OpenMapRealVector" line="300">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="302"/>
                <declaration name="iter" type="Iterator" line="303"/>
                <scope line="304"/>
                <scope line="308">
                    <declaration name="n" type="int" line="309"/>
                    <scope line="310">
                        <declaration name="y" type="double" line="311"/>
                        <scope line="312"/>
                        <scope line="315">
                            <declaration name="x" type="double" line="316"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="323">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="OpenMapRealVector" line="326">
                <params>
                    <param name="index" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="328"/>
                <declaration name="res" type="OpenMapRealVector" line="332"/>
                <declaration name="end" type="int" line="333"/>
                <declaration name="iter" type="Iterator" line="334"/>
                <scope line="335">
                    <declaration name="key" type="int" line="337"/>
                    <scope line="338"/>
                </scope>
            </method>
            <javadoc line="344">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="347"/>
            <javadoc line="350">
                Optimized method to compute distance.                
                <param>
                    v Vector to compute distance to.                    
                </param>
                <return>
                    the distance from {@code this} and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="getDistance" type="double" line="356">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="iter" type="Iterator" line="358"/>
                <declaration name="res" type="double" line="359"/>
                <scope line="360">
                    <declaration name="key" type="int" line="362"/>
                    <declaration name="delta" type="double" line="363"/>
                </scope>
                <scope line="368">
                    <declaration name="key" type="int" line="370"/>
                    <scope line="371">
                        <declaration name="value" type="double" line="372"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="378">
                {@inheritDoc}                
            </javadoc>
            <method name="getDistance" type="double" line="381">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="383"/>
                <scope line="386"/>
            </method>
            <javadoc line="390">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="double" line="393">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="397">
                Distance between two vectors.
                  This method computes the distance consistent with
                  L&lt;sub&gt;1&lt;/sub&gt; norm, i.e. the sum of the absolute values of
                  elements differences.                
                <param>
                    v Vector to which distance is requested.                    
                </param>
                <return>
                    distance between this vector and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="getL1Distance" type="double" line="406">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="max" type="double" line="408"/>
                <declaration name="iter" type="Iterator" line="409"/>
                <scope line="410">
                    <declaration name="delta" type="double" line="412"/>
                </scope>
                <scope line="416">
                    <declaration name="key" type="int" line="418"/>
                    <scope line="419">
                        <declaration name="delta" type="double" line="420"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="426">
                {@inheritDoc}                
            </javadoc>
            <method name="getL1Distance" type="double" line="429">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="431"/>
                <scope line="434"/>
            </method>
            <javadoc line="438">
                Optimized method to compute LInfDistance.                
                <param>
                    v Vector to compute distance from.                    
                </param>
                <return>
                    the LInfDistance.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="getLInfDistance" type="double" line="444">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="max" type="double" line="446"/>
                <declaration name="iter" type="Iterator" line="447"/>
                <scope line="448">
                    <declaration name="delta" type="double" line="450"/>
                    <scope line="451"/>
                </scope>
                <scope line="456">
                    <declaration name="key" type="int" line="458"/>
                    <scope line="459"/>
                </scope>
            </method>
            <javadoc line="465">
                {@inheritDoc}                
            </javadoc>
            <method name="getLInfDistance" type="double" line="468">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="470"/>
                <scope line="473"/>
            </method>
            <javadoc line="477">
                {@inheritDoc}                
            </javadoc>
            <method name="isInfinite" type="boolean" line="480">
                <declaration name="infiniteFound" type="boolean" line="481"/>
                <declaration name="iter" type="Iterator" line="482"/>
                <scope line="483">
                    <declaration name="value" type="double" line="485"/>
                    <scope line="486"/>
                    <scope line="489"/>
                </scope>
            </method>
            <javadoc line="495">
                {@inheritDoc}                
            </javadoc>
            <method name="isNaN" type="boolean" line="498">
                <declaration name="iter" type="Iterator" line="499"/>
                <scope line="500">
                    <scope line="502"/>
                </scope>
            </method>
            <javadoc line="508">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAdd" type="OpenMapRealVector" line="511">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="514">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="OpenMapRealVector" line="517">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="518"/>
            </method>
            <javadoc line="523">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="526">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="528"/>
                <scope line="531"/>
            </method>
            <javadoc line="535">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="538">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="541"/>
            </method>
            <javadoc line="545">
                {@inheritDoc}                
            </javadoc>
            <method name="set" type="void" line="548">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="549"/>
            </method>
            <javadoc line="553">
                Optimized method to subtract OpenMapRealVectors.                
                <param>
                    v Vector to subtract from {@code this}.                    
                </param>
                <return>
                    the difference of {@code this} and {@code v}.                    
                </return>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="subtract" type="OpenMapRealVector" line="559">
                <params>
                    <param name="v" type="OpenMapRealVector"/>
                </params>
                <declaration name="res" type="OpenMapRealVector" line="561"/>
                <declaration name="iter" type="Iterator" line="562"/>
                <scope line="563">
                    <declaration name="key" type="int" line="565"/>
                    <scope line="566"/>
                    <scope line="569"/>
                </scope>
            </method>
            <javadoc line="575">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="RealVector" line="578">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="580"/>
                <scope line="583"/>
            </method>
            <javadoc line="587">
                {@inheritDoc}                
            </javadoc>
            <method name="unitVector" type="OpenMapRealVector" line="590">
                <declaration name="res" type="OpenMapRealVector" line="591"/>
            </method>
            <javadoc line="595">
                {@inheritDoc}                
            </javadoc>
            <method name="unitize" type="void" line="598">
                <declaration name="norm" type="double" line="599"/>
                <scope line="600"/>
                <declaration name="iter" type="Iterator" line="603"/>
                <scope line="604"/>
            </method>
            <javadoc line="609">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="double[]" line="612">
                <declaration name="res" type="double[]" line="613"/>
                <declaration name="iter" type="Iterator" line="614"/>
                <scope line="615"/>
            </method>
            <javadoc line="621">
                {@inheritDoc}Implementation Note: This works on exact values, and as a result
                  it is possible for {@code a.subtract(b)} to be the zero vector, while{@code a.hashCode() != b.hashCode()}.                
            </javadoc>
            <method name="hashCode" type="int" line="625">
                <declaration name="prime" type="int" line="626"/>
                <declaration name="result" type="int" line="627"/>
                <declaration name="temp" type="long" line="628"/>
                <declaration name="iter" type="Iterator" line="632"/>
                <scope line="633"/>
            </method>
            <javadoc line="640">
                {@inheritDoc}Implementation Note: This performs an exact comparison, and as a result
                  it is possible for {@code a.subtract(b}} to be the zero vector, while{@code  a.equals(b) == false}.                
            </javadoc>
            <method name="equals" type="boolean" line="644">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="645"/>
                <scope line="648"/>
                <declaration name="other" type="OpenMapRealVector" line="651"/>
                <scope line="652"/>
                <scope line="655"/>
                <declaration name="iter" type="Iterator" line="658"/>
                <scope line="659">
                    <declaration name="test" type="double" line="661"/>
                    <scope line="662"/>
                </scope>
                <scope line="667">
                    <declaration name="test" type="double" line="669"/>
                    <scope line="670"/>
                </scope>
            </method>
            <javadoc line="676">
                @return the percentage of none zero elements as a decimal percent.                
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="getSparsity" type="double" line="680"/>
            <javadoc line="683">
                {@inheritDoc}                
            </javadoc>
            <method name="sparseIterator" type="java.util.Iterator<Entry>" line="686"/>
            <class name="OpenMapEntry" line="689">
                <extends class="Entry"/>
                <javadoc line="689">
                    Implementation of {@code Entry} optimized for OpenMap.
                      This implementation does not allow arbitrary calls to {@code setIndex}since the order in which entries are returned is undefined.                    
                </javadoc>
                <declaration name="iter" type="Iterator" line="694"/>
                <javadoc line="694">
                    Iterator pointing to the entry.                    
                </javadoc>
                <javadoc line="698">
                    Build an entry from an iterator point to an element.                    
                    <param>
                        iter Iterator pointing to the entry.                        
                    </param>
                </javadoc>
                <method name="OpenMapEntry" type="constructor" line="702">
                    <params>
                        <param name="iter" type="Iterator"/>
                    </params>
                </method>
                <javadoc line="705">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getValue" type="double" line="708"/>
                <javadoc line="711">
                    {@inheritDoc}                    
                </javadoc>
                <method name="setValue" type="void" line="714">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <javadoc line="717">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getIndex" type="int" line="720"/>
            </class>
            <class name="OpenMapSparseIterator" line="724">
                <implements interface="java.util.Iterator">
                    <type_params>
                        <type_param name="Entry"/>
                    </type_params>
                </implements>
                <javadoc line="724">
                    Iterator class to do iteration over just the non-zero elements.
                      This implementation is fail-fast, so cannot be used to modify
                      any zero element.                    
                </javadoc>
                <declaration name="iter" type="Iterator" line="730"/>
                <javadoc line="730">
                    Underlying iterator.                    
                </javadoc>
                <declaration name="current" type="Entry" line="734"/>
                <javadoc line="734">
                    Current entry.                    
                </javadoc>
                <javadoc line="738">
                    Simple constructor.                    
                </javadoc>
                <method name="OpenMapSparseIterator" type="constructor" line="741"/>
                <javadoc line="745">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hasNext" type="boolean" line="748"/>
                <javadoc line="751">
                    {@inheritDoc}                    
                </javadoc>
                <method name="next" type="Entry" line="754"/>
                <javadoc line="758">
                    {@inheritDoc}                    
                </javadoc>
                <method name="remove" type="void" line="761"/>
            </class>
        </class>
    </source>