<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Array2DRowRealMatrix" line="32">
            <extends class="AbstractRealMatrix"/>
            <implements interface="Serializable"/>
            <javadoc line="32">
                Implementation of {@link RealMatrix} using a {@code double[][]} array to
                  store entries.                
                <version>
                    $Id: Array2DRowRealMatrix.java 1459082 2013-03-20 22:24:09Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <javadoc line="39">
                Serializable version identifier.                
            </javadoc>
            <declaration name="data" type="double" line="42"/>
            <javadoc line="42">
                Entries of the matrix.                
            </javadoc>
            <javadoc line="45">
                Creates a matrix with no data                
            </javadoc>
            <method name="Array2DRowRealMatrix" type="constructor" line="48"/>
            <javadoc line="50">
                Create a new RealMatrix with the supplied row and column dimensions.                
                <param>
                    rowDimension Number of rows in the new matrix.                    
                </param>
                <param>
                    columnDimension Number of columns in the new matrix.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if the row or column dimension is
                      not positive.                    
                </throws>
            </javadoc>
            <method name="Array2DRowRealMatrix" type="constructor" line="60">
                <params>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Create a new {@code RealMatrix} using the input array as the underlying
                  data array.
                  &lt;p&gt;The input array is copied, not referenced. This constructor has
                  the same effect as calling {@link #Array2DRowRealMatrix(double[][],boolean)}with the second argument set to {@code true}.&lt;/p&gt;                
                <param>
                    d Data for the new matrix.                    
                </param>
                <throws>
                    DimensionMismatchException if {@code d} is not rectangular.                    
                </throws>
                <throws>
                    NoDataException if {@code d} row or column dimension is zero.                    
                </throws>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #Array2DRowRealMatrix(double[][],boolean)                    
                </see>
            </javadoc>
            <method name="Array2DRowRealMatrix" type="constructor" line="79">
                <params>
                    <param name="d" type="double[][]"/>
                </params>
            </method>
            <javadoc line="83">
                Create a new RealMatrix using the input array as the underlying
                  data array.
                  If an array is built specially in order to be embedded in a
                  RealMatrix and not used directly, the {@code copyArray} may be
                  set to {@code false}. This will prevent the copying and improve
                  performance as no new array will be built and no data will be copied.                
                <param>
                    d Data for new matrix.                    
                </param>
                <param>
                    copyArray if {@code true}, the input array will be copied,
                      otherwise it will be referenced.                    
                </param>
                <throws>
                    DimensionMismatchException if {@code d} is not rectangular.                    
                </throws>
                <throws>
                    NoDataException if {@code d} row or column dimension is zero.                    
                </throws>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #Array2DRowRealMatrix(double[][])                    
                </see>
            </javadoc>
            <method name="Array2DRowRealMatrix" type="constructor" line="101">
                <params>
                    <param name="d" type="double[][]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
                <scope line="102"/>
                <scope line="104">
                    <scope line="105"/>
                    <declaration name="nRows" type="int" line="108"/>
                    <scope line="109"/>
                    <declaration name="nCols" type="int" line="112"/>
                    <scope line="113"/>
                    <scope line="116">
                        <scope line="117"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="125">
                Create a new (column) RealMatrix using {@code v} as the
                  data for the unique column of the created matrix.
                  The input array is copied.                
                <param>
                    v Column vector holding data for new matrix.                    
                </param>
            </javadoc>
            <method name="Array2DRowRealMatrix" type="constructor" line="132">
                <params>
                    <param name="v" type="double[]"/>
                </params>
                <declaration name="nRows" type="int" line="133"/>
                <scope line="135"/>
            </method>
            <javadoc line="140">
                {@inheritDoc}                
            </javadoc>
            <method name="createMatrix" type="RealMatrix" line="144">
                <params>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="148">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="RealMatrix" line="150"/>
            <javadoc line="154">
                Compute the sum of {@code this} and {@code m}.                
                <param>
                    m Matrix to be added.                    
                </param>
                <return>
                    {@code this + m}.                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this}.                    
                </throws>
            </javadoc>
            <method name="add" type="Array2DRowRealMatrix" line="163">
                <params>
                    <param name="m" type="Array2DRowRealMatrix"/>
                </params>
                <comment line="165">
                    Safety check.                    
                </comment>
                <declaration name="rowCount" type="int" line="167"/>
                <declaration name="columnCount" type="int" line="168"/>
                <declaration name="outData" type="double[][]" line="169"/>
                <scope line="170">
                    <declaration name="dataRow" type="double[]" line="171"/>
                    <declaration name="mRow" type="double[]" line="172"/>
                    <declaration name="outDataRow" type="double[]" line="173"/>
                    <scope line="174"/>
                </scope>
            </method>
            <javadoc line="182">
                Returns {@code this} minus {@code m}.                
                <param>
                    m Matrix to be subtracted.                    
                </param>
                <return>
                    {@code this - m}                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="Array2DRowRealMatrix" line="191">
                <params>
                    <param name="m" type="Array2DRowRealMatrix"/>
                </params>
                <declaration name="rowCount" type="int" line="194"/>
                <declaration name="columnCount" type="int" line="195"/>
                <declaration name="outData" type="double[][]" line="196"/>
                <scope line="197">
                    <declaration name="dataRow" type="double[]" line="198"/>
                    <declaration name="mRow" type="double[]" line="199"/>
                    <declaration name="outDataRow" type="double[]" line="200"/>
                    <scope line="201"/>
                </scope>
            </method>
            <javadoc line="209">
                Returns the result of postmultiplying {@code this} by {@code m}.                
                <param>
                    m matrix to postmultiply by                    
                </param>
                <return>
                    {@code this  m}                    
                </return>
                <throws>
                    DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}                    
                </throws>
            </javadoc>
            <method name="multiply" type="Array2DRowRealMatrix" line="218">
                <params>
                    <param name="m" type="Array2DRowRealMatrix"/>
                </params>
                <comment line="227">
                    Will hold a column of &quot;m&quot;.                    
                </comment>
                <comment line="231">
                    Multiply.                    
                </comment>
                <comment line="233">
                    Copy all elements of column &quot;col&quot; of &quot;m&quot; so that
                     will be in contiguous memory.                    
                </comment>
                <declaration name="nRows" type="int" line="221"/>
                <declaration name="nCols" type="int" line="222"/>
                <declaration name="nSum" type="int" line="223"/>
                <declaration name="outData" type="double[][]" line="225"/>
                <declaration name="mCol" type="double[]" line="227"/>
                <declaration name="mData" type="double[][]" line="228"/>
                <scope line="231">
                    <scope line="234"/>
                    <scope line="238">
                        <declaration name="dataRow" type="double[]" line="239"/>
                        <declaration name="sum" type="double" line="240"/>
                        <scope line="241"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="251">
                {@inheritDoc}                
            </javadoc>
            <method name="getData" type="double[][]" line="253"/>
            <javadoc line="257">
                Get a reference to the underlying data array.                
                <return>
                    2-dimensional array of entries.                    
                </return>
            </javadoc>
            <method name="getDataRef" type="double[][]" line="262"/>
            <javadoc line="266">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubMatrix" type="void" line="271">
                <params>
                    <param name="subMatrix" type="double[][]"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <scope line="272">
                    <scope line="273"/>
                    <scope line="276"/>
                    <declaration name="nRows" type="int" line="280"/>
                    <scope line="281"/>
                    <declaration name="nCols" type="int" line="285"/>
                    <scope line="286"/>
                    <scope line="290">
                        <scope line="291"/>
                    </scope>
                </scope>
                <scope line="296"/>
            </method>
            <javadoc line="302">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="double" line="305">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="310">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="313">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="318">
                {@inheritDoc}                
            </javadoc>
            <method name="addToEntry" type="void" line="322">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="increment" type="double"/>
                </params>
            </method>
            <javadoc line="327">
                {@inheritDoc}                
            </javadoc>
            <method name="multiplyEntry" type="void" line="331">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="factor" type="double"/>
                </params>
            </method>
            <javadoc line="336">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="338"/>
            <javadoc line="342">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="344"/>
            <javadoc line="348">
                {@inheritDoc}                
            </javadoc>
            <method name="operate" type="double[]" line="351">
                <params>
                    <param name="v" type="double[]"/>
                </params>
                <declaration name="nRows" type="int" line="352"/>
                <declaration name="nCols" type="int" line="353"/>
                <scope line="354"/>
                <declaration name="out" type="double[]" line="357"/>
                <scope line="358">
                    <declaration name="dataRow" type="double[]" line="359"/>
                    <declaration name="sum" type="double" line="360"/>
                    <scope line="361"/>
                </scope>
            </method>
            <javadoc line="369">
                {@inheritDoc}                
            </javadoc>
            <method name="preMultiply" type="double[]" line="372">
                <params>
                    <param name="v" type="double[]"/>
                </params>
                <declaration name="nRows" type="int" line="373"/>
                <declaration name="nCols" type="int" line="374"/>
                <scope line="375"/>
                <declaration name="out" type="double[]" line="379"/>
                <scope line="380">
                    <declaration name="sum" type="double" line="381"/>
                    <scope line="382"/>
                </scope>
            </method>
            <javadoc line="392">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="double" line="394">
                <params>
                    <param name="visitor" type="RealMatrixChangingVisitor"/>
                </params>
                <declaration name="rows" type="int" line="395"/>
                <declaration name="columns" type="int" line="396"/>
                <scope line="398">
                    <declaration name="rowI" type="double[]" line="399"/>
                    <scope line="400"/>
                </scope>
            </method>
            <javadoc line="407">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="double" line="409">
                <params>
                    <param name="visitor" type="RealMatrixPreservingVisitor"/>
                </params>
                <declaration name="rows" type="int" line="410"/>
                <declaration name="columns" type="int" line="411"/>
                <scope line="413">
                    <declaration name="rowI" type="double[]" line="414"/>
                    <scope line="415"/>
                </scope>
            </method>
            <javadoc line="422">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="double" line="427">
                <params>
                    <param name="visitor" type="RealMatrixChangingVisitor"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="431">
                    <declaration name="rowI" type="double[]" line="432"/>
                    <scope line="433"/>
                </scope>
            </method>
            <javadoc line="440">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="double" line="445">
                <params>
                    <param name="visitor" type="RealMatrixPreservingVisitor"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="449">
                    <declaration name="rowI" type="double[]" line="450"/>
                    <scope line="451"/>
                </scope>
            </method>
            <javadoc line="458">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="460">
                <params>
                    <param name="visitor" type="RealMatrixChangingVisitor"/>
                </params>
                <declaration name="rows" type="int" line="461"/>
                <declaration name="columns" type="int" line="462"/>
                <scope line="464">
                    <scope line="465">
                        <declaration name="rowI" type="double[]" line="466"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="473">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="475">
                <params>
                    <param name="visitor" type="RealMatrixPreservingVisitor"/>
                </params>
                <declaration name="rows" type="int" line="476"/>
                <declaration name="columns" type="int" line="477"/>
                <scope line="479">
                    <scope line="480"/>
                </scope>
            </method>
            <javadoc line="487">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="492">
                <params>
                    <param name="visitor" type="RealMatrixChangingVisitor"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="496">
                    <scope line="497">
                        <declaration name="rowI" type="double[]" line="498"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="505">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="510">
                <params>
                    <param name="visitor" type="RealMatrixPreservingVisitor"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="514">
                    <scope line="515"/>
                </scope>
            </method>
            <javadoc line="522">
                Get a fresh copy of the underlying data array.                
                <return>
                    a copy of the underlying data array.                    
                </return>
            </javadoc>
            <method name="copyOut" type="double[][]" line="527">
                <comment line="531">
                    can&apos;t copy 2-d array in one shot, otherwise get row references                    
                </comment>
                <declaration name="nRows" type="int" line="528"/>
                <declaration name="out" type="double[][]" line="529"/>
                <scope line="531"/>
            </method>
            <javadoc line="537">
                Replace data with a fresh copy of the input array.                
                <param>
                    in Data to copy.                    
                </param>
                <throws>
                    NoDataException if the input array is empty.                    
                </throws>
                <throws>
                    DimensionMismatchException if the input array is not rectangular.                    
                </throws>
                <throws>
                    NullArgumentException if the input array is {@code null}.                    
                </throws>
            </javadoc>
            <method name="copyIn" type="void" line="546">
                <params>
                    <param name="in" type="double[][]"/>
                </params>
            </method>
        </class>
    </source>