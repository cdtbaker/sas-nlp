<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Array2DRowRealMatrix" line="12">
            <extends class="AbstractRealMatrix"/>
            <implements interface="Serializable"/>
            <javadoc line="12">
                Implementation of {@link RealMatrix} using a {@code double[][]} array to
                  store entries.                
                <version>
                    $Id: Array2DRowRealMatrix.java 1459082 2013-03-20 22:24:09Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="18"/>
            <javadoc line="18">
                Serializable version identifier.                
            </javadoc>
            <declaration name="data" type="double" line="22"/>
            <javadoc line="22">
                Entries of the matrix.                
            </javadoc>
            <javadoc line="26">
                Creates a matrix with no data                
            </javadoc>
            <method name="Array2DRowRealMatrix" type="constructor" line="29"/>
            <javadoc line="31">
                Create a new RealMatrix with the supplied row and column dimensions.                
                <param>
                    rowDimension Number of rows in the new matrix.                    
                </param>
                <param>
                    columnDimension Number of columns in the new matrix.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if the row or column dimension is
                      not positive.                    
                </throws>
            </javadoc>
            <method name="Array2DRowRealMatrix" type="constructor" line="38">
                <params>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="42">
                Create a new {@code RealMatrix} using the input array as the underlying
                  data array.
                  &lt;p&gt;The input array is copied, not referenced. This constructor has
                  the same effect as calling {@link #Array2DRowRealMatrix(double[][],boolean)}with the second argument set to {@code true}.&lt;/p&gt;                
                <param>
                    d Data for the new matrix.                    
                </param>
                <throws>
                    DimensionMismatchException if {@code d} is not rectangular.                    
                </throws>
                <throws>
                    NoDataException if {@code d} row or column dimension is zero.                    
                </throws>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #Array2DRowRealMatrix(double[][],boolean)                    
                </see>
            </javadoc>
            <method name="Array2DRowRealMatrix" type="constructor" line="53">
                <params>
                    <param name="d" type="double[][]"/>
                </params>
            </method>
            <javadoc line="56">
                Create a new RealMatrix using the input array as the underlying
                  data array.
                  If an array is built specially in order to be embedded in a
                  RealMatrix and not used directly, the {@code copyArray} may be
                  set to {@code false}. This will prevent the copying and improve
                  performance as no new array will be built and no data will be copied.                
                <param>
                    d Data for new matrix.                    
                </param>
                <param>
                    copyArray if {@code true}, the input array will be copied,
                      otherwise it will be referenced.                    
                </param>
                <throws>
                    DimensionMismatchException if {@code d} is not rectangular.                    
                </throws>
                <throws>
                    NoDataException if {@code d} row or column dimension is zero.                    
                </throws>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #Array2DRowRealMatrix(double[][])                    
                </see>
            </javadoc>
            <method name="Array2DRowRealMatrix" type="constructor" line="71">
                <params>
                    <param name="d" type="double[][]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
                <scope line="72"/>
                <scope line="75">
                    <scope line="76"/>
                    <declaration name="nRows" type="int" line="79"/>
                    <scope line="80"/>
                    <declaration name="nCols" type="int" line="83"/>
                    <scope line="84"/>
                    <scope line="87">
                        <scope line="88"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="95">
                Create a new (column) RealMatrix using {@code v} as the
                  data for the unique column of the created matrix.
                  The input array is copied.                
                <param>
                    v Column vector holding data for new matrix.                    
                </param>
            </javadoc>
            <method name="Array2DRowRealMatrix" type="constructor" line="101">
                <params>
                    <param name="v" type="double[]"/>
                </params>
                <declaration name="nRows" type="int" line="102"/>
                <scope line="104"/>
            </method>
            <javadoc line="108">
                {@inheritDoc}                
            </javadoc>
            <method name="createMatrix" type="RealMatrix" line="111">
                <params>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="114">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="RealMatrix" line="117"/>
            <javadoc line="120">
                Compute the sum of {@code this} and {@code m}.                
                <param>
                    m Matrix to be added.                    
                </param>
                <return>
                    {@code this + m}.                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this}.                    
                </throws>
            </javadoc>
            <method name="add" type="Array2DRowRealMatrix" line="127">
                <params>
                    <param name="m" type="Array2DRowRealMatrix"/>
                </params>
                <declaration name="rowCount" type="int" line="129"/>
                <declaration name="columnCount" type="int" line="130"/>
                <declaration name="outData" type="double[][]" line="131"/>
                <scope line="132">
                    <declaration name="dataRow" type="double[]" line="133"/>
                    <declaration name="mRow" type="double[]" line="134"/>
                    <declaration name="outDataRow" type="double[]" line="135"/>
                    <scope line="136"/>
                </scope>
            </method>
            <javadoc line="142">
                Returns {@code this} minus {@code m}.                
                <param>
                    m Matrix to be subtracted.                    
                </param>
                <return>
                    {@code this - m}                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="Array2DRowRealMatrix" line="149">
                <params>
                    <param name="m" type="Array2DRowRealMatrix"/>
                </params>
                <declaration name="rowCount" type="int" line="151"/>
                <declaration name="columnCount" type="int" line="152"/>
                <declaration name="outData" type="double[][]" line="153"/>
                <scope line="154">
                    <declaration name="dataRow" type="double[]" line="155"/>
                    <declaration name="mRow" type="double[]" line="156"/>
                    <declaration name="outDataRow" type="double[]" line="157"/>
                    <scope line="158"/>
                </scope>
            </method>
            <javadoc line="164">
                Returns the result of postmultiplying {@code this} by {@code m}.                
                <param>
                    m matrix to postmultiply by                    
                </param>
                <return>
                    {@code this  m}                    
                </return>
                <throws>
                    DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}                    
                </throws>
            </javadoc>
            <method name="multiply" type="Array2DRowRealMatrix" line="170">
                <params>
                    <param name="m" type="Array2DRowRealMatrix"/>
                </params>
                <declaration name="nRows" type="int" line="172"/>
                <declaration name="nCols" type="int" line="173"/>
                <declaration name="nSum" type="int" line="174"/>
                <declaration name="outData" type="double[][]" line="175"/>
                <declaration name="mCol" type="double[]" line="176"/>
                <declaration name="mData" type="double[][]" line="177"/>
                <scope line="178">
                    <scope line="179"/>
                    <scope line="182">
                        <declaration name="dataRow" type="double[]" line="183"/>
                        <declaration name="sum" type="double" line="184"/>
                        <scope line="185"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="193">
                {@inheritDoc}                
            </javadoc>
            <method name="getData" type="double[][]" line="196"/>
            <javadoc line="199">
                Get a reference to the underlying data array.                
                <return>
                    2-dimensional array of entries.                    
                </return>
            </javadoc>
            <method name="getDataRef" type="double[][]" line="203"/>
            <javadoc line="206">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubMatrix" type="void" line="209">
                <params>
                    <param name="subMatrix" type="double[][]"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <scope line="210">
                    <scope line="211"/>
                    <scope line="214"/>
                    <declaration name="nRows" type="int" line="218"/>
                    <scope line="219"/>
                    <declaration name="nCols" type="int" line="222"/>
                    <scope line="223"/>
                    <scope line="227">
                        <scope line="228"/>
                    </scope>
                </scope>
                <scope line="234"/>
            </method>
            <javadoc line="238">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="double" line="241">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="245">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="248">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="252">
                {@inheritDoc}                
            </javadoc>
            <method name="addToEntry" type="void" line="255">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="increment" type="double"/>
                </params>
            </method>
            <javadoc line="259">
                {@inheritDoc}                
            </javadoc>
            <method name="multiplyEntry" type="void" line="262">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="factor" type="double"/>
                </params>
            </method>
            <javadoc line="266">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="269"/>
            <javadoc line="272">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="275"/>
            <javadoc line="278">
                {@inheritDoc}                
            </javadoc>
            <method name="operate" type="double[]" line="281">
                <params>
                    <param name="v" type="double[]"/>
                </params>
                <declaration name="nRows" type="int" line="282"/>
                <declaration name="nCols" type="int" line="283"/>
                <scope line="284"/>
                <declaration name="out" type="double[]" line="287"/>
                <scope line="288">
                    <declaration name="dataRow" type="double[]" line="289"/>
                    <declaration name="sum" type="double" line="290"/>
                    <scope line="291"/>
                </scope>
            </method>
            <javadoc line="298">
                {@inheritDoc}                
            </javadoc>
            <method name="preMultiply" type="double[]" line="301">
                <params>
                    <param name="v" type="double[]"/>
                </params>
                <declaration name="nRows" type="int" line="302"/>
                <declaration name="nCols" type="int" line="303"/>
                <scope line="304"/>
                <declaration name="out" type="double[]" line="307"/>
                <scope line="308">
                    <declaration name="sum" type="double" line="309"/>
                    <scope line="310"/>
                </scope>
            </method>
            <javadoc line="317">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="double" line="320">
                <params>
                    <param name="visitor" type="RealMatrixChangingVisitor"/>
                </params>
                <declaration name="rows" type="int" line="321"/>
                <declaration name="columns" type="int" line="322"/>
                <scope line="324">
                    <declaration name="rowI" type="double[]" line="325"/>
                    <scope line="326"/>
                </scope>
            </method>
            <javadoc line="332">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="double" line="335">
                <params>
                    <param name="visitor" type="RealMatrixPreservingVisitor"/>
                </params>
                <declaration name="rows" type="int" line="336"/>
                <declaration name="columns" type="int" line="337"/>
                <scope line="339">
                    <declaration name="rowI" type="double[]" line="340"/>
                    <scope line="341"/>
                </scope>
            </method>
            <javadoc line="347">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="double" line="350">
                <params>
                    <param name="visitor" type="RealMatrixChangingVisitor"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="353">
                    <declaration name="rowI" type="double[]" line="354"/>
                    <scope line="355"/>
                </scope>
            </method>
            <javadoc line="361">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInRowOrder" type="double" line="364">
                <params>
                    <param name="visitor" type="RealMatrixPreservingVisitor"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="367">
                    <declaration name="rowI" type="double[]" line="368"/>
                    <scope line="369"/>
                </scope>
            </method>
            <javadoc line="375">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="378">
                <params>
                    <param name="visitor" type="RealMatrixChangingVisitor"/>
                </params>
                <declaration name="rows" type="int" line="379"/>
                <declaration name="columns" type="int" line="380"/>
                <scope line="382">
                    <scope line="383">
                        <declaration name="rowI" type="double[]" line="384"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="390">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="393">
                <params>
                    <param name="visitor" type="RealMatrixPreservingVisitor"/>
                </params>
                <declaration name="rows" type="int" line="394"/>
                <declaration name="columns" type="int" line="395"/>
                <scope line="397">
                    <scope line="398"/>
                </scope>
            </method>
            <javadoc line="404">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="407">
                <params>
                    <param name="visitor" type="RealMatrixChangingVisitor"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="410">
                    <scope line="411">
                        <declaration name="rowI" type="double[]" line="412"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="418">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInColumnOrder" type="double" line="421">
                <params>
                    <param name="visitor" type="RealMatrixPreservingVisitor"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="424">
                    <scope line="425"/>
                </scope>
            </method>
            <javadoc line="431">
                Get a fresh copy of the underlying data array.                
                <return>
                    a copy of the underlying data array.                    
                </return>
            </javadoc>
            <method name="copyOut" type="double[][]" line="435">
                <declaration name="nRows" type="int" line="436"/>
                <declaration name="out" type="double[][]" line="437"/>
                <scope line="438"/>
            </method>
            <javadoc line="443">
                Replace data with a fresh copy of the input array.                
                <param>
                    in Data to copy.                    
                </param>
                <throws>
                    NoDataException if the input array is empty.                    
                </throws>
                <throws>
                    DimensionMismatchException if the input array is not rectangular.                    
                </throws>
                <throws>
                    NullArgumentException if the input array is {@code null}.                    
                </throws>
            </javadoc>
            <method name="copyIn" type="void" line="450">
                <params>
                    <param name="in" type="double[][]"/>
                </params>
            </method>
        </class>
    </source>