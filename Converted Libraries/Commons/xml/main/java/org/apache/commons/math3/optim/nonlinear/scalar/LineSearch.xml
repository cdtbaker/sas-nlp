<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar">
        <import package="org.apache.commons.math3.optim.univariate.UnivariateOptimizer"/>
        <import package="org.apache.commons.math3.optim.univariate.BrentOptimizer"/>
        <import package="org.apache.commons.math3.optim.univariate.BracketFinder"/>
        <import package="org.apache.commons.math3.optim.univariate.UnivariatePointValuePair"/>
        <import package="org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker"/>
        <import package="org.apache.commons.math3.optim.univariate.SearchInterval"/>
        <import package="org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <class name="LineSearch" line="29">
            <javadoc line="29">
                Class for finding the minimum of the objective function along a given
                  direction.                
                <since>
                    3.3                    
                </since>
                <version>
                    $Id: LineSearch.java 1573341 2014-03-02 19:38:47Z erans $                    
                </version>
            </javadoc>
            <declaration name="REL_TOL_UNUSED" type="double" line="37"/>
            <javadoc line="37">
                Value that will pass the precondition check for {@link BrentOptimizer}but will not pass the convergence check, so that the custom checker
                  will always decide when to stop the line search.                
            </javadoc>
            <declaration name="ABS_TOL_UNUSED" type="double" line="43"/>
            <javadoc line="43">
                Value that will pass the precondition check for {@link BrentOptimizer}but will not pass the convergence check, so that the custom checker
                  will always decide when to stop the line search.                
            </javadoc>
            <declaration name="lineOptimizer" type="UnivariateOptimizer" line="49"/>
            <javadoc line="49">
                Optimizer used for line search.                
            </javadoc>
            <declaration name="bracket" type="BracketFinder" line="53"/>
            <javadoc line="53">
                Automatic bracketing.                
            </javadoc>
            <declaration name="initialBracketingRange" type="double" line="57"/>
            <javadoc line="57">
                Extent of the initial interval used to find an interval that
                  brackets the optimum.                
            </javadoc>
            <declaration name="mainOptimizer" type="MultivariateOptimizer" line="62"/>
            <javadoc line="62">
                Optimizer on behalf of which the line search must be performed.                
            </javadoc>
            <javadoc line="67">
                The {@code BrentOptimizer} default stopping criterion uses the
                  tolerances to check the domain (point) values, not the function
                  values.
                  The {@code relativeTolerance} and {@code absoluteTolerance}arguments are thus passed to a {@link SimpleUnivariateValueCheckercustom checker} that will use the function values.                
                <param>
                    optimizer Optimizer on behalf of which the line search
                      be performed.
                      Its {@link MultivariateOptimizer#computeObjectiveValue(double[])computeObjectiveValue} method will be called by the{@link #search(double[],double[]) search} method.                    
                </param>
                <param>
                    relativeTolerance Search will stop when the function relative
                      difference between successive iterations is below this value.                    
                </param>
                <param>
                    absoluteTolerance Search will stop when the function absolute
                      difference between successive iterations is below this value.                    
                </param>
                <param>
                    initialBracketingRange Extent of the initial interval used to
                      find an interval that brackets the optimum.
                      If the optimized function varies a lot in the vicinity of the optimum,
                      it may be necessary to provide a value lower than the distance between
                      successive local minima.                    
                </param>
            </javadoc>
            <method name="LineSearch" type="constructor" line="93">
                <params>
                    <param name="optimizer" type="MultivariateOptimizer"/>
                    <param name="relativeTolerance" type="double"/>
                    <param name="absoluteTolerance" type="double"/>
                    <param name="initialBracketingRange" type="double"/>
                </params>
            </method>
            <javadoc line="102">
                Finds the number {@code alpha} that optimizes{@code f(startPoint + alpha  direction)}.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    direction Search direction.                    
                </param>
                <return>
                    the optimum.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the number of evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="search" type="UnivariatePointValuePair" line="113">
                <params>
                    <param name="startPoint" type="double[]"/>
                    <param name="direction" type="double[]"/>
                </params>
                <comment line="129">
                    Passing &quot;MAX_VALUE&quot; as a dummy value because it is the enclosing
                     class that counts the number of evaluations (and will eventually
                     generate the exception).                    
                </comment>
                <declaration name="n" type="int" line="114"/>
                <anonymous_class line="115">
                    <method name="value" type="double" line="116">
                        <params>
                            <param name="alpha" type="double"/>
                        </params>
                        <declaration name="x" type="double[]" line="117"/>
                        <scope line="118"/>
                        <declaration name="obj" type="double" line="121"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="115"/>
                <declaration name="goal" type="GoalType" line="126"/>
            </method>
        </class>
    </source>