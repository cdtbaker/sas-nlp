<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="org.apache.commons.math3.ode.EquationsMapper"/>
        <import package="org.apache.commons.math3.ode.sampling.AbstractStepInterpolator"/>
        <import package="org.apache.commons.math3.ode.sampling.StepInterpolator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="GraggBulirschStoerStepInterpolator" line="9">
            <extends class="AbstractStepInterpolator"/>
            <javadoc line="9">
                This class implements an interpolator for the Gragg-Bulirsch-Stoer
                  integrator.
                  &lt;p&gt;This interpolator compute dense output inside the last step
                  produced by a Gragg-Bulirsch-Stoer integrator.&lt;/p&gt;
                  &lt;p&gt;
                  This implementation is basically a reimplementation in Java of the
                  &lt;a
                  href=&quot;http://www.unige.ch/math/folks/hairer/prog/nonstiff/odex.f&quot;&gt;odex&lt;/a&gt;
                  fortran code by E. Hairer and G. Wanner. The redistribution policy
                  for this code is available &lt;a
                  href=&quot;http://www.unige.ch/~hairer/prog/licence.txt&quot;&gt;here&lt;/a&gt;, for
                  convenience, it is reproduced below.&lt;/p&gt;
                  &lt;/p&gt;
                  &lt;table border=&quot;0&quot; width=&quot;80%&quot; cellpadding=&quot;10&quot; align=&quot;center&quot; bgcolor=&quot;#E0E0E0&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;Copyright (c) 2004, Ernst Hairer&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;Redistribution and use in source and binary forms, with or
                  without modification, are permitted provided that the following
                  conditions are met:
                  &lt;ul&gt;
                  &lt;li&gt;Redistributions of source code must retain the above copyright
                  notice, this list of conditions and the following disclaimer.&lt;/li&gt;
                  &lt;li&gt;Redistributions in binary form must reproduce the above copyright
                  notice, this list of conditions and the following disclaimer in the
                  documentation and/or other materials provided with the distribution.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;strong&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
                  CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
                  BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
                  FOR A  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
                  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
                  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
                  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
                  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
                  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;                
                <see>
                    GraggBulirschStoerIntegrator                    
                </see>
                <version>
                    $Id: GraggBulirschStoerStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="52"/>
            <javadoc line="52">
                Serializable version identifier.                
            </javadoc>
            <declaration name="y0Dot" type="double[]" line="56"/>
            <javadoc line="56">
                Slope at the beginning of the step.                
            </javadoc>
            <declaration name="y1" type="double[]" line="60"/>
            <javadoc line="60">
                State at the end of the step.                
            </javadoc>
            <declaration name="y1Dot" type="double[]" line="64"/>
            <javadoc line="64">
                Slope at the end of the step.                
            </javadoc>
            <declaration name="yMidDots" type="double[][]" line="68"/>
            <javadoc line="68">
                Derivatives at the middle of the step.
                  element 0 is state at midpoint, element 1 is first derivative ...                
            </javadoc>
            <declaration name="polynomials" type="double[][]" line="73"/>
            <javadoc line="73">
                Interpolation polynomials.                
            </javadoc>
            <declaration name="errfac" type="double[]" line="77"/>
            <javadoc line="77">
                Error coefficients for the interpolation.                
            </javadoc>
            <declaration name="currentDegree" type="int" line="81"/>
            <javadoc line="81">
                Degree of the interpolation polynomials.                
            </javadoc>
            <javadoc line="85">
                Simple constructor.
                  This constructor should not be used directly, it is only intended
                  for the serialization process.                
            </javadoc>
            <method name="GraggBulirschStoerStepInterpolator" type="constructor" line="90"/>
            <javadoc line="97">
                Simple constructor.                
                <param>
                    y reference to the integrator array holding the current state                    
                </param>
                <param>
                    y0Dot reference to the integrator array holding the slope
                      at the beginning of the step                    
                </param>
                <param>
                    y1 reference to the integrator array holding the state at
                      the end of the step                    
                </param>
                <param>
                    y1Dot reference to the integrator array holding the slope
                      at the end of the step                    
                </param>
                <param>
                    yMidDots reference to the integrator array holding the
                      derivatives at the middle point of the step                    
                </param>
                <param>
                    forward integration direction indicator                    
                </param>
                <param>
                    primaryMapper equations mapper for the primary equations set                    
                </param>
                <param>
                    secondaryMappers equations mappers for the secondary equations sets                    
                </param>
            </javadoc>
            <method name="GraggBulirschStoerStepInterpolator" type="constructor" line="112">
                <params>
                    <param name="y" type="double[]"/>
                    <param name="y0Dot" type="double[]"/>
                    <param name="y1" type="double[]"/>
                    <param name="y1Dot" type="double[]"/>
                    <param name="yMidDots" type="double[][]"/>
                    <param name="forward" type="boolean"/>
                    <param name="primaryMapper" type="EquationsMapper"/>
                    <param name="secondaryMappers" type="EquationsMapper[]"/>
                </params>
            </method>
            <javadoc line="120">
                Copy constructor.                
                <param>
                    interpolator interpolator to copy from. The copy is a deep
                      copy: its arrays are separated from the original arrays of the
                      instance                    
                </param>
            </javadoc>
            <method name="GraggBulirschStoerStepInterpolator" type="constructor" line="126">
                <params>
                    <param name="interpolator" type="GraggBulirschStoerStepInterpolator"/>
                </params>
                <declaration name="dimension" type="int" line="128"/>
                <scope line="133"/>
                <scope line="137">
                    <scope line="139"/>
                </scope>
            </method>
            <javadoc line="146">
                Reallocate the internal tables.
                  Reallocate the internal tables in order to be able to handle
                  interpolation polynomials up to the given degree                
                <param>
                    maxDegree maximal degree to handle                    
                </param>
            </javadoc>
            <method name="resetTables" type="void" line="152">
                <params>
                    <param name="maxDegree" type="int"/>
                </params>
                <scope line="153"/>
                <scope line="158">
                    <declaration name="newPols" type="double[][]" line="159"/>
                    <scope line="160">
                        <scope line="162"/>
                    </scope>
                    <scope line="166">
                        <scope line="167"/>
                    </scope>
                    <scope line="172"/>
                    <scope line="175">
                        <scope line="177">
                            <declaration name="ip5" type="int" line="178"/>
                            <declaration name="e" type="double" line="180"/>
                            <scope line="181"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="189">
                {@inheritDoc}                
            </javadoc>
            <method name="doCopy" type="StepInterpolator" line="192"/>
            <javadoc line="195">
                Compute the interpolation coefficients for dense output.                
                <param>
                    mu degree of the interpolation polynomial                    
                </param>
                <param>
                    h current step                    
                </param>
            </javadoc>
            <method name="computeCoefficients" type="void" line="200">
                <params>
                    <param name="mu" type="int"/>
                    <param name="h" type="double"/>
                </params>
                <scope line="201"/>
                <scope line="205">
                    <declaration name="yp0" type="double" line="206"/>
                    <declaration name="yp1" type="double" line="207"/>
                    <declaration name="ydiff" type="double" line="208"/>
                    <declaration name="aspl" type="double" line="209"/>
                    <declaration name="bspl" type="double" line="210"/>
                    <scope line="215"/>
                    <declaration name="ph0" type="double" line="218"/>
                    <scope line="220">
                        <declaration name="ph1" type="double" line="221"/>
                        <scope line="223">
                            <declaration name="ph2" type="double" line="224"/>
                            <scope line="226">
                                <declaration name="ph3" type="double" line="227"/>
                                <scope line="229">
                                    <declaration name="fac1" type="double" line="230"/>
                                    <declaration name="fac2" type="double" line="231"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="239">
                Estimate interpolation error.                
                <param>
                    scale scaling array                    
                </param>
                <return>
                    estimate of the interpolation error                    
                </return>
            </javadoc>
            <method name="estimateError" type="double" line="244">
                <params>
                    <param name="scale" type="double[]"/>
                </params>
                <declaration name="error" type="double" line="245"/>
                <scope line="246">
                    <scope line="247">
                        <declaration name="e" type="double" line="248"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="255">
                {@inheritDoc}                
            </javadoc>
            <method name="computeInterpolatedStateAndDerivatives" type="void" line="258">
                <params>
                    <param name="theta" type="double"/>
                    <param name="oneMinusThetaH" type="double"/>
                </params>
                <declaration name="dimension" type="int" line="259"/>
                <declaration name="oneMinusTheta" type="double" line="260"/>
                <declaration name="theta05" type="double" line="261"/>
                <declaration name="tOmT" type="double" line="262"/>
                <declaration name="t4" type="double" line="263"/>
                <declaration name="t4Dot" type="double" line="264"/>
                <declaration name="dot1" type="double" line="265"/>
                <declaration name="dot2" type="double" line="266"/>
                <declaration name="dot3" type="double" line="267"/>
                <scope line="268">
                    <declaration name="p0" type="double" line="269"/>
                    <declaration name="p1" type="double" line="270"/>
                    <declaration name="p2" type="double" line="271"/>
                    <declaration name="p3" type="double" line="272"/>
                    <scope line="275">
                        <declaration name="cDot" type="double" line="276"/>
                        <declaration name="c" type="double" line="277"/>
                        <scope line="278">
                            <declaration name="d" type="double" line="279"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="287"/>
            </method>
            <javadoc line="291">
                {@inheritDoc}                
            </javadoc>
            <method name="writeExternal" type="void" line="294">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
                <declaration name="dimension" type="int" line="295"/>
                <scope line="298">
                    <scope line="299"/>
                </scope>
            </method>
            <javadoc line="304">
                {@inheritDoc}                
            </javadoc>
            <method name="readExternal" type="void" line="307">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
                <declaration name="t" type="double" line="308"/>
                <declaration name="dimension" type="int" line="309"/>
                <declaration name="degree" type="int" line="310"/>
                <scope line="313">
                    <scope line="314"/>
                </scope>
            </method>
        </class>
    </source>