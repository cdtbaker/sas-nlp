<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Beta"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="FDistribution" line="8">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="8">
                Implementation of the F-distribution.                
                <see>
                    <a href="http://en.wikipedia.org/wiki/F-distribution">F-distribution (Wikipedia)</a>                    
                </see>
                <see>
                    <a href="http://mathworld.wolfram.com/F-Distribution.html">F-distribution (MathWorld)</a>                    
                </see>
                <version>
                    $Id: FDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="15"/>
            <javadoc line="15">
                Default inverse cumulative probability accuracy.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="20"/>
            <javadoc line="20">
                Serializable version identifier.                
            </javadoc>
            <declaration name="numeratorDegreesOfFreedom" type="double" line="24"/>
            <javadoc line="24">
                The numerator degrees of freedom.                
            </javadoc>
            <declaration name="denominatorDegreesOfFreedom" type="double" line="28"/>
            <javadoc line="28">
                The numerator degrees of freedom.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="32"/>
            <javadoc line="32">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <declaration name="numericalVariance" type="double" line="36"/>
            <javadoc line="36">
                Cached numerical variance                
            </javadoc>
            <declaration name="numericalVarianceIsCalculated" type="boolean" line="40"/>
            <javadoc line="40">
                Whether or not the numerical variance has been calculated                
            </javadoc>
            <javadoc line="44">
                Creates an F distribution using the given degrees of freedom.                
                <param>
                    numeratorDegreesOfFreedom Numerator degrees of freedom.                    
                </param>
                <param>
                    denominatorDegreesOfFreedom Denominator degrees of freedom.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if{@code numeratorDegreesOfFreedom <= 0} or{@code denominatorDegreesOfFreedom <= 0}.                    
                </throws>
            </javadoc>
            <method name="FDistribution" type="constructor" line="50">
                <params>
                    <param name="numeratorDegreesOfFreedom" type="double"/>
                    <param name="denominatorDegreesOfFreedom" type="double"/>
                </params>
            </method>
            <javadoc line="53">
                Creates an F distribution using the given degrees of freedom
                  and inverse cumulative probability accuracy.                
                <param>
                    numeratorDegreesOfFreedom Numerator degrees of freedom.                    
                </param>
                <param>
                    denominatorDegreesOfFreedom Denominator degrees of freedom.                    
                </param>
                <param>
                    inverseCumAccuracy the maximum absolute error in inverse
                      cumulative probability estimates.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if{@code numeratorDegreesOfFreedom <= 0} or{@code denominatorDegreesOfFreedom <= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="FDistribution" type="constructor" line="63">
                <params>
                    <param name="numeratorDegreesOfFreedom" type="double"/>
                    <param name="denominatorDegreesOfFreedom" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="66">
                Creates an F distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    numeratorDegreesOfFreedom Numerator degrees of freedom.                    
                </param>
                <param>
                    denominatorDegreesOfFreedom Denominator degrees of freedom.                    
                </param>
                <param>
                    inverseCumAccuracy the maximum absolute error in inverse
                      cumulative probability estimates.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if{@code numeratorDegreesOfFreedom <= 0} or{@code denominatorDegreesOfFreedom <= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="FDistribution" type="constructor" line="76">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="numeratorDegreesOfFreedom" type="double"/>
                    <param name="denominatorDegreesOfFreedom" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
                <scope line="78"/>
                <scope line="81"/>
            </method>
            <javadoc line="88">
                {@inheritDoc}                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="density" type="double" line="92">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="nhalf" type="double" line="93"/>
                <declaration name="mhalf" type="double" line="94"/>
                <declaration name="logx" type="double" line="95"/>
                <declaration name="logn" type="double" line="96"/>
                <declaration name="logm" type="double" line="97"/>
                <declaration name="lognxm" type="double" line="98"/>
            </method>
            <javadoc line="101">
                {@inheritDoc}The implementation of this method is based on
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/F-Distribution.html&quot;&gt;
                  F-Distribution&lt;/a&gt;, equation (4).
                  &lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="110">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="ret" type="double" line="111"/>
                <scope line="112"/>
                <scope line="115">
                    <declaration name="n" type="double" line="116"/>
                    <declaration name="m" type="double" line="117"/>
                </scope>
            </method>
            <javadoc line="122">
                Access the numerator degrees of freedom.                
                <return>
                    the numerator degrees of freedom.                    
                </return>
            </javadoc>
            <method name="getNumeratorDegreesOfFreedom" type="double" line="126"/>
            <javadoc line="129">
                Access the denominator degrees of freedom.                
                <return>
                    the denominator degrees of freedom.                    
                </return>
            </javadoc>
            <method name="getDenominatorDegreesOfFreedom" type="double" line="133"/>
            <javadoc line="136">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="139"/>
            <javadoc line="142">
                {@inheritDoc}For denominator degrees of freedom parameter {@code b}, the mean is
                  &lt;ul&gt;
                  &lt;li&gt;if {@code b &gt; 2} then {@code b / (b - 2)},&lt;/li&gt;
                  &lt;li&gt;else undefined ({@code Double.NaN}).
                  &lt;/ul&gt;                
            </javadoc>
            <method name="getNumericalMean" type="double" line="149">
                <declaration name="denominatorDF" type="double" line="150"/>
                <scope line="151"/>
            </method>
            <javadoc line="156">
                {@inheritDoc}For numerator degrees of freedom parameter {@code a} and denominator
                  degrees of freedom parameter {@code b}, the variance is
                  &lt;ul&gt;
                  &lt;li&gt;
                  if {@code b &gt; 4} then{@code [2  b^2  (a + b - 2)] / [a  (b - 2)^2  (b - 4)]},
                  &lt;/li&gt;
                  &lt;li&gt;else undefined ({@code Double.NaN}).
                  &lt;/ul&gt;                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="166">
                <scope line="167"/>
            </method>
            <javadoc line="173">
                used by {@link #getNumericalVariance()}                
                <return>
                    the variance of this distribution                    
                </return>
            </javadoc>
            <method name="calculateNumericalVariance" type="double" line="177">
                <declaration name="denominatorDF" type="double" line="178"/>
                <scope line="179">
                    <declaration name="numeratorDF" type="double" line="180"/>
                    <declaration name="denomDFMinusTwo" type="double" line="181"/>
                </scope>
            </method>
            <javadoc line="186">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="190"/>
            <javadoc line="193">
                {@inheritDoc}The upper bound of the support is always positive infinity
                  no matter the parameters.                
                <return>
                    upper bound of the support (always Double.POSITIVE_INFINITY)                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="198"/>
            <javadoc line="201">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="204"/>
            <javadoc line="207">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="210"/>
            <javadoc line="213">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="217"/>
        </class>
    </source>