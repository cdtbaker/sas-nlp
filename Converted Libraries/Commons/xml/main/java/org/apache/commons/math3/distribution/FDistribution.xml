<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Beta"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="FDistribution" line="27">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="27">
                Implementation of the F-distribution.                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/F-distribution&quot;&gt;F-distribution (Wikipedia)&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/F-Distribution.html&quot;&gt;F-distribution (MathWorld)&lt;/a&gt;                    
                </see>
                <version>
                    $Id: FDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="35"/>
            <javadoc line="35">
                Default inverse cumulative probability accuracy.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="40"/>
            <javadoc line="40">
                Serializable version identifier.                
            </javadoc>
            <declaration name="numeratorDegreesOfFreedom" type="double" line="42"/>
            <javadoc line="42">
                The numerator degrees of freedom.                
            </javadoc>
            <declaration name="denominatorDegreesOfFreedom" type="double" line="44"/>
            <javadoc line="44">
                The numerator degrees of freedom.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="46"/>
            <javadoc line="46">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <declaration name="numericalVariance" type="double" line="48"/>
            <javadoc line="48">
                Cached numerical variance                
            </javadoc>
            <declaration name="numericalVarianceIsCalculated" type="boolean" line="50"/>
            <javadoc line="50">
                Whether or not the numerical variance has been calculated                
            </javadoc>
            <javadoc line="53">
                Creates an F distribution using the given degrees of freedom.                
                <param>
                    numeratorDegreesOfFreedom Numerator degrees of freedom.                    
                </param>
                <param>
                    denominatorDegreesOfFreedom Denominator degrees of freedom.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if{@code numeratorDegreesOfFreedom &lt;= 0} or{@code denominatorDegreesOfFreedom &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="FDistribution" type="constructor" line="64">
                <params>
                    <param name="numeratorDegreesOfFreedom" type="double"/>
                    <param name="denominatorDegreesOfFreedom" type="double"/>
                </params>
            </method>
            <javadoc line="69">
                Creates an F distribution using the given degrees of freedom
                  and inverse cumulative probability accuracy.                
                <param>
                    numeratorDegreesOfFreedom Numerator degrees of freedom.                    
                </param>
                <param>
                    denominatorDegreesOfFreedom Denominator degrees of freedom.                    
                </param>
                <param>
                    inverseCumAccuracy the maximum absolute error in inverse
                      cumulative probability estimates.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if{@code numeratorDegreesOfFreedom &lt;= 0} or{@code denominatorDegreesOfFreedom &lt;= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="FDistribution" type="constructor" line="85">
                <params>
                    <param name="numeratorDegreesOfFreedom" type="double"/>
                    <param name="denominatorDegreesOfFreedom" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="90">
                Creates an F distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    numeratorDegreesOfFreedom Numerator degrees of freedom.                    
                </param>
                <param>
                    denominatorDegreesOfFreedom Denominator degrees of freedom.                    
                </param>
                <param>
                    inverseCumAccuracy the maximum absolute error in inverse
                      cumulative probability estimates.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if{@code numeratorDegreesOfFreedom &lt;= 0} or{@code denominatorDegreesOfFreedom &lt;= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="FDistribution" type="constructor" line="107">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="numeratorDegreesOfFreedom" type="double"/>
                    <param name="denominatorDegreesOfFreedom" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
                <scope line="110"/>
                <scope line="114"/>
            </method>
            <javadoc line="123">
                {@inheritDoc}                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="density" type="double" line="128">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="nhalf" type="double" line="129"/>
                <declaration name="mhalf" type="double" line="130"/>
                <declaration name="logx" type="double" line="131"/>
                <declaration name="logn" type="double" line="132"/>
                <declaration name="logm" type="double" line="133"/>
                <declaration name="lognxm" type="double" line="134"/>
            </method>
            <javadoc line="141">
                {@inheritDoc}The implementation of this method is based on
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/F-Distribution.html&quot;&gt;
                  F-Distribution&lt;/a&gt;, equation (4).
                  &lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="152">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="ret" type="double" line="153"/>
                <scope line="154"/>
                <scope line="156">
                    <declaration name="n" type="double" line="157"/>
                    <declaration name="m" type="double" line="158"/>
                </scope>
            </method>
            <javadoc line="167">
                Access the numerator degrees of freedom.                
                <return>
                    the numerator degrees of freedom.                    
                </return>
            </javadoc>
            <method name="getNumeratorDegreesOfFreedom" type="double" line="172"/>
            <javadoc line="176">
                Access the denominator degrees of freedom.                
                <return>
                    the denominator degrees of freedom.                    
                </return>
            </javadoc>
            <method name="getDenominatorDegreesOfFreedom" type="double" line="181"/>
            <javadoc line="185">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="187"/>
            <javadoc line="191">
                {@inheritDoc}For denominator degrees of freedom parameter {@code b}, the mean is
                  &lt;ul&gt;
                  &lt;li&gt;if {@code b &gt; 2} then {@code b / (b - 2)},&lt;/li&gt;
                  &lt;li&gt;else undefined ({@code Double.NaN}).
                  &lt;/ul&gt;                
            </javadoc>
            <method name="getNumericalMean" type="double" line="200">
                <declaration name="denominatorDF" type="double" line="201"/>
                <scope line="203"/>
            </method>
            <javadoc line="210">
                {@inheritDoc}For numerator degrees of freedom parameter {@code a} and denominator
                  degrees of freedom parameter {@code b}, the variance is
                  &lt;ul&gt;
                  &lt;li&gt;
                  if {@code b &gt; 4} then{@code [2  b^2  (a + b - 2)] / [a  (b - 2)^2  (b - 4)]},
                  &lt;/li&gt;
                  &lt;li&gt;else undefined ({@code Double.NaN}).
                  &lt;/ul&gt;                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="223">
                <scope line="224"/>
            </method>
            <javadoc line="231">
                used by {@link #getNumericalVariance()}                
                <return>
                    the variance of this distribution                    
                </return>
            </javadoc>
            <method name="calculateNumericalVariance" type="double" line="236">
                <declaration name="denominatorDF" type="double" line="237"/>
                <scope line="239">
                    <declaration name="numeratorDF" type="double" line="240"/>
                    <declaration name="denomDFMinusTwo" type="double" line="241"/>
                </scope>
            </method>
            <javadoc line="250">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="257"/>
            <javadoc line="261">
                {@inheritDoc}The upper bound of the support is always positive infinity
                  no matter the parameters.                
                <return>
                    upper bound of the support (always Double.POSITIVE_INFINITY)                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="269"/>
            <javadoc line="273">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="274"/>
            <javadoc line="278">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="279"/>
            <javadoc line="283">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="290"/>
        </class>
    </source>