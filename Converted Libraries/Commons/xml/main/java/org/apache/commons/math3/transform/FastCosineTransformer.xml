<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="FastCosineTransformer" line="10">
            <implements interface="RealTransformer"/>
            <implements interface="Serializable"/>
            <javadoc line="10">
                Implements the Fast Cosine Transform for transformation of one-dimensional
                  real data sets. For reference, see James S. Walker, &lt;em&gt;Fast Fourier
                  Transforms&lt;/em&gt;, chapter 3 (ISBN 0849371635).
                  &lt;p&gt;
                  There are several variants of the discrete cosine transform. The present
                  implementation corresponds to DCT-I, with various normalization conventions,
                  which are specified by the parameter {@link DctNormalization}.
                  &lt;p&gt;
                  DCT-I is equivalent to DFT of an &lt;em&gt;even extension&lt;/em&gt; of the data series.
                  More precisely, if x&lt;sub&gt;0&lt;/sub&gt;, &amp;hellip;, x&lt;sub&gt;N-1&lt;/sub&gt; is the data set
                  to be cosine transformed, the extended data set
                  x&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt;, &amp;hellip;, x&lt;sub&gt;2N-3&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt;
                  is defined as follows
                  &lt;ul&gt;
                  &lt;li&gt;x&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; = x&lt;sub&gt;k&lt;/sub&gt; if 0 &amp;le; k &amp;lt; N,&lt;/li&gt;
                  &lt;li&gt;x&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; = x&lt;sub&gt;2N-2-k&lt;/sub&gt;
                  if N &amp;le; k &amp;lt; 2N - 2.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Then, the standard DCT-I y&lt;sub&gt;0&lt;/sub&gt;, &amp;hellip;, y&lt;sub&gt;N-1&lt;/sub&gt; of the real
                  data set x&lt;sub&gt;0&lt;/sub&gt;, &amp;hellip;, x&lt;sub&gt;N-1&lt;/sub&gt; is equal to &lt;em&gt;half&lt;/em&gt;
                  of the N first elements of the DFT of the extended data set
                  x&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt;, &amp;hellip;, x&lt;sub&gt;2N-3&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt;
                  &lt;br/&gt;
                  y&lt;sub&gt;n&lt;/sub&gt; = (1 / 2) &amp;sum;&lt;sub&gt;k=0&lt;/sub&gt;&lt;sup&gt;2N-3&lt;/sup&gt;
                  x&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; exp[-2&amp;pi;i nk / (2N - 2)]
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;k = 0, &amp;hellip;, N-1.
                  &lt;p&gt;
                  The present implementation of the discrete cosine transform as a fast cosine
                  transform requires the length of the data set to be a power of two plus one
                  (N&amp;nbsp;=&amp;nbsp;2&lt;sup&gt;n&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;1). Besides, it implicitly assumes
                  that the sampled function is even.                
                <version>
                    $Id: FastCosineTransformer.java 1385310 2012-09-16 16:32:10Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="47"/>
            <javadoc line="47">
                Serializable version identifier.                
            </javadoc>
            <declaration name="normalization" type="DctNormalization" line="51"/>
            <javadoc line="51">
                The type of DCT to be performed.                
            </javadoc>
            <javadoc line="55">
                Creates a new instance of this class, with various normalization
                  conventions.                
                <param>
                    normalization the type of normalization to be applied to the
                      transformed data                    
                </param>
            </javadoc>
            <method name="FastCosineTransformer" type="constructor" line="61">
                <params>
                    <param name="normalization" type="DctNormalization"/>
                </params>
            </method>
            <javadoc line="64">
                {@inheritDoc}                
                <throws>
                    MathIllegalArgumentException if the length of the data array is
                      not a power of two plus one                    
                </throws>
            </javadoc>
            <method name="transform" type="double[]" line="69">
                <params>
                    <param name="f" type="double[]"/>
                    <param name="type" type="TransformType"/>
                </params>
                <scope line="70">
                    <scope line="71">
                        <declaration name="s" type="double" line="72"/>
                    </scope>
                </scope>
                <declaration name="s2" type="double" line="77"/>
                <declaration name="s1" type="double" line="78"/>
                <scope line="79"/>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                {@inheritDoc}                
                <throws>
                    org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif the lower bound is greater than, or equal to the upper bound                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the number of sample points is negative                    
                </throws>
                <throws>
                    MathIllegalArgumentException if the number of sample points is
                      not a power of two plus one                    
                </throws>
            </javadoc>
            <method name="transform" type="double[]" line="94">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="n" type="int"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="data" type="double[]" line="95"/>
            </method>
            <javadoc line="98">
                Perform the FCT algorithm (including inverse).                
                <param>
                    f the real data array to be transformed                    
                </param>
                <return>
                    the real transformed array                    
                </return>
                <throws>
                    MathIllegalArgumentException if the length of the data array is
                      not a power of two plus one                    
                </throws>
            </javadoc>
            <method name="fct" type="double[]" line="105">
                <params>
                    <param name="f" type="double[]"/>
                </params>
                <declaration name="transformed" type="double[]" line="106"/>
                <declaration name="n" type="int" line="107"/>
                <scope line="108"/>
                <scope line="111"/>
                <declaration name="x" type="double[]" line="116"/>
                <declaration name="t1" type="double" line="119"/>
                <scope line="120">
                    <declaration name="a" type="double" line="121"/>
                    <declaration name="b" type="double" line="122"/>
                    <declaration name="c" type="double" line="123"/>
                </scope>
                <declaration name="transformer" type="FastFourierTransformer" line="128"/>
                <declaration name="y" type="Complex[]" line="130"/>
                <scope line="133"/>
            </method>
        </class>
    </source>