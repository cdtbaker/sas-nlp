<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="ArrayFieldVector" line="36">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="FieldVector">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="36">
                This class implements the {@link FieldVector} interface with a {@link FieldElement} array.                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <version>
                    $Id: ArrayFieldVector.java 1570536 2014-02-21 11:26:09Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="43">
                Serializable version identifier.                
            </javadoc>
            <declaration name="data" type="T[]" line="46"/>
            <javadoc line="46">
                Entries of the vector.                
            </javadoc>
            <declaration name="field" type="Field&amp;lt;T&amp;gt;" line="49"/>
            <javadoc line="49">
                Field to which the elements belong.                
            </javadoc>
            <javadoc line="52">
                Build a 0-length vector.
                  Zero-length vectors may be used to initialize construction of vectors
                  by data gathering. We start with zero-length and use either the {@link #ArrayFieldVector(ArrayFieldVector,ArrayFieldVector)} constructor
                  or one of the {@code append} methods ({@link #add(FieldVector)} or{@link #append(ArrayFieldVector)}) to gather data into this vector.                
                <param>
                    field field to which the elements belong                    
                </param>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="62">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="66">
                Construct a vector of zeroes.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    size Size of the vector.                    
                </param>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="72">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="77">
                Construct a vector with preset values.                
                <param>
                    size Size of the vector.                    
                </param>
                <param>
                    preset All entries will be set with this value.                    
                </param>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="83">
                <params>
                    <param name="size" type="int"/>
                    <param name="preset" type="T"/>
                </params>
            </method>
            <javadoc line="88">
                Construct a vector from an array, copying the input array.
                  This constructor needs a non-empty {@code d} array to retrieve
                  the field from its first element. This implies it cannot build
                  0 length vectors. To build vectors from any size, one should
                  use the {@link #ArrayFieldVector(Field,FieldElement[])} constructor.                
                <param>
                    d Array.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    ZeroException if {@code d} is empty.                    
                </throws>
                <see>
                    #ArrayFieldVector(Field,FieldElement[])                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="101">
                <params>
                    <param name="d" type="T[]"/>
                </params>
                <scope line="103"/>
                <scope line="106"/>
            </method>
            <javadoc line="111">
                Construct a vector from an array, copying the input array.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    d Array.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #ArrayFieldVector(FieldElement[])                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="120">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="d" type="T[]"/>
                </params>
            </method>
            <javadoc line="126">
                Create a new ArrayFieldVector using the input array as the underlying
                  data array.
                  If an array is built specially in order to be embedded in a
                  ArrayFieldVector and not used directly, the {@code copyArray} may be
                  set to {@code false}. This will prevent the copying and improve
                  performance as no new array will be built and no data will be copied.
                  This constructor needs a non-empty {@code d} array to retrieve
                  the field from its first element. This implies it cannot build
                  0 length vectors. To build vectors from any size, one should
                  use the {@link #ArrayFieldVector(Field,FieldElement[],boolean)}constructor.                
                <param>
                    d Data for the new vector.                    
                </param>
                <param>
                    copyArray If {@code true}, the input array will be copied,
                      otherwise it will be referenced.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    ZeroException if {@code d} is empty.                    
                </throws>
                <see>
                    #ArrayFieldVector(FieldElement[])                    
                </see>
                <see>
                    #ArrayFieldVector(Field,FieldElement[],boolean)                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="148">
                <params>
                    <param name="d" type="T[]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
                <scope line="150"/>
            </method>
            <javadoc line="157">
                Create a new ArrayFieldVector using the input array as the underlying
                  data array.
                  If an array is built specially in order to be embedded in a
                  ArrayFieldVector and not used directly, the {@code copyArray} may be
                  set to {@code false}. This will prevent the copying and improve
                  performance as no new array will be built and no data will be copied.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    d Data for the new vector.                    
                </param>
                <param>
                    copyArray If {@code true}, the input array will be copied,
                      otherwise it will be referenced.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #ArrayFieldVector(FieldElement[],boolean)                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="173">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="d" type="T[]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
            </method>
            <javadoc line="179">
                Construct a vector from part of a array.                
                <param>
                    d Array.                    
                </param>
                <param>
                    pos Position of the first entry.                    
                </param>
                <param>
                    size Number of entries to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if the size of {@code d} is less
                      than {@code pos + size}.                    
                </throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="190">
                <params>
                    <param name="d" type="T[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="192"/>
            </method>
            <javadoc line="200">
                Construct a vector from part of a array.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    d Array.                    
                </param>
                <param>
                    pos Position of the first entry.                    
                </param>
                <param>
                    size Number of entries to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if the size of {@code d} is less
                      than {@code pos + size}.                    
                </throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="212">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="d" type="T[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="214"/>
            </method>
            <javadoc line="222">
                Construct a vector from another vector, using a deep copy.                
                <param>
                    v Vector to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code v} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="229">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="233"/>
            </method>
            <javadoc line="238">
                Construct a vector from another vector, using a deep copy.                
                <param>
                    v Vector to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code v} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="245">
                <params>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="251">
                Construct a vector from another vector.                
                <param>
                    v Vector to copy.                    
                </param>
                <param>
                    deep If {@code true} perform a deep copy, otherwise perform
                      a shallow copy                    
                </param>
                <throws>
                    NullArgumentException if {@code v} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="260">
                <params>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="266">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <deprecated>
                    as of 3.2, replaced by {@link #ArrayFieldVector(FieldVector,FieldVector)}                    
                </deprecated>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="277">
                <params>
                    <param name="v1" type="ArrayFieldVector&lt;T&gt;"/>
                    <param name="v2" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="281">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="291">
                <params>
                    <param name="v1" type="FieldVector&lt;T&gt;"/>
                    <param name="v2" type="FieldVector&lt;T&gt;"/>
                </params>
                <declaration name="v1Data" type="T[]" line="295"/>
                <declaration name="v2Data" type="T[]" line="297"/>
            </method>
            <javadoc line="304">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <deprecated>
                    as of 3.2, replaced by {@link #ArrayFieldVector(FieldVector,FieldElement[])}                    
                </deprecated>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="315">
                <params>
                    <param name="v1" type="ArrayFieldVector&lt;T&gt;"/>
                    <param name="v2" type="T[]"/>
                </params>
            </method>
            <javadoc line="319">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="329">
                <params>
                    <param name="v1" type="FieldVector&lt;T&gt;"/>
                    <param name="v2" type="T[]"/>
                </params>
                <declaration name="v1Data" type="T[]" line="333"/>
            </method>
            <javadoc line="340">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <deprecated>
                    as of 3.2, replaced by {@link #ArrayFieldVector(FieldElement[],FieldVector)}                    
                </deprecated>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="351">
                <params>
                    <param name="v1" type="T[]"/>
                    <param name="v2" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="355">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="365">
                <params>
                    <param name="v1" type="T[]"/>
                    <param name="v2" type="FieldVector&lt;T&gt;"/>
                </params>
                <declaration name="v2Data" type="T[]" line="369"/>
            </method>
            <javadoc line="376">
                Construct a vector by appending one vector to another vector.
                  This constructor needs at least one non-empty array to retrieve
                  the field from its first element. This implies it cannot build
                  0 length vectors. To build vectors from any size, one should
                  use the {@link #ArrayFieldVector(Field,FieldElement[],FieldElement[])}constructor.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <throws>
                    ZeroException if both arrays are empty.                    
                </throws>
                <see>
                    #ArrayFieldVector(Field,FieldElement[],FieldElement[])                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="392">
                <params>
                    <param name="v1" type="T[]"/>
                    <param name="v2" type="T[]"/>
                </params>
                <scope line="395"/>
            </method>
            <javadoc line="404">
                Construct a vector by appending one vector to another vector.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <throws>
                    ZeroException if both arrays are empty.                    
                </throws>
                <see>
                    #ArrayFieldVector(FieldElement[],FieldElement[])                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="416">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="v1" type="T[]"/>
                    <param name="v2" type="T[]"/>
                </params>
                <scope line="419"/>
            </method>
            <javadoc line="428">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="Field&lt;T&gt;" line="429"/>
            <javadoc line="433">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="FieldVector&lt;T&gt;" line="434"/>
            <javadoc line="438">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="FieldVector&lt;T&gt;" line="440">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="441"/>
                <scope line="443">
                    <declaration name="out" type="T[]" line="445"/>
                    <scope line="446"/>
                </scope>
            </method>
            <javadoc line="453">
                Compute the sum of {@code this} and {@code v}.                
                <param>
                    v vector to be added                    
                </param>
                <return>
                    {@code this + v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
            </javadoc>
            <method name="add" type="ArrayFieldVector&lt;T&gt;" line="461">
                <params>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
                <declaration name="out" type="T[]" line="463"/>
                <scope line="464"/>
            </method>
            <javadoc line="470">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="FieldVector&lt;T&gt;" line="472">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="473"/>
                <scope line="475">
                    <declaration name="out" type="T[]" line="477"/>
                    <scope line="478"/>
                </scope>
            </method>
            <javadoc line="485">
                Compute {@code this} minus {@code v}.                
                <param>
                    v vector to be subtracted                    
                </param>
                <return>
                    {@code this - v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
            </javadoc>
            <method name="subtract" type="ArrayFieldVector&lt;T&gt;" line="493">
                <params>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
                <declaration name="out" type="T[]" line="495"/>
                <scope line="496"/>
            </method>
            <javadoc line="502">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAdd" type="FieldVector&lt;T&gt;" line="503">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="out" type="T[]" line="504"/>
                <scope line="505"/>
            </method>
            <javadoc line="511">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="FieldVector&lt;T&gt;" line="512">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="513"/>
            </method>
            <javadoc line="519">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtract" type="FieldVector&lt;T&gt;" line="520">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="out" type="T[]" line="521"/>
                <scope line="522"/>
            </method>
            <javadoc line="528">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtractToSelf" type="FieldVector&lt;T&gt;" line="529">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="530"/>
            </method>
            <javadoc line="536">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiply" type="FieldVector&lt;T&gt;" line="537">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="out" type="T[]" line="538"/>
                <scope line="539"/>
            </method>
            <javadoc line="545">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiplyToSelf" type="FieldVector&lt;T&gt;" line="546">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="547"/>
            </method>
            <javadoc line="553">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivide" type="FieldVector&lt;T&gt;" line="555">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="out" type="T[]" line="557"/>
                <scope line="558"/>
            </method>
            <javadoc line="564">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivideToSelf" type="FieldVector&lt;T&gt;" line="566">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="568"/>
            </method>
            <javadoc line="574">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInv" type="FieldVector&lt;T&gt;" line="575">
                <declaration name="out" type="T[]" line="576"/>
                <declaration name="one" type="T" line="577"/>
                <scope line="578">
                    <scope line="579"/>
                    <scope line="581"/>
                </scope>
            </method>
            <javadoc line="588">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInvToSelf" type="FieldVector&lt;T&gt;" line="589">
                <declaration name="one" type="T" line="590"/>
                <scope line="591">
                    <scope line="592"/>
                    <scope line="594"/>
                </scope>
            </method>
            <javadoc line="601">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="FieldVector&lt;T&gt;" line="603">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="604"/>
                <scope line="606">
                    <declaration name="out" type="T[]" line="608"/>
                    <scope line="609"/>
                </scope>
            </method>
            <javadoc line="616">
                Element-by-element multiplication.                
                <param>
                    v vector by which instance elements must be multiplied                    
                </param>
                <return>
                    a vector containing {@code this[i]  v[i]} for all {@code i}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
            </javadoc>
            <method name="ebeMultiply" type="ArrayFieldVector&lt;T&gt;" line="624">
                <params>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
                <declaration name="out" type="T[]" line="626"/>
                <scope line="627"/>
            </method>
            <javadoc line="633">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="FieldVector&lt;T&gt;" line="635">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="636"/>
                <scope line="638">
                    <declaration name="out" type="T[]" line="640"/>
                    <scope line="641">
                        <scope line="642"/>
                        <scope line="644"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="652">
                Element-by-element division.                
                <param>
                    v vector by which instance elements must be divided                    
                </param>
                <return>
                    a vector containing {@code this[i] / v[i]} for all {@code i}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
                <throws>
                    MathArithmeticException if one entry of {@code v} is zero.                    
                </throws>
            </javadoc>
            <method name="ebeDivide" type="ArrayFieldVector&lt;T&gt;" line="661">
                <params>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
                <declaration name="out" type="T[]" line="663"/>
                <scope line="664">
                    <scope line="665"/>
                    <scope line="667"/>
                </scope>
            </method>
            <javadoc line="674">
                {@inheritDoc}                
            </javadoc>
            <method name="getData" type="T[]" line="675"/>
            <javadoc line="679">
                Returns a reference to the underlying data array.
                  &lt;p&gt;Does not make a fresh copy of the underlying data.&lt;/p&gt;                
                <return>
                    array of entries                    
                </return>
            </javadoc>
            <method name="getDataRef" type="T[]" line="684"/>
            <javadoc line="688">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="T" line="690">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="691"/>
                <scope line="693">
                    <declaration name="dot" type="T" line="695"/>
                    <scope line="696"/>
                </scope>
            </method>
            <javadoc line="703">
                Compute the dot product.                
                <param>
                    v vector with which dot product should be computed                    
                </param>
                <return>
                    the scalar dot product of {@code this} and {@code v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
            </javadoc>
            <method name="dotProduct" type="T" line="711">
                <params>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
                <declaration name="dot" type="T" line="713"/>
                <scope line="714"/>
            </method>
            <javadoc line="720">
                {@inheritDoc}                
            </javadoc>
            <method name="projection" type="FieldVector&lt;T&gt;" line="722">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="726">
                Find the orthogonal projection of this vector onto another vector.                
                <param>
                    v vector onto which {@code this} must be projected                    
                </param>
                <return>
                    projection of {@code this} onto {@code v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
                <throws>
                    MathArithmeticException if {@code v} is the null vector.                    
                </throws>
            </javadoc>
            <method name="projection" type="ArrayFieldVector&lt;T&gt;" line="734">
                <params>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="738">
                {@inheritDoc}                
            </javadoc>
            <method name="outerProduct" type="FieldMatrix&lt;T&gt;" line="739">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="740"/>
                <scope line="742">
                    <declaration name="m" type="int" line="743"/>
                    <declaration name="n" type="int" line="744"/>
                    <declaration name="out" type="FieldMatrix&amp;lt;T&amp;gt;" line="745"/>
                    <scope line="746">
                        <scope line="747"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="755">
                Compute the outer product.                
                <param>
                    v vector with which outer product should be computed                    
                </param>
                <return>
                    the matrix outer product between instance and v                    
                </return>
            </javadoc>
            <method name="outerProduct" type="FieldMatrix&lt;T&gt;" line="760">
                <params>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
                <declaration name="m" type="int" line="761"/>
                <declaration name="n" type="int" line="762"/>
                <declaration name="out" type="FieldMatrix&amp;lt;T&amp;gt;" line="763"/>
                <scope line="764">
                    <scope line="765"/>
                </scope>
            </method>
            <javadoc line="772">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="T" line="773">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="777">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="778"/>
            <javadoc line="782">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="FieldVector&lt;T&gt;" line="783">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="784"/>
                <scope line="786"/>
            </method>
            <javadoc line="791">
                Construct a vector by appending a vector to this vector.                
                <param>
                    v vector to append to this one.                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="append" type="ArrayFieldVector&lt;T&gt;" line="796">
                <params>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="800">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="FieldVector&lt;T&gt;" line="801">
                <params>
                    <param name="in" type="T"/>
                </params>
                <declaration name="out" type="T[]" line="802"/>
            </method>
            <javadoc line="808">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="FieldVector&lt;T&gt;" line="810">
                <params>
                    <param name="index" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="811"/>
                <declaration name="out" type="ArrayFieldVector&amp;lt;T&amp;gt;" line="814"/>
                <scope line="815"/>
                <scope line="817"/>
            </method>
            <javadoc line="824">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="825">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="T"/>
                </params>
                <scope line="826"/>
                <scope line="828"/>
            </method>
            <javadoc line="833">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="834">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="835">
                    <scope line="836"/>
                    <scope line="838">
                        <scope line="839"/>
                    </scope>
                </scope>
                <scope line="843"/>
            </method>
            <javadoc line="849">
                Set a set of consecutive elements.                
                <param>
                    index index of first element to be set.                    
                </param>
                <param>
                    v vector containing the values to set.                    
                </param>
                <throws>
                    OutOfRangeException if the index is invalid.                    
                </throws>
            </javadoc>
            <method name="set" type="void" line="856">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="ArrayFieldVector&lt;T&gt;"/>
                </params>
                <scope line="857"/>
                <scope line="859"/>
            </method>
            <javadoc line="865">
                {@inheritDoc}                
            </javadoc>
            <method name="set" type="void" line="866">
                <params>
                    <param name="value" type="T"/>
                </params>
            </method>
            <javadoc line="870">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="T[]" line="871"/>
            <javadoc line="875">
                Check if instance and specified vectors have the same dimension.                
                <param>
                    v vector to compare instance with                    
                </param>
                <exception>
                    DimensionMismatchException if the vectors do not
                      have the same dimensions                    
                </exception>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="882">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="886">
                Check if instance dimension is equal to some expected value.                
                <param>
                    n Expected dimension.                    
                </param>
                <throws>
                    DimensionMismatchException if the dimension is not equal to the
                      size of {@code this} vector.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="894">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="895"/>
            </method>
            <javadoc line="900">
                Visits (but does not alter) all entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor the visitor to be used to process the entries of this
                      vector                    
                </param>
                <return>
                    the value returned by {@link FieldVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="T" line="910">
                <params>
                    <param name="visitor" type="FieldVectorPreservingVisitor&lt;T&gt;"/>
                </params>
                <declaration name="dim" type="int" line="911"/>
                <scope line="913"/>
            </method>
            <javadoc line="919">
                Visits (but does not alter) some entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link FieldVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="T" line="934">
                <params>
                    <param name="visitor" type="FieldVectorPreservingVisitor&lt;T&gt;"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="937"/>
            </method>
            <javadoc line="943">
                Visits (but does not alter) all entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor the visitor to be used to process the entries of this
                      vector                    
                </param>
                <return>
                    the value returned by {@link FieldVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="955">
                <params>
                    <param name="visitor" type="FieldVectorPreservingVisitor&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="959">
                Visits (but does not alter) some entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link FieldVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="976">
                <params>
                    <param name="visitor" type="FieldVectorPreservingVisitor&lt;T&gt;"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="980">
                Visits (and possibly alters) all entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor the visitor to be used to process and modify the entries
                      of this vector                    
                </param>
                <return>
                    the value returned by {@link FieldVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="T" line="990">
                <params>
                    <param name="visitor" type="FieldVectorChangingVisitor&lt;T&gt;"/>
                </params>
                <declaration name="dim" type="int" line="991"/>
                <scope line="993"/>
            </method>
            <javadoc line="999">
                Visits (and possibly alters) some entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link FieldVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="T" line="1014">
                <params>
                    <param name="visitor" type="FieldVectorChangingVisitor&lt;T&gt;"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="1017"/>
            </method>
            <javadoc line="1023">
                Visits (and possibly alters) all entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor the visitor to be used to process the entries of this
                      vector                    
                </param>
                <return>
                    the value returned by {@link FieldVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="1035">
                <params>
                    <param name="visitor" type="FieldVectorChangingVisitor&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="1039">
                Visits (and possibly change) some entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link FieldVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="1056">
                <params>
                    <param name="visitor" type="FieldVectorChangingVisitor&lt;T&gt;"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="1060">
                Test for the equality of two vectors.                
                <param>
                    other Object to test for equality.                    
                </param>
                <return>
                    {@code true} if two vector objects are equal, {@code false}otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1068">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <comment line="1078">
                    May fail, but we ignore ClassCastException                    
                </comment>
                <comment line="1091">
                    ignore exception                    
                </comment>
                <scope line="1069"/>
                <scope line="1072"/>
                <scope line="1076">
                    <declaration name="rhs" type="FieldVector&amp;lt;T&amp;gt;" line="1077"/>
                    <scope line="1079"/>
                    <scope line="1083">
                        <scope line="1084"/>
                    </scope>
                </scope>
                <scope line="1089"/>
            </method>
            <javadoc line="1095">
                Get a hashCode for the real vector.
                  &lt;p&gt;All NaN values have the same hash code.&lt;/p&gt;                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="1101">
                <declaration name="h" type="int" line="1102"/>
                <scope line="1103"/>
            </method>
            <javadoc line="1109">
                Check if an index is valid.                
                <param>
                    index Index to check.                    
                </param>
                <exception>
                    OutOfRangeException if the index is not valid.                    
                </exception>
            </javadoc>
            <method name="checkIndex" type="void" line="1115">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="1116"/>
            </method>
            <javadoc line="1122">
                Checks that the indices of a subvector are valid.                
                <param>
                    start the index of the first entry of the subvector                    
                </param>
                <param>
                    end the index of the last entry of the subvector (inclusive)                    
                </param>
                <throws>
                    OutOfRangeException if {@code start} of {@code end} are not valid                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="checkIndices" type="void" line="1132">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="dim" type="int" line="1133"/>
                <scope line="1134"/>
                <scope line="1138"/>
                <scope line="1142"/>
            </method>
        </class>
    </source>