<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="ArrayFieldVector" line="16">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="FieldVector">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="16">
                This class implements the {@link FieldVector} interface with a {@link FieldElement} array.                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <version>
                    $Id: ArrayFieldVector.java 1462423 2013-03-29 07:25:18Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="24"/>
            <javadoc line="24">
                Serializable version identifier.                
            </javadoc>
            <declaration name="data" type="T[]" line="28"/>
            <javadoc line="28">
                Entries of the vector.                
            </javadoc>
            <declaration name="field" type="Field&lt;T&gt;" line="32"/>
            <javadoc line="32">
                Field to which the elements belong.                
            </javadoc>
            <javadoc line="36">
                Build a 0-length vector.
                  Zero-length vectors may be used to initialize construction of vectors
                  by data gathering. We start with zero-length and use either the {@link #ArrayFieldVector(ArrayFieldVector,ArrayFieldVector)} constructor
                  or one of the {@code append} methods ({@link #add(FieldVector)} or{@link #append(ArrayFieldVector)}) to gather data into this vector.                
                <param>
                    field field to which the elements belong                    
                </param>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="43">
                <params>
                    <param name="field" type="Field<T>"/>
                </params>
            </method>
            <javadoc line="46">
                Construct a vector of zeroes.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    size Size of the vector.                    
                </param>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="51">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="55">
                Construct a vector with preset values.                
                <param>
                    size Size of the vector.                    
                </param>
                <param>
                    preset All entries will be set with this value.                    
                </param>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="60">
                <params>
                    <param name="size" type="int"/>
                    <param name="preset" type="T"/>
                </params>
            </method>
            <javadoc line="64">
                Construct a vector from an array, copying the input array.
                  This constructor needs a non-empty {@code d} array to retrieve
                  the field from its first element. This implies it cannot build
                  0 length vectors. To build vectors from any size, one should
                  use the {@link #ArrayFieldVector(Field,FieldElement[])} constructor.                
                <param>
                    d Array.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    ZeroException if {@code d} is empty.                    
                </throws>
                <see>
                    #ArrayFieldVector(Field,FieldElement[])                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="75">
                <params>
                    <param name="d" type="T[]"/>
                </params>
                <scope line="77"/>
                <scope line="81"/>
            </method>
            <javadoc line="85">
                Construct a vector from an array, copying the input array.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    d Array.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #ArrayFieldVector(FieldElement[])                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="92">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="d" type="T[]"/>
                </params>
            </method>
            <javadoc line="97">
                Create a new ArrayFieldVector using the input array as the underlying
                  data array.
                  If an array is built specially in order to be embedded in a
                  ArrayFieldVector and not used directly, the {@code copyArray} may be
                  set to {@code false}. This will prevent the copying and improve
                  performance as no new array will be built and no data will be copied.
                  This constructor needs a non-empty {@code d} array to retrieve
                  the field from its first element. This implies it cannot build
                  0 length vectors. To build vectors from any size, one should
                  use the {@link #ArrayFieldVector(Field,FieldElement[],boolean)}constructor.                
                <param>
                    d Data for the new vector.                    
                </param>
                <param>
                    copyArray If {@code true}, the input array will be copied,
                      otherwise it will be referenced.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    ZeroException if {@code d} is empty.                    
                </throws>
                <see>
                    #ArrayFieldVector(FieldElement[])                    
                </see>
                <see>
                    #ArrayFieldVector(Field,FieldElement[],boolean)                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="116">
                <params>
                    <param name="d" type="T[]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
                <scope line="118"/>
            </method>
            <javadoc line="124">
                Create a new ArrayFieldVector using the input array as the underlying
                  data array.
                  If an array is built specially in order to be embedded in a
                  ArrayFieldVector and not used directly, the {@code copyArray} may be
                  set to {@code false}. This will prevent the copying and improve
                  performance as no new array will be built and no data will be copied.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    d Data for the new vector.                    
                </param>
                <param>
                    copyArray If {@code true}, the input array will be copied,
                      otherwise it will be referenced.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #ArrayFieldVector(FieldElement[],boolean)                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="138">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="d" type="T[]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
            </method>
            <javadoc line="143">
                Construct a vector from part of a array.                
                <param>
                    d Array.                    
                </param>
                <param>
                    pos Position of the first entry.                    
                </param>
                <param>
                    size Number of entries to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if the size of {@code d} is less
                      than {@code pos + size}.                    
                </throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="152">
                <params>
                    <param name="d" type="T[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="154"/>
            </method>
            <javadoc line="161">
                Construct a vector from part of a array.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    d Array.                    
                </param>
                <param>
                    pos Position of the first entry.                    
                </param>
                <param>
                    size Number of entries to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if the size of {@code d} is less
                      than {@code pos + size}.                    
                </throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="171">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="d" type="T[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="173"/>
            </method>
            <javadoc line="180">
                Construct a vector from another vector, using a deep copy.                
                <param>
                    v Vector to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code v} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="185">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="189"/>
            </method>
            <javadoc line="193">
                Construct a vector from another vector, using a deep copy.                
                <param>
                    v Vector to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code v} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="198">
                <params>
                    <param name="v" type="ArrayFieldVector<T>"/>
                </params>
            </method>
            <javadoc line="203">
                Construct a vector from another vector.                
                <param>
                    v Vector to copy.                    
                </param>
                <param>
                    deep If {@code true} perform a deep copy, otherwise perform
                      a shallow copy                    
                </param>
                <throws>
                    NullArgumentException if {@code v} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="210">
                <params>
                    <param name="v" type="ArrayFieldVector<T>"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="215">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <deprecated>
                    as of 3.2, replaced by {@link #ArrayFieldVector(FieldVector,FieldVector)}                    
                </deprecated>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="222">
                <params>
                    <param name="v1" type="ArrayFieldVector<T>"/>
                    <param name="v2" type="ArrayFieldVector<T>"/>
                </params>
            </method>
            <javadoc line="225">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="232">
                <params>
                    <param name="v1" type="FieldVector<T>"/>
                    <param name="v2" type="FieldVector<T>"/>
                </params>
                <declaration name="v1Data" type="T[]" line="236"/>
                <declaration name="v2Data" type="T[]" line="237"/>
            </method>
            <javadoc line="242">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <deprecated>
                    as of 3.2, replaced by {@link #ArrayFieldVector(FieldVector,FieldElement[])}                    
                </deprecated>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="249">
                <params>
                    <param name="v1" type="ArrayFieldVector<T>"/>
                    <param name="v2" type="T[]"/>
                </params>
            </method>
            <javadoc line="252">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="259">
                <params>
                    <param name="v1" type="FieldVector<T>"/>
                    <param name="v2" type="T[]"/>
                </params>
                <declaration name="v1Data" type="T[]" line="263"/>
            </method>
            <javadoc line="268">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <deprecated>
                    as of 3.2, replaced by {@link #ArrayFieldVector(FieldElement[],FieldVector)}                    
                </deprecated>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="275">
                <params>
                    <param name="v1" type="T[]"/>
                    <param name="v2" type="ArrayFieldVector<T>"/>
                </params>
            </method>
            <javadoc line="278">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="285">
                <params>
                    <param name="v1" type="T[]"/>
                    <param name="v2" type="FieldVector<T>"/>
                </params>
                <declaration name="v2Data" type="T[]" line="289"/>
            </method>
            <javadoc line="294">
                Construct a vector by appending one vector to another vector.
                  This constructor needs at least one non-empty array to retrieve
                  the field from its first element. This implies it cannot build
                  0 length vectors. To build vectors from any size, one should
                  use the {@link #ArrayFieldVector(Field,FieldElement[],FieldElement[])}constructor.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <throws>
                    ZeroException if both arrays are empty.                    
                </throws>
                <see>
                    #ArrayFieldVector(Field,FieldElement[],FieldElement[])                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="306">
                <params>
                    <param name="v1" type="T[]"/>
                    <param name="v2" type="T[]"/>
                </params>
                <scope line="309"/>
            </method>
            <javadoc line="317">
                Construct a vector by appending one vector to another vector.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
                <throws>
                    NullArgumentException if {@code v1} or {@code v2} is{@code null}.                    
                </throws>
                <throws>
                    ZeroException if both arrays are empty.                    
                </throws>
                <see>
                    #ArrayFieldVector(FieldElement[],FieldElement[])                    
                </see>
            </javadoc>
            <method name="ArrayFieldVector" type="constructor" line="326">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="v1" type="T[]"/>
                    <param name="v2" type="T[]"/>
                </params>
                <scope line="329"/>
            </method>
            <javadoc line="337">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="Field<T>" line="340"/>
            <javadoc line="343">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="FieldVector<T>" line="346"/>
            <javadoc line="349">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="FieldVector<T>" line="352">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="353"/>
                <scope line="356">
                    <declaration name="out" type="T[]" line="358"/>
                    <scope line="359"/>
                </scope>
            </method>
            <javadoc line="365">
                Compute the sum of {@code this} and {@code v}.                
                <param>
                    v vector to be added                    
                </param>
                <return>
                    {@code this + v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
            </javadoc>
            <method name="add" type="ArrayFieldVector<T>" line="371">
                <params>
                    <param name="v" type="ArrayFieldVector<T>"/>
                </params>
                <declaration name="out" type="T[]" line="373"/>
                <scope line="374"/>
            </method>
            <javadoc line="379">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="FieldVector<T>" line="382">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="383"/>
                <scope line="386">
                    <declaration name="out" type="T[]" line="388"/>
                    <scope line="389"/>
                </scope>
            </method>
            <javadoc line="395">
                Compute {@code this} minus {@code v}.                
                <param>
                    v vector to be subtracted                    
                </param>
                <return>
                    {@code this - v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
            </javadoc>
            <method name="subtract" type="ArrayFieldVector<T>" line="401">
                <params>
                    <param name="v" type="ArrayFieldVector<T>"/>
                </params>
                <declaration name="out" type="T[]" line="403"/>
                <scope line="404"/>
            </method>
            <javadoc line="409">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAdd" type="FieldVector<T>" line="412">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="out" type="T[]" line="413"/>
                <scope line="414"/>
            </method>
            <javadoc line="419">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="FieldVector<T>" line="422">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="423"/>
            </method>
            <javadoc line="428">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtract" type="FieldVector<T>" line="431">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="out" type="T[]" line="432"/>
                <scope line="433"/>
            </method>
            <javadoc line="438">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtractToSelf" type="FieldVector<T>" line="441">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="442"/>
            </method>
            <javadoc line="447">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiply" type="FieldVector<T>" line="450">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="out" type="T[]" line="451"/>
                <scope line="452"/>
            </method>
            <javadoc line="457">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiplyToSelf" type="FieldVector<T>" line="460">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="461"/>
            </method>
            <javadoc line="466">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivide" type="FieldVector<T>" line="469">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="out" type="T[]" line="471"/>
                <scope line="472"/>
            </method>
            <javadoc line="477">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivideToSelf" type="FieldVector<T>" line="480">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="482"/>
            </method>
            <javadoc line="487">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInv" type="FieldVector<T>" line="490">
                <declaration name="out" type="T[]" line="491"/>
                <declaration name="one" type="T" line="492"/>
                <scope line="493">
                    <scope line="494"/>
                    <scope line="497"/>
                </scope>
            </method>
            <javadoc line="503">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInvToSelf" type="FieldVector<T>" line="506">
                <declaration name="one" type="T" line="507"/>
                <scope line="508">
                    <scope line="509"/>
                    <scope line="512"/>
                </scope>
            </method>
            <javadoc line="518">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="FieldVector<T>" line="521">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="522"/>
                <scope line="525">
                    <declaration name="out" type="T[]" line="527"/>
                    <scope line="528"/>
                </scope>
            </method>
            <javadoc line="534">
                Element-by-element multiplication.                
                <param>
                    v vector by which instance elements must be multiplied                    
                </param>
                <return>
                    a vector containing {@code this[i]  v[i]} for all {@code i}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
            </javadoc>
            <method name="ebeMultiply" type="ArrayFieldVector<T>" line="540">
                <params>
                    <param name="v" type="ArrayFieldVector<T>"/>
                </params>
                <declaration name="out" type="T[]" line="542"/>
                <scope line="543"/>
            </method>
            <javadoc line="548">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="FieldVector<T>" line="551">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="552"/>
                <scope line="555">
                    <declaration name="out" type="T[]" line="557"/>
                    <scope line="558">
                        <scope line="559"/>
                        <scope line="562"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="569">
                Element-by-element division.                
                <param>
                    v vector by which instance elements must be divided                    
                </param>
                <return>
                    a vector containing {@code this[i] / v[i]} for all {@code i}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
                <throws>
                    MathArithmeticException if one entry of {@code v} is zero.                    
                </throws>
            </javadoc>
            <method name="ebeDivide" type="ArrayFieldVector<T>" line="576">
                <params>
                    <param name="v" type="ArrayFieldVector<T>"/>
                </params>
                <declaration name="out" type="T[]" line="578"/>
                <scope line="579">
                    <scope line="580"/>
                    <scope line="583"/>
                </scope>
            </method>
            <javadoc line="589">
                {@inheritDoc}                
            </javadoc>
            <method name="getData" type="T[]" line="592"/>
            <javadoc line="595">
                Returns a reference to the underlying data array.
                  &lt;p&gt;Does not make a fresh copy of the underlying data.&lt;/p&gt;                
                <return>
                    array of entries                    
                </return>
            </javadoc>
            <method name="getDataRef" type="T[]" line="600"/>
            <javadoc line="603">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="T" line="606">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="607"/>
                <scope line="610">
                    <declaration name="dot" type="T" line="612"/>
                    <scope line="613"/>
                </scope>
            </method>
            <javadoc line="619">
                Compute the dot product.                
                <param>
                    v vector with which dot product should be computed                    
                </param>
                <return>
                    the scalar dot product of {@code this} and {@code v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
            </javadoc>
            <method name="dotProduct" type="T" line="625">
                <params>
                    <param name="v" type="ArrayFieldVector<T>"/>
                </params>
                <declaration name="dot" type="T" line="627"/>
                <scope line="628"/>
            </method>
            <javadoc line="633">
                {@inheritDoc}                
            </javadoc>
            <method name="projection" type="FieldVector<T>" line="636">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
            </method>
            <javadoc line="639">
                Find the orthogonal projection of this vector onto another vector.                
                <param>
                    v vector onto which {@code this} must be projected                    
                </param>
                <return>
                    projection of {@code this} onto {@code v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}                    
                </throws>
                <throws>
                    MathArithmeticException if {@code v} is the null vector.                    
                </throws>
            </javadoc>
            <method name="projection" type="ArrayFieldVector<T>" line="646">
                <params>
                    <param name="v" type="ArrayFieldVector<T>"/>
                </params>
            </method>
            <javadoc line="649">
                {@inheritDoc}                
            </javadoc>
            <method name="outerProduct" type="FieldMatrix<T>" line="652">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="653"/>
                <scope line="656">
                    <declaration name="m" type="int" line="657"/>
                    <declaration name="n" type="int" line="658"/>
                    <declaration name="out" type="FieldMatrix&lt;T&gt;" line="659"/>
                    <scope line="660">
                        <scope line="661"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="668">
                Compute the outer product.                
                <param>
                    v vector with which outer product should be computed                    
                </param>
                <return>
                    the matrix outer product between instance and v                    
                </return>
            </javadoc>
            <method name="outerProduct" type="FieldMatrix<T>" line="673">
                <params>
                    <param name="v" type="ArrayFieldVector<T>"/>
                </params>
                <declaration name="m" type="int" line="674"/>
                <declaration name="n" type="int" line="675"/>
                <declaration name="out" type="FieldMatrix&lt;T&gt;" line="676"/>
                <scope line="677">
                    <scope line="678"/>
                </scope>
            </method>
            <javadoc line="684">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="T" line="687">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="690">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="693"/>
            <javadoc line="696">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="FieldVector<T>" line="699">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="700"/>
                <scope line="703"/>
            </method>
            <javadoc line="707">
                Construct a vector by appending a vector to this vector.                
                <param>
                    v vector to append to this one.                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="append" type="ArrayFieldVector<T>" line="712">
                <params>
                    <param name="v" type="ArrayFieldVector<T>"/>
                </params>
            </method>
            <javadoc line="715">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="FieldVector<T>" line="718">
                <params>
                    <param name="in" type="T"/>
                </params>
                <declaration name="out" type="T[]" line="719"/>
            </method>
            <javadoc line="724">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="FieldVector<T>" line="727">
                <params>
                    <param name="index" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="728"/>
                <declaration name="out" type="ArrayFieldVector&lt;T&gt;" line="731"/>
                <scope line="732"/>
                <scope line="735"/>
            </method>
            <javadoc line="741">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="744">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="T"/>
                </params>
                <scope line="745"/>
                <scope line="748"/>
            </method>
            <javadoc line="752">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="755">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="756">
                    <scope line="757"/>
                    <scope line="760">
                        <scope line="761"/>
                    </scope>
                </scope>
                <scope line="766"/>
            </method>
            <javadoc line="771">
                Set a set of consecutive elements.                
                <param>
                    index index of first element to be set.                    
                </param>
                <param>
                    v vector containing the values to set.                    
                </param>
                <throws>
                    OutOfRangeException if the index is invalid.                    
                </throws>
            </javadoc>
            <method name="set" type="void" line="777">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="ArrayFieldVector<T>"/>
                </params>
                <scope line="778"/>
                <scope line="781"/>
            </method>
            <javadoc line="786">
                {@inheritDoc}                
            </javadoc>
            <method name="set" type="void" line="789">
                <params>
                    <param name="value" type="T"/>
                </params>
            </method>
            <javadoc line="792">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="T[]" line="795"/>
            <javadoc line="798">
                Check if instance and specified vectors have the same dimension.                
                <param>
                    v vector to compare instance with                    
                </param>
                <exception>
                    DimensionMismatchException if the vectors do not
                      have the same dimensions                    
                </exception>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="804">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
            </method>
            <javadoc line="807">
                Check if instance dimension is equal to some expected value.                
                <param>
                    n Expected dimension.                    
                </param>
                <throws>
                    DimensionMismatchException if the dimension is not equal to the
                      size of {@code this} vector.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="813">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="814"/>
            </method>
            <javadoc line="818">
                Test for the equality of two vectors.                
                <param>
                    other Object to test for equality.                    
                </param>
                <return>
                    {@code true} if two vector objects are equal, {@code false}otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="823">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="824"/>
                <scope line="827"/>
                <scope line="830">
                    <declaration name="rhs" type="FieldVector&lt;T&gt;" line="831"/>
                    <scope line="832"/>
                    <scope line="835">
                        <scope line="836"/>
                    </scope>
                </scope>
                <scope line="842"/>
            </method>
            <javadoc line="846">
                Get a hashCode for the real vector.
                  &lt;p&gt;All NaN values have the same hash code.&lt;/p&gt;                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="851">
                <declaration name="h" type="int" line="852"/>
                <scope line="853"/>
            </method>
            <javadoc line="858">
                Check if an index is valid.                
                <param>
                    index Index to check.                    
                </param>
                <exception>
                    OutOfRangeException if the index is not valid.                    
                </exception>
            </javadoc>
            <method name="checkIndex" type="void" line="863">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="864"/>
            </method>
        </class>
    </source>