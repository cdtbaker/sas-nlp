<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.random.UnitSphereRandomVectorGenerator"/>
        <class name="MicrosphereInterpolator" line="9">
            <implements interface="MultivariateInterpolator"/>
            <javadoc line="9">
                Interpolator that implements the algorithm described in
                  &lt;em&gt;William Dudziak&lt;/em&gt;&apos;s
                  &lt;a href=&quot;http://www.dudziak.com/microsphere.pdf&quot;&gt;MS thesis&lt;/a&gt;.                
                <since>
                    2.1                    
                </since>
                <version>
                    $Id: MicrosphereInterpolator.java 1379904 2012-09-01 23:54:52Z erans $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_MICROSPHERE_ELEMENTS" type="int" line="17"/>
            <javadoc line="17">
                Default number of surface elements that composes the microsphere.                
            </javadoc>
            <declaration name="DEFAULT_BRIGHTNESS_EXPONENT" type="int" line="21"/>
            <javadoc line="21">
                Default exponent used the weights calculation.                
            </javadoc>
            <declaration name="microsphereElements" type="int" line="25"/>
            <javadoc line="25">
                Number of surface elements of the microsphere.                
            </javadoc>
            <declaration name="brightnessExponent" type="int" line="29"/>
            <javadoc line="29">
                Exponent used in the power law that computes the weights of the
                  sample data.                
            </javadoc>
            <javadoc line="34">
                Create a microsphere interpolator with default settings.
                  Calling this constructor is equivalent to call {@link #MicrosphereInterpolator(int,int)MicrosphereInterpolator(MicrosphereInterpolator.DEFAULT_MICROSPHERE_ELEMENTS,
                  MicrosphereInterpolator.DEFAULT_BRIGHTNESS_EXPONENT)}.                
            </javadoc>
            <method name="MicrosphereInterpolator" type="constructor" line="39"/>
            <javadoc line="42">
                Create a microsphere interpolator.                
                <param>
                    elements Number of surface elements of the microsphere.                    
                </param>
                <param>
                    exponent Exponent used in the power law that computes the
                      weights (distance dimming factor) of the sample data.                    
                </param>
                <throws>
                    NotPositiveException if {@code exponent < 0}.                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code elements <= 0}.                    
                </throws>
            </javadoc>
            <method name="MicrosphereInterpolator" type="constructor" line="50">
                <params>
                    <param name="elements" type="int"/>
                    <param name="exponent" type="int"/>
                </params>
                <scope line="51"/>
                <scope line="54"/>
            </method>
            <javadoc line="60">
                {@inheritDoc}                
            </javadoc>
            <method name="interpolate" type="MultivariateFunction" line="63">
                <params>
                    <param name="xval" type="double[][]"/>
                    <param name="yval" type="double[]"/>
                </params>
                <declaration name="rand" type="UnitSphereRandomVectorGenerator" line="64"/>
            </method>
        </class>
    </source>