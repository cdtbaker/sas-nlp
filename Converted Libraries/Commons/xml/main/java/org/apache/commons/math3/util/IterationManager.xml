<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.Collection"/>
        <import package="java.util.concurrent.CopyOnWriteArrayList"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <class name="IterationManager" line="5">
            <javadoc line="5">
                This abstract class provides a general framework for managing iterative
                  algorithms. The maximum number of iterations can be set, and methods are
                  provided to monitor the current iteration count. A lightweight event
                  framework is also provided.                
                <version>
                    $Id: IterationManager.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="iterations" type="Incrementor" line="13"/>
            <javadoc line="13">
                Keeps a count of the number of iterations.                
            </javadoc>
            <declaration name="listeners" type="Collection&lt;IterationListener&gt;" line="17"/>
            <javadoc line="17">
                The collection of all listeners attached to this iterative algorithm.                
            </javadoc>
            <javadoc line="21">
                Creates a new instance of this class.                
                <param>
                    maxIterations the maximum number of iterations                    
                </param>
            </javadoc>
            <method name="IterationManager" type="constructor" line="25">
                <params>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="29">
                Creates a new instance of this class.                
                <param>
                    maxIterations the maximum number of iterations                    
                </param>
                <param>
                    callBack the function to be called when the maximum number of
                      iterations has been reached                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NullArgumentException if {@code callBack} is {@code null}                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="IterationManager" type="constructor" line="37">
                <params>
                    <param name="maxIterations" type="int"/>
                    <param name="callBack" type="Incrementor.MaxCountExceededCallback"/>
                </params>
            </method>
            <javadoc line="41">
                Attaches a listener to this manager.                
                <param>
                    listener A {@code IterationListener} object.                    
                </param>
            </javadoc>
            <method name="addIterationListener" type="void" line="45">
                <params>
                    <param name="listener" type="IterationListener"/>
                </params>
            </method>
            <javadoc line="48">
                Informs all registered listeners that the initial phase (prior to the
                  main iteration loop) has been completed.                
                <param>
                    e The {@link IterationEvent} object.                    
                </param>
            </javadoc>
            <method name="fireInitializationEvent" type="void" line="53">
                <params>
                    <param name="e" type="IterationEvent"/>
                </params>
                <scope line="54"/>
            </method>
            <javadoc line="58">
                Informs all registered listeners that a new iteration (in the main
                  iteration loop) has been performed.                
                <param>
                    e The {@link IterationEvent} object.                    
                </param>
            </javadoc>
            <method name="fireIterationPerformedEvent" type="void" line="63">
                <params>
                    <param name="e" type="IterationEvent"/>
                </params>
                <scope line="64"/>
            </method>
            <javadoc line="68">
                Informs all registered listeners that a new iteration (in the main
                  iteration loop) has been started.                
                <param>
                    e The {@link IterationEvent} object.                    
                </param>
            </javadoc>
            <method name="fireIterationStartedEvent" type="void" line="73">
                <params>
                    <param name="e" type="IterationEvent"/>
                </params>
                <scope line="74"/>
            </method>
            <javadoc line="78">
                Informs all registered listeners that the final phase (post-iterations)
                  has been completed.                
                <param>
                    e The {@link IterationEvent} object.                    
                </param>
            </javadoc>
            <method name="fireTerminationEvent" type="void" line="83">
                <params>
                    <param name="e" type="IterationEvent"/>
                </params>
                <scope line="84"/>
            </method>
            <javadoc line="88">
                Returns the number of iterations of this solver, 0 if no iterations has
                  been performed yet.                
                <return>
                    the number of iterations.                    
                </return>
            </javadoc>
            <method name="getIterations" type="int" line="93"/>
            <javadoc line="96">
                Returns the maximum number of iterations.                
                <return>
                    the maximum number of iterations.                    
                </return>
            </javadoc>
            <method name="getMaxIterations" type="int" line="100"/>
            <javadoc line="103">
                Increments the iteration count by one, and throws an exception if the
                  maximum number of iterations is reached. This method should be called at
                  the beginning of a new iteration.                
                <throws>
                    MaxCountExceededException if the maximum number of iterations is
                      reached.                    
                </throws>
            </javadoc>
            <method name="incrementIterationCount" type="void" line="110"/>
            <javadoc line="113">
                Removes the specified iteration listener from the list of listeners
                  currently attached to {@code this} object. Attempting to remove a
                  listener which was &lt;em&gt;not&lt;/em&gt; previously registered does not cause any
                  error.                
                <param>
                    listener The {@link IterationListener} to be removed.                    
                </param>
            </javadoc>
            <method name="removeIterationListener" type="void" line="120">
                <params>
                    <param name="listener" type="IterationListener"/>
                </params>
            </method>
            <javadoc line="123">
                Sets the iteration count to 0. This method must be called during the
                  initial phase.                
            </javadoc>
            <method name="resetIterationCount" type="void" line="127"/>
        </class>
    </source>