<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="ArrayRealVector" line="34">
            <extends class="RealVector"/>
            <implements interface="Serializable"/>
            <javadoc line="34">
                This class implements the {@link RealVector} interface with a double array.                
                <version>
                    $Id: ArrayRealVector.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="40"/>
            <javadoc line="40">
                Serializable version identifier.                
            </javadoc>
            <declaration name="DEFAULT_FORMAT" type="RealVectorFormat" line="42"/>
            <javadoc line="42">
                Default format.                
            </javadoc>
            <declaration name="data" type="double" line="45"/>
            <javadoc line="45">
                Entries of the vector.                
            </javadoc>
            <javadoc line="48">
                Build a 0-length vector.
                  Zero-length vectors may be used to initialized construction of vectors
                  by data gathering. We start with zero-length and use either the {@link #ArrayRealVector(ArrayRealVector,ArrayRealVector)} constructor
                  or one of the {@code append} method ({@link #append(double)},{@link #append(ArrayRealVector)}) to gather data into this vector.                
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="56"/>
            <javadoc line="60">
                Construct a vector of zeroes.                
                <param>
                    size Size of the vector.                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="65">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="69">
                Construct a vector with preset values.                
                <param>
                    size Size of the vector                    
                </param>
                <param>
                    preset All entries will be set with this value.                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="75">
                <params>
                    <param name="size" type="int"/>
                    <param name="preset" type="double"/>
                </params>
            </method>
            <javadoc line="80">
                Construct a vector from an array, copying the input array.                
                <param>
                    d Array.                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="85">
                <params>
                    <param name="d" type="double[]"/>
                </params>
            </method>
            <javadoc line="89">
                Create a new ArrayRealVector using the input array as the underlying
                  data array.
                  If an array is built specially in order to be embedded in a
                  ArrayRealVector and not used directly, the {@code copyArray} may be
                  set to {@code false}. This will prevent the copying and improve
                  performance as no new array will be built and no data will be copied.                
                <param>
                    d Data for the new vector.                    
                </param>
                <param>
                    copyArray if {@code true}, the input array will be copied,
                      otherwise it will be referenced.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #ArrayRealVector(double[])                    
                </see>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="104">
                <params>
                    <param name="d" type="double[]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
                <scope line="105"/>
            </method>
            <javadoc line="111">
                Construct a vector from part of a array.                
                <param>
                    d Array.                    
                </param>
                <param>
                    pos Position of first entry.                    
                </param>
                <param>
                    size Number of entries to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if the size of {@code d} is less
                      than {@code pos + size}.                    
                </throws>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="122">
                <params>
                    <param name="d" type="double[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="123"/>
                <scope line="126"/>
            </method>
            <javadoc line="133">
                Construct a vector from an array.                
                <param>
                    d Array of {@code Double}s.                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="138">
                <params>
                    <param name="d" type="Double[]"/>
                </params>
                <scope line="140"/>
            </method>
            <javadoc line="145">
                Construct a vector from part of an array.                
                <param>
                    d Array.                    
                </param>
                <param>
                    pos Position of first entry.                    
                </param>
                <param>
                    size Number of entries to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if the size of {@code d} is less
                      than {@code pos + size}.                    
                </throws>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="156">
                <params>
                    <param name="d" type="Double[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="157"/>
                <scope line="160"/>
                <scope line="164"/>
            </method>
            <javadoc line="169">
                Construct a vector from another vector, using a deep copy.                
                <param>
                    v vector to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code v} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="175">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="176"/>
                <scope line="180"/>
            </method>
            <javadoc line="185">
                Construct a vector from another vector, using a deep copy.                
                <param>
                    v Vector to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code v} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="191">
                <params>
                    <param name="v" type="ArrayRealVector"/>
                </params>
            </method>
            <javadoc line="195">
                Construct a vector from another vector.                
                <param>
                    v Vector to copy.                    
                </param>
                <param>
                    deep If {@code true} perform a deep copy, otherwise perform a
                      shallow copy.                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="202">
                <params>
                    <param name="v" type="ArrayRealVector"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="206">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="211">
                <params>
                    <param name="v1" type="ArrayRealVector"/>
                    <param name="v2" type="ArrayRealVector"/>
                </params>
            </method>
            <javadoc line="217">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="222">
                <params>
                    <param name="v1" type="ArrayRealVector"/>
                    <param name="v2" type="RealVector"/>
                </params>
                <declaration name="l1" type="int" line="223"/>
                <declaration name="l2" type="int" line="224"/>
                <scope line="227"/>
            </method>
            <javadoc line="232">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="237">
                <params>
                    <param name="v1" type="RealVector"/>
                    <param name="v2" type="ArrayRealVector"/>
                </params>
                <declaration name="l1" type="int" line="238"/>
                <declaration name="l2" type="int" line="239"/>
                <scope line="241"/>
            </method>
            <javadoc line="247">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="252">
                <params>
                    <param name="v1" type="ArrayRealVector"/>
                    <param name="v2" type="double[]"/>
                </params>
                <declaration name="l1" type="int" line="253"/>
                <declaration name="l2" type="int" line="254"/>
            </method>
            <javadoc line="260">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="265">
                <params>
                    <param name="v1" type="double[]"/>
                    <param name="v2" type="ArrayRealVector"/>
                </params>
                <declaration name="l1" type="int" line="266"/>
                <declaration name="l2" type="int" line="267"/>
            </method>
            <javadoc line="273">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 first vector (will be put in front of the new vector)                    
                </param>
                <param>
                    v2 second vector (will be put at back of the new vector)                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="278">
                <params>
                    <param name="v1" type="double[]"/>
                    <param name="v2" type="double[]"/>
                </params>
                <declaration name="l1" type="int" line="279"/>
                <declaration name="l2" type="int" line="280"/>
            </method>
            <javadoc line="286">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="ArrayRealVector" line="288"/>
            <javadoc line="292">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="ArrayRealVector" line="295">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="296">
                    <declaration name="vData" type="double[]" line="297"/>
                    <declaration name="dim" type="int" line="298"/>
                    <declaration name="result" type="ArrayRealVector" line="300"/>
                    <declaration name="resultData" type="double[]" line="301"/>
                    <scope line="302"/>
                </scope>
                <scope line="306">
                    <declaration name="out" type="double[]" line="308"/>
                    <declaration name="it" type="Iterator&lt;Entry&gt;" line="309"/>
                    <scope line="310">
                        <declaration name="e" type="Entry" line="311"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="318">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="ArrayRealVector" line="321">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="322">
                    <declaration name="vData" type="double[]" line="323"/>
                    <declaration name="dim" type="int" line="324"/>
                    <declaration name="result" type="ArrayRealVector" line="326"/>
                    <declaration name="resultData" type="double[]" line="327"/>
                    <scope line="328"/>
                </scope>
                <scope line="332">
                    <declaration name="out" type="double[]" line="334"/>
                    <declaration name="it" type="Iterator&lt;Entry&gt;" line="335"/>
                    <scope line="336">
                        <declaration name="e" type="Entry" line="337"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="344">
                {@inheritDoc}                
            </javadoc>
            <method name="map" type="ArrayRealVector" line="346">
                <params>
                    <param name="function" type="UnivariateFunction"/>
                </params>
            </method>
            <javadoc line="350">
                {@inheritDoc}                
            </javadoc>
            <method name="mapToSelf" type="ArrayRealVector" line="352">
                <params>
                    <param name="function" type="UnivariateFunction"/>
                </params>
                <scope line="353"/>
            </method>
            <javadoc line="359">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="RealVector" line="361">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="362"/>
            </method>
            <javadoc line="368">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtractToSelf" type="RealVector" line="370">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="371"/>
            </method>
            <javadoc line="377">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiplyToSelf" type="RealVector" line="379">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="380"/>
            </method>
            <javadoc line="386">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivideToSelf" type="RealVector" line="388">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="389"/>
            </method>
            <javadoc line="395">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="ArrayRealVector" line="398">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="399">
                    <declaration name="vData" type="double[]" line="400"/>
                    <declaration name="dim" type="int" line="401"/>
                    <declaration name="result" type="ArrayRealVector" line="403"/>
                    <declaration name="resultData" type="double[]" line="404"/>
                    <scope line="405"/>
                </scope>
                <scope line="409">
                    <declaration name="out" type="double[]" line="411"/>
                    <scope line="412"/>
                </scope>
            </method>
            <javadoc line="419">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="ArrayRealVector" line="422">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="423">
                    <declaration name="vData" type="double[]" line="424"/>
                    <declaration name="dim" type="int" line="425"/>
                    <declaration name="result" type="ArrayRealVector" line="427"/>
                    <declaration name="resultData" type="double[]" line="428"/>
                    <scope line="429"/>
                </scope>
                <scope line="433">
                    <declaration name="out" type="double[]" line="435"/>
                    <scope line="436"/>
                </scope>
            </method>
            <javadoc line="443">
                Get a reference to the underlying data array.
                  This method does not make a fresh copy of the underlying data.                
                <return>
                    the array of entries.                    
                </return>
            </javadoc>
            <method name="getDataRef" type="double[]" line="449"/>
            <javadoc line="453">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="double" line="455">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="456">
                    <declaration name="vData" type="double[]" line="457"/>
                    <declaration name="dot" type="double" line="459"/>
                    <scope line="460"/>
                </scope>
            </method>
            <javadoc line="468">
                {@inheritDoc}                
            </javadoc>
            <method name="getNorm" type="double" line="470">
                <declaration name="sum" type="double" line="471"/>
                <scope line="472"/>
            </method>
            <javadoc line="478">
                {@inheritDoc}                
            </javadoc>
            <method name="getL1Norm" type="double" line="480">
                <declaration name="sum" type="double" line="481"/>
                <scope line="482"/>
            </method>
            <javadoc line="488">
                {@inheritDoc}                
            </javadoc>
            <method name="getLInfNorm" type="double" line="490">
                <declaration name="max" type="double" line="491"/>
                <scope line="492"/>
            </method>
            <javadoc line="498">
                {@inheritDoc}                
            </javadoc>
            <method name="getDistance" type="double" line="500">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="501">
                    <declaration name="vData" type="double[]" line="502"/>
                    <declaration name="sum" type="double" line="504"/>
                    <scope line="505">
                        <declaration name="delta" type="double" line="506"/>
                    </scope>
                </scope>
                <scope line="510">
                    <declaration name="sum" type="double" line="512"/>
                    <scope line="513">
                        <declaration name="delta" type="double" line="514"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="521">
                {@inheritDoc}                
            </javadoc>
            <method name="getL1Distance" type="double" line="524">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="525">
                    <declaration name="vData" type="double[]" line="526"/>
                    <declaration name="sum" type="double" line="528"/>
                    <scope line="529">
                        <declaration name="delta" type="double" line="530"/>
                    </scope>
                </scope>
                <scope line="534">
                    <declaration name="sum" type="double" line="536"/>
                    <scope line="537">
                        <declaration name="delta" type="double" line="538"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="545">
                {@inheritDoc}                
            </javadoc>
            <method name="getLInfDistance" type="double" line="548">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="549">
                    <declaration name="vData" type="double[]" line="550"/>
                    <declaration name="max" type="double" line="552"/>
                    <scope line="553">
                        <declaration name="delta" type="double" line="554"/>
                    </scope>
                </scope>
                <scope line="558">
                    <declaration name="max" type="double" line="560"/>
                    <scope line="561">
                        <declaration name="delta" type="double" line="562"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="569">
                {@inheritDoc}                
            </javadoc>
            <method name="outerProduct" type="RealMatrix" line="571">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="572">
                    <declaration name="vData" type="double[]" line="573"/>
                    <declaration name="m" type="int" line="574"/>
                    <declaration name="n" type="int" line="575"/>
                    <declaration name="out" type="RealMatrix" line="576"/>
                    <scope line="577">
                        <scope line="578"/>
                    </scope>
                </scope>
                <scope line="583">
                    <declaration name="m" type="int" line="584"/>
                    <declaration name="n" type="int" line="585"/>
                    <declaration name="out" type="RealMatrix" line="586"/>
                    <scope line="587">
                        <scope line="588"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="596">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="double" line="598">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="599"/>
                <scope line="601"/>
            </method>
            <javadoc line="607">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="609"/>
            <javadoc line="613">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="RealVector" line="615">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="616"/>
                <scope line="618"/>
            </method>
            <javadoc line="623">
                Construct a vector by appending a vector to this vector.                
                <param>
                    v Vector to append to this one.                    
                </param>
                <return>
                    a new vector.                    
                </return>
            </javadoc>
            <method name="append" type="ArrayRealVector" line="629">
                <params>
                    <param name="v" type="ArrayRealVector"/>
                </params>
            </method>
            <javadoc line="633">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="RealVector" line="635">
                <params>
                    <param name="in" type="double"/>
                </params>
                <declaration name="out" type="double[]" line="636"/>
            </method>
            <javadoc line="642">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="RealVector" line="645">
                <params>
                    <param name="index" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="646"/>
                <declaration name="out" type="ArrayRealVector" line="649"/>
                <scope line="650"/>
                <scope line="652"/>
            </method>
            <javadoc line="659">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="661">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="662"/>
                <scope line="664"/>
            </method>
            <javadoc line="669">
                {@inheritDoc}                
            </javadoc>
            <method name="addToEntry" type="void" line="672">
                <params>
                    <param name="index" type="int"/>
                    <param name="increment" type="double"/>
                </params>
                <scope line="673"/>
                <scope line="675"/>
            </method>
            <javadoc line="681">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="684">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="685"/>
                <scope line="687">
                    <scope line="688">
                        <scope line="689"/>
                    </scope>
                    <scope line="692"/>
                </scope>
            </method>
            <javadoc line="699">
                Set a set of consecutive elements.                
                <param>
                    index Index of first element to be set.                    
                </param>
                <param>
                    v Vector containing the values to set.                    
                </param>
                <throws>
                    OutOfRangeException if the index is inconsistent with the vector
                      size.                    
                </throws>
            </javadoc>
            <method name="setSubVector" type="void" line="708">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="double[]"/>
                </params>
                <scope line="709"/>
                <scope line="711"/>
            </method>
            <javadoc line="717">
                {@inheritDoc}                
            </javadoc>
            <method name="set" type="void" line="719">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="723">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="double[]" line="725"/>
            <javadoc line="729">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="731"/>
            <javadoc line="735">
                Check if instance and specified vectors have the same dimension.                
                <param>
                    v Vector to compare instance with.                    
                </param>
                <throws>
                    DimensionMismatchException if the vectors do not
                      have the same dimension.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="744">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
            </method>
            <javadoc line="748">
                Check if instance dimension is equal to some expected value.                
                <param>
                    n Expected dimension.                    
                </param>
                <throws>
                    DimensionMismatchException if the dimension is
                      inconsistent with vector size.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="757">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="758"/>
            </method>
            <javadoc line="763">
                Check if any coordinate of this vector is {@code NaN}.                
                <return>
                    {@code true} if any coordinate of this vector is {@code NaN},{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="770">
                <scope line="771">
                    <scope line="772"/>
                </scope>
            </method>
            <javadoc line="779">
                Check whether any coordinate of this vector is infinite and none
                  are {@code NaN}.                
                <return>
                    {@code true} if any coordinate of this vector is infinite and
                      none are {@code NaN}, {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="787">
                <scope line="788"/>
                <scope line="792">
                    <scope line="793"/>
                </scope>
            </method>
            <javadoc line="801">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="803">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="804"/>
                <scope line="808"/>
                <declaration name="rhs" type="RealVector" line="812"/>
                <scope line="813"/>
                <scope line="817"/>
                <scope line="821">
                    <scope line="822"/>
                </scope>
            </method>
            <javadoc line="829">
                {@inheritDoc} All {@code NaN} values have the same hash code.                
            </javadoc>
            <method name="hashCode" type="int" line="833">
                <scope line="834"/>
            </method>
            <javadoc line="840">
                {@inheritDoc}                
            </javadoc>
            <method name="combine" type="ArrayRealVector" line="843">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="y" type="RealVector"/>
                </params>
            </method>
            <javadoc line="847">
                {@inheritDoc}                
            </javadoc>
            <method name="combineToSelf" type="ArrayRealVector" line="850">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="y" type="RealVector"/>
                </params>
                <scope line="851">
                    <declaration name="yData" type="double[]" line="852"/>
                    <scope line="854"/>
                </scope>
                <scope line="857">
                    <scope line="859"/>
                </scope>
            </method>
            <javadoc line="866">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="868">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                </params>
                <scope line="870"/>
            </method>
            <javadoc line="876">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="880">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="883"/>
            </method>
            <javadoc line="889">
                {@inheritDoc}In this implementation, the optimized order is the default order.                
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="895">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                </params>
            </method>
            <javadoc line="899">
                {@inheritDoc}In this implementation, the optimized order is the default order.                
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="907">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="911">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="913">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                </params>
                <scope line="915"/>
            </method>
            <javadoc line="921">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="925">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="928"/>
            </method>
            <javadoc line="934">
                {@inheritDoc}In this implementation, the optimized order is the default order.                
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="940">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                </params>
            </method>
            <javadoc line="944">
                {@inheritDoc}In this implementation, the optimized order is the default order.                
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="952">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
        </class>
    </source>