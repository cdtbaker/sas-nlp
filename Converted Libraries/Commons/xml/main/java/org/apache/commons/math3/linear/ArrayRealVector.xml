<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="ArrayRealVector" line="15">
            <extends class="RealVector"/>
            <implements interface="Serializable"/>
            <javadoc line="15">
                This class implements the {@link RealVector} interface with a double array.                
                <version>
                    $Id: ArrayRealVector.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="21"/>
            <javadoc line="21">
                Serializable version identifier.                
            </javadoc>
            <declaration name="DEFAULT_FORMAT" type="RealVectorFormat" line="25"/>
            <javadoc line="25">
                Default format.                
            </javadoc>
            <declaration name="data" type="double" line="29"/>
            <javadoc line="29">
                Entries of the vector.                
            </javadoc>
            <javadoc line="33">
                Build a 0-length vector.
                  Zero-length vectors may be used to initialized construction of vectors
                  by data gathering. We start with zero-length and use either the {@link #ArrayRealVector(ArrayRealVector,ArrayRealVector)} constructor
                  or one of the {@code append} method ({@link #append(double)},{@link #append(ArrayRealVector)}) to gather data into this vector.                
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="39"/>
            <javadoc line="42">
                Construct a vector of zeroes.                
                <param>
                    size Size of the vector.                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="46">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="49">
                Construct a vector with preset values.                
                <param>
                    size Size of the vector                    
                </param>
                <param>
                    preset All entries will be set with this value.                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="54">
                <params>
                    <param name="size" type="int"/>
                    <param name="preset" type="double"/>
                </params>
            </method>
            <javadoc line="58">
                Construct a vector from an array, copying the input array.                
                <param>
                    d Array.                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="62">
                <params>
                    <param name="d" type="double[]"/>
                </params>
            </method>
            <javadoc line="65">
                Create a new ArrayRealVector using the input array as the underlying
                  data array.
                  If an array is built specially in order to be embedded in a
                  ArrayRealVector and not used directly, the {@code copyArray} may be
                  set to {@code false}. This will prevent the copying and improve
                  performance as no new array will be built and no data will be copied.                
                <param>
                    d Data for the new vector.                    
                </param>
                <param>
                    copyArray if {@code true}, the input array will be copied,
                      otherwise it will be referenced.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <see>
                    #ArrayRealVector(double[])                    
                </see>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="78">
                <params>
                    <param name="d" type="double[]"/>
                    <param name="copyArray" type="boolean"/>
                </params>
                <scope line="79"/>
            </method>
            <javadoc line="84">
                Construct a vector from part of a array.                
                <param>
                    d Array.                    
                </param>
                <param>
                    pos Position of first entry.                    
                </param>
                <param>
                    size Number of entries to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if the size of {@code d} is less
                      than {@code pos + size}.                    
                </throws>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="93">
                <params>
                    <param name="d" type="double[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="94"/>
                <scope line="97"/>
            </method>
            <javadoc line="103">
                Construct a vector from an array.                
                <param>
                    d Array of {@code Double}s.                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="107">
                <params>
                    <param name="d" type="Double[]"/>
                </params>
                <scope line="109"/>
            </method>
            <javadoc line="113">
                Construct a vector from part of an array.                
                <param>
                    d Array.                    
                </param>
                <param>
                    pos Position of first entry.                    
                </param>
                <param>
                    size Number of entries to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code d} is {@code null}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if the size of {@code d} is less
                      than {@code pos + size}.                    
                </throws>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="122">
                <params>
                    <param name="d" type="Double[]"/>
                    <param name="pos" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="123"/>
                <scope line="126"/>
                <scope line="130"/>
            </method>
            <javadoc line="134">
                Construct a vector from another vector, using a deep copy.                
                <param>
                    v vector to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code v} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="139">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="140"/>
                <scope line="144"/>
            </method>
            <javadoc line="148">
                Construct a vector from another vector, using a deep copy.                
                <param>
                    v Vector to copy.                    
                </param>
                <throws>
                    NullArgumentException if {@code v} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="153">
                <params>
                    <param name="v" type="ArrayRealVector"/>
                </params>
            </method>
            <javadoc line="156">
                Construct a vector from another vector.                
                <param>
                    v Vector to copy.                    
                </param>
                <param>
                    deep If {@code true} perform a deep copy, otherwise perform a
                      shallow copy.                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="162">
                <params>
                    <param name="v" type="ArrayRealVector"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="165">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="170">
                <params>
                    <param name="v1" type="ArrayRealVector"/>
                    <param name="v2" type="ArrayRealVector"/>
                </params>
            </method>
            <javadoc line="175">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="180">
                <params>
                    <param name="v1" type="ArrayRealVector"/>
                    <param name="v2" type="RealVector"/>
                </params>
                <declaration name="l1" type="int" line="181"/>
                <declaration name="l2" type="int" line="182"/>
                <scope line="185"/>
            </method>
            <javadoc line="189">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="194">
                <params>
                    <param name="v1" type="RealVector"/>
                    <param name="v2" type="ArrayRealVector"/>
                </params>
                <declaration name="l1" type="int" line="195"/>
                <declaration name="l2" type="int" line="196"/>
                <scope line="198"/>
            </method>
            <javadoc line="203">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="208">
                <params>
                    <param name="v1" type="ArrayRealVector"/>
                    <param name="v2" type="double[]"/>
                </params>
                <declaration name="l1" type="int" line="209"/>
                <declaration name="l2" type="int" line="210"/>
            </method>
            <javadoc line="215">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 First vector (will be put in front of the new vector).                    
                </param>
                <param>
                    v2 Second vector (will be put at back of the new vector).                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="220">
                <params>
                    <param name="v1" type="double[]"/>
                    <param name="v2" type="ArrayRealVector"/>
                </params>
                <declaration name="l1" type="int" line="221"/>
                <declaration name="l2" type="int" line="222"/>
            </method>
            <javadoc line="227">
                Construct a vector by appending one vector to another vector.                
                <param>
                    v1 first vector (will be put in front of the new vector)                    
                </param>
                <param>
                    v2 second vector (will be put at back of the new vector)                    
                </param>
            </javadoc>
            <method name="ArrayRealVector" type="constructor" line="232">
                <params>
                    <param name="v1" type="double[]"/>
                    <param name="v2" type="double[]"/>
                </params>
                <declaration name="l1" type="int" line="233"/>
                <declaration name="l2" type="int" line="234"/>
            </method>
            <javadoc line="239">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="ArrayRealVector" line="242"/>
            <javadoc line="245">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="ArrayRealVector" line="248">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="249">
                    <declaration name="vData" type="double[]" line="250"/>
                    <declaration name="dim" type="int" line="251"/>
                    <declaration name="result" type="ArrayRealVector" line="253"/>
                    <declaration name="resultData" type="double[]" line="254"/>
                    <scope line="255"/>
                </scope>
                <scope line="260">
                    <declaration name="out" type="double[]" line="262"/>
                    <declaration name="it" type="Iterator&lt;Entry&gt;" line="263"/>
                    <scope line="264">
                        <declaration name="e" type="Entry" line="265"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="271">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="ArrayRealVector" line="274">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="275">
                    <declaration name="vData" type="double[]" line="276"/>
                    <declaration name="dim" type="int" line="277"/>
                    <declaration name="result" type="ArrayRealVector" line="279"/>
                    <declaration name="resultData" type="double[]" line="280"/>
                    <scope line="281"/>
                </scope>
                <scope line="286">
                    <declaration name="out" type="double[]" line="288"/>
                    <declaration name="it" type="Iterator&lt;Entry&gt;" line="289"/>
                    <scope line="290">
                        <declaration name="e" type="Entry" line="291"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="297">
                {@inheritDoc}                
            </javadoc>
            <method name="map" type="ArrayRealVector" line="300">
                <params>
                    <param name="function" type="UnivariateFunction"/>
                </params>
            </method>
            <javadoc line="303">
                {@inheritDoc}                
            </javadoc>
            <method name="mapToSelf" type="ArrayRealVector" line="306">
                <params>
                    <param name="function" type="UnivariateFunction"/>
                </params>
                <scope line="307"/>
            </method>
            <javadoc line="312">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="RealVector" line="315">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="316"/>
            </method>
            <javadoc line="321">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtractToSelf" type="RealVector" line="324">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="325"/>
            </method>
            <javadoc line="330">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiplyToSelf" type="RealVector" line="333">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="334"/>
            </method>
            <javadoc line="339">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivideToSelf" type="RealVector" line="342">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="343"/>
            </method>
            <javadoc line="348">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="ArrayRealVector" line="351">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="352">
                    <declaration name="vData" type="double[]" line="353"/>
                    <declaration name="dim" type="int" line="354"/>
                    <declaration name="result" type="ArrayRealVector" line="356"/>
                    <declaration name="resultData" type="double[]" line="357"/>
                    <scope line="358"/>
                </scope>
                <scope line="363">
                    <declaration name="out" type="double[]" line="365"/>
                    <scope line="366"/>
                </scope>
            </method>
            <javadoc line="372">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="ArrayRealVector" line="375">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="376">
                    <declaration name="vData" type="double[]" line="377"/>
                    <declaration name="dim" type="int" line="378"/>
                    <declaration name="result" type="ArrayRealVector" line="380"/>
                    <declaration name="resultData" type="double[]" line="381"/>
                    <scope line="382"/>
                </scope>
                <scope line="387">
                    <declaration name="out" type="double[]" line="389"/>
                    <scope line="390"/>
                </scope>
            </method>
            <javadoc line="396">
                Get a reference to the underlying data array.
                  This method does not make a fresh copy of the underlying data.                
                <return>
                    the array of entries.                    
                </return>
            </javadoc>
            <method name="getDataRef" type="double[]" line="401"/>
            <javadoc line="404">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="double" line="407">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="408">
                    <declaration name="vData" type="double[]" line="409"/>
                    <declaration name="dot" type="double" line="411"/>
                    <scope line="412"/>
                </scope>
            </method>
            <javadoc line="419">
                {@inheritDoc}                
            </javadoc>
            <method name="getNorm" type="double" line="422">
                <declaration name="sum" type="double" line="423"/>
                <scope line="424"/>
            </method>
            <javadoc line="429">
                {@inheritDoc}                
            </javadoc>
            <method name="getL1Norm" type="double" line="432">
                <declaration name="sum" type="double" line="433"/>
                <scope line="434"/>
            </method>
            <javadoc line="439">
                {@inheritDoc}                
            </javadoc>
            <method name="getLInfNorm" type="double" line="442">
                <declaration name="max" type="double" line="443"/>
                <scope line="444"/>
            </method>
            <javadoc line="449">
                {@inheritDoc}                
            </javadoc>
            <method name="getDistance" type="double" line="452">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="453">
                    <declaration name="vData" type="double[]" line="454"/>
                    <declaration name="sum" type="double" line="456"/>
                    <scope line="457">
                        <declaration name="delta" type="double" line="458"/>
                    </scope>
                </scope>
                <scope line="463">
                    <declaration name="sum" type="double" line="465"/>
                    <scope line="466">
                        <declaration name="delta" type="double" line="467"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="473">
                {@inheritDoc}                
            </javadoc>
            <method name="getL1Distance" type="double" line="476">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="477">
                    <declaration name="vData" type="double[]" line="478"/>
                    <declaration name="sum" type="double" line="480"/>
                    <scope line="481">
                        <declaration name="delta" type="double" line="482"/>
                    </scope>
                </scope>
                <scope line="487">
                    <declaration name="sum" type="double" line="489"/>
                    <scope line="490">
                        <declaration name="delta" type="double" line="491"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="497">
                {@inheritDoc}                
            </javadoc>
            <method name="getLInfDistance" type="double" line="500">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="501">
                    <declaration name="vData" type="double[]" line="502"/>
                    <declaration name="max" type="double" line="504"/>
                    <scope line="505">
                        <declaration name="delta" type="double" line="506"/>
                    </scope>
                </scope>
                <scope line="511">
                    <declaration name="max" type="double" line="513"/>
                    <scope line="514">
                        <declaration name="delta" type="double" line="515"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="521">
                {@inheritDoc}                
            </javadoc>
            <method name="outerProduct" type="RealMatrix" line="524">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="525">
                    <declaration name="vData" type="double[]" line="526"/>
                    <declaration name="m" type="int" line="527"/>
                    <declaration name="n" type="int" line="528"/>
                    <declaration name="out" type="RealMatrix" line="529"/>
                    <scope line="530">
                        <scope line="531"/>
                    </scope>
                </scope>
                <scope line="537">
                    <declaration name="m" type="int" line="538"/>
                    <declaration name="n" type="int" line="539"/>
                    <declaration name="out" type="RealMatrix" line="540"/>
                    <scope line="541">
                        <scope line="542"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="549">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="double" line="552">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="553"/>
                <scope line="556"/>
            </method>
            <javadoc line="560">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="563"/>
            <javadoc line="566">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="RealVector" line="569">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="570"/>
                <scope line="573"/>
            </method>
            <javadoc line="577">
                Construct a vector by appending a vector to this vector.                
                <param>
                    v Vector to append to this one.                    
                </param>
                <return>
                    a new vector.                    
                </return>
            </javadoc>
            <method name="append" type="ArrayRealVector" line="582">
                <params>
                    <param name="v" type="ArrayRealVector"/>
                </params>
            </method>
            <javadoc line="585">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="RealVector" line="588">
                <params>
                    <param name="in" type="double"/>
                </params>
                <declaration name="out" type="double[]" line="589"/>
            </method>
            <javadoc line="594">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="RealVector" line="597">
                <params>
                    <param name="index" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="598"/>
                <declaration name="out" type="ArrayRealVector" line="601"/>
                <scope line="602"/>
                <scope line="605"/>
            </method>
            <javadoc line="611">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="614">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="615"/>
                <scope line="618"/>
            </method>
            <javadoc line="622">
                {@inheritDoc}                
            </javadoc>
            <method name="addToEntry" type="void" line="625">
                <params>
                    <param name="index" type="int"/>
                    <param name="increment" type="double"/>
                </params>
                <scope line="626"/>
                <scope line="629"/>
            </method>
            <javadoc line="633">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="636">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="RealVector"/>
                </params>
                <scope line="637"/>
                <scope line="640">
                    <scope line="641">
                        <scope line="642"/>
                    </scope>
                    <scope line="646"/>
                </scope>
            </method>
            <javadoc line="652">
                Set a set of consecutive elements.                
                <param>
                    index Index of first element to be set.                    
                </param>
                <param>
                    v Vector containing the values to set.                    
                </param>
                <throws>
                    OutOfRangeException if the index is inconsistent with the vector
                      size.                    
                </throws>
            </javadoc>
            <method name="setSubVector" type="void" line="659">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="double[]"/>
                </params>
                <scope line="660"/>
                <scope line="663"/>
            </method>
            <javadoc line="668">
                {@inheritDoc}                
            </javadoc>
            <method name="set" type="void" line="671">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="674">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="double[]" line="677"/>
            <javadoc line="680">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="683"/>
            <javadoc line="686">
                Check if instance and specified vectors have the same dimension.                
                <param>
                    v Vector to compare instance with.                    
                </param>
                <throws>
                    DimensionMismatchException if the vectors do not
                      have the same dimension.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="692">
                <params>
                    <param name="v" type="RealVector"/>
                </params>
            </method>
            <javadoc line="695">
                Check if instance dimension is equal to some expected value.                
                <param>
                    n Expected dimension.                    
                </param>
                <throws>
                    DimensionMismatchException if the dimension is
                      inconsistent with vector size.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="701">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="702"/>
            </method>
            <javadoc line="706">
                Check if any coordinate of this vector is {@code NaN}.                
                <return>
                    {@code true} if any coordinate of this vector is {@code NaN},{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="710">
                <scope line="711">
                    <scope line="712"/>
                </scope>
            </method>
            <javadoc line="718">
                Check whether any coordinate of this vector is infinite and none
                  are {@code NaN}.                
                <return>
                    {@code true} if any coordinate of this vector is infinite and
                      none are {@code NaN}, {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="724">
                <scope line="725"/>
                <scope line="728">
                    <scope line="729"/>
                </scope>
            </method>
            <javadoc line="735">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="738">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="739"/>
                <scope line="742"/>
                <declaration name="rhs" type="RealVector" line="745"/>
                <scope line="746"/>
                <scope line="749"/>
                <scope line="752">
                    <scope line="753"/>
                </scope>
            </method>
            <javadoc line="759">
                {@inheritDoc} All {@code NaN} values have the same hash code.                
            </javadoc>
            <method name="hashCode" type="int" line="762">
                <scope line="763"/>
            </method>
            <javadoc line="768">
                {@inheritDoc}                
            </javadoc>
            <method name="combine" type="ArrayRealVector" line="771">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="y" type="RealVector"/>
                </params>
            </method>
            <javadoc line="774">
                {@inheritDoc}                
            </javadoc>
            <method name="combineToSelf" type="ArrayRealVector" line="777">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="y" type="RealVector"/>
                </params>
                <scope line="778">
                    <declaration name="yData" type="double[]" line="779"/>
                    <scope line="781"/>
                </scope>
                <scope line="785">
                    <scope line="787"/>
                </scope>
            </method>
            <javadoc line="793">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="796">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                </params>
                <scope line="798"/>
            </method>
            <javadoc line="803">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="806">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="809"/>
            </method>
            <javadoc line="814">
                {@inheritDoc}In this implementation, the optimized order is the default order.                
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="817">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                </params>
            </method>
            <javadoc line="820">
                {@inheritDoc}In this implementation, the optimized order is the default order.                
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="823">
                <params>
                    <param name="visitor" type="RealVectorPreservingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="826">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="829">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                </params>
                <scope line="831"/>
            </method>
            <javadoc line="836">
                {@inheritDoc}                
            </javadoc>
            <method name="walkInDefaultOrder" type="double" line="839">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="842"/>
            </method>
            <javadoc line="847">
                {@inheritDoc}In this implementation, the optimized order is the default order.                
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="850">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                </params>
            </method>
            <javadoc line="853">
                {@inheritDoc}In this implementation, the optimized order is the default order.                
            </javadoc>
            <method name="walkInOptimizedOrder" type="double" line="856">
                <params>
                    <param name="visitor" type="RealVectorChangingVisitor"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
        </class>
    </source>