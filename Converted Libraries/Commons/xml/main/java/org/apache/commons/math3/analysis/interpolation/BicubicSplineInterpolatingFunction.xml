<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.analysis.BivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="BicubicSplineInterpolatingFunction" line="26">
            <implements interface="BivariateFunction"/>
            <javadoc line="26">
                Function that implements the
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Bicubic_interpolation&quot;&gt;
                  bicubic spline interpolation&lt;/a&gt;.                
                <since>
                    2.1                    
                </since>
                <version>
                    $Id: BicubicSplineInterpolatingFunction.java 1379904 2012-09-01 23:54:52Z erans $                    
                </version>
            </javadoc>
            <declaration name="AINV" type="double[][]" line="36"/>
            <javadoc line="36">
                Matrix to compute the spline coefficients from the function values
                  and function derivatives values                
            </javadoc>
            <declaration name="xval" type="double[]" line="59"/>
            <javadoc line="59">
                Samples x-coordinates                
            </javadoc>
            <declaration name="yval" type="double[]" line="61"/>
            <javadoc line="61">
                Samples y-coordinates                
            </javadoc>
            <declaration name="splines" type="BicubicSplineFunction[][]" line="63"/>
            <javadoc line="63">
                Set of cubic splines patching the whole data grid                
            </javadoc>
            <declaration name="partialDerivatives" type="BivariateFunction[][][]" line="65"/>
            <javadoc line="65">
                Partial derivatives
                  The value of the first index determines the kind of derivatives:
                  0 = first partial derivatives wrt x
                  1 = first partial derivatives wrt y
                  2 = second partial derivatives wrt x
                  3 = second partial derivatives wrt y
                  4 = cross partial derivatives                
            </javadoc>
            <javadoc line="76">
                @param x Sample values of the x-coordinate, in increasing order.                
                <param>
                    y Sample values of the y-coordinate, in increasing order.                    
                </param>
                <param>
                    f Values of the function on every grid point.                    
                </param>
                <param>
                    dFdX Values of the partial derivative of function with respect
                      to x on every grid point.                    
                </param>
                <param>
                    dFdY Values of the partial derivative of function with respect
                      to y on every grid point.                    
                </param>
                <param>
                    d2FdXdY Values of the cross partial derivative of function on
                      every grid point.                    
                </param>
                <throws>
                    DimensionMismatchException if the various arrays do not contain
                      the expected number of elements.                    
                </throws>
                <throws>
                    NonMonotonicSequenceException if {@code x} or {@code y} are
                      not strictly increasing.                    
                </throws>
                <throws>
                    NoDataException if any of the arrays has zero length.                    
                </throws>
            </javadoc>
            <method name="BicubicSplineInterpolatingFunction" type="constructor" line="100">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                    <param name="f" type="double[][]"/>
                    <param name="dFdX" type="double[][]"/>
                    <param name="dFdY" type="double[][]"/>
                    <param name="d2FdXdY" type="double[][]"/>
                </params>
                <declaration name="xLen" type="int" line="101"/>
                <declaration name="yLen" type="int" line="102"/>
                <scope line="104"/>
                <scope line="107"/>
                <scope line="110"/>
                <scope line="113"/>
                <scope line="116"/>
                <declaration name="lastI" type="int" line="126"/>
                <declaration name="lastJ" type="int" line="127"/>
                <scope line="130">
                    <scope line="131"/>
                    <scope line="134"/>
                    <scope line="137"/>
                    <scope line="140"/>
                    <declaration name="ip1" type="int" line="143"/>
                    <scope line="144">
                        <declaration name="jp1" type="int" line="145"/>
                        <declaration name="beta" type="double[]" line="146"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="158">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="162">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="i" type="int" line="163"/>
                <scope line="164"/>
                <declaration name="j" type="int" line="167"/>
                <scope line="168"/>
                <declaration name="xN" type="double" line="172"/>
                <declaration name="yN" type="double" line="173"/>
            </method>
            <javadoc line="178">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the first partial derivative with
                      respect to x.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeX" type="double" line="188">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="191">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the first partial derivative with
                      respect to y.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeY" type="double" line="201">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="204">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the second partial derivative with
                      respect to x.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeXX" type="double" line="214">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="217">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the second partial derivative with
                      respect to y.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeYY" type="double" line="227">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="230">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the second partial cross-derivative.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeXY" type="double" line="239">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="243">
                @param which First index in {@link #partialDerivatives}.                
                <param>
                    x x-coordinate.                    
                </param>
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the selected partial derivative.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivative" type="double" line="253">
                <params>
                    <param name="which" type="int"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="254"/>
                <declaration name="i" type="int" line="258"/>
                <scope line="259"/>
                <declaration name="j" type="int" line="262"/>
                <scope line="263"/>
                <declaration name="xN" type="double" line="267"/>
                <declaration name="yN" type="double" line="268"/>
            </method>
            <javadoc line="273">
                Compute all partial derivatives.                
            </javadoc>
            <method name="computePartialDerivatives" type="void" line="276">
                <declaration name="lastI" type="int" line="277"/>
                <declaration name="lastJ" type="int" line="278"/>
                <scope line="281">
                    <scope line="282">
                        <declaration name="f" type="BicubicSplineFunction" line="283"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="293">
                @param c Coordinate.                
                <param>
                    val Coordinate samples.                    
                </param>
                <return>
                    the index in {@code val} corresponding to the interval
                      containing {@code c}, or {@code -1} if {@code c} is out of the
                      range defined by the boundary values of {@code val}.                    
                </return>
            </javadoc>
            <method name="searchIndex" type="int" line="300">
                <params>
                    <param name="c" type="double"/>
                    <param name="val" type="double[]"/>
                </params>
                <scope line="301"/>
                <declaration name="max" type="int" line="305"/>
                <scope line="306">
                    <scope line="307"/>
                </scope>
            </method>
            <javadoc line="315">
                Compute the spline coefficients from the list of function values and
                  function partial derivatives values at the four corners of a grid
                  element. They must be specified in the following order:
                  &lt;ul&gt;
                  &lt;li&gt;f(0,0)&lt;/li&gt;
                  &lt;li&gt;f(1,0)&lt;/li&gt;
                  &lt;li&gt;f(0,1)&lt;/li&gt;
                  &lt;li&gt;f(1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,1)&lt;/li&gt;
                  &lt;/ul&gt;
                  where the subscripts indicate the partial derivative with respect to
                  the corresponding variable(s).                
                <param>
                    beta List of function values and function partial derivatives
                      values.                    
                </param>
                <return>
                    the spline coefficients.                    
                </return>
            </javadoc>
            <method name="computeSplineCoefficients" type="double[]" line="344">
                <params>
                    <param name="beta" type="double[]"/>
                </params>
                <declaration name="a" type="double[]" line="345"/>
                <scope line="347">
                    <declaration name="result" type="double" line="348"/>
                    <declaration name="row" type="double[]" line="349"/>
                    <scope line="350"/>
                </scope>
            </method>
        </class>
        <class name="BicubicSplineFunction" line="360">
            <implements interface="BivariateFunction"/>
            <javadoc line="360">
                2D-spline function.                
                <version>
                    $Id: BicubicSplineInterpolatingFunction.java 1379904 2012-09-01 23:54:52Z erans $                    
                </version>
            </javadoc>
            <declaration name="N" type="short" line="368"/>
            <javadoc line="368">
                Number of points.                
            </javadoc>
            <declaration name="a" type="double[][]" line="371"/>
            <javadoc line="371">
                Coefficients                
            </javadoc>
            <declaration name="partialDerivativeX" type="BivariateFunction" line="374"/>
            <javadoc line="374">
                First partial derivative along x.                
            </javadoc>
            <declaration name="partialDerivativeY" type="BivariateFunction" line="377"/>
            <javadoc line="377">
                First partial derivative along y.                
            </javadoc>
            <declaration name="partialDerivativeXX" type="BivariateFunction" line="380"/>
            <javadoc line="380">
                Second partial derivative along x.                
            </javadoc>
            <declaration name="partialDerivativeYY" type="BivariateFunction" line="383"/>
            <javadoc line="383">
                Second partial derivative along y.                
            </javadoc>
            <declaration name="partialDerivativeXY" type="BivariateFunction" line="386"/>
            <javadoc line="386">
                Second crossed partial derivative.                
            </javadoc>
            <javadoc line="389">
                Simple constructor.                
                <param>
                    a Spline coefficients                    
                </param>
            </javadoc>
            <method name="BicubicSplineFunction" type="constructor" line="393">
                <params>
                    <param name="a" type="double[]"/>
                </params>
                <scope line="395">
                    <scope line="396"/>
                </scope>
            </method>
            <javadoc line="402">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="405">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="406"/>
                <scope line="409"/>
                <declaration name="x2" type="double" line="413"/>
                <declaration name="x3" type="double" line="414"/>
                <declaration name="pX" type="double[]" line="415"/>
                <declaration name="y2" type="double" line="417"/>
                <declaration name="y3" type="double" line="418"/>
                <declaration name="pY" type="double[]" line="419"/>
            </method>
            <javadoc line="424">
                Compute the value of the bicubic polynomial.                
                <param>
                    pX Powers of the x-coordinate.                    
                </param>
                <param>
                    pY Powers of the y-coordinate.                    
                </param>
                <param>
                    coeff Spline coefficients.                    
                </param>
                <return>
                    the interpolated value.                    
                </return>
            </javadoc>
            <method name="apply" type="double" line="432">
                <params>
                    <param name="pX" type="double[]"/>
                    <param name="pY" type="double[]"/>
                    <param name="coeff" type="double[][]"/>
                </params>
                <declaration name="result" type="double" line="433"/>
                <scope line="434">
                    <scope line="435"/>
                </scope>
            </method>
            <javadoc line="443">
                @return the partial derivative wrt {@code x}.                
            </javadoc>
            <method name="partialDerivativeX" type="BivariateFunction" line="446">
                <scope line="447"/>
            </method>
            <javadoc line="453">
                @return the partial derivative wrt {@code y}.                
            </javadoc>
            <method name="partialDerivativeY" type="BivariateFunction" line="456">
                <scope line="457"/>
            </method>
            <javadoc line="463">
                @return the second partial derivative wrt {@code x}.                
            </javadoc>
            <method name="partialDerivativeXX" type="BivariateFunction" line="466">
                <scope line="467"/>
            </method>
            <javadoc line="473">
                @return the second partial derivative wrt {@code y}.                
            </javadoc>
            <method name="partialDerivativeYY" type="BivariateFunction" line="476">
                <scope line="477"/>
            </method>
            <javadoc line="483">
                @return the second partial cross-derivative.                
            </javadoc>
            <method name="partialDerivativeXY" type="BivariateFunction" line="486">
                <scope line="487"/>
            </method>
            <javadoc line="494">
                Compute all partial derivatives functions.                
            </javadoc>
            <method name="computePartialDerivatives" type="void" line="497">
                <declaration name="aX" type="double[][]" line="498"/>
                <declaration name="aY" type="double[][]" line="499"/>
                <declaration name="aXX" type="double[][]" line="500"/>
                <declaration name="aYY" type="double[][]" line="501"/>
                <declaration name="aXY" type="double[][]" line="502"/>
                <scope line="504">
                    <scope line="505">
                        <declaration name="c" type="double" line="506"/>
                    </scope>
                </scope>
                <anonymous_class line="515">
                    <method name="value" type="double" line="516">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="517"/>
                        <declaration name="pX" type="double[]" line="518"/>
                        <declaration name="y2" type="double" line="520"/>
                        <declaration name="y3" type="double" line="521"/>
                        <declaration name="pY" type="double[]" line="522"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="527">
                    <method name="value" type="double" line="528">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="529"/>
                        <declaration name="x3" type="double" line="530"/>
                        <declaration name="pX" type="double[]" line="531"/>
                        <declaration name="y2" type="double" line="533"/>
                        <declaration name="pY" type="double[]" line="534"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="539">
                    <method name="value" type="double" line="540">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="pX" type="double[]" line="541"/>
                        <declaration name="y2" type="double" line="543"/>
                        <declaration name="y3" type="double" line="544"/>
                        <declaration name="pY" type="double[]" line="545"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="550">
                    <method name="value" type="double" line="551">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="552"/>
                        <declaration name="x3" type="double" line="553"/>
                        <declaration name="pX" type="double[]" line="554"/>
                        <declaration name="pY" type="double[]" line="556"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="561">
                    <method name="value" type="double" line="562">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="563"/>
                        <declaration name="pX" type="double[]" line="564"/>
                        <declaration name="y2" type="double" line="566"/>
                        <declaration name="pY" type="double[]" line="567"/>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>