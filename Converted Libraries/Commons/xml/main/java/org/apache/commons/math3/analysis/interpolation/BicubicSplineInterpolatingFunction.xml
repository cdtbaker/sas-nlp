<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.analysis.BivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="BicubicSplineInterpolatingFunction" line="8">
            <implements interface="BivariateFunction"/>
            <javadoc line="8">
                Function that implements the
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Bicubic_interpolation&quot;&gt;
                  bicubic spline interpolation&lt;/a&gt;.                
                <since>
                    2.1                    
                </since>
                <version>
                    $Id: BicubicSplineInterpolatingFunction.java 1379904 2012-09-01 23:54:52Z erans $                    
                </version>
            </javadoc>
            <declaration name="AINV" type="double[][]" line="16"/>
            <javadoc line="16">
                Matrix to compute the spline coefficients from the function values
                  and function derivatives values                
            </javadoc>
            <declaration name="xval" type="double[]" line="21"/>
            <javadoc line="21">
                Samples x-coordinates                
            </javadoc>
            <declaration name="yval" type="double[]" line="25"/>
            <javadoc line="25">
                Samples y-coordinates                
            </javadoc>
            <declaration name="splines" type="BicubicSplineFunction[][]" line="29"/>
            <javadoc line="29">
                Set of cubic splines patching the whole data grid                
            </javadoc>
            <declaration name="partialDerivatives" type="BivariateFunction[][][]" line="33"/>
            <javadoc line="33">
                Partial derivatives
                  The value of the first index determines the kind of derivatives:
                  0 = first partial derivatives wrt x
                  1 = first partial derivatives wrt y
                  2 = second partial derivatives wrt x
                  3 = second partial derivatives wrt y
                  4 = cross partial derivatives                
            </javadoc>
            <javadoc line="43">
                @param x Sample values of the x-coordinate, in increasing order.                
                <param>
                    y Sample values of the y-coordinate, in increasing order.                    
                </param>
                <param>
                    f Values of the function on every grid point.                    
                </param>
                <param>
                    dFdX Values of the partial derivative of function with respect
                      to x on every grid point.                    
                </param>
                <param>
                    dFdY Values of the partial derivative of function with respect
                      to y on every grid point.                    
                </param>
                <param>
                    d2FdXdY Values of the cross partial derivative of function on
                      every grid point.                    
                </param>
                <throws>
                    DimensionMismatchException if the various arrays do not contain
                      the expected number of elements.                    
                </throws>
                <throws>
                    NonMonotonicSequenceException if {@code x} or {@code y} are
                      not strictly increasing.                    
                </throws>
                <throws>
                    NoDataException if any of the arrays has zero length.                    
                </throws>
            </javadoc>
            <method name="BicubicSplineInterpolatingFunction" type="constructor" line="59">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                    <param name="f" type="double[][]"/>
                    <param name="dFdX" type="double[][]"/>
                    <param name="dFdY" type="double[][]"/>
                    <param name="d2FdXdY" type="double[][]"/>
                </params>
                <declaration name="xLen" type="int" line="60"/>
                <declaration name="yLen" type="int" line="61"/>
                <scope line="62"/>
                <scope line="65"/>
                <scope line="68"/>
                <scope line="71"/>
                <scope line="74"/>
                <declaration name="lastI" type="int" line="81"/>
                <declaration name="lastJ" type="int" line="82"/>
                <scope line="84">
                    <scope line="85"/>
                    <scope line="88"/>
                    <scope line="91"/>
                    <scope line="94"/>
                    <declaration name="ip1" type="int" line="97"/>
                    <scope line="98">
                        <declaration name="jp1" type="int" line="99"/>
                        <declaration name="beta" type="double[]" line="100"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="105">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="108">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="i" type="int" line="109"/>
                <scope line="110"/>
                <declaration name="j" type="int" line="113"/>
                <scope line="114"/>
                <declaration name="xN" type="double" line="117"/>
                <declaration name="yN" type="double" line="118"/>
            </method>
            <javadoc line="121">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the first partial derivative with
                      respect to x.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeX" type="double" line="129">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="132">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the first partial derivative with
                      respect to y.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeY" type="double" line="140">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="143">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the second partial derivative with
                      respect to x.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeXX" type="double" line="151">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="154">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the second partial derivative with
                      respect to y.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeYY" type="double" line="162">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="165">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the second partial cross-derivative.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeXY" type="double" line="172">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="175">
                @param which First index in {@link #partialDerivatives}.                
                <param>
                    x x-coordinate.                    
                </param>
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the selected partial derivative.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivative" type="double" line="183">
                <params>
                    <param name="which" type="int"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="184"/>
                <declaration name="i" type="int" line="187"/>
                <scope line="188"/>
                <declaration name="j" type="int" line="191"/>
                <scope line="192"/>
                <declaration name="xN" type="double" line="195"/>
                <declaration name="yN" type="double" line="196"/>
            </method>
            <javadoc line="199">
                Compute all partial derivatives.                
            </javadoc>
            <method name="computePartialDerivatives" type="void" line="202">
                <declaration name="lastI" type="int" line="203"/>
                <declaration name="lastJ" type="int" line="204"/>
                <scope line="206">
                    <scope line="207">
                        <declaration name="f" type="BicubicSplineFunction" line="208"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="217">
                @param c Coordinate.                
                <param>
                    val Coordinate samples.                    
                </param>
                <return>
                    the index in {@code val} corresponding to the interval
                      containing {@code c}, or {@code -1} if {@code c} is out of the
                      range defined by the boundary values of {@code val}.                    
                </return>
            </javadoc>
            <method name="searchIndex" type="int" line="224">
                <params>
                    <param name="c" type="double"/>
                    <param name="val" type="double[]"/>
                </params>
                <scope line="225"/>
                <declaration name="max" type="int" line="228"/>
                <scope line="229">
                    <scope line="230"/>
                </scope>
            </method>
            <javadoc line="236">
                Compute the spline coefficients from the list of function values and
                  function partial derivatives values at the four corners of a grid
                  element. They must be specified in the following order:
                  &lt;ul&gt;
                  &lt;li&gt;f(0,0)&lt;/li&gt;
                  &lt;li&gt;f(1,0)&lt;/li&gt;
                  &lt;li&gt;f(0,1)&lt;/li&gt;
                  &lt;li&gt;f(1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,1)&lt;/li&gt;
                  &lt;/ul&gt;
                  where the subscripts indicate the partial derivative with respect to
                  the corresponding variable(s).                
                <param>
                    beta List of function values and function partial derivatives
                      values.                    
                </param>
                <return>
                    the spline coefficients.                    
                </return>
            </javadoc>
            <method name="computeSplineCoefficients" type="double[]" line="264">
                <params>
                    <param name="beta" type="double[]"/>
                </params>
                <declaration name="a" type="double[]" line="265"/>
                <scope line="266">
                    <declaration name="result" type="double" line="267"/>
                    <declaration name="row" type="double[]" line="268"/>
                    <scope line="269"/>
                </scope>
            </method>
        </class>
        <class name="BicubicSplineFunction" line="277">
            <implements interface="BivariateFunction"/>
            <javadoc line="277">
                2D-spline function.                
                <version>
                    $Id: BicubicSplineInterpolatingFunction.java 1379904 2012-09-01 23:54:52Z erans $                    
                </version>
            </javadoc>
            <declaration name="N" type="short" line="282"/>
            <javadoc line="282">
                Number of points.                
            </javadoc>
            <declaration name="a" type="double[][]" line="286"/>
            <javadoc line="286">
                Coefficients                
            </javadoc>
            <declaration name="partialDerivativeX" type="BivariateFunction" line="290"/>
            <javadoc line="290">
                First partial derivative along x.                
            </javadoc>
            <declaration name="partialDerivativeY" type="BivariateFunction" line="294"/>
            <javadoc line="294">
                First partial derivative along y.                
            </javadoc>
            <declaration name="partialDerivativeXX" type="BivariateFunction" line="298"/>
            <javadoc line="298">
                Second partial derivative along x.                
            </javadoc>
            <declaration name="partialDerivativeYY" type="BivariateFunction" line="302"/>
            <javadoc line="302">
                Second partial derivative along y.                
            </javadoc>
            <declaration name="partialDerivativeXY" type="BivariateFunction" line="306"/>
            <javadoc line="306">
                Second crossed partial derivative.                
            </javadoc>
            <javadoc line="310">
                Simple constructor.                
                <param>
                    a Spline coefficients                    
                </param>
            </javadoc>
            <method name="BicubicSplineFunction" type="constructor" line="314">
                <params>
                    <param name="a" type="double[]"/>
                </params>
                <scope line="316">
                    <scope line="317"/>
                </scope>
            </method>
            <javadoc line="322">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="325">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="326"/>
                <scope line="329"/>
                <declaration name="x2" type="double" line="332"/>
                <declaration name="x3" type="double" line="333"/>
                <declaration name="pX" type="double[]" line="334"/>
                <declaration name="y2" type="double" line="335"/>
                <declaration name="y3" type="double" line="336"/>
                <declaration name="pY" type="double[]" line="337"/>
            </method>
            <javadoc line="340">
                Compute the value of the bicubic polynomial.                
                <param>
                    pX Powers of the x-coordinate.                    
                </param>
                <param>
                    pY Powers of the y-coordinate.                    
                </param>
                <param>
                    coeff Spline coefficients.                    
                </param>
                <return>
                    the interpolated value.                    
                </return>
            </javadoc>
            <method name="apply" type="double" line="347">
                <params>
                    <param name="pX" type="double[]"/>
                    <param name="pY" type="double[]"/>
                    <param name="coeff" type="double[][]"/>
                </params>
                <declaration name="result" type="double" line="348"/>
                <scope line="349">
                    <scope line="350"/>
                </scope>
            </method>
            <javadoc line="356">
                @return the partial derivative wrt {@code x}.                
            </javadoc>
            <method name="partialDerivativeX" type="BivariateFunction" line="359">
                <scope line="360"/>
            </method>
            <javadoc line="365">
                @return the partial derivative wrt {@code y}.                
            </javadoc>
            <method name="partialDerivativeY" type="BivariateFunction" line="368">
                <scope line="369"/>
            </method>
            <javadoc line="374">
                @return the second partial derivative wrt {@code x}.                
            </javadoc>
            <method name="partialDerivativeXX" type="BivariateFunction" line="377">
                <scope line="378"/>
            </method>
            <javadoc line="383">
                @return the second partial derivative wrt {@code y}.                
            </javadoc>
            <method name="partialDerivativeYY" type="BivariateFunction" line="386">
                <scope line="387"/>
            </method>
            <javadoc line="392">
                @return the second partial cross-derivative.                
            </javadoc>
            <method name="partialDerivativeXY" type="BivariateFunction" line="395">
                <scope line="396"/>
            </method>
            <javadoc line="401">
                Compute all partial derivatives functions.                
            </javadoc>
            <method name="computePartialDerivatives" type="void" line="404">
                <declaration name="aX" type="double[][]" line="405"/>
                <declaration name="aY" type="double[][]" line="406"/>
                <declaration name="aXX" type="double[][]" line="407"/>
                <declaration name="aYY" type="double[][]" line="408"/>
                <declaration name="aXY" type="double[][]" line="409"/>
                <scope line="410">
                    <scope line="411">
                        <declaration name="c" type="double" line="412"/>
                    </scope>
                </scope>
                <anonymous_class line="420">
                    <method name="value" type="double" line="421">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="422"/>
                        <declaration name="pX" type="double[]" line="423"/>
                        <declaration name="y2" type="double" line="424"/>
                        <declaration name="y3" type="double" line="425"/>
                        <declaration name="pY" type="double[]" line="426"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="431">
                    <method name="value" type="double" line="432">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="433"/>
                        <declaration name="x3" type="double" line="434"/>
                        <declaration name="pX" type="double[]" line="435"/>
                        <declaration name="y2" type="double" line="436"/>
                        <declaration name="pY" type="double[]" line="437"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="442">
                    <method name="value" type="double" line="443">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="pX" type="double[]" line="444"/>
                        <declaration name="y2" type="double" line="445"/>
                        <declaration name="y3" type="double" line="446"/>
                        <declaration name="pY" type="double[]" line="447"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="452">
                    <method name="value" type="double" line="453">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="454"/>
                        <declaration name="x3" type="double" line="455"/>
                        <declaration name="pX" type="double[]" line="456"/>
                        <declaration name="pY" type="double[]" line="457"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="462">
                    <method name="value" type="double" line="463">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="464"/>
                        <declaration name="pX" type="double[]" line="465"/>
                        <declaration name="y2" type="double" line="466"/>
                        <declaration name="pY" type="double[]" line="467"/>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>