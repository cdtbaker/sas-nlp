<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.analysis.BivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="BicubicSplineInterpolatingFunction" line="27">
            <implements interface="BivariateFunction"/>
            <javadoc line="27">
                Function that implements the
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Bicubic_interpolation&quot;&gt;
                  bicubic spline interpolation&lt;/a&gt;.                
                <since>
                    2.1                    
                </since>
                <version>
                    $Id: BicubicSplineInterpolatingFunction.java 1512547 2013-08-10 01:13:38Z erans $                    
                </version>
            </javadoc>
            <declaration name="NUM_COEFF" type="int" line="37"/>
            <javadoc line="37">
                Number of coefficients.                
            </javadoc>
            <declaration name="AINV" type="double[][]" line="39"/>
            <javadoc line="39">
                Matrix to compute the spline coefficients from the function values
                  and function derivatives values                
            </javadoc>
            <declaration name="xval" type="double[]" line="62"/>
            <javadoc line="62">
                Samples x-coordinates                
            </javadoc>
            <declaration name="yval" type="double[]" line="64"/>
            <javadoc line="64">
                Samples y-coordinates                
            </javadoc>
            <declaration name="splines" type="BicubicSplineFunction[][]" line="66"/>
            <javadoc line="66">
                Set of cubic splines patching the whole data grid                
            </javadoc>
            <declaration name="partialDerivatives" type="BivariateFunction[][][]" line="68"/>
            <javadoc line="68">
                Partial derivatives
                  The value of the first index determines the kind of derivatives:
                  0 = first partial derivatives wrt x
                  1 = first partial derivatives wrt y
                  2 = second partial derivatives wrt x
                  3 = second partial derivatives wrt y
                  4 = cross partial derivatives                
            </javadoc>
            <javadoc line="79">
                @param x Sample values of the x-coordinate, in increasing order.                
                <param>
                    y Sample values of the y-coordinate, in increasing order.                    
                </param>
                <param>
                    f Values of the function on every grid point.                    
                </param>
                <param>
                    dFdX Values of the partial derivative of function with respect
                      to x on every grid point.                    
                </param>
                <param>
                    dFdY Values of the partial derivative of function with respect
                      to y on every grid point.                    
                </param>
                <param>
                    d2FdXdY Values of the cross partial derivative of function on
                      every grid point.                    
                </param>
                <throws>
                    DimensionMismatchException if the various arrays do not contain
                      the expected number of elements.                    
                </throws>
                <throws>
                    NonMonotonicSequenceException if {@code x} or {@code y} are
                      not strictly increasing.                    
                </throws>
                <throws>
                    NoDataException if any of the arrays has zero length.                    
                </throws>
            </javadoc>
            <method name="BicubicSplineInterpolatingFunction" type="constructor" line="103">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                    <param name="f" type="double[][]"/>
                    <param name="dFdX" type="double[][]"/>
                    <param name="dFdY" type="double[][]"/>
                    <param name="d2FdXdY" type="double[][]"/>
                </params>
                <declaration name="xLen" type="int" line="104"/>
                <declaration name="yLen" type="int" line="105"/>
                <scope line="107"/>
                <scope line="110"/>
                <scope line="113"/>
                <scope line="116"/>
                <scope line="119"/>
                <declaration name="lastI" type="int" line="129"/>
                <declaration name="lastJ" type="int" line="130"/>
                <scope line="133">
                    <scope line="134"/>
                    <scope line="137"/>
                    <scope line="140"/>
                    <scope line="143"/>
                    <declaration name="ip1" type="int" line="146"/>
                    <scope line="147">
                        <declaration name="jp1" type="int" line="148"/>
                        <declaration name="beta" type="double[]" line="149"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="161">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="165">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="i" type="int" line="166"/>
                <declaration name="j" type="int" line="167"/>
                <declaration name="xN" type="double" line="169"/>
                <declaration name="yN" type="double" line="170"/>
            </method>
            <javadoc line="175">
                Indicates whether a point is within the interpolation range.                
                <param>
                    x First coordinate.                    
                </param>
                <param>
                    y Second coordinate.                    
                </param>
                <return>
                    {@code true} if (x, y) is a valid point.                    
                </return>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="isValidPoint" type="boolean" line="183">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="187"/>
                <scope line="189"/>
            </method>
            <javadoc line="194">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the first partial derivative with
                      respect to x.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeX" type="double" line="204">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="207">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the first partial derivative with
                      respect to y.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeY" type="double" line="217">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="220">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the second partial derivative with
                      respect to x.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeXX" type="double" line="230">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="233">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the second partial derivative with
                      respect to y.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeYY" type="double" line="243">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="246">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the second partial cross-derivative.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivativeXY" type="double" line="255">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="259">
                @param which First index in {@link #partialDerivatives}.                
                <param>
                    x x-coordinate.                    
                </param>
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the value at point (x, y) of the selected partial derivative.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x} (resp. {@code y}) is outside
                      the range defined by the boundary values of {@code xval} (resp.{@code yval}).                    
                </throws>
            </javadoc>
            <method name="partialDerivative" type="double" line="269">
                <params>
                    <param name="which" type="int"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="270"/>
                <declaration name="i" type="int" line="274"/>
                <declaration name="j" type="int" line="275"/>
                <declaration name="xN" type="double" line="277"/>
                <declaration name="yN" type="double" line="278"/>
            </method>
            <javadoc line="283">
                Compute all partial derivatives.                
            </javadoc>
            <method name="computePartialDerivatives" type="void" line="286">
                <declaration name="lastI" type="int" line="287"/>
                <declaration name="lastJ" type="int" line="288"/>
                <scope line="291">
                    <scope line="292">
                        <declaration name="f" type="BicubicSplineFunction" line="293"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="303">
                @param c Coordinate.                
                <param>
                    val Coordinate samples.                    
                </param>
                <return>
                    the index in {@code val} corresponding to the interval
                      containing {@code c}.                    
                </return>
                <throws>
                    OutOfRangeException if {@code c} is out of the
                      range defined by the boundary values of {@code val}.                    
                </throws>
            </javadoc>
            <method name="searchIndex" type="int" line="311">
                <params>
                    <param name="c" type="double"/>
                    <param name="val" type="double[]"/>
                </params>
                <comment line="321">
                    &quot;c&quot; in within an interpolation sub-interval: Return the
                     index of the sample at the lower end of the sub-interval.                    
                </comment>
                <comment line="327">
                    &quot;c&quot; is the last sample of the range: Return the index
                     of the sample at the lower end of the last sub-interval.                    
                </comment>
                <comment line="332">
                    &quot;c&quot; is another sample point.                    
                </comment>
                <declaration name="r" type="int" line="312"/>
                <scope line="315"/>
                <scope line="319"/>
                <declaration name="last" type="int" line="324"/>
                <scope line="325"/>
            </method>
            <javadoc line="335">
                Compute the spline coefficients from the list of function values and
                  function partial derivatives values at the four corners of a grid
                  element. They must be specified in the following order:
                  &lt;ul&gt;
                  &lt;li&gt;f(0,0)&lt;/li&gt;
                  &lt;li&gt;f(1,0)&lt;/li&gt;
                  &lt;li&gt;f(0,1)&lt;/li&gt;
                  &lt;li&gt;f(1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,0)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,1)&lt;/li&gt;
                  &lt;/ul&gt;
                  where the subscripts indicate the partial derivative with respect to
                  the corresponding variable(s).                
                <param>
                    beta List of function values and function partial derivatives
                      values.                    
                </param>
                <return>
                    the spline coefficients.                    
                </return>
            </javadoc>
            <method name="computeSplineCoefficients" type="double[]" line="364">
                <params>
                    <param name="beta" type="double[]"/>
                </params>
                <declaration name="a" type="double[]" line="365"/>
                <scope line="367">
                    <declaration name="result" type="double" line="368"/>
                    <declaration name="row" type="double[]" line="369"/>
                    <scope line="370"/>
                </scope>
            </method>
        </class>
        <class name="BicubicSplineFunction" line="380">
            <implements interface="BivariateFunction"/>
            <javadoc line="380">
                2D-spline function.                
                <version>
                    $Id: BicubicSplineInterpolatingFunction.java 1512547 2013-08-10 01:13:38Z erans $                    
                </version>
            </javadoc>
            <declaration name="N" type="short" line="388"/>
            <javadoc line="388">
                Number of points.                
            </javadoc>
            <declaration name="a" type="double[][]" line="391"/>
            <javadoc line="391">
                Coefficients                
            </javadoc>
            <declaration name="partialDerivativeX" type="BivariateFunction" line="394"/>
            <javadoc line="394">
                First partial derivative along x.                
            </javadoc>
            <declaration name="partialDerivativeY" type="BivariateFunction" line="397"/>
            <javadoc line="397">
                First partial derivative along y.                
            </javadoc>
            <declaration name="partialDerivativeXX" type="BivariateFunction" line="400"/>
            <javadoc line="400">
                Second partial derivative along x.                
            </javadoc>
            <declaration name="partialDerivativeYY" type="BivariateFunction" line="403"/>
            <javadoc line="403">
                Second partial derivative along y.                
            </javadoc>
            <declaration name="partialDerivativeXY" type="BivariateFunction" line="406"/>
            <javadoc line="406">
                Second crossed partial derivative.                
            </javadoc>
            <javadoc line="409">
                Simple constructor.                
                <param>
                    a Spline coefficients                    
                </param>
            </javadoc>
            <method name="BicubicSplineFunction" type="constructor" line="413">
                <params>
                    <param name="a" type="double[]"/>
                </params>
                <scope line="415">
                    <scope line="416"/>
                </scope>
            </method>
            <javadoc line="422">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="425">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="426"/>
                <scope line="429"/>
                <declaration name="x2" type="double" line="433"/>
                <declaration name="x3" type="double" line="434"/>
                <declaration name="pX" type="double[]" line="435"/>
                <declaration name="y2" type="double" line="437"/>
                <declaration name="y3" type="double" line="438"/>
                <declaration name="pY" type="double[]" line="439"/>
            </method>
            <javadoc line="444">
                Compute the value of the bicubic polynomial.                
                <param>
                    pX Powers of the x-coordinate.                    
                </param>
                <param>
                    pY Powers of the y-coordinate.                    
                </param>
                <param>
                    coeff Spline coefficients.                    
                </param>
                <return>
                    the interpolated value.                    
                </return>
            </javadoc>
            <method name="apply" type="double" line="452">
                <params>
                    <param name="pX" type="double[]"/>
                    <param name="pY" type="double[]"/>
                    <param name="coeff" type="double[][]"/>
                </params>
                <declaration name="result" type="double" line="453"/>
                <scope line="454">
                    <scope line="455"/>
                </scope>
            </method>
            <javadoc line="463">
                @return the partial derivative wrt {@code x}.                
            </javadoc>
            <method name="partialDerivativeX" type="BivariateFunction" line="466">
                <scope line="467"/>
            </method>
            <javadoc line="473">
                @return the partial derivative wrt {@code y}.                
            </javadoc>
            <method name="partialDerivativeY" type="BivariateFunction" line="476">
                <scope line="477"/>
            </method>
            <javadoc line="483">
                @return the second partial derivative wrt {@code x}.                
            </javadoc>
            <method name="partialDerivativeXX" type="BivariateFunction" line="486">
                <scope line="487"/>
            </method>
            <javadoc line="493">
                @return the second partial derivative wrt {@code y}.                
            </javadoc>
            <method name="partialDerivativeYY" type="BivariateFunction" line="496">
                <scope line="497"/>
            </method>
            <javadoc line="503">
                @return the second partial cross-derivative.                
            </javadoc>
            <method name="partialDerivativeXY" type="BivariateFunction" line="506">
                <scope line="507"/>
            </method>
            <javadoc line="514">
                Compute all partial derivatives functions.                
            </javadoc>
            <method name="computePartialDerivatives" type="void" line="517">
                <declaration name="aX" type="double[][]" line="518"/>
                <declaration name="aY" type="double[][]" line="519"/>
                <declaration name="aXX" type="double[][]" line="520"/>
                <declaration name="aYY" type="double[][]" line="521"/>
                <declaration name="aXY" type="double[][]" line="522"/>
                <scope line="524">
                    <scope line="525">
                        <declaration name="c" type="double" line="526"/>
                    </scope>
                </scope>
                <anonymous_class line="535">
                    <method name="value" type="double" line="536">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="537"/>
                        <declaration name="pX" type="double[]" line="538"/>
                        <declaration name="y2" type="double" line="540"/>
                        <declaration name="y3" type="double" line="541"/>
                        <declaration name="pY" type="double[]" line="542"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="547">
                    <method name="value" type="double" line="548">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="549"/>
                        <declaration name="x3" type="double" line="550"/>
                        <declaration name="pX" type="double[]" line="551"/>
                        <declaration name="y2" type="double" line="553"/>
                        <declaration name="pY" type="double[]" line="554"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="559">
                    <method name="value" type="double" line="560">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="pX" type="double[]" line="561"/>
                        <declaration name="y2" type="double" line="563"/>
                        <declaration name="y3" type="double" line="564"/>
                        <declaration name="pY" type="double[]" line="565"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="570">
                    <method name="value" type="double" line="571">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="572"/>
                        <declaration name="x3" type="double" line="573"/>
                        <declaration name="pX" type="double[]" line="574"/>
                        <declaration name="pY" type="double[]" line="576"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="581">
                    <method name="value" type="double" line="582">
                        <params>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                        </params>
                        <declaration name="x2" type="double" line="583"/>
                        <declaration name="pX" type="double[]" line="584"/>
                        <declaration name="y2" type="double" line="586"/>
                        <declaration name="pY" type="double[]" line="587"/>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>