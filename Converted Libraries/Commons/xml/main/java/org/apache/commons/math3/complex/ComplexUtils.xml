<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.complex">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="ComplexUtils" line="5">
            <javadoc line="5">
                Static implementations of common{@link org.apache.commons.math3.complex.Complex} utilities functions.                
                <version>
                    $Id: ComplexUtils.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <javadoc line="10">
                Default constructor.                
            </javadoc>
            <method name="ComplexUtils" type="constructor" line="13"/>
            <javadoc line="15">
                Creates a complex number from the given polar representation.
                  &lt;p&gt;
                  The value returned is &lt;code&gt;r&amp;middot;e&lt;sup&gt;i&amp;middot;theta&lt;/sup&gt;&lt;/code&gt;,
                  computed as &lt;code&gt;r&amp;middot;cos(theta) + r&amp;middot;sin(theta)i&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  If either &lt;code&gt;r&lt;/code&gt; or &lt;code&gt;theta&lt;/code&gt; is NaN, or
                  &lt;code&gt;theta&lt;/code&gt; is infinite, {@link Complex#NaN} is returned.&lt;/p&gt;
                  &lt;p&gt;
                  If &lt;code&gt;r&lt;/code&gt; is infinite and &lt;code&gt;theta&lt;/code&gt; is finite,
                  infinite or NaN values may be returned in parts of the result, following
                  the rules for double arithmetic.&lt;pre&gt;
                  Examples:
                  &lt;code&gt;
                  polar2Complex(INFINITY, &amp;pi;/4) = INFINITY + INFINITY i
                  polar2Complex(INFINITY, 0) = INFINITY + NaN i
                  polar2Complex(INFINITY, -&amp;pi;/4) = INFINITY - INFINITY i
                  polar2Complex(INFINITY, 5&amp;pi;/4) = -INFINITY - INFINITY i &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;                
                <param>
                    r the modulus of the complex number to create                    
                </param>
                <param>
                    theta  the argument of the complex number to create                    
                </param>
                <return>
                    <code>r&middot;e<sup>i&middot;theta</sup></code>                    
                </return>
                <throws>
                    MathIllegalArgumentException if {@code r} is negative.                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="polar2Complex" type="Complex" line="39">
                <params>
                    <param name="r" type="double"/>
                    <param name="theta" type="double"/>
                </params>
                <scope line="40"/>
            </method>
            <javadoc line="45">
                Convert an array of primitive doubles to an array of {@code Complex} objects.                
                <param>
                    real Array of numbers to be converted to their {@code Complex}equivalent.                    
                </param>
                <return>
                    an array of {@code Complex} objects.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="convertToComplex" type="Complex[]" line="51">
                <params>
                    <param name="real" type="double[]"/>
                </params>
                <declaration name="c" type="Complex" line="52"/>
                <scope line="53"/>
            </method>
        </class>
    </source>