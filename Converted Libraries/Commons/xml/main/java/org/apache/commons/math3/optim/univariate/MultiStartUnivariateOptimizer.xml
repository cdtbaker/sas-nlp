<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.univariate">
        <import package="java.util.Arrays"/>
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <class name="MultiStartUnivariateOptimizer" line="11">
            <extends class="UnivariateOptimizer"/>
            <javadoc line="11">
                Special implementation of the {@link UnivariateOptimizer} interface
                  adding multi-start features to an existing optimizer.
                  &lt;br/&gt;
                  This class wraps an optimizer in order to use it several times in
                  turn with different starting points (trying to avoid being trapped
                  in a local extremum when looking for a global one).                
                <version>
                    $Id: MultiStartUnivariateOptimizer.java 1435539 2013-01-19 13:27:24Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="optimizer" type="UnivariateOptimizer" line="22"/>
            <javadoc line="22">
                Underlying classical optimizer.                
            </javadoc>
            <declaration name="totalEvaluations" type="int" line="26"/>
            <javadoc line="26">
                Number of evaluations already performed for all starts.                
            </javadoc>
            <declaration name="starts" type="int" line="30"/>
            <javadoc line="30">
                Number of starts to go.                
            </javadoc>
            <declaration name="generator" type="RandomGenerator" line="34"/>
            <javadoc line="34">
                Random generator for multi-start.                
            </javadoc>
            <declaration name="optima" type="UnivariatePointValuePair[]" line="38"/>
            <javadoc line="38">
                Found optima.                
            </javadoc>
            <declaration name="optimData" type="OptimizationData[]" line="42"/>
            <javadoc line="42">
                Optimization data.                
            </javadoc>
            <declaration name="maxEvalIndex" type="int" line="46"/>
            <javadoc line="46">
                Location in {@link #optimData} where the updated maximum
                  number of evaluations will be stored.                
            </javadoc>
            <declaration name="searchIntervalIndex" type="int" line="51"/>
            <javadoc line="51">
                Location in {@link #optimData} where the updated start value
                  will be stored.                
            </javadoc>
            <javadoc line="56">
                Create a multi-start optimizer from a single-start optimizer.                
                <param>
                    optimizer Single-start optimizer to wrap.                    
                </param>
                <param>
                    starts Number of starts to perform. If {@code starts == 1},
                      the {@code optimize} methods will return the same solution as{@code optimizer} would.                    
                </param>
                <param>
                    generator Random generator to use for restarts.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code starts < 1}.                    
                </throws>
            </javadoc>
            <method name="MultiStartUnivariateOptimizer" type="constructor" line="64">
                <params>
                    <param name="optimizer" type="UnivariateOptimizer"/>
                    <param name="starts" type="int"/>
                    <param name="generator" type="RandomGenerator"/>
                </params>
                <scope line="66"/>
            </method>
            <javadoc line="73">
                {@inheritDoc}                
            </javadoc>
            <method name="getEvaluations" type="int" line="76"/>
            <javadoc line="79">
                Gets all the optima found during the last call to {@code optimize}.
                  The optimizer stores all the optima found during a set of
                  restarts. The {@code optimize} method returns the best point only.
                  This method returns all the points found at the end of each starts,
                  including the best one already returned by the {@code optimize} method.
                  &lt;br/&gt;
                  The returned array as one element for each start as specified
                  in the constructor. It is ordered with the results from the
                  runs that did converge first, sorted from best to worst
                  objective value (i.e in ascending order if minimizing and in
                  descending order if maximizing), followed by {@code null} elements
                  corresponding to the runs that did not converge. This means all
                  elements will be {@code null} if the {@code optimize} method did throw
                  an exception.
                  This also means that if the first element is not {@code null}, it is
                  the best point found across all starts.                
                <return>
                    an array containing the optima.                    
                </return>
                <throws>
                    MathIllegalStateException if {@link #optimize(OptimizationData[])optimize} has not been called.                    
                </throws>
            </javadoc>
            <method name="getOptima" type="UnivariatePointValuePair[]" line="99">
                <scope line="100"/>
            </method>
            <javadoc line="105">
                {@inheritDoc}                
                <throws>
                    MathIllegalStateException if {@code optData} does not contain an
                      instance of {@link MaxEval} or {@link SearchInterval}.                    
                </throws>
            </javadoc>
            <method name="optimize" type="UnivariatePointValuePair" line="110">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <javadoc line="114">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="UnivariatePointValuePair" line="117">
                <scope line="118">
                    <scope line="119"/>
                    <scope line="124"/>
                </scope>
                <scope line="130"/>
                <scope line="133"/>
                <declaration name="lastException" type="RuntimeException" line="136"/>
                <declaration name="maxEval" type="int" line="139"/>
                <declaration name="min" type="double" line="140"/>
                <declaration name="max" type="double" line="141"/>
                <declaration name="startValue" type="double" line="142"/>
                <scope line="143">
                    <scope line="144">
                        <declaration name="s" type="double" line="146"/>
                    </scope>
                    <scope line="150"/>
                </scope>
                <scope line="157"/>
            </method>
            <javadoc line="162">
                Sort the optima from best to worst, followed by {@code null} elements.                
                <param>
                    goal Goal type.                    
                </param>
            </javadoc>
            <method name="sortPairs" type="void" line="166">
                <params>
                    <param name="goal" type="GoalType"/>
                </params>
                <anonymous_class line="167">
                    <method name="compare" type="int" line="168">
                        <params>
                            <param name="o1" type="UnivariatePointValuePair"/>
                            <param name="o2" type="UnivariatePointValuePair"/>
                        </params>
                        <scope line="169"/>
                        <scope line="172"/>
                        <declaration name="v1" type="double" line="175"/>
                        <declaration name="v2" type="double" line="176"/>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>