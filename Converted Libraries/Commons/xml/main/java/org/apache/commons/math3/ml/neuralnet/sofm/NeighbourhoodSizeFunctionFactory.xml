<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet.sofm">
        <import package="org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction"/>
        <import package="org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunction"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="NeighbourhoodSizeFunctionFactory" line="24">
            <javadoc line="24">
                Factory for creating instances of {@link NeighbourhoodSizeFunction}.                
                <version>
                    $Id: NeighbourhoodSizeFunctionFactory.java 1566092 2014-02-08 18:48:29Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <javadoc line="31">
                Class contains only static methods.                
            </javadoc>
            <method name="NeighbourhoodSizeFunctionFactory" type="constructor" line="32"/>
            <javadoc line="34">
                Creates an exponential decay {@link NeighbourhoodSizeFunction function}.
                  It will compute &lt;code&gt;a e&lt;sup&gt;-x / b&lt;/sup&gt;&lt;/code&gt;,
                  where {@code x} is the (integer) independent variable and
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;a = initValue&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;b = -numCall / ln(valueAtNumCall / initValue)&lt;/code&gt;
                  &lt;/ul&gt;                
                <param>
                    initValue Initial value, i.e.{@link NeighbourhoodSizeFunction#value(long) value(0)}.                    
                </param>
                <param>
                    valueAtNumCall Value of the function at {@code numCall}.                    
                </param>
                <param>
                    numCall Argument for which the function returns{@code valueAtNumCall}.                    
                </param>
                <return>
                    the neighbourhood size function.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif {@code initValue &lt;= 0}.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif {@code valueAtNumCall &lt;= 0}.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NumberIsTooLargeExceptionif {@code valueAtNumCall &gt;= initValue}.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif {@code numCall &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="exponentialDecay" type="NeighbourhoodSizeFunction" line="60">
                <params>
                    <param name="initValue" type="double"/>
                    <param name="valueAtNumCall" type="double"/>
                    <param name="numCall" type="long"/>
                </params>
                <anonymous_class line="61">
                    <declaration name="decay" type="ExponentialDecayFunction" line="62"/>
                    <javadoc line="62">
                        DecayFunction.                        
                    </javadoc>
                    <javadoc line="66">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="int" line="67">
                        <params>
                            <param name="n" type="long"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="73">
                Creates an sigmoid-like {@code NeighbourhoodSizeFunction function}.
                  The function {@code f} will have the following properties:
                  &lt;ul&gt;
                  &lt;li&gt;{@code f(0) = initValue}&lt;/li&gt;
                  &lt;li&gt;{@code numCall} is the inflexion point&lt;/li&gt;
                  &lt;li&gt;{@code slope = f&apos;(numCall)}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    initValue Initial value, i.e.{@link NeighbourhoodSizeFunction#value(long) value(0)}.                    
                </param>
                <param>
                    slope Value of the function derivative at {@code numCall}.                    
                </param>
                <param>
                    numCall Inflexion point.                    
                </param>
                <return>
                    the neighbourhood size function.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif {@code initValue &lt;= 0}.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NumberIsTooLargeExceptionif {@code slope &gt;= 0}.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif {@code numCall &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="quasiSigmoidDecay" type="NeighbourhoodSizeFunction" line="96">
                <params>
                    <param name="initValue" type="double"/>
                    <param name="slope" type="double"/>
                    <param name="numCall" type="long"/>
                </params>
                <anonymous_class line="97">
                    <declaration name="decay" type="QuasiSigmoidDecayFunction" line="98"/>
                    <javadoc line="98">
                        DecayFunction.                        
                    </javadoc>
                    <javadoc line="102">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="int" line="103">
                        <params>
                            <param name="n" type="long"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>