<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.spherical.twod">
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Rotation"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Vector3D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Embedding"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Hyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Transform"/>
        <import package="org.apache.commons.math3.geometry.spherical.oned.Arc"/>
        <import package="org.apache.commons.math3.geometry.spherical.oned.ArcsSet"/>
        <import package="org.apache.commons.math3.geometry.spherical.oned.S1Point"/>
        <import package="org.apache.commons.math3.geometry.spherical.oned.Sphere1D"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Circle" line="32">
            <implements interface="Hyperplane">
                <type_params>
                    <type_param name="Sphere2D"/>
                </type_params>
            </implements>
            <implements interface="Embedding">
                <type_params>
                    <type_param name="Sphere2D"/>
                    <type_param name="Sphere1D"/>
                </type_params>
            </implements>
            <javadoc line="32">
                This class represents an oriented great circle on the 2-sphere.
                  &lt;p&gt;An oriented circle can be defined by a center point. The circle
                  is the the set of points that are in the normal plan the center.&lt;/p&gt;
                  &lt;p&gt;Since it is oriented the two spherical caps at its two sides are
                  unambiguously identified as a left cap and a right cap. This can be
                  used to identify the interior and the exterior in a simple way by
                  local properties only when part of a line is used to define part of
                  a spherical polygon boundary.&lt;/p&gt;                
                <version>
                    $Id: Circle.java 1560115 2014-01-21 17:49:13Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="pole" type="Vector3D" line="48"/>
            <javadoc line="48">
                Pole or circle center.                
            </javadoc>
            <declaration name="x" type="Vector3D" line="51"/>
            <javadoc line="51">
                First axis in the equator plane, origin of the phase angles.                
            </javadoc>
            <declaration name="y" type="Vector3D" line="54"/>
            <javadoc line="54">
                Second axis in the equator plane, in quadrature with respect to x.                
            </javadoc>
            <declaration name="tolerance" type="double" line="57"/>
            <javadoc line="57">
                Tolerance below which close sub-arcs are merged together.                
            </javadoc>
            <javadoc line="60">
                Build a great circle from its pole.
                  &lt;p&gt;The circle is oriented in the trigonometric direction around pole.&lt;/p&gt;                
                <param>
                    pole circle pole                    
                </param>
                <param>
                    tolerance tolerance below which close sub-arcs are merged together                    
                </param>
            </javadoc>
            <method name="Circle" type="constructor" line="65">
                <params>
                    <param name="pole" type="Vector3D"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="70">
                Build a great circle from two non-aligned points.
                  &lt;p&gt;The circle is oriented from first to second point using the path smaller than \( \pi \).&lt;/p&gt;                
                <param>
                    first first point contained in the great circle                    
                </param>
                <param>
                    second second point contained in the great circle                    
                </param>
                <param>
                    tolerance tolerance below which close sub-arcs are merged together                    
                </param>
            </javadoc>
            <method name="Circle" type="constructor" line="76">
                <params>
                    <param name="first" type="S2Point"/>
                    <param name="second" type="S2Point"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="81">
                Build a circle from its internal components.
                  &lt;p&gt;The circle is oriented in the trigonometric direction around center.&lt;/p&gt;                
                <param>
                    pole circle pole                    
                </param>
                <param>
                    x first axis in the equator plane                    
                </param>
                <param>
                    y second axis in the equator plane                    
                </param>
                <param>
                    tolerance tolerance below which close sub-arcs are merged together                    
                </param>
            </javadoc>
            <method name="Circle" type="constructor" line="89">
                <params>
                    <param name="pole" type="Vector3D"/>
                    <param name="x" type="Vector3D"/>
                    <param name="y" type="Vector3D"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="96">
                Copy constructor.
                  &lt;p&gt;The created instance is completely independent from the
                  original instance, it is a deep copy.&lt;/p&gt;                
                <param>
                    circle circle to copy                    
                </param>
            </javadoc>
            <method name="Circle" type="constructor" line="101">
                <params>
                    <param name="circle" type="Circle"/>
                </params>
            </method>
            <javadoc line="105">
                {@inheritDoc}                
            </javadoc>
            <method name="copySelf" type="Circle" line="106"/>
            <javadoc line="110">
                Reset the instance as if built from a pole.
                  &lt;p&gt;The circle is oriented in the trigonometric direction around pole.&lt;/p&gt;                
                <param>
                    newPole circle pole                    
                </param>
            </javadoc>
            <method name="reset" type="void" line="114">
                <params>
                    <param name="newPole" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="120">
                Revert the instance.                
            </javadoc>
            <method name="revertSelf" type="void" line="122">
                <comment line="124">
                    x remains the same                    
                </comment>
            </method>
            <javadoc line="128">
                Get the reverse of the instance.
                  &lt;p&gt;Get a circle with reversed orientation with respect to the
                  instance. A new object is built, the instance is untouched.&lt;/p&gt;                
                <return>
                    a new circle, with orientation opposite to the instance orientation                    
                </return>
            </javadoc>
            <method name="getReverse" type="Circle" line="133"/>
            <javadoc line="137">
                {@inheritDoc}                
            </javadoc>
            <method name="project" type="Point&lt;Sphere2D&gt;" line="138">
                <params>
                    <param name="point" type="Point&lt;Sphere2D&gt;"/>
                </params>
            </method>
            <javadoc line="142">
                {@inheritDoc}                
            </javadoc>
            <method name="getTolerance" type="double" line="143"/>
            <javadoc line="147">
                {@inheritDoc}                
                <see>
                    #getPhase(Vector3D)                    
                </see>
            </javadoc>
            <method name="toSubSpace" type="S1Point" line="150">
                <params>
                    <param name="point" type="Point&lt;Sphere2D&gt;"/>
                </params>
            </method>
            <javadoc line="154">
                Get the phase angle of a direction.
                  &lt;p&gt;
                  The direction may not belong to the circle as the
                  phase is computed for the meridian plane between the circle
                  pole and the direction.
                  &lt;/p&gt;                
                <param>
                    direction direction for which phase is requested                    
                </param>
                <return>
                    phase angle of the direction around the circle                    
                </return>
                <see>
                    #toSubSpace(Point)                    
                </see>
            </javadoc>
            <method name="getPhase" type="double" line="164">
                <params>
                    <param name="direction" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="168">
                {@inheritDoc}                
                <see>
                    #getPointAt(double)                    
                </see>
            </javadoc>
            <method name="toSpace" type="S2Point" line="171">
                <params>
                    <param name="point" type="Point&lt;Sphere1D&gt;"/>
                </params>
            </method>
            <javadoc line="175">
                Get a circle point from its phase around the circle.                
                <param>
                    alpha phase around the circle                    
                </param>
                <return>
                    circle point on the sphere                    
                </return>
                <see>
                    #toSpace(Point)                    
                </see>
                <see>
                    #getXAxis()                    
                </see>
                <see>
                    #getYAxis()                    
                </see>
            </javadoc>
            <method name="getPointAt" type="Vector3D" line="182">
                <params>
                    <param name="alpha" type="double"/>
                </params>
            </method>
            <javadoc line="186">
                Get the X axis of the circle.
                  &lt;p&gt;
                  This method returns the same value as {@link #getPointAt(double)getPointAt(0.0)} but it does not do any computation and always
                  return the same instance.
                  &lt;/p&gt;                
                <return>
                    an arbitrary x axis on the circle                    
                </return>
                <see>
                    #getPointAt(double)                    
                </see>
                <see>
                    #getYAxis()                    
                </see>
                <see>
                    #getPole()                    
                </see>
            </javadoc>
            <method name="getXAxis" type="Vector3D" line="197"/>
            <javadoc line="201">
                Get the Y axis of the circle.
                  &lt;p&gt;
                  This method returns the same value as {@link #getPointAt(double)getPointAt(0.5  FastMath.PI)} but it does not do any computation and always
                  return the same instance.
                  &lt;/p&gt;                
                <return>
                    an arbitrary y axis point on the circle                    
                </return>
                <see>
                    #getPointAt(double)                    
                </see>
                <see>
                    #getXAxis()                    
                </see>
                <see>
                    #getPole()                    
                </see>
            </javadoc>
            <method name="getYAxis" type="Vector3D" line="212"/>
            <javadoc line="216">
                Get the pole of the circle.
                  &lt;p&gt;
                  As the circle is a great circle, the pole does &lt;em&gt;not&lt;/em&gt;
                  belong to it.
                  &lt;/p&gt;                
                <return>
                    pole of the circle                    
                </return>
                <see>
                    #getXAxis()                    
                </see>
                <see>
                    #getYAxis()                    
                </see>
            </javadoc>
            <method name="getPole" type="Vector3D" line="225"/>
            <javadoc line="229">
                Get the arc of the instance that lies inside the other circle.                
                <param>
                    other other circle                    
                </param>
                <return>
                    arc of the instance that lies inside the other circle                    
                </return>
            </javadoc>
            <method name="getInsideArc" type="Arc" line="233">
                <params>
                    <param name="other" type="Circle"/>
                </params>
                <declaration name="alpha" type="double" line="234"/>
                <declaration name="halfPi" type="double" line="235"/>
            </method>
            <javadoc line="239">
                {@inheritDoc}                
            </javadoc>
            <method name="wholeHyperplane" type="SubCircle" line="240"/>
            <javadoc line="244">
                Build a region covering the whole space.                
                <return>
                    a region containing the instance (really a {@link SphericalPolygonsSet SphericalPolygonsSet} instance)                    
                </return>
            </javadoc>
            <method name="wholeSpace" type="SphericalPolygonsSet" line="248"/>
            <javadoc line="252">
                {@inheritDoc}                
                <see>
                    #getOffset(Vector3D)                    
                </see>
            </javadoc>
            <method name="getOffset" type="double" line="255">
                <params>
                    <param name="point" type="Point&lt;Sphere2D&gt;"/>
                </params>
            </method>
            <javadoc line="259">
                Get the offset (oriented distance) of a direction.
                  &lt;p&gt;The offset is defined as the angular distance between the
                  circle center and the direction minus the circle radius. It
                  is therefore 0 on the circle, positive for directions outside of
                  the cone delimited by the circle, and negative inside the cone.&lt;/p&gt;                
                <param>
                    direction direction to check                    
                </param>
                <return>
                    offset of the direction                    
                </return>
                <see>
                    #getOffset(Point)                    
                </see>
            </javadoc>
            <method name="getOffset" type="double" line="268">
                <params>
                    <param name="direction" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="272">
                {@inheritDoc}                
            </javadoc>
            <method name="sameOrientationAs" type="boolean" line="273">
                <params>
                    <param name="other" type="Hyperplane&lt;Sphere2D&gt;"/>
                </params>
                <declaration name="otherC" type="Circle" line="274"/>
            </method>
            <javadoc line="278">
                Get a {@link org.apache.commons.math3.geometry.partitioning.TransformTransform} embedding a 3D rotation.                
                <param>
                    rotation rotation to use                    
                </param>
                <return>
                    a new transform that can be applied to either {@link Point Point}, {@link Circle Line} or {@link org.apache.commons.math3.geometry.partitioning.SubHyperplaneSubHyperplane} instances                    
                </return>
            </javadoc>
            <method name="getTransform" type="Transform&lt;Sphere2D,Sphere1D&gt;" line="286">
                <params>
                    <param name="rotation" type="Rotation"/>
                </params>
            </method>
            <class name="CircleTransform" line="290">
                <implements interface="Transform">
                    <type_params>
                        <type_param name="Sphere2D"/>
                        <type_param name="Sphere1D"/>
                    </type_params>
                </implements>
                <javadoc line="290">
                    Class embedding a 3D rotation.                    
                </javadoc>
                <declaration name="rotation" type="Rotation" line="293"/>
                <javadoc line="293">
                    Underlying rotation.                    
                </javadoc>
                <javadoc line="296">
                    Build a transform from a {@code Rotation}.                    
                    <param>
                        rotation rotation to use                        
                    </param>
                </javadoc>
                <method name="CircleTransform" type="constructor" line="299">
                    <params>
                        <param name="rotation" type="Rotation"/>
                    </params>
                </method>
                <javadoc line="303">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="S2Point" line="304">
                    <params>
                        <param name="point" type="Point&lt;Sphere2D&gt;"/>
                    </params>
                </method>
                <javadoc line="308">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="Circle" line="309">
                    <params>
                        <param name="hyperplane" type="Hyperplane&lt;Sphere2D&gt;"/>
                    </params>
                    <declaration name="circle" type="Circle" line="310"/>
                </method>
                <javadoc line="317">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="SubHyperplane&lt;Sphere1D&gt;" line="320">
                    <params>
                        <param name="sub" type="SubHyperplane&lt;Sphere1D&gt;"/>
                        <param name="original" type="Hyperplane&lt;Sphere2D&gt;"/>
                        <param name="transformed" type="Hyperplane&lt;Sphere2D&gt;"/>
                    </params>
                    <comment line="322">
                        as the circle is rotated, the limit angles are rotated too                        
                    </comment>
                </method>
            </class>
        </class>
    </source>