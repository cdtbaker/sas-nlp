<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.fraction.BigFraction"/>
        <import package="org.apache.commons.math3.fraction.BigFractionField"/>
        <import package="org.apache.commons.math3.fraction.FractionConversionException"/>
        <import package="org.apache.commons.math3.linear.Array2DRowFieldMatrix"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.FieldMatrix"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <class name="KolmogorovSmirnovDistribution" line="15">
            <implements interface="Serializable"/>
            <javadoc line="15">
                Implementation of the Kolmogorov-Smirnov distribution.
                  &lt;p&gt;
                  Treats the distribution of the two-sided {@code P(D_n &lt; d)} where{@code D_n = sup_x |G(x) - G_n (x)|} for the theoretical cdf {@code G} and
                  the empirical cdf {@code G_n}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is based on [1] with certain quick decisions for extreme
                  values given in [2].
                  &lt;/p&gt;
                  &lt;p&gt;
                  In short, when wanting to evaluate {@code P(D_n &lt; d)}, the method in [1] is
                  to write {@code d = (k - h) / n} for positive integer {@code k} and{@code 0 &lt;= h &lt; 1}. Then {@code P(D_n &lt; d) = (n! / n^n)  t_kk}, where{@code t_kk} is the {@code (k, k)}&apos;th entry in the special matrix{@code H^n}, i.e. {@code H} to the {@code n}&apos;th power.
                  &lt;/p&gt;
                  &lt;p&gt;
                  References:
                  &lt;ul&gt;
                  &lt;li&gt;[1] &lt;a href=&quot;http://www.jstatsoft.org/v08/i18/&quot;&gt;
                  Evaluating Kolmogorov&apos;s Distribution&lt;/a&gt; by George Marsaglia, Wai
                  Wan Tsang, and Jingbo Wang&lt;/li&gt;
                  &lt;li&gt;[2] &lt;a href=&quot;http://www.jstatsoft.org/v39/i11/&quot;&gt;
                  Computing the Two-Sided Kolmogorov-Smirnov Distribution&lt;/a&gt; by Richard Simard
                  and Pierre L&apos;Ecuyer&lt;/li&gt;
                  &lt;/ul&gt;
                  Note that [1] contains an error in computing h, refer to
                  &lt;a href=&quot;https://issues.apache.org/jira/browse/MATH-437&quot;&gt;MATH-437&lt;/a&gt; for details.
                  &lt;/p&gt;                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test">
                      Kolmogorov-Smirnov test (Wikipedia)</a>                    
                </see>
                <version>
                    $Id: KolmogorovSmirnovDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="47"/>
            <javadoc line="47">
                Serializable version identifier.                
            </javadoc>
            <declaration name="n" type="int" line="51"/>
            <javadoc line="51">
                Number of observations.                
            </javadoc>
            <javadoc line="55">
                @param n Number of observations                
                <throws>
                    NotStrictlyPositiveException if {@code n <= 0}                    
                </throws>
            </javadoc>
            <method name="KolmogorovSmirnovDistribution" type="constructor" line="59">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="60"/>
            </method>
            <javadoc line="65">
                Calculates {@code P(D_n &lt; d)} using method described in [1] with quick
                  decisions for extreme values given in [2] (see above). The result is not
                  exact as with{@link KolmogorovSmirnovDistribution#cdfExact(double)} because
                  calculations are based on {@code double} rather than{@link org.apache.commons.math3.fraction.BigFraction}.                
                <param>
                    d statistic                    
                </param>
                <return>
                    the two-sided probability of {@code P(D_n < d)}                    
                </return>
                <throws>
                    MathArithmeticException if algorithm fails to convert {@code h}to a {@link org.apache.commons.math3.fraction.BigFraction} in expressing{@code d} as {@code (k - h) / m} for integer {@code k, m} and{@code 0 <= h < 1}.                    
                </throws>
            </javadoc>
            <method name="cdf" type="double" line="74">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="77">
                Calculates {@code P(D_n &lt; d)} using method described in [1] with quick
                  decisions for extreme values given in [2] (see above). The result is
                  exact in the sense that BigFraction/BigReal is used everywhere at the
                  expense of very slow execution time. Almost never choose this in real
                  applications unless you are very sure; this is almost solely for
                  verification purposes. Normally, you would choose{@link KolmogorovSmirnovDistribution#cdf(double)}                
                <param>
                    d statistic                    
                </param>
                <return>
                    the two-sided probability of {@code P(D_n < d)}                    
                </return>
                <throws>
                    MathArithmeticException if algorithm fails to convert {@code h}to a {@link org.apache.commons.math3.fraction.BigFraction} in expressing{@code d} as {@code (k - h) / m} for integer {@code k, m} and{@code 0 <= h < 1}.                    
                </throws>
            </javadoc>
            <method name="cdfExact" type="double" line="88">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="91">
                Calculates {@code P(D_n &lt; d)} using method described in [1] with quick
                  decisions for extreme values given in [2] (see above).                
                <param>
                    d statistic                    
                </param>
                <param>
                    exact whether the probability should be calculated exact using{@link org.apache.commons.math3.fraction.BigFraction} everywhere at the
                      expense of very slow execution time, or if {@code double} should be used
                      convenient places to gain speed. Almost never choose {@code true} in real
                      applications unless you are very sure; {@code true} is almost solely for
                      verification purposes.                    
                </param>
                <return>
                    the two-sided probability of {@code P(D_n < d)}                    
                </return>
                <throws>
                    MathArithmeticException if algorithm fails to convert {@code h}to a {@link org.apache.commons.math3.fraction.BigFraction} in expressing{@code d} as {@code (k - h) / m} for integer {@code k, m} and{@code 0 <= h < 1}.                    
                </throws>
            </javadoc>
            <method name="cdf" type="double" line="103">
                <params>
                    <param name="d" type="double"/>
                    <param name="exact" type="boolean"/>
                </params>
                <declaration name="ninv" type="double" line="104"/>
                <declaration name="ninvhalf" type="double" line="105"/>
                <scope line="106"/>
                <scope line="109">
                    <declaration name="res" type="double" line="110"/>
                    <declaration name="f" type="double" line="111"/>
                    <scope line="112"/>
                </scope>
                <scope line="117"/>
                <scope line="120"/>
            </method>
            <javadoc line="125">
                Calculates the exact value of {@code P(D_n &lt; d)} using method described
                  in [1] and {@link org.apache.commons.math3.fraction.BigFraction} (see
                  above).                
                <param>
                    d statistic                    
                </param>
                <return>
                    the two-sided probability of {@code P(D_n < d)}                    
                </return>
                <throws>
                    MathArithmeticException if algorithm fails to convert {@code h}to a {@link org.apache.commons.math3.fraction.BigFraction} in expressing{@code d} as {@code (k - h) / m} for integer {@code k, m} and{@code 0 <= h < 1}.                    
                </throws>
            </javadoc>
            <method name="exactK" type="double" line="133">
                <params>
                    <param name="d" type="double"/>
                </params>
                <declaration name="k" type="int" line="134"/>
                <declaration name="H" type="FieldMatrix&lt;BigFraction&gt;" line="135"/>
                <declaration name="Hpower" type="FieldMatrix&lt;BigFraction&gt;" line="136"/>
                <declaration name="pFrac" type="BigFraction" line="137"/>
                <scope line="138"/>
            </method>
            <javadoc line="143">
                Calculates {@code P(D_n &lt; d)} using method described in [1] and doubles
                  (see above).                
                <param>
                    d statistic                    
                </param>
                <return>
                    the two-sided probability of {@code P(D_n < d)}                    
                </return>
                <throws>
                    MathArithmeticException if algorithm fails to convert {@code h}to a {@link org.apache.commons.math3.fraction.BigFraction} in expressing{@code d} as {@code (k - h) / m} for integer {@code k, m} and{@code 0 <= h < 1}.                    
                </throws>
            </javadoc>
            <method name="roundedK" type="double" line="150">
                <params>
                    <param name="d" type="double"/>
                </params>
                <declaration name="k" type="int" line="151"/>
                <declaration name="HBigFraction" type="FieldMatrix&lt;BigFraction&gt;" line="152"/>
                <declaration name="m" type="int" line="153"/>
                <declaration name="H" type="RealMatrix" line="154"/>
                <scope line="155">
                    <scope line="156"/>
                </scope>
                <declaration name="Hpower" type="RealMatrix" line="160"/>
                <declaration name="pFrac" type="double" line="161"/>
                <scope line="162"/>
            </method>
            <javadoc line="167">
                Creates {@code H} of size {@code m x m} as described in [1] (see above).                
                <param>
                    d statistic                    
                </param>
                <return>
                    H matrix                    
                </return>
                <throws>
                    NumberIsTooLargeException if fractional part is greater than 1                    
                </throws>
                <throws>
                    FractionConversionException if algorithm fails to convert{@code h} to a {@link org.apache.commons.math3.fraction.BigFraction} in
                      expressing {@code d} as {@code (k - h) / m} for integer {@code k, m} and{@code 0 <= h < 1}.                    
                </throws>
            </javadoc>
            <method name="createH" type="FieldMatrix<BigFraction>" line="175">
                <params>
                    <param name="d" type="double"/>
                </params>
                <declaration name="k" type="int" line="176"/>
                <declaration name="m" type="int" line="177"/>
                <declaration name="hDouble" type="double" line="178"/>
                <scope line="179"/>
                <declaration name="h" type="BigFraction" line="182"/>
                <scope line="183"/>
                <scope line="186">
                    <scope line="187"/>
                    <scope line="190"/>
                </scope>
                <declaration name="Hdata" type="BigFraction[][]" line="194"/>
                <scope line="195">
                    <scope line="196">
                        <scope line="197"/>
                        <scope line="200"/>
                    </scope>
                </scope>
                <declaration name="hPowers" type="BigFraction[]" line="205"/>
                <scope line="207"/>
                <scope line="210"/>
                <scope line="214"/>
                <scope line="217">
                    <scope line="218">
                        <scope line="219">
                            <scope line="220"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>