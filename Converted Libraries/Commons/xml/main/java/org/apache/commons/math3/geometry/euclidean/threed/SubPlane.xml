<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Vector1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet"/>
        <import package="org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTree"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Hyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Region"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Side"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <class name="SubPlane" line="32">
            <extends class="AbstractSubHyperplane">
                <type_params>
                    <type_param name="Euclidean3D"/>
                    <type_param name="Euclidean2D"/>
                </type_params>
            </extends>
            <javadoc line="32">
                This class represents a sub-hyperplane for {@link Plane}.                
                <version>
                    $Id: SubPlane.java 1555174 2014-01-03 18:06:20Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <javadoc line="38">
                Simple constructor.                
                <param>
                    hyperplane underlying hyperplane                    
                </param>
                <param>
                    remainingRegion remaining region of the hyperplane                    
                </param>
            </javadoc>
            <method name="SubPlane" type="constructor" line="43">
                <params>
                    <param name="hyperplane" type="Hyperplane&lt;Euclidean3D&gt;"/>
                    <param name="remainingRegion" type="Region&lt;Euclidean2D&gt;"/>
                </params>
            </method>
            <javadoc line="47">
                {@inheritDoc}                
            </javadoc>
            <method name="buildNew" type="AbstractSubHyperplane&lt;Euclidean3D,Euclidean2D&gt;" line="50">
                <params>
                    <param name="hyperplane" type="Hyperplane&lt;Euclidean3D&gt;"/>
                    <param name="remainingRegion" type="Region&lt;Euclidean2D&gt;"/>
                </params>
            </method>
            <javadoc line="54">
                {@inheritDoc}                
            </javadoc>
            <method name="side" type="Side" line="56">
                <params>
                    <param name="hyperplane" type="Hyperplane&lt;Euclidean3D&gt;"/>
                </params>
                <comment line="65">
                    the hyperplanes are parallel,
                     any point can be used to check their relative position                    
                </comment>
                <comment line="71">
                    create a 2D line in the otherPlane canonical 2D frame such that:
                       - the line is the crossing line of the two planes in 3D
                       - the line splits the otherPlane in two half planes with an
                         orientation consistent with the orientation of the instance
                         (i.e. the 3D half space on the plus side (resp. minus side)
                          of the instance contains the 2D half plane on the plus side
                          (resp. minus side) of the 2D line                    
                </comment>
                <comment line="89">
                    check the side on the 2D plane                    
                </comment>
                <declaration name="otherPlane" type="Plane" line="58"/>
                <declaration name="thisPlane" type="Plane" line="59"/>
                <declaration name="inter" type="Line" line="60"/>
                <declaration name="tolerance" type="double" line="61"/>
                <scope line="63">
                    <declaration name="global" type="double" line="66"/>
                </scope>
                <declaration name="p" type="Vector2D" line="77"/>
                <declaration name="q" type="Vector2D" line="78"/>
                <declaration name="crossP" type="Vector3D" line="79"/>
                <scope line="80">
                    <declaration name="tmp" type="Vector2D" line="81"/>
                </scope>
                <declaration name="line2D" type="org.apache.commons.math3.geometry.euclidean.twod.Line" line="85"/>
            </method>
            <javadoc line="93">
                Split the instance in two parts by an hyperplane.                
                <param>
                    hyperplane splitting hyperplane                    
                </param>
                <return>
                    an object containing both the part of the instance
                      on the plus side of the instance and the part of the
                      instance on the minus side of the instance                    
                </return>
            </javadoc>
            <method name="split" type="SplitSubHyperplane&lt;Euclidean3D&gt;" line="100">
                <params>
                    <param name="hyperplane" type="Hyperplane&lt;Euclidean3D&gt;"/>
                </params>
                <comment line="109">
                    the hyperplanes are parallel                    
                </comment>
                <comment line="116">
                    the hyperplanes do intersect                    
                </comment>
                <declaration name="otherPlane" type="Plane" line="102"/>
                <declaration name="thisPlane" type="Plane" line="103"/>
                <declaration name="inter" type="Line" line="104"/>
                <declaration name="tolerance" type="double" line="105"/>
                <scope line="107">
                    <declaration name="global" type="double" line="109"/>
                </scope>
                <declaration name="p" type="Vector2D" line="116"/>
                <declaration name="q" type="Vector2D" line="117"/>
                <declaration name="crossP" type="Vector3D" line="118"/>
                <scope line="119">
                    <declaration name="tmp" type="Vector2D" line="120"/>
                </scope>
                <declaration name="l2DMinus" type="SubHyperplane&amp;lt;Euclidean2D&amp;gt;" line="124"/>
                <declaration name="l2DPlus" type="SubHyperplane&amp;lt;Euclidean2D&amp;gt;" line="126"/>
                <declaration name="splitTree" type="BSPTree&amp;lt;Euclidean2D&amp;gt;" line="129"/>
                <declaration name="plusTree" type="BSPTree&amp;lt;Euclidean2D&amp;gt;" line="130"/>
                <declaration name="minusTree" type="BSPTree&amp;lt;Euclidean2D&amp;gt;" line="135"/>
            </method>
        </class>
    </source>