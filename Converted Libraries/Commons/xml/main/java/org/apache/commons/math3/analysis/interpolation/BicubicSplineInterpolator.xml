<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="BicubicSplineInterpolator" line="9">
            <implements interface="BivariateGridInterpolator"/>
            <javadoc line="9">
                Generates a bicubic interpolating function.                
                <version>
                    $Id: BicubicSplineInterpolator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <javadoc line="15">
                {@inheritDoc}                
            </javadoc>
            <method name="interpolate" type="BicubicSplineInterpolatingFunction" line="18">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                    <param name="fval" type="double[][]"/>
                </params>
                <scope line="19"/>
                <scope line="22"/>
                <declaration name="xLen" type="int" line="27"/>
                <declaration name="yLen" type="int" line="28"/>
                <declaration name="fX" type="double[][]" line="29"/>
                <scope line="30">
                    <scope line="31"/>
                    <scope line="34"/>
                </scope>
                <declaration name="spInterpolator" type="SplineInterpolator" line="38"/>
                <declaration name="ySplineX" type="PolynomialSplineFunction[]" line="39"/>
                <scope line="40"/>
                <declaration name="xSplineY" type="PolynomialSplineFunction[]" line="43"/>
                <scope line="44"/>
                <declaration name="dFdX" type="double[][]" line="47"/>
                <scope line="48">
                    <declaration name="f" type="UnivariateFunction" line="49"/>
                    <scope line="50"/>
                </scope>
                <declaration name="dFdY" type="double[][]" line="54"/>
                <scope line="55">
                    <declaration name="f" type="UnivariateFunction" line="56"/>
                    <scope line="57"/>
                </scope>
                <declaration name="d2FdXdY" type="double[][]" line="61"/>
                <scope line="62">
                    <declaration name="nI" type="int" line="63"/>
                    <declaration name="pI" type="int" line="64"/>
                    <scope line="65">
                        <declaration name="nJ" type="int" line="66"/>
                        <declaration name="pJ" type="int" line="67"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="73">
                Computes the next index of an array, clipping if necessary.
                  It is assumed (but not checked) that {@code i &gt;= 0}.                
                <param>
                    i Index.                    
                </param>
                <param>
                    max Upper limit of the array.                    
                </param>
                <return>
                    the next index.                    
                </return>
            </javadoc>
            <method name="nextIndex" type="int" line="80">
                <params>
                    <param name="i" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="index" type="int" line="81"/>
            </method>
            <javadoc line="84">
                Computes the previous index of an array, clipping if necessary.
                  It is assumed (but not checked) that {@code i} is smaller than the size
                  of the array.                
                <param>
                    i Index.                    
                </param>
                <return>
                    the previous index.                    
                </return>
            </javadoc>
            <method name="previousIndex" type="int" line="91">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="index" type="int" line="92"/>
            </method>
        </class>
    </source>