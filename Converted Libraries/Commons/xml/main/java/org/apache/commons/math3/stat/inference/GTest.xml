<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.inference">
        <import package="org.apache.commons.math3.distribution.ChiSquaredDistribution"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="GTest" line="30">
            <javadoc line="30">
                Implements &lt;a href=&quot;http://en.wikipedia.org/wiki/G-test&quot;&gt;G Test&lt;/a&gt;
                  statistics.
                  &lt;p&gt;This is known in statistical genetics as the McDonald-Kreitman test.
                  The implementation handles both known and unknown distributions.&lt;/p&gt;
                  &lt;p&gt;Two samples tests can be used when the distribution is unknown &lt;i&gt;a priori&lt;/i&gt;
                  but provided by one sample, or when the hypothesis under test is that the two
                  samples come from the same underlying distribution.&lt;/p&gt;                
                <version>
                    $Id: GTest.java 1547633 2013-12-03 23:03:06Z tn $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <javadoc line="46">
                Computes the &lt;a href=&quot;http://en.wikipedia.org/wiki/G-test&quot;&gt;G statistic
                  for Goodness of Fit&lt;/a&gt; comparing {@code observed} and {@code expected}frequency counts.
                  &lt;p&gt;This statistic can be used to perform a G test (Log-Likelihood Ratio
                  Test) evaluating the null hypothesis that the observed counts follow the
                  expected distribution.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Expected counts must all be positive. &lt;/li&gt;
                  &lt;li&gt;Observed counts must all be &amp;ge; 0. &lt;/li&gt;
                  &lt;li&gt;The observed and expected arrays must have the same length and their
                  common length must be at least 2. &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;This implementation rescales the{@code expected} array if necessary to ensure that the sum of the
                  expected and observed counts are equal.&lt;/p&gt;                
                <param>
                    observed array of observed frequency counts                    
                </param>
                <param>
                    expected array of expected frequency counts                    
                </param>
                <return>
                    G-Test statistic                    
                </return>
                <throws>
                    NotPositiveException if {@code observed} has negative entries                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code expected} has entries that
                      are not strictly positive                    
                </throws>
                <throws>
                    DimensionMismatchException if the array lengths do not match or
                      are less than 2.                    
                </throws>
            </javadoc>
            <method name="g" type="double" line="79">
                <params>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="long[]"/>
                </params>
                <scope line="81"/>
                <scope line="84"/>
                <declaration name="sumExpected" type="double" line="90"/>
                <declaration name="sumObserved" type="double" line="91"/>
                <scope line="92"/>
                <declaration name="ratio" type="double" line="96"/>
                <declaration name="rescale" type="boolean" line="97"/>
                <scope line="98"/>
                <declaration name="sum" type="double" line="102"/>
                <scope line="103">
                    <declaration name="dev" type="double" line="104"/>
                </scope>
            </method>
            <javadoc line="112">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
                  &quot;http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue&quot;&gt; p-value&lt;/a&gt;,
                  associated with a G-Test for goodness of fit&lt;/a&gt; comparing the{@code observed} frequency counts to those in the {@code expected} array.
                  &lt;p&gt;The number returned is the smallest significance level at which one
                  can reject the null hypothesis that the observed counts conform to the
                  frequency distribution described by the expected counts.&lt;/p&gt;
                  &lt;p&gt;The probability returned is the tail probability beyond{@link #g(double[],long[]) g(expected, observed)}in the ChiSquare distribution with degrees of freedom one less than the
                  common length of {@code expected} and {@code observed}.&lt;/p&gt;
                  &lt;p&gt; &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Expected counts must all be positive. &lt;/li&gt;
                  &lt;li&gt;Observed counts must all be &amp;ge; 0. &lt;/li&gt;
                  &lt;li&gt;The observed and expected arrays must have the
                  same length and their common length must be at least 2.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;This implementation rescales the{@code expected} array if necessary to ensure that the sum of the
                  expected and observed counts are equal.&lt;/p&gt;                
                <param>
                    observed array of observed frequency counts                    
                </param>
                <param>
                    expected array of expected frequency counts                    
                </param>
                <return>
                    p-value                    
                </return>
                <throws>
                    NotPositiveException if {@code observed} has negative entries                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code expected} has entries that
                      are not strictly positive                    
                </throws>
                <throws>
                    DimensionMismatchException if the array lengths do not match or
                      are less than 2.                    
                </throws>
                <throws>
                    MaxCountExceededException if an error occurs computing the
                      p-value.                    
                </throws>
            </javadoc>
            <method name="gTest" type="double" line="154">
                <params>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="long[]"/>
                </params>
                <declaration name="distribution" type="ChiSquaredDistribution" line="156"/>
            </method>
            <javadoc line="162">
                Returns the intrinsic (Hardy-Weinberg proportions) p-Value, as described
                  in p64-69 of McDonald, J.H. 2009. Handbook of Biological Statistics
                  (2nd ed.). Sparky House Publishing, Baltimore, Maryland.
                  &lt;p&gt; The probability returned is the tail probability beyond{@link #g(double[],long[]) g(expected, observed)}in the ChiSquare distribution with degrees of freedom two less than the
                  common length of {@code expected} and {@code observed}.&lt;/p&gt;                
                <param>
                    observed array of observed frequency counts                    
                </param>
                <param>
                    expected array of expected frequency counts                    
                </param>
                <return>
                    p-value                    
                </return>
                <throws>
                    NotPositiveException if {@code observed} has negative entries                    
                </throws>
                <throws>
                    NotStrictlyPositiveException {@code expected} has entries that are
                      not strictly positive                    
                </throws>
                <throws>
                    DimensionMismatchException if the array lengths do not match or
                      are less than 2.                    
                </throws>
                <throws>
                    MaxCountExceededException if an error occurs computing the
                      p-value.                    
                </throws>
            </javadoc>
            <method name="gTestIntrinsic" type="double" line="185">
                <params>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="long[]"/>
                </params>
                <declaration name="distribution" type="ChiSquaredDistribution" line="187"/>
            </method>
            <javadoc line="193">
                Performs a G-Test (Log-Likelihood Ratio Test) for goodness of fit
                  evaluating the null hypothesis that the observed counts conform to the
                  frequency distribution described by the expected counts, with
                  significance level {@code alpha}. Returns true iff the null
                  hypothesis can be rejected with {@code 100  (1 - alpha)} percent confidence.
                  &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt; To test the hypothesis that{@code observed} follows {@code expected} at the 99% level,
                  use &lt;/p&gt;&lt;p&gt;{@code gTest(expected, observed, 0.01)}&lt;/p&gt;
                  &lt;p&gt;Returns true iff {@link #gTest(double[],long[])gTestGoodnessOfFitPValue(expected, observed)} &lt; alpha&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Expected counts must all be positive. &lt;/li&gt;
                  &lt;li&gt;Observed counts must all be &amp;ge; 0. &lt;/li&gt;
                  &lt;li&gt;The observed and expected arrays must have the same length and their
                  common length must be at least 2.
                  &lt;li&gt; {@code 0 &lt; alpha &lt; 0.5} &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;This implementation rescales the{@code expected} array if necessary to ensure that the sum of the
                  expected and observed counts are equal.&lt;/p&gt;                
                <param>
                    observed array of observed frequency counts                    
                </param>
                <param>
                    expected array of expected frequency counts                    
                </param>
                <param>
                    alpha significance level of the test                    
                </param>
                <return>
                    true iff null hypothesis can be rejected with confidence 1 -
                      alpha                    
                </return>
                <throws>
                    NotPositiveException if {@code observed} has negative entries                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code expected} has entries that
                      are not strictly positive                    
                </throws>
                <throws>
                    DimensionMismatchException if the array lengths do not match or
                      are less than 2.                    
                </throws>
                <throws>
                    MaxCountExceededException if an error occurs computing the
                      p-value.                    
                </throws>
                <throws>
                    OutOfRangeException if alpha is not strictly greater than zero
                      and less than or equal to 0.5                    
                </throws>
            </javadoc>
            <method name="gTest" type="boolean" line="240">
                <params>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="long[]"/>
                    <param name="alpha" type="double"/>
                </params>
                <scope line="242"/>
            </method>
            <javadoc line="249">
                Calculates the &lt;a href=
                  &quot;http://en.wikipedia.org/wiki/Entropy_%28information_theory%29&quot;&gt;Shannon
                  entropy&lt;/a&gt; for 2 Dimensional Matrix.  The value returned is the entropy
                  of the vector formed by concatenating the rows (or columns) of {@code k}to form a vector. See {@link #entropy(long[])}.                
                <param>
                    k 2 Dimensional Matrix of long values (for ex. the counts of a
                      trials)                    
                </param>
                <return>
                    Shannon Entropy of the given Matrix                    
                </return>
            </javadoc>
            <method name="entropy" type="double" line="261">
                <params>
                    <param name="k" type="long[][]"/>
                </params>
                <declaration name="h" type="double" line="262"/>
                <declaration name="sum_k" type="double" line="263"/>
                <scope line="264">
                    <scope line="265"/>
                </scope>
                <scope line="269">
                    <scope line="270">
                        <scope line="271">
                            <declaration name="p_ij" type="double" line="272"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="280">
                Calculates the &lt;a href=&quot;http://en.wikipedia.org/wiki/Entropy_%28information_theory%29&quot;&gt;
                  Shannon entropy&lt;/a&gt; for a vector.  The values of {@code k} are taken to be
                  incidence counts of the values of a random variable. What is returned is &lt;br/&gt;
                  &amp;sum;p&lt;sub&gt;i&lt;/sub&gt;log(p&lt;sub&gt;i&lt;/sub&gt;&lt;br/&gt;
                  where p&lt;sub&gt;i&lt;/sub&gt; = k[i] / (sum of elements in k)                
                <param>
                    k Vector (for ex. Row Sums of a trials)                    
                </param>
                <return>
                    Shannon Entropy of the given Vector                    
                </return>
            </javadoc>
            <method name="entropy" type="double" line="291">
                <params>
                    <param name="k" type="long[]"/>
                </params>
                <declaration name="h" type="double" line="292"/>
                <declaration name="sum_k" type="double" line="293"/>
                <scope line="294"/>
                <scope line="297">
                    <scope line="298">
                        <declaration name="p_i" type="double" line="299"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="306">
                &lt;p&gt;Computes a G (Log-Likelihood Ratio) two sample test statistic for
                  independence comparing frequency counts in{@code observed1} and {@code observed2}. The sums of frequency
                  counts in the two samples are not required to be the same. The formula
                  used to compute the test statistic is &lt;/p&gt;
                  &lt;p&gt;{@code 2  totalSum  [H(rowSums) + H(colSums) - H(k)]}&lt;/p&gt;
                  &lt;p&gt; where {@code H} is the
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Entropy_%28information_theory%29&quot;&gt;
                  Shannon Entropy&lt;/a&gt; of the random variable formed by viewing the elements
                  of the argument array as incidence counts; &lt;br/&gt;{@code k} is a matrix with rows {@code [observed1, observed2]}; &lt;br/&gt;{@code rowSums, colSums} are the row/col sums of {@code k}; &lt;br&gt;
                  and {@code totalSum} is the overall sum of all entries in {@code k}.&lt;/p&gt;
                  &lt;p&gt;This statistic can be used to perform a G test evaluating the null
                  hypothesis that both observed counts are independent &lt;/p&gt;
                  &lt;p&gt; &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Observed counts must be non-negative. &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific bin must not both be zero. &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific sample must not all be  0. &lt;/li&gt;
                  &lt;li&gt;The arrays {@code observed1} and {@code observed2} must have
                  the same length and their common length must be at least 2. &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.&lt;/p&gt;                
                <param>
                    observed1 array of observed frequency counts of the first data set                    
                </param>
                <param>
                    observed2 array of observed frequency counts of the second data
                      set                    
                </param>
                <return>
                    G-Test statistic                    
                </return>
                <throws>
                    DimensionMismatchException the the lengths of the arrays do not
                      match or their common length is less than 2                    
                </throws>
                <throws>
                    NotPositiveException if any entry in {@code observed1} or{@code observed2} is negative                    
                </throws>
                <throws>
                    ZeroException if either all counts of{@code observed1} or {@code observed2} are zero, or if the count
                      at the same index is zero for both arrays.                    
                </throws>
            </javadoc>
            <method name="gDataSetsComparison" type="double" line="349">
                <params>
                    <param name="observed1" type="long[]"/>
                    <param name="observed2" type="long[]"/>
                </params>
                <comment line="352">
                    Make sure lengths are same                    
                </comment>
                <comment line="360">
                    Ensure non-negative counts                    
                </comment>
                <comment line="364">
                    Compute and compare count sums                    
                </comment>
                <comment line="368">
                    Compute and compare count sums                    
                </comment>
                <comment line="383">
                    Ensure neither sample is uniformly 0                    
                </comment>
                <scope line="352"/>
                <scope line="355"/>
                <declaration name="countSum1" type="long" line="364"/>
                <declaration name="countSum2" type="long" line="365"/>
                <declaration name="collSums" type="long[]" line="368"/>
                <declaration name="k" type="long[][]" line="369"/>
                <scope line="371">
                    <scope line="372"/>
                    <scope line="374"/>
                </scope>
                <scope line="383"/>
                <declaration name="rowSums" type="long[]" line="386"/>
                <declaration name="sum" type="double" line="387"/>
            </method>
            <javadoc line="391">
                Calculates the root log-likelihood ratio for 2 state Datasets. See{@link #gDataSetsComparison(long[],long[])}.
                  &lt;p&gt;Given two events A and B, let k11 be the number of times both events
                  occur, k12 the incidence of B without A, k21 the count of A without B,
                  and k22 the number of times neither A nor B occurs.  What is returned
                  by this method is &lt;/p&gt;
                  &lt;p&gt;{@code} (sgn) sqrt(gValueDataSetsComparison(
                  k11, k12}, {k21, k22})}&lt;/p&gt;
                  &lt;p&gt;where {@code sgn} is -1 if {@code k11 / (k11 + k12) &lt; k21 / (k21 + k22))};&lt;br/&gt;
                  1 otherwise.&lt;/p&gt;
                  &lt;p&gt;Signed root LLR has two advantages over the basic LLR: a) it is positive
                  where k11 is bigger than expected, negative where it is lower b) if there is
                  no difference it is asymptotically normally distributed. This allows one
                  to talk about &quot;number of standard deviations&quot; which is a more common frame
                  of reference than the chi^2 distribution.&lt;/p&gt;                
                <param>
                    k11 number of times the two events occurred together (AB)                    
                </param>
                <param>
                    k12 number of times the second event occurred WITHOUT the
                      first event (notA,B)                    
                </param>
                <param>
                    k21 number of times the first event occurred WITHOUT the
                      second event (A, notB)                    
                </param>
                <param>
                    k22 number of times something else occurred (i.e. was neither
                      of these events (notA, notB)                    
                </param>
                <return>
                    root log-likelihood ratio                    
                </return>
            </javadoc>
            <method name="rootLogLikelihoodRatio" type="double" line="422">
                <params>
                    <param name="k11" type="long"/>
                    <param name="k12" type="long"/>
                    <param name="k21" type="long"/>
                    <param name="k22" type="long"/>
                </params>
                <declaration name="llr" type="double" line="423"/>
                <declaration name="sqrt" type="double" line="425"/>
                <scope line="426"/>
            </method>
            <javadoc line="432">
                &lt;p&gt;Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
                  &quot;http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue&quot;&gt;
                  p-value&lt;/a&gt;, associated with a G-Value (Log-Likelihood Ratio) for two
                  sample test comparing bin frequency counts in {@code observed1} and{@code observed2}.&lt;/p&gt;
                  &lt;p&gt;The number returned is the smallest significance level at which one
                  can reject the null hypothesis that the observed counts conform to the
                  same distribution. &lt;/p&gt;
                  &lt;p&gt;See {@link #gTest(double[],long[])} for details
                  on how the p-value is computed.  The degrees of of freedom used to
                  perform the test is one less than the common length of the input observed
                  count arrays.&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt; &lt;li&gt;Observed counts must be non-negative. &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific bin must not both be zero. &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific sample must not all be 0. &lt;/li&gt;
                  &lt;li&gt;The arrays {@code observed1} and {@code observed2} must
                  have the same length and their common length must be at least 2. &lt;/li&gt;
                  &lt;/ul&gt;&lt;p&gt;
                  &lt;p&gt; If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.&lt;/p&gt;                
                <param>
                    observed1 array of observed frequency counts of the first data set                    
                </param>
                <param>
                    observed2 array of observed frequency counts of the second data
                      set                    
                </param>
                <return>
                    p-value                    
                </return>
                <throws>
                    DimensionMismatchException the the length of the arrays does not
                      match or their common length is less than 2                    
                </throws>
                <throws>
                    NotPositiveException if any of the entries in {@code observed1} or{@code observed2} are negative                    
                </throws>
                <throws>
                    ZeroException if either all counts of {@code observed1} or{@code observed2} are zero, or if the count at some index is
                      zero for both arrays                    
                </throws>
                <throws>
                    MaxCountExceededException if an error occurs computing the
                      p-value.                    
                </throws>
            </javadoc>
            <method name="gTestDataSetsComparison" type="double" line="475">
                <params>
                    <param name="observed1" type="long[]"/>
                    <param name="observed2" type="long[]"/>
                </params>
                <declaration name="distribution" type="ChiSquaredDistribution" line="476"/>
            </method>
            <javadoc line="482">
                &lt;p&gt;Performs a G-Test (Log-Likelihood Ratio Test) comparing two binned
                  data sets. The test evaluates the null hypothesis that the two lists
                  of observed counts conform to the same frequency distribution, with
                  significance level {@code alpha}. Returns true iff the null
                  hypothesis can be rejected  with 100  (1 - alpha) percent confidence.
                  &lt;/p&gt;
                  &lt;p&gt;See {@link #gDataSetsComparison(long[],long[])} for details
                  on the formula used to compute the G (LLR) statistic used in the test and{@link #gTest(double[],long[])} for information on how
                  the observed significance level is computed. The degrees of of freedom used
                  to perform the test is one less than the common length of the input observed
                  count arrays. &lt;/p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Observed counts must be non-negative. &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific bin must not both be zero. &lt;/li&gt;
                  &lt;li&gt;Observed counts for a specific sample must not all be 0. &lt;/li&gt;
                  &lt;li&gt;The arrays {@code observed1} and {@code observed2} must
                  have the same length and their common length must be at least 2. &lt;/li&gt;
                  &lt;li&gt;{@code 0 &lt; alpha &lt; 0.5} &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.&lt;/p&gt;                
                <param>
                    observed1 array of observed frequency counts of the first data set                    
                </param>
                <param>
                    observed2 array of observed frequency counts of the second data
                      set                    
                </param>
                <param>
                    alpha significance level of the test                    
                </param>
                <return>
                    true iff null hypothesis can be rejected with confidence 1 -
                      alpha                    
                </return>
                <throws>
                    DimensionMismatchException the the length of the arrays does not
                      match                    
                </throws>
                <throws>
                    NotPositiveException if any of the entries in {@code observed1} or{@code observed2} are negative                    
                </throws>
                <throws>
                    ZeroException if either all counts of {@code observed1} or{@code observed2} are zero, or if the count at some index is
                      zero for both arrays                    
                </throws>
                <throws>
                    OutOfRangeException if {@code alpha} is not in the range
                      (0, 0.5]                    
                </throws>
                <throws>
                    MaxCountExceededException if an error occurs performing the test                    
                </throws>
            </javadoc>
            <method name="gTestDataSetsComparison" type="boolean" line="529">
                <params>
                    <param name="observed1" type="long[]"/>
                    <param name="observed2" type="long[]"/>
                    <param name="alpha" type="double"/>
                </params>
                <scope line="531"/>
            </method>
        </class>
    </source>