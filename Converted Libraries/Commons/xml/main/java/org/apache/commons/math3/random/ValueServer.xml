<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="ValueServer" line="31">
            <comment line="94">
                Data generation modes ======================================                
            </comment>
            <comment line="370">
                ------------- private methods ---------------------------------                
            </comment>
            <javadoc line="31">
                Generates values for use in simulation applications.
                  &lt;p&gt;
                  How values are generated is determined by the &lt;code&gt;mode&lt;/code&gt;
                  property.&lt;/p&gt;
                  &lt;p&gt;
                  Supported &lt;code&gt;mode&lt;/code&gt; values are: &lt;ul&gt;
                  &lt;li&gt; DIGEST_MODE -- uses an empirical distribution &lt;/li&gt;
                  &lt;li&gt; REPLAY_MODE -- replays data from &lt;code&gt;valuesFileURL&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt; UNIFORM_MODE -- generates uniformly distributed random values with
                  mean = &lt;code&gt;mu&lt;/code&gt; &lt;/li&gt;
                  &lt;li&gt; EXPONENTIAL_MODE -- generates exponentially distributed random values
                  with mean = &lt;code&gt;mu&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt; GAUSSIAN_MODE -- generates Gaussian distributed random values with
                  mean = &lt;code&gt;mu&lt;/code&gt; and
                  standard deviation = &lt;code&gt;sigma&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt; CONSTANT_MODE -- returns &lt;code&gt;mu&lt;/code&gt; every time.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <version>
                    $Id: ValueServer.java 1422350 2012-12-15 20:47:47Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="DIGEST_MODE" type="int" line="54"/>
            <javadoc line="54">
                Use empirical distribution.                
            </javadoc>
            <declaration name="REPLAY_MODE" type="int" line="57"/>
            <javadoc line="57">
                Replay data from valuesFilePath.                
            </javadoc>
            <declaration name="UNIFORM_MODE" type="int" line="60"/>
            <javadoc line="60">
                Uniform random deviates with mean = &amp;mu;.                
            </javadoc>
            <declaration name="EXPONENTIAL_MODE" type="int" line="63"/>
            <javadoc line="63">
                Exponential random deviates with mean = &amp;mu;.                
            </javadoc>
            <declaration name="GAUSSIAN_MODE" type="int" line="66"/>
            <javadoc line="66">
                Gaussian random deviates with mean = &amp;mu;, std dev = &amp;sigma;.                
            </javadoc>
            <declaration name="CONSTANT_MODE" type="int" line="69"/>
            <javadoc line="69">
                Always return mu                
            </javadoc>
            <declaration name="mode" type="int" line="72"/>
            <javadoc line="72">
                mode determines how values are generated.                
            </javadoc>
            <declaration name="valuesFileURL" type="URL" line="75"/>
            <javadoc line="75">
                URI to raw data values.                
            </javadoc>
            <declaration name="mu" type="double" line="78"/>
            <javadoc line="78">
                Mean for use with non-data-driven modes.                
            </javadoc>
            <declaration name="sigma" type="double" line="81"/>
            <javadoc line="81">
                Standard deviation for use with GAUSSIAN_MODE.                
            </javadoc>
            <declaration name="empiricalDistribution" type="EmpiricalDistribution" line="84"/>
            <javadoc line="84">
                Empirical probability distribution for use with DIGEST_MODE.                
            </javadoc>
            <declaration name="filePointer" type="BufferedReader" line="87"/>
            <javadoc line="87">
                File pointer for REPLAY_MODE.                
            </javadoc>
            <declaration name="randomData" type="RandomDataImpl" line="90"/>
            <javadoc line="90">
                RandomDataImpl to use for random data generation.                
            </javadoc>
            <javadoc line="95">
                Creates new ValueServer                
            </javadoc>
            <method name="ValueServer" type="constructor" line="96"/>
            <javadoc line="100">
                Construct a ValueServer instance using a RandomDataImpl as its source
                  of random data.                
                <param>
                    randomData the RandomDataImpl instance used to source random data                    
                </param>
                <since>
                    3.0                    
                </since>
                <deprecated>
                    use {@link #ValueServer(RandomGenerator)}                    
                </deprecated>
            </javadoc>
            <method name="ValueServer" type="constructor" line="108">
                <params>
                    <param name="randomData" type="RandomDataImpl"/>
                </params>
            </method>
            <javadoc line="112">
                Construct a ValueServer instance using a RandomGenerator as its source
                  of random data.                
                <since>
                    3.1                    
                </since>
                <param>
                    generator source of random data                    
                </param>
            </javadoc>
            <method name="ValueServer" type="constructor" line="119">
                <params>
                    <param name="generator" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="123">
                Returns the next generated value, generated according
                  to the mode value (see MODE constants).                
                <return>
                    generated value                    
                </return>
                <throws>
                    IOException in REPLAY_MODE if a file I/O error occurs                    
                </throws>
                <throws>
                    MathIllegalStateException if mode is not recognized                    
                </throws>
                <throws>
                    MathIllegalArgumentException if the underlying random generator thwrows one                    
                </throws>
            </javadoc>
            <method name="getNext" type="double" line="132"/>
            <javadoc line="149">
                Fills the input array with values generated using getNext() repeatedly.                
                <param>
                    values array to be filled                    
                </param>
                <throws>
                    IOException in REPLAY_MODE if a file I/O error occurs                    
                </throws>
                <throws>
                    MathIllegalStateException if mode is not recognized                    
                </throws>
                <throws>
                    MathIllegalArgumentException if the underlying random generator thwrows one                    
                </throws>
            </javadoc>
            <method name="fill" type="void" line="158">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <scope line="159"/>
            </method>
            <javadoc line="164">
                Returns an array of length &lt;code&gt;length&lt;/code&gt; with values generated
                  using getNext() repeatedly.                
                <param>
                    length length of output array                    
                </param>
                <return>
                    array of generated values                    
                </return>
                <throws>
                    IOException in REPLAY_MODE if a file I/O error occurs                    
                </throws>
                <throws>
                    MathIllegalStateException if mode is not recognized                    
                </throws>
                <throws>
                    MathIllegalArgumentException if the underlying random generator thwrows one                    
                </throws>
            </javadoc>
            <method name="fill" type="double[]" line="175">
                <params>
                    <param name="length" type="int"/>
                </params>
                <declaration name="out" type="double[]" line="176"/>
                <scope line="177"/>
            </method>
            <javadoc line="183">
                Computes the empirical distribution using values from the file
                  in &lt;code&gt;valuesFileURL&lt;/code&gt;, using the default number of bins.
                  &lt;p&gt;
                  &lt;code&gt;valuesFileURL&lt;/code&gt; must exist and be
                  readable by this at runtime.&lt;/p&gt;
                  &lt;p&gt;
                  This method must be called before using &lt;code&gt;getNext()&lt;/code&gt;
                  with &lt;code&gt;mode = DIGEST_MODE&lt;/code&gt;&lt;/p&gt;                
                <throws>
                    IOException if an I/O error occurs reading the input file                    
                </throws>
                <throws>
                    NullArgumentException if the {@code valuesFileURL} has not been set                    
                </throws>
                <throws>
                    ZeroException if URL contains no data                    
                </throws>
            </javadoc>
            <method name="computeDistribution" type="void" line="197"/>
            <javadoc line="201">
                Computes the empirical distribution using values from the file
                  in &lt;code&gt;valuesFileURL&lt;/code&gt; and &lt;code&gt;binCount&lt;/code&gt; bins.
                  &lt;p&gt;
                  &lt;code&gt;valuesFileURL&lt;/code&gt; must exist and be readable by this process
                  at runtime.&lt;/p&gt;
                  &lt;p&gt;
                  This method must be called before using &lt;code&gt;getNext()&lt;/code&gt;
                  with &lt;code&gt;mode = DIGEST_MODE&lt;/code&gt;&lt;/p&gt;                
                <param>
                    binCount the number of bins used in computing the empirical
                      distribution                    
                </param>
                <throws>
                    NullArgumentException if the {@code valuesFileURL} has not been set                    
                </throws>
                <throws>
                    IOException if an error occurs reading the input file                    
                </throws>
                <throws>
                    ZeroException if URL contains no data                    
                </throws>
            </javadoc>
            <method name="computeDistribution" type="void" line="217">
                <params>
                    <param name="binCount" type="int"/>
                </params>
            </method>
            <javadoc line="224">
                Returns the data generation mode. See {@link ValueServer the class javadoc}for description of the valid values of this property.                
                <return>
                    Value of property mode.                    
                </return>
            </javadoc>
            <method name="getMode" type="int" line="230"/>
            <javadoc line="234">
                Sets the data generation mode.                
                <param>
                    mode New value of the data generation mode.                    
                </param>
            </javadoc>
            <method name="setMode" type="void" line="239">
                <params>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="243">
                Returns the URL for the file used to build the empirical distribution
                  when using {@link #DIGEST_MODE}.                
                <return>
                    Values file URL.                    
                </return>
            </javadoc>
            <method name="getValuesFileURL" type="URL" line="249"/>
            <javadoc line="253">
                Sets the {@link #getValuesFileURL() values file URL} using a string
                  URL representation.                
                <param>
                    url String representation for new valuesFileURL.                    
                </param>
                <throws>
                    MalformedURLException if url is not well formed                    
                </throws>
            </javadoc>
            <method name="setValuesFileURL" type="void" line="260">
                <params>
                    <param name="url" type="String"/>
                </params>
            </method>
            <javadoc line="264">
                Sets the the {@link #getValuesFileURL() values file URL}.
                  &lt;p&gt;The values file &lt;i&gt;must&lt;/i&gt; be an ASCII text file containing one
                  valid numeric entry per line.&lt;/p&gt;                
                <param>
                    url URL of the values file.                    
                </param>
            </javadoc>
            <method name="setValuesFileURL" type="void" line="272">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="276">
                Returns the {@link EmpiricalDistribution} used when operating in {@value #DIGEST_MODE}.                
                <return>
                    EmpircalDistribution built by {@link #computeDistribution()}                    
                </return>
            </javadoc>
            <method name="getEmpiricalDistribution" type="EmpiricalDistribution" line="281"/>
            <javadoc line="285">
                Resets REPLAY_MODE file pointer to the beginning of the &lt;code&gt;valuesFileURL&lt;/code&gt;.                
                <throws>
                    IOException if an error occurs opening the file                    
                </throws>
            </javadoc>
            <method name="resetReplayFile" type="void" line="290">
                <comment line="295">
                    NOPMD                    
                </comment>
                <comment line="296">
                    ignore                    
                </comment>
                <scope line="291">
                    <scope line="292"/>
                    <scope line="295"/>
                </scope>
            </method>
            <javadoc line="302">
                Closes {@code valuesFileURL} after use in REPLAY_MODE.                
                <throws>
                    IOException if an error occurs closing the file                    
                </throws>
            </javadoc>
            <method name="closeReplayFile" type="void" line="307">
                <scope line="308"/>
            </method>
            <javadoc line="314">
                Returns the mean used when operating in {@link #GAUSSIAN_MODE}, {@link #EXPONENTIAL_MODE}or {@link #UNIFORM_MODE}.  When operating in {@link #CONSTANT_MODE}, this is the constant
                  value always returned.  Calling {@link #computeDistribution()} sets this value to the
                  overall mean of the values in the {@link #getValuesFileURL() values file}.                
                <return>
                    Mean used in data generation.                    
                </return>
            </javadoc>
            <method name="getMu" type="double" line="322"/>
            <javadoc line="326">
                Sets the {@link #getMu() mean} used in data generation.  Note that calling this method
                  after {@link #computeDistribution()} has been called will have no effect on data
                  generated in {@link #DIGEST_MODE}.                
                <param>
                    mu new Mean value.                    
                </param>
            </javadoc>
            <method name="setMu" type="void" line="333">
                <params>
                    <param name="mu" type="double"/>
                </params>
            </method>
            <javadoc line="337">
                Returns the standard deviation used when operating in {@link #GAUSSIAN_MODE}.
                  Calling {@link #computeDistribution()} sets this value to the overall standard
                  deviation of the values in the {@link #getValuesFileURL() values file}.  This
                  property has no effect when the data generation mode is not{@link #GAUSSIAN_MODE}.                
                <return>
                    Standard deviation used when operating in {@link #GAUSSIAN_MODE}.                    
                </return>
            </javadoc>
            <method name="getSigma" type="double" line="346"/>
            <javadoc line="350">
                Sets the {@link #getSigma() standard deviation} used in {@link #GAUSSIAN_MODE}.                
                <param>
                    sigma New standard deviation.                    
                </param>
            </javadoc>
            <method name="setSigma" type="void" line="355">
                <params>
                    <param name="sigma" type="double"/>
                </params>
            </method>
            <javadoc line="359">
                Reseeds the random data generator.                
                <param>
                    seed Value with which to reseed the {@link RandomDataImpl}used to generate random data.                    
                </param>
            </javadoc>
            <method name="reSeed" type="void" line="365">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <javadoc line="371">
                Gets a random value in DIGEST_MODE.
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;Before this method is called, &lt;code&gt;computeDistribution()&lt;/code&gt;
                  must have completed successfully; otherwise an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <return>
                    next random value from the empirical distribution digest                    
                </return>
                <throws>
                    MathIllegalStateException if digest has not been initialized                    
                </throws>
            </javadoc>
            <method name="getNextDigest" type="double" line="382">
                <scope line="384"/>
            </method>
            <javadoc line="390">
                Gets next sequential value from the &lt;code&gt;valuesFileURL&lt;/code&gt;.
                  &lt;p&gt;
                  Throws an IOException if the read fails.&lt;/p&gt;
                  &lt;p&gt;
                  This method will open the &lt;code&gt;valuesFileURL&lt;/code&gt; if there is no
                  replay file open.&lt;/p&gt;
                  &lt;p&gt;
                  The &lt;code&gt;valuesFileURL&lt;/code&gt; will be closed and reopened to wrap around
                  from EOF to BOF if EOF is encountered. EOFException (which is a kind of
                  IOException) may still be thrown if the &lt;code&gt;valuesFileURL&lt;/code&gt; is
                  empty.&lt;/p&gt;                
                <return>
                    next value from the replay file                    
                </return>
                <throws>
                    IOException if there is a problem reading from the file                    
                </throws>
                <throws>
                    MathIllegalStateException if URL contains no data                    
                </throws>
                <throws>
                    NumberFormatException if an invalid numeric string is
                      encountered in the file                    
                </throws>
            </javadoc>
            <method name="getNextReplay" type="double" line="409">
                <comment line="415">
                    we have probably reached end of file, wrap around from EOF to BOF                    
                </comment>
                <declaration name="str" type="String" line="410"/>
                <scope line="411"/>
                <scope line="414">
                    <scope line="418"/>
                </scope>
            </method>
            <javadoc line="426">
                Gets a uniformly distributed random value with mean = mu.                
                <return>
                    random uniform value                    
                </return>
                <throws>
                    MathIllegalArgumentException if the underlying random generator thwrows one                    
                </throws>
            </javadoc>
            <method name="getNextUniform" type="double" line="432"/>
            <javadoc line="436">
                Gets an exponentially distributed random value with mean = mu.                
                <return>
                    random exponential value                    
                </return>
                <throws>
                    MathIllegalArgumentException if the underlying random generator thwrows one                    
                </throws>
            </javadoc>
            <method name="getNextExponential" type="double" line="442"/>
            <javadoc line="446">
                Gets a Gaussian distributed random value with mean = mu
                  and standard deviation = sigma.                
                <return>
                    random Gaussian value                    
                </return>
                <throws>
                    MathIllegalArgumentException if the underlying random generator thwrows one                    
                </throws>
            </javadoc>
            <method name="getNextGaussian" type="double" line="453"/>
        </class>
    </source>