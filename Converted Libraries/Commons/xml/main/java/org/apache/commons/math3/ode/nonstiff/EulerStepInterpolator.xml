<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="org.apache.commons.math3.ode.sampling.StepInterpolator"/>
        <class name="EulerStepInterpolator" line="22">
            <extends class="RungeKuttaStepInterpolator"/>
            <javadoc line="22">
                This class implements a linear interpolator for step.
                  &lt;p&gt;This interpolator computes dense output inside the last
                  step computed. The interpolation equation is consistent with the
                  integration scheme :
                  &lt;ul&gt;
                  &lt;li&gt;Using reference point at step start:&lt;br&gt;
                  y(t&lt;sub&gt;n&lt;/sub&gt; + &amp;theta; h) = y (t&lt;sub&gt;n&lt;/sub&gt;) + &amp;theta; h y&apos;
                  &lt;/li&gt;
                  &lt;li&gt;Using reference point at step end:&lt;br&gt;
                  y(t&lt;sub&gt;n&lt;/sub&gt; + &amp;theta; h) = y (t&lt;sub&gt;n&lt;/sub&gt; + h) - (1-&amp;theta;) h y&apos;
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  where &amp;theta; belongs to [0 ; 1] and where y&apos; is the evaluation of
                  the derivatives already computed during the step.&lt;/p&gt;                
                <see>
                    EulerIntegrator                    
                </see>
                <version>
                    $Id: EulerStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <javadoc line="49">
                Serializable version identifier.                
            </javadoc>
            <javadoc line="52">
                Simple constructor.
                  This constructor builds an instance that is not usable yet, the{@link org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#reinitialize}method should be called before using the instance in order to
                  initialize the internal arrays. This constructor is used only
                  in order to delay the initialization in some cases. The {@link RungeKuttaIntegrator} class uses the prototyping design pattern
                  to create the step interpolators by cloning an uninitialized model
                  and later initializing the copy.                
            </javadoc>
            <method name="EulerStepInterpolator" type="constructor" line="63"/>
            <javadoc line="66">
                Copy constructor.                
                <param>
                    interpolator interpolator to copy from. The copy is a deep
                      copy: its arrays are separated from the original arrays of the
                      instance                    
                </param>
            </javadoc>
            <method name="EulerStepInterpolator" type="constructor" line="71">
                <params>
                    <param name="interpolator" type="EulerStepInterpolator"/>
                </params>
            </method>
            <javadoc line="75">
                {@inheritDoc}                
            </javadoc>
            <method name="doCopy" type="StepInterpolator" line="77"/>
            <javadoc line="82">
                {@inheritDoc}                
            </javadoc>
            <method name="computeInterpolatedStateAndDerivatives" type="void" line="85">
                <params>
                    <param name="theta" type="double"/>
                    <param name="oneMinusThetaH" type="double"/>
                </params>
                <scope line="86">
                    <scope line="87"/>
                </scope>
                <scope line="91">
                    <scope line="92"/>
                </scope>
            </method>
        </class>
    </source>