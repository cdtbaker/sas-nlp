<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.io.Serializable"/>
        <class name="ISAACRandom" line="22">
            <extends class="BitsStreamGenerator"/>
            <implements interface="Serializable"/>
            <javadoc line="22">
                &lt;a href=&quot;http://burtleburtle.net/bob/rand/isaacafa.html&quot;&gt;
                  ISAAC: a fast cryptographic pseudo-random number generator&lt;/a&gt;
                  &lt;br/&gt;
                  ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit
                  random numbers.
                  ISAAC has been designed to be cryptographically secure and is inspired
                  by RC4.
                  Cycles are guaranteed to be at least 2&lt;sup&gt;40&lt;/sup&gt; values long, and they
                  are 2&lt;sup&gt;8295&lt;/sup&gt; values long on average.
                  The results are uniformly distributed, unbiased, and unpredictable unless
                  you know the seed.
                  &lt;br/&gt;
                  This code is based (with minor changes and improvements) on the original
                  implementation of the algorithm by Bob Jenkins.
                  &lt;br/&gt;                
                <version>
                    $Id: ISAACRandom.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="43">
                Serializable version identifier                
            </javadoc>
            <declaration name="SIZE_L" type="int" line="45"/>
            <javadoc line="45">
                Log of size of rsl[] and mem[]                
            </javadoc>
            <declaration name="SIZE" type="int" line="47"/>
            <javadoc line="47">
                Size of rsl[] and mem[]                
            </javadoc>
            <declaration name="H_SIZE" type="int" line="49"/>
            <javadoc line="49">
                Half-size of rsl[] and mem[]                
            </javadoc>
            <declaration name="MASK" type="int" line="51"/>
            <javadoc line="51">
                For pseudo-random lookup                
            </javadoc>
            <declaration name="GLD_RATIO" type="int" line="53"/>
            <javadoc line="53">
                The golden ratio                
            </javadoc>
            <declaration name="rsl" type="int[]" line="55"/>
            <javadoc line="55">
                The results given to the user                
            </javadoc>
            <declaration name="mem" type="int[]" line="57"/>
            <javadoc line="57">
                The internal state                
            </javadoc>
            <declaration name="count" type="int" line="59"/>
            <javadoc line="59">
                Count through the results in rsl[]                
            </javadoc>
            <declaration name="isaacA" type="int" line="61"/>
            <javadoc line="61">
                Accumulator                
            </javadoc>
            <declaration name="isaacB" type="int" line="63"/>
            <javadoc line="63">
                The last result                
            </javadoc>
            <declaration name="isaacC" type="int" line="65"/>
            <javadoc line="65">
                Counter, guarantees cycle is at least 2^40                
            </javadoc>
            <declaration name="arr" type="int[]" line="67"/>
            <javadoc line="67">
                Service variable.                
            </javadoc>
            <declaration name="isaacX" type="int" line="69"/>
            <javadoc line="69">
                Service variable.                
            </javadoc>
            <declaration name="isaacI" type="int" line="71"/>
            <javadoc line="71">
                Service variable.                
            </javadoc>
            <declaration name="isaacJ" type="int" line="73"/>
            <javadoc line="73">
                Service variable.                
            </javadoc>
            <javadoc line="77">
                Creates a new ISAAC random number generator.
                  &lt;br/&gt;
                  The instance is initialized using a combination of the
                  current time and system hash code of the instance as the seed.                
            </javadoc>
            <method name="ISAACRandom" type="constructor" line="83"/>
            <javadoc line="87">
                Creates a new ISAAC random number generator using a single long seed.                
                <param>
                    seed Initial seed.                    
                </param>
            </javadoc>
            <method name="ISAACRandom" type="constructor" line="92">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <javadoc line="96">
                Creates a new ISAAC random number generator using an int array seed.                
                <param>
                    seed Initial seed. If {@code null}, the seed will be related
                      to the current time.                    
                </param>
            </javadoc>
            <method name="ISAACRandom" type="constructor" line="102">
                <params>
                    <param name="seed" type="int[]"/>
                </params>
            </method>
            <javadoc line="106">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="108">
                <params>
                    <param name="seed" type="int"/>
                </params>
            </method>
            <javadoc line="112">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="114">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <javadoc line="118">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="120">
                <params>
                    <param name="seed" type="int[]"/>
                </params>
                <scope line="121"/>
                <declaration name="seedLen" type="int" line="125"/>
                <declaration name="rslLen" type="int" line="126"/>
                <scope line="128">
                    <scope line="129">
                        <declaration name="k" type="long" line="130"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="137">
                {@inheritDoc}                
            </javadoc>
            <method name="next" type="int" line="139">
                <params>
                    <param name="bits" type="int"/>
                </params>
                <scope line="140"/>
            </method>
            <javadoc line="147">
                Generate 256 results                
            </javadoc>
            <method name="isaac" type="void" line="148">
                <scope line="152"/>
                <scope line="156"/>
            </method>
            <javadoc line="161">
                Intermediate internal loop.                
            </javadoc>
            <method name="isaac2" type="void" line="162"/>
            <javadoc line="181">
                Lowest level internal loop.                
            </javadoc>
            <method name="isaac3" type="void" line="182"/>
            <javadoc line="188">
                Initialize, or reinitialize, this instance of rand.                
            </javadoc>
            <method name="initState" type="void" line="189">
                <comment line="200">
                    fill in mem[] with messy stuff                    
                </comment>
                <comment line="213">
                    second pass makes all of seed affect all of mem                    
                </comment>
                <scope line="193"/>
                <scope line="196"/>
                <scope line="200"/>
                <scope line="213"/>
            </method>
            <javadoc line="230">
                Shuffle array.                
            </javadoc>
            <method name="shuffle" type="void" line="231"/>
            <javadoc line="258">
                Set the state by copying the internal arrays.                
                <param>
                    start First index into {@link #mem} array.                    
                </param>
            </javadoc>
            <method name="setState" type="void" line="262">
                <params>
                    <param name="start" type="int"/>
                </params>
            </method>
        </class>
    </source>