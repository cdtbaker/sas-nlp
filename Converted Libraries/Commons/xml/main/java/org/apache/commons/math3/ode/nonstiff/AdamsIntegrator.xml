<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.ode.ExpandableStatefulODE"/>
        <import package="org.apache.commons.math3.ode.MultistepIntegrator"/>
        <class name="AdamsIntegrator" line="9">
            <extends class="MultistepIntegrator"/>
            <javadoc line="9">
                Base class for {@link AdamsBashforthIntegrator Adams-Bashforth} and{@link AdamsMoultonIntegrator Adams-Moulton} integrators.                
                <version>
                    $Id: AdamsIntegrator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="transformer" type="AdamsNordsieckTransformer" line="15"/>
            <javadoc line="15">
                Transformer.                
            </javadoc>
            <javadoc line="19">
                Build an Adams integrator with the given order and step control parameters.                
                <param>
                    name name of the method                    
                </param>
                <param>
                    nSteps number of steps of the method excluding the one being computed                    
                </param>
                <param>
                    order order of the method                    
                </param>
                <param>
                    minStep minimal step (sign is irrelevant, regardless of
                      integration direction, forward or backward), the last step can
                      be smaller than this                    
                </param>
                <param>
                    maxStep maximal step (sign is irrelevant, regardless of
                      integration direction, forward or backward), the last step can
                      be smaller than this                    
                </param>
                <param>
                    scalAbsoluteTolerance allowed absolute error                    
                </param>
                <param>
                    scalRelativeTolerance allowed relative error                    
                </param>
                <exception>
                    NumberIsTooSmallException if order is 1 or less                    
                </exception>
            </javadoc>
            <method name="AdamsIntegrator" type="constructor" line="34">
                <params>
                    <param name="name" type="String"/>
                    <param name="nSteps" type="int"/>
                    <param name="order" type="int"/>
                    <param name="minStep" type="double"/>
                    <param name="maxStep" type="double"/>
                    <param name="scalAbsoluteTolerance" type="double"/>
                    <param name="scalRelativeTolerance" type="double"/>
                </params>
            </method>
            <javadoc line="38">
                Build an Adams integrator with the given order and step control parameters.                
                <param>
                    name name of the method                    
                </param>
                <param>
                    nSteps number of steps of the method excluding the one being computed                    
                </param>
                <param>
                    order order of the method                    
                </param>
                <param>
                    minStep minimal step (sign is irrelevant, regardless of
                      integration direction, forward or backward), the last step can
                      be smaller than this                    
                </param>
                <param>
                    maxStep maximal step (sign is irrelevant, regardless of
                      integration direction, forward or backward), the last step can
                      be smaller than this                    
                </param>
                <param>
                    vecAbsoluteTolerance allowed absolute error                    
                </param>
                <param>
                    vecRelativeTolerance allowed relative error                    
                </param>
                <exception>
                    IllegalArgumentException if order is 1 or less                    
                </exception>
            </javadoc>
            <method name="AdamsIntegrator" type="constructor" line="53">
                <params>
                    <param name="name" type="String"/>
                    <param name="nSteps" type="int"/>
                    <param name="order" type="int"/>
                    <param name="minStep" type="double"/>
                    <param name="maxStep" type="double"/>
                    <param name="vecAbsoluteTolerance" type="double[]"/>
                    <param name="vecRelativeTolerance" type="double[]"/>
                </params>
            </method>
            <method name="integrate" type="void" line="57"/>
            <javadoc line="57">
                {@inheritDoc}                
            </javadoc>
            <javadoc line="61">
                {@inheritDoc}                
            </javadoc>
            <method name="initializeHighOrderDerivatives" type="Array2DRowRealMatrix" line="64">
                <params>
                    <param name="h" type="double"/>
                    <param name="t" type="double[]"/>
                    <param name="y" type="double[][]"/>
                    <param name="yDot" type="double[][]"/>
                </params>
            </method>
            <javadoc line="67">
                Update the high order scaled derivatives for Adams integrators (phase 1).
                  &lt;p&gt;The complete update of high order derivatives has a form similar to:
                  &lt;pre&gt;
                  r&lt;sub&gt;n+1&lt;/sub&gt; = (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u + P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt;
                  &lt;/pre&gt;
                  this method computes the P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt; part.&lt;/p&gt;                
                <param>
                    highOrder high order scaled derivatives
                      (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))                    
                </param>
                <return>
                    updated high order derivatives                    
                </return>
                <see>
                    #updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)                    
                </see>
            </javadoc>
            <method name="updateHighOrderDerivativesPhase1" type="Array2DRowRealMatrix" line="79">
                <params>
                    <param name="highOrder" type="Array2DRowRealMatrix"/>
                </params>
            </method>
            <javadoc line="82">
                Update the high order scaled derivatives Adams integrators (phase 2).
                  &lt;p&gt;The complete update of high order derivatives has a form similar to:
                  &lt;pre&gt;
                  r&lt;sub&gt;n+1&lt;/sub&gt; = (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u + P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt;
                  &lt;/pre&gt;
                  this method computes the (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u part.&lt;/p&gt;
                  &lt;p&gt;Phase 1 of the update must already have been performed.&lt;/p&gt;                
                <param>
                    start first order scaled derivatives at step start                    
                </param>
                <param>
                    end first order scaled derivatives at step end                    
                </param>
                <param>
                    highOrder high order scaled derivatives, will be modified
                      (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))                    
                </param>
                <see>
                    #updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)                    
                </see>
            </javadoc>
            <method name="updateHighOrderDerivativesPhase2" type="void" line="96">
                <params>
                    <param name="start" type="double[]"/>
                    <param name="end" type="double[]"/>
                    <param name="highOrder" type="Array2DRowRealMatrix"/>
                </params>
            </method>
        </class>
    </source>