<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.genetics">
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <class name="GeneticAlgorithm" line="6">
            <javadoc line="6">
                Implementation of a genetic algorithm. All factors that govern the operation
                  of the algorithm can be configured for a specific problem.                
                <since>
                    2.0                    
                </since>
                <version>
                    $Id: GeneticAlgorithm.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="randomGenerator" type="RandomGenerator" line="13"/>
            <javadoc line="13">
                Static random number generator shared by GA implementation classes. Set the randomGenerator seed to get
                  reproducible results. Use {@link #setRandomGenerator(RandomGenerator)} to supply an alternative to the default
                  JDK-provided PRNG.                
            </javadoc>
            <declaration name="crossoverPolicy" type="CrossoverPolicy" line="19"/>
            <javadoc line="19">
                the crossover policy used by the algorithm.                
            </javadoc>
            <declaration name="crossoverRate" type="double" line="23"/>
            <javadoc line="23">
                the rate of crossover for the algorithm.                
            </javadoc>
            <declaration name="mutationPolicy" type="MutationPolicy" line="27"/>
            <javadoc line="27">
                the mutation policy used by the algorithm.                
            </javadoc>
            <declaration name="mutationRate" type="double" line="31"/>
            <javadoc line="31">
                the rate of mutation for the algorithm.                
            </javadoc>
            <declaration name="selectionPolicy" type="SelectionPolicy" line="35"/>
            <javadoc line="35">
                the selection policy used by the algorithm.                
            </javadoc>
            <declaration name="generationsEvolved" type="int" line="39"/>
            <javadoc line="39">
                the number of generations evolved to reach {@link StoppingCondition} in the last run.                
            </javadoc>
            <javadoc line="43">
                Create a new genetic algorithm.                
                <param>
                    crossoverPolicy The {@link CrossoverPolicy}                    
                </param>
                <param>
                    crossoverRate The crossover rate as a percentage (0-1 inclusive)                    
                </param>
                <param>
                    mutationPolicy The {@link MutationPolicy}                    
                </param>
                <param>
                    mutationRate The mutation rate as a percentage (0-1 inclusive)                    
                </param>
                <param>
                    selectionPolicy The {@link SelectionPolicy}                    
                </param>
                <throws>
                    OutOfRangeException if the crossover or mutation rate is outside the [0, 1] range                    
                </throws>
            </javadoc>
            <method name="GeneticAlgorithm" type="constructor" line="52">
                <params>
                    <param name="crossoverPolicy" type="CrossoverPolicy"/>
                    <param name="crossoverRate" type="double"/>
                    <param name="mutationPolicy" type="MutationPolicy"/>
                    <param name="mutationRate" type="double"/>
                    <param name="selectionPolicy" type="SelectionPolicy"/>
                </params>
                <scope line="53"/>
                <scope line="56"/>
            </method>
            <javadoc line="65">
                Set the (static) random generator.                
                <param>
                    random random generator                    
                </param>
            </javadoc>
            <method name="setRandomGenerator" type="void" line="69">
                <params>
                    <param name="random" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="72">
                Returns the (static) random generator.                
                <return>
                    the static random generator shared by GA implementation classes                    
                </return>
            </javadoc>
            <method name="getRandomGenerator" type="RandomGenerator" line="76"/>
            <javadoc line="79">
                Evolve the given population. Evolution stops when the stopping condition
                  is satisfied. Updates the {@link #getGenerationsEvolved() generationsEvolved}property with the number of generations evolved before the StoppingCondition
                  is satisfied.                
                <param>
                    initial the initial, seed population.                    
                </param>
                <param>
                    condition the stopping condition used to stop evolution.                    
                </param>
                <return>
                    the population that satisfies the stopping condition.                    
                </return>
            </javadoc>
            <method name="evolve" type="Population" line="87">
                <params>
                    <param name="initial" type="Population"/>
                    <param name="condition" type="StoppingCondition"/>
                </params>
                <declaration name="current" type="Population" line="88"/>
                <scope line="90"/>
            </method>
            <javadoc line="96">
                Evolve the given population into the next generation.
                  &lt;p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;Get nextGeneration population to fill from &lt;code&gt;current&lt;/code&gt;
                  generation, using its nextGeneration method&lt;/li&gt;
                  &lt;li&gt;Loop until new generation is filled:&lt;/li&gt;
                  &lt;ul&gt;&lt;li&gt;Apply configured SelectionPolicy to select a pair of parents
                  from &lt;code&gt;current&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;With probability = {@link #getCrossoverRate()}, apply
                  configured {@link CrossoverPolicy} to parents&lt;/li&gt;
                  &lt;li&gt;With probability = {@link #getMutationRate()}, apply
                  configured {@link MutationPolicy} to each of the offspring&lt;/li&gt;
                  &lt;li&gt;Add offspring individually to nextGeneration,
                  space permitting&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;li&gt;Return nextGeneration&lt;/li&gt;
                  &lt;/ol&gt;                
                <param>
                    current the current population.                    
                </param>
                <return>
                    the population for the next generation.                    
                </return>
            </javadoc>
            <method name="nextGeneration" type="Population" line="117">
                <params>
                    <param name="current" type="Population"/>
                </params>
                <declaration name="nextGeneration" type="Population" line="118"/>
                <declaration name="randGen" type="RandomGenerator" line="119"/>
                <scope line="120">
                    <declaration name="pair" type="ChromosomePair" line="121"/>
                    <scope line="122"/>
                    <scope line="125"/>
                    <scope line="129"/>
                </scope>
            </method>
            <javadoc line="135">
                Returns the crossover policy.                
                <return>
                    crossover policy                    
                </return>
            </javadoc>
            <method name="getCrossoverPolicy" type="CrossoverPolicy" line="139"/>
            <javadoc line="142">
                Returns the crossover rate.                
                <return>
                    crossover rate                    
                </return>
            </javadoc>
            <method name="getCrossoverRate" type="double" line="146"/>
            <javadoc line="149">
                Returns the mutation policy.                
                <return>
                    mutation policy                    
                </return>
            </javadoc>
            <method name="getMutationPolicy" type="MutationPolicy" line="153"/>
            <javadoc line="156">
                Returns the mutation rate.                
                <return>
                    mutation rate                    
                </return>
            </javadoc>
            <method name="getMutationRate" type="double" line="160"/>
            <javadoc line="163">
                Returns the selection policy.                
                <return>
                    selection policy                    
                </return>
            </javadoc>
            <method name="getSelectionPolicy" type="SelectionPolicy" line="167"/>
            <javadoc line="170">
                Returns the number of generations evolved to reach {@link StoppingCondition} in the last run.                
                <return>
                    number of generations evolved                    
                </return>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="getGenerationsEvolved" type="int" line="175"/>
        </class>
    </source>