<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.OpenIntToFieldHashMap"/>
        <class name="SparseFieldVector" line="33">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="FieldVector">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="33">
                This class implements the {@link FieldVector} interface with a {@link OpenIntToFieldHashMap} backing store.                
                <param>
                    <T>
                       the type of the field elements                    
                </param>
                <version>
                    $Id: SparseFieldVector.java 1455233 2013-03-11 17:00:41Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
                <deprecated>
                    As of version 3.1, this class is deprecated, for reasons exposed
                      in this JIRA
                      <a href="https://issues.apache.org/jira/browse/MATH-870">ticket</a>. This
                      class will be removed in version 4.0.                    
                </deprecated>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <javadoc line="45">
                Serialization identifier.                
            </javadoc>
            <declaration name="field" type="Field&lt;T&gt;" line="47"/>
            <javadoc line="47">
                Field to which the elements belong.                
            </javadoc>
            <declaration name="entries" type="OpenIntToFieldHashMap&lt;T&gt;" line="49"/>
            <javadoc line="49">
                Entries of the vector.                
            </javadoc>
            <declaration name="virtualSize" type="int" line="51"/>
            <javadoc line="51">
                Dimension of the vector.                
            </javadoc>
            <javadoc line="54">
                Build a 0-length vector.
                  Zero-length vectors may be used to initialize construction of vectors
                  by data gathering. We start with zero-length and use either the {@link #SparseFieldVector(SparseFieldVector,int)} constructor
                  or one of the {@code append} method ({@link #append(FieldVector)} or{@link #append(SparseFieldVector)}) to gather data into this vector.                
                <param>
                    field Field to which the elements belong.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="64">
                <params>
                    <param name="field" type="Field<T>"/>
                </params>
            </method>
            <javadoc line="69">
                Construct a vector of zeroes.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    dimension Size of the vector.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="75">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="81">
                Build a resized vector, for use with append.                
                <param>
                    v Original vector                    
                </param>
                <param>
                    resize Amount to add.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="87">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                    <param name="resize" type="int"/>
                </params>
            </method>
            <javadoc line="94">
                Build a vector with known the sparseness (for advanced use only).                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    expectedSize Expected number of non-zero entries.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="101">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="dimension" type="int"/>
                    <param name="expectedSize" type="int"/>
                </params>
            </method>
            <javadoc line="107">
                Create from a Field array.
                  Only non-zero entries will be stored.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    values Set of values to create from.                    
                </param>
                <exception>
                    NullArgumentException if values is null                    
                </exception>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="115">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="values" type="T[]"/>
                </params>
                <scope line="120">
                    <declaration name="value" type="T" line="121"/>
                </scope>
            </method>
            <javadoc line="126">
                Copy constructor.                
                <param>
                    v Instance to copy.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="131">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                </params>
            </method>
            <javadoc line="137">
                Get the entries of this instance.                
                <return>
                    the entries of this instance                    
                </return>
            </javadoc>
            <method name="getEntries" type="OpenIntToFieldHashMap<T>" line="142"/>
            <javadoc line="146">
                Optimized method to add sparse vectors.                
                <param>
                    v Vector to add.                    
                </param>
                <return>
                    {@code this + v}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}.                    
                </throws>
            </javadoc>
            <method name="add" type="FieldVector<T>" line="155">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                </params>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="157"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="158"/>
                <scope line="159">
                    <declaration name="key" type="int" line="161"/>
                    <declaration name="value" type="T" line="162"/>
                    <scope line="163"/>
                    <scope line="165"/>
                </scope>
            </method>
            <javadoc line="173">
                Construct a vector by appending a vector to this vector.                
                <param>
                    v Vector to append to this one.                    
                </param>
                <return>
                    a new vector.                    
                </return>
            </javadoc>
            <method name="append" type="FieldVector<T>" line="179">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                </params>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="180"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="181"/>
                <scope line="182"/>
            </method>
            <javadoc line="189">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="FieldVector<T>" line="190">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="191"/>
                <scope line="193">
                    <declaration name="n" type="int" line="194"/>
                    <declaration name="res" type="FieldVector&lt;T&gt;" line="195"/>
                    <scope line="196"/>
                </scope>
            </method>
            <javadoc line="203">
                {@inheritDoc}                
                <exception>
                    NullArgumentException if d is null                    
                </exception>
            </javadoc>
            <method name="append" type="FieldVector<T>" line="206">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="res" type="FieldVector&lt;T&gt;" line="208"/>
            </method>
            <javadoc line="213">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="FieldVector<T>" line="214"/>
            <javadoc line="218">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="T" line="219">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <declaration name="res" type="T" line="221"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="222"/>
                <scope line="223"/>
            </method>
            <javadoc line="230">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="FieldVector<T>" line="232">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="234"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="235"/>
                <scope line="236"/>
            </method>
            <javadoc line="243">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="FieldVector<T>" line="245">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="247"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="248"/>
                <scope line="249"/>
            </method>
            <javadoc line="256">
                {@inheritDoc}                
                <deprecated>
                    as of 3.1, to be removed in 4.0. Please use the {@link #toArray()} method instead.                    
                </deprecated>
            </javadoc>
            <method name="getData" type="T[]" line="262"/>
            <javadoc line="266">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="267"/>
            <javadoc line="271">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="T" line="272">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="277">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="Field<T>" line="278"/>
            <javadoc line="282">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="FieldVector<T>" line="284">
                <params>
                    <param name="index" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="285"/>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="290"/>
                <declaration name="end" type="int" line="291"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="292"/>
                <scope line="293">
                    <declaration name="key" type="int" line="295"/>
                    <scope line="296"/>
                </scope>
            </method>
            <javadoc line="303">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAdd" type="FieldVector<T>" line="304">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="308">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="FieldVector<T>" line="309">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="310"/>
            </method>
            <javadoc line="316">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivide" type="FieldVector<T>" line="318">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="322">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivideToSelf" type="FieldVector<T>" line="324">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="325"/>
                <scope line="326"/>
            </method>
            <javadoc line="333">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInv" type="FieldVector<T>" line="334"/>
            <javadoc line="338">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInvToSelf" type="FieldVector<T>" line="339">
                <scope line="340"/>
            </method>
            <javadoc line="346">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiply" type="FieldVector<T>" line="347">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="351">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiplyToSelf" type="FieldVector<T>" line="352">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="353"/>
                <scope line="354"/>
            </method>
            <javadoc line="361">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtract" type="FieldVector<T>" line="362">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="366">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtractToSelf" type="FieldVector<T>" line="367">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="371">
                Optimized method to compute outer product when both vectors are sparse.                
                <param>
                    v vector with which outer product should be computed                    
                </param>
                <return>
                    the matrix outer product between instance and v                    
                </return>
            </javadoc>
            <method name="outerProduct" type="FieldMatrix<T>" line="376">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                </params>
                <declaration name="n" type="int" line="377"/>
                <declaration name="res" type="SparseFieldMatrix&lt;T&gt;" line="378"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="379"/>
                <scope line="380">
                    <declaration name="iter2" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="382"/>
                    <scope line="383"/>
                </scope>
            </method>
            <javadoc line="391">
                {@inheritDoc}                
            </javadoc>
            <method name="outerProduct" type="FieldMatrix<T>" line="392">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="393"/>
                <scope line="395">
                    <declaration name="n" type="int" line="396"/>
                    <declaration name="res" type="FieldMatrix&lt;T&gt;" line="397"/>
                    <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="398"/>
                    <scope line="399">
                        <declaration name="row" type="int" line="401"/>
                        <declaration name="value" type="FieldElement&lt;T&gt;" line="402"/>
                        <scope line="403"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="411">
                {@inheritDoc}                
            </javadoc>
            <method name="projection" type="FieldVector<T>" line="413">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
            </method>
            <javadoc line="418">
                {@inheritDoc}                
                <exception>
                    NullArgumentException if value is null                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="421">
                <params>
                    <param name="value" type="T"/>
                </params>
                <scope line="423"/>
            </method>
            <javadoc line="428">
                {@inheritDoc}                
                <exception>
                    NullArgumentException if value is null                    
                </exception>
            </javadoc>
            <method name="setEntry" type="void" line="431">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="T"/>
                </params>
            </method>
            <javadoc line="437">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="439">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <declaration name="n" type="int" line="442"/>
                <scope line="443"/>
            </method>
            <javadoc line="448">
                Optimized method to compute {@code this} minus {@code v}.                
                <param>
                    v vector to be subtracted                    
                </param>
                <return>
                    {@code this - v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="SparseFieldVector<T>" line="456">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                </params>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="458"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="459"/>
                <scope line="460">
                    <declaration name="key" type="int" line="462"/>
                    <scope line="463"/>
                    <scope line="465"/>
                </scope>
            </method>
            <javadoc line="472">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="FieldVector<T>" line="474">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="475"/>
                <scope line="477">
                    <declaration name="n" type="int" line="478"/>
                    <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="480"/>
                    <scope line="481">
                        <scope line="482"/>
                        <scope line="484"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="492">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="T[]" line="493">
                <declaration name="res" type="T[]" line="494"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="495"/>
                <scope line="496"/>
            </method>
            <javadoc line="503">
                Check whether an index is valid.                
                <param>
                    index Index to check.                    
                </param>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
            </javadoc>
            <method name="checkIndex" type="void" line="509">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="510"/>
            </method>
            <javadoc line="515">
                Check if instance dimension is equal to some expected value.                
                <param>
                    n Expected dimension.                    
                </param>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="522">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="523"/>
            </method>
            <javadoc line="528">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="FieldVector<T>" line="529">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="530"/>
                <scope line="532">
                    <declaration name="n" type="int" line="533"/>
                    <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="535"/>
                    <scope line="537"/>
                </scope>
            </method>
            <javadoc line="544">
                {@inheritDoc}                
            </javadoc>
            <method name="hashCode" type="int" line="546">
                <declaration name="prime" type="int" line="547"/>
                <declaration name="result" type="int" line="548"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="551"/>
                <scope line="552">
                    <declaration name="temp" type="int" line="554"/>
                </scope>
            </method>
            <javadoc line="561">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="563">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="573">
                    OK, because &quot;else if&quot; check below ensures that                    
                </comment>
                <comment line="574">
                    other must be the same type as this                    
                </comment>
                <scope line="565"/>
                <scope line="569"/>
                <declaration name="other" type="SparseFieldVector&lt;T&gt;" line="573"/>
                <scope line="576">
                    <scope line="577"/>
                </scope>
                <scope line="580"/>
                <scope line="583"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="587"/>
                <scope line="588">
                    <declaration name="test" type="T" line="590"/>
                    <scope line="591"/>
                </scope>
                <scope line="596">
                    <declaration name="test" type="T" line="598"/>
                    <scope line="599"/>
                </scope>
            </method>
        </class>
    </source>