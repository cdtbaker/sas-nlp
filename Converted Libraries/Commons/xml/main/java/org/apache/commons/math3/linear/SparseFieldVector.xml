<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.OpenIntToFieldHashMap"/>
        <class name="SparseFieldVector" line="14">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="FieldVector">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="14">
                This class implements the {@link FieldVector} interface with a {@link OpenIntToFieldHashMap} backing store.                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <version>
                    $Id: SparseFieldVector.java 1455233 2013-03-11 17:00:41Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
                <deprecated>
                    As of version 3.1, this class is deprecated, for reasons exposed
                      in this JIRA
                      <a href="https://issues.apache.org/jira/browse/MATH-870">ticket</a>. This
                      class will be removed in version 4.0.                    
                </deprecated>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="26"/>
            <javadoc line="26">
                Serialization identifier.                
            </javadoc>
            <declaration name="field" type="Field&lt;T&gt;" line="30"/>
            <javadoc line="30">
                Field to which the elements belong.                
            </javadoc>
            <declaration name="entries" type="OpenIntToFieldHashMap&lt;T&gt;" line="34"/>
            <javadoc line="34">
                Entries of the vector.                
            </javadoc>
            <declaration name="virtualSize" type="int" line="38"/>
            <javadoc line="38">
                Dimension of the vector.                
            </javadoc>
            <javadoc line="42">
                Build a 0-length vector.
                  Zero-length vectors may be used to initialize construction of vectors
                  by data gathering. We start with zero-length and use either the {@link #SparseFieldVector(SparseFieldVector,int)} constructor
                  or one of the {@code append} method ({@link #append(FieldVector)} or{@link #append(SparseFieldVector)}) to gather data into this vector.                
                <param>
                    field Field to which the elements belong.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="49">
                <params>
                    <param name="field" type="Field<T>"/>
                </params>
            </method>
            <javadoc line="52">
                Construct a vector of zeroes.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    dimension Size of the vector.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="57">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="62">
                Build a resized vector, for use with append.                
                <param>
                    v Original vector                    
                </param>
                <param>
                    resize Amount to add.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="67">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                    <param name="resize" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Build a vector with known the sparseness (for advanced use only).                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    expectedSize Expected number of non-zero entries.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="78">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="dimension" type="int"/>
                    <param name="expectedSize" type="int"/>
                </params>
            </method>
            <javadoc line="83">
                Create from a Field array.
                  Only non-zero entries will be stored.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    values Set of values to create from.                    
                </param>
                <exception>
                    NullArgumentException if values is null                    
                </exception>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="90">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="values" type="T[]"/>
                </params>
                <scope line="95">
                    <declaration name="value" type="T" line="96"/>
                </scope>
            </method>
            <javadoc line="100">
                Copy constructor.                
                <param>
                    v Instance to copy.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="104">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                </params>
            </method>
            <javadoc line="109">
                Get the entries of this instance.                
                <return>
                    the entries of this instance                    
                </return>
            </javadoc>
            <method name="getEntries" type="OpenIntToFieldHashMap<T>" line="113"/>
            <javadoc line="116">
                Optimized method to add sparse vectors.                
                <param>
                    v Vector to add.                    
                </param>
                <return>
                    {@code this + v}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}.                    
                </throws>
            </javadoc>
            <method name="add" type="FieldVector<T>" line="122">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                </params>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="124"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="125"/>
                <scope line="126">
                    <declaration name="key" type="int" line="128"/>
                    <declaration name="value" type="T" line="129"/>
                    <scope line="130"/>
                    <scope line="133"/>
                </scope>
            </method>
            <javadoc line="139">
                Construct a vector by appending a vector to this vector.                
                <param>
                    v Vector to append to this one.                    
                </param>
                <return>
                    a new vector.                    
                </return>
            </javadoc>
            <method name="append" type="FieldVector<T>" line="144">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                </params>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="145"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="146"/>
                <scope line="147"/>
            </method>
            <javadoc line="153">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="FieldVector<T>" line="156">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="157"/>
                <scope line="160">
                    <declaration name="n" type="int" line="161"/>
                    <declaration name="res" type="FieldVector&lt;T&gt;" line="162"/>
                    <scope line="163"/>
                </scope>
            </method>
            <javadoc line="169">
                {@inheritDoc}                
                <exception>
                    NullArgumentException if d is null                    
                </exception>
            </javadoc>
            <method name="append" type="FieldVector<T>" line="173">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="res" type="FieldVector&lt;T&gt;" line="175"/>
            </method>
            <javadoc line="179">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="FieldVector<T>" line="182"/>
            <javadoc line="185">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="T" line="188">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <declaration name="res" type="T" line="190"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="191"/>
                <scope line="192"/>
            </method>
            <javadoc line="198">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="FieldVector<T>" line="201">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="203"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="204"/>
                <scope line="205"/>
            </method>
            <javadoc line="211">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="FieldVector<T>" line="214">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="216"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="217"/>
                <scope line="218"/>
            </method>
            <javadoc line="224">
                {@inheritDoc}                
                <deprecated>
                    as of 3.1, to be removed in 4.0. Please use the {@link #toArray()} method instead.                    
                </deprecated>
            </javadoc>
            <method name="getData" type="T[]" line="228"/>
            <javadoc line="231">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="234"/>
            <javadoc line="237">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="T" line="240">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="244">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="Field<T>" line="247"/>
            <javadoc line="250">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="FieldVector<T>" line="253">
                <params>
                    <param name="index" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="254"/>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="259"/>
                <declaration name="end" type="int" line="260"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="261"/>
                <scope line="262">
                    <declaration name="key" type="int" line="264"/>
                    <scope line="265"/>
                </scope>
            </method>
            <javadoc line="271">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAdd" type="FieldVector<T>" line="274">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="277">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="FieldVector<T>" line="280">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="281"/>
            </method>
            <javadoc line="286">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivide" type="FieldVector<T>" line="289">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="292">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivideToSelf" type="FieldVector<T>" line="295">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="296"/>
                <scope line="297"/>
            </method>
            <javadoc line="303">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInv" type="FieldVector<T>" line="306"/>
            <javadoc line="309">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInvToSelf" type="FieldVector<T>" line="312">
                <scope line="313"/>
            </method>
            <javadoc line="318">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiply" type="FieldVector<T>" line="321">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="324">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiplyToSelf" type="FieldVector<T>" line="327">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="328"/>
                <scope line="329"/>
            </method>
            <javadoc line="335">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtract" type="FieldVector<T>" line="338">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="341">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtractToSelf" type="FieldVector<T>" line="344">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="347">
                Optimized method to compute outer product when both vectors are sparse.                
                <param>
                    v vector with which outer product should be computed                    
                </param>
                <return>
                    the matrix outer product between instance and v                    
                </return>
            </javadoc>
            <method name="outerProduct" type="FieldMatrix<T>" line="352">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                </params>
                <declaration name="n" type="int" line="353"/>
                <declaration name="res" type="SparseFieldMatrix&lt;T&gt;" line="354"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="355"/>
                <scope line="356">
                    <declaration name="iter2" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="358"/>
                    <scope line="359"/>
                </scope>
            </method>
            <javadoc line="366">
                {@inheritDoc}                
            </javadoc>
            <method name="outerProduct" type="FieldMatrix<T>" line="369">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="370"/>
                <scope line="373">
                    <declaration name="n" type="int" line="374"/>
                    <declaration name="res" type="FieldMatrix&lt;T&gt;" line="375"/>
                    <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="376"/>
                    <scope line="377">
                        <declaration name="row" type="int" line="379"/>
                        <declaration name="value" type="FieldElement&lt;T&gt;" line="380"/>
                        <scope line="381"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="388">
                {@inheritDoc}                
            </javadoc>
            <method name="projection" type="FieldVector<T>" line="391">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
            </method>
            <javadoc line="395">
                {@inheritDoc}                
                <exception>
                    NullArgumentException if value is null                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="399">
                <params>
                    <param name="value" type="T"/>
                </params>
                <scope line="401"/>
            </method>
            <javadoc line="405">
                {@inheritDoc}                
                <exception>
                    NullArgumentException if value is null                    
                </exception>
            </javadoc>
            <method name="setEntry" type="void" line="409">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="T"/>
                </params>
            </method>
            <javadoc line="414">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="417">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <declaration name="n" type="int" line="420"/>
                <scope line="421"/>
            </method>
            <javadoc line="425">
                Optimized method to compute {@code this} minus {@code v}.                
                <param>
                    v vector to be subtracted                    
                </param>
                <return>
                    {@code this - v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="SparseFieldVector<T>" line="431">
                <params>
                    <param name="v" type="SparseFieldVector<T>"/>
                </params>
                <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="433"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="434"/>
                <scope line="435">
                    <declaration name="key" type="int" line="437"/>
                    <scope line="438"/>
                    <scope line="441"/>
                </scope>
            </method>
            <javadoc line="447">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="FieldVector<T>" line="450">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="451"/>
                <scope line="454">
                    <declaration name="n" type="int" line="455"/>
                    <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="457"/>
                    <scope line="458">
                        <scope line="459"/>
                        <scope line="462"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="469">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="T[]" line="472">
                <declaration name="res" type="T[]" line="473"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="474"/>
                <scope line="475"/>
            </method>
            <javadoc line="481">
                Check whether an index is valid.                
                <param>
                    index Index to check.                    
                </param>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
            </javadoc>
            <method name="checkIndex" type="void" line="486">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="487"/>
            </method>
            <javadoc line="491">
                Check if instance dimension is equal to some expected value.                
                <param>
                    n Expected dimension.                    
                </param>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="496">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="497"/>
            </method>
            <javadoc line="501">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="FieldVector<T>" line="504">
                <params>
                    <param name="v" type="FieldVector<T>"/>
                </params>
                <scope line="505"/>
                <scope line="508">
                    <declaration name="n" type="int" line="509"/>
                    <declaration name="res" type="SparseFieldVector&lt;T&gt;" line="511"/>
                    <scope line="512"/>
                </scope>
            </method>
            <javadoc line="518">
                {@inheritDoc}                
            </javadoc>
            <method name="hashCode" type="int" line="521">
                <declaration name="prime" type="int" line="522"/>
                <declaration name="result" type="int" line="523"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="526"/>
                <scope line="527">
                    <declaration name="temp" type="int" line="529"/>
                </scope>
            </method>
            <javadoc line="534">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="537">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="538"/>
                <scope line="541"/>
                <declaration name="other" type="SparseFieldVector&lt;T&gt;" line="544"/>
                <scope line="545">
                    <scope line="546"/>
                </scope>
                <scope line="550"/>
                <scope line="553"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" line="556"/>
                <scope line="557">
                    <declaration name="test" type="T" line="559"/>
                    <scope line="560"/>
                </scope>
                <scope line="565">
                    <declaration name="test" type="T" line="567"/>
                    <scope line="568"/>
                </scope>
            </method>
        </class>
    </source>