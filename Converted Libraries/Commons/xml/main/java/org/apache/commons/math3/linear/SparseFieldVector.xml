<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.OpenIntToFieldHashMap"/>
        <class name="SparseFieldVector" line="34">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="FieldVector">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="34">
                This class implements the {@link FieldVector} interface with a {@link OpenIntToFieldHashMap} backing store.
                  &lt;p&gt;
                  Caveat: This implementation assumes that, for any {@code x},
                  the equality {@code x  0d == 0d} holds. But it is is not true for{@code NaN}. Moreover, zero entries will lose their sign.
                  Some operations (that involve {@code NaN} and/or infinities) may
                  thus give incorrect results.
                  &lt;/p&gt;                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <version>
                    $Id: SparseFieldVector.java 1570536 2014-02-21 11:26:09Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="48"/>
            <javadoc line="48">
                Serialization identifier.                
            </javadoc>
            <declaration name="field" type="Field&amp;lt;T&amp;gt;" line="50"/>
            <javadoc line="50">
                Field to which the elements belong.                
            </javadoc>
            <declaration name="entries" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;" line="52"/>
            <javadoc line="52">
                Entries of the vector.                
            </javadoc>
            <declaration name="virtualSize" type="int" line="54"/>
            <javadoc line="54">
                Dimension of the vector.                
            </javadoc>
            <javadoc line="57">
                Build a 0-length vector.
                  Zero-length vectors may be used to initialize construction of vectors
                  by data gathering. We start with zero-length and use either the {@link #SparseFieldVector(SparseFieldVector,int)} constructor
                  or one of the {@code append} method ({@link #append(FieldVector)} or{@link #append(SparseFieldVector)}) to gather data into this vector.                
                <param>
                    field Field to which the elements belong.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="67">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="72">
                Construct a vector of zeroes.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    dimension Size of the vector.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="78">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="84">
                Build a resized vector, for use with append.                
                <param>
                    v Original vector                    
                </param>
                <param>
                    resize Amount to add.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="90">
                <params>
                    <param name="v" type="SparseFieldVector&lt;T&gt;"/>
                    <param name="resize" type="int"/>
                </params>
            </method>
            <javadoc line="97">
                Build a vector with known the sparseness (for advanced use only).                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    dimension Size of the vector.                    
                </param>
                <param>
                    expectedSize Expected number of non-zero entries.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="104">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="dimension" type="int"/>
                    <param name="expectedSize" type="int"/>
                </params>
            </method>
            <javadoc line="110">
                Create from a Field array.
                  Only non-zero entries will be stored.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    values Set of values to create from.                    
                </param>
                <exception>
                    NullArgumentException if values is null                    
                </exception>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="118">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="values" type="T[]"/>
                </params>
                <scope line="123">
                    <declaration name="value" type="T" line="124"/>
                </scope>
            </method>
            <javadoc line="129">
                Copy constructor.                
                <param>
                    v Instance to copy.                    
                </param>
            </javadoc>
            <method name="SparseFieldVector" type="constructor" line="134">
                <params>
                    <param name="v" type="SparseFieldVector&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="140">
                Get the entries of this instance.                
                <return>
                    the entries of this instance                    
                </return>
            </javadoc>
            <method name="getEntries" type="OpenIntToFieldHashMap&lt;T&gt;" line="145"/>
            <javadoc line="149">
                Optimized method to add sparse vectors.                
                <param>
                    v Vector to add.                    
                </param>
                <return>
                    {@code this + v}.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}.                    
                </throws>
            </javadoc>
            <method name="add" type="FieldVector&lt;T&gt;" line="158">
                <params>
                    <param name="v" type="SparseFieldVector&lt;T&gt;"/>
                </params>
                <declaration name="res" type="SparseFieldVector&amp;lt;T&amp;gt;" line="160"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="161"/>
                <scope line="162">
                    <declaration name="key" type="int" line="164"/>
                    <declaration name="value" type="T" line="165"/>
                    <scope line="166"/>
                    <scope line="168"/>
                </scope>
            </method>
            <javadoc line="176">
                Construct a vector by appending a vector to this vector.                
                <param>
                    v Vector to append to this one.                    
                </param>
                <return>
                    a new vector.                    
                </return>
            </javadoc>
            <method name="append" type="FieldVector&lt;T&gt;" line="182">
                <params>
                    <param name="v" type="SparseFieldVector&lt;T&gt;"/>
                </params>
                <declaration name="res" type="SparseFieldVector&amp;lt;T&amp;gt;" line="183"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="184"/>
                <scope line="185"/>
            </method>
            <javadoc line="192">
                {@inheritDoc}                
            </javadoc>
            <method name="append" type="FieldVector&lt;T&gt;" line="193">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="194"/>
                <scope line="196">
                    <declaration name="n" type="int" line="197"/>
                    <declaration name="res" type="FieldVector&amp;lt;T&amp;gt;" line="198"/>
                    <scope line="199"/>
                </scope>
            </method>
            <javadoc line="206">
                {@inheritDoc}                
                <exception>
                    NullArgumentException if d is null                    
                </exception>
            </javadoc>
            <method name="append" type="FieldVector&lt;T&gt;" line="209">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="res" type="FieldVector&amp;lt;T&amp;gt;" line="211"/>
            </method>
            <javadoc line="216">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="FieldVector&lt;T&gt;" line="217"/>
            <javadoc line="221">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="T" line="222">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <declaration name="res" type="T" line="224"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="225"/>
                <scope line="226"/>
            </method>
            <javadoc line="233">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeDivide" type="FieldVector&lt;T&gt;" line="235">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <declaration name="res" type="SparseFieldVector&amp;lt;T&amp;gt;" line="237"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="238"/>
                <scope line="239"/>
            </method>
            <javadoc line="246">
                {@inheritDoc}                
            </javadoc>
            <method name="ebeMultiply" type="FieldVector&lt;T&gt;" line="248">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <declaration name="res" type="SparseFieldVector&amp;lt;T&amp;gt;" line="250"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="251"/>
                <scope line="252"/>
            </method>
            <javadoc line="259">
                {@inheritDoc}                
                <deprecated>
                    as of 3.1, to be removed in 4.0. Please use the {@link #toArray()} method instead.                    
                </deprecated>
            </javadoc>
            <method name="getData" type="T[]" line="265"/>
            <javadoc line="269">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="270"/>
            <javadoc line="274">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="T" line="275">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="280">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="Field&lt;T&gt;" line="281"/>
            <javadoc line="285">
                {@inheritDoc}                
            </javadoc>
            <method name="getSubVector" type="FieldVector&lt;T&gt;" line="287">
                <params>
                    <param name="index" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="288"/>
                <declaration name="res" type="SparseFieldVector&amp;lt;T&amp;gt;" line="293"/>
                <declaration name="end" type="int" line="294"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="295"/>
                <scope line="296">
                    <declaration name="key" type="int" line="298"/>
                    <scope line="299"/>
                </scope>
            </method>
            <javadoc line="306">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAdd" type="FieldVector&lt;T&gt;" line="307">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="311">
                {@inheritDoc}                
            </javadoc>
            <method name="mapAddToSelf" type="FieldVector&lt;T&gt;" line="312">
                <params>
                    <param name="d" type="T"/>
                </params>
                <scope line="313"/>
            </method>
            <javadoc line="319">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivide" type="FieldVector&lt;T&gt;" line="321">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="325">
                {@inheritDoc}                
            </javadoc>
            <method name="mapDivideToSelf" type="FieldVector&lt;T&gt;" line="327">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="328"/>
                <scope line="329"/>
            </method>
            <javadoc line="336">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInv" type="FieldVector&lt;T&gt;" line="337"/>
            <javadoc line="341">
                {@inheritDoc}                
            </javadoc>
            <method name="mapInvToSelf" type="FieldVector&lt;T&gt;" line="342">
                <scope line="343"/>
            </method>
            <javadoc line="349">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiply" type="FieldVector&lt;T&gt;" line="350">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="354">
                {@inheritDoc}                
            </javadoc>
            <method name="mapMultiplyToSelf" type="FieldVector&lt;T&gt;" line="355">
                <params>
                    <param name="d" type="T"/>
                </params>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="356"/>
                <scope line="357"/>
            </method>
            <javadoc line="364">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtract" type="FieldVector&lt;T&gt;" line="365">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="369">
                {@inheritDoc}                
            </javadoc>
            <method name="mapSubtractToSelf" type="FieldVector&lt;T&gt;" line="370">
                <params>
                    <param name="d" type="T"/>
                </params>
            </method>
            <javadoc line="374">
                Optimized method to compute outer product when both vectors are sparse.                
                <param>
                    v vector with which outer product should be computed                    
                </param>
                <return>
                    the matrix outer product between instance and v                    
                </return>
            </javadoc>
            <method name="outerProduct" type="FieldMatrix&lt;T&gt;" line="379">
                <params>
                    <param name="v" type="SparseFieldVector&lt;T&gt;"/>
                </params>
                <declaration name="n" type="int" line="380"/>
                <declaration name="res" type="SparseFieldMatrix&amp;lt;T&amp;gt;" line="381"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="382"/>
                <scope line="383">
                    <declaration name="iter2" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="385"/>
                    <scope line="386"/>
                </scope>
            </method>
            <javadoc line="394">
                {@inheritDoc}                
            </javadoc>
            <method name="outerProduct" type="FieldMatrix&lt;T&gt;" line="395">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="396"/>
                <scope line="398">
                    <declaration name="n" type="int" line="399"/>
                    <declaration name="res" type="FieldMatrix&amp;lt;T&amp;gt;" line="400"/>
                    <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="401"/>
                    <scope line="402">
                        <declaration name="row" type="int" line="404"/>
                        <declaration name="value" type="FieldElement&amp;lt;T&amp;gt;" line="405"/>
                        <scope line="406"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="414">
                {@inheritDoc}                
            </javadoc>
            <method name="projection" type="FieldVector&lt;T&gt;" line="416">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="421">
                {@inheritDoc}                
                <exception>
                    NullArgumentException if value is null                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="424">
                <params>
                    <param name="value" type="T"/>
                </params>
                <scope line="426"/>
            </method>
            <javadoc line="431">
                {@inheritDoc}                
                <exception>
                    NullArgumentException if value is null                    
                </exception>
            </javadoc>
            <method name="setEntry" type="void" line="434">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="T"/>
                </params>
            </method>
            <javadoc line="440">
                {@inheritDoc}                
            </javadoc>
            <method name="setSubVector" type="void" line="442">
                <params>
                    <param name="index" type="int"/>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <declaration name="n" type="int" line="445"/>
                <scope line="446"/>
            </method>
            <javadoc line="451">
                Optimized method to compute {@code this} minus {@code v}.                
                <param>
                    v vector to be subtracted                    
                </param>
                <return>
                    {@code this - v}                    
                </return>
                <throws>
                    DimensionMismatchException if {@code v} is not the same size as{@code this}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="SparseFieldVector&lt;T&gt;" line="459">
                <params>
                    <param name="v" type="SparseFieldVector&lt;T&gt;"/>
                </params>
                <declaration name="res" type="SparseFieldVector&amp;lt;T&amp;gt;" line="461"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="462"/>
                <scope line="463">
                    <declaration name="key" type="int" line="465"/>
                    <scope line="466"/>
                    <scope line="468"/>
                </scope>
            </method>
            <javadoc line="475">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="FieldVector&lt;T&gt;" line="477">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="478"/>
                <scope line="480">
                    <declaration name="n" type="int" line="481"/>
                    <declaration name="res" type="SparseFieldVector&amp;lt;T&amp;gt;" line="483"/>
                    <scope line="484">
                        <scope line="485"/>
                        <scope line="487"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="495">
                {@inheritDoc}                
            </javadoc>
            <method name="toArray" type="T[]" line="496">
                <declaration name="res" type="T[]" line="497"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="498"/>
                <scope line="499"/>
            </method>
            <javadoc line="506">
                Check whether an index is valid.                
                <param>
                    index Index to check.                    
                </param>
                <throws>
                    OutOfRangeException if the index is not valid.                    
                </throws>
            </javadoc>
            <method name="checkIndex" type="void" line="512">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="513"/>
            </method>
            <javadoc line="518">
                Checks that the indices of a subvector are valid.                
                <param>
                    start the index of the first entry of the subvector                    
                </param>
                <param>
                    end the index of the last entry of the subvector (inclusive)                    
                </param>
                <throws>
                    OutOfRangeException if {@code start} of {@code end} are not valid                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="checkIndices" type="void" line="528">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="dim" type="int" line="529"/>
                <scope line="530"/>
                <scope line="534"/>
                <scope line="538"/>
            </method>
            <javadoc line="544">
                Check if instance dimension is equal to some expected value.                
                <param>
                    n Expected dimension.                    
                </param>
                <throws>
                    DimensionMismatchException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="checkVectorDimensions" type="void" line="551">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="552"/>
            </method>
            <javadoc line="557">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="FieldVector&lt;T&gt;" line="558">
                <params>
                    <param name="v" type="FieldVector&lt;T&gt;"/>
                </params>
                <scope line="559"/>
                <scope line="561">
                    <declaration name="n" type="int" line="562"/>
                    <declaration name="res" type="SparseFieldVector&amp;lt;T&amp;gt;" line="564"/>
                    <scope line="566"/>
                </scope>
            </method>
            <javadoc line="573">
                Visits (but does not alter) all entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor the visitor to be used to process the entries of this
                      vector                    
                </param>
                <return>
                    the value returned by {@link FieldVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="T" line="583">
                <params>
                    <param name="visitor" type="FieldVectorPreservingVisitor&lt;T&gt;"/>
                </params>
                <declaration name="dim" type="int" line="584"/>
                <scope line="586"/>
            </method>
            <javadoc line="592">
                Visits (but does not alter) some entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link FieldVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="T" line="607">
                <params>
                    <param name="visitor" type="FieldVectorPreservingVisitor&lt;T&gt;"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="610"/>
            </method>
            <javadoc line="616">
                Visits (but does not alter) all entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor the visitor to be used to process the entries of this
                      vector                    
                </param>
                <return>
                    the value returned by {@link FieldVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="628">
                <params>
                    <param name="visitor" type="FieldVectorPreservingVisitor&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="632">
                Visits (but does not alter) some entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link FieldVectorPreservingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="649">
                <params>
                    <param name="visitor" type="FieldVectorPreservingVisitor&lt;T&gt;"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="653">
                Visits (and possibly alters) all entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor the visitor to be used to process and modify the entries
                      of this vector                    
                </param>
                <return>
                    the value returned by {@link FieldVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="T" line="663">
                <params>
                    <param name="visitor" type="FieldVectorChangingVisitor&lt;T&gt;"/>
                </params>
                <declaration name="dim" type="int" line="664"/>
                <scope line="666"/>
            </method>
            <javadoc line="672">
                Visits (and possibly alters) some entries of this vector in default order
                  (increasing index).                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link FieldVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInDefaultOrder" type="T" line="687">
                <params>
                    <param name="visitor" type="FieldVectorChangingVisitor&lt;T&gt;"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="690"/>
            </method>
            <javadoc line="696">
                Visits (and possibly alters) all entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor the visitor to be used to process the entries of this
                      vector                    
                </param>
                <return>
                    the value returned by {@link FieldVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="708">
                <params>
                    <param name="visitor" type="FieldVectorChangingVisitor&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="712">
                Visits (and possibly change) some entries of this vector in optimized
                  order. The order in which the entries are visited is selected so as to
                  lead to the most efficient implementation; it might depend on the
                  concrete implementation of this abstract class.                
                <param>
                    visitor visitor to be used to process the entries of this vector                    
                </param>
                <param>
                    start the index of the first entry to be visited                    
                </param>
                <param>
                    end the index of the last entry to be visited (inclusive)                    
                </param>
                <return>
                    the value returned by {@link FieldVectorChangingVisitor#end()}at the end of the walk                    
                </return>
                <throws>
                    NumberIsTooSmallException if {@code end &lt; start}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="729">
                <params>
                    <param name="visitor" type="FieldVectorChangingVisitor&lt;T&gt;"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="733">
                {@inheritDoc}                
            </javadoc>
            <method name="hashCode" type="int" line="735">
                <declaration name="prime" type="int" line="736"/>
                <declaration name="result" type="int" line="737"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="740"/>
                <scope line="741">
                    <declaration name="temp" type="int" line="743"/>
                </scope>
            </method>
            <javadoc line="750">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="752">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="763">
                    OK, because &quot;else if&quot; check below ensures that
                     other must be the same type as this                    
                </comment>
                <scope line="754"/>
                <scope line="758"/>
                <declaration name="other" type="SparseFieldVector&amp;lt;T&amp;gt;" line="762"/>
                <scope line="765">
                    <scope line="766"/>
                </scope>
                <scope line="769"/>
                <scope line="772"/>
                <declaration name="iter" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;.Iterator" line="776"/>
                <scope line="777">
                    <declaration name="test" type="T" line="779"/>
                    <scope line="780"/>
                </scope>
                <scope line="785">
                    <declaration name="test" type="T" line="787"/>
                    <scope line="788"/>
                </scope>
            </method>
        </class>
    </source>