<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="TricubicSplineInterpolator" line="7">
            <implements interface="TrivariateGridInterpolator"/>
            <javadoc line="7">
                Generates a tricubic interpolating function.                
                <since>
                    2.2                    
                </since>
                <version>
                    $Id: TricubicSplineInterpolator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
            </javadoc>
            <javadoc line="13">
                {@inheritDoc}                
            </javadoc>
            <method name="interpolate" type="TricubicSplineInterpolatingFunction" line="16">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                    <param name="zval" type="double[]"/>
                    <param name="fval" type="double[][][]"/>
                </params>
                <scope line="17"/>
                <scope line="20"/>
                <declaration name="xLen" type="int" line="26"/>
                <declaration name="yLen" type="int" line="27"/>
                <declaration name="zLen" type="int" line="28"/>
                <declaration name="fvalXY" type="double[][][]" line="29"/>
                <declaration name="fvalZX" type="double[][][]" line="30"/>
                <scope line="31">
                    <scope line="32"/>
                    <scope line="35">
                        <scope line="36"/>
                        <scope line="39">
                            <declaration name="v" type="double" line="40"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="bsi" type="BicubicSplineInterpolator" line="46"/>
                <declaration name="xSplineYZ" type="BicubicSplineInterpolatingFunction[]" line="47"/>
                <scope line="48"/>
                <declaration name="ySplineZX" type="BicubicSplineInterpolatingFunction[]" line="51"/>
                <scope line="52"/>
                <declaration name="zSplineXY" type="BicubicSplineInterpolatingFunction[]" line="55"/>
                <scope line="56"/>
                <declaration name="dFdX" type="double[][][]" line="59"/>
                <declaration name="dFdY" type="double[][][]" line="60"/>
                <declaration name="d2FdXdY" type="double[][][]" line="61"/>
                <scope line="62">
                    <declaration name="f" type="BicubicSplineInterpolatingFunction" line="63"/>
                    <scope line="64">
                        <declaration name="x" type="double" line="65"/>
                        <scope line="66">
                            <declaration name="y" type="double" line="67"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="dFdZ" type="double[][][]" line="74"/>
                <declaration name="d2FdYdZ" type="double[][][]" line="75"/>
                <scope line="76">
                    <declaration name="f" type="BicubicSplineInterpolatingFunction" line="77"/>
                    <scope line="78">
                        <declaration name="y" type="double" line="79"/>
                        <scope line="80">
                            <declaration name="z" type="double" line="81"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="d2FdZdX" type="double[][][]" line="87"/>
                <scope line="88">
                    <declaration name="f" type="BicubicSplineInterpolatingFunction" line="89"/>
                    <scope line="90">
                        <declaration name="z" type="double" line="91"/>
                        <scope line="92">
                            <declaration name="x" type="double" line="93"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="d3FdXdYdZ" type="double[][][]" line="98"/>
                <scope line="99">
                    <declaration name="nI" type="int" line="100"/>
                    <declaration name="pI" type="int" line="101"/>
                    <scope line="102">
                        <declaration name="nJ" type="int" line="103"/>
                        <declaration name="pJ" type="int" line="104"/>
                        <scope line="105">
                            <declaration name="nK" type="int" line="106"/>
                            <declaration name="pK" type="int" line="107"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="114">
                Compute the next index of an array, clipping if necessary.
                  It is assumed (but not checked) that {@code i} is larger than or equal to 0}.                
                <param>
                    i Index                    
                </param>
                <param>
                    max Upper limit of the array                    
                </param>
                <return>
                    the next index                    
                </return>
            </javadoc>
            <method name="nextIndex" type="int" line="121">
                <params>
                    <param name="i" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="index" type="int" line="122"/>
            </method>
            <javadoc line="125">
                Compute the previous index of an array, clipping if necessary.
                  It is assumed (but not checked) that {@code i} is smaller than the size of the array.                
                <param>
                    i Index                    
                </param>
                <return>
                    the previous index                    
                </return>
            </javadoc>
            <method name="previousIndex" type="int" line="131">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="index" type="int" line="132"/>
            </method>
        </class>
    </source>