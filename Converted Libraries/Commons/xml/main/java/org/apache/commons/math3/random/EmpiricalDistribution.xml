<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.net.URL"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.distribution.AbstractRealDistribution"/>
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.StatisticalSummary"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="EmpiricalDistribution" line="45">
            <extends class="AbstractRealDistribution"/>
            <comment line="592">
                Distribution methods ---------------------------                
            </comment>
            <javadoc line="45">
                &lt;p&gt;Represents an &lt;a href=&quot;http://http://en.wikipedia.org/wiki/Empirical_distribution_function&quot;&gt;
                  empirical probability distribution&lt;/a&gt; -- a probability distribution derived
                  from observed data without making any assumptions about the functional form
                  of the population distribution that the data come from.&lt;/p&gt;
                  &lt;p&gt;An &lt;code&gt;EmpiricalDistribution&lt;/code&gt; maintains data structures, called
                  &lt;i&gt;distribution digests&lt;/i&gt;, that describe empirical distributions and
                  support the following operations: &lt;ul&gt;
                  &lt;li&gt;loading the distribution from a file of observed data values&lt;/li&gt;
                  &lt;li&gt;dividing the input data into &quot;bin ranges&quot; and reporting bin frequency
                  counts (data for histogram)&lt;/li&gt;
                  &lt;li&gt;reporting univariate statistics describing the full set of data values
                  as well as the observations within each bin&lt;/li&gt;
                  &lt;li&gt;generating random values from the distribution&lt;/li&gt;
                  &lt;/ul&gt;
                  Applications can use &lt;code&gt;EmpiricalDistribution&lt;/code&gt; to build grouped
                  frequency histograms representing the input data or to generate random values
                  &quot;like&quot; those in the input file -- i.e., the values generated will follow the
                  distribution of the values in the file.&lt;/p&gt;
                  &lt;p&gt;The implementation uses what amounts to the
                  &lt;a href=&quot;http://nedwww.ipac.caltech.edu/level5/March02/Silverman/Silver2_6.html&quot;&gt;
                  Variable Kernel Method&lt;/a&gt; with Gaussian smoothing:&lt;p&gt;
                  &lt;strong&gt;Digesting the input file&lt;/strong&gt;
                  &lt;ol&gt;&lt;li&gt;Pass the file once to compute min and max.&lt;/li&gt;
                  &lt;li&gt;Divide the range from min-max into &lt;code&gt;binCount&lt;/code&gt; &quot;bins.&quot;&lt;/li&gt;
                  &lt;li&gt;Pass the data file again, computing bin counts and univariate
                  statistics (mean, std dev.) for each of the bins &lt;/li&gt;
                  &lt;li&gt;Divide the interval (0,1) into subintervals associated with the bins,
                  with the length of a bin&apos;s subinterval proportional to its count.&lt;/li&gt;&lt;/ol&gt;
                  &lt;strong&gt;Generating random values from the distribution&lt;/strong&gt;&lt;ol&gt;
                  &lt;li&gt;Generate a uniformly distributed value in (0,1) &lt;/li&gt;
                  &lt;li&gt;Select the subinterval to which the value belongs.
                  &lt;li&gt;Generate a random Gaussian value with mean = mean of the associated
                  bin and std dev = std dev of associated bin.&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
                  &lt;p&gt;EmpiricalDistribution implements the {@link RealDistribution} interface
                  as follows.  Given x within the range of values in the dataset, let B
                  be the bin containing x and let K be the within-bin kernel for B.  Let P(B-)
                  be the sum of the probabilities of the bins below B and let K(B) be the
                  mass of B under K (i.e., the integral of the kernel density over B).  Then
                  set P(X &lt; x) = P(B-) + P(B)  K(x) / K(B) where K(x) is the kernel distribution
                  evaluated at x. This results in a cdf that matches the grouped frequency
                  distribution at the bin endpoints and interpolates within bins using
                  within-bin kernels.&lt;/p&gt;
                  &lt;strong&gt;USAGE NOTES:&lt;/strong&gt;&lt;ul&gt;
                  &lt;li&gt;The &lt;code&gt;binCount&lt;/code&gt; is set by default to 1000.  A good rule of thumb
                  is to set the bin count to approximately the length of the input file divided
                  by 10. &lt;/li&gt;
                  &lt;li&gt;The input file &lt;i&gt;must&lt;/i&gt; be a plain text file containing one valid numeric
                  entry per line.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <version>
                    $Id: EmpiricalDistribution.java 1457372 2013-03-17 04:28:04Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_BIN_COUNT" type="int" line="104"/>
            <javadoc line="104">
                Default bin count                
            </javadoc>
            <declaration name="FILE_CHARSET" type="String" line="107"/>
            <javadoc line="107">
                Character set for file input                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="110"/>
            <javadoc line="110">
                Serializable version identifier                
            </javadoc>
            <declaration name="randomData" type="RandomDataGenerator" line="113"/>
            <javadoc line="113">
                RandomDataGenerator instance to use in repeated calls to getNext()                
            </javadoc>
            <declaration name="binStats" type="List&lt;SummaryStatistics&gt;" line="116"/>
            <javadoc line="116">
                List of SummaryStatistics objects characterizing the bins                
            </javadoc>
            <declaration name="sampleStats" type="SummaryStatistics" line="119"/>
            <javadoc line="119">
                Sample statistics                
            </javadoc>
            <declaration name="max" type="double" line="122"/>
            <javadoc line="122">
                Max loaded value                
            </javadoc>
            <declaration name="min" type="double" line="125"/>
            <javadoc line="125">
                Min loaded value                
            </javadoc>
            <declaration name="delta" type="double" line="128"/>
            <javadoc line="128">
                Grid size                
            </javadoc>
            <declaration name="binCount" type="int" line="131"/>
            <javadoc line="131">
                number of bins                
            </javadoc>
            <declaration name="loaded" type="boolean" line="134"/>
            <javadoc line="134">
                is the distribution loaded?                
            </javadoc>
            <declaration name="upperBounds" type="double[]" line="137"/>
            <javadoc line="137">
                upper bounds of subintervals in (0,1) &quot;belonging&quot; to the bins                
            </javadoc>
            <javadoc line="140">
                Creates a new EmpiricalDistribution with the default bin count.                
            </javadoc>
            <method name="EmpiricalDistribution" type="constructor" line="143"/>
            <javadoc line="147">
                Creates a new EmpiricalDistribution with the specified bin count.                
                <param>
                    binCount number of bins                    
                </param>
            </javadoc>
            <method name="EmpiricalDistribution" type="constructor" line="152">
                <params>
                    <param name="binCount" type="int"/>
                </params>
            </method>
            <javadoc line="156">
                Creates a new EmpiricalDistribution with the specified bin count using the
                  provided {@link RandomGenerator} as the source of random data.                
                <param>
                    binCount number of bins                    
                </param>
                <param>
                    generator random data generator (may be null, resulting in default JDK generator)                    
                </param>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="EmpiricalDistribution" type="constructor" line="164">
                <params>
                    <param name="binCount" type="int"/>
                    <param name="generator" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="168">
                Creates a new EmpiricalDistribution with default bin count using the
                  provided {@link RandomGenerator} as the source of random data.                
                <param>
                    generator random data generator (may be null, resulting in default JDK generator)                    
                </param>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="EmpiricalDistribution" type="constructor" line="175">
                <params>
                    <param name="generator" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="179">
                Creates a new EmpiricalDistribution with the specified bin count using the
                  provided {@link RandomDataImpl} instance as the source of random data.                
                <param>
                    binCount number of bins                    
                </param>
                <param>
                    randomData random data generator (may be null, resulting in default JDK generator)                    
                </param>
                <since>
                    3.0                    
                </since>
                <deprecated>
                    As of 3.1. Please use {@link #EmpiricalDistribution(int,RandomGenerator)} instead.                    
                </deprecated>
            </javadoc>
            <method name="EmpiricalDistribution" type="constructor" line="189">
                <params>
                    <param name="binCount" type="int"/>
                    <param name="randomData" type="RandomDataImpl"/>
                </params>
            </method>
            <javadoc line="193">
                Creates a new EmpiricalDistribution with default bin count using the
                  provided {@link RandomDataImpl} as the source of random data.                
                <param>
                    randomData random data generator (may be null, resulting in default JDK generator)                    
                </param>
                <since>
                    3.0                    
                </since>
                <deprecated>
                    As of 3.1. Please use {@link #EmpiricalDistribution(RandomGenerator)} instead.                    
                </deprecated>
            </javadoc>
            <method name="EmpiricalDistribution" type="constructor" line="202">
                <params>
                    <param name="randomData" type="RandomDataImpl"/>
                </params>
            </method>
            <javadoc line="206">
                Private constructor to allow lazy initialisation of the RNG contained
                  in the {@link #randomData} instance variable.                
                <param>
                    binCount number of bins                    
                </param>
                <param>
                    randomData Random data generator.                    
                </param>
            </javadoc>
            <method name="EmpiricalDistribution" type="constructor" line="214">
                <params>
                    <param name="binCount" type="int"/>
                    <param name="randomData" type="RandomDataGenerator"/>
                </params>
            </method>
            <javadoc line="221">
                Computes the empirical distribution from the provided
                  array of numbers.                
                <param>
                    in the input data array                    
                </param>
                <exception>
                    NullArgumentException if in is null                    
                </exception>
            </javadoc>
            <method name="load" type="void" line="228">
                <params>
                    <param name="in" type="double[]"/>
                </params>
                <comment line="232">
                    new adapter for the second pass                    
                </comment>
                <comment line="235">
                    Can&apos;t happen                    
                </comment>
                <declaration name="da" type="DataAdapter" line="229"/>
                <scope line="230"/>
                <scope line="234"/>
            </method>
            <javadoc line="242">
                Computes the empirical distribution using data read from a URL.
                  &lt;p&gt;The input file &lt;i&gt;must&lt;/i&gt; be an ASCII text file containing one
                  valid numeric entry per line.&lt;/p&gt;                
                <param>
                    url url of the input file                    
                </param>
                <throws>
                    IOException if an IO error occurs                    
                </throws>
                <throws>
                    NullArgumentException if url is null                    
                </throws>
                <throws>
                    ZeroException if URL contains no data                    
                </throws>
            </javadoc>
            <method name="load" type="void" line="254">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="265">
                    new adapter for the second pass                    
                </comment>
                <comment line="272">
                    NOPMD                    
                </comment>
                <comment line="273">
                    ignore                    
                </comment>
                <declaration name="charset" type="Charset" line="256"/>
                <declaration name="in" type="BufferedReader" line="257"/>
                <scope line="259">
                    <declaration name="da" type="DataAdapter" line="260"/>
                    <scope line="262"/>
                </scope>
                <scope line="269">
                    <scope line="270"/>
                    <scope line="272"/>
                </scope>
            </method>
            <javadoc line="278">
                Computes the empirical distribution from the input file.
                  &lt;p&gt;The input file &lt;i&gt;must&lt;/i&gt; be an ASCII text file containing one
                  valid numeric entry per line.&lt;/p&gt;                
                <param>
                    file the input file                    
                </param>
                <throws>
                    IOException if an IO error occurs                    
                </throws>
                <throws>
                    NullArgumentException if file is null                    
                </throws>
            </javadoc>
            <method name="load" type="void" line="288">
                <params>
                    <param name="file" type="File"/>
                </params>
                <comment line="296">
                    new adapter for second pass                    
                </comment>
                <comment line="304">
                    NOPMD                    
                </comment>
                <comment line="305">
                    ignore                    
                </comment>
                <declaration name="charset" type="Charset" line="290"/>
                <declaration name="is" type="InputStream" line="291"/>
                <declaration name="in" type="BufferedReader" line="292"/>
                <scope line="293">
                    <declaration name="da" type="DataAdapter" line="294"/>
                </scope>
                <scope line="301">
                    <scope line="302"/>
                    <scope line="304"/>
                </scope>
            </method>
            <class name="DataAdapter" line="310">
                <javadoc line="310">
                    Provides methods for computing &lt;code&gt;sampleStats&lt;/code&gt; and
                      &lt;code&gt;beanStats&lt;/code&gt; abstracting the source of data.                    
                </javadoc>
                <method name="computeBinStats" type="void" line="316"/>
                <javadoc line="316">
                    Compute bin stats.                    
                    <throws>
                        IOException  if an error occurs computing bin stats                        
                    </throws>
                </javadoc>
                <method name="computeStats" type="void" line="323"/>
                <javadoc line="323">
                    Compute sample statistics.                    
                    <throws>
                        IOException if an error occurs computing sample stats                        
                    </throws>
                </javadoc>
            </class>
            <class name="StreamDataAdapter" line="332">
                <extends class="DataAdapter"/>
                <javadoc line="332">
                    &lt;code&gt;DataAdapter&lt;/code&gt; for data provided through some input stream                    
                </javadoc>
                <declaration name="inputStream" type="BufferedReader" line="337"/>
                <javadoc line="337">
                    Input stream providing access to the data                    
                </javadoc>
                <javadoc line="340">
                    Create a StreamDataAdapter from a BufferedReader                    
                    <param>
                        in BufferedReader input stream                        
                    </param>
                </javadoc>
                <method name="StreamDataAdapter" type="constructor" line="345">
                    <params>
                        <param name="in" type="BufferedReader"/>
                    </params>
                </method>
                <javadoc line="350">
                    {@inheritDoc}                    
                </javadoc>
                <method name="computeBinStats" type="void" line="352">
                    <declaration name="str" type="String" line="353"/>
                    <declaration name="val" type="double" line="354"/>
                    <scope line="355">
                        <declaration name="stats" type="SummaryStatistics" line="357"/>
                    </scope>
                </method>
                <javadoc line="365">
                    {@inheritDoc}                    
                </javadoc>
                <method name="computeStats" type="void" line="367">
                    <declaration name="str" type="String" line="368"/>
                    <declaration name="val" type="double" line="369"/>
                    <scope line="371"/>
                </method>
            </class>
            <class name="ArrayDataAdapter" line="380">
                <extends class="DataAdapter"/>
                <javadoc line="380">
                    &lt;code&gt;DataAdapter&lt;/code&gt; for data provided as array of doubles.                    
                </javadoc>
                <declaration name="inputArray" type="double[]" line="385"/>
                <javadoc line="385">
                    Array of input  data values                    
                </javadoc>
                <javadoc line="388">
                    Construct an ArrayDataAdapter from a double[] array                    
                    <param>
                        in double[] array holding the data                        
                    </param>
                    <throws>
                        NullArgumentException if in is null                        
                    </throws>
                </javadoc>
                <method name="ArrayDataAdapter" type="constructor" line="394">
                    <params>
                        <param name="in" type="double[]"/>
                    </params>
                </method>
                <javadoc line="400">
                    {@inheritDoc}                    
                </javadoc>
                <method name="computeStats" type="void" line="402">
                    <scope line="404"/>
                </method>
                <javadoc line="409">
                    {@inheritDoc}                    
                </javadoc>
                <method name="computeBinStats" type="void" line="411">
                    <scope line="412">
                        <declaration name="stats" type="SummaryStatistics" line="413"/>
                    </scope>
                </method>
            </class>
            <javadoc line="420">
                Fills binStats array (second pass through data file).                
                <param>
                    da object providing access to the data                    
                </param>
                <throws>
                    IOException  if an IO error occurs                    
                </throws>
            </javadoc>
            <method name="fillBinStats" type="void" line="427">
                <params>
                    <param name="da" type="DataAdapter"/>
                </params>
                <comment line="428">
                    Set up grid                    
                </comment>
                <comment line="433">
                    Initialize binStats ArrayList                    
                </comment>
                <comment line="442">
                    Filling data in binStats Array                    
                </comment>
                <comment line="445">
                    Assign upperBounds based on bin counts                    
                </comment>
                <scope line="434"/>
                <scope line="437">
                    <declaration name="stats" type="SummaryStatistics" line="438"/>
                </scope>
                <scope line="449"/>
            </method>
            <javadoc line="456">
                Returns the index of the bin to which the given value belongs                
                <param>
                    value  the value whose bin we are trying to find                    
                </param>
                <return>
                    the index of the bin containing the value                    
                </return>
            </javadoc>
            <method name="findBin" type="int" line="462">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="468">
                Generates a random value from this distribution.
                  &lt;strong&gt;Preconditions:&lt;/strong&gt;&lt;ul&gt;
                  &lt;li&gt;the distribution must be loaded before invoking this method&lt;/li&gt;&lt;/ul&gt;                
                <return>
                    the random value.                    
                </return>
                <throws>
                    MathIllegalStateException if the distribution has not been loaded                    
                </throws>
            </javadoc>
            <method name="getNextValue" type="double" line="475">
                <comment line="481">
                    Start with a uniformly distributed random number in (0,1)                    
                </comment>
                <comment line="484">
                    Use this to select the bin and generate a Gaussian within the bin                    
                </comment>
                <comment line="489">
                    more than one obs                    
                </comment>
                <comment line="492">
                    only one obs in bin                    
                </comment>
                <scope line="477"/>
                <declaration name="x" type="double" line="482"/>
                <scope line="485">
                    <scope line="486">
                        <declaration name="stats" type="SummaryStatistics" line="487"/>
                        <scope line="488">
                            <scope line="489"/>
                            <scope line="491"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="500">
                Returns a {@link StatisticalSummary} describing this distribution.
                  &lt;strong&gt;Preconditions:&lt;/strong&gt;&lt;ul&gt;
                  &lt;li&gt;the distribution must be loaded before invoking this method&lt;/li&gt;&lt;/ul&gt;                
                <return>
                    the sample statistics                    
                </return>
                <throws>
                    IllegalStateException if the distribution has not been loaded                    
                </throws>
            </javadoc>
            <method name="getSampleStats" type="StatisticalSummary" line="508"/>
            <javadoc line="512">
                Returns the number of bins.                
                <return>
                    the number of bins.                    
                </return>
            </javadoc>
            <method name="getBinCount" type="int" line="517"/>
            <javadoc line="521">
                Returns a List of {@link SummaryStatistics} instances containing
                  statistics describing the values in each of the bins.  The list is
                  indexed on the bin number.                
                <return>
                    List of bin statistics.                    
                </return>
            </javadoc>
            <method name="getBinStats" type="List<SummaryStatistics>" line="528"/>
            <javadoc line="532">
                &lt;p&gt;Returns a fresh copy of the array of upper bounds for the bins.
                  Bins are: &lt;br/&gt;
                  [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,
                  (upperBounds[binCount-2], upperBounds[binCount-1] = max].&lt;/p&gt;
                  &lt;p&gt;Note: In versions 1.0-2.0 of commons-math, this method
                  incorrectly returned the array of probability generator upper
                  bounds now returned by {@link #getGeneratorUpperBounds()}.&lt;/p&gt;                
                <return>
                    array of bin upper bounds                    
                </return>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="getUpperBounds" type="double[]" line="545">
                <declaration name="binUpperBounds" type="double[]" line="546"/>
                <scope line="547"/>
            </method>
            <javadoc line="554">
                &lt;p&gt;Returns a fresh copy of the array of upper bounds of the subintervals
                  of [0,1] used in generating data from the empirical distribution.
                  Subintervals correspond to bins with lengths proportional to bin counts.&lt;/p&gt;
                  &lt;p&gt;In versions 1.0-2.0 of commons-math, this array was (incorrectly) returned
                  by {@link #getUpperBounds()}.&lt;/p&gt;                
                <since>
                    2.1                    
                </since>
                <return>
                    array of upper bounds of subintervals used in data generation                    
                </return>
            </javadoc>
            <method name="getGeneratorUpperBounds" type="double[]" line="565">
                <declaration name="len" type="int" line="566"/>
                <declaration name="out" type="double[]" line="567"/>
            </method>
            <javadoc line="572">
                Property indicating whether or not the distribution has been loaded.                
                <return>
                    true if the distribution has been loaded                    
                </return>
            </javadoc>
            <method name="isLoaded" type="boolean" line="577"/>
            <javadoc line="581">
                Reseeds the random number generator used by {@link #getNextValue()}.                
                <param>
                    seed random generator seed                    
                </param>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="reSeed" type="void" line="587">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <javadoc line="593">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="probability" type="double" line="597">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="601">
                {@inheritDoc}&lt;p&gt;Returns the kernel density normalized so that its integral over each bin
                  equals the bin mass.&lt;/p&gt;
                  &lt;p&gt;Algorithm description: &lt;ol&gt;
                  &lt;li&gt;Find the bin B that x belongs to.&lt;/li&gt;
                  &lt;li&gt;Compute K(B) = the mass of B with respect to the within-bin kernel (i.e., the
                  integral of the kernel density over B).&lt;/li&gt;
                  &lt;li&gt;Return k(x)  P(B) / K(B), where k is the within-bin kernel density
                  and P(B) is the mass of B.&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="density" type="double" line="615">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="616"/>
                <declaration name="binIndex" type="int" line="619"/>
                <declaration name="kernel" type="RealDistribution" line="620"/>
            </method>
            <javadoc line="624">
                {@inheritDoc}&lt;p&gt;Algorithm description:&lt;ol&gt;
                  &lt;li&gt;Find the bin B that x belongs to.&lt;/li&gt;
                  &lt;li&gt;Compute P(B) = the mass of B and P(B-) = the combined mass of the bins below B.&lt;/li&gt;
                  &lt;li&gt;Compute K(B) = the probability mass of B with respect to the within-bin kernel
                  and K(B-) = the kernel distribution evaluated at the lower endpoint of B&lt;/li&gt;
                  &lt;li&gt;Return P(B-) + P(B)  [K(x) - K(B-)] / K(B) where
                  K(x) is the within-bin kernel distribution function evaluated at x.&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="cumulativeProbability" type="double" line="637">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="638"/>
                <scope line="640"/>
                <declaration name="binIndex" type="int" line="643"/>
                <declaration name="pBminus" type="double" line="644"/>
                <declaration name="pB" type="double" line="645"/>
                <declaration name="binBounds" type="double[]" line="646"/>
                <declaration name="kB" type="double" line="647"/>
                <declaration name="lower" type="double" line="648"/>
                <declaration name="kernel" type="RealDistribution" line="649"/>
                <declaration name="withinBinCum" type="double" line="650"/>
            </method>
            <javadoc line="655">
                {@inheritDoc}&lt;p&gt;Algorithm description:&lt;ol&gt;
                  &lt;li&gt;Find the smallest i such that the sum of the masses of the bins
                  through i is at least p.&lt;/li&gt;
                  &lt;li&gt;
                  Let K be the within-bin kernel distribution for bin i.&lt;/br&gt;
                  Let K(B) be the mass of B under K. &lt;br/&gt;
                  Let K(B-) be K evaluated at the lower endpoint of B (the combined
                  mass of the bins below B under K).&lt;br/&gt;
                  Let P(B) be the probability of bin i.&lt;br/&gt;
                  Let P(B-) be the sum of the bin masses below bin i. &lt;br/&gt;
                  Let pCrit = p - P(B-)&lt;br/&gt;
                  &lt;li&gt;Return the inverse of K evaluated at &lt;br/&gt;
                  K(B-) + pCrit  K(B) / P(B) &lt;/li&gt;
                  &lt;/ol&gt;&lt;/p&gt;                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="inverseCumulativeProbability" type="double" line="675">
                <params>
                    <param name="p" type="double"/>
                </params>
                <scope line="676"/>
                <scope line="680"/>
                <scope line="684"/>
                <declaration name="i" type="int" line="688"/>
                <scope line="689"/>
                <declaration name="kernel" type="RealDistribution" line="693"/>
                <declaration name="kB" type="double" line="694"/>
                <declaration name="binBounds" type="double[]" line="695"/>
                <declaration name="lower" type="double" line="696"/>
                <declaration name="kBminus" type="double" line="697"/>
                <declaration name="pB" type="double" line="698"/>
                <declaration name="pBminus" type="double" line="699"/>
                <declaration name="pCrit" type="double" line="700"/>
                <scope line="701"/>
            </method>
            <javadoc line="707">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getNumericalMean" type="double" line="711"/>
            <javadoc line="715">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getNumericalVariance" type="double" line="719"/>
            <javadoc line="723">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="727"/>
            <javadoc line="731">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="735"/>
            <javadoc line="739">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="743"/>
            <javadoc line="747">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="751"/>
            <javadoc line="755">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="759"/>
            <javadoc line="763">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="sample" type="double" line="768"/>
            <javadoc line="772">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="reseedRandomGenerator" type="void" line="777">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <javadoc line="781">
                The probability of bin i.                
                <param>
                    i the index of the bin                    
                </param>
                <return>
                    the probability that selection begins in bin i                    
                </return>
            </javadoc>
            <method name="pB" type="double" line="787">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="792">
                The combined probability of the bins up to but not including bin i.                
                <param>
                    i the index of the bin                    
                </param>
                <return>
                    the probability that selection begins in a bin below bin i.                    
                </return>
            </javadoc>
            <method name="pBminus" type="double" line="798">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="802">
                Mass of bin i under the within-bin kernel of the bin.                
                <param>
                    i index of the bin                    
                </param>
                <return>
                    the difference in the within-bin kernel cdf between the
                      upper and lower endpoints of bin i                    
                </return>
            </javadoc>
            <method name="kB" type="double" line="810">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="binBounds" type="double[]" line="811"/>
                <declaration name="kernel" type="RealDistribution" line="812"/>
            </method>
            <javadoc line="817">
                The within-bin kernel of the bin that x belongs to.                
                <param>
                    x the value to locate within a bin                    
                </param>
                <return>
                    the within-bin kernel of the bin containing x                    
                </return>
            </javadoc>
            <method name="k" type="RealDistribution" line="823">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="binIndex" type="int" line="824"/>
            </method>
            <javadoc line="828">
                The combined probability of the bins up to and including binIndex.                
                <param>
                    binIndex maximum bin index                    
                </param>
                <return>
                    sum of the probabilities of bins through binIndex                    
                </return>
            </javadoc>
            <method name="cumBinP" type="double" line="834">
                <params>
                    <param name="binIndex" type="int"/>
                </params>
            </method>
            <javadoc line="838">
                The within-bin smoothing kernel.                
                <param>
                    bStats summary statistics for the bin                    
                </param>
                <return>
                    within-bin kernel parameterized by bStats                    
                </return>
            </javadoc>
            <method name="getKernel" type="RealDistribution" line="844">
                <params>
                    <param name="bStats" type="SummaryStatistics"/>
                </params>
                <comment line="845">
                    Default to Gaussian                    
                </comment>
            </method>
        </class>
    </source>