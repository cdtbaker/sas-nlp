<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.general">
        <import package="org.apache.commons.math3.analysis.DifferentiableMultivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer"/>
        <class name="AbstractScalarDifferentiableOptimizer" line="11">
            <extends class="BaseAbstractMultivariateOptimizer">
                <type_params>
                    <type_param name="DifferentiableMultivariateFunction"/>
                </type_params>
            </extends>
            <implements interface="DifferentiableMultivariateOptimizer"/>
            <javadoc line="11">
                Base class for implementing optimizers for multivariate scalar
                  differentiable functions.
                  It contains boiler-plate code for dealing with gradient evaluation.                
                <version>
                    $Id: AbstractScalarDifferentiableOptimizer.java 1422230 2012-12-15 12:11:13Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="gradient" type="MultivariateVectorFunction" line="20"/>
            <javadoc line="20">
                Objective function gradient.                
            </javadoc>
            <javadoc line="24">
                Simple constructor with default settings.
                  The convergence check is set to a{@link org.apache.commons.math3.optimization.SimpleValueCheckerSimpleValueChecker}.                
                <deprecated>
                    See {@link org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()}                    
                </deprecated>
            </javadoc>
            <method name="AbstractScalarDifferentiableOptimizer" type="constructor" line="29"/>
            <javadoc line="31">
                @param checker Convergence checker.                
            </javadoc>
            <method name="AbstractScalarDifferentiableOptimizer" type="constructor" line="34">
                <params>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                </params>
            </method>
            <javadoc line="37">
                Compute the gradient vector.                
                <param>
                    evaluationPoint Point at which the gradient must be evaluated.                    
                </param>
                <return>
                    the gradient at the specified point.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the allowed number of evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="computeObjectiveGradient" type="double[]" line="43">
                <params>
                    <param name="evaluationPoint" type="double[]"/>
                </params>
            </method>
            <javadoc line="46">
                {@inheritDoc}                
            </javadoc>
            <method name="optimizeInternal" type="PointValuePair" line="49">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="DifferentiableMultivariateFunction"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="startPoint" type="double[]"/>
                </params>
            </method>
            <javadoc line="53">
                Optimize an objective function.                
                <param>
                    f Objective function.                    
                </param>
                <param>
                    goalType Type of optimization goal: either{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.                    
                </param>
                <param>
                    startPoint Start point for optimization.                    
                </param>
                <param>
                    maxEval Maximum number of function evaluations.                    
                </param>
                <return>
                    the point/value pair giving the optimal value for objective
                      function.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NullArgumentException if
                      any argument is {@code null}.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PointValuePair" line="66">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="MultivariateDifferentiableFunction"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="startPoint" type="double[]"/>
                </params>
            </method>
        </class>
    </source>