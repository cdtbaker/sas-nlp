<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar">
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <class name="GradientMultivariateOptimizer" line="25">
            <extends class="MultivariateOptimizer"/>
            <javadoc line="25">
                Base class for implementing optimizers for multivariate scalar
                  differentiable functions.
                  It contains boiler-plate code for dealing with gradient evaluation.                
                <version>
                    $Id: GradientMultivariateOptimizer.java 1443444 2013-02-07 12:41:36Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="gradient" type="MultivariateVectorFunction" line="35"/>
            <javadoc line="35">
                Gradient of the objective function.                
            </javadoc>
            <javadoc line="40">
                @param checker Convergence checker.                
            </javadoc>
            <method name="GradientMultivariateOptimizer" type="constructor" line="43">
                <params>
                    <param name="checker" type="ConvergenceChecker&lt;PointValuePair&gt;"/>
                </params>
            </method>
            <javadoc line="47">
                Compute the gradient vector.                
                <param>
                    params Point at which the gradient must be evaluated.                    
                </param>
                <return>
                    the gradient at the specified point.                    
                </return>
            </javadoc>
            <method name="computeObjectiveGradient" type="double[]" line="53">
                <params>
                    <param name="params" type="double[]"/>
                </params>
            </method>
            <javadoc line="57">
                {@inheritDoc}                
                <param>
                    optData Optimization data. In addition to those documented in{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])MultivariateOptimizer}, this method will register the following data:
                      &lt;ul&gt;
                      &lt;li&gt;{@link ObjectiveFunctionGradient}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </param>
                <return>
                    {@inheritDoc}                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations (of the objective function) is exceeded.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PointValuePair" line="72">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="74">
                    Set up base class and perform computation.                    
                </comment>
            </method>
            <javadoc line="77">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data.
                      The following data will be looked for:
                      &lt;ul&gt;
                      &lt;li&gt;{@link ObjectiveFunctionGradient}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="88">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="90">
                    Allow base class to register its own data.                    
                </comment>
                <comment line="93">
                    The existing values (as set by the previous call) are reused if
                     not provided in the argument list.                    
                </comment>
                <comment line="98">
                    If more data must be parsed, this statement _must_ be
                     changed to &quot;continue&quot;.                    
                </comment>
                <scope line="94">
                    <scope line="95"/>
                </scope>
            </method>
        </class>
    </source>