<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.dfp">
        <class name="DfpDec" line="2">
            <extends class="Dfp"/>
            <javadoc line="2">
                Subclass of {@link Dfp} which hides the radix-10000 artifacts of the superclass.
                  This should give outward appearances of being a decimal number with DIGITS4-3
                  decimal digits. This class can be subclassed to appear to be an arbitrary number
                  of decimal digits less than DIGITS4-3.                
                <version>
                    $Id: DfpDec.java 1449529 2013-02-24 19:13:17Z luc $                    
                </version>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <javadoc line="11">
                Makes an instance with a value of zero.                
                <param>
                    factory factory linked to this instance                    
                </param>
            </javadoc>
            <method name="DfpDec" type="constructor" line="15">
                <params>
                    <param name="factory" type="DfpField"/>
                </params>
            </method>
            <javadoc line="18">
                Create an instance from a byte value.                
                <param>
                    factory factory linked to this instance                    
                </param>
                <param>
                    x value to convert to an instance                    
                </param>
            </javadoc>
            <method name="DfpDec" type="constructor" line="23">
                <params>
                    <param name="factory" type="DfpField"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="26">
                Create an instance from an int value.                
                <param>
                    factory factory linked to this instance                    
                </param>
                <param>
                    x value to convert to an instance                    
                </param>
            </javadoc>
            <method name="DfpDec" type="constructor" line="31">
                <params>
                    <param name="factory" type="DfpField"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="34">
                Create an instance from a long value.                
                <param>
                    factory factory linked to this instance                    
                </param>
                <param>
                    x value to convert to an instance                    
                </param>
            </javadoc>
            <method name="DfpDec" type="constructor" line="39">
                <params>
                    <param name="factory" type="DfpField"/>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="42">
                Create an instance from a double value.                
                <param>
                    factory factory linked to this instance                    
                </param>
                <param>
                    x value to convert to an instance                    
                </param>
            </javadoc>
            <method name="DfpDec" type="constructor" line="47">
                <params>
                    <param name="factory" type="DfpField"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="51">
                Copy constructor.                
                <param>
                    d instance to copy                    
                </param>
            </javadoc>
            <method name="DfpDec" type="constructor" line="55">
                <params>
                    <param name="d" type="Dfp"/>
                </params>
            </method>
            <javadoc line="59">
                Create an instance from a String representation.                
                <param>
                    factory factory linked to this instance                    
                </param>
                <param>
                    s string representation of the instance                    
                </param>
            </javadoc>
            <method name="DfpDec" type="constructor" line="64">
                <params>
                    <param name="factory" type="DfpField"/>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="68">
                Creates an instance with a non-finite value.                
                <param>
                    factory factory linked to this instance                    
                </param>
                <param>
                    sign sign of the Dfp to create                    
                </param>
                <param>
                    nans code of the value, must be one of {@link #INFINITE},{@link #SNAN},  {@link #QNAN}                    
                </param>
            </javadoc>
            <method name="DfpDec" type="constructor" line="74">
                <params>
                    <param name="factory" type="DfpField"/>
                    <param name="sign" type="byte"/>
                    <param name="nans" type="byte"/>
                </params>
            </method>
            <javadoc line="77">
                {@inheritDoc}                
            </javadoc>
            <method name="newInstance" type="Dfp" line="80"/>
            <javadoc line="83">
                {@inheritDoc}                
            </javadoc>
            <method name="newInstance" type="Dfp" line="86">
                <params>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="89">
                {@inheritDoc}                
            </javadoc>
            <method name="newInstance" type="Dfp" line="92">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                {@inheritDoc}                
            </javadoc>
            <method name="newInstance" type="Dfp" line="98">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="101">
                {@inheritDoc}                
            </javadoc>
            <method name="newInstance" type="Dfp" line="104">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="107">
                {@inheritDoc}                
            </javadoc>
            <method name="newInstance" type="Dfp" line="110">
                <params>
                    <param name="d" type="Dfp"/>
                </params>
                <scope line="111">
                    <declaration name="result" type="Dfp" line="113"/>
                </scope>
            </method>
            <javadoc line="119">
                {@inheritDoc}                
            </javadoc>
            <method name="newInstance" type="Dfp" line="122">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="125">
                {@inheritDoc}                
            </javadoc>
            <method name="newInstance" type="Dfp" line="128">
                <params>
                    <param name="sign" type="byte"/>
                    <param name="nans" type="byte"/>
                </params>
            </method>
            <javadoc line="131">
                Get the number of decimal digits this class is going to represent.
                  Default implementation returns {@link #getRadixDigits()}4-3. Subclasses can
                  override this to return something less.                
                <return>
                    number of decimal digits this class is going to represent                    
                </return>
            </javadoc>
            <method name="getDecimalDigits" type="int" line="137"/>
            <javadoc line="140">
                {@inheritDoc}                
            </javadoc>
            <method name="round" type="int" line="143">
                <params>
                    <param name="in" type="int"/>
                </params>
                <declaration name="msb" type="int" line="144"/>
                <scope line="145"/>
                <declaration name="cmaxdigits" type="int" line="148"/>
                <declaration name="lsbthreshold" type="int" line="149"/>
                <scope line="150"/>
                <declaration name="digits" type="int" line="154"/>
                <declaration name="lsbshift" type="int" line="155"/>
                <declaration name="lsd" type="int" line="156"/>
                <scope line="158"/>
                <declaration name="lsb" type="int" line="161"/>
                <scope line="162"/>
                <declaration name="discarded" type="int" line="165"/>
                <declaration name="n" type="int" line="166"/>
                <scope line="167"/>
                <scope line="172"/>
                <scope line="176"/>
                <declaration name="inc" type="boolean" line="181"/>
                <scope line="209">
                    <declaration name="rh" type="int" line="210"/>
                    <scope line="211">
                        <declaration name="r" type="int" line="212"/>
                    </scope>
                    <scope line="216"/>
                </scope>
                <scope line="221"/>
                <scope line="225"/>
                <scope line="229"/>
            </method>
            <javadoc line="235">
                {@inheritDoc}                
            </javadoc>
            <method name="nextAfter" type="Dfp" line="238">
                <params>
                    <param name="x" type="Dfp"/>
                </params>
                <declaration name="trapName" type="String" line="239"/>
                <scope line="240">
                    <declaration name="result" type="Dfp" line="242"/>
                </scope>
                <declaration name="up" type="boolean" line="246"/>
                <declaration name="result" type="Dfp" line="247"/>
                <declaration name="inc" type="Dfp" line="248"/>
                <scope line="249"/>
                <scope line="252"/>
                <scope line="255"/>
                <scope line="258">
                    <scope line="261"/>
                    <scope line="264"/>
                    <scope line="267"/>
                </scope>
                <scope line="271">
                    <scope line="274"/>
                    <scope line="277"/>
                    <scope line="280"/>
                    <scope line="283"/>
                    <scope line="286"/>
                </scope>
                <scope line="290"/>
                <scope line="294"/>
            </method>
        </class>
    </source>