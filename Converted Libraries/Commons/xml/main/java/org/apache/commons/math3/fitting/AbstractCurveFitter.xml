<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting">
        <import package="java.util.Collection"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer"/>
        <import package="org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem"/>
        <import package="org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer"/>
        <class name="AbstractCurveFitter" line="28">
            <javadoc line="28">
                Base class that contains common code for fitting parametric univariate
                  real functions &lt;code&gt;y = f(p&lt;sub&gt;i&lt;/sub&gt;;x)&lt;/code&gt;, where {@code x} is
                  the independent variable and the &lt;code&gt;p&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; are the
                  &lt;em&gt;parameters&lt;/em&gt;.
                  &lt;br/&gt;
                  A fitter will find the optimal values of the parameters by
                  &lt;em&gt;fitting&lt;/em&gt; the curve so it remains very close to a set of{@code N} observed points &lt;code&gt;(x&lt;sub&gt;k&lt;/sub&gt;, y&lt;sub&gt;k&lt;/sub&gt;)&lt;/code&gt;,{@code 0 &lt;= k &lt; N}.
                  &lt;br/&gt;
                  An algorithm usually performs the fit by finding the parameter
                  values that minimizes the objective function
                  &lt;pre&gt;&lt;code&gt;
                  &amp;sum;y&lt;sub&gt;k&lt;/sub&gt; - f(x&lt;sub&gt;k&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;,
                  &lt;/code&gt;&lt;/pre&gt;
                  which is actually a least-squares problem.
                  This class contains boilerplate code for calling the{@link #fit(Collection)} method for obtaining the parameters.
                  The problem setup, such as the choice of optimization algorithm
                  for fitting a specific function is delegated to subclasses.                
                <version>
                    $Id: AbstractCurveFitter.java 1569358 2014-02-18 14:33:20Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <javadoc line="54">
                Fits a curve.
                  This method computes the coefficients of the curve that best
                  fit the sample of observed points.                
                <param>
                    points Observations.                    
                </param>
                <return>
                    the fitted parameters.                    
                </return>
            </javadoc>
            <method name="fit" type="double[]" line="62">
                <params>
                    <param name="points" type="Collection&lt;WeightedObservedPoint&gt;"/>
                </params>
                <comment line="64">
                    Perform the fit.                    
                </comment>
            </method>
            <javadoc line="67">
                Creates an optimizer set up to fit the appropriate curve.
                  &lt;p&gt;
                  The default implementation uses a {@link LevenbergMarquardtOptimizerLevenberg-Marquardt} optimizer.
                  &lt;/p&gt;                
                <return>
                    the optimizer to use for fitting the curve to the
                      given {@code points}.                    
                </return>
            </javadoc>
            <method name="getOptimizer" type="LeastSquaresOptimizer" line="76"/>
            <method name="getProblem" type="LeastSquaresProblem" line="80"/>
            <javadoc line="80">
                Creates a least squares problem corresponding to the appropriate curve.                
                <param>
                    points Sample points.                    
                </param>
                <return>
                    the least squares problem to use for fitting the curve to the
                      given {@code points}.                    
                </return>
            </javadoc>
            <class name="TheoreticalValuesFunction" line="89">
                <javadoc line="89">
                    Vector function for computing function theoretical values.                    
                </javadoc>
                <declaration name="f" type="ParametricUnivariateFunction" line="93"/>
                <javadoc line="93">
                    Function to fit.                    
                </javadoc>
                <declaration name="points" type="double[]" line="95"/>
                <javadoc line="95">
                    Observations.                    
                </javadoc>
                <javadoc line="98">
                    @param f function to fit.                    
                    <param>
                        observations Observations.                        
                    </param>
                </javadoc>
                <method name="TheoreticalValuesFunction" type="constructor" line="103">
                    <params>
                        <param name="f" type="ParametricUnivariateFunction"/>
                        <param name="observations" type="Collection&lt;WeightedObservedPoint&gt;"/>
                    </params>
                    <declaration name="len" type="int" line="106"/>
                    <declaration name="i" type="int" line="108"/>
                    <scope line="109"/>
                </method>
                <javadoc line="114">
                    @return the model function values.                    
                </javadoc>
                <method name="getModelFunction" type="MultivariateVectorFunction" line="117">
                    <anonymous_class line="118">
                        <javadoc line="119">
                            {@inheritDoc}                            
                        </javadoc>
                        <method name="value" type="double[]" line="120">
                            <params>
                                <param name="p" type="double[]"/>
                            </params>
                            <declaration name="len" type="int" line="121"/>
                            <declaration name="values" type="double[]" line="122"/>
                            <scope line="123"/>
                        </method>
                    </anonymous_class>
                </method>
                <javadoc line="132">
                    @return the model function Jacobian.                    
                </javadoc>
                <method name="getModelFunctionJacobian" type="MultivariateMatrixFunction" line="135">
                    <anonymous_class line="136">
                        <method name="value" type="double[][]" line="137">
                            <params>
                                <param name="p" type="double[]"/>
                            </params>
                            <declaration name="len" type="int" line="138"/>
                            <declaration name="jacobian" type="double[][]" line="139"/>
                            <scope line="140"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
        </class>
    </source>