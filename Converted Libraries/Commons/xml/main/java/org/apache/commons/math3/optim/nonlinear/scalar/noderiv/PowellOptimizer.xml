<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optim.univariate.BracketFinder"/>
        <import package="org.apache.commons.math3.optim.univariate.BrentOptimizer"/>
        <import package="org.apache.commons.math3.optim.univariate.UnivariatePointValuePair"/>
        <import package="org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker"/>
        <import package="org.apache.commons.math3.optim.univariate.SearchInterval"/>
        <import package="org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction"/>
        <class name="PowellOptimizer" line="38">
            <extends class="MultivariateOptimizer"/>
            <javadoc line="38">
                Powell&apos;s algorithm.
                  This code is translated and adapted from the Python version of this
                  algorithm (as implemented in module {@code optimize.py} v0.5 of
                  &lt;em&gt;SciPy&lt;/em&gt;).
                  &lt;br/&gt;
                  The default stopping criterion is based on the differences of the
                  function value between two successive iterations. It is however possible
                  to define a custom convergence checker that might terminate the algorithm
                  earlier.
                  &lt;br/&gt;
                  The internal line search optimizer is a {@link BrentOptimizer} with a
                  convergence checker set to {@link SimpleUnivariateValueChecker}.
                  &lt;br/&gt;
                  Constraints are not supported: the call to{@link #optimize(OptimizationData[]) optimize} will throw{@link MathUnsupportedOperationException} if bounds are passed to it.
                  In order to impose simple constraints, the objective function must be
                  wrapped in an adapter like{@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterMultivariateFunctionMappingAdapter} or{@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterMultivariateFunctionPenaltyAdapter}.                
                <version>
                    $Id: PowellOptimizer.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <declaration name="MIN_RELATIVE_TOLERANCE" type="double" line="67"/>
            <javadoc line="67">
                Minimum relative tolerance.                
            </javadoc>
            <declaration name="relativeThreshold" type="double" line="71"/>
            <javadoc line="71">
                Relative threshold.                
            </javadoc>
            <declaration name="absoluteThreshold" type="double" line="75"/>
            <javadoc line="75">
                Absolute threshold.                
            </javadoc>
            <declaration name="line" type="LineSearch" line="79"/>
            <javadoc line="79">
                Line search.                
            </javadoc>
            <javadoc line="84">
                This constructor allows to specify a user-defined convergence checker,
                  in addition to the parameters that control the default convergence
                  checking procedure.
                  &lt;br/&gt;
                  The internal line search tolerances are set to the square-root of their
                  corresponding value in the multivariate optimizer.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <param>
                    checker Convergence checker.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel < 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="100">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                </params>
            </method>
            <javadoc line="104">
                This constructor allows to specify a user-defined convergence checker,
                  in addition to the parameters that control the default convergence
                  checking procedure and the line search tolerances.                
                <param>
                    rel Relative threshold for this optimizer.                    
                </param>
                <param>
                    abs Absolute threshold for this optimizer.                    
                </param>
                <param>
                    lineRel Relative threshold for the internal line search optimizer.                    
                </param>
                <param>
                    lineAbs Absolute threshold for the internal line search optimizer.                    
                </param>
                <param>
                    checker Convergence checker.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel < 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="121">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="lineRel" type="double"/>
                    <param name="lineAbs" type="double"/>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                </params>
                <comment line="133">
                    Create the line search optimizer.                    
                </comment>
                <scope line="124"/>
                <scope line="127"/>
            </method>
            <javadoc line="138">
                The parameters control the default convergence checking procedure.
                  &lt;br/&gt;
                  The internal line search tolerances are set to the square-root of their
                  corresponding value in the multivariate optimizer.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel < 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="150">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                </params>
            </method>
            <javadoc line="154">
                Builds an instance with the default convergence checking procedure.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <param>
                    lineRel Relative threshold for the internal line search optimizer.                    
                </param>
                <param>
                    lineAbs Absolute threshold for the internal line search optimizer.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel < 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="167">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="lineRel" type="double"/>
                    <param name="lineAbs" type="double"/>
                </params>
            </method>
            <javadoc line="171">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="173">
                <comment line="217">
                    Default convergence check.                    
                </comment>
                <comment line="224">
                    User-defined stopping criteria.                    
                </comment>
                <declaration name="goal" type="GoalType" line="176"/>
                <declaration name="guess" type="double[]" line="177"/>
                <declaration name="n" type="int" line="178"/>
                <declaration name="direc" type="double[][]" line="180"/>
                <scope line="181"/>
                <declaration name="checker" type="ConvergenceChecker&lt;PointValuePair&gt;" line="185"/>
                <declaration name="x" type="double[]" line="188"/>
                <declaration name="fVal" type="double" line="189"/>
                <declaration name="x1" type="double[]" line="190"/>
                <scope line="191">
                    <declaration name="fX" type="double" line="194"/>
                    <declaration name="fX2" type="double" line="195"/>
                    <declaration name="delta" type="double" line="196"/>
                    <declaration name="bigInd" type="int" line="197"/>
                    <declaration name="alphaMin" type="double" line="198"/>
                    <scope line="200">
                        <declaration name="d" type="double[]" line="201"/>
                        <declaration name="optimum" type="UnivariatePointValuePair" line="205"/>
                        <declaration name="result" type="double[][]" line="208"/>
                        <scope line="211"/>
                    </scope>
                    <declaration name="stop" type="boolean" line="218"/>
                    <declaration name="previous" type="PointValuePair" line="222"/>
                    <declaration name="current" type="PointValuePair" line="223"/>
                    <scope line="224"/>
                    <scope line="227">
                        <scope line="228"/>
                        <scope line="230"/>
                    </scope>
                    <declaration name="d" type="double[]" line="235"/>
                    <declaration name="x2" type="double[]" line="236"/>
                    <scope line="237"/>
                    <scope line="245">
                        <declaration name="t" type="double" line="246"/>
                        <declaration name="temp" type="double" line="247"/>
                        <scope line="252">
                            <declaration name="optimum" type="UnivariatePointValuePair" line="253"/>
                            <declaration name="result" type="double[][]" line="256"/>
                            <declaration name="lastInd" type="int" line="259"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="267">
                Compute a new point (in the original space) and a new direction
                  vector, resulting from the line search.                
                <param>
                    p Point used in the line search.                    
                </param>
                <param>
                    d Direction used in the line search.                    
                </param>
                <param>
                    optimum Optimum found by the line search.                    
                </param>
                <return>
                    a 2-element array containing the new point (at index 0) and
                      the new direction (at index 1).                    
                </return>
            </javadoc>
            <method name="newPointAndDirection" type="double[][]" line="279">
                <params>
                    <param name="p" type="double[]"/>
                    <param name="d" type="double[]"/>
                    <param name="optimum" type="double"/>
                </params>
                <declaration name="n" type="int" line="280"/>
                <declaration name="nP" type="double[]" line="281"/>
                <declaration name="nD" type="double[]" line="282"/>
                <scope line="283"/>
                <declaration name="result" type="double[][]" line="288"/>
            </method>
            <class name="LineSearch" line="295">
                <extends class="BrentOptimizer"/>
                <javadoc line="295">
                    Class for finding the minimum of the objective function along a given
                      direction.                    
                </javadoc>
                <declaration name="REL_TOL_UNUSED" type="double" line="300"/>
                <javadoc line="300">
                    Value that will pass the precondition check for {@link BrentOptimizer}but will not pass the convergence check, so that the custom checker
                      will always decide when to stop the line search.                    
                </javadoc>
                <declaration name="ABS_TOL_UNUSED" type="double" line="306"/>
                <javadoc line="306">
                    Value that will pass the precondition check for {@link BrentOptimizer}but will not pass the convergence check, so that the custom checker
                      will always decide when to stop the line search.                    
                </javadoc>
                <declaration name="bracket" type="BracketFinder" line="312"/>
                <javadoc line="312">
                    Automatic bracketing.                    
                </javadoc>
                <javadoc line="317">
                    The &quot;BrentOptimizer&quot; default stopping criterion uses the tolerances
                      to check the domain (point) values, not the function values.
                      We thus create a custom checker to use function values.                    
                    <param>
                        rel Relative threshold.                        
                    </param>
                    <param>
                        abs Absolute threshold.                        
                    </param>
                </javadoc>
                <method name="LineSearch" type="constructor" line="326">
                    <params>
                        <param name="rel" type="double"/>
                        <param name="abs" type="double"/>
                    </params>
                </method>
                <javadoc line="332">
                    Find the minimum of the function {@code f(p + alpha  d)}.                    
                    <param>
                        p Starting point.                        
                    </param>
                    <param>
                        d Search direction.                        
                    </param>
                    <return>
                        the optimum.                        
                    </return>
                    <throws>
                        org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the number of evaluations is exceeded.                        
                    </throws>
                </javadoc>
                <method name="search" type="UnivariatePointValuePair" line="341">
                    <params>
                        <param name="p" type="double[]"/>
                        <param name="d" type="double[]"/>
                    </params>
                    <comment line="356">
                        Passing &quot;MAX_VALUE&quot; as a dummy value because it is the enclosing                        
                    </comment>
                    <comment line="357">
                        class that counts the number of evaluations (and will eventually                        
                    </comment>
                    <comment line="358">
                        generate the exception).                        
                    </comment>
                    <declaration name="n" type="int" line="342"/>
                    <anonymous_class line="343">
                        <method name="value" type="double" line="344">
                            <params>
                                <param name="alpha" type="double"/>
                            </params>
                            <declaration name="x" type="double[]" line="345"/>
                            <scope line="346"/>
                            <declaration name="obj" type="double" line="349"/>
                        </method>
                    </anonymous_class>
                    <declaration name="f" type="UnivariateFunction" line="343"/>
                    <declaration name="goal" type="GoalType" line="354"/>
                </method>
            </class>
            <javadoc line="368">
                @throws MathUnsupportedOperationException if bounds were passed to the{@link #optimize(OptimizationData[]) optimize} method.                
            </javadoc>
            <method name="checkParameters" type="void" line="372">
                <scope line="374"/>
            </method>
        </class>
    </source>