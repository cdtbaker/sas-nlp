<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.LineSearch"/>
        <import package="org.apache.commons.math3.optim.univariate.UnivariatePointValuePair"/>
        <class name="PowellOptimizer" line="32">
            <extends class="MultivariateOptimizer"/>
            <javadoc line="32">
                Powell&apos;s algorithm.
                  This code is translated and adapted from the Python version of this
                  algorithm (as implemented in module {@code optimize.py} v0.5 of
                  &lt;em&gt;SciPy&lt;/em&gt;).
                  &lt;br/&gt;
                  The default stopping criterion is based on the differences of the
                  function value between two successive iterations. It is however possible
                  to define a custom convergence checker that might terminate the algorithm
                  earlier.
                  &lt;br/&gt;
                  Line search is performed by the {@link LineSearch} class.
                  &lt;br/&gt;
                  Constraints are not supported: the call to{@link #optimize(OptimizationData[]) optimize} will throw{@link MathUnsupportedOperationException} if bounds are passed to it.
                  In order to impose simple constraints, the objective function must be
                  wrapped in an adapter like{@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterMultivariateFunctionMappingAdapter} or{@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterMultivariateFunctionPenaltyAdapter}.                
                <version>
                    $Id: PowellOptimizer.java 1579346 2014-03-19 18:43:39Z erans $                    
                </version>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <declaration name="MIN_RELATIVE_TOLERANCE" type="double" line="60"/>
            <javadoc line="60">
                Minimum relative tolerance.                
            </javadoc>
            <declaration name="relativeThreshold" type="double" line="64"/>
            <javadoc line="64">
                Relative threshold.                
            </javadoc>
            <declaration name="absoluteThreshold" type="double" line="68"/>
            <javadoc line="68">
                Absolute threshold.                
            </javadoc>
            <declaration name="line" type="LineSearch" line="72"/>
            <javadoc line="72">
                Line search.                
            </javadoc>
            <javadoc line="77">
                This constructor allows to specify a user-defined convergence checker,
                  in addition to the parameters that control the default convergence
                  checking procedure.
                  &lt;br/&gt;
                  The internal line search tolerances are set to the square-root of their
                  corresponding value in the multivariate optimizer.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <param>
                    checker Convergence checker.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs &lt;= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel &lt; 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="93">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="checker" type="ConvergenceChecker&lt;PointValuePair&gt;"/>
                </params>
            </method>
            <javadoc line="97">
                This constructor allows to specify a user-defined convergence checker,
                  in addition to the parameters that control the default convergence
                  checking procedure and the line search tolerances.                
                <param>
                    rel Relative threshold for this optimizer.                    
                </param>
                <param>
                    abs Absolute threshold for this optimizer.                    
                </param>
                <param>
                    lineRel Relative threshold for the internal line search optimizer.                    
                </param>
                <param>
                    lineAbs Absolute threshold for the internal line search optimizer.                    
                </param>
                <param>
                    checker Convergence checker.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs &lt;= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel &lt; 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="114">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="lineRel" type="double"/>
                    <param name="lineAbs" type="double"/>
                    <param name="checker" type="ConvergenceChecker&lt;PointValuePair&gt;"/>
                </params>
                <comment line="127">
                    Create the line search optimizer.                    
                </comment>
                <scope line="117"/>
                <scope line="120"/>
            </method>
            <javadoc line="133">
                The parameters control the default convergence checking procedure.
                  &lt;br/&gt;
                  The internal line search tolerances are set to the square-root of their
                  corresponding value in the multivariate optimizer.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs &lt;= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel &lt; 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="145">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                </params>
            </method>
            <javadoc line="149">
                Builds an instance with the default convergence checking procedure.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <param>
                    lineRel Relative threshold for the internal line search optimizer.                    
                </param>
                <param>
                    lineAbs Absolute threshold for the internal line search optimizer.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs &lt;= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel &lt; 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="PowellOptimizer" type="constructor" line="162">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="lineRel" type="double"/>
                    <param name="lineAbs" type="double"/>
                </params>
            </method>
            <javadoc line="166">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="168">
                <comment line="213">
                    Default convergence check.                    
                </comment>
                <comment line="220">
                    User-defined stopping criteria.                    
                </comment>
                <declaration name="goal" type="GoalType" line="171"/>
                <declaration name="guess" type="double[]" line="172"/>
                <declaration name="n" type="int" line="173"/>
                <declaration name="direc" type="double[][]" line="175"/>
                <scope line="176"/>
                <declaration name="checker" type="ConvergenceChecker&amp;lt;PointValuePair&amp;gt;" line="180"/>
                <declaration name="x" type="double[]" line="183"/>
                <declaration name="fVal" type="double" line="184"/>
                <declaration name="x1" type="double[]" line="185"/>
                <scope line="186">
                    <declaration name="fX" type="double" line="189"/>
                    <declaration name="fX2" type="double" line="190"/>
                    <declaration name="delta" type="double" line="191"/>
                    <declaration name="bigInd" type="int" line="192"/>
                    <declaration name="alphaMin" type="double" line="193"/>
                    <scope line="195">
                        <declaration name="d" type="double[]" line="196"/>
                        <declaration name="optimum" type="UnivariatePointValuePair" line="200"/>
                        <declaration name="result" type="double[][]" line="203"/>
                        <scope line="206"/>
                    </scope>
                    <declaration name="stop" type="boolean" line="213"/>
                    <declaration name="previous" type="PointValuePair" line="217"/>
                    <declaration name="current" type="PointValuePair" line="218"/>
                    <scope line="219"/>
                    <scope line="222">
                        <scope line="223"/>
                        <scope line="225"/>
                    </scope>
                    <declaration name="d" type="double[]" line="230"/>
                    <declaration name="x2" type="double[]" line="231"/>
                    <scope line="232"/>
                    <scope line="240">
                        <declaration name="t" type="double" line="241"/>
                        <declaration name="temp" type="double" line="242"/>
                        <scope line="247">
                            <declaration name="optimum" type="UnivariatePointValuePair" line="248"/>
                            <declaration name="result" type="double[][]" line="251"/>
                            <declaration name="lastInd" type="int" line="254"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="262">
                Compute a new point (in the original space) and a new direction
                  vector, resulting from the line search.                
                <param>
                    p Point used in the line search.                    
                </param>
                <param>
                    d Direction used in the line search.                    
                </param>
                <param>
                    optimum Optimum found by the line search.                    
                </param>
                <return>
                    a 2-element array containing the new point (at index 0) and
                      the new direction (at index 1).                    
                </return>
            </javadoc>
            <method name="newPointAndDirection" type="double[][]" line="274">
                <params>
                    <param name="p" type="double[]"/>
                    <param name="d" type="double[]"/>
                    <param name="optimum" type="double"/>
                </params>
                <declaration name="n" type="int" line="275"/>
                <declaration name="nP" type="double[]" line="276"/>
                <declaration name="nD" type="double[]" line="277"/>
                <scope line="278"/>
                <declaration name="result" type="double[][]" line="283"/>
            </method>
            <javadoc line="290">
                @throws MathUnsupportedOperationException if bounds were passed to the{@link #optimize(OptimizationData[]) optimize} method.                
            </javadoc>
            <method name="checkParameters" type="void" line="294">
                <scope line="296"/>
            </method>
        </class>
    </source>