<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.events">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.solvers.AllowedSolution"/>
        <import package="org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver"/>
        <import package="org.apache.commons.math3.analysis.solvers.PegasusSolver"/>
        <import package="org.apache.commons.math3.analysis.solvers.UnivariateSolver"/>
        <import package="org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.ode.sampling.StepInterpolator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="EventState" line="12">
            <javadoc line="12">
                This class handles the state for one {@link EventHandlerevent handler} during integration steps.
                  &lt;p&gt;Each time the integrator proposes a step, the event handler
                  switching function should be checked. This class handles the state
                  of one handler during one integration step, with references to the
                  state at the end of the preceding step. This information is used to
                  decide if the handler should trigger an event or not during the
                  proposed step.&lt;/p&gt;                
                <version>
                    $Id: EventState.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="handler" type="EventHandler" line="24"/>
            <javadoc line="24">
                Event handler.                
            </javadoc>
            <declaration name="maxCheckInterval" type="double" line="28"/>
            <javadoc line="28">
                Maximal time interval between events handler checks.                
            </javadoc>
            <declaration name="convergence" type="double" line="32"/>
            <javadoc line="32">
                Convergence threshold for event localization.                
            </javadoc>
            <declaration name="maxIterationCount" type="int" line="36"/>
            <javadoc line="36">
                Upper limit in the iteration count for event localization.                
            </javadoc>
            <declaration name="t0" type="double" line="40"/>
            <javadoc line="40">
                Time at the beginning of the step.                
            </javadoc>
            <declaration name="g0" type="double" line="44"/>
            <javadoc line="44">
                Value of the events handler at the beginning of the step.                
            </javadoc>
            <declaration name="g0Positive" type="boolean" line="48"/>
            <javadoc line="48">
                Simulated sign of g0 (we cheat when crossing events).                
            </javadoc>
            <declaration name="pendingEvent" type="boolean" line="52"/>
            <javadoc line="52">
                Indicator of event expected during the step.                
            </javadoc>
            <declaration name="pendingEventTime" type="double" line="56"/>
            <javadoc line="56">
                Occurrence time of the pending event.                
            </javadoc>
            <declaration name="previousEventTime" type="double" line="60"/>
            <javadoc line="60">
                Occurrence time of the previous event.                
            </javadoc>
            <declaration name="forward" type="boolean" line="64"/>
            <javadoc line="64">
                Integration direction.                
            </javadoc>
            <declaration name="increasing" type="boolean" line="68"/>
            <javadoc line="68">
                Variation direction around pending event.
                  (this is considered with respect to the integration direction)                
            </javadoc>
            <declaration name="nextAction" type="EventHandler.Action" line="73"/>
            <javadoc line="73">
                Next action indicator.                
            </javadoc>
            <declaration name="solver" type="UnivariateSolver" line="77"/>
            <javadoc line="77">
                Root-finding algorithm to use to detect state events.                
            </javadoc>
            <javadoc line="81">
                Simple constructor.                
                <param>
                    handler event handler                    
                </param>
                <param>
                    maxCheckInterval maximal time interval between switching
                      function checks (this interval prevents missing sign changes in
                      case the integration steps becomes very large)                    
                </param>
                <param>
                    convergence convergence threshold in the event time search                    
                </param>
                <param>
                    maxIterationCount upper limit of the iteration count in
                      the event time search                    
                </param>
                <param>
                    solver Root-finding algorithm to use to detect state events                    
                </param>
            </javadoc>
            <method name="EventState" type="constructor" line="92">
                <params>
                    <param name="handler" type="EventHandler"/>
                    <param name="maxCheckInterval" type="double"/>
                    <param name="convergence" type="double"/>
                    <param name="maxIterationCount" type="int"/>
                    <param name="solver" type="UnivariateSolver"/>
                </params>
            </method>
            <javadoc line="107">
                Get the underlying event handler.                
                <return>
                    underlying event handler                    
                </return>
            </javadoc>
            <method name="getEventHandler" type="EventHandler" line="111"/>
            <javadoc line="114">
                Get the maximal time interval between events handler checks.                
                <return>
                    maximal time interval between events handler checks                    
                </return>
            </javadoc>
            <method name="getMaxCheckInterval" type="double" line="118"/>
            <javadoc line="121">
                Get the convergence threshold for event localization.                
                <return>
                    convergence threshold for event localization                    
                </return>
            </javadoc>
            <method name="getConvergence" type="double" line="125"/>
            <javadoc line="128">
                Get the upper limit in the iteration count for event localization.                
                <return>
                    upper limit in the iteration count for event localization                    
                </return>
            </javadoc>
            <method name="getMaxIterationCount" type="int" line="132"/>
            <javadoc line="135">
                Reinitialize the beginning of the step.                
                <param>
                    interpolator valid for the current step                    
                </param>
                <exception>
                    MaxCountExceededException if the interpolator throws one because
                      the number of functions evaluations is exceeded                    
                </exception>
            </javadoc>
            <method name="reinitializeBegin" type="void" line="141">
                <params>
                    <param name="interpolator" type="StepInterpolator"/>
                </params>
                <scope line="145">
                    <declaration name="epsilon" type="double" line="146"/>
                    <declaration name="tStart" type="double" line="147"/>
                </scope>
            </method>
            <javadoc line="153">
                Evaluate the impact of the proposed step on the event handler.                
                <param>
                    interpolator step interpolator for the proposed step                    
                </param>
                <return>
                    true if the event handler triggers an event before
                      the end of the proposed step                    
                </return>
                <exception>
                    MaxCountExceededException if the interpolator throws one because
                      the number of functions evaluations is exceeded                    
                </exception>
                <exception>
                    NoBracketingException if the event cannot be bracketed                    
                </exception>
            </javadoc>
            <method name="evaluateStep" type="boolean" line="162">
                <params>
                    <param name="interpolator" type="StepInterpolator"/>
                </params>
                <scope line="163">
                    <declaration name="t1" type="double" line="165"/>
                    <declaration name="dt" type="double" line="166"/>
                    <scope line="167"/>
                    <declaration name="n" type="int" line="170"/>
                    <declaration name="h" type="double" line="171"/>
                    <anonymous_class line="172">
                        <method name="value" type="double" line="173">
                            <params>
                                <param name="t" type="double"/>
                            </params>
                            <scope line="174"/>
                            <scope line="178"/>
                        </method>
                    </anonymous_class>
                    <declaration name="f" type="UnivariateFunction" line="172"/>
                    <declaration name="ta" type="double" line="184"/>
                    <declaration name="ga" type="double" line="185"/>
                    <scope line="186">
                        <declaration name="tb" type="double" line="187"/>
                        <declaration name="gb" type="double" line="189"/>
                        <scope line="190">
                            <declaration name="root" type="double" line="192"/>
                            <scope line="193">
                                <declaration name="bracketing" type="BracketedUnivariateSolver&lt;UnivariateFunction&gt;" line="194"/>
                            </scope>
                            <scope line="197">
                                <declaration name="baseRoot" type="double" line="198"/>
                                <declaration name="remainingEval" type="int" line="199"/>
                                <declaration name="bracketing" type="BracketedUnivariateSolver&lt;UnivariateFunction&gt;" line="200"/>
                            </scope>
                            <scope line="203"/>
                            <scope line="208"/>
                            <scope line="213"/>
                        </scope>
                        <scope line="218"/>
                    </scope>
                </scope>
                <scope line="227"/>
            </method>
            <javadoc line="231">
                Get the occurrence time of the event triggered in the current step.                
                <return>
                    occurrence time of the event triggered in the current
                      step or infinity if no events are triggered                    
                </return>
            </javadoc>
            <method name="getEventTime" type="double" line="236"/>
            <javadoc line="239">
                Acknowledge the fact the step has been accepted by the integrator.                
                <param>
                    t value of the independent <i>time</i> variable at the
                      end of the step                    
                </param>
                <param>
                    y array containing the current value of the state vector
                      at the end of the step                    
                </param>
            </javadoc>
            <method name="stepAccepted" type="void" line="246">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="249"/>
                <scope line="254"/>
            </method>
            <javadoc line="259">
                Check if the integration should be stopped at the end of the
                  current step.                
                <return>
                    true if the integration should be stopped                    
                </return>
            </javadoc>
            <method name="stop" type="boolean" line="264"/>
            <javadoc line="267">
                Let the event handler reset the state if it wants.                
                <param>
                    t value of the independent <i>time</i> variable at the
                      beginning of the next step                    
                </param>
                <param>
                    y array were to put the desired state vector at the beginning
                      of the next step                    
                </param>
                <return>
                    true if the integrator should reset the derivatives too                    
                </return>
            </javadoc>
            <method name="reset" type="boolean" line="275">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="276"/>
                <scope line="279"/>
            </method>
            <class name="LocalMaxCountExceededException" line="286">
                <extends class="RuntimeException"/>
                <javadoc line="286">
                    Local wrapper to propagate exceptions.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="290"/>
                <javadoc line="290">
                    Serializable UID.                    
                </javadoc>
                <declaration name="wrapped" type="MaxCountExceededException" line="294"/>
                <javadoc line="294">
                    Wrapped exception.                    
                </javadoc>
                <javadoc line="298">
                    Simple constructor.                    
                    <param>
                        exception exception to wrap                        
                    </param>
                </javadoc>
                <method name="LocalMaxCountExceededException" type="constructor" line="302">
                    <params>
                        <param name="exception" type="MaxCountExceededException"/>
                    </params>
                </method>
                <javadoc line="305">
                    Get the wrapped exception.                    
                    <return>
                        wrapped exception                        
                    </return>
                </javadoc>
                <method name="getException" type="MaxCountExceededException" line="309"/>
            </class>
        </class>
    </source>