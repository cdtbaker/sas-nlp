<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod">
        <import package="java.text.NumberFormat"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.Space"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Vector2D" line="31">
            <comment line="42">
                CHECKSTYLE: stop ConstantName                
            </comment>
            <comment line="45">
                CHECKSTYLE: resume ConstantName                
            </comment>
            <implements interface="Vector">
                <type_params>
                    <type_param name="Euclidean2D"/>
                </type_params>
            </implements>
            <javadoc line="31">
                This class represents a 2D vector.
                  &lt;p&gt;Instances of this class are guaranteed to be immutable.&lt;/p&gt;                
                <version>
                    $Id: Vector2D.java 1563684 2014-02-02 17:51:06Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="ZERO" type="Vector2D" line="38"/>
            <javadoc line="38">
                Origin (coordinates: 0, 0).                
            </javadoc>
            <declaration name="NaN" type="Vector2D" line="42"/>
            <javadoc line="42">
                A vector with all coordinates set to NaN.                
            </javadoc>
            <declaration name="POSITIVE_INFINITY" type="Vector2D" line="46"/>
            <javadoc line="46">
                A vector with all coordinates set to positive infinity.                
            </javadoc>
            <declaration name="NEGATIVE_INFINITY" type="Vector2D" line="50"/>
            <javadoc line="50">
                A vector with all coordinates set to negative infinity.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="54"/>
            <javadoc line="54">
                Serializable UID.                
            </javadoc>
            <declaration name="x" type="double" line="57"/>
            <javadoc line="57">
                Abscissa.                
            </javadoc>
            <declaration name="y" type="double" line="60"/>
            <javadoc line="60">
                Ordinate.                
            </javadoc>
            <javadoc line="63">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    x abscissa                    
                </param>
                <param>
                    y ordinate                    
                </param>
                <see>
                    #getX()                    
                </see>
                <see>
                    #getY()                    
                </see>
            </javadoc>
            <method name="Vector2D" type="constructor" line="70">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="75">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    v coordinates array                    
                </param>
                <exception>
                    DimensionMismatchException if array does not have 2 elements                    
                </exception>
                <see>
                    #toArray()                    
                </see>
            </javadoc>
            <method name="Vector2D" type="constructor" line="81">
                <params>
                    <param name="v" type="double[]"/>
                </params>
                <scope line="82"/>
            </method>
            <javadoc line="89">
                Multiplicative constructor
                  Build a vector from another one and a scale factor.
                  The vector built will be a  u                
                <param>
                    a scale factor                    
                </param>
                <param>
                    u base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector2D" type="constructor" line="95">
                <params>
                    <param name="a" type="double"/>
                    <param name="u" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="100">
                Linear constructor
                  Build a vector from two other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector2D" type="constructor" line="108">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector2D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="113">
                Linear constructor
                  Build a vector from three other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector2D" type="constructor" line="124">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector2D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector2D"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="129">
                Linear constructor
                  Build a vector from four other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3 + a4  u4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    u4 fourth base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector2D" type="constructor" line="142">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector2D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector2D"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="Vector2D"/>
                    <param name="a4" type="double"/>
                    <param name="u4" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="147">
                Get the abscissa of the vector.                
                <return>
                    abscissa of the vector                    
                </return>
                <see>
                    #Vector2D(double,double)                    
                </see>
            </javadoc>
            <method name="getX" type="double" line="151"/>
            <javadoc line="155">
                Get the ordinate of the vector.                
                <return>
                    ordinate of the vector                    
                </return>
                <see>
                    #Vector2D(double,double)                    
                </see>
            </javadoc>
            <method name="getY" type="double" line="159"/>
            <javadoc line="163">
                Get the vector coordinates as a dimension 2 array.                
                <return>
                    vector coordinates                    
                </return>
                <see>
                    #Vector2D(double[])                    
                </see>
            </javadoc>
            <method name="toArray" type="double[]" line="167"/>
            <javadoc line="171">
                {@inheritDoc}                
            </javadoc>
            <method name="getSpace" type="Space" line="172"/>
            <javadoc line="176">
                {@inheritDoc}                
            </javadoc>
            <method name="getZero" type="Vector2D" line="177"/>
            <javadoc line="181">
                {@inheritDoc}                
            </javadoc>
            <method name="getNorm1" type="double" line="182"/>
            <javadoc line="186">
                {@inheritDoc}                
            </javadoc>
            <method name="getNorm" type="double" line="187"/>
            <javadoc line="191">
                {@inheritDoc}                
            </javadoc>
            <method name="getNormSq" type="double" line="192"/>
            <javadoc line="196">
                {@inheritDoc}                
            </javadoc>
            <method name="getNormInf" type="double" line="197"/>
            <javadoc line="201">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="Vector2D" line="202">
                <params>
                    <param name="v" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="v2" type="Vector2D" line="203"/>
            </method>
            <javadoc line="207">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="Vector2D" line="208">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="v2" type="Vector2D" line="209"/>
            </method>
            <javadoc line="213">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="Vector2D" line="214">
                <params>
                    <param name="p" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="p3" type="Vector2D" line="215"/>
            </method>
            <javadoc line="219">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="Vector2D" line="220">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="v2" type="Vector2D" line="221"/>
            </method>
            <javadoc line="225">
                {@inheritDoc}                
            </javadoc>
            <method name="normalize" type="Vector2D" line="226">
                <declaration name="s" type="double" line="227"/>
                <scope line="228"/>
            </method>
            <javadoc line="234">
                Compute the angular separation between two vectors.
                  &lt;p&gt;This method computes the angular separation between two
                  vectors using the dot product for well separated vectors and the
                  cross product for almost aligned vectors. This allows to have a
                  good accuracy in all cases, even for vectors very close to each
                  other.&lt;/p&gt;                
                <param>
                    v1 first vector                    
                </param>
                <param>
                    v2 second vector                    
                </param>
                <return>
                    angular separation between v1 and v2                    
                </return>
                <exception>
                    MathArithmeticException if either vector has a null norm                    
                </exception>
            </javadoc>
            <method name="angle" type="double" line="245">
                <params>
                    <param name="v1" type="Vector2D"/>
                    <param name="v2" type="Vector2D"/>
                </params>
                <comment line="256">
                    the vectors are almost aligned, compute using the sine                    
                </comment>
                <comment line="264">
                    the vectors are sufficiently separated to use the cosine                    
                </comment>
                <declaration name="normProduct" type="double" line="247"/>
                <scope line="248"/>
                <declaration name="dot" type="double" line="252"/>
                <declaration name="threshold" type="double" line="253"/>
                <scope line="254">
                    <declaration name="n" type="double" line="256"/>
                    <scope line="257"/>
                </scope>
            </method>
            <javadoc line="268">
                {@inheritDoc}                
            </javadoc>
            <method name="negate" type="Vector2D" line="269"/>
            <javadoc line="273">
                {@inheritDoc}                
            </javadoc>
            <method name="scalarMultiply" type="Vector2D" line="274">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="278">
                {@inheritDoc}                
            </javadoc>
            <method name="isNaN" type="boolean" line="279"/>
            <javadoc line="283">
                {@inheritDoc}                
            </javadoc>
            <method name="isInfinite" type="boolean" line="284"/>
            <javadoc line="288">
                {@inheritDoc}                
            </javadoc>
            <method name="distance1" type="double" line="289">
                <params>
                    <param name="p" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="p3" type="Vector2D" line="290"/>
                <declaration name="dx" type="double" line="291"/>
                <declaration name="dy" type="double" line="292"/>
            </method>
            <javadoc line="296">
                {@inheritDoc}                
            </javadoc>
            <method name="distance" type="double" line="298">
                <params>
                    <param name="p" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
            </method>
            <javadoc line="302">
                {@inheritDoc}                
            </javadoc>
            <method name="distance" type="double" line="303">
                <params>
                    <param name="p" type="Point&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="p3" type="Vector2D" line="304"/>
                <declaration name="dx" type="double" line="305"/>
                <declaration name="dy" type="double" line="306"/>
            </method>
            <javadoc line="310">
                {@inheritDoc}                
            </javadoc>
            <method name="distanceInf" type="double" line="311">
                <params>
                    <param name="p" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="p3" type="Vector2D" line="312"/>
                <declaration name="dx" type="double" line="313"/>
                <declaration name="dy" type="double" line="314"/>
            </method>
            <javadoc line="318">
                {@inheritDoc}                
            </javadoc>
            <method name="distanceSq" type="double" line="319">
                <params>
                    <param name="p" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="p3" type="Vector2D" line="320"/>
                <declaration name="dx" type="double" line="321"/>
                <declaration name="dy" type="double" line="322"/>
            </method>
            <javadoc line="326">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="double" line="327">
                <params>
                    <param name="v" type="Vector&lt;Euclidean2D&gt;"/>
                </params>
                <declaration name="v2" type="Vector2D" line="328"/>
            </method>
            <javadoc line="332">
                Compute the cross-product of the instance and the given points.
                  &lt;p&gt;
                  The cross product can be used to determine the location of a point
                  with regard to the line formed by (p1, p2) and is calculated as:
                  \[
                  P = (x_2 - x_1)(y_3 - y_1) - (y_2 - y_1)(x_3 - x_1)
                  \]
                  with \(p3 = (x_3, y_3)\) being this instance.
                  &lt;p&gt;
                  If the result is 0, the points are collinear, i.e. lie on a single straight line L;
                  if it is positive, this point lies to the left, otherwise to the right of the line
                  formed by (p1, p2).                
                <param>
                    p1 first point of the line                    
                </param>
                <param>
                    p2 second point of the line                    
                </param>
                <return>
                    the cross-product                    
                </return>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross_product&quot;&gt;Cross product (Wikipedia)&lt;/a&gt;                    
                </see>
            </javadoc>
            <method name="crossProduct" type="double" line="352">
                <params>
                    <param name="p1" type="Vector2D"/>
                    <param name="p2" type="Vector2D"/>
                </params>
                <declaration name="x1" type="double" line="353"/>
                <declaration name="y1" type="double" line="354"/>
                <declaration name="x2" type="double" line="355"/>
                <declaration name="y2" type="double" line="356"/>
            </method>
            <javadoc line="360">
                Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;p1.subtract(p2).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the distance between p1 and p2 according to the L&lt;sub&gt;2&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="368">
                <params>
                    <param name="p1" type="Vector2D"/>
                    <param name="p2" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="372">
                Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;p1.subtract(p2).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the distance between p1 and p2 according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="double" line="380">
                <params>
                    <param name="p1" type="Vector2D"/>
                    <param name="p2" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="384">
                Compute the square of the distance between two vectors.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;p1.subtract(p2).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the square of the distance between p1 and p2                    
                </return>
            </javadoc>
            <method name="distanceSq" type="double" line="392">
                <params>
                    <param name="p1" type="Vector2D"/>
                    <param name="p2" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="396">
                Test for the equality of two 2D vectors.
                  &lt;p&gt;
                  If all coordinates of two 2D vectors are exactly the same, and none are
                  &lt;code&gt;Double.NaN&lt;/code&gt;, the two 2D vectors are considered to be equal.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;NaN&lt;/code&gt; coordinates are considered to affect globally the vector
                  and be equals to each other - i.e, if either (or all) coordinates of the
                  2D vector are equal to &lt;code&gt;Double.NaN&lt;/code&gt;, the 2D vector is equal to{@link #NaN}.
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two 2D vector objects are equal, false if
                      object is null, not an instance of Vector2D, or
                      not equal to this Vector2D instance                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="416">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="418"/>
                <scope line="422">
                    <declaration name="rhs" type="Vector2D" line="423"/>
                    <scope line="424"/>
                </scope>
            </method>
            <javadoc line="433">
                Get a hashCode for the 2D vector.
                  &lt;p&gt;
                  All NaN values have the same hash code.&lt;/p&gt;                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="441">
                <scope line="442"/>
            </method>
            <javadoc line="448">
                Get a string representation of this vector.                
                <return>
                    a string representation of this vector                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="452"/>
            <javadoc line="456">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="457">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
        </class>
    </source>