<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod">
        <import package="java.text.NumberFormat"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Space"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Vector2D" line="29">
            <comment line="40">
                CHECKSTYLE: stop ConstantName                
            </comment>
            <comment line="43">
                CHECKSTYLE: resume ConstantName                
            </comment>
            <implements interface="Vector">
                <type_params>
                    <type_param name="Euclidean2D"/>
                </type_params>
            </implements>
            <javadoc line="29">
                This class represents a 2D vector.
                  &lt;p&gt;Instances of this class are guaranteed to be immutable.&lt;/p&gt;                
                <version>
                    $Id: Vector2D.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="ZERO" type="Vector2D" line="36"/>
            <javadoc line="36">
                Origin (coordinates: 0, 0).                
            </javadoc>
            <declaration name="NaN" type="Vector2D" line="40"/>
            <javadoc line="40">
                A vector with all coordinates set to NaN.                
            </javadoc>
            <declaration name="POSITIVE_INFINITY" type="Vector2D" line="44"/>
            <javadoc line="44">
                A vector with all coordinates set to positive infinity.                
            </javadoc>
            <declaration name="NEGATIVE_INFINITY" type="Vector2D" line="48"/>
            <javadoc line="48">
                A vector with all coordinates set to negative infinity.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="52"/>
            <javadoc line="52">
                Serializable UID.                
            </javadoc>
            <declaration name="x" type="double" line="55"/>
            <javadoc line="55">
                Abscissa.                
            </javadoc>
            <declaration name="y" type="double" line="58"/>
            <javadoc line="58">
                Ordinate.                
            </javadoc>
            <javadoc line="61">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    x abscissa                    
                </param>
                <param>
                    y ordinate                    
                </param>
                <see>
                    #getX()                    
                </see>
                <see>
                    #getY()                    
                </see>
            </javadoc>
            <method name="Vector2D" type="constructor" line="68">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="73">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    v coordinates array                    
                </param>
                <exception>
                    DimensionMismatchException if array does not have 2 elements                    
                </exception>
                <see>
                    #toArray()                    
                </see>
            </javadoc>
            <method name="Vector2D" type="constructor" line="79">
                <params>
                    <param name="v" type="double[]"/>
                </params>
                <scope line="80"/>
            </method>
            <javadoc line="87">
                Multiplicative constructor
                  Build a vector from another one and a scale factor.
                  The vector built will be a  u                
                <param>
                    a scale factor                    
                </param>
                <param>
                    u base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector2D" type="constructor" line="93">
                <params>
                    <param name="a" type="double"/>
                    <param name="u" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="98">
                Linear constructor
                  Build a vector from two other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector2D" type="constructor" line="106">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector2D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="111">
                Linear constructor
                  Build a vector from three other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector2D" type="constructor" line="122">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector2D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector2D"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="127">
                Linear constructor
                  Build a vector from four other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3 + a4  u4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    u4 fourth base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector2D" type="constructor" line="140">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector2D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector2D"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="Vector2D"/>
                    <param name="a4" type="double"/>
                    <param name="u4" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="145">
                Get the abscissa of the vector.                
                <return>
                    abscissa of the vector                    
                </return>
                <see>
                    #Vector2D(double,double)                    
                </see>
            </javadoc>
            <method name="getX" type="double" line="149"/>
            <javadoc line="153">
                Get the ordinate of the vector.                
                <return>
                    ordinate of the vector                    
                </return>
                <see>
                    #Vector2D(double,double)                    
                </see>
            </javadoc>
            <method name="getY" type="double" line="157"/>
            <javadoc line="161">
                Get the vector coordinates as a dimension 2 array.                
                <return>
                    vector coordinates                    
                </return>
                <see>
                    #Vector2D(double[])                    
                </see>
            </javadoc>
            <method name="toArray" type="double[]" line="165"/>
            <javadoc line="169">
                {@inheritDoc}                
            </javadoc>
            <method name="getSpace" type="Space" line="170"/>
            <javadoc line="174">
                {@inheritDoc}                
            </javadoc>
            <method name="getZero" type="Vector2D" line="175"/>
            <javadoc line="179">
                {@inheritDoc}                
            </javadoc>
            <method name="getNorm1" type="double" line="180"/>
            <javadoc line="184">
                {@inheritDoc}                
            </javadoc>
            <method name="getNorm" type="double" line="185"/>
            <javadoc line="189">
                {@inheritDoc}                
            </javadoc>
            <method name="getNormSq" type="double" line="190"/>
            <javadoc line="194">
                {@inheritDoc}                
            </javadoc>
            <method name="getNormInf" type="double" line="195"/>
            <javadoc line="199">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="Vector2D" line="200">
                <params>
                    <param name="v" type="Vector<Euclidean2D>"/>
                </params>
                <declaration name="v2" type="Vector2D" line="201"/>
            </method>
            <javadoc line="205">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="Vector2D" line="206">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector<Euclidean2D>"/>
                </params>
                <declaration name="v2" type="Vector2D" line="207"/>
            </method>
            <javadoc line="211">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="Vector2D" line="212">
                <params>
                    <param name="p" type="Vector<Euclidean2D>"/>
                </params>
                <declaration name="p3" type="Vector2D" line="213"/>
            </method>
            <javadoc line="217">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="Vector2D" line="218">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector<Euclidean2D>"/>
                </params>
                <declaration name="v2" type="Vector2D" line="219"/>
            </method>
            <javadoc line="223">
                {@inheritDoc}                
            </javadoc>
            <method name="normalize" type="Vector2D" line="224">
                <declaration name="s" type="double" line="225"/>
                <scope line="226"/>
            </method>
            <javadoc line="231">
                {@inheritDoc}                
            </javadoc>
            <method name="negate" type="Vector2D" line="232"/>
            <javadoc line="236">
                {@inheritDoc}                
            </javadoc>
            <method name="scalarMultiply" type="Vector2D" line="237">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="241">
                {@inheritDoc}                
            </javadoc>
            <method name="isNaN" type="boolean" line="242"/>
            <javadoc line="246">
                {@inheritDoc}                
            </javadoc>
            <method name="isInfinite" type="boolean" line="247"/>
            <javadoc line="251">
                {@inheritDoc}                
            </javadoc>
            <method name="distance1" type="double" line="252">
                <params>
                    <param name="p" type="Vector<Euclidean2D>"/>
                </params>
                <declaration name="p3" type="Vector2D" line="253"/>
                <declaration name="dx" type="double" line="254"/>
                <declaration name="dy" type="double" line="255"/>
            </method>
            <javadoc line="259">
                {@inheritDoc}                
            </javadoc>
            <method name="distance" type="double" line="260">
                <params>
                    <param name="p" type="Vector<Euclidean2D>"/>
                </params>
                <declaration name="p3" type="Vector2D" line="261"/>
                <declaration name="dx" type="double" line="262"/>
                <declaration name="dy" type="double" line="263"/>
            </method>
            <javadoc line="267">
                {@inheritDoc}                
            </javadoc>
            <method name="distanceInf" type="double" line="268">
                <params>
                    <param name="p" type="Vector<Euclidean2D>"/>
                </params>
                <declaration name="p3" type="Vector2D" line="269"/>
                <declaration name="dx" type="double" line="270"/>
                <declaration name="dy" type="double" line="271"/>
            </method>
            <javadoc line="275">
                {@inheritDoc}                
            </javadoc>
            <method name="distanceSq" type="double" line="276">
                <params>
                    <param name="p" type="Vector<Euclidean2D>"/>
                </params>
                <declaration name="p3" type="Vector2D" line="277"/>
                <declaration name="dx" type="double" line="278"/>
                <declaration name="dy" type="double" line="279"/>
            </method>
            <javadoc line="283">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="double" line="284">
                <params>
                    <param name="v" type="Vector<Euclidean2D>"/>
                </params>
                <declaration name="v2" type="Vector2D" line="285"/>
            </method>
            <javadoc line="289">
                Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;p1.subtract(p2).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the distance between p1 and p2 according to the L<sub>2</sub> norm                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="297">
                <params>
                    <param name="p1" type="Vector2D"/>
                    <param name="p2" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="301">
                Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;p1.subtract(p2).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the distance between p1 and p2 according to the L<sub>&infin;</sub> norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="double" line="309">
                <params>
                    <param name="p1" type="Vector2D"/>
                    <param name="p2" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="313">
                Compute the square of the distance between two vectors.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;p1.subtract(p2).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the square of the distance between p1 and p2                    
                </return>
            </javadoc>
            <method name="distanceSq" type="double" line="321">
                <params>
                    <param name="p1" type="Vector2D"/>
                    <param name="p2" type="Vector2D"/>
                </params>
            </method>
            <javadoc line="325">
                Test for the equality of two 2D vectors.
                  &lt;p&gt;
                  If all coordinates of two 2D vectors are exactly the same, and none are
                  &lt;code&gt;Double.NaN&lt;/code&gt;, the two 2D vectors are considered to be equal.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;NaN&lt;/code&gt; coordinates are considered to affect globally the vector
                  and be equals to each other - i.e, if either (or all) coordinates of the
                  2D vector are equal to &lt;code&gt;Double.NaN&lt;/code&gt;, the 2D vector is equal to{@link #NaN}.
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two 2D vector objects are equal, false if
                      object is null, not an instance of Vector2D, or
                      not equal to this Vector2D instance                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="345">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="347"/>
                <scope line="351">
                    <declaration name="rhs" type="Vector2D" line="352"/>
                    <scope line="353"/>
                </scope>
            </method>
            <javadoc line="362">
                Get a hashCode for the 2D vector.
                  &lt;p&gt;
                  All NaN values have the same hash code.&lt;/p&gt;                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="370">
                <scope line="371"/>
            </method>
            <javadoc line="377">
                Get a string representation of this vector.                
                <return>
                    a string representation of this vector                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="381"/>
            <javadoc line="385">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="386">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
        </class>
    </source>