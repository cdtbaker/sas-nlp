<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer"/>
        <import package="org.apache.commons.math3.fitting.PolynomialFitter"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.optim.SimpleVectorValueChecker"/>
        <class name="SmoothingPolynomialBicubicSplineInterpolator" line="31">
            <extends class="BicubicSplineInterpolator"/>
            <javadoc line="31">
                Generates a bicubic interpolation function.
                  Prior to generating the interpolating function, the input is smoothed using
                  polynomial fitting.                
                <version>
                    $Id: SmoothingPolynomialBicubicSplineInterpolator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <declaration name="xFitter" type="PolynomialFitter" line="41"/>
            <javadoc line="41">
                Fitter for x.                
            </javadoc>
            <declaration name="xDegree" type="int" line="43"/>
            <javadoc line="43">
                Degree of the fitting polynomial.                
            </javadoc>
            <declaration name="yFitter" type="PolynomialFitter" line="45"/>
            <javadoc line="45">
                Fitter for y.                
            </javadoc>
            <declaration name="yDegree" type="int" line="47"/>
            <javadoc line="47">
                Degree of the fitting polynomial.                
            </javadoc>
            <javadoc line="50">
                Default constructor. The degree of the fitting polynomials is set to 3.                
            </javadoc>
            <method name="SmoothingPolynomialBicubicSplineInterpolator" type="constructor" line="53"/>
            <javadoc line="57">
                @param degree Degree of the polynomial fitting functions.                
                <exception>
                    NotPositiveException if degree is not positive                    
                </exception>
            </javadoc>
            <method name="SmoothingPolynomialBicubicSplineInterpolator" type="constructor" line="62">
                <params>
                    <param name="degree" type="int"/>
                </params>
            </method>
            <javadoc line="66">
                @param xDegree Degree of the polynomial fitting functions along the
                  x-dimension.                
                <param>
                    yDegree Degree of the polynomial fitting functions along the
                      y-dimension.                    
                </param>
                <exception>
                    NotPositiveException if degrees are not positive                    
                </exception>
            </javadoc>
            <method name="SmoothingPolynomialBicubicSplineInterpolator" type="constructor" line="74">
                <params>
                    <param name="xDegree" type="int"/>
                    <param name="yDegree" type="int"/>
                </params>
                <scope line="75"/>
                <scope line="78"/>
                <declaration name="safeFactor" type="double" line="84"/>
                <declaration name="checker" type="SimpleVectorValueChecker" line="85"/>
            </method>
            <javadoc line="92">
                {@inheritDoc}                
            </javadoc>
            <method name="interpolate" type="BicubicSplineInterpolatingFunction" line="100">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                    <param name="fval" type="double[][]"/>
                </params>
                <comment line="120">
                    For each line y[j] (0 &lt;= j &lt; yLen), construct a polynomial, with                    
                </comment>
                <comment line="121">
                    respect to variable x, fitting array fval[][j]                    
                </comment>
                <comment line="129">
                    Initial guess for the fit is zero for each coefficients (of which                    
                </comment>
                <comment line="130">
                    there are &quot;xDegree&quot; + 1).                    
                </comment>
                <comment line="134">
                    For every knot (xval[i], yval[j]) of the grid, calculate corrected                    
                </comment>
                <comment line="135">
                    values fval_1                    
                </comment>
                <comment line="144">
                    For each line x[i] (0 &lt;= i &lt; xLen), construct a polynomial, with                    
                </comment>
                <comment line="145">
                    respect to variable y, fitting array fval_1[i][]                    
                </comment>
                <comment line="153">
                    Initial guess for the fit is zero for each coefficients (of which                    
                </comment>
                <comment line="154">
                    there are &quot;yDegree&quot; + 1).                    
                </comment>
                <comment line="158">
                    For every knot (xval[i], yval[j]) of the grid, calculate corrected                    
                </comment>
                <comment line="159">
                    values fval_2                    
                </comment>
                <scope line="101"/>
                <scope line="104"/>
                <declaration name="xLen" type="int" line="108"/>
                <declaration name="yLen" type="int" line="109"/>
                <scope line="111">
                    <scope line="112"/>
                </scope>
                <declaration name="yPolyX" type="PolynomialFunction[]" line="122"/>
                <scope line="123">
                    <scope line="125"/>
                </scope>
                <declaration name="fval_1" type="double[][]" line="136"/>
                <scope line="137">
                    <declaration name="f" type="PolynomialFunction" line="138"/>
                    <scope line="139"/>
                </scope>
                <declaration name="xPolyY" type="PolynomialFunction[]" line="146"/>
                <scope line="147">
                    <scope line="149"/>
                </scope>
                <declaration name="fval_2" type="double[][]" line="160"/>
                <scope line="161">
                    <declaration name="f" type="PolynomialFunction" line="162"/>
                    <scope line="163"/>
                </scope>
            </method>
        </class>
    </source>