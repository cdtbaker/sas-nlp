<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.ode.AbstractIntegrator"/>
        <import package="org.apache.commons.math3.ode.ExpandableStatefulODE"/>
        <import package="org.apache.commons.math3.ode.FirstOrderDifferentialEquations"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="RungeKuttaIntegrator" line="30">
            <extends class="AbstractIntegrator"/>
            <javadoc line="30">
                This class implements the common part of all fixed step Runge-Kutta
                  integrators for Ordinary Differential Equations.
                  &lt;p&gt;These methods are explicit Runge-Kutta methods, their Butcher
                  arrays are as follows :
                  &lt;pre&gt;
                  0  |
                  c2  | a21
                  c3  | a31  a32
                  ... |        ...
                  cs  | as1  as2  ...  ass-1
                  |--------------------------
                  |  b1   b2  ...   bs-1  bs
                  &lt;/pre&gt;
                  &lt;/p&gt;                
                <see>
                    EulerIntegrator                    
                </see>
                <see>
                    ClassicalRungeKuttaIntegrator                    
                </see>
                <see>
                    GillIntegrator                    
                </see>
                <see>
                    MidpointIntegrator                    
                </see>
                <version>
                    $Id: RungeKuttaIntegrator.java 1588769 2014-04-20 14:29:42Z luc $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="c" type="double[]" line="57"/>
            <javadoc line="57">
                Time steps from Butcher array (without the first zero).                
            </javadoc>
            <declaration name="a" type="double[][]" line="60"/>
            <javadoc line="60">
                Internal weights from Butcher array (without the first empty row).                
            </javadoc>
            <declaration name="b" type="double[]" line="63"/>
            <javadoc line="63">
                External weights for the high order method from Butcher array.                
            </javadoc>
            <declaration name="prototype" type="RungeKuttaStepInterpolator" line="66"/>
            <javadoc line="66">
                Prototype of the step interpolator.                
            </javadoc>
            <declaration name="step" type="double" line="69"/>
            <javadoc line="69">
                Integration step.                
            </javadoc>
            <javadoc line="72">
                Simple constructor.
                  Build a Runge-Kutta integrator with the given
                  step. The default step handler does nothing.                
                <param>
                    name name of the method                    
                </param>
                <param>
                    c time steps from Butcher array (without the first zero)                    
                </param>
                <param>
                    a internal weights from Butcher array (without the first empty row)                    
                </param>
                <param>
                    b propagation weights for the high order method from Butcher array                    
                </param>
                <param>
                    prototype prototype of the step interpolator to use                    
                </param>
                <param>
                    step integration step                    
                </param>
            </javadoc>
            <method name="RungeKuttaIntegrator" type="constructor" line="85">
                <params>
                    <param name="name" type="String"/>
                    <param name="c" type="double[]"/>
                    <param name="a" type="double[][]"/>
                    <param name="b" type="double[]"/>
                    <param name="prototype" type="RungeKuttaStepInterpolator"/>
                    <param name="step" type="double"/>
                </params>
            </method>
            <javadoc line="94">
                {@inheritDoc}                
            </javadoc>
            <method name="integrate" type="void" line="98">
                <params>
                    <param name="equations" type="ExpandableStatefulODE"/>
                    <param name="t" type="double"/>
                </params>
                <comment line="105">
                    create some internal working arrays                    
                </comment>
                <comment line="116">
                    set up an interpolator sharing the integrator arrays                    
                </comment>
                <comment line="122">
                    set up integration control objects                    
                </comment>
                <comment line="127">
                    main integration loop                    
                </comment>
                <comment line="133">
                    first stage                    
                </comment>
                <comment line="136">
                    next stages                    
                </comment>
                <comment line="151">
                    estimate the state at the end of the step                    
                </comment>
                <comment line="160">
                    discrete events handling                    
                </comment>
                <comment line="168">
                    prepare next step                    
                </comment>
                <comment line="171">
                    stepsize control for next step                    
                </comment>
                <comment line="181">
                    dispatch results                    
                </comment>
                <declaration name="forward" type="boolean" line="102"/>
                <declaration name="y0" type="double[]" line="105"/>
                <declaration name="y" type="double[]" line="106"/>
                <declaration name="stages" type="int" line="107"/>
                <declaration name="yDotK" type="double[][]" line="108"/>
                <scope line="109"/>
                <declaration name="yTmp" type="double[]" line="112"/>
                <declaration name="yDotTmp" type="double[]" line="113"/>
                <declaration name="interpolator" type="RungeKuttaStepInterpolator" line="116"/>
                <scope line="128">
                    <scope line="136">
                        <scope line="138">
                            <declaration name="sum" type="double" line="139"/>
                            <scope line="140"/>
                        </scope>
                    </scope>
                    <scope line="151">
                        <declaration name="sum" type="double" line="152"/>
                        <scope line="153"/>
                    </scope>
                    <scope line="165">
                        <declaration name="nextT" type="double" line="171"/>
                        <declaration name="nextIsLast" type="boolean" line="172"/>
                        <scope line="173"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="189">
                Fast computation of a single step of ODE integration.
                  &lt;p&gt;This method is intended for the limited use case of
                  very fast computation of only one step without using any of the
                  rich features of general integrators that may take some time
                  to set up (i.e. no step handlers, no events handlers, no additional
                  states, no interpolators, no error control, no evaluations count,
                  no sanity checks ...). It handles the strict minimum of computation,
                  so it can be embedded in outer loops.&lt;/p&gt;
                  &lt;p&gt;
                  This method is &lt;em&gt;not&lt;/em&gt; used at all by the {@link #integrate(ExpandableStatefulODE,double)}method. It also completely ignores the step set at construction time, and
                  uses only a single step to go from {@code t0} to {@code t}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  As this method does not use any of the state-dependent features of the integrator,
                  it should be reasonably thread-safe &lt;em&gt;if and only if&lt;/em&gt; the provided differential
                  equations are themselves thread-safe.
                  &lt;/p&gt;                
                <param>
                    equations differential equations to integrate                    
                </param>
                <param>
                    t0 initial time                    
                </param>
                <param>
                    y0 initial value of the state vector at t0                    
                </param>
                <param>
                    t target time for the integration
                      (can be set to a value smaller than {@code t0} for backward integration)                    
                </param>
                <return>
                    state vector at {@code t}                    
                </return>
            </javadoc>
            <method name="singleStep" type="double[]" line="215">
                <params>
                    <param name="equations" type="FirstOrderDifferentialEquations"/>
                    <param name="t0" type="double"/>
                    <param name="y0" type="double[]"/>
                    <param name="t" type="double"/>
                </params>
                <comment line="218">
                    create some internal working arrays                    
                </comment>
                <comment line="227">
                    first stage                    
                </comment>
                <comment line="231">
                    next stages                    
                </comment>
                <comment line="246">
                    estimate the state at the end of the step                    
                </comment>
                <declaration name="y" type="double[]" line="218"/>
                <declaration name="stages" type="int" line="219"/>
                <declaration name="yDotK" type="double[][]" line="220"/>
                <scope line="221"/>
                <declaration name="yTmp" type="double[]" line="224"/>
                <declaration name="h" type="double" line="227"/>
                <scope line="231">
                    <scope line="233">
                        <declaration name="sum" type="double" line="234"/>
                        <scope line="235"/>
                    </scope>
                </scope>
                <scope line="246">
                    <declaration name="sum" type="double" line="247"/>
                    <scope line="248"/>
                </scope>
            </method>
        </class>
    </source>