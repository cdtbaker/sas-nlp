<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive">
        <import package="java.io.Serializable"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <class name="AggregateSummaryStatistics" line="26">
            <implements interface="StatisticalSummary"/>
            <implements interface="Serializable"/>
            <javadoc line="26">
                &lt;p&gt;
                  An aggregator for {@code SummaryStatistics} from several data sets or
                  data set partitions.  In its simplest usage mode, the client creates an
                  instance via the zero-argument constructor, then uses{@link #createContributingStatistics()} to obtain a {@code SummaryStatistics}for each individual data set / partition.  The per-set statistics objects
                  are used as normal, and at any time the aggregate statistics for all the
                  contributors can be obtained from this object.
                  &lt;/p&gt;&lt;p&gt;
                  Clients with specialized requirements can use alternative constructors to
                  control the statistics implementations and initial values used by the
                  contributing and the internal aggregate {@code SummaryStatistics} objects.
                  &lt;/p&gt;&lt;p&gt;
                  A static {@link #aggregate(Collection)} method is also included that computes
                  aggregate statistics directly from a Collection of SummaryStatistics instances.
                  &lt;/p&gt;&lt;p&gt;
                  When {@link #createContributingStatistics()} is used to create SummaryStatistics
                  instances to be aggregated concurrently, the created instances&apos;{@link SummaryStatistics#addValue(double)} methods must synchronize on the aggregating
                  instance maintained by this class.  In multithreaded environments, if the functionality
                  provided by {@link #aggregate(Collection)} is adequate, that method should be used
                  to avoid unnecessary computation and synchronization delays.&lt;/p&gt;                
                <since>
                    2.0                    
                </since>
                <version>
                    $Id: AggregateSummaryStatistics.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="58"/>
            <javadoc line="58">
                Serializable version identifier                
            </javadoc>
            <declaration name="statisticsPrototype" type="SummaryStatistics" line="61"/>
            <javadoc line="61">
                A SummaryStatistics serving as a prototype for creating SummaryStatistics
                  contributing to this aggregate                
            </javadoc>
            <declaration name="statistics" type="SummaryStatistics" line="67"/>
            <javadoc line="67">
                The SummaryStatistics in which aggregate statistics are accumulated.                
            </javadoc>
            <javadoc line="72">
                Initializes a new AggregateSummaryStatistics with default statistics
                  implementations.                
            </javadoc>
            <method name="AggregateSummaryStatistics" type="constructor" line="77">
                <comment line="78">
                    No try-catch or throws NAE because arg is guaranteed non-null                    
                </comment>
            </method>
            <javadoc line="82">
                Initializes a new AggregateSummaryStatistics with the specified statistics
                  object as a prototype for contributing statistics and for the internal
                  aggregate statistics.  This provides for customized statistics implementations
                  to be used by contributing and aggregate statistics.                
                <param>
                    prototypeStatistics a {@code SummaryStatistics} serving as a
                      prototype both for the internal aggregate statistics and for
                      contributing statistics obtained via the{@code createContributingStatistics()} method.  Being a prototype
                      means that other objects are initialized by copying this object's state.
                      If {@code null}, a new, default statistics object is used.  Any statistic
                      values in the prototype are propagated to contributing statistics
                      objects and (once) into these aggregate statistics.                    
                </param>
                <throws>
                    NullArgumentException if prototypeStatistics is null                    
                </throws>
                <see>
                    #createContributingStatistics()                    
                </see>
            </javadoc>
            <method name="AggregateSummaryStatistics" type="constructor" line="99">
                <params>
                    <param name="prototypeStatistics" type="SummaryStatistics"/>
                </params>
            </method>
            <javadoc line="104">
                Initializes a new AggregateSummaryStatistics with the specified statistics
                  object as a prototype for contributing statistics and for the internal
                  aggregate statistics.  This provides for different statistics implementations
                  to be used by contributing and aggregate statistics and for an initial
                  state to be supplied for the aggregate statistics.                
                <param>
                    prototypeStatistics a {@code SummaryStatistics} serving as a
                      prototype both for the internal aggregate statistics and for
                      contributing statistics obtained via the{@code createContributingStatistics()} method.  Being a prototype
                      means that other objects are initialized by copying this object's state.
                      If {@code null}, a new, default statistics object is used.  Any statistic
                      values in the prototype are propagated to contributing statistics
                      objects, but not into these aggregate statistics.                    
                </param>
                <param>
                    initialStatistics a {@code SummaryStatistics} to serve as the
                      internal aggregate statistics object.  If {@code null}, a new, default
                      statistics object is used.                    
                </param>
                <see>
                    #createContributingStatistics()                    
                </see>
            </javadoc>
            <method name="AggregateSummaryStatistics" type="constructor" line="125">
                <params>
                    <param name="prototypeStatistics" type="SummaryStatistics"/>
                    <param name="initialStatistics" type="SummaryStatistics"/>
                </params>
            </method>
            <javadoc line="132">
                {@inheritDoc}.  This version returns the maximum over all the aggregated
                  data.                
                <see>
                    StatisticalSummary#getMax()                    
                </see>
            </javadoc>
            <method name="getMax" type="double" line="138">
                <scope line="139"/>
            </method>
            <javadoc line="144">
                {@inheritDoc}.  This version returns the mean of all the aggregated data.                
                <see>
                    StatisticalSummary#getMean()                    
                </see>
            </javadoc>
            <method name="getMean" type="double" line="149">
                <scope line="150"/>
            </method>
            <javadoc line="155">
                {@inheritDoc}.  This version returns the minimum over all the aggregated
                  data.                
                <see>
                    StatisticalSummary#getMin()                    
                </see>
            </javadoc>
            <method name="getMin" type="double" line="161">
                <scope line="162"/>
            </method>
            <javadoc line="167">
                {@inheritDoc}.  This version returns a count of all the aggregated data.                
                <see>
                    StatisticalSummary#getN()                    
                </see>
            </javadoc>
            <method name="getN" type="long" line="172">
                <scope line="173"/>
            </method>
            <javadoc line="178">
                {@inheritDoc}.  This version returns the standard deviation of all the
                  aggregated data.                
                <see>
                    StatisticalSummary#getStandardDeviation()                    
                </see>
            </javadoc>
            <method name="getStandardDeviation" type="double" line="184">
                <scope line="185"/>
            </method>
            <javadoc line="190">
                {@inheritDoc}.  This version returns a sum of all the aggregated data.                
                <see>
                    StatisticalSummary#getSum()                    
                </see>
            </javadoc>
            <method name="getSum" type="double" line="195">
                <scope line="196"/>
            </method>
            <javadoc line="201">
                {@inheritDoc}.  This version returns the variance of all the aggregated
                  data.                
                <see>
                    StatisticalSummary#getVariance()                    
                </see>
            </javadoc>
            <method name="getVariance" type="double" line="207">
                <scope line="208"/>
            </method>
            <javadoc line="213">
                Returns the sum of the logs of all the aggregated data.                
                <return>
                    the sum of logs                    
                </return>
                <see>
                    SummaryStatistics#getSumOfLogs()                    
                </see>
            </javadoc>
            <method name="getSumOfLogs" type="double" line="219">
                <scope line="220"/>
            </method>
            <javadoc line="225">
                Returns the geometric mean of all the aggregated data.                
                <return>
                    the geometric mean                    
                </return>
                <see>
                    SummaryStatistics#getGeometricMean()                    
                </see>
            </javadoc>
            <method name="getGeometricMean" type="double" line="231">
                <scope line="232"/>
            </method>
            <javadoc line="237">
                Returns the sum of the squares of all the aggregated data.                
                <return>
                    The sum of squares                    
                </return>
                <see>
                    SummaryStatistics#getSumsq()                    
                </see>
            </javadoc>
            <method name="getSumsq" type="double" line="243">
                <scope line="244"/>
            </method>
            <javadoc line="249">
                Returns a statistic related to the Second Central Moment.  Specifically,
                  what is returned is the sum of squared deviations from the sample mean
                  among the all of the aggregated data.                
                <return>
                    second central moment statistic                    
                </return>
                <see>
                    SummaryStatistics#getSecondMoment()                    
                </see>
            </javadoc>
            <method name="getSecondMoment" type="double" line="257">
                <scope line="258"/>
            </method>
            <javadoc line="263">
                Return a {@link StatisticalSummaryValues} instance reporting current
                  aggregate statistics.                
                <return>
                    Current values of aggregate statistics                    
                </return>
            </javadoc>
            <method name="getSummary" type="StatisticalSummary" line="269">
                <scope line="270"/>
            </method>
            <javadoc line="276">
                Creates and returns a {@code SummaryStatistics} whose data will be
                  aggregated with those of this {@code AggregateSummaryStatistics}.                
                <return>
                    a {@code SummaryStatistics} whose data will be aggregated with
                      those of this {@code AggregateSummaryStatistics}.  The initial state
                      is a copy of the configured prototype statistics.                    
                </return>
            </javadoc>
            <method name="createContributingStatistics" type="SummaryStatistics" line="284">
                <comment line="288">
                    No try - catch or advertising NAE because neither argument will ever be null                    
                </comment>
                <declaration name="contributingStatistics" type="SummaryStatistics" line="285"/>
            </method>
            <javadoc line="294">
                Computes aggregate summary statistics. This method can be used to combine statistics
                  computed over partitions or subsamples - i.e., the StatisticalSummaryValues returned
                  should contain the same values that would have been obtained by computing a single
                  StatisticalSummary over the combined dataset.
                  &lt;p&gt;
                  Returns null if the collection is empty or null.
                  &lt;/p&gt;                
                <param>
                    statistics collection of SummaryStatistics to aggregate                    
                </param>
                <return>
                    summary statistics for the combined dataset                    
                </return>
            </javadoc>
            <method name="aggregate" type="StatisticalSummaryValues" line="306">
                <params>
                    <param name="statistics" type="Collection<SummaryStatistics>"/>
                </params>
                <scope line="307"/>
                <declaration name="iterator" type="Iterator&lt;SummaryStatistics&gt;" line="310"/>
                <scope line="311"/>
                <declaration name="current" type="SummaryStatistics" line="314"/>
                <declaration name="n" type="long" line="315"/>
                <declaration name="min" type="double" line="316"/>
                <declaration name="sum" type="double" line="317"/>
                <declaration name="max" type="double" line="318"/>
                <declaration name="m2" type="double" line="319"/>
                <declaration name="mean" type="double" line="320"/>
                <scope line="321">
                    <scope line="323"/>
                    <scope line="326"/>
                    <declaration name="oldN" type="double" line="330"/>
                    <declaration name="curN" type="double" line="331"/>
                    <declaration name="meanDiff" type="double" line="333"/>
                </scope>
                <declaration name="variance" type="double" line="337"/>
                <scope line="338"/>
                <scope line="340"/>
                <scope line="342"/>
            </method>
            <class name="AggregatingSummaryStatistics" line="348">
                <extends class="SummaryStatistics"/>
                <javadoc line="348">
                    A SummaryStatistics that also forwards all values added to it to a second{@code SummaryStatistics} for aggregation.                    
                    <since>
                        2.0                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="356"/>
                <javadoc line="356">
                    The serialization version of this class                    
                </javadoc>
                <declaration name="aggregateStatistics" type="SummaryStatistics" line="361"/>
                <javadoc line="361">
                    An additional SummaryStatistics into which values added to these
                      statistics (and possibly others) are aggregated                    
                </javadoc>
                <javadoc line="367">
                    Initializes a new AggregatingSummaryStatistics with the specified
                      aggregate statistics object                    
                    <param>
                        aggregateStatistics a {@code SummaryStatistics} into which
                          values added to this statistics object should be aggregated                        
                    </param>
                </javadoc>
                <method name="AggregatingSummaryStatistics" type="constructor" line="374">
                    <params>
                        <param name="aggregateStatistics" type="SummaryStatistics"/>
                    </params>
                </method>
                <javadoc line="378">
                    {@inheritDoc}.  This version adds the provided value to the configured
                      aggregate after adding it to these statistics.                    
                    <see>
                        SummaryStatistics#addValue(double)                        
                    </see>
                </javadoc>
                <method name="addValue" type="void" line="385">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                    <scope line="387"/>
                </method>
                <javadoc line="392">
                    Returns true iff &lt;code&gt;object&lt;/code&gt; is a
                      &lt;code&gt;SummaryStatistics&lt;/code&gt; instance and all statistics have the
                      same values as this.                    
                    <param>
                        object the object to test equality against.                        
                    </param>
                    <return>
                        true if object equals this                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="400">
                    <params>
                        <param name="object" type="Object"/>
                    </params>
                    <scope line="401"/>
                    <scope line="404"/>
                    <declaration name="stat" type="AggregatingSummaryStatistics" line="407"/>
                </method>
                <javadoc line="412">
                    Returns hash code based on values of statistics                    
                    <return>
                        hash code                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="417"/>
            </class>
        </class>
    </source>