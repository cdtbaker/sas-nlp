<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.io.Serializable"/>
        <class name="AbstractWell" line="22">
            <extends class="BitsStreamGenerator"/>
            <implements interface="Serializable"/>
            <javadoc line="22">
                This abstract class implements the WELL class of pseudo-random number generator
                  from Fran&amp;ccedil;ois Panneton, Pierre L&apos;Ecuyer and Makoto Matsumoto.
                  &lt;p&gt;This generator is described in a paper by Fran&amp;ccedil;ois Panneton,
                  Pierre L&apos;Ecuyer and Makoto Matsumoto &lt;a
                  href=&quot;http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf&quot;&gt;Improved
                  Long-Period Generators Based on Linear Recurrences Modulo 2&lt;/a&gt; ACM
                  Transactions on Mathematical Software, 32, 1 (2006). The errata for the paper
                  are in &lt;a href=&quot;http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt&quot;&gt;wellrng-errata.txt&lt;/a&gt;.&lt;/p&gt;                
                <see>
                    &lt;a href=&quot;http://www.iro.umontreal.ca/~panneton/WELLRNG.html&quot;&gt;WELL Random number generator&lt;/a&gt;                    
                </see>
                <version>
                    $Id: AbstractWell.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <javadoc line="39">
                Serializable version identifier.                
            </javadoc>
            <declaration name="index" type="int" line="42"/>
            <javadoc line="42">
                Current index in the bytes pool.                
            </javadoc>
            <declaration name="v" type="int[]" line="45"/>
            <javadoc line="45">
                Bytes pool.                
            </javadoc>
            <declaration name="iRm1" type="int[]" line="48"/>
            <javadoc line="48">
                Index indirection table giving for each index its predecessor taking table size into account.                
            </javadoc>
            <declaration name="iRm2" type="int[]" line="51"/>
            <javadoc line="51">
                Index indirection table giving for each index its second predecessor taking table size into account.                
            </javadoc>
            <declaration name="i1" type="int[]" line="54"/>
            <javadoc line="54">
                Index indirection table giving for each index the value index + m1 taking table size into account.                
            </javadoc>
            <declaration name="i2" type="int[]" line="57"/>
            <javadoc line="57">
                Index indirection table giving for each index the value index + m2 taking table size into account.                
            </javadoc>
            <declaration name="i3" type="int[]" line="60"/>
            <javadoc line="60">
                Index indirection table giving for each index the value index + m3 taking table size into account.                
            </javadoc>
            <javadoc line="63">
                Creates a new random number generator.
                  &lt;p&gt;The instance is initialized using the current time plus the
                  system identity hash code of this instance as the seed.&lt;/p&gt;                
                <param>
                    k number of bits in the pool (not necessarily a multiple of 32)                    
                </param>
                <param>
                    m1 first parameter of the algorithm                    
                </param>
                <param>
                    m2 second parameter of the algorithm                    
                </param>
                <param>
                    m3 third parameter of the algorithm                    
                </param>
            </javadoc>
            <method name="AbstractWell" type="constructor" line="71">
                <params>
                    <param name="k" type="int"/>
                    <param name="m1" type="int"/>
                    <param name="m2" type="int"/>
                    <param name="m3" type="int"/>
                </params>
            </method>
            <javadoc line="75">
                Creates a new random number generator using a single int seed.                
                <param>
                    k number of bits in the pool (not necessarily a multiple of 32)                    
                </param>
                <param>
                    m1 first parameter of the algorithm                    
                </param>
                <param>
                    m2 second parameter of the algorithm                    
                </param>
                <param>
                    m3 third parameter of the algorithm                    
                </param>
                <param>
                    seed the initial seed (32 bits integer)                    
                </param>
            </javadoc>
            <method name="AbstractWell" type="constructor" line="82">
                <params>
                    <param name="k" type="int"/>
                    <param name="m1" type="int"/>
                    <param name="m2" type="int"/>
                    <param name="m3" type="int"/>
                    <param name="seed" type="int"/>
                </params>
            </method>
            <javadoc line="86">
                Creates a new random number generator using an int array seed.                
                <param>
                    k number of bits in the pool (not necessarily a multiple of 32)                    
                </param>
                <param>
                    m1 first parameter of the algorithm                    
                </param>
                <param>
                    m2 second parameter of the algorithm                    
                </param>
                <param>
                    m3 third parameter of the algorithm                    
                </param>
                <param>
                    seed the initial seed (32 bits integers array), if null
                      the seed of the generator will be related to the current time                    
                </param>
            </javadoc>
            <method name="AbstractWell" type="constructor" line="94">
                <params>
                    <param name="k" type="int"/>
                    <param name="m1" type="int"/>
                    <param name="m2" type="int"/>
                    <param name="m3" type="int"/>
                    <param name="seed" type="int[]"/>
                </params>
                <comment line="97">
                    the bits pool contains k bits, k = r w - p where r is the number
                     of w bits blocks, w is the block size (always 32 in the original paper)
                     and p is the number of unused bits in the last block                    
                </comment>
                <comment line="105">
                    precompute indirection index tables. These tables are used for optimizing access
                     they allow saving computations like &quot;(j + r - 2) % r&quot; with costly modulo operations                    
                </comment>
                <comment line="120">
                    initialize the pool content                    
                </comment>
                <declaration name="w" type="int" line="99"/>
                <declaration name="r" type="int" line="100"/>
                <scope line="111"/>
            </method>
            <javadoc line="124">
                Creates a new random number generator using a single long seed.                
                <param>
                    k number of bits in the pool (not necessarily a multiple of 32)                    
                </param>
                <param>
                    m1 first parameter of the algorithm                    
                </param>
                <param>
                    m2 second parameter of the algorithm                    
                </param>
                <param>
                    m3 third parameter of the algorithm                    
                </param>
                <param>
                    seed the initial seed (64 bits integer)                    
                </param>
            </javadoc>
            <method name="AbstractWell" type="constructor" line="131">
                <params>
                    <param name="k" type="int"/>
                    <param name="m1" type="int"/>
                    <param name="m2" type="int"/>
                    <param name="m3" type="int"/>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <javadoc line="135">
                Reinitialize the generator as if just built with the given int seed.
                  &lt;p&gt;The state of the generator is exactly the same as a new
                  generator built with the same seed.&lt;/p&gt;                
                <param>
                    seed the initial seed (32 bits integer)                    
                </param>
            </javadoc>
            <method name="setSeed" type="void" line="141">
                <params>
                    <param name="seed" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                Reinitialize the generator as if just built with the given int array seed.
                  &lt;p&gt;The state of the generator is exactly the same as a new
                  generator built with the same seed.&lt;/p&gt;                
                <param>
                    seed the initial seed (32 bits integers array). If null
                      the seed of the generator will be the system time plus the system identity
                      hash code of the instance.                    
                </param>
            </javadoc>
            <method name="setSeed" type="void" line="153">
                <params>
                    <param name="seed" type="int[]"/>
                </params>
                <comment line="170">
                    Clear normal deviate cache                    
                </comment>
                <scope line="154"/>
                <scope line="161">
                    <scope line="162">
                        <declaration name="l" type="long" line="163"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="172">
                Reinitialize the generator as if just built with the given long seed.
                  &lt;p&gt;The state of the generator is exactly the same as a new
                  generator built with the same seed.&lt;/p&gt;                
                <param>
                    seed the initial seed (64 bits integer)                    
                </param>
            </javadoc>
            <method name="setSeed" type="void" line="178">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <method name="next" type="int" line="182"/>
            <javadoc line="182">
                {@inheritDoc}                
            </javadoc>
        </class>
    </source>