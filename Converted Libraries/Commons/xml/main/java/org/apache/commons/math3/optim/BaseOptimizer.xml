<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim">
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.TooManyIterationsException"/>
        <class name="BaseOptimizer" line="5">
            <type_params>
                <type_param name="PAIR"/>
            </type_params>
            <javadoc line="5">
                Base class for implementing optimizers.
                  It contains the boiler-plate code for counting the number of evaluations
                  of the objective function and the number of iterations of the algorithm,
                  and storing the convergence checker.
                  &lt;em&gt;It is not a &quot;user&quot; class.&lt;/em&gt;                
                <param>
                    <PAIR>
                      Type of the point/value pair returned by the optimization
                      algorithm.                    
                </param>
                <version>
                    $Id: BaseOptimizer.java 1458323 2013-03-19 14:51:30Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="evaluations" type="Incrementor" line="18"/>
            <javadoc line="18">
                Evaluations counter.                
            </javadoc>
            <declaration name="iterations" type="Incrementor" line="22"/>
            <javadoc line="22">
                Iterations counter.                
            </javadoc>
            <declaration name="checker" type="ConvergenceChecker&lt;PAIR&gt;" line="26"/>
            <javadoc line="26">
                Convergence checker.                
            </javadoc>
            <javadoc line="30">
                @param checker Convergence checker.                
            </javadoc>
            <method name="BaseOptimizer" type="constructor" line="33">
                <params>
                    <param name="checker" type="ConvergenceChecker<PAIR>"/>
                </params>
            </method>
            <javadoc line="38">
                Gets the maximal number of function evaluations.                
                <return>
                    the maximal number of function evaluations.                    
                </return>
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="42"/>
            <javadoc line="45">
                Gets the number of evaluations of the objective function.
                  The number of evaluations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
                  called yet.                
                <return>
                    the number of evaluations of the objective function.                    
                </return>
            </javadoc>
            <method name="getEvaluations" type="int" line="51"/>
            <javadoc line="54">
                Gets the maximal number of iterations.                
                <return>
                    the maximal number of iterations.                    
                </return>
            </javadoc>
            <method name="getMaxIterations" type="int" line="58"/>
            <javadoc line="61">
                Gets the number of iterations performed by the algorithm.
                  The number iterations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
                  called yet.                
                <return>
                    the number of evaluations of the objective function.                    
                </return>
            </javadoc>
            <method name="getIterations" type="int" line="67"/>
            <javadoc line="70">
                Gets the convergence checker.                
                <return>
                    the object used to check for convergence.                    
                </return>
            </javadoc>
            <method name="getConvergenceChecker" type="ConvergenceChecker<PAIR>" line="74"/>
            <javadoc line="77">
                Stores data and performs the optimization.
                  &lt;br/&gt;
                  The list of parameters is open-ended so that sub-classes can extend it
                  with arguments specific to their concrete implementations.
                  &lt;br/&gt;
                  When the method is called multiple times, instance data is overwritten
                  only when actually present in the list of arguments: when not specified,
                  data set in a previous call is retained (and thus is optional in
                  subsequent calls).
                  &lt;br/&gt;
                  Important note: Subclasses &lt;em&gt;must&lt;/em&gt; override{@link #parseOptimizationData(OptimizationData[])} if they need to register
                  their own options; but then, they &lt;em&gt;must&lt;/em&gt; also call{@code super.parseOptimizationData(optData)} within that method.                
                <param>
                    optData Optimization data.
                      This method will register the following data:
                      <ul>
                      <li>{@link MaxEval}</li>
                      <li>{@link MaxIter}</li>
                      </ul>                    
                </param>
                <return>
                    a point/value pair that satifies the convergence criteria.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
                <throws>
                    TooManyIterationsException if the maximal number of
                      iterations is exceeded.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PAIR" line="102">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <method name="doOptimize" type="PAIR" line="108"/>
            <javadoc line="108">
                Performs the bulk of the optimization algorithm.                
                <return>
                    the point/value pair giving the optimal value of the
                      objective function.                    
                </return>
            </javadoc>
            <javadoc line="114">
                Increment the evaluation count.                
                <throws>
                    TooManyEvaluationsException if the allowed evaluations
                      have been exhausted.                    
                </throws>
            </javadoc>
            <method name="incrementEvaluationCount" type="void" line="119"/>
            <javadoc line="122">
                Increment the iteration count.                
                <throws>
                    TooManyIterationsException if the allowed iterations
                      have been exhausted.                    
                </throws>
            </javadoc>
            <method name="incrementIterationCount" type="void" line="127"/>
            <javadoc line="130">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data.
                      The following data will be looked for:
                      <ul>
                      <li>{@link MaxEval}</li>
                      <li>{@link MaxIter}</li>
                      </ul>                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="140">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <scope line="141">
                    <scope line="142"/>
                    <scope line="146"/>
                </scope>
            </method>
            <class name="MaxEvalCallback" line="152">
                <implements interface="Incrementor.MaxCountExceededCallback"/>
                <javadoc line="152">
                    Defines the action to perform when reaching the maximum number
                      of evaluations.                    
                </javadoc>
                <javadoc line="157">
                    {@inheritDoc}                    
                    <throws>
                        TooManyEvaluationsException.                        
                    </throws>
                </javadoc>
                <method name="trigger" type="void" line="161">
                    <params>
                        <param name="max" type="int"/>
                    </params>
                </method>
            </class>
            <class name="MaxIterCallback" line="165">
                <implements interface="Incrementor.MaxCountExceededCallback"/>
                <javadoc line="165">
                    Defines the action to perform when reaching the maximum number
                      of evaluations.                    
                </javadoc>
                <javadoc line="170">
                    {@inheritDoc}                    
                    <throws>
                        TooManyIterationsException.                        
                    </throws>
                </javadoc>
                <method name="trigger" type="void" line="174">
                    <params>
                        <param name="max" type="int"/>
                    </params>
                </method>
            </class>
        </class>
    </source>