<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim">
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.TooManyIterationsException"/>
        <class name="BaseOptimizer" line="23">
            <type_params>
                <type_param name="PAIR"/>
            </type_params>
            <javadoc line="23">
                Base class for implementing optimizers.
                  It contains the boiler-plate code for counting the number of evaluations
                  of the objective function and the number of iterations of the algorithm,
                  and storing the convergence checker.
                  &lt;em&gt;It is not a &quot;user&quot; class.&lt;/em&gt;                
                <param>
                    &lt;PAIR&gt;
                       Type of the point/value pair returned by the optimization
                      algorithm.                    
                </param>
                <version>
                    $Id: BaseOptimizer.java 1542541 2013-11-16 17:48:36Z tn $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="evaluations" type="Incrementor" line="37"/>
            <javadoc line="37">
                Evaluations counter.                
            </javadoc>
            <declaration name="iterations" type="Incrementor" line="39"/>
            <javadoc line="39">
                Iterations counter.                
            </javadoc>
            <declaration name="checker" type="ConvergenceChecker&amp;lt;PAIR&amp;gt;" line="41"/>
            <javadoc line="41">
                Convergence checker.                
            </javadoc>
            <javadoc line="44">
                @param checker Convergence checker.                
            </javadoc>
            <method name="BaseOptimizer" type="constructor" line="47">
                <params>
                    <param name="checker" type="ConvergenceChecker&lt;PAIR&gt;"/>
                </params>
            </method>
            <javadoc line="51">
                @param checker Convergence checker.                
                <param>
                    maxEval Maximum number of objective function evaluations.                    
                </param>
                <param>
                    maxIter Maximum number of algorithm iterations.                    
                </param>
            </javadoc>
            <method name="BaseOptimizer" type="constructor" line="58">
                <params>
                    <param name="checker" type="ConvergenceChecker&lt;PAIR&gt;"/>
                    <param name="maxEval" type="int"/>
                    <param name="maxIter" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Gets the maximal number of function evaluations.                
                <return>
                    the maximal number of function evaluations.                    
                </return>
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="70"/>
            <javadoc line="74">
                Gets the number of evaluations of the objective function.
                  The number of evaluations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
                  called yet.                
                <return>
                    the number of evaluations of the objective function.                    
                </return>
            </javadoc>
            <method name="getEvaluations" type="int" line="82"/>
            <javadoc line="86">
                Gets the maximal number of iterations.                
                <return>
                    the maximal number of iterations.                    
                </return>
            </javadoc>
            <method name="getMaxIterations" type="int" line="91"/>
            <javadoc line="95">
                Gets the number of iterations performed by the algorithm.
                  The number iterations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
                  called yet.                
                <return>
                    the number of evaluations of the objective function.                    
                </return>
            </javadoc>
            <method name="getIterations" type="int" line="103"/>
            <javadoc line="107">
                Gets the convergence checker.                
                <return>
                    the object used to check for convergence.                    
                </return>
            </javadoc>
            <method name="getConvergenceChecker" type="ConvergenceChecker&lt;PAIR&gt;" line="112"/>
            <javadoc line="116">
                Stores data and performs the optimization.
                  &lt;p&gt;
                  The list of parameters is open-ended so that sub-classes can extend it
                  with arguments specific to their concrete implementations.
                  &lt;p&gt;
                  When the method is called multiple times, instance data is overwritten
                  only when actually present in the list of arguments: when not specified,
                  data set in a previous call is retained (and thus is optional in
                  subsequent calls).
                  &lt;p&gt;
                  Important note: Subclasses &lt;em&gt;must&lt;/em&gt; override{@link #parseOptimizationData(OptimizationData[])} if they need to register
                  their own options; but then, they &lt;em&gt;must&lt;/em&gt; also call{@code super.parseOptimizationData(optData)} within that method.                
                <param>
                    optData Optimization data.
                      This method will register the following data:
                      &lt;ul&gt;
                      &lt;li&gt;{@link MaxEval}&lt;/li&gt;
                      &lt;li&gt;{@link MaxIter}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </param>
                <return>
                    a point/value pair that satisfies the convergence criteria.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
                <throws>
                    TooManyIterationsException if the maximal number of
                      iterations is exceeded.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PAIR" line="146">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="148">
                    Parse options.                    
                </comment>
                <comment line="151">
                    Reset counters.                    
                </comment>
                <comment line="154">
                    Perform optimization.                    
                </comment>
            </method>
            <javadoc line="157">
                Performs the optimization.                
                <return>
                    a point/value pair that satisfies the convergence criteria.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
                <throws>
                    TooManyIterationsException if the maximal number of
                      iterations is exceeded.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PAIR" line="168">
                <comment line="170">
                    Reset counters.                    
                </comment>
                <comment line="173">
                    Perform optimization.                    
                </comment>
            </method>
            <method name="doOptimize" type="PAIR" line="176"/>
            <javadoc line="176">
                Performs the bulk of the optimization algorithm.                
                <return>
                    the point/value pair giving the optimal value of the
                      objective function.                    
                </return>
            </javadoc>
            <javadoc line="184">
                Increment the evaluation count.                
                <throws>
                    TooManyEvaluationsException if the allowed evaluations
                      have been exhausted.                    
                </throws>
            </javadoc>
            <method name="incrementEvaluationCount" type="void" line="191"/>
            <javadoc line="195">
                Increment the iteration count.                
                <throws>
                    TooManyIterationsException if the allowed iterations
                      have been exhausted.                    
                </throws>
            </javadoc>
            <method name="incrementIterationCount" type="void" line="202"/>
            <javadoc line="206">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data.
                      The following data will be looked for:
                      &lt;ul&gt;
                      &lt;li&gt;{@link MaxEval}&lt;/li&gt;
                      &lt;li&gt;{@link MaxIter}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="217">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="219">
                    The existing values (as set by the previous call) are reused if
                     not provided in the argument list.                    
                </comment>
                <scope line="220">
                    <scope line="221"/>
                    <scope line="225"/>
                </scope>
            </method>
            <class name="MaxEvalCallback" line="232">
                <implements interface="Incrementor.MaxCountExceededCallback"/>
                <javadoc line="232">
                    Defines the action to perform when reaching the maximum number
                      of evaluations.                    
                </javadoc>
                <javadoc line="238">
                    {@inheritDoc}                    
                    <throws>
                        TooManyEvaluationsException                        
                    </throws>
                </javadoc>
                <method name="trigger" type="void" line="242">
                    <params>
                        <param name="max" type="int"/>
                    </params>
                </method>
            </class>
            <class name="MaxIterCallback" line="247">
                <implements interface="Incrementor.MaxCountExceededCallback"/>
                <javadoc line="247">
                    Defines the action to perform when reaching the maximum number
                      of evaluations.                    
                </javadoc>
                <javadoc line="253">
                    {@inheritDoc}                    
                    <throws>
                        TooManyIterationsException                        
                    </throws>
                </javadoc>
                <method name="trigger" type="void" line="257">
                    <params>
                        <param name="max" type="int"/>
                    </params>
                </method>
            </class>
        </class>
    </source>