<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathParseException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="FractionFormat" line="9">
            <extends class="AbstractFormat"/>
            <javadoc line="9">
                Formats a Fraction number in proper format or improper format.  The number
                  format for each of the whole number, numerator and, denominator can be
                  configured.                
                <since>
                    1.1                    
                </since>
                <version>
                    $Id: FractionFormat.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="17"/>
            <javadoc line="17">
                Serializable version identifier                
            </javadoc>
            <javadoc line="21">
                Create an improper formatting instance with the default number format
                  for the numerator and denominator.                
            </javadoc>
            <method name="FractionFormat" type="constructor" line="25"/>
            <javadoc line="27">
                Create an improper formatting instance with a custom number format for
                  both the numerator and denominator.                
                <param>
                    format the custom format for both the numerator and denominator.                    
                </param>
            </javadoc>
            <method name="FractionFormat" type="constructor" line="32">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="35">
                Create an improper formatting instance with a custom number format for
                  the numerator and a custom number format for the denominator.                
                <param>
                    numeratorFormat the custom format for the numerator.                    
                </param>
                <param>
                    denominatorFormat the custom format for the denominator.                    
                </param>
            </javadoc>
            <method name="FractionFormat" type="constructor" line="41">
                <params>
                    <param name="numeratorFormat" type="NumberFormat"/>
                    <param name="denominatorFormat" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="44">
                Get the set of locales for which complex formats are available.  This
                  is the same set as the {@link NumberFormat} set.                
                <return>
                    available complex format locales.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="49"/>
            <javadoc line="52">
                This static method calls formatFraction() on a default instance of
                  FractionFormat.                
                <param>
                    f Fraction object to format                    
                </param>
                <return>
                    a formatted fraction in proper form.                    
                </return>
            </javadoc>
            <method name="formatFraction" type="String" line="58">
                <params>
                    <param name="f" type="Fraction"/>
                </params>
            </method>
            <javadoc line="61">
                Returns the default complex format for the current locale.                
                <return>
                    the default complex format.                    
                </return>
            </javadoc>
            <method name="getImproperInstance" type="FractionFormat" line="65"/>
            <javadoc line="68">
                Returns the default complex format for the given locale.                
                <param>
                    locale the specific locale used by the format.                    
                </param>
                <return>
                    the complex format specific to the given locale.                    
                </return>
            </javadoc>
            <method name="getImproperInstance" type="FractionFormat" line="73">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="76">
                Returns the default complex format for the current locale.                
                <return>
                    the default complex format.                    
                </return>
            </javadoc>
            <method name="getProperInstance" type="FractionFormat" line="80"/>
            <javadoc line="83">
                Returns the default complex format for the given locale.                
                <param>
                    locale the specific locale used by the format.                    
                </param>
                <return>
                    the complex format specific to the given locale.                    
                </return>
            </javadoc>
            <method name="getProperInstance" type="FractionFormat" line="88">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="91">
                Create a default number format.  The default number format is based on{@link NumberFormat#getNumberInstance(java.util.Locale)} with the only
                  customizing is the maximum number of fraction digits, which is set to 0.                
                <return>
                    the default number format.                    
                </return>
            </javadoc>
            <method name="getDefaultNumberFormat" type="NumberFormat" line="96"/>
            <javadoc line="99">
                Formats a {@link Fraction} object to produce a string.  The fraction is
                  output in improper format.                
                <param>
                    fraction the object to format.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended                    
                </param>
                <param>
                    pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </param>
                <return>
                    the value passed in as toAppendTo.                    
                </return>
            </javadoc>
            <method name="format" type="StringBuffer" line="108">
                <params>
                    <param name="fraction" type="Fraction"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
            </method>
            <javadoc line="116">
                Formats an object and appends the result to a StringBuffer. &lt;code&gt;obj&lt;/code&gt; must be either a{@link Fraction} object or a {@link Number} object.  Any other type of
                  object will result in an {@link IllegalArgumentException} being thrown.                
                <param>
                    obj the object to format.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended                    
                </param>
                <param>
                    pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </param>
                <return>
                    the value passed in as toAppendTo.                    
                </return>
                <see>
                    java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)                    
                </see>
                <throws>
                    FractionConversionException if the number cannot be converted to a fraction                    
                </throws>
                <throws>
                    MathIllegalArgumentException if <code>obj</code> is not a valid type.                    
                </throws>
            </javadoc>
            <method name="format" type="StringBuffer" line="128">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <declaration name="ret" type="StringBuffer" line="129"/>
                <scope line="130"/>
                <scope line="133"/>
                <scope line="136"/>
            </method>
            <javadoc line="141">
                Parses a string to produce a {@link Fraction} object.                
                <param>
                    source the string to parse                    
                </param>
                <return>
                    the parsed {@link Fraction} object.                    
                </return>
                <exception>
                    MathParseException if the beginning of the specified string
                      cannot be parsed.                    
                </exception>
            </javadoc>
            <method name="parse" type="Fraction" line="148">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="parsePosition" type="ParsePosition" line="149"/>
                <declaration name="result" type="Fraction" line="150"/>
                <scope line="151"/>
            </method>
            <javadoc line="156">
                Parses a string to produce a {@link Fraction} object.  This method
                  expects the string to be formatted as an improper fraction.                
                <param>
                    source the string to parse                    
                </param>
                <param>
                    pos input/output parsing parameter.                    
                </param>
                <return>
                    the parsed {@link Fraction} object.                    
                </return>
            </javadoc>
            <method name="parse" type="Fraction" line="163">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <declaration name="initialIndex" type="int" line="164"/>
                <declaration name="num" type="Number" line="166"/>
                <scope line="167"/>
                <declaration name="startIndex" type="int" line="171"/>
                <declaration name="c" type="char" line="172"/>
                <declaration name="den" type="Number" line="184"/>
                <scope line="185"/>
            </method>
        </class>
    </source>