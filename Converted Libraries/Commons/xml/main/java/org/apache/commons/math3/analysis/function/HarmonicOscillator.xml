<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.function">
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="HarmonicOscillator" line="11">
            <implements interface="UnivariateDifferentiableFunction"/>
            <implements interface="DifferentiableUnivariateFunction"/>
            <javadoc line="11">
                &lt;a href=&quot;http://en.wikipedia.org/wiki/Harmonic_oscillator&quot;&gt;
                  simple harmonic oscillator&lt;/a&gt; function.                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: HarmonicOscillator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
            </javadoc>
            <declaration name="amplitude" type="double" line="18"/>
            <javadoc line="18">
                Amplitude.                
            </javadoc>
            <declaration name="omega" type="double" line="22"/>
            <javadoc line="22">
                Angular frequency.                
            </javadoc>
            <declaration name="phase" type="double" line="26"/>
            <javadoc line="26">
                Phase.                
            </javadoc>
            <javadoc line="30">
                Harmonic oscillator function.                
                <param>
                    amplitude Amplitude.                    
                </param>
                <param>
                    omega Angular frequency.                    
                </param>
                <param>
                    phase Phase.                    
                </param>
            </javadoc>
            <method name="HarmonicOscillator" type="constructor" line="36">
                <params>
                    <param name="amplitude" type="double"/>
                    <param name="omega" type="double"/>
                    <param name="phase" type="double"/>
                </params>
            </method>
            <javadoc line="41">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="44">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="47">
                {@inheritDoc}                
                <deprecated>
                    as of 3.1, replaced by {@link #value(DerivativeStructure)}                    
                </deprecated>
            </javadoc>
            <method name="derivative" type="UnivariateFunction" line="51"/>
            <class name="Parametric" line="54">
                <implements interface="ParametricUnivariateFunction"/>
                <javadoc line="54">
                    Parametric function where the input array contains the parameters of
                      the harmonic oscillator function, ordered as follows:
                      &lt;ul&gt;
                      &lt;li&gt;Amplitude&lt;/li&gt;
                      &lt;li&gt;Angular frequency&lt;/li&gt;
                      &lt;li&gt;Phase&lt;/li&gt;
                      &lt;/ul&gt;                    
                </javadoc>
                <javadoc line="64">
                    Computes the value of the harmonic oscillator at {@code x}.                    
                    <param>
                        x Value for which the function must be computed.                        
                    </param>
                    <param>
                        param Values of norm, mean and standard deviation.                        
                    </param>
                    <return>
                        the value of the function.                        
                    </return>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 3.                        
                    </throws>
                </javadoc>
                <method name="value" type="double" line="73">
                    <params>
                        <param name="x" type="double"/>
                        <param name="param" type="double"/>
                    </params>
                </method>
                <javadoc line="77">
                    Computes the value of the gradient at {@code x}.
                      The components of the gradient vector are the partial
                      derivatives of the function with respect to each of the
                      &lt;em&gt;parameters&lt;/em&gt; (amplitude, angular frequency and phase).                    
                    <param>
                        x Value at which the gradient must be computed.                        
                    </param>
                    <param>
                        param Values of amplitude, angular frequency and phase.                        
                    </param>
                    <return>
                        the gradient vector at {@code x}.                        
                    </return>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 3.                        
                    </throws>
                </javadoc>
                <method name="gradient" type="double[]" line="89">
                    <params>
                        <param name="x" type="double"/>
                        <param name="param" type="double"/>
                    </params>
                    <declaration name="amplitude" type="double" line="91"/>
                    <declaration name="omega" type="double" line="92"/>
                    <declaration name="phase" type="double" line="93"/>
                    <declaration name="xTimesOmegaPlusPhase" type="double" line="94"/>
                    <declaration name="a" type="double" line="95"/>
                    <declaration name="p" type="double" line="96"/>
                    <declaration name="w" type="double" line="97"/>
                </method>
                <javadoc line="100">
                    Validates parameters to ensure they are appropriate for the evaluation of
                      the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.                    
                    <param>
                        param Values of norm, mean and standard deviation.                        
                    </param>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 3.                        
                    </throws>
                </javadoc>
                <method name="validateParameters" type="void" line="108">
                    <params>
                        <param name="param" type="double[]"/>
                    </params>
                    <scope line="109"/>
                    <scope line="112"/>
                </method>
            </class>
            <javadoc line="117">
                @param xTimesOmegaPlusPhase {@code omega  x + phase}.                
                <param>
                    amplitude Amplitude.                    
                </param>
                <return>
                    the value of the harmonic oscillator function at {@code x}.                    
                </return>
            </javadoc>
            <method name="value" type="double" line="122">
                <params>
                    <param name="xTimesOmegaPlusPhase" type="double"/>
                    <param name="amplitude" type="double"/>
                </params>
            </method>
            <javadoc line="125">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="129">
                <params>
                    <param name="t" type="DerivativeStructure"/>
                </params>
                <declaration name="x" type="double" line="130"/>
                <declaration name="f" type="double[]" line="131"/>
                <declaration name="alpha" type="double" line="132"/>
                <scope line="134">
                    <declaration name="mo2" type="double" line="136"/>
                    <scope line="137"/>
                </scope>
            </method>
        </class>
    </source>