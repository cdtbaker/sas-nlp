<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.differentiation">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.RealFieldElement"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="DerivativeStructure" line="12">
            <implements interface="RealFieldElement">
                <type_params>
                    <type_param name="DerivativeStructure"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="12">
                Class representing both the value and the differentials of a function.
                  &lt;p&gt;This class is the workhorse of the differentiation package.&lt;/p&gt;
                  &lt;p&gt;This class is an implementation of the extension to Rall&apos;s
                  numbers described in Dan Kalman&apos;s paper &lt;a
                  href=&quot;http://www.math.american.edu/People/kalman/pdffiles/mmgautodiff.pdf&quot;&gt;Doubly
                  Recursive Multivariate Automatic Differentiation&lt;/a&gt;, Mathematics Magazine, vol. 75,
                  no. 3, June 2002.&lt;/p&gt;. Rall&apos;s numbers are an extension to the real numbers used
                  throughout mathematical expressions; they hold the derivative together with the
                  value of a function. Dan Kalman&apos;s derivative structures hold all partial derivatives
                  up to any specified order, with respect to any number of free parameters. Rall&apos;s
                  numbers therefore can be seen as derivative structures for order one derivative and
                  one free parameter, and real numbers can be seen as derivative structures with zero
                  order derivative and no free parameters.&lt;/p&gt;
                  &lt;p&gt;{@link DerivativeStructure} instances can be used directly thanks to
                  the arithmetic operators to the mathematical functions provided as static
                  methods by this class (+, -, , /, %, sin, cos ...).&lt;/p&gt;
                  &lt;p&gt;Implementing complex expressions by hand using these classes is
                  a tedious and error-prone task but has the advantage of having no limitation
                  on the derivation order despite no requiring users to compute the derivatives by
                  themselves. Implementing complex expression can also be done by developing computation
                  code using standard primitive double values and to use {@link UnivariateFunctionDifferentiator differentiators} to create the {@link DerivativeStructure}-based instances. This method is simpler but may be limited in
                  the accuracy and derivation orders and may be computationally intensive (this is
                  typically the case for {@link FiniteDifferencesDifferentiator finite differences
                  differentiator}.&lt;/p&gt;
                  &lt;p&gt;Instances of this class are guaranteed to be immutable.&lt;/p&gt;                
                <see>
                    DSCompiler                    
                </see>
                <version>
                    $Id: DerivativeStructure.java 1462423 2013-03-29 07:25:18Z luc $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="43">
                Serializable UID.                
            </javadoc>
            <declaration name="compiler" type="DSCompiler" line="47"/>
            <javadoc line="47">
                Compiler for the current dimensions.                
            </javadoc>
            <declaration name="data" type="double[]" line="51"/>
            <javadoc line="51">
                Combined array holding all values.                
            </javadoc>
            <javadoc line="55">
                Build an instance with all values and derivatives set to 0.                
                <param>
                    compiler compiler to use for computation                    
                </param>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="59">
                <params>
                    <param name="compiler" type="DSCompiler"/>
                </params>
            </method>
            <javadoc line="63">
                Build an instance with all values and derivatives set to 0.                
                <param>
                    parameters number of free parameters                    
                </param>
                <param>
                    order derivation order                    
                </param>
                <throws>
                    NumberIsTooLargeException if order is too large                    
                </throws>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="69">
                <params>
                    <param name="parameters" type="int"/>
                    <param name="order" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Build an instance representing a constant value.                
                <param>
                    parameters number of free parameters                    
                </param>
                <param>
                    order derivation order                    
                </param>
                <param>
                    value value of the constant                    
                </param>
                <throws>
                    NumberIsTooLargeException if order is too large                    
                </throws>
                <see>
                    #DerivativeStructure(int,int,int,double)                    
                </see>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="80">
                <params>
                    <param name="parameters" type="int"/>
                    <param name="order" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="84">
                Build an instance representing a variable.
                  &lt;p&gt;Instances built using this constructor are considered
                  to be the free variables with respect to which differentials
                  are computed. As such, their differential with respect to
                  themselves is +1.&lt;/p&gt;                
                <param>
                    parameters number of free parameters                    
                </param>
                <param>
                    order derivation order                    
                </param>
                <param>
                    index index of the variable (from 0 to {@code parameters - 1})                    
                </param>
                <param>
                    value value of the variable                    
                </param>
                <exception>
                    NumberIsTooLargeException if {@code index >= parameters}.                    
                </exception>
                <see>
                    #DerivativeStructure(int,int,double)                    
                </see>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="97">
                <params>
                    <param name="parameters" type="int"/>
                    <param name="order" type="int"/>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <scope line="99"/>
                <scope line="102"/>
            </method>
            <javadoc line="106">
                Linear combination constructor.
                  The derivative structure built will be a1  ds1 + a2  ds2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    ds1 first base (unscaled) derivative structure                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    ds2 second base (unscaled) derivative structure                    
                </param>
                <exception>
                    DimensionMismatchException if number of free parameters or orders are inconsistent                    
                </exception>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="115">
                <params>
                    <param name="a1" type="double"/>
                    <param name="ds1" type="DerivativeStructure"/>
                    <param name="a2" type="double"/>
                    <param name="ds2" type="DerivativeStructure"/>
                </params>
            </method>
            <javadoc line="120">
                Linear combination constructor.
                  The derivative structure built will be a1  ds1 + a2  ds2 + a3  ds3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    ds1 first base (unscaled) derivative structure                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    ds2 second base (unscaled) derivative structure                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    ds3 third base (unscaled) derivative structure                    
                </param>
                <exception>
                    DimensionMismatchException if number of free parameters or orders are inconsistent                    
                </exception>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="131">
                <params>
                    <param name="a1" type="double"/>
                    <param name="ds1" type="DerivativeStructure"/>
                    <param name="a2" type="double"/>
                    <param name="ds2" type="DerivativeStructure"/>
                    <param name="a3" type="double"/>
                    <param name="ds3" type="DerivativeStructure"/>
                </params>
            </method>
            <javadoc line="137">
                Linear combination constructor.
                  The derivative structure built will be a1  ds1 + a2  ds2 + a3  ds3 + a4  ds4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    ds1 first base (unscaled) derivative structure                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    ds2 second base (unscaled) derivative structure                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    ds3 third base (unscaled) derivative structure                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    ds4 fourth base (unscaled) derivative structure                    
                </param>
                <exception>
                    DimensionMismatchException if number of free parameters or orders are inconsistent                    
                </exception>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="150">
                <params>
                    <param name="a1" type="double"/>
                    <param name="ds1" type="DerivativeStructure"/>
                    <param name="a2" type="double"/>
                    <param name="ds2" type="DerivativeStructure"/>
                    <param name="a3" type="double"/>
                    <param name="ds3" type="DerivativeStructure"/>
                    <param name="a4" type="double"/>
                    <param name="ds4" type="DerivativeStructure"/>
                </params>
            </method>
            <javadoc line="157">
                Build an instance from all its derivatives.                
                <param>
                    parameters number of free parameters                    
                </param>
                <param>
                    order derivation order                    
                </param>
                <param>
                    derivatives derivatives sorted according to{@link DSCompiler#getPartialDerivativeIndex(int)}                    
                </param>
                <exception>
                    DimensionMismatchException if derivatives array does not match the{@link DSCompiler#getSize() size} expected by the compiler                    
                </exception>
                <throws>
                    NumberIsTooLargeException if order is too large                    
                </throws>
                <see>
                    #getAllDerivatives()                    
                </see>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="166">
                <params>
                    <param name="parameters" type="int"/>
                    <param name="order" type="int"/>
                    <param name="derivatives" type="double"/>
                </params>
                <scope line="168"/>
            </method>
            <javadoc line="173">
                Copy constructor.                
                <param>
                    ds instance to copy                    
                </param>
            </javadoc>
            <method name="DerivativeStructure" type="constructor" line="177">
                <params>
                    <param name="ds" type="DerivativeStructure"/>
                </params>
            </method>
            <javadoc line="181">
                Get the number of free parameters.                
                <return>
                    number of free parameters                    
                </return>
            </javadoc>
            <method name="getFreeParameters" type="int" line="185"/>
            <javadoc line="188">
                Get the derivation order.                
                <return>
                    derivation order                    
                </return>
            </javadoc>
            <method name="getOrder" type="int" line="192"/>
            <javadoc line="195">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="getReal" type="double" line="199"/>
            <javadoc line="202">
                Get the value part of the derivative structure.                
                <return>
                    value part of the derivative structure                    
                </return>
                <see>
                    #getPartialDerivative(int)                    
                </see>
            </javadoc>
            <method name="getValue" type="double" line="207"/>
            <javadoc line="210">
                Get a partial derivative.                
                <param>
                    orders derivation orders with respect to each variable (if all orders are 0,
                      the value is returned)                    
                </param>
                <return>
                    partial derivative                    
                </return>
                <see>
                    #getValue()                    
                </see>
                <exception>
                    DimensionMismatchException if the numbers of variables does not
                      match the instance                    
                </exception>
                <exception>
                    NumberIsTooLargeException if sum of derivation orders is larger
                      than the instance limits                    
                </exception>
            </javadoc>
            <method name="getPartialDerivative" type="double" line="221">
                <params>
                    <param name="orders" type="int"/>
                </params>
            </method>
            <javadoc line="224">
                Get all partial derivatives.                
                <return>
                    a fresh copy of partial derivatives, in an array sorted according to{@link DSCompiler#getPartialDerivativeIndex(int)}                    
                </return>
            </javadoc>
            <method name="getAllDerivatives" type="double[]" line="228"/>
            <javadoc line="231">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="add" type="DerivativeStructure" line="235">
                <params>
                    <param name="a" type="double"/>
                </params>
                <declaration name="ds" type="DerivativeStructure" line="236"/>
            </method>
            <javadoc line="240">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
            </javadoc>
            <method name="add" type="DerivativeStructure" line="245">
                <params>
                    <param name="a" type="DerivativeStructure"/>
                </params>
                <declaration name="ds" type="DerivativeStructure" line="247"/>
            </method>
            <javadoc line="251">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="subtract" type="DerivativeStructure" line="255">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="258">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
            </javadoc>
            <method name="subtract" type="DerivativeStructure" line="263">
                <params>
                    <param name="a" type="DerivativeStructure"/>
                </params>
                <declaration name="ds" type="DerivativeStructure" line="265"/>
            </method>
            <javadoc line="269">
                {@inheritDoc}                
            </javadoc>
            <method name="multiply" type="DerivativeStructure" line="272">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="275">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="multiply" type="DerivativeStructure" line="279">
                <params>
                    <param name="a" type="double"/>
                </params>
                <declaration name="ds" type="DerivativeStructure" line="280"/>
                <scope line="281"/>
            </method>
            <javadoc line="286">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
            </javadoc>
            <method name="multiply" type="DerivativeStructure" line="291">
                <params>
                    <param name="a" type="DerivativeStructure"/>
                </params>
                <declaration name="result" type="DerivativeStructure" line="293"/>
            </method>
            <javadoc line="297">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="divide" type="DerivativeStructure" line="301">
                <params>
                    <param name="a" type="double"/>
                </params>
                <declaration name="ds" type="DerivativeStructure" line="302"/>
                <scope line="303"/>
            </method>
            <javadoc line="308">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
            </javadoc>
            <method name="divide" type="DerivativeStructure" line="313">
                <params>
                    <param name="a" type="DerivativeStructure"/>
                </params>
                <declaration name="result" type="DerivativeStructure" line="315"/>
            </method>
            <javadoc line="319">
                {@inheritDoc}                
            </javadoc>
            <method name="remainder" type="DerivativeStructure" line="322">
                <params>
                    <param name="a" type="double"/>
                </params>
                <declaration name="ds" type="DerivativeStructure" line="323"/>
            </method>
            <javadoc line="327">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="remainder" type="DerivativeStructure" line="333">
                <params>
                    <param name="a" type="DerivativeStructure"/>
                </params>
                <declaration name="result" type="DerivativeStructure" line="335"/>
            </method>
            <javadoc line="339">
                {@inheritDoc}                
            </javadoc>
            <method name="negate" type="DerivativeStructure" line="342">
                <declaration name="ds" type="DerivativeStructure" line="343"/>
                <scope line="344"/>
            </method>
            <javadoc line="349">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="abs" type="DerivativeStructure" line="353">
                <scope line="354"/>
                <scope line="357"/>
            </method>
            <javadoc line="361">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="ceil" type="DerivativeStructure" line="365"/>
            <javadoc line="368">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="floor" type="DerivativeStructure" line="372"/>
            <javadoc line="375">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="rint" type="DerivativeStructure" line="379"/>
            <javadoc line="382">
                {@inheritDoc}                
            </javadoc>
            <method name="round" type="long" line="385"/>
            <javadoc line="388">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="signum" type="DerivativeStructure" line="392"/>
            <javadoc line="395">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="copySign" type="DerivativeStructure" line="399">
                <params>
                    <param name="sign" type="DerivativeStructure"/>
                </params>
                <declaration name="m" type="long" line="400"/>
                <declaration name="s" type="long" line="401"/>
                <scope line="402"/>
            </method>
            <javadoc line="407">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="copySign" type="DerivativeStructure" line="411">
                <params>
                    <param name="sign" type="double"/>
                </params>
                <declaration name="m" type="long" line="412"/>
                <declaration name="s" type="long" line="413"/>
                <scope line="414"/>
            </method>
            <javadoc line="419">
                Return the exponent of the instance value, removing the bias.
                  &lt;p&gt;
                  For double numbers of the form 2&lt;sup&gt;x&lt;/sup&gt;, the unbiased
                  exponent is exactly x.
                  &lt;/p&gt;                
                <return>
                    exponent for instance in IEEE754 representation, without bias                    
                </return>
            </javadoc>
            <method name="getExponent" type="int" line="427"/>
            <javadoc line="430">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="scalb" type="DerivativeStructure" line="434">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="ds" type="DerivativeStructure" line="435"/>
                <scope line="436"/>
            </method>
            <javadoc line="441">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="hypot" type="DerivativeStructure" line="447">
                <params>
                    <param name="y" type="DerivativeStructure"/>
                </params>
                <scope line="449"/>
                <scope line="452"/>
                <scope line="455">
                    <declaration name="expX" type="int" line="456"/>
                    <declaration name="expY" type="int" line="457"/>
                    <scope line="458"/>
                    <scope line="461"/>
                    <scope line="464">
                        <declaration name="middleExp" type="int" line="465"/>
                        <declaration name="scaledX" type="DerivativeStructure" line="466"/>
                        <declaration name="scaledY" type="DerivativeStructure" line="467"/>
                        <declaration name="scaledH" type="DerivativeStructure" line="468"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="473">
                Returns the hypotenuse of a triangle with sides {@code x} and {@code y}- sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;br/&gt;
                  avoiding intermediate overflow or underflow.
                  &lt;ul&gt;
                  &lt;li&gt; If either argument is infinite, then the result is positive infinity.&lt;/li&gt;
                  &lt;li&gt; else, if either argument is NaN then the result is NaN.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    x a value                    
                </param>
                <param>
                    y a value                    
                </param>
                <return>
                    sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)                    
                </return>
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="hypot" type="DerivativeStructure" line="487">
                <params>
                    <param name="x" type="DerivativeStructure"/>
                    <param name="y" type="DerivativeStructure"/>
                </params>
            </method>
            <javadoc line="490">
                Compute composition of the instance by a univariate function.                
                <param>
                    f array of value and derivatives of the function at
                      the current point (i.e. [f({@link #getValue()}),
                      f'({@link #getValue()}), f''({@link #getValue()})...]).                    
                </param>
                <return>
                    f(this)                    
                </return>
                <exception>
                    DimensionMismatchException if the number of derivatives
                      in the array is not equal to {@link #getOrder() order} + 1                    
                </exception>
            </javadoc>
            <method name="compose" type="DerivativeStructure" line="499">
                <params>
                    <param name="f" type="double"/>
                </params>
                <scope line="500"/>
                <declaration name="result" type="DerivativeStructure" line="503"/>
            </method>
            <javadoc line="507">
                {@inheritDoc}                
            </javadoc>
            <method name="reciprocal" type="DerivativeStructure" line="510">
                <declaration name="result" type="DerivativeStructure" line="511"/>
            </method>
            <javadoc line="515">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="sqrt" type="DerivativeStructure" line="519"/>
            <javadoc line="522">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="cbrt" type="DerivativeStructure" line="526"/>
            <javadoc line="529">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="rootN" type="DerivativeStructure" line="533">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="result" type="DerivativeStructure" line="534"/>
            </method>
            <javadoc line="538">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="Field<DerivativeStructure>" line="541">
                <anonymous_class line="542">
                    <javadoc line="543">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getZero" type="DerivativeStructure" line="546"/>
                    <javadoc line="549">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getOne" type="DerivativeStructure" line="552"/>
                    <javadoc line="555">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getRuntimeClass" type="Class<? extends FieldElement<DerivativeStructure>>" line="558"/>
                </anonymous_class>
            </method>
            <javadoc line="564">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="pow" type="DerivativeStructure" line="568">
                <params>
                    <param name="p" type="double"/>
                </params>
                <declaration name="result" type="DerivativeStructure" line="569"/>
            </method>
            <javadoc line="573">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="pow" type="DerivativeStructure" line="577">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="result" type="DerivativeStructure" line="578"/>
            </method>
            <javadoc line="582">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="pow" type="DerivativeStructure" line="588">
                <params>
                    <param name="e" type="DerivativeStructure"/>
                </params>
                <declaration name="result" type="DerivativeStructure" line="590"/>
            </method>
            <javadoc line="594">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="exp" type="DerivativeStructure" line="598">
                <declaration name="result" type="DerivativeStructure" line="599"/>
            </method>
            <javadoc line="603">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="expm1" type="DerivativeStructure" line="607">
                <declaration name="result" type="DerivativeStructure" line="608"/>
            </method>
            <javadoc line="612">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="log" type="DerivativeStructure" line="616">
                <declaration name="result" type="DerivativeStructure" line="617"/>
            </method>
            <javadoc line="621">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="log1p" type="DerivativeStructure" line="625">
                <declaration name="result" type="DerivativeStructure" line="626"/>
            </method>
            <javadoc line="630">
                Base 10 logarithm.                
                <return>
                    base 10 logarithm of the instance                    
                </return>
            </javadoc>
            <method name="log10" type="DerivativeStructure" line="634">
                <declaration name="result" type="DerivativeStructure" line="635"/>
            </method>
            <javadoc line="639">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="cos" type="DerivativeStructure" line="643">
                <declaration name="result" type="DerivativeStructure" line="644"/>
            </method>
            <javadoc line="648">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="sin" type="DerivativeStructure" line="652">
                <declaration name="result" type="DerivativeStructure" line="653"/>
            </method>
            <javadoc line="657">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="tan" type="DerivativeStructure" line="661">
                <declaration name="result" type="DerivativeStructure" line="662"/>
            </method>
            <javadoc line="666">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="acos" type="DerivativeStructure" line="670">
                <declaration name="result" type="DerivativeStructure" line="671"/>
            </method>
            <javadoc line="675">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="asin" type="DerivativeStructure" line="679">
                <declaration name="result" type="DerivativeStructure" line="680"/>
            </method>
            <javadoc line="684">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="atan" type="DerivativeStructure" line="688">
                <declaration name="result" type="DerivativeStructure" line="689"/>
            </method>
            <javadoc line="693">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="atan2" type="DerivativeStructure" line="697">
                <params>
                    <param name="x" type="DerivativeStructure"/>
                </params>
                <declaration name="result" type="DerivativeStructure" line="699"/>
            </method>
            <javadoc line="703">
                Two arguments arc tangent operation.                
                <param>
                    y first argument of the arc tangent                    
                </param>
                <param>
                    x second argument of the arc tangent                    
                </param>
                <return>
                    atan2(y, x)                    
                </return>
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="atan2" type="DerivativeStructure" line="712">
                <params>
                    <param name="y" type="DerivativeStructure"/>
                    <param name="x" type="DerivativeStructure"/>
                </params>
            </method>
            <javadoc line="715">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="cosh" type="DerivativeStructure" line="719">
                <declaration name="result" type="DerivativeStructure" line="720"/>
            </method>
            <javadoc line="724">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="sinh" type="DerivativeStructure" line="728">
                <declaration name="result" type="DerivativeStructure" line="729"/>
            </method>
            <javadoc line="733">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="tanh" type="DerivativeStructure" line="737">
                <declaration name="result" type="DerivativeStructure" line="738"/>
            </method>
            <javadoc line="742">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="acosh" type="DerivativeStructure" line="746">
                <declaration name="result" type="DerivativeStructure" line="747"/>
            </method>
            <javadoc line="751">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="asinh" type="DerivativeStructure" line="755">
                <declaration name="result" type="DerivativeStructure" line="756"/>
            </method>
            <javadoc line="760">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="atanh" type="DerivativeStructure" line="764">
                <declaration name="result" type="DerivativeStructure" line="765"/>
            </method>
            <javadoc line="769">
                Convert radians to degrees, with error of less than 0.5 ULP                
                <return>
                    instance converted into degrees                    
                </return>
            </javadoc>
            <method name="toDegrees" type="DerivativeStructure" line="773">
                <declaration name="ds" type="DerivativeStructure" line="774"/>
                <scope line="775"/>
            </method>
            <javadoc line="780">
                Convert degrees to radians, with error of less than 0.5 ULP                
                <return>
                    instance converted into radians                    
                </return>
            </javadoc>
            <method name="toRadians" type="DerivativeStructure" line="784">
                <declaration name="ds" type="DerivativeStructure" line="785"/>
                <scope line="786"/>
            </method>
            <javadoc line="791">
                Evaluate Taylor expansion a derivative structure.                
                <param>
                    delta parameters offsets (&Delta;x, &Delta;y, ...)                    
                </param>
                <return>
                    value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...                    
                </return>
                <throws>
                    MathArithmeticException if factorials becomes too large                    
                </throws>
            </javadoc>
            <method name="taylor" type="double" line="797">
                <params>
                    <param name="delta" type="double"/>
                </params>
            </method>
            <javadoc line="800">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="806">
                <params>
                    <param name="a" type="DerivativeStructure[]"/>
                    <param name="b" type="DerivativeStructure[]"/>
                </params>
                <declaration name="aDouble" type="double[]" line="807"/>
                <scope line="808"/>
                <declaration name="bDouble" type="double[]" line="811"/>
                <scope line="812"/>
                <declaration name="accurateValue" type="double" line="815"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="816"/>
                <scope line="817"/>
                <declaration name="all" type="double[]" line="820"/>
            </method>
            <javadoc line="824">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="830">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="b" type="DerivativeStructure[]"/>
                </params>
                <declaration name="bDouble" type="double[]" line="831"/>
                <scope line="832"/>
                <declaration name="accurateValue" type="double" line="835"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="836"/>
                <scope line="837"/>
                <declaration name="all" type="double[]" line="840"/>
            </method>
            <javadoc line="844">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="850">
                <params>
                    <param name="a1" type="DerivativeStructure"/>
                    <param name="b1" type="DerivativeStructure"/>
                    <param name="a2" type="DerivativeStructure"/>
                    <param name="b2" type="DerivativeStructure"/>
                </params>
                <declaration name="accurateValue" type="double" line="851"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="852"/>
                <declaration name="all" type="double[]" line="853"/>
            </method>
            <javadoc line="857">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="863">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="DerivativeStructure"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="DerivativeStructure"/>
                </params>
                <declaration name="accurateValue" type="double" line="864"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="865"/>
                <declaration name="all" type="double[]" line="866"/>
            </method>
            <javadoc line="870">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="876">
                <params>
                    <param name="a1" type="DerivativeStructure"/>
                    <param name="b1" type="DerivativeStructure"/>
                    <param name="a2" type="DerivativeStructure"/>
                    <param name="b2" type="DerivativeStructure"/>
                    <param name="a3" type="DerivativeStructure"/>
                    <param name="b3" type="DerivativeStructure"/>
                </params>
                <declaration name="accurateValue" type="double" line="877"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="878"/>
                <declaration name="all" type="double[]" line="879"/>
            </method>
            <javadoc line="883">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="889">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="DerivativeStructure"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="DerivativeStructure"/>
                    <param name="a3" type="double"/>
                    <param name="b3" type="DerivativeStructure"/>
                </params>
                <declaration name="accurateValue" type="double" line="890"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="891"/>
                <declaration name="all" type="double[]" line="892"/>
            </method>
            <javadoc line="896">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="902">
                <params>
                    <param name="a1" type="DerivativeStructure"/>
                    <param name="b1" type="DerivativeStructure"/>
                    <param name="a2" type="DerivativeStructure"/>
                    <param name="b2" type="DerivativeStructure"/>
                    <param name="a3" type="DerivativeStructure"/>
                    <param name="b3" type="DerivativeStructure"/>
                    <param name="a4" type="DerivativeStructure"/>
                    <param name="b4" type="DerivativeStructure"/>
                </params>
                <declaration name="accurateValue" type="double" line="903"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="904"/>
                <declaration name="all" type="double[]" line="905"/>
            </method>
            <javadoc line="909">
                {@inheritDoc}                
                <exception>
                    DimensionMismatchException if number of free parameters
                      or orders do not match                    
                </exception>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="linearCombination" type="DerivativeStructure" line="915">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="DerivativeStructure"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="DerivativeStructure"/>
                    <param name="a3" type="double"/>
                    <param name="b3" type="DerivativeStructure"/>
                    <param name="a4" type="double"/>
                    <param name="b4" type="DerivativeStructure"/>
                </params>
                <declaration name="accurateValue" type="double" line="916"/>
                <declaration name="simpleValue" type="DerivativeStructure" line="917"/>
                <declaration name="all" type="double[]" line="918"/>
            </method>
            <javadoc line="922">
                Test for the equality of two derivative structures.
                  &lt;p&gt;
                  Derivative structures are considered equal if they have the same number
                  of free parameters, the same derivation order, and the same derivatives.
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two derivative structures are equal                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="932">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="933"/>
                <scope line="936">
                    <declaration name="rhs" type="DerivativeStructure" line="937"/>
                </scope>
            </method>
            <javadoc line="942">
                Get a hashCode for the derivative structure.                
                <return>
                    a hash code value for this object                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="947"/>
            <javadoc line="950">
                Replace the instance with a data transfer object for serialization.                
                <return>
                    data transfer object that will be serialized                    
                </return>
            </javadoc>
            <method name="writeReplace" type="Object" line="954"/>
            <class name="DataTransferObject" line="957">
                <implements interface="Serializable"/>
                <javadoc line="957">
                    Internal class used only for serialization.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="961"/>
                <javadoc line="961">
                    Serializable UID.                    
                </javadoc>
                <declaration name="variables" type="int" line="965"/>
                <javadoc line="965">
                    Number of variables.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="order" type="int" line="970"/>
                <javadoc line="970">
                    Derivation order.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="data" type="double[]" line="975"/>
                <javadoc line="975">
                    Partial derivatives.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <javadoc line="980">
                    Simple constructor.                    
                    <param>
                        variables number of variables                        
                    </param>
                    <param>
                        order derivation order                        
                    </param>
                    <param>
                        data partial derivatives                        
                    </param>
                </javadoc>
                <method name="DataTransferObject" type="constructor" line="986">
                    <params>
                        <param name="variables" type="int"/>
                        <param name="order" type="int"/>
                        <param name="data" type="double[]"/>
                    </params>
                </method>
                <javadoc line="991">
                    Replace the deserialized data transfer object with a {@link DerivativeStructure}.                    
                    <return>
                        replacement {@link DerivativeStructure}                        
                    </return>
                </javadoc>
                <method name="readResolve" type="Object" line="995"/>
            </class>
        </class>
    </source>