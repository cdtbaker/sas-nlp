<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.util.Random"/>
        <class name="RandomAdaptor" line="3">
            <extends class="Random"/>
            <implements interface="RandomGenerator"/>
            <javadoc line="3">
                Extension of &lt;code&gt;java.util.Random&lt;/code&gt; wrapping a{@link RandomGenerator}.                
                <since>
                    1.1                    
                </since>
                <version>
                    $Id: RandomAdaptor.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="9"/>
            <javadoc line="9">
                Serializable version identifier.                
            </javadoc>
            <declaration name="randomGenerator" type="RandomGenerator" line="13"/>
            <javadoc line="13">
                Wrapped randomGenerator instance                
            </javadoc>
            <javadoc line="17">
                Prevent instantiation without a generator argument                
            </javadoc>
            <method name="RandomAdaptor" type="constructor" line="20"/>
            <javadoc line="23">
                Construct a RandomAdaptor wrapping the supplied RandomGenerator.                
                <param>
                    randomGenerator  the wrapped generator                    
                </param>
            </javadoc>
            <method name="RandomAdaptor" type="constructor" line="27">
                <params>
                    <param name="randomGenerator" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="30">
                Factory method to create a &lt;code&gt;Random&lt;/code&gt; using the supplied
                  &lt;code&gt;RandomGenerator&lt;/code&gt;.                
                <param>
                    randomGenerator  wrapped RandomGenerator instance                    
                </param>
                <return>
                    a Random instance wrapping the RandomGenerator                    
                </return>
            </javadoc>
            <method name="createAdaptor" type="Random" line="36">
                <params>
                    <param name="randomGenerator" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="39">
                Returns the next pseudorandom, uniformly distributed
                  &lt;code&gt;boolean&lt;/code&gt; value from this random number generator&apos;s
                  sequence.                
                <return>
                    the next pseudorandom, uniformly distributed
                      <code>boolean</code> value from this random number generator's
                      sequence                    
                </return>
            </javadoc>
            <method name="nextBoolean" type="boolean" line="47"/>
            <javadoc line="50">
                Generates random bytes and places them into a user-supplied
                  byte array.  The number of random bytes produced is equal to
                  the length of the byte array.                
                <param>
                    bytes the non-null byte array in which to put the
                      random bytes                    
                </param>
            </javadoc>
            <method name="nextBytes" type="void" line="57">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <javadoc line="60">
                Returns the next pseudorandom, uniformly distributed
                  &lt;code&gt;double&lt;/code&gt; value between &lt;code&gt;0.0&lt;/code&gt; and
                  &lt;code&gt;1.0&lt;/code&gt; from this random number generator&apos;s sequence.                
                <return>
                    the next pseudorandom, uniformly distributed
                      <code>double</code> value between <code>0.0</code> and
                      <code>1.0</code> from this random number generator's sequence                    
                </return>
            </javadoc>
            <method name="nextDouble" type="double" line="68"/>
            <javadoc line="71">
                Returns the next pseudorandom, uniformly distributed &lt;code&gt;float&lt;/code&gt;
                  value between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; from this random
                  number generator&apos;s sequence.                
                <return>
                    the next pseudorandom, uniformly distributed <code>float</code>
                      value between <code>0.0</code> and <code>1.0</code> from this
                      random number generator's sequence                    
                </return>
            </javadoc>
            <method name="nextFloat" type="float" line="79"/>
            <javadoc line="82">
                Returns the next pseudorandom, Gaussian (&quot;normally&quot;) distributed
                  &lt;code&gt;double&lt;/code&gt; value with mean &lt;code&gt;0.0&lt;/code&gt; and standard
                  deviation &lt;code&gt;1.0&lt;/code&gt; from this random number generator&apos;s sequence.                
                <return>
                    the next pseudorandom, Gaussian ("normally") distributed
                      <code>double</code> value with mean <code>0.0</code> and
                      standard deviation <code>1.0</code> from this random number
                      generator's sequence                    
                </return>
            </javadoc>
            <method name="nextGaussian" type="double" line="91"/>
            <javadoc line="94">
                Returns the next pseudorandom, uniformly distributed &lt;code&gt;int&lt;/code&gt;
                  value from this random number generator&apos;s sequence.
                  All 2&lt;font size=&quot;-1&quot;&gt;&lt;sup&gt;32&lt;/sup&gt;&lt;/font&gt; possible &lt;tt&gt;int&lt;/tt&gt; values
                  should be produced with  (approximately) equal probability.                
                <return>
                    the next pseudorandom, uniformly distributed <code>int</code>
                      value from this random number generator's sequence                    
                </return>
            </javadoc>
            <method name="nextInt" type="int" line="102"/>
            <javadoc line="105">
                Returns a pseudorandom, uniformly distributed &lt;tt&gt;int&lt;/tt&gt; value
                  between 0 (inclusive) and the specified value (exclusive), drawn from
                  this random number generator&apos;s sequence.                
                <param>
                    n the bound on the random number to be returned.  Must be
                      positive.                    
                </param>
                <return>
                    a pseudorandom, uniformly distributed <tt>int</tt>
                      value between 0 (inclusive) and n (exclusive).                    
                </return>
                <throws>
                    IllegalArgumentException  if n is not positive.                    
                </throws>
            </javadoc>
            <method name="nextInt" type="int" line="115">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                Returns the next pseudorandom, uniformly distributed &lt;code&gt;long&lt;/code&gt;
                  value from this random number generator&apos;s sequence.  All
                  2&lt;font size=&quot;-1&quot;&gt;&lt;sup&gt;64&lt;/sup&gt;&lt;/font&gt; possible &lt;tt&gt;long&lt;/tt&gt; values
                  should be produced with (approximately) equal probability.                
                <return>
                    the next pseudorandom, uniformly distributed <code>long</code>
                      value from this random number generator's sequence                    
                </return>
            </javadoc>
            <method name="nextLong" type="long" line="126"/>
            <javadoc line="129">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="132">
                <params>
                    <param name="seed" type="int"/>
                </params>
                <scope line="133"/>
            </method>
            <javadoc line="137">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="140">
                <params>
                    <param name="seed" type="int[]"/>
                </params>
                <scope line="141"/>
            </method>
            <javadoc line="145">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="148">
                <params>
                    <param name="seed" type="long"/>
                </params>
                <scope line="149"/>
            </method>
        </class>
    </source>