<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.ResizableDoubleArray"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="ExponentialDistribution" line="28">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="28">
                Implementation of the exponential distribution.                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Exponential_distribution">Exponential distribution (Wikipedia)</a>                    
                </see>
                <see>
                    <a href="http://mathworld.wolfram.com/ExponentialDistribution.html">Exponential distribution (MathWorld)</a>                    
                </see>
                <version>
                    $Id: ExponentialDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="36"/>
            <javadoc line="36">
                Default inverse cumulative probability accuracy.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="41"/>
            <javadoc line="41">
                Serializable version identifier                
            </javadoc>
            <declaration name="EXPONENTIAL_SA_QI" type="double[]" line="43"/>
            <javadoc line="43">
                Used when generating Exponential samples.
                  Table containing the constants
                  q_i = sum_{j=1}^i (ln 2)^j/j! = ln 2 + (ln 2)^2/2 + ... + (ln 2)^i/i!
                  until the largest representable fraction below 1 is exceeded.
                  Note that
                  1 = 2 - 1 = exp(ln 2) - 1 = sum_{n=1}^infty (ln 2)^n / n!
                  thus q_i -&gt; 1 as i -&gt; +inf,
                  so the higher i, the closer to one we get (the series is not alternating).
                  By trying, n = 16 in Java is enough to reach 1.0.                
            </javadoc>
            <declaration name="mean" type="double" line="57"/>
            <javadoc line="57">
                The mean of this distribution.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="59"/>
            <javadoc line="59">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <javadoc line="62">
                Initialize tables.                
            </javadoc>
            <scope line="65">
                <declaration name="LN2" type="double" line="66"/>
                <declaration name="qi" type="double" line="71"/>
                <declaration name="i" type="int" line="72"/>
                <declaration name="ra" type="ResizableDoubleArray" line="74"/>
                <scope line="82"/>
            </scope>
            <javadoc line="91">
                Create an exponential distribution with the given mean.                
                <param>
                    mean mean of this distribution.                    
                </param>
            </javadoc>
            <method name="ExponentialDistribution" type="constructor" line="95">
                <params>
                    <param name="mean" type="double"/>
                </params>
            </method>
            <javadoc line="99">
                Create an exponential distribution with the given mean.                
                <param>
                    mean Mean of this distribution.                    
                </param>
                <param>
                    inverseCumAccuracy Maximum absolute error in inverse
                      cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code mean <= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="ExponentialDistribution" type="constructor" line="109">
                <params>
                    <param name="mean" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="113">
                Creates an exponential distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    mean Mean of this distribution.                    
                </param>
                <param>
                    inverseCumAccuracy Maximum absolute error in inverse
                      cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code mean <= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="ExponentialDistribution" type="constructor" line="127">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="mean" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
                <scope line="130"/>
            </method>
            <javadoc line="137">
                Access the mean.                
                <return>
                    the mean.                    
                </return>
            </javadoc>
            <method name="getMean" type="double" line="142"/>
            <javadoc line="146">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="147">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="148"/>
            </method>
            <javadoc line="154">
                {@inheritDoc}The implementation of this method is based on:
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/ExponentialDistribution.html&quot;&gt;
                  Exponential Distribution&lt;/a&gt;, equation (1).&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="164">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="ret" type="double" line="165"/>
                <scope line="166"/>
                <scope line="168"/>
            </method>
            <javadoc line="174">
                {@inheritDoc}Returns {@code 0} when {@code p= = 0} and{@code Double.POSITIVE_INFINITY} when {@code p == 1}.                
            </javadoc>
            <method name="inverseCumulativeProbability" type="double" line="181">
                <params>
                    <param name="p" type="double"/>
                </params>
                <declaration name="ret" type="double" line="182"/>
                <scope line="184"/>
                <scope line="186"/>
                <scope line="188"/>
            </method>
            <javadoc line="195">
                {@inheritDoc}&lt;p&gt;&lt;strong&gt;Algorithm Description&lt;/strong&gt;: this implementation uses the
                  &lt;a href=&quot;http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html&quot;&gt;
                  Inversion Method&lt;/a&gt; to generate exponentially distributed random values
                  from uniform deviates.&lt;/p&gt;                
                <return>
                    a random value.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="sample" type="double" line="207">
                <comment line="209">
                    Step 1:                    
                </comment>
                <comment line="213">
                    Step 2 and 3:                    
                </comment>
                <comment line="219">
                    Step 4 (now u &gt;= 0.5):                    
                </comment>
                <comment line="222">
                    Step 5:                    
                </comment>
                <comment line="227">
                    Step 6:                    
                </comment>
                <comment line="228">
                    Should be 1, be we iterate before it in while using 0                    
                </comment>
                <comment line="232">
                    Step 7 and 8:                    
                </comment>
                <comment line="241">
                    Step 8:                    
                </comment>
                <comment line="242">
                    Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1                    
                </comment>
                <declaration name="a" type="double" line="209"/>
                <declaration name="u" type="double" line="210"/>
                <scope line="213"/>
                <scope line="222"/>
                <declaration name="i" type="int" line="227"/>
                <declaration name="u2" type="double" line="228"/>
                <declaration name="umin" type="double" line="229"/>
                <scope line="232">
                    <scope line="236"/>
                </scope>
            </method>
            <javadoc line="246">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="248"/>
            <javadoc line="252">
                {@inheritDoc}For mean parameter {@code k}, the mean is {@code k}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="257"/>
            <javadoc line="261">
                {@inheritDoc}For mean parameter {@code k}, the variance is {@code k^2}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="266">
                <declaration name="m" type="double" line="267"/>
            </method>
            <javadoc line="271">
                {@inheritDoc}The lower bound of the support is always 0 no matter the mean parameter.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="278"/>
            <javadoc line="282">
                {@inheritDoc}The upper bound of the support is always positive infinity
                  no matter the mean parameter.                
                <return>
                    upper bound of the support (always Double.POSITIVE_INFINITY)                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="290"/>
            <javadoc line="294">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="295"/>
            <javadoc line="299">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="300"/>
            <javadoc line="304">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="311"/>
        </class>
    </source>