<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="RectangularCholeskyDecomposition" line="22">
            <javadoc line="22">
                Calculates the rectangular Cholesky decomposition of a matrix.
                  &lt;p&gt;The rectangular Cholesky decomposition of a real symmetric positive
                  semidefinite matrix A consists of a rectangular matrix B with the same
                  number of rows such that: A is almost equal to BB&lt;sup&gt;T&lt;/sup&gt;, depending
                  on a user-defined tolerance. In a sense, this is the square root of A.&lt;/p&gt;
                  &lt;p&gt;The difference with respect to the regular {@link CholeskyDecomposition}is that rows/columns may be permuted (hence the rectangular shape instead
                  of the traditional triangular shape) and there is a threshold to ignore
                  small diagonal elements. This is used for example to generate {@link org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated
                  random n-dimensions vectors} in a p-dimension subspace (p &lt; n).
                  In other words, it allows generating random vectors from a covariance
                  matrix that is only positive semidefinite, and not positive definite.&lt;/p&gt;
                  &lt;p&gt;Rectangular Cholesky decomposition is &lt;em&gt;not&lt;/em&gt; suited for solving
                  linear systems, so it does not provide any {@link DecompositionSolverdecomposition solver}.&lt;/p&gt;                
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/CholeskyDecomposition.html&quot;&gt;MathWorld&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Cholesky_decomposition&quot;&gt;Wikipedia&lt;/a&gt;                    
                </see>
                <version>
                    $Id: RectangularCholeskyDecomposition.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </version>
                <since>
                    2.0 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="root" type="RealMatrix" line="47"/>
            <javadoc line="47">
                Permutated Cholesky root of the symmetric positive semidefinite matrix.                
            </javadoc>
            <declaration name="rank" type="int" line="50"/>
            <javadoc line="50">
                Rank of the symmetric positive semidefinite matrix.                
            </javadoc>
            <javadoc line="53">
                Decompose a symmetric positive semidefinite matrix.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; this constructor follows the linpack method to detect dependent
                  columns by proceeding with the Cholesky algorithm until a nonpositive diagonal
                  element is encountered.                
                <see>
                    &lt;a href=&quot;http://eprints.ma.man.ac.uk/1193/01/covered/MIMS_ep2008_56.pdf&quot;&gt;
                          Analysis of the Cholesky Decomposition of a Semi-definite Matrix&lt;/a&gt;                    
                </see>
                <param>
                    matrix Symmetric positive semidefinite matrix.                    
                </param>
                <exception>
                    NonPositiveDefiniteMatrixException if the matrix is not
                      positive semidefinite.                    
                </exception>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="RectangularCholeskyDecomposition" type="constructor" line="69">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="73">
                Decompose a symmetric positive semidefinite matrix.                
                <param>
                    matrix Symmetric positive semidefinite matrix.                    
                </param>
                <param>
                    small Diagonal elements threshold under which columns are
                      considered to be dependent on previous ones and are discarded.                    
                </param>
                <exception>
                    NonPositiveDefiniteMatrixException if the matrix is not
                      positive semidefinite.                    
                </exception>
            </javadoc>
            <method name="RectangularCholeskyDecomposition" type="constructor" line="83">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="small" type="double"/>
                </params>
                <comment line="98">
                    find maximal diagonal element                    
                </comment>
                <comment line="109">
                    swap elements                    
                </comment>
                <comment line="119">
                    check diagonal element                    
                </comment>
                <comment line="127">
                    check remaining diagonal elements                    
                </comment>
                <comment line="130">
                    there is at least one sufficiently negative diagonal element,
                     the symmetric positive semidefinite matrix is wrong                    
                </comment>
                <comment line="136">
                    all remaining diagonal elements are close to zero, we consider we have
                     found the rank of the symmetric positive semidefinite matrix                    
                </comment>
                <comment line="142">
                    transform the matrix                    
                </comment>
                <comment line="160">
                    prepare next iteration                    
                </comment>
                <comment line="165">
                    build the root matrix                    
                </comment>
                <declaration name="order" type="int" line="85"/>
                <declaration name="c" type="double[][]" line="86"/>
                <declaration name="b" type="double[][]" line="87"/>
                <declaration name="index" type="int[]" line="89"/>
                <scope line="90"/>
                <declaration name="r" type="int" line="94"/>
                <scope line="95">
                    <declaration name="swapR" type="int" line="98"/>
                    <scope line="99">
                        <declaration name="ii" type="int" line="100"/>
                        <declaration name="isr" type="int" line="101"/>
                        <scope line="102"/>
                    </scope>
                    <scope line="109">
                        <declaration name="tmpIndex" type="int" line="110"/>
                        <declaration name="tmpRow" type="double[]" line="113"/>
                    </scope>
                    <declaration name="ir" type="int" line="119"/>
                    <scope line="120">
                        <scope line="122"/>
                        <scope line="127">
                            <scope line="128"/>
                        </scope>
                    </scope>
                    <scope line="139">
                        <declaration name="sqrt" type="double" line="142"/>
                        <declaration name="inverse" type="double" line="144"/>
                        <declaration name="inverse2" type="double" line="145"/>
                        <scope line="146">
                            <declaration name="ii" type="int" line="147"/>
                            <declaration name="e" type="double" line="148"/>
                            <scope line="151">
                                <declaration name="ij" type="int" line="152"/>
                                <declaration name="f" type="double" line="153"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="167">
                    <scope line="168"/>
                </scope>
            </method>
            <javadoc line="175">
                Get the root of the covariance matrix.
                  The root is the rectangular matrix &lt;code&gt;B&lt;/code&gt; such that
                  the covariance matrix is equal to &lt;code&gt;B.B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;                
                <return>
                    root of the square matrix                    
                </return>
                <see>
                    #getRank()                    
                </see>
            </javadoc>
            <method name="getRootMatrix" type="RealMatrix" line="181"/>
            <javadoc line="185">
                Get the rank of the symmetric positive semidefinite matrix.
                  The r is the number of independent rows in the symmetric positive semidefinite
                  matrix, it is also the number of columns of the rectangular
                  matrix of the decomposition.                
                <return>
                    r of the square matrix.                    
                </return>
                <see>
                    #getRootMatrix()                    
                </see>
            </javadoc>
            <method name="getRank" type="int" line="192"/>
        </class>
    </source>