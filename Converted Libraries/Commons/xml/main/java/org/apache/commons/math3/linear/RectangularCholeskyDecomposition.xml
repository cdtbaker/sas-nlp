<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="RectangularCholeskyDecomposition" line="3">
            <javadoc line="3">
                Calculates the rectangular Cholesky decomposition of a matrix.
                  &lt;p&gt;The rectangular Cholesky decomposition of a real symmetric positive
                  semidefinite matrix A consists of a rectangular matrix B with the same
                  number of rows such that: A is almost equal to BB&lt;sup&gt;T&lt;/sup&gt;, depending
                  on a user-defined tolerance. In a sense, this is the square root of A.&lt;/p&gt;
                  &lt;p&gt;The difference with respect to the regular {@link CholeskyDecomposition}is that rows/columns may be permuted (hence the rectangular shape instead
                  of the traditional triangular shape) and there is a threshold to ignore
                  small diagonal elements. This is used for example to generate {@link org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated
                  random n-dimensions vectors} in a p-dimension subspace (p &lt; n).
                  In other words, it allows generating random vectors from a covariance
                  matrix that is only positive semidefinite, and not positive definite.&lt;/p&gt;
                  &lt;p&gt;Rectangular Cholesky decomposition is &lt;em&gt;not&lt;/em&gt; suited for solving
                  linear systems, so it does not provide any {@link DecompositionSolverdecomposition solver}.&lt;/p&gt;                
                <see>
                    <a href="http://mathworld.wolfram.com/CholeskyDecomposition.html">MathWorld</a>                    
                </see>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Cholesky_decomposition">Wikipedia</a>                    
                </see>
                <version>
                    $Id: RectangularCholeskyDecomposition.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </version>
                <since>
                    2.0 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="root" type="RealMatrix" line="23"/>
            <javadoc line="23">
                Permutated Cholesky root of the symmetric positive semidefinite matrix.                
            </javadoc>
            <declaration name="rank" type="int" line="27"/>
            <javadoc line="27">
                Rank of the symmetric positive semidefinite matrix.                
            </javadoc>
            <javadoc line="31">
                Decompose a symmetric positive semidefinite matrix.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; this constructor follows the linpack method to detect dependent
                  columns by proceeding with the Cholesky algorithm until a nonpositive diagonal
                  element is encountered.                
                <see>
                    <a href="http://eprints.ma.man.ac.uk/1193/01/covered/MIMS_ep2008_56.pdf">
                          Analysis of the Cholesky Decomposition of a Semi-definite Matrix</a>                    
                </see>
                <param>
                    matrix Symmetric positive semidefinite matrix.                    
                </param>
                <exception>
                    NonPositiveDefiniteMatrixException if the matrix is not
                      positive semidefinite.                    
                </exception>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="RectangularCholeskyDecomposition" type="constructor" line="44">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="47">
                Decompose a symmetric positive semidefinite matrix.                
                <param>
                    matrix Symmetric positive semidefinite matrix.                    
                </param>
                <param>
                    small Diagonal elements threshold under which columns are
                      considered to be dependent on previous ones and are discarded.                    
                </param>
                <exception>
                    NonPositiveDefiniteMatrixException if the matrix is not
                      positive semidefinite.                    
                </exception>
            </javadoc>
            <method name="RectangularCholeskyDecomposition" type="constructor" line="55">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="small" type="double"/>
                </params>
                <declaration name="order" type="int" line="56"/>
                <declaration name="c" type="double[][]" line="57"/>
                <declaration name="b" type="double[][]" line="58"/>
                <declaration name="index" type="int[]" line="59"/>
                <scope line="60"/>
                <declaration name="r" type="int" line="63"/>
                <scope line="64">
                    <declaration name="swapR" type="int" line="65"/>
                    <scope line="66">
                        <declaration name="ii" type="int" line="67"/>
                        <declaration name="isr" type="int" line="68"/>
                        <scope line="69"/>
                    </scope>
                    <scope line="73">
                        <declaration name="tmpIndex" type="int" line="74"/>
                        <declaration name="tmpRow" type="double[]" line="77"/>
                    </scope>
                    <declaration name="ir" type="int" line="81"/>
                    <scope line="82">
                        <scope line="83"/>
                        <scope line="86">
                            <scope line="87"/>
                        </scope>
                    </scope>
                    <scope line="93">
                        <declaration name="sqrt" type="double" line="94"/>
                        <declaration name="inverse" type="double" line="96"/>
                        <declaration name="inverse2" type="double" line="97"/>
                        <scope line="98">
                            <declaration name="ii" type="int" line="99"/>
                            <declaration name="e" type="double" line="100"/>
                            <scope line="103">
                                <declaration name="ij" type="int" line="104"/>
                                <declaration name="f" type="double" line="105"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="115">
                    <scope line="116"/>
                </scope>
            </method>
            <javadoc line="121">
                Get the root of the covariance matrix.
                  The root is the rectangular matrix &lt;code&gt;B&lt;/code&gt; such that
                  the covariance matrix is equal to &lt;code&gt;B.B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;                
                <return>
                    root of the square matrix                    
                </return>
                <see>
                    #getRank()                    
                </see>
            </javadoc>
            <method name="getRootMatrix" type="RealMatrix" line="128"/>
            <javadoc line="131">
                Get the rank of the symmetric positive semidefinite matrix.
                  The r is the number of independent rows in the symmetric positive semidefinite
                  matrix, it is also the number of columns of the rectangular
                  matrix of the decomposition.                
                <return>
                    r of the square matrix.                    
                </return>
                <see>
                    #getRootMatrix()                    
                </see>
            </javadoc>
            <method name="getRank" type="int" line="139"/>
        </class>
    </source>