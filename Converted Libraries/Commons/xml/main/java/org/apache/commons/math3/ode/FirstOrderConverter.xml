<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode">
        <class name="FirstOrderConverter" line="2">
            <implements interface="FirstOrderDifferentialEquations"/>
            <javadoc line="2">
                This class converts second order differential equations to first
                  order ones.
                  &lt;p&gt;This class is a wrapper around a {@link SecondOrderDifferentialEquations} which allow to use a {@link FirstOrderIntegrator} to integrate it.&lt;/p&gt;
                  &lt;p&gt;The transformation is done by changing the n dimension state
                  vector to a 2n dimension vector, where the first n components are
                  the initial state variables and the n last components are their
                  first time derivative. The first time derivative of this state
                  vector then really contains both the first and second time
                  derivative of the initial state vector, which can be handled by the
                  underlying second order equations set.&lt;/p&gt;
                  &lt;p&gt;One should be aware that the data is duplicated during the
                  transformation process and that for each call to {@link #computeDerivatives computeDerivatives}, this wrapper does copy 4n
                  scalars : 2n before the call to {@link SecondOrderDifferentialEquations#computeSecondDerivativescomputeSecondDerivatives} in order to dispatch the y state vector
                  into z and zDot, and 2n after the call to gather zDot and zDDot
                  into yDot. Since the underlying problem by itself perhaps also
                  needs to copy data and dispatch the arrays into domain objects,
                  this has an impact on both memory and CPU usage. The only way to
                  avoid this duplication is to perform the transformation at the
                  problem level, i.e. to implement the problem as a first order one
                  and then avoid using this class.&lt;/p&gt;                
                <see>
                    FirstOrderIntegrator                    
                </see>
                <see>
                    FirstOrderDifferentialEquations                    
                </see>
                <see>
                    SecondOrderDifferentialEquations                    
                </see>
                <version>
                    $Id: FirstOrderConverter.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="equations" type="SecondOrderDifferentialEquations" line="30"/>
            <javadoc line="30">
                Underlying second order equations set.                
            </javadoc>
            <declaration name="dimension" type="int" line="34"/>
            <javadoc line="34">
                second order problem dimension.                
            </javadoc>
            <declaration name="z" type="double[]" line="38"/>
            <javadoc line="38">
                state vector.                
            </javadoc>
            <declaration name="zDot" type="double[]" line="42"/>
            <javadoc line="42">
                first time derivative of the state vector.                
            </javadoc>
            <declaration name="zDDot" type="double[]" line="46"/>
            <javadoc line="46">
                second time derivative of the state vector.                
            </javadoc>
            <javadoc line="50">
                Simple constructor.
                  Build a converter around a second order equations set.                
                <param>
                    equations second order equations set to convert                    
                </param>
            </javadoc>
            <method name="FirstOrderConverter" type="constructor" line="55">
                <params>
                    <param name="equations" type="SecondOrderDifferentialEquations"/>
                </params>
            </method>
            <javadoc line="62">
                Get the dimension of the problem.
                  &lt;p&gt;The dimension of the first order problem is twice the
                  dimension of the underlying second order problem.&lt;/p&gt;                
                <return>
                    dimension of the problem                    
                </return>
            </javadoc>
            <method name="getDimension" type="int" line="68"/>
            <javadoc line="71">
                Get the current time derivative of the state vector.                
                <param>
                    t current value of the independent <I>time</I> variable                    
                </param>
                <param>
                    y array containing the current value of the state vector                    
                </param>
                <param>
                    yDot placeholder array where to put the time derivative of the state vector                    
                </param>
            </javadoc>
            <method name="computeDerivatives" type="void" line="77">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                    <param name="yDot" type="double[]"/>
                </params>
            </method>
        </class>
    </source>