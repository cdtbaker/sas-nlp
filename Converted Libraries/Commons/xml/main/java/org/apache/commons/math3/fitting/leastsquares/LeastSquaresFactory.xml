<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting.leastsquares">
        <import package="org.apache.commons.math3.analysis.MultivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.DiagonalMatrix"/>
        <import package="org.apache.commons.math3.linear.EigenDecomposition"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.optim.AbstractOptimizationProblem"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <class name="LeastSquaresFactory" line="35">
            <javadoc line="35">
                A Factory for creating {@link LeastSquaresProblem}s.                
                <version>
                    $Id: LeastSquaresFactory.java 1573307 2014-03-02 14:02:21Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <javadoc line="43">
                Prevent instantiation.                
            </javadoc>
            <method name="LeastSquaresFactory" type="constructor" line="44"/>
            <javadoc line="47">
                Create a {@link org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem}from the given elements. There will be no weights applied (Identity weights).                
                <param>
                    model          the model function. Produces the computed values.                    
                </param>
                <param>
                    observed       the observed (target) values                    
                </param>
                <param>
                    start          the initial guess.                    
                </param>
                <param>
                    checker        convergence checker                    
                </param>
                <param>
                    maxEvaluations the maximum number of times to evaluate the model                    
                </param>
                <param>
                    maxIterations  the maximum number to times to iterate in the algorithm                    
                </param>
                <return>
                    the specified General Least Squares problem.                    
                </return>
            </javadoc>
            <method name="create" type="LeastSquaresProblem" line="64">
                <params>
                    <param name="model" type="MultivariateJacobianFunction"/>
                    <param name="observed" type="RealVector"/>
                    <param name="start" type="RealVector"/>
                    <param name="checker" type="ConvergenceChecker&lt;Evaluation&gt;"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="75">
                Create a {@link org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem}from the given elements.                
                <param>
                    model          the model function. Produces the computed values.                    
                </param>
                <param>
                    observed       the observed (target) values                    
                </param>
                <param>
                    start          the initial guess.                    
                </param>
                <param>
                    weight         the weight matrix                    
                </param>
                <param>
                    checker        convergence checker                    
                </param>
                <param>
                    maxEvaluations the maximum number of times to evaluate the model                    
                </param>
                <param>
                    maxIterations  the maximum number to times to iterate in the algorithm                    
                </param>
                <return>
                    the specified General Least Squares problem.                    
                </return>
            </javadoc>
            <method name="create" type="LeastSquaresProblem" line="94">
                <params>
                    <param name="model" type="MultivariateJacobianFunction"/>
                    <param name="observed" type="RealVector"/>
                    <param name="start" type="RealVector"/>
                    <param name="weight" type="RealMatrix"/>
                    <param name="checker" type="ConvergenceChecker&lt;Evaluation&gt;"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="107">
                Create a {@link org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem}from the given elements.
                  &lt;p/&gt;
                  This factory method is provided for continuity with previous interfaces. Newer
                  applications should use {@link #create(MultivariateJacobianFunction,RealVector,RealVector,ConvergenceChecker,int,int)}, or {@link #create(MultivariateJacobianFunction,RealVector,RealVector,RealMatrix,ConvergenceChecker,int,int)}.                
                <param>
                    model          the model function. Produces the computed values.                    
                </param>
                <param>
                    jacobian       the jacobian of the model with respect to the parameters                    
                </param>
                <param>
                    observed       the observed (target) values                    
                </param>
                <param>
                    start          the initial guess.                    
                </param>
                <param>
                    weight         the weight matrix                    
                </param>
                <param>
                    checker        convergence checker                    
                </param>
                <param>
                    maxEvaluations the maximum number of times to evaluate the model                    
                </param>
                <param>
                    maxIterations  the maximum number to times to iterate in the algorithm                    
                </param>
                <return>
                    the specified General Least Squares problem.                    
                </return>
            </javadoc>
            <method name="create" type="LeastSquaresProblem" line="133">
                <params>
                    <param name="model" type="MultivariateVectorFunction"/>
                    <param name="jacobian" type="MultivariateMatrixFunction"/>
                    <param name="observed" type="double[]"/>
                    <param name="start" type="double[]"/>
                    <param name="weight" type="RealMatrix"/>
                    <param name="checker" type="ConvergenceChecker&lt;Evaluation&gt;"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                Apply a dense weight matrix to the {@link LeastSquaresProblem}.                
                <param>
                    problem the unweighted problem                    
                </param>
                <param>
                    weights the matrix of weights                    
                </param>
                <return>
                    a new {@link LeastSquaresProblem} with the weights applied. The original{@code problem} is not modified.                    
                </return>
            </javadoc>
            <method name="weightMatrix" type="LeastSquaresProblem" line="154">
                <params>
                    <param name="problem" type="LeastSquaresProblem"/>
                    <param name="weights" type="RealMatrix"/>
                </params>
                <declaration name="weightSquareRoot" type="RealMatrix" line="155"/>
                <anonymous_class line="156">
                    <method name="evaluate" type="Evaluation" line="158">
                        <params>
                            <param name="point" type="RealVector"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="164">
                Apply a diagonal weight matrix to the {@link LeastSquaresProblem}.                
                <param>
                    problem the unweighted problem                    
                </param>
                <param>
                    weights the diagonal of the weight matrix                    
                </param>
                <return>
                    a new {@link LeastSquaresProblem} with the weights applied. The original{@code problem} is not modified.                    
                </return>
            </javadoc>
            <method name="weightDiagonal" type="LeastSquaresProblem" line="173">
                <params>
                    <param name="problem" type="LeastSquaresProblem"/>
                    <param name="weights" type="RealVector"/>
                </params>
                <comment line="175">
                    TODO more efficient implementation                    
                </comment>
            </method>
            <javadoc line="178">
                Count the evaluations of a particular problem. The {@code counter} will be
                  incremented every time {@link LeastSquaresProblem#evaluate(RealVector)} is called on
                  the &lt;em&gt;returned&lt;/em&gt; problem.                
                <param>
                    problem the problem to track.                    
                </param>
                <param>
                    counter the counter to increment.                    
                </param>
                <return>
                    a least squares problem that tracks evaluations                    
                </return>
            </javadoc>
            <method name="countEvaluations" type="LeastSquaresProblem" line="188">
                <params>
                    <param name="problem" type="LeastSquaresProblem"/>
                    <param name="counter" type="Incrementor"/>
                </params>
                <comment line="197">
                                        
                </comment>
                <anonymous_class line="189">
                    <method name="evaluate" type="Evaluation" line="191">
                        <params>
                            <param name="point" type="RealVector"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="201">
                View a convergence checker specified for a {@link PointVectorValuePair} as one
                  specified for an {@link Evaluation}.                
                <param>
                    checker the convergence checker to adapt.                    
                </param>
                <return>
                    a convergence checker that delegates to {@code checker}.                    
                </return>
            </javadoc>
            <method name="evaluationChecker" type="ConvergenceChecker&lt;Evaluation&gt;" line="210">
                <params>
                    <param name="checker" type="ConvergenceChecker&lt;PointVectorValuePair&gt;"/>
                </params>
                <anonymous_class line="211">
                    <method name="converged" type="boolean" line="214">
                        <params>
                            <param name="iteration" type="int"/>
                            <param name="previous" type="Evaluation"/>
                            <param name="current" type="Evaluation"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="230">
                Computes the square-root of the weight matrix.                
                <param>
                    m Symmetric, positive-definite (weight) matrix.                    
                </param>
                <return>
                    the square-root of the weight matrix.                    
                </return>
            </javadoc>
            <method name="squareRoot" type="RealMatrix" line="236">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <scope line="237">
                    <declaration name="dim" type="int" line="238"/>
                    <declaration name="sqrtM" type="RealMatrix" line="239"/>
                    <scope line="240"/>
                </scope>
                <scope line="244">
                    <declaration name="dec" type="EigenDecomposition" line="245"/>
                </scope>
            </method>
            <javadoc line="250">
                Combine a {@link MultivariateVectorFunction} with a {@link MultivariateMatrixFunction} to produce a {@link MultivariateJacobianFunction}.                
                <param>
                    value    the vector value function                    
                </param>
                <param>
                    jacobian the Jacobian function                    
                </param>
                <return>
                    a function that computes both at the same time                    
                </return>
            </javadoc>
            <method name="model" type="MultivariateJacobianFunction" line="261">
                <params>
                    <param name="value" type="MultivariateVectorFunction"/>
                    <param name="jacobian" type="MultivariateMatrixFunction"/>
                </params>
                <comment line="265">
                    TODO get array from RealVector without copying?                    
                </comment>
                <comment line="267">
                    evaluate and return data without copying                    
                </comment>
                <anonymous_class line="262">
                    <method name="value" type="Pair&lt;RealVector,RealMatrix&gt;" line="263">
                        <params>
                            <param name="point" type="RealVector"/>
                        </params>
                        <comment line="265">
                            TODO get array from RealVector without copying?                            
                        </comment>
                        <comment line="267">
                            evaluate and return data without copying                            
                        </comment>
                        <declaration name="pointArray" type="double[]" line="265"/>
                    </method>
                </anonymous_class>
            </method>
            <class name="LocalLeastSquaresProblem" line="274">
                <extends class="AbstractOptimizationProblem">
                    <type_params>
                        <type_param name="Evaluation"/>
                    </type_params>
                </extends>
                <implements interface="LeastSquaresProblem"/>
                <javadoc line="274">
                    A private, &quot;field&quot; immutable (not &quot;real&quot; immutable) implementation of {@link LeastSquaresProblem}.                    
                    <since>
                        3.3                        
                    </since>
                </javadoc>
                <declaration name="target" type="RealVector" line="283"/>
                <javadoc line="283">
                    Target values for the model function at optimum.                    
                </javadoc>
                <declaration name="model" type="MultivariateJacobianFunction" line="285"/>
                <javadoc line="285">
                    Model function.                    
                </javadoc>
                <declaration name="start" type="RealVector" line="287"/>
                <javadoc line="287">
                    Initial guess.                    
                </javadoc>
                <javadoc line="290">
                    Create a {@link LeastSquaresProblem} from the given data.                    
                    <param>
                        model          the model function                        
                    </param>
                    <param>
                        target         the observed data                        
                    </param>
                    <param>
                        start          the initial guess                        
                    </param>
                    <param>
                        checker        the convergence checker                        
                    </param>
                    <param>
                        maxEvaluations the allowed evaluations                        
                    </param>
                    <param>
                        maxIterations  the allowed iterations                        
                    </param>
                </javadoc>
                <method name="LocalLeastSquaresProblem" type="constructor" line="305">
                    <params>
                        <param name="model" type="MultivariateJacobianFunction"/>
                        <param name="target" type="RealVector"/>
                        <param name="start" type="RealVector"/>
                        <param name="checker" type="ConvergenceChecker&lt;Evaluation&gt;"/>
                        <param name="maxEvaluations" type="int"/>
                        <param name="maxIterations" type="int"/>
                    </params>
                </method>
                <javadoc line="312">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getObservationSize" type="int" line="313"/>
                <javadoc line="317">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getParameterSize" type="int" line="318"/>
                <javadoc line="322">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getStart" type="RealVector" line="323"/>
                <javadoc line="327">
                    {@inheritDoc}                    
                </javadoc>
                <method name="evaluate" type="Evaluation" line="328">
                    <params>
                        <param name="point" type="RealVector"/>
                    </params>
                    <comment line="330">
                        evaluate value and jacobian in one function call                        
                    </comment>
                    <comment line="336">
                        copy so optimizer can change point without changing our instance                        
                    </comment>
                    <declaration name="value" type="Pair&amp;lt;RealVector,RealMatrix&amp;gt;" line="330"/>
                </method>
                <class name="UnweightedEvaluation" line="339">
                    <extends class="AbstractEvaluation"/>
                    <javadoc line="339">
                        Container with the model evaluation at a particular point.
                          &lt;p/&gt;
                          TODO revisit lazy evaluation                        
                    </javadoc>
                    <declaration name="point" type="RealVector" line="346"/>
                    <javadoc line="346">
                        the point of evaluation                        
                    </javadoc>
                    <declaration name="jacobian" type="RealMatrix" line="348"/>
                    <javadoc line="348">
                        deriviative at point                        
                    </javadoc>
                    <declaration name="residuals" type="RealVector" line="350"/>
                    <javadoc line="350">
                        the computed residuals.                        
                    </javadoc>
                    <javadoc line="353">
                        Create an {@link Evaluation} with no weights.                        
                        <param>
                            values   the computed function values                            
                        </param>
                        <param>
                            jacobian the computed function Jacobian                            
                        </param>
                        <param>
                            target   the observed values                            
                        </param>
                        <param>
                            point    the abscissa                            
                        </param>
                    </javadoc>
                    <method name="UnweightedEvaluation" type="constructor" line="364">
                        <params>
                            <param name="values" type="RealVector"/>
                            <param name="jacobian" type="RealMatrix"/>
                            <param name="target" type="RealVector"/>
                            <param name="point" type="RealVector"/>
                        </params>
                    </method>
                    <javadoc line="371">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getJacobian" type="RealMatrix" line="372"/>
                    <javadoc line="376">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getPoint" type="RealVector" line="377"/>
                    <javadoc line="381">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getResiduals" type="RealVector" line="382"/>
                </class>
            </class>
        </class>
    </source>