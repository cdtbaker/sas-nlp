<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="TransformUtils" line="7">
            <javadoc line="7">
                Useful functions for the implementation of various transforms.                
                <version>
                    $Id: TransformUtils.java 1385310 2012-09-16 16:32:10Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="POWERS_OF_TWO" type="int[]" line="13"/>
            <javadoc line="13">
                Table of the powers of 2 to facilitate binary search lookup.                
                <see>
                    #exactLog2(int)                    
                </see>
            </javadoc>
            <javadoc line="18">
                Private constructor.                
            </javadoc>
            <method name="TransformUtils" type="constructor" line="21"/>
            <javadoc line="24">
                Multiply every component in the given real array by the
                  given real number. The change is made in place.                
                <param>
                    f the real array to be scaled                    
                </param>
                <param>
                    d the real scaling coefficient                    
                </param>
                <return>
                    a reference to the scaled array                    
                </return>
            </javadoc>
            <method name="scaleArray" type="double[]" line="31">
                <params>
                    <param name="f" type="double[]"/>
                    <param name="d" type="double"/>
                </params>
                <scope line="32"/>
            </method>
            <javadoc line="37">
                Multiply every component in the given complex array by the
                  given real number. The change is made in place.                
                <param>
                    f the complex array to be scaled                    
                </param>
                <param>
                    d the real scaling coefficient                    
                </param>
                <return>
                    a reference to the scaled array                    
                </return>
            </javadoc>
            <method name="scaleArray" type="Complex[]" line="44">
                <params>
                    <param name="f" type="Complex[]"/>
                    <param name="d" type="double"/>
                </params>
                <scope line="45"/>
            </method>
            <javadoc line="50">
                Builds a new two dimensional array of {@code double} filled with the real
                  and imaginary parts of the specified {@link Complex} numbers. In the
                  returned array {@code dataRI}, the data is laid out as follows
                  &lt;ul&gt;
                  &lt;li&gt;{@code dataRI[0][i] = dataC[i].getReal()},&lt;/li&gt;
                  &lt;li&gt;{@code dataRI[1][i] = dataC[i].getImaginary()}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    dataC the array of {@link Complex} data to be transformed                    
                </param>
                <return>
                    a two dimensional array filled with the real and imaginary parts
                      of the specified complex input                    
                </return>
            </javadoc>
            <method name="createRealImaginaryArray" type="double[][]" line="62">
                <params>
                    <param name="dataC" type="Complex[]"/>
                </params>
                <declaration name="dataRI" type="double[][]" line="63"/>
                <declaration name="dataR" type="double[]" line="64"/>
                <declaration name="dataI" type="double[]" line="65"/>
                <scope line="66">
                    <declaration name="c" type="Complex" line="67"/>
                </scope>
            </method>
            <javadoc line="73">
                Builds a new array of {@link Complex} from the specified two dimensional
                  array of real and imaginary parts. In the returned array {@code dataC},
                  the data is laid out as follows
                  &lt;ul&gt;
                  &lt;li&gt;{@code dataC[i].getReal() = dataRI[0][i]},&lt;/li&gt;
                  &lt;li&gt;{@code dataC[i].getImaginary() = dataRI[1][i]}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    dataRI the array of real and imaginary parts to be transformed                    
                </param>
                <return>
                    an array of {@link Complex} with specified real and imaginary parts.                    
                </return>
                <throws>
                    DimensionMismatchException if the number of rows of the specified
                      array is not two, or the array is not rectangular                    
                </throws>
            </javadoc>
            <method name="createComplexArray" type="Complex[]" line="86">
                <params>
                    <param name="dataRI" type="double[][]"/>
                </params>
                <scope line="87"/>
                <declaration name="dataR" type="double[]" line="90"/>
                <declaration name="dataI" type="double[]" line="91"/>
                <scope line="92"/>
                <declaration name="n" type="int" line="95"/>
                <declaration name="c" type="Complex[]" line="96"/>
                <scope line="97"/>
            </method>
            <javadoc line="102">
                Returns the base-2 logarithm of the specified {@code int}. Throws an
                  exception if {@code n} is not a power of two.                
                <param>
                    n the {@code int} whose base-2 logarithm is to be evaluated                    
                </param>
                <return>
                    the base-2 logarithm of {@code n}                    
                </return>
                <throws>
                    MathIllegalArgumentException if {@code n} is not a power of two                    
                </throws>
            </javadoc>
            <method name="exactLog2" type="int" line="109">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="index" type="int" line="110"/>
                <scope line="111"/>
            </method>
        </class>
    </source>