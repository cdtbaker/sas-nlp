<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.io.Serializable"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotANumberException"/>
        <import package="org.apache.commons.math3.exception.NotFiniteNumberException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <class name="EnumeratedDistribution" line="36">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="Serializable"/>
            <javadoc line="36">
                &lt;p&gt;A generic implementation of a
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution&quot;&gt;
                  discrete probability distribution (Wikipedia)&lt;/a&gt; over a finite sample space,
                  based on an enumerated list of &amp;lt;value, probability&amp;gt; pairs.  Input probabilities must all be non-negative,
                  but zero values are allowed and their sum does not have to equal one. Constructors will normalize input
                  probabilities to make them sum to one.&lt;/p&gt;
                  &lt;p&gt;The list of &lt;value, probability&gt; pairs does not, strictly speaking, have to be a function and it can
                  contain null values.  The pmf created by the constructor will combine probabilities of equal values and
                  will treat null values as equal.  For example, if the list of pairs &amp;lt;&quot;dog&quot;, 0.2&amp;gt;, &amp;lt;null, 0.1&amp;gt;,
                  &amp;lt;&quot;pig&quot;, 0.2&amp;gt;, &amp;lt;&quot;dog&quot;, 0.1&amp;gt;, &amp;lt;null, 0.4&amp;gt; is provided to the constructor, the resulting
                  pmf will assign mass of 0.5 to null, 0.3 to &quot;dog&quot; and 0.2 to null.&lt;/p&gt;                
                <param>
                    <T>
                       type of the elements in the sample space.                    
                </param>
                <version>
                    $Id: EnumeratedDistribution.java 1456769 2013-03-15 04:51:34Z psteitz $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="56"/>
            <javadoc line="56">
                Serializable UID.                
            </javadoc>
            <declaration name="random" type="RandomGenerator" line="59"/>
            <javadoc line="59">
                RNG instance used to generate samples from the distribution.                
            </javadoc>
            <declaration name="singletons" type="List&lt;T&gt;" line="64"/>
            <javadoc line="64">
                List of random variable values.                
            </javadoc>
            <declaration name="probabilities" type="double[]" line="68"/>
            <javadoc line="68">
                Probabilities of respective random variable values. For i = 0, ..., singletons.size() - 1,
                  probability[i] is the probability that a random variable following this distribution takes
                  the value singletons[i].                
            </javadoc>
            <javadoc line="75">
                Create an enumerated distribution using the given probability mass function
                  enumeration.                
                <param>
                    pmf probability mass function enumerated as a list of <T, probability>
                      pairs.                    
                </param>
                <throws>
                    NotPositiveException if any of the probabilities are negative.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the probabilities are infinite.                    
                </throws>
                <throws>
                    NotANumberException if any of the probabilities are NaN.                    
                </throws>
                <throws>
                    MathArithmeticException all of the probabilities are 0.                    
                </throws>
            </javadoc>
            <method name="EnumeratedDistribution" type="constructor" line="87">
                <params>
                    <param name="pmf" type="List<Pair<T,Double>>"/>
                </params>
            </method>
            <javadoc line="91">
                Create an enumerated distribution using the given random number generator
                  and probability mass function enumeration.                
                <param>
                    rng random number generator.                    
                </param>
                <param>
                    pmf probability mass function enumerated as a list of <T, probability>
                      pairs.                    
                </param>
                <throws>
                    NotPositiveException if any of the probabilities are negative.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the probabilities are infinite.                    
                </throws>
                <throws>
                    NotANumberException if any of the probabilities are NaN.                    
                </throws>
                <throws>
                    MathArithmeticException all of the probabilities are 0.                    
                </throws>
            </javadoc>
            <method name="EnumeratedDistribution" type="constructor" line="104">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="pmf" type="List<Pair<T,Double>>"/>
                </params>
                <declaration name="probs" type="double[]" line="108"/>
                <scope line="110">
                    <declaration name="sample" type="Pair&lt;T,Double&gt;" line="111"/>
                    <declaration name="p" type="double" line="113"/>
                    <scope line="114"/>
                    <scope line="117"/>
                    <scope line="120"/>
                </scope>
            </method>
            <javadoc line="129">
                Reseed the random generator used to generate samples.                
                <param>
                    seed the new seed                    
                </param>
            </javadoc>
            <method name="reseedRandomGenerator" type="void" line="134">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <javadoc line="138">
                &lt;p&gt;For a random variable {@code X} whose values are distributed according to
                  this distribution, this method returns {@code P(X = x)}. In other words,
                  this method represents the probability mass function (PMF) for the
                  distribution.&lt;/p&gt;
                  &lt;p&gt;Note that if {@code x1} and {@code x2} satisfy {@code x1.equals(x2)},
                  or both are null, then {@code probability(x1) = probability(x2)}.&lt;/p&gt;                
                <param>
                    x the point at which the PMF is evaluated                    
                </param>
                <return>
                    the value of the probability mass function at {@code x}                    
                </return>
            </javadoc>
            <method name="probability" type="double" line="150">
                <params>
                    <param name="x" type="T"/>
                </params>
                <declaration name="probability" type="double" line="151"/>
                <scope line="153">
                    <scope line="155"/>
                </scope>
            </method>
            <javadoc line="163">
                &lt;p&gt;Return the probability mass function as a list of &lt;value, probability&gt; pairs.&lt;/p&gt;
                  &lt;p&gt;Note that if duplicate and / or null values were provided to the constructor
                  when creating this EnumeratedDistribution, the returned list will contain these
                  values.  If duplicates values exist, what is returned will not represent
                  a pmf (i.e., it is up to the caller to consolidate duplicate mass points).&lt;/p&gt;                
                <return>
                    the probability mass function.                    
                </return>
            </javadoc>
            <method name="getPmf" type="List<Pair<T,Double>>" line="173">
                <declaration name="samples" type="List&lt;Pair&lt;T,Double&gt;&gt;" line="174"/>
                <scope line="176"/>
            </method>
            <javadoc line="183">
                Generate a random value sampled from this distribution.                
                <return>
                    a random value.                    
                </return>
            </javadoc>
            <method name="sample" type="T" line="188">
                <comment line="199">
                    This should never happen, but it ensures we will return a correct
                     object in case the loop above has some floating point inequality                    
                </comment>
                <declaration name="randomValue" type="double" line="189"/>
                <declaration name="sum" type="double" line="190"/>
                <scope line="192">
                    <scope line="194"/>
                </scope>
            </method>
            <javadoc line="205">
                Generate a random sample from the distribution.                
                <param>
                    sampleSize the number of random values to generate.                    
                </param>
                <return>
                    an array representing the random sample.                    
                </return>
                <throws>
                    NotStrictlyPositiveException if {@code sampleSize} is not
                      positive.                    
                </throws>
            </javadoc>
            <method name="sample" type="Object[]" line="213">
                <params>
                    <param name="sampleSize" type="int"/>
                </params>
                <scope line="214"/>
                <declaration name="out" type="Object[]" line="219"/>
                <scope line="221"/>
            </method>
            <javadoc line="229">
                Generate a random sample from the distribution.
                  &lt;p&gt;
                  If the requested samples fit in the specified array, it is returned
                  therein. Otherwise, a new array is allocated with the runtime type of
                  the specified array and the size of this collection.                
                <param>
                    sampleSize the number of random values to generate.                    
                </param>
                <param>
                    array the array to populate.                    
                </param>
                <return>
                    an array representing the random sample.                    
                </return>
                <throws>
                    NotStrictlyPositiveException if {@code sampleSize} is not positive.                    
                </throws>
                <throws>
                    NullArgumentException if {@code array} is null                    
                </throws>
            </javadoc>
            <method name="sample" type="T[]" line="242">
                <params>
                    <param name="sampleSize" type="int"/>
                    <param name="array" type="T[]"/>
                </params>
                <comment line="253">
                    safe as both are of type T                    
                </comment>
                <scope line="243"/>
                <scope line="247"/>
                <declaration name="out" type="T[]" line="251"/>
                <scope line="252">
                    <declaration name="unchecked" type="T[]" line="253"/>
                </scope>
                <scope line="256"/>
                <scope line="260"/>
            </method>
        </class>
    </source>