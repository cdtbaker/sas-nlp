<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Vector1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Embedding"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Hyperplane"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Plane" line="30">
            <implements interface="Hyperplane">
                <type_params>
                    <type_param name="Euclidean3D"/>
                </type_params>
            </implements>
            <implements interface="Embedding">
                <type_params>
                    <type_param name="Euclidean3D"/>
                    <type_param name="Euclidean2D"/>
                </type_params>
            </implements>
            <javadoc line="30">
                The class represent planes in a three dimensional space.                
                <version>
                    $Id: Plane.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="originOffset" type="double" line="36"/>
            <javadoc line="36">
                Offset of the origin with respect to the plane.                
            </javadoc>
            <declaration name="origin" type="Vector3D" line="39"/>
            <javadoc line="39">
                Origin of the plane frame.                
            </javadoc>
            <declaration name="u" type="Vector3D" line="42"/>
            <javadoc line="42">
                First vector of the plane frame (in plane).                
            </javadoc>
            <declaration name="v" type="Vector3D" line="45"/>
            <javadoc line="45">
                Second vector of the plane frame (in plane).                
            </javadoc>
            <declaration name="w" type="Vector3D" line="48"/>
            <javadoc line="48">
                Third vector of the plane frame (plane normal).                
            </javadoc>
            <javadoc line="51">
                Build a plane normal to a given direction and containing the origin.                
                <param>
                    normal normal direction to the plane                    
                </param>
                <exception>
                    MathArithmeticException if the normal norm is too small                    
                </exception>
            </javadoc>
            <method name="Plane" type="constructor" line="55">
                <params>
                    <param name="normal" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="61">
                Build a plane from a point and a normal.                
                <param>
                    p point belonging to the plane                    
                </param>
                <param>
                    normal normal direction to the plane                    
                </param>
                <exception>
                    MathArithmeticException if the normal norm is too small                    
                </exception>
            </javadoc>
            <method name="Plane" type="constructor" line="66">
                <params>
                    <param name="p" type="Vector3D"/>
                    <param name="normal" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="72">
                Build a plane from three points.
                  &lt;p&gt;The plane is oriented in the direction of{@code (p2-p1) ^ (p3-p1)}&lt;/p&gt;                
                <param>
                    p1 first point belonging to the plane                    
                </param>
                <param>
                    p2 second point belonging to the plane                    
                </param>
                <param>
                    p3 third point belonging to the plane                    
                </param>
                <exception>
                    MathArithmeticException if the points do not constitute a plane                    
                </exception>
            </javadoc>
            <method name="Plane" type="constructor" line="81">
                <params>
                    <param name="p1" type="Vector3D"/>
                    <param name="p2" type="Vector3D"/>
                    <param name="p3" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="85">
                Copy constructor.
                  &lt;p&gt;The instance created is completely independant of the original
                  one. A deep copy is used, none of the underlying object are
                  shared.&lt;/p&gt;                
                <param>
                    plane plane to copy                    
                </param>
            </javadoc>
            <method name="Plane" type="constructor" line="91">
                <params>
                    <param name="plane" type="Plane"/>
                </params>
            </method>
            <javadoc line="99">
                Copy the instance.
                  &lt;p&gt;The instance created is completely independant of the original
                  one. A deep copy is used, none of the underlying objects are
                  shared (except for immutable objects).&lt;/p&gt;                
                <return>
                    a new hyperplane, copy of the instance                    
                </return>
            </javadoc>
            <method name="copySelf" type="Plane" line="105"/>
            <javadoc line="109">
                Reset the instance as if built from a point and a normal.                
                <param>
                    p point belonging to the plane                    
                </param>
                <param>
                    normal normal direction to the plane                    
                </param>
                <exception>
                    MathArithmeticException if the normal norm is too small                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="114">
                <params>
                    <param name="p" type="Vector3D"/>
                    <param name="normal" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="120">
                Reset the instance from another one.
                  &lt;p&gt;The updated instance is completely independant of the original
                  one. A deep reset is used none of the underlying object is
                  shared.&lt;/p&gt;                
                <param>
                    original plane to reset from                    
                </param>
            </javadoc>
            <method name="reset" type="void" line="126">
                <params>
                    <param name="original" type="Plane"/>
                </params>
            </method>
            <javadoc line="134">
                Set the normal vactor.                
                <param>
                    normal normal direction to the plane (will be copied)                    
                </param>
                <exception>
                    MathArithmeticException if the normal norm is too small                    
                </exception>
            </javadoc>
            <method name="setNormal" type="void" line="138">
                <params>
                    <param name="normal" type="Vector3D"/>
                </params>
                <declaration name="norm" type="double" line="139"/>
                <scope line="140"/>
            </method>
            <javadoc line="146">
                Reset the plane frame.                
            </javadoc>
            <method name="setFrame" type="void" line="148"/>
            <javadoc line="154">
                Get the origin point of the plane frame.
                  &lt;p&gt;The point returned is the orthogonal projection of the
                  3D-space origin in the plane.&lt;/p&gt;                
                <return>
                    the origin point of the plane frame (point closest to the
                      3D-space origin)                    
                </return>
            </javadoc>
            <method name="getOrigin" type="Vector3D" line="160"/>
            <javadoc line="164">
                Get the normalized normal vector.
                  &lt;p&gt;The frame defined by ({@link #getU getU}, {@link #getV getV},{@link #getNormal getNormal}) is a rigth-handed orthonormalized
                  frame).&lt;/p&gt;                
                <return>
                    normalized normal vector                    
                </return>
                <see>
                    #getU                    
                </see>
                <see>
                    #getV                    
                </see>
            </javadoc>
            <method name="getNormal" type="Vector3D" line="172"/>
            <javadoc line="176">
                Get the plane first canonical vector.
                  &lt;p&gt;The frame defined by ({@link #getU getU}, {@link #getV getV},{@link #getNormal getNormal}) is a rigth-handed orthonormalized
                  frame).&lt;/p&gt;                
                <return>
                    normalized first canonical vector                    
                </return>
                <see>
                    #getV                    
                </see>
                <see>
                    #getNormal                    
                </see>
            </javadoc>
            <method name="getU" type="Vector3D" line="184"/>
            <javadoc line="188">
                Get the plane second canonical vector.
                  &lt;p&gt;The frame defined by ({@link #getU getU}, {@link #getV getV},{@link #getNormal getNormal}) is a rigth-handed orthonormalized
                  frame).&lt;/p&gt;                
                <return>
                    normalized second canonical vector                    
                </return>
                <see>
                    #getU                    
                </see>
                <see>
                    #getNormal                    
                </see>
            </javadoc>
            <method name="getV" type="Vector3D" line="196"/>
            <javadoc line="200">
                Revert the plane.
                  &lt;p&gt;Replace the instance by a similar plane with opposite orientation.&lt;/p&gt;
                  &lt;p&gt;The new plane frame is chosen in such a way that a 3D point that had{@code (x, y)} in-plane coordinates and {@code z} offset with
                  respect to the plane and is unaffected by the change will have{@code (y, x)} in-plane coordinates and {@code -z} offset with
                  respect to the new plane. This means that the {@code u} and {@code v}vectors returned by the {@link #getU} and {@link #getV} methods are exchanged,
                  and the {@code w} vector returned by the {@link #getNormal} method is
                  reversed.&lt;/p&gt;                
            </javadoc>
            <method name="revertSelf" type="void" line="211">
                <declaration name="tmp" type="Vector3D" line="212"/>
            </method>
            <javadoc line="219">
                Transform a 3D space point into an in-plane point.                
                <param>
                    point point of the space (must be a {@link Vector3DVector3D} instance)                    
                </param>
                <return>
                    in-plane point (really a {@link org.apache.commons.math3.geometry.euclidean.twod.Vector2D Vector2D} instance)                    
                </return>
                <see>
                    #toSpace                    
                </see>
            </javadoc>
            <method name="toSubSpace" type="Vector2D" line="226">
                <params>
                    <param name="point" type="Vector<Euclidean3D>"/>
                </params>
            </method>
            <javadoc line="230">
                Transform an in-plane point into a 3D space point.                
                <param>
                    point in-plane point (must be a {@link org.apache.commons.math3.geometry.euclidean.twod.Vector2D Vector2D} instance)                    
                </param>
                <return>
                    3D space point (really a {@link Vector3D Vector3D} instance)                    
                </return>
                <see>
                    #toSubSpace                    
                </see>
            </javadoc>
            <method name="toSpace" type="Vector3D" line="236">
                <params>
                    <param name="point" type="Vector<Euclidean2D>"/>
                </params>
                <declaration name="p2D" type="Vector2D" line="237"/>
            </method>
            <javadoc line="241">
                Get one point from the 3D-space.                
                <param>
                    inPlane desired in-plane coordinates for the point in the
                      plane                    
                </param>
                <param>
                    offset desired offset for the point                    
                </param>
                <return>
                    one point in the 3D-space, with given coordinates and offset
                      relative to the plane                    
                </return>
            </javadoc>
            <method name="getPointAt" type="Vector3D" line="248">
                <params>
                    <param name="inPlane" type="Vector2D"/>
                    <param name="offset" type="double"/>
                </params>
            </method>
            <javadoc line="252">
                Check if the instance is similar to another plane.
                  &lt;p&gt;Planes are considered similar if they contain the same
                  points. This does not mean they are equal since they can have
                  opposite normals.&lt;/p&gt;                
                <param>
                    plane plane to which the instance is compared                    
                </param>
                <return>
                    true if the planes are similar                    
                </return>
            </javadoc>
            <method name="isSimilarTo" type="boolean" line="259">
                <params>
                    <param name="plane" type="Plane"/>
                </params>
                <declaration name="angle" type="double" line="260"/>
            </method>
            <javadoc line="265">
                Rotate the plane around the specified point.
                  &lt;p&gt;The instance is not modified, a new instance is created.&lt;/p&gt;                
                <param>
                    center rotation center                    
                </param>
                <param>
                    rotation vectorial rotation operator                    
                </param>
                <return>
                    a new plane                    
                </return>
            </javadoc>
            <method name="rotate" type="Plane" line="271">
                <params>
                    <param name="center" type="Vector3D"/>
                    <param name="rotation" type="Rotation"/>
                </params>
                <comment line="278">
                    make sure the frame is transformed as desired                    
                </comment>
                <declaration name="delta" type="Vector3D" line="273"/>
                <declaration name="plane" type="Plane" line="274"/>
            </method>
            <javadoc line="285">
                Translate the plane by the specified amount.
                  &lt;p&gt;The instance is not modified, a new instance is created.&lt;/p&gt;                
                <param>
                    translation translation to apply                    
                </param>
                <return>
                    a new plane                    
                </return>
            </javadoc>
            <method name="translate" type="Plane" line="290">
                <params>
                    <param name="translation" type="Vector3D"/>
                </params>
                <comment line="295">
                    make sure the frame is transformed as desired                    
                </comment>
                <declaration name="plane" type="Plane" line="292"/>
            </method>
            <javadoc line="302">
                Get the intersection of a line with the instance.                
                <param>
                    line line intersecting the instance                    
                </param>
                <return>
                    intersection point between between the line and the
                      instance (null if the line is parallel to the instance)                    
                </return>
            </javadoc>
            <method name="intersection" type="Vector3D" line="307">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <declaration name="direction" type="Vector3D" line="308"/>
                <declaration name="dot" type="double" line="309"/>
                <scope line="310"/>
                <declaration name="point" type="Vector3D" line="313"/>
                <declaration name="k" type="double" line="314"/>
            </method>
            <javadoc line="318">
                Build the line shared by the instance and another plane.                
                <param>
                    other other plane                    
                </param>
                <return>
                    line at the intersection of the instance and the
                      other plane (really a {@link Line Line} instance)                    
                </return>
            </javadoc>
            <method name="intersection" type="Line" line="323">
                <params>
                    <param name="other" type="Plane"/>
                </params>
                <declaration name="direction" type="Vector3D" line="324"/>
                <scope line="325"/>
                <declaration name="point" type="Vector3D" line="328"/>
            </method>
            <javadoc line="332">
                Get the intersection point of three planes.                
                <param>
                    plane1 first plane1                    
                </param>
                <param>
                    plane2 second plane2                    
                </param>
                <param>
                    plane3 third plane2                    
                </param>
                <return>
                    intersection point of three planes, null if some planes are parallel                    
                </return>
            </javadoc>
            <method name="intersection" type="Vector3D" line="338">
                <params>
                    <param name="plane1" type="Plane"/>
                    <param name="plane2" type="Plane"/>
                    <param name="plane3" type="Plane"/>
                </params>
                <comment line="341">
                    coefficients of the three planes linear equations                    
                </comment>
                <comment line="357">
                    direct Cramer resolution of the linear system
                     (this is still feasible for a 3x3 system)                    
                </comment>
                <declaration name="a1" type="double" line="341"/>
                <declaration name="b1" type="double" line="342"/>
                <declaration name="c1" type="double" line="343"/>
                <declaration name="d1" type="double" line="344"/>
                <declaration name="a2" type="double" line="346"/>
                <declaration name="b2" type="double" line="347"/>
                <declaration name="c2" type="double" line="348"/>
                <declaration name="d2" type="double" line="349"/>
                <declaration name="a3" type="double" line="351"/>
                <declaration name="b3" type="double" line="352"/>
                <declaration name="c3" type="double" line="353"/>
                <declaration name="d3" type="double" line="354"/>
                <declaration name="a23" type="double" line="358"/>
                <declaration name="b23" type="double" line="359"/>
                <declaration name="c23" type="double" line="360"/>
                <declaration name="determinant" type="double" line="361"/>
                <scope line="362"/>
                <declaration name="r" type="double" line="366"/>
            </method>
            <javadoc line="374">
                Build a region covering the whole hyperplane.                
                <return>
                    a region covering the whole hyperplane                    
                </return>
            </javadoc>
            <method name="wholeHyperplane" type="SubPlane" line="377"/>
            <javadoc line="381">
                Build a region covering the whole space.                
                <return>
                    a region containing the instance (really a {@link PolyhedronsSet PolyhedronsSet} instance)                    
                </return>
            </javadoc>
            <method name="wholeSpace" type="PolyhedronsSet" line="385"/>
            <javadoc line="389">
                Check if the instance contains a point.                
                <param>
                    p point to check                    
                </param>
                <return>
                    true if p belongs to the plane                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="393">
                <params>
                    <param name="p" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="397">
                Get the offset (oriented distance) of a parallel plane.
                  &lt;p&gt;This method should be called only for parallel planes otherwise
                  the result is not meaningful.&lt;/p&gt;
                  &lt;p&gt;The offset is 0 if both planes are the same, it is
                  positive if the plane is on the plus side of the instance and
                  negative if it is on the minus side, according to its natural
                  orientation.&lt;/p&gt;                
                <param>
                    plane plane to check                    
                </param>
                <return>
                    offset of the plane                    
                </return>
            </javadoc>
            <method name="getOffset" type="double" line="407">
                <params>
                    <param name="plane" type="Plane"/>
                </params>
            </method>
            <javadoc line="411">
                Get the offset (oriented distance) of a point.
                  &lt;p&gt;The offset is 0 if the point is on the underlying hyperplane,
                  it is positive if the point is on one particular side of the
                  hyperplane, and it is negative if the point is on the other side,
                  according to the hyperplane natural orientation.&lt;/p&gt;                
                <param>
                    point point to check                    
                </param>
                <return>
                    offset of the point                    
                </return>
            </javadoc>
            <method name="getOffset" type="double" line="419">
                <params>
                    <param name="point" type="Vector<Euclidean3D>"/>
                </params>
            </method>
            <javadoc line="423">
                Check if the instance has the same orientation as another hyperplane.                
                <param>
                    other other hyperplane to check against the instance                    
                </param>
                <return>
                    true if the instance and the other hyperplane have
                      the same orientation                    
                </return>
            </javadoc>
            <method name="sameOrientationAs" type="boolean" line="428">
                <params>
                    <param name="other" type="Hyperplane<Euclidean3D>"/>
                </params>
            </method>
        </class>
    </source>