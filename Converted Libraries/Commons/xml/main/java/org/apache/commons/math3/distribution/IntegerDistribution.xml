<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <interface name="IntegerDistribution">
            <javadoc line="4">
                Interface for distributions on the integers.                
                <version>
                    $Id: IntegerDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <method name="probability" type="double" line="9"/>
            <javadoc line="9">
                For a random variable {@code X} whose values are distributed according
                  to this distribution, this method returns {@code P(X = x)}. In other
                  words, this method represents the probability mass function (PMF)
                  for the distribution.                
                <param>
                    x the point at which the PMF is evaluated                    
                </param>
                <return>
                    the value of the probability mass function at {@code x}                    
                </return>
            </javadoc>
            <method name="cumulativeProbability" type="double" line="18"/>
            <javadoc line="18">
                For a random variable {@code X} whose values are distributed according
                  to this distribution, this method returns {@code P(X &lt;= x)}.  In other
                  words, this method represents the (cumulative) distribution function
                  (CDF) for this distribution.                
                <param>
                    x the point at which the CDF is evaluated                    
                </param>
                <return>
                    the probability that a random variable with this
                      distribution takes a value less than or equal to {@code x}                    
                </return>
            </javadoc>
            <method name="cumulativeProbability" type="double" line="28"/>
            <javadoc line="28">
                For a random variable {@code X} whose values are distributed according
                  to this distribution, this method returns {@code P(x0 &lt; X &lt;= x1)}.                
                <param>
                    x0 the exclusive lower bound                    
                </param>
                <param>
                    x1 the inclusive upper bound                    
                </param>
                <return>
                    the probability that a random variable with this distribution
                      will take a value between {@code x0} and {@code x1},
                      excluding the lower and including the upper endpoint                    
                </return>
                <throws>
                    NumberIsTooLargeException if {@code x0 > x1}                    
                </throws>
            </javadoc>
            <method name="inverseCumulativeProbability" type="int" line="39"/>
            <javadoc line="39">
                Computes the quantile function of this distribution.
                  For a random variable {@code X} distributed according to this distribution,
                  the returned value is
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;inf{x in Z | P(X&lt;=x) &gt;= p}&lt;/code&gt; for {@code 0 &lt; p &lt;= 1},&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;inf{x in Z | P(X&lt;=x) &gt; 0}&lt;/code&gt; for {@code p = 0}.&lt;/li&gt;
                  &lt;/ul&gt;
                  If the result exceeds the range of the data type {@code int},
                  then {@code Integer.MIN_VALUE} or {@code Integer.MAX_VALUE} is returned.                
                <param>
                    p the cumulative probability                    
                </param>
                <return>
                    the smallest {@code p}-quantile of this distribution
                      (largest 0-quantile for {@code p = 0})                    
                </return>
                <throws>
                    OutOfRangeException if {@code p < 0} or {@code p > 1}                    
                </throws>
            </javadoc>
            <method name="getNumericalMean" type="double" line="55"/>
            <javadoc line="55">
                Use this method to get the numerical value of the mean of this
                  distribution.                
                <return>
                    the mean or {@code Double.NaN} if it is not defined                    
                </return>
            </javadoc>
            <method name="getNumericalVariance" type="double" line="61"/>
            <javadoc line="61">
                Use this method to get the numerical value of the variance of this
                  distribution.                
                <return>
                    the variance (possibly {@code Double.POSITIVE_INFINITY} or{@code Double.NaN} if it is not defined)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="int" line="67"/>
            <javadoc line="67">
                Access the lower bound of the support. This method must return the same
                  value as {@code inverseCumulativeProbability(0)}. In other words, this
                  method must return
                  &lt;p&gt;&lt;code&gt;inf {x in Z | P(X &lt;= x) &gt; 0}&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    lower bound of the support ({@code Integer.MIN_VALUE}for negative infinity)                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="int" line="75"/>
            <javadoc line="75">
                Access the upper bound of the support. This method must return the same
                  value as {@code inverseCumulativeProbability(1)}. In other words, this
                  method must return
                  &lt;p&gt;&lt;code&gt;inf {x in R | P(X &lt;= x) = 1}&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    upper bound of the support ({@code Integer.MAX_VALUE}for positive infinity)                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="83"/>
            <javadoc line="83">
                Use this method to get information about whether the support is
                  connected, i.e. whether all integers between the lower and upper bound of
                  the support are included in the support.                
                <return>
                    whether the support is connected or not                    
                </return>
            </javadoc>
            <method name="reseedRandomGenerator" type="void" line="90"/>
            <javadoc line="90">
                Reseed the random generator used to generate samples.                
                <param>
                    seed the new seed                    
                </param>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="sample" type="int" line="96"/>
            <javadoc line="96">
                Generate a random value sampled from this distribution.                
                <return>
                    a random value                    
                </return>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="sample" type="int[]" line="102"/>
            <javadoc line="102">
                Generate a random sample from the distribution.                
                <param>
                    sampleSize the number of random values to generate                    
                </param>
                <return>
                    an array representing the random sample                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif {@code sampleSize} is not positive                    
                </throws>
                <since>
                    3.0                    
                </since>
            </javadoc>
        </interface>
    </source>