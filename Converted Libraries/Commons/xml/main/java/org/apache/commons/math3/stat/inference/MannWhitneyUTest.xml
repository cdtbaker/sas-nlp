<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.inference">
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.ranking.NaNStrategy"/>
        <import package="org.apache.commons.math3.stat.ranking.NaturalRanking"/>
        <import package="org.apache.commons.math3.stat.ranking.TiesStrategy"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="MannWhitneyUTest" line="11">
            <javadoc line="11">
                An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum test).                
                <version>
                    $Id: MannWhitneyUTest.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="naturalRanking" type="NaturalRanking" line="16"/>
            <javadoc line="16">
                Ranking algorithm.                
            </javadoc>
            <javadoc line="20">
                Create a test instance using where NaN&apos;s are left in place and ties get
                  the average of applicable ranks. Use this unless you are very sure of
                  what you are doing.                
            </javadoc>
            <method name="MannWhitneyUTest" type="constructor" line="25"/>
            <javadoc line="28">
                Create a test instance using the given strategies for NaN&apos;s and ties.
                  Only use this if you are sure of what you are doing.                
                <param>
                    nanStrategyspecifies the strategy that should be used for Double.NaN's                    
                </param>
                <param>
                    tiesStrategyspecifies the strategy that should be used for ties                    
                </param>
            </javadoc>
            <method name="MannWhitneyUTest" type="constructor" line="34">
                <params>
                    <param name="nanStrategy" type="NaNStrategy"/>
                    <param name="tiesStrategy" type="TiesStrategy"/>
                </params>
            </method>
            <javadoc line="37">
                Ensures that the provided arrays fulfills the assumptions.                
                <param>
                    x first sample                    
                </param>
                <param>
                    y second sample                    
                </param>
                <throws>
                    NullArgumentException if {@code x} or {@code y} are {@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code x} or {@code y} are zero-length.                    
                </throws>
            </javadoc>
            <method name="ensureDataConformance" type="void" line="44">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="45"/>
                <scope line="48"/>
            </method>
            <javadoc line="52">
                Concatenate the samples into one array.                
                <param>
                    x first sample                    
                </param>
                <param>
                    y second sample                    
                </param>
                <return>
                    concatenated array                    
                </return>
            </javadoc>
            <method name="concatenateSamples" type="double[]" line="58">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <declaration name="z" type="double[]" line="59"/>
            </method>
            <javadoc line="64">
                Computes the &lt;a
                  href=&quot;http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U&quot;&gt; Mann-Whitney
                  U statistic&lt;/a&gt; comparing mean for two independent samples possibly of
                  different length.
                  &lt;p&gt;
                  This statistic can be used to perform a Mann-Whitney U test evaluating
                  the null hypothesis that the two independent samples has equal mean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Let X&lt;sub&gt;i&lt;/sub&gt; denote the i&apos;th individual of the first sample and
                  Y&lt;sub&gt;j&lt;/sub&gt; the j&apos;th individual in the second sample. Note that the
                  samples would often have different length.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;All observations in the two samples are independent.&lt;/li&gt;
                  &lt;li&gt;The observations are at least ordinal (continuous are also ordinal).&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    x the first sample                    
                </param>
                <param>
                    y the second sample                    
                </param>
                <return>
                    Mann-Whitney U statistic (maximum of U<sup>x</sup> and U<sup>y</sup>)                    
                </return>
                <throws>
                    NullArgumentException if {@code x} or {@code y} are {@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code x} or {@code y} are zero-length.                    
                </throws>
            </javadoc>
            <method name="mannWhitneyU" type="double" line="91">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <declaration name="z" type="double[]" line="93"/>
                <declaration name="ranks" type="double[]" line="94"/>
                <declaration name="sumRankX" type="double" line="95"/>
                <scope line="96"/>
                <declaration name="U1" type="double" line="99"/>
                <declaration name="U2" type="double" line="100"/>
            </method>
            <javadoc line="103">
                @param Umin smallest Mann-Whitney U value                
                <param>
                    n1 number of subjects in first sample                    
                </param>
                <param>
                    n2 number of subjects in second sample                    
                </param>
                <return>
                    two-sided asymptotic p-value                    
                </return>
                <throws>
                    ConvergenceException if the p-value can not be computed
                      due to a convergence error                    
                </throws>
                <throws>
                    MaxCountExceededException if the maximum number of
                      iterations is exceeded                    
                </throws>
            </javadoc>
            <method name="calculateAsymptoticPValue" type="double" line="113">
                <params>
                    <param name="Umin" type="double"/>
                    <param name="n1" type="int"/>
                    <param name="n2" type="int"/>
                </params>
                <declaration name="n1n2prod" type="long" line="114"/>
                <declaration name="EU" type="double" line="115"/>
                <declaration name="VarU" type="double" line="116"/>
                <declaration name="z" type="double" line="117"/>
                <declaration name="standardNormal" type="NormalDistribution" line="118"/>
            </method>
            <javadoc line="121">
                Returns the asymptotic &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
                  &quot;http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue&quot;&gt;
                  p-value&lt;/a&gt;, associated with a &lt;a
                  href=&quot;http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U&quot;&gt; Mann-Whitney
                  U statistic&lt;/a&gt; comparing mean for two independent samples.
                  &lt;p&gt;
                  Let X&lt;sub&gt;i&lt;/sub&gt; denote the i&apos;th individual of the first sample and
                  Y&lt;sub&gt;j&lt;/sub&gt; the j&apos;th individual in the second sample. Note that the
                  samples would often have different length.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;All observations in the two samples are independent.&lt;/li&gt;
                  &lt;li&gt;The observations are at least ordinal (continuous are also ordinal).&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;&lt;p&gt;
                  Ties give rise to biased variance at the moment. See e.g. &lt;a
                  href=&quot;http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf&quot;
                  &gt;http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf&lt;/a&gt;.&lt;/p&gt;                
                <param>
                    x the first sample                    
                </param>
                <param>
                    y the second sample                    
                </param>
                <return>
                    asymptotic p-value                    
                </return>
                <throws>
                    NullArgumentException if {@code x} or {@code y} are {@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code x} or {@code y} are zero-length.                    
                </throws>
                <throws>
                    ConvergenceException if the p-value can not be computed due to a
                      convergence error                    
                </throws>
                <throws>
                    MaxCountExceededException if the maximum number of iterations
                      is exceeded                    
                </throws>
            </javadoc>
            <method name="mannWhitneyUTest" type="double" line="152">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <declaration name="Umax" type="double" line="154"/>
                <declaration name="Umin" type="double" line="155"/>
            </method>
        </class>
    </source>