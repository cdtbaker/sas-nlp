<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="ZipfDistribution" line="26">
            <extends class="AbstractIntegerDistribution"/>
            <javadoc line="26">
                Implementation of the Zipf distribution.                
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/ZipfDistribution.html&quot;&gt;Zipf distribution (MathWorld)&lt;/a&gt;                    
                </see>
                <version>
                    $Id: ZipfDistribution.java 1533974 2013-10-20 20:42:41Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="33"/>
            <javadoc line="33">
                Serializable version identifier.                
            </javadoc>
            <declaration name="numberOfElements" type="int" line="35"/>
            <javadoc line="35">
                Number of elements.                
            </javadoc>
            <declaration name="exponent" type="double" line="37"/>
            <javadoc line="37">
                Exponent parameter of the distribution.                
            </javadoc>
            <declaration name="numericalMean" type="double" line="39"/>
            <javadoc line="39">
                Cached numerical mean                
            </javadoc>
            <declaration name="numericalMeanIsCalculated" type="boolean" line="41"/>
            <javadoc line="41">
                Whether or not the numerical mean has been calculated                
            </javadoc>
            <declaration name="numericalVariance" type="double" line="43"/>
            <javadoc line="43">
                Cached numerical variance                
            </javadoc>
            <declaration name="numericalVarianceIsCalculated" type="boolean" line="45"/>
            <javadoc line="45">
                Whether or not the numerical variance has been calculated                
            </javadoc>
            <javadoc line="48">
                Create a new Zipf distribution with the given number of elements and
                  exponent.                
                <param>
                    numberOfElements Number of elements.                    
                </param>
                <param>
                    exponent Exponent.                    
                </param>
                <exception>
                    NotStrictlyPositiveException if {@code numberOfElements &lt;= 0}or {@code exponent &lt;= 0}.                    
                </exception>
            </javadoc>
            <method name="ZipfDistribution" type="constructor" line="57">
                <params>
                    <param name="numberOfElements" type="int"/>
                    <param name="exponent" type="double"/>
                </params>
            </method>
            <javadoc line="61">
                Creates a Zipf distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    numberOfElements Number of elements.                    
                </param>
                <param>
                    exponent Exponent.                    
                </param>
                <exception>
                    NotStrictlyPositiveException if {@code numberOfElements &lt;= 0}or {@code exponent &lt;= 0}.                    
                </exception>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="ZipfDistribution" type="constructor" line="74">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="numberOfElements" type="int"/>
                    <param name="exponent" type="double"/>
                </params>
                <scope line="77"/>
                <scope line="81"/>
            </method>
            <javadoc line="90">
                Get the number of elements (e.g. corpus size) for the distribution.                
                <return>
                    the number of elements                    
                </return>
            </javadoc>
            <method name="getNumberOfElements" type="int" line="95"/>
            <javadoc line="99">
                Get the exponent characterizing the distribution.                
                <return>
                    the exponent                    
                </return>
            </javadoc>
            <method name="getExponent" type="double" line="104"/>
            <javadoc line="108">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="109">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="110"/>
            </method>
            <javadoc line="117">
                {@inheritDoc}                
            </javadoc>
            <method name="logProbability" type="double" line="119">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="120"/>
            </method>
            <javadoc line="127">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="128">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="129"/>
                <scope line="131"/>
            </method>
            <javadoc line="138">
                {@inheritDoc}For number of elements {@code N} and exponent {@code s}, the mean is{@code Hs1 / Hs}, where
                  &lt;ul&gt;
                  &lt;li&gt;{@code Hs1 = generalizedHarmonic(N, s - 1)},&lt;/li&gt;
                  &lt;li&gt;{@code Hs = generalizedHarmonic(N, s)}.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="getNumericalMean" type="double" line="148">
                <scope line="149"/>
            </method>
            <javadoc line="156">
                Used by {@link #getNumericalMean()}.                
                <return>
                    the mean of this distribution                    
                </return>
            </javadoc>
            <method name="calculateNumericalMean" type="double" line="161">
                <declaration name="N" type="int" line="162"/>
                <declaration name="s" type="double" line="163"/>
                <declaration name="Hs1" type="double" line="165"/>
                <declaration name="Hs" type="double" line="166"/>
            </method>
            <javadoc line="171">
                {@inheritDoc}For number of elements {@code N} and exponent {@code s}, the mean is{@code (Hs2 / Hs) - (Hs1^2 / Hs^2)}, where
                  &lt;ul&gt;
                  &lt;li&gt;{@code Hs2 = generalizedHarmonic(N, s - 2)},&lt;/li&gt;
                  &lt;li&gt;{@code Hs1 = generalizedHarmonic(N, s - 1)},&lt;/li&gt;
                  &lt;li&gt;{@code Hs = generalizedHarmonic(N, s)}.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="182">
                <scope line="183"/>
            </method>
            <javadoc line="190">
                Used by {@link #getNumericalVariance()}.                
                <return>
                    the variance of this distribution                    
                </return>
            </javadoc>
            <method name="calculateNumericalVariance" type="double" line="195">
                <declaration name="N" type="int" line="196"/>
                <declaration name="s" type="double" line="197"/>
                <declaration name="Hs2" type="double" line="199"/>
                <declaration name="Hs1" type="double" line="200"/>
                <declaration name="Hs" type="double" line="201"/>
            </method>
            <javadoc line="206">
                Calculates the Nth generalized harmonic number. See
                  &lt;a href=&quot;http://mathworld.wolfram.com/HarmonicSeries.html&quot;&gt;Harmonic
                  Series&lt;/a&gt;.                
                <param>
                    n Term in the series to calculate (must be larger than 1)                    
                </param>
                <param>
                    m Exponent (special case {@code m = 1} is the harmonic series).                    
                </param>
                <return>
                    the n&lt;sup&gt;th&lt;/sup&gt; generalized harmonic number.                    
                </return>
            </javadoc>
            <method name="generalizedHarmonic" type="double" line="215">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="double"/>
                </params>
                <declaration name="value" type="double" line="216"/>
                <scope line="217"/>
            </method>
            <javadoc line="223">
                {@inheritDoc}The lower bound of the support is always 1 no matter the parameters.                
                <return>
                    lower bound of the support (always 1)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="int" line="230"/>
            <javadoc line="234">
                {@inheritDoc}The upper bound of the support is the number of elements.                
                <return>
                    upper bound of the support                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="int" line="241"/>
            <javadoc line="245">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="252"/>
        </class>
    </source>