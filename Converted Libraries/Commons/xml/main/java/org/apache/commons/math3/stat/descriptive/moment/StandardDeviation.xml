<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.moment">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="StandardDeviation" line="8">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <javadoc line="8">
                Computes the sample standard deviation.  The standard deviation
                  is the positive square root of the variance.  This implementation wraps a{@link Variance} instance.  The &lt;code&gt;isBiasCorrected&lt;/code&gt; property of the
                  wrapped Variance instance is exposed, so that this class can be used to
                  compute both the &quot;sample standard deviation&quot; (the square root of the
                  bias-corrected &quot;sample variance&quot;) or the &quot;population standard deviation&quot;
                  (the square root of the non-bias-corrected &quot;population variance&quot;). See{@link Variance} for more information.
                  &lt;p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <version>
                    $Id: StandardDeviation.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="23"/>
            <javadoc line="23">
                Serializable version identifier                
            </javadoc>
            <declaration name="variance" type="Variance" line="27"/>
            <javadoc line="27">
                Wrapped Variance instance                
            </javadoc>
            <javadoc line="31">
                Constructs a StandardDeviation.  Sets the underlying {@link Variance}instance&apos;s &lt;code&gt;isBiasCorrected&lt;/code&gt; property to true.                
            </javadoc>
            <method name="StandardDeviation" type="constructor" line="34"/>
            <javadoc line="37">
                Constructs a StandardDeviation from an external second moment.                
                <param>
                    m2 the external moment                    
                </param>
            </javadoc>
            <method name="StandardDeviation" type="constructor" line="41">
                <params>
                    <param name="m2" type="SecondMoment"/>
                </params>
            </method>
            <javadoc line="44">
                Copy constructor, creates a new {@code StandardDeviation} identical
                  to the {@code original}                
                <param>
                    original the {@code StandardDeviation} instance to copy                    
                </param>
                <throws>
                    NullArgumentException if original is null                    
                </throws>
            </javadoc>
            <method name="StandardDeviation" type="constructor" line="50">
                <params>
                    <param name="original" type="StandardDeviation"/>
                </params>
            </method>
            <javadoc line="53">
                Contructs a StandardDeviation with the specified value for the
                  &lt;code&gt;isBiasCorrected&lt;/code&gt; property.  If this property is set to
                  &lt;code&gt;true&lt;/code&gt;, the {@link Variance} used in computing results will
                  use the bias-corrected, or &quot;sample&quot; formula.  See {@link Variance} for
                  details.                
                <param>
                    isBiasCorrected  whether or not the variance computation will use
                      the bias-corrected formula                    
                </param>
            </javadoc>
            <method name="StandardDeviation" type="constructor" line="62">
                <params>
                    <param name="isBiasCorrected" type="boolean"/>
                </params>
            </method>
            <javadoc line="65">
                Contructs a StandardDeviation with the specified value for the
                  &lt;code&gt;isBiasCorrected&lt;/code&gt; property and the supplied external moment.
                  If &lt;code&gt;isBiasCorrected&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the{@link Variance} used in computing results will use the bias-corrected,
                  or &quot;sample&quot; formula.  See {@link Variance} for details.                
                <param>
                    isBiasCorrected  whether or not the variance computation will use
                      the bias-corrected formula                    
                </param>
                <param>
                    m2 the external moment                    
                </param>
            </javadoc>
            <method name="StandardDeviation" type="constructor" line="74">
                <params>
                    <param name="isBiasCorrected" type="boolean"/>
                    <param name="m2" type="SecondMoment"/>
                </params>
            </method>
            <javadoc line="77">
                {@inheritDoc}                
            </javadoc>
            <method name="increment" type="void" line="80">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="83">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="86"/>
            <javadoc line="89">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="92"/>
            <javadoc line="95">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="98"/>
            <javadoc line="101">
                Returns the Standard Deviation of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the standard deviation of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="114">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="117">
                Returns the Standard Deviation of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample. &lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the standard deviation of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="134">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="137">
                Returns the Standard Deviation of the entries in the specified portion of
                  the input array, using the precomputed mean value.  Returns
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the standard deviation of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="160">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="163">
                Returns the Standard Deviation of the entries in the input array, using
                  the precomputed mean value.  Returns
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <return>
                    the standard deviation of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="183">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                </params>
            </method>
            <javadoc line="186">
                @return Returns the isBiasCorrected.                
            </javadoc>
            <method name="isBiasCorrected" type="boolean" line="189"/>
            <javadoc line="192">
                @param isBiasCorrected The isBiasCorrected to set.                
            </javadoc>
            <method name="setBiasCorrected" type="void" line="195">
                <params>
                    <param name="isBiasCorrected" type="boolean"/>
                </params>
            </method>
            <javadoc line="198">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="StandardDeviation" line="201">
                <declaration name="result" type="StandardDeviation" line="202"/>
            </method>
            <javadoc line="206">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source StandardDeviation to copy                    
                </param>
                <param>
                    dest StandardDeviation to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="213">
                <params>
                    <param name="source" type="StandardDeviation"/>
                    <param name="dest" type="StandardDeviation"/>
                </params>
            </method>
        </class>
    </source>