<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="BitsStreamGenerator" line="5">
            <implements interface="RandomGenerator"/>
            <implements interface="Serializable"/>
            <javadoc line="5">
                Base class for random number generators that generates bits streams.                
                <version>
                    $Id: BitsStreamGenerator.java 1454897 2013-03-10 19:02:54Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="11"/>
            <javadoc line="11">
                Serializable version identifier                
            </javadoc>
            <declaration name="nextGaussian" type="double" line="15"/>
            <javadoc line="15">
                Next gaussian.                
            </javadoc>
            <javadoc line="19">
                Creates a new random number generator.                
            </javadoc>
            <method name="BitsStreamGenerator" type="constructor" line="22"/>
            <method name="setSeed" type="void" line="25"/>
            <javadoc line="25">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="29"/>
            <javadoc line="29">
                {@inheritDoc}                
            </javadoc>
            <method name="setSeed" type="void" line="33"/>
            <javadoc line="33">
                {@inheritDoc}                
            </javadoc>
            <method name="next" type="int" line="37"/>
            <javadoc line="37">
                Generate next pseudorandom number.
                  &lt;p&gt;This method is the core generation algorithm. It is used by all the
                  public generation methods for the various primitive types {@link #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},{@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},{@link #next(int)} and {@link #nextLong()}.&lt;/p&gt;                
                <param>
                    bits number of random bits to produce                    
                </param>
                <return>
                    random bits generated                    
                </return>
            </javadoc>
            <javadoc line="45">
                {@inheritDoc}                
            </javadoc>
            <method name="nextBoolean" type="boolean" line="48"/>
            <javadoc line="51">
                {@inheritDoc}                
            </javadoc>
            <method name="nextBytes" type="void" line="54">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <declaration name="i" type="int" line="55"/>
                <declaration name="iEnd" type="int" line="56"/>
                <scope line="57">
                    <declaration name="random" type="int" line="58"/>
                </scope>
                <declaration name="random" type="int" line="65"/>
                <scope line="66"/>
            </method>
            <javadoc line="71">
                {@inheritDoc}                
            </javadoc>
            <method name="nextDouble" type="double" line="74"/>
            <javadoc line="79">
                {@inheritDoc}                
            </javadoc>
            <method name="nextFloat" type="float" line="82"/>
            <javadoc line="85">
                {@inheritDoc}                
            </javadoc>
            <method name="nextGaussian" type="double" line="88">
                <declaration name="random" type="double" line="89"/>
                <scope line="90">
                    <declaration name="x" type="double" line="91"/>
                    <declaration name="y" type="double" line="92"/>
                    <declaration name="alpha" type="double" line="93"/>
                    <declaration name="r" type="double" line="94"/>
                </scope>
                <scope line="98"/>
            </method>
            <javadoc line="104">
                {@inheritDoc}                
            </javadoc>
            <method name="nextInt" type="int" line="107"/>
            <javadoc line="110">
                {@inheritDoc}&lt;p&gt;This default implementation is copied from Apache Harmony
                  java.util.Random (r929253).&lt;/p&gt;
                  &lt;p&gt;Implementation notes: &lt;ul&gt;
                  &lt;li&gt;If n is a power of 2, this method returns{@code (int) ((n  (long) next(31)) &gt;&gt; 31)}.&lt;/li&gt;
                  &lt;li&gt;If n is not a power of 2, what is returned is {@code next(31) % n}with {@code next(31)} values rejected (i.e. regenerated) until a
                  value that is larger than the remainder of {@code Integer.MAX_VALUE / n}is generated. Rejection of this initial segment is necessary to ensure
                  a uniform distribution.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
            </javadoc>
            <method name="nextInt" type="int" line="119">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="120">
                    <scope line="121"/>
                    <declaration name="bits" type="int" line="124"/>
                    <declaration name="val" type="int" line="125"/>
                    <scope line="126"/>
                </scope>
            </method>
            <javadoc line="135">
                {@inheritDoc}                
            </javadoc>
            <method name="nextLong" type="long" line="138">
                <declaration name="high" type="long" line="139"/>
                <declaration name="low" type="long" line="140"/>
            </method>
            <javadoc line="143">
                Returns a pseudorandom, uniformly distributed &lt;tt&gt;long&lt;/tt&gt; value
                  between 0 (inclusive) and the specified value (exclusive), drawn from
                  this random number generator&apos;s sequence.                
                <param>
                    n the bound on the random number to be returned.  Must be
                      positive.                    
                </param>
                <return>
                    a pseudorandom, uniformly distributed <tt>long</tt>
                      value between 0 (inclusive) and n (exclusive).                    
                </return>
                <throws>
                    IllegalArgumentException  if n is not positive.                    
                </throws>
            </javadoc>
            <method name="nextLong" type="long" line="153">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="154">
                    <declaration name="bits" type="long" line="155"/>
                    <declaration name="val" type="long" line="156"/>
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="167">
                Clears the cache used by the default implementation of{@link #nextGaussian}.                
            </javadoc>
            <method name="clear" type="void" line="170"/>
        </class>
    </source>