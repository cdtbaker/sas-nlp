<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.inference">
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.stat.ranking.NaNStrategy"/>
        <import package="org.apache.commons.math3.stat.ranking.NaturalRanking"/>
        <import package="org.apache.commons.math3.stat.ranking.TiesStrategy"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="WilcoxonSignedRankTest" line="13">
            <javadoc line="13">
                An implementation of the Wilcoxon signed-rank test.                
                <version>
                    $Id: WilcoxonSignedRankTest.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="naturalRanking" type="NaturalRanking" line="18"/>
            <javadoc line="18">
                Ranking algorithm.                
            </javadoc>
            <javadoc line="22">
                Create a test instance where NaN&apos;s are left in place and ties get
                  the average of applicable ranks. Use this unless you are very sure
                  of what you are doing.                
            </javadoc>
            <method name="WilcoxonSignedRankTest" type="constructor" line="27"/>
            <javadoc line="30">
                Create a test instance using the given strategies for NaN&apos;s and ties.
                  Only use this if you are sure of what you are doing.                
                <param>
                    nanStrategyspecifies the strategy that should be used for Double.NaN's                    
                </param>
                <param>
                    tiesStrategyspecifies the strategy that should be used for ties                    
                </param>
            </javadoc>
            <method name="WilcoxonSignedRankTest" type="constructor" line="36">
                <params>
                    <param name="nanStrategy" type="NaNStrategy"/>
                    <param name="tiesStrategy" type="TiesStrategy"/>
                </params>
            </method>
            <javadoc line="39">
                Ensures that the provided arrays fulfills the assumptions.                
                <param>
                    x first sample                    
                </param>
                <param>
                    y second sample                    
                </param>
                <throws>
                    NullArgumentException if {@code x} or {@code y} are {@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code x} or {@code y} are zero-length.                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code x} and {@code y} do not
                      have the same length.                    
                </throws>
            </javadoc>
            <method name="ensureDataConformance" type="void" line="48">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="49"/>
                <scope line="52"/>
                <scope line="55"/>
            </method>
            <javadoc line="59">
                Calculates y[i] - x[i] for all i                
                <param>
                    x first sample                    
                </param>
                <param>
                    y second sample                    
                </param>
                <return>
                    z = y - x                    
                </return>
            </javadoc>
            <method name="calculateDifferences" type="double[]" line="65">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <declaration name="z" type="double[]" line="66"/>
                <scope line="67"/>
            </method>
            <javadoc line="72">
                Calculates |z[i]| for all i                
                <param>
                    z sample                    
                </param>
                <return>
                    |z|                    
                </return>
                <throws>
                    NullArgumentException if {@code z} is {@code null}                    
                </throws>
                <throws>
                    NoDataException if {@code z} is zero-length.                    
                </throws>
            </javadoc>
            <method name="calculateAbsoluteDifferences" type="double[]" line="79">
                <params>
                    <param name="z" type="double[]"/>
                </params>
                <scope line="80"/>
                <scope line="83"/>
                <declaration name="zAbs" type="double[]" line="86"/>
                <scope line="87"/>
            </method>
            <javadoc line="92">
                Computes the &lt;a
                  href=&quot;http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test&quot;&gt;
                  Wilcoxon signed ranked statistic&lt;/a&gt; comparing mean for two related
                  samples or repeated measurements on a single sample.
                  &lt;p&gt;
                  This statistic can be used to perform a Wilcoxon signed ranked test
                  evaluating the null hypothesis that the two related samples or repeated
                  measurements on a single sample has equal mean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Let X&lt;sub&gt;i&lt;/sub&gt; denote the i&apos;th individual of the first sample and
                  Y&lt;sub&gt;i&lt;/sub&gt; the related i&apos;th individual in the second sample. Let
                  Z&lt;sub&gt;i&lt;/sub&gt; = Y&lt;sub&gt;i&lt;/sub&gt; - X&lt;sub&gt;i&lt;/sub&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;The differences Z&lt;sub&gt;i&lt;/sub&gt; must be independent.&lt;/li&gt;
                  &lt;li&gt;Each Z&lt;sub&gt;i&lt;/sub&gt; comes from a continuous population (they must be
                  identical) and is symmetric about a common median.&lt;/li&gt;
                  &lt;li&gt;The values that X&lt;sub&gt;i&lt;/sub&gt; and Y&lt;sub&gt;i&lt;/sub&gt; represent are
                  ordered, so the comparisons greater than, less than, and equal to are
                  meaningful.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    x the first sample                    
                </param>
                <param>
                    y the second sample                    
                </param>
                <return>
                    wilcoxonSignedRank statistic (the larger of W+ and W-)                    
                </return>
                <throws>
                    NullArgumentException if {@code x} or {@code y} are {@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code x} or {@code y} are zero-length.                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code x} and {@code y} do not
                      have the same length.                    
                </throws>
            </javadoc>
            <method name="wilcoxonSignedRank" type="double" line="126">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <declaration name="z" type="double[]" line="128"/>
                <declaration name="zAbs" type="double[]" line="129"/>
                <declaration name="ranks" type="double[]" line="130"/>
                <declaration name="Wplus" type="double" line="131"/>
                <scope line="132">
                    <scope line="133"/>
                </scope>
                <declaration name="N" type="int" line="137"/>
                <declaration name="Wminus" type="double" line="138"/>
            </method>
            <javadoc line="141">
                Algorithm inspired by
                  http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html#C
                  by Rob van Son, Institute of Phonetic Sciences &amp; IFOTT,
                  University of Amsterdam                
                <param>
                    Wmax largest Wilcoxon signed rank value                    
                </param>
                <param>
                    N number of subjects (corresponding to x.length)                    
                </param>
                <return>
                    two-sided exact p-value                    
                </return>
            </javadoc>
            <method name="calculateExactPValue" type="double" line="150">
                <params>
                    <param name="Wmax" type="double"/>
                    <param name="N" type="int"/>
                </params>
                <declaration name="m" type="int" line="151"/>
                <declaration name="largerRankSums" type="int" line="152"/>
                <scope line="153">
                    <declaration name="rankSum" type="int" line="154"/>
                    <scope line="155">
                        <scope line="156"/>
                    </scope>
                    <scope line="160"/>
                </scope>
            </method>
            <javadoc line="166">
                @param Wmin smallest Wilcoxon signed rank value                
                <param>
                    N number of subjects (corresponding to x.length)                    
                </param>
                <return>
                    two-sided asymptotic p-value                    
                </return>
            </javadoc>
            <method name="calculateAsymptoticPValue" type="double" line="171">
                <params>
                    <param name="Wmin" type="double"/>
                    <param name="N" type="int"/>
                </params>
                <declaration name="ES" type="double" line="172"/>
                <declaration name="VarS" type="double" line="173"/>
                <declaration name="z" type="double" line="174"/>
                <declaration name="standardNormal" type="NormalDistribution" line="175"/>
            </method>
            <javadoc line="178">
                Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
                  &quot;http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue&quot;&gt;
                  p-value&lt;/a&gt;, associated with a &lt;a
                  href=&quot;http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test&quot;&gt;
                  Wilcoxon signed ranked statistic&lt;/a&gt; comparing mean for two related
                  samples or repeated measurements on a single sample.
                  &lt;p&gt;
                  Let X&lt;sub&gt;i&lt;/sub&gt; denote the i&apos;th individual of the first sample and
                  Y&lt;sub&gt;i&lt;/sub&gt; the related i&apos;th individual in the second sample. Let
                  Z&lt;sub&gt;i&lt;/sub&gt; = Y&lt;sub&gt;i&lt;/sub&gt; - X&lt;sub&gt;i&lt;/sub&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;The differences Z&lt;sub&gt;i&lt;/sub&gt; must be independent.&lt;/li&gt;
                  &lt;li&gt;Each Z&lt;sub&gt;i&lt;/sub&gt; comes from a continuous population (they must be
                  identical) and is symmetric about a common median.&lt;/li&gt;
                  &lt;li&gt;The values that X&lt;sub&gt;i&lt;/sub&gt; and Y&lt;sub&gt;i&lt;/sub&gt; represent are
                  ordered, so the comparisons greater than, less than, and equal to are
                  meaningful.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    x the first sample                    
                </param>
                <param>
                    y the second sample                    
                </param>
                <param>
                    exactPValueif the exact p-value is wanted (only works for x.length <= 30,
                      if true and x.length > 30, this is ignored because
                      calculations may take too long)                    
                </param>
                <return>
                    p-value                    
                </return>
                <throws>
                    NullArgumentException if {@code x} or {@code y} are {@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code x} or {@code y} are zero-length.                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code x} and {@code y} do not
                      have the same length.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code exactPValue} is {@code true}and {@code x.length} > 30                    
                </throws>
                <throws>
                    ConvergenceException if the p-value can not be computed due to
                      a convergence error                    
                </throws>
                <throws>
                    MaxCountExceededException if the maximum number of iterations
                      is exceeded                    
                </throws>
            </javadoc>
            <method name="wilcoxonSignedRankTest" type="double" line="217">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                    <param name="exactPValue" type="boolean"/>
                </params>
                <declaration name="N" type="int" line="219"/>
                <declaration name="Wmax" type="double" line="220"/>
                <scope line="221"/>
                <scope line="224"/>
                <scope line="227">
                    <declaration name="Wmin" type="double" line="228"/>
                </scope>
            </method>
        </class>
    </source>