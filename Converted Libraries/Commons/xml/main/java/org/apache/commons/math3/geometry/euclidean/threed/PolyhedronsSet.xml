<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.util.Collection"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.SubLine"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.AbstractRegion"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTree"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BoundaryAttribute"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Hyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Region"/>
        <import package="org.apache.commons.math3.geometry.partitioning.RegionFactory"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Transform"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="PolyhedronsSet" line="19">
            <extends class="AbstractRegion">
                <type_params>
                    <type_param name="Euclidean3D"/>
                    <type_param name="Euclidean2D"/>
                </type_params>
            </extends>
            <javadoc line="19">
                This class represents a 3D region: a set of polyhedrons.                
                <version>
                    $Id: PolyhedronsSet.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <javadoc line="25">
                Build a polyhedrons set representing the whole real line.                
            </javadoc>
            <method name="PolyhedronsSet" type="constructor" line="28"/>
            <javadoc line="31">
                Build a polyhedrons set from a BSP tree.
                  &lt;p&gt;The leaf nodes of the BSP tree &lt;em&gt;must&lt;/em&gt; have a{@code Boolean} attribute representing the inside status of
                  the corresponding cell (true for inside cells, false for outside
                  cells). In order to avoid building too many small objects, it is
                  recommended to use the predefined constants{@code Boolean.TRUE} and {@code Boolean.FALSE}&lt;/p&gt;                
                <param>
                    tree inside/outside BSP tree representing the region                    
                </param>
            </javadoc>
            <method name="PolyhedronsSet" type="constructor" line="39">
                <params>
                    <param name="tree" type="BSPTree<Euclidean3D>"/>
                </params>
            </method>
            <javadoc line="42">
                Build a polyhedrons set from a Boundary REPresentation (B-rep).
                  &lt;p&gt;The boundary is provided as a collection of {@link SubHyperplane sub-hyperplanes}. Each sub-hyperplane has the
                  interior part of the region on its minus side and the exterior on
                  its plus side.&lt;/p&gt;
                  &lt;p&gt;The boundary elements can be in any order, and can form
                  several non-connected sets (like for example polyhedrons with holes
                  or a set of disjoint polyhedrons considered as a whole). In
                  fact, the elements do not even need to be connected together
                  (their topological connections are not used here). However, if the
                  boundary does not really separate an inside open from an outside
                  open (open having here its topological meaning), then subsequent
                  calls to the {@link Region#checkPoint(Vector) checkPoint} method will
                  not be meaningful anymore.&lt;/p&gt;
                  &lt;p&gt;If the boundary is empty, the region will represent the whole
                  space.&lt;/p&gt;                
                <param>
                    boundary collection of boundary elements, as a
                      collection of {@link SubHyperplane SubHyperplane} objects                    
                </param>
            </javadoc>
            <method name="PolyhedronsSet" type="constructor" line="61">
                <params>
                    <param name="boundary" type="Collection<SubHyperplane<Euclidean3D>>"/>
                </params>
            </method>
            <javadoc line="64">
                Build a parallellepipedic box.                
                <param>
                    xMin low bound along the x direction                    
                </param>
                <param>
                    xMax high bound along the x direction                    
                </param>
                <param>
                    yMin low bound along the y direction                    
                </param>
                <param>
                    yMax high bound along the y direction                    
                </param>
                <param>
                    zMin low bound along the z direction                    
                </param>
                <param>
                    zMax high bound along the z direction                    
                </param>
            </javadoc>
            <method name="PolyhedronsSet" type="constructor" line="73">
                <params>
                    <param name="xMin" type="double"/>
                    <param name="xMax" type="double"/>
                    <param name="yMin" type="double"/>
                    <param name="yMax" type="double"/>
                    <param name="zMin" type="double"/>
                    <param name="zMax" type="double"/>
                </params>
            </method>
            <javadoc line="76">
                Build a parallellepipedic box boundary.                
                <param>
                    xMin low bound along the x direction                    
                </param>
                <param>
                    xMax high bound along the x direction                    
                </param>
                <param>
                    yMin low bound along the y direction                    
                </param>
                <param>
                    yMax high bound along the y direction                    
                </param>
                <param>
                    zMin low bound along the z direction                    
                </param>
                <param>
                    zMax high bound along the z direction                    
                </param>
                <return>
                    boundary tree                    
                </return>
            </javadoc>
            <method name="buildBoundary" type="BSPTree<Euclidean3D>" line="86">
                <params>
                    <param name="xMin" type="double"/>
                    <param name="xMax" type="double"/>
                    <param name="yMin" type="double"/>
                    <param name="yMax" type="double"/>
                    <param name="zMin" type="double"/>
                    <param name="zMax" type="double"/>
                </params>
                <declaration name="pxMin" type="Plane" line="87"/>
                <declaration name="pxMax" type="Plane" line="88"/>
                <declaration name="pyMin" type="Plane" line="89"/>
                <declaration name="pyMax" type="Plane" line="90"/>
                <declaration name="pzMin" type="Plane" line="91"/>
                <declaration name="pzMax" type="Plane" line="92"/>
                <declaration name="boundary" type="Region&lt;Euclidean3D&gt;" line="93"/>
            </method>
            <javadoc line="96">
                {@inheritDoc}                
            </javadoc>
            <method name="buildNew" type="PolyhedronsSet" line="99">
                <params>
                    <param name="tree" type="BSPTree<Euclidean3D>"/>
                </params>
            </method>
            <javadoc line="102">
                {@inheritDoc}                
            </javadoc>
            <method name="computeGeometricalProperties" type="void" line="105">
                <scope line="107"/>
                <scope line="111"/>
            </method>
            <class name="FacetsContributionVisitor" line="116">
                <implements interface="BSPTreeVisitor">
                    <type_params>
                        <type_param name="Euclidean3D"/>
                    </type_params>
                </implements>
                <javadoc line="116">
                    Visitor computing geometrical properties.                    
                </javadoc>
                <javadoc line="120">
                    Simple constructor.                    
                </javadoc>
                <method name="FacetsContributionVisitor" type="constructor" line="123"/>
                <javadoc line="127">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitOrder" type="Order" line="130">
                    <params>
                        <param name="node" type="BSPTree<Euclidean3D>"/>
                    </params>
                </method>
                <javadoc line="133">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitInternalNode" type="void" line="136">
                    <params>
                        <param name="node" type="BSPTree<Euclidean3D>"/>
                    </params>
                    <declaration name="attribute" type="BoundaryAttribute&lt;Euclidean3D&gt;" line="137"/>
                    <scope line="138"/>
                    <scope line="141"/>
                </method>
                <javadoc line="145">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitLeafNode" type="void" line="148">
                    <params>
                        <param name="node" type="BSPTree<Euclidean3D>"/>
                    </params>
                </method>
                <javadoc line="150">
                    Add he contribution of a boundary facet.                    
                    <param>
                        facet boundary facet                        
                    </param>
                    <param>
                        reversed if true, the facet has the inside on its plus side                        
                    </param>
                </javadoc>
                <method name="addContribution" type="void" line="155">
                    <params>
                        <param name="facet" type="SubHyperplane<Euclidean3D>"/>
                        <param name="reversed" type="boolean"/>
                    </params>
                    <declaration name="polygon" type="Region&lt;Euclidean2D&gt;" line="156"/>
                    <declaration name="area" type="double" line="157"/>
                    <scope line="158"/>
                    <scope line="162">
                        <declaration name="plane" type="Plane" line="163"/>
                        <declaration name="facetB" type="Vector3D" line="164"/>
                        <declaration name="scaled" type="double" line="165"/>
                        <scope line="166"/>
                    </scope>
                </method>
            </class>
            <javadoc line="174">
                Get the first sub-hyperplane crossed by a semi-infinite line.                
                <param>
                    point start point of the part of the line considered                    
                </param>
                <param>
                    line line to consider (contains point)                    
                </param>
                <return>
                    the first sub-hyperplaned crossed by the line after the
                      given point, or null if the line does not intersect any
                      sub-hyperplaned                    
                </return>
            </javadoc>
            <method name="firstIntersection" type="SubHyperplane<Euclidean3D>" line="182">
                <params>
                    <param name="point" type="Vector3D"/>
                    <param name="line" type="Line"/>
                </params>
            </method>
            <javadoc line="185">
                Get the first sub-hyperplane crossed by a semi-infinite line.                
                <param>
                    node current node                    
                </param>
                <param>
                    point start point of the part of the line considered                    
                </param>
                <param>
                    line line to consider (contains point)                    
                </param>
                <return>
                    the first sub-hyperplaned crossed by the line after the
                      given point, or null if the line does not intersect any
                      sub-hyperplaned                    
                </return>
            </javadoc>
            <method name="recurseFirstIntersection" type="SubHyperplane<Euclidean3D>" line="194">
                <params>
                    <param name="node" type="BSPTree<Euclidean3D>"/>
                    <param name="point" type="Vector3D"/>
                    <param name="line" type="Line"/>
                </params>
                <declaration name="cut" type="SubHyperplane&lt;Euclidean3D&gt;" line="195"/>
                <scope line="196"/>
                <declaration name="minus" type="BSPTree&lt;Euclidean3D&gt;" line="199"/>
                <declaration name="plus" type="BSPTree&lt;Euclidean3D&gt;" line="200"/>
                <declaration name="plane" type="Plane" line="201"/>
                <declaration name="offset" type="double" line="202"/>
                <declaration name="in" type="boolean" line="203"/>
                <declaration name="near" type="BSPTree&lt;Euclidean3D&gt;" line="204"/>
                <declaration name="far" type="BSPTree&lt;Euclidean3D&gt;" line="205"/>
                <scope line="206"/>
                <scope line="210"/>
                <scope line="214">
                    <declaration name="facet" type="SubHyperplane&lt;Euclidean3D&gt;" line="215"/>
                    <scope line="216"/>
                </scope>
                <declaration name="crossed" type="SubHyperplane&lt;Euclidean3D&gt;" line="220"/>
                <scope line="221"/>
                <scope line="224">
                    <declaration name="hit3D" type="Vector3D" line="225"/>
                    <scope line="226">
                        <declaration name="facet" type="SubHyperplane&lt;Euclidean3D&gt;" line="227"/>
                        <scope line="228"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="235">
                Check if a point belongs to the boundary part of a node.                
                <param>
                    point point to check                    
                </param>
                <param>
                    node node containing the boundary facet to check                    
                </param>
                <return>
                    the boundary facet this points belongs to (or null if it
                      does not belong to any boundary facet)                    
                </return>
            </javadoc>
            <method name="boundaryFacet" type="SubHyperplane<Euclidean3D>" line="242">
                <params>
                    <param name="point" type="Vector3D"/>
                    <param name="node" type="BSPTree<Euclidean3D>"/>
                </params>
                <declaration name="point2D" type="Vector2D" line="243"/>
                <declaration name="attribute" type="BoundaryAttribute&lt;Euclidean3D&gt;" line="244"/>
                <scope line="245"/>
                <scope line="248"/>
            </method>
            <javadoc line="253">
                Rotate the region around the specified point.
                  &lt;p&gt;The instance is not modified, a new instance is created.&lt;/p&gt;                
                <param>
                    center rotation center                    
                </param>
                <param>
                    rotation vectorial rotation operator                    
                </param>
                <return>
                    a new instance representing the rotated region                    
                </return>
            </javadoc>
            <method name="rotate" type="PolyhedronsSet" line="260">
                <params>
                    <param name="center" type="Vector3D"/>
                    <param name="rotation" type="Rotation"/>
                </params>
            </method>
            <class name="RotationTransform" line="263">
                <implements interface="Transform">
                    <type_params>
                        <type_param name="Euclidean3D"/>
                        <type_param name="Euclidean2D"/>
                    </type_params>
                </implements>
                <javadoc line="263">
                    3D rotation as a Transform.                    
                </javadoc>
                <declaration name="center" type="Vector3D" line="267"/>
                <javadoc line="267">
                    Center point of the rotation.                    
                </javadoc>
                <declaration name="rotation" type="Rotation" line="271"/>
                <javadoc line="271">
                    Vectorial rotation.                    
                </javadoc>
                <declaration name="cachedOriginal" type="Plane" line="275"/>
                <javadoc line="275">
                    Cached original hyperplane.                    
                </javadoc>
                <declaration name="cachedTransform" type="Transform&lt;Euclidean2D,Euclidean1D&gt;" line="279"/>
                <javadoc line="279">
                    Cached 2D transform valid inside the cached original hyperplane.                    
                </javadoc>
                <javadoc line="283">
                    Build a rotation transform.                    
                    <param>
                        center center point of the rotation                        
                    </param>
                    <param>
                        rotation vectorial rotation                        
                    </param>
                </javadoc>
                <method name="RotationTransform" type="constructor" line="288">
                    <params>
                        <param name="center" type="Vector3D"/>
                        <param name="rotation" type="Rotation"/>
                    </params>
                </method>
                <javadoc line="292">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="Vector3D" line="295">
                    <params>
                        <param name="point" type="Vector<Euclidean3D>"/>
                    </params>
                    <declaration name="delta" type="Vector3D" line="296"/>
                </method>
                <javadoc line="299">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="Plane" line="302">
                    <params>
                        <param name="hyperplane" type="Hyperplane<Euclidean3D>"/>
                    </params>
                </method>
                <javadoc line="305">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="SubHyperplane<Euclidean2D>" line="308">
                    <params>
                        <param name="sub" type="SubHyperplane<Euclidean2D>"/>
                        <param name="original" type="Hyperplane<Euclidean3D>"/>
                        <param name="transformed" type="Hyperplane<Euclidean3D>"/>
                    </params>
                    <scope line="309">
                        <declaration name="oPlane" type="Plane" line="310"/>
                        <declaration name="tPlane" type="Plane" line="311"/>
                        <declaration name="p00" type="Vector3D" line="312"/>
                        <declaration name="p10" type="Vector3D" line="313"/>
                        <declaration name="p01" type="Vector3D" line="314"/>
                        <declaration name="tP00" type="Vector2D" line="315"/>
                        <declaration name="tP10" type="Vector2D" line="316"/>
                        <declaration name="tP01" type="Vector2D" line="317"/>
                        <declaration name="at" type="AffineTransform" line="318"/>
                    </scope>
                </method>
            </class>
            <javadoc line="325">
                Translate the region by the specified amount.
                  &lt;p&gt;The instance is not modified, a new instance is created.&lt;/p&gt;                
                <param>
                    translation translation to apply                    
                </param>
                <return>
                    a new instance representing the translated region                    
                </return>
            </javadoc>
            <method name="translate" type="PolyhedronsSet" line="331">
                <params>
                    <param name="translation" type="Vector3D"/>
                </params>
            </method>
            <class name="TranslationTransform" line="334">
                <implements interface="Transform">
                    <type_params>
                        <type_param name="Euclidean3D"/>
                        <type_param name="Euclidean2D"/>
                    </type_params>
                </implements>
                <javadoc line="334">
                    3D translation as a transform.                    
                </javadoc>
                <declaration name="translation" type="Vector3D" line="338"/>
                <javadoc line="338">
                    Translation vector.                    
                </javadoc>
                <declaration name="cachedOriginal" type="Plane" line="342"/>
                <javadoc line="342">
                    Cached original hyperplane.                    
                </javadoc>
                <declaration name="cachedTransform" type="Transform&lt;Euclidean2D,Euclidean1D&gt;" line="346"/>
                <javadoc line="346">
                    Cached 2D transform valid inside the cached original hyperplane.                    
                </javadoc>
                <javadoc line="350">
                    Build a translation transform.                    
                    <param>
                        translation translation vector                        
                    </param>
                </javadoc>
                <method name="TranslationTransform" type="constructor" line="354">
                    <params>
                        <param name="translation" type="Vector3D"/>
                    </params>
                </method>
                <javadoc line="357">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="Vector3D" line="360">
                    <params>
                        <param name="point" type="Vector<Euclidean3D>"/>
                    </params>
                </method>
                <javadoc line="363">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="Plane" line="366">
                    <params>
                        <param name="hyperplane" type="Hyperplane<Euclidean3D>"/>
                    </params>
                </method>
                <javadoc line="369">
                    {@inheritDoc}                    
                </javadoc>
                <method name="apply" type="SubHyperplane<Euclidean2D>" line="372">
                    <params>
                        <param name="sub" type="SubHyperplane<Euclidean2D>"/>
                        <param name="original" type="Hyperplane<Euclidean3D>"/>
                        <param name="transformed" type="Hyperplane<Euclidean3D>"/>
                    </params>
                    <scope line="373">
                        <declaration name="oPlane" type="Plane" line="374"/>
                        <declaration name="tPlane" type="Plane" line="375"/>
                        <declaration name="shift" type="Vector2D" line="376"/>
                        <declaration name="at" type="AffineTransform" line="377"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>