<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.analysis.TrivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="TricubicSplineInterpolatingFunction" line="8">
            <implements interface="TrivariateFunction"/>
            <javadoc line="8">
                Function that implements the
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Tricubic_interpolation&quot;&gt;
                  tricubic spline interpolation&lt;/a&gt;, as proposed in
                  &lt;quote&gt;
                  Tricubic interpolation in three dimensions&lt;br/&gt;
                  F. Lekien and J. Marsden&lt;br/&gt;
                  &lt;em&gt;Int. J. Numer. Meth. Engng&lt;/em&gt; 2005; &lt;b&gt;63&lt;/b&gt;:455-471
                  &lt;/quote&gt;                
                <since>
                    2.2                    
                </since>
                <version>
                    $Id: TricubicSplineInterpolatingFunction.java 1385314 2012-09-16 16:35:49Z tn $                    
                </version>
            </javadoc>
            <declaration name="AINV" type="double[][]" line="21"/>
            <javadoc line="21">
                Matrix to compute the spline coefficients from the function values
                  and function derivatives values                
            </javadoc>
            <declaration name="xval" type="double[]" line="26"/>
            <javadoc line="26">
                Samples x-coordinates                
            </javadoc>
            <declaration name="yval" type="double[]" line="30"/>
            <javadoc line="30">
                Samples y-coordinates                
            </javadoc>
            <declaration name="zval" type="double[]" line="34"/>
            <javadoc line="34">
                Samples z-coordinates                
            </javadoc>
            <declaration name="splines" type="TricubicSplineFunction[][][]" line="38"/>
            <javadoc line="38">
                Set of cubic splines pacthing the whole data grid                
            </javadoc>
            <javadoc line="42">
                @param x Sample values of the x-coordinate, in increasing order.                
                <param>
                    y Sample values of the y-coordinate, in increasing order.                    
                </param>
                <param>
                    z Sample values of the y-coordinate, in increasing order.                    
                </param>
                <param>
                    f Values of the function on every grid point.                    
                </param>
                <param>
                    dFdX Values of the partial derivative of function with respect to x on every grid point.                    
                </param>
                <param>
                    dFdY Values of the partial derivative of function with respect to y on every grid point.                    
                </param>
                <param>
                    dFdZ Values of the partial derivative of function with respect to z on every grid point.                    
                </param>
                <param>
                    d2FdXdY Values of the cross partial derivative of function on every grid point.                    
                </param>
                <param>
                    d2FdXdZ Values of the cross partial derivative of function on every grid point.                    
                </param>
                <param>
                    d2FdYdZ Values of the cross partial derivative of function on every grid point.                    
                </param>
                <param>
                    d3FdXdYdZ Values of the cross partial derivative of function on every grid point.                    
                </param>
                <throws>
                    NoDataException if any of the arrays has zero length.                    
                </throws>
                <throws>
                    DimensionMismatchException if the various arrays do not contain the expected number of elements.                    
                </throws>
                <throws>
                    NonMonotonicSequenceException if {@code x}, {@code y} or {@code z} are not strictly increasing.                    
                </throws>
            </javadoc>
            <method name="TricubicSplineInterpolatingFunction" type="constructor" line="58">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                    <param name="z" type="double[]"/>
                    <param name="f" type="double[][][]"/>
                    <param name="dFdX" type="double[][][]"/>
                    <param name="dFdY" type="double[][][]"/>
                    <param name="dFdZ" type="double[][][]"/>
                    <param name="d2FdXdY" type="double[][][]"/>
                    <param name="d2FdXdZ" type="double[][][]"/>
                    <param name="d2FdYdZ" type="double[][][]"/>
                    <param name="d3FdXdYdZ" type="double[][][]"/>
                </params>
                <declaration name="xLen" type="int" line="59"/>
                <declaration name="yLen" type="int" line="60"/>
                <declaration name="zLen" type="int" line="61"/>
                <scope line="62"/>
                <scope line="65"/>
                <scope line="68"/>
                <scope line="71"/>
                <scope line="74"/>
                <scope line="77"/>
                <scope line="80"/>
                <scope line="83"/>
                <scope line="86"/>
                <declaration name="lastI" type="int" line="95"/>
                <declaration name="lastJ" type="int" line="96"/>
                <declaration name="lastK" type="int" line="97"/>
                <scope line="99">
                    <scope line="100"/>
                    <scope line="103"/>
                    <scope line="106"/>
                    <scope line="109"/>
                    <scope line="112"/>
                    <scope line="115"/>
                    <scope line="118"/>
                    <scope line="121"/>
                    <declaration name="ip1" type="int" line="124"/>
                    <scope line="125">
                        <scope line="126"/>
                        <scope line="129"/>
                        <scope line="132"/>
                        <scope line="135"/>
                        <scope line="138"/>
                        <scope line="141"/>
                        <scope line="144"/>
                        <scope line="147"/>
                        <declaration name="jp1" type="int" line="150"/>
                        <scope line="151">
                            <declaration name="kp1" type="int" line="152"/>
                            <declaration name="beta" type="double[]" line="153"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="159">
                {@inheritDoc}                
                <throws>
                    OutOfRangeException if any of the variables is outside its interpolation range.                    
                </throws>
            </javadoc>
            <method name="value" type="double" line="163">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <declaration name="i" type="int" line="164"/>
                <scope line="165"/>
                <declaration name="j" type="int" line="168"/>
                <scope line="169"/>
                <declaration name="k" type="int" line="172"/>
                <scope line="173"/>
                <declaration name="xN" type="double" line="176"/>
                <declaration name="yN" type="double" line="177"/>
                <declaration name="zN" type="double" line="178"/>
            </method>
            <javadoc line="181">
                @param c Coordinate.                
                <param>
                    val Coordinate samples.                    
                </param>
                <return>
                    the index in {@code val} corresponding to the interval containing {@code c}, or {@code -1}if {@code c} is out of the range defined by the end values of {@code val}.                    
                </return>
            </javadoc>
            <method name="searchIndex" type="int" line="186">
                <params>
                    <param name="c" type="double"/>
                    <param name="val" type="double[]"/>
                </params>
                <scope line="187"/>
                <declaration name="max" type="int" line="190"/>
                <scope line="191">
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="198">
                Compute the spline coefficients from the list of function values and
                  function partial derivatives values at the four corners of a grid
                  element. They must be specified in the following order:
                  &lt;ul&gt;
                  &lt;li&gt;f(0,0,0)&lt;/li&gt;
                  &lt;li&gt;f(1,0,0)&lt;/li&gt;
                  &lt;li&gt;f(0,1,0)&lt;/li&gt;
                  &lt;li&gt;f(1,1,0)&lt;/li&gt;
                  &lt;li&gt;f(0,0,1)&lt;/li&gt;
                  &lt;li&gt;f(1,0,1)&lt;/li&gt;
                  &lt;li&gt;f(0,1,1)&lt;/li&gt;
                  &lt;li&gt;f(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;z&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;z&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xz&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xz&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;yz&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;yz&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xyz&lt;/sub&gt;(0,0,0)&lt;/li&gt;
                  &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
                  &lt;li&gt;f&lt;sub&gt;xyz&lt;/sub&gt;(1,1,1)&lt;/li&gt;
                  &lt;/ul&gt;
                  where the subscripts indicate the partial derivative with respect to
                  the corresponding variable(s).                
                <param>
                    beta List of function values and function partial derivatives values.                    
                </param>
                <return>
                    the spline coefficients.                    
                </return>
            </javadoc>
            <method name="computeSplineCoefficients" type="double[]" line="238">
                <params>
                    <param name="beta" type="double[]"/>
                </params>
                <declaration name="sz" type="int" line="239"/>
                <declaration name="a" type="double[]" line="240"/>
                <scope line="241">
                    <declaration name="result" type="double" line="242"/>
                    <declaration name="row" type="double[]" line="243"/>
                    <scope line="244"/>
                </scope>
            </method>
        </class>
        <class name="TricubicSplineFunction" line="252">
            <implements interface="TrivariateFunction"/>
            <javadoc line="252">
                3D-spline function.                
                <version>
                    $Id: TricubicSplineInterpolatingFunction.java 1385314 2012-09-16 16:35:49Z tn $                    
                </version>
            </javadoc>
            <declaration name="N" type="short" line="257"/>
            <javadoc line="257">
                Number of points.                
            </javadoc>
            <declaration name="a" type="double[][][]" line="261"/>
            <javadoc line="261">
                Coefficients                
            </javadoc>
            <javadoc line="265">
                @param aV List of spline coefficients.                
            </javadoc>
            <method name="TricubicSplineFunction" type="constructor" line="268">
                <params>
                    <param name="aV" type="double[]"/>
                </params>
                <scope line="269">
                    <scope line="270">
                        <scope line="271"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="277">
                @param x x-coordinate of the interpolation point.                
                <param>
                    y y-coordinate of the interpolation point.                    
                </param>
                <param>
                    z z-coordinate of the interpolation point.                    
                </param>
                <return>
                    the interpolated value.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x}, {@code y} or{@code z} are not in the interval {@code [0, 1]}.                    
                </throws>
            </javadoc>
            <method name="value" type="double" line="284">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <scope line="285"/>
                <scope line="288"/>
                <scope line="291"/>
                <declaration name="x2" type="double" line="294"/>
                <declaration name="x3" type="double" line="295"/>
                <declaration name="pX" type="double[]" line="296"/>
                <declaration name="y2" type="double" line="297"/>
                <declaration name="y3" type="double" line="298"/>
                <declaration name="pY" type="double[]" line="299"/>
                <declaration name="z2" type="double" line="300"/>
                <declaration name="z3" type="double" line="301"/>
                <declaration name="pZ" type="double[]" line="302"/>
                <declaration name="result" type="double" line="303"/>
                <scope line="304">
                    <scope line="305">
                        <scope line="306"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>