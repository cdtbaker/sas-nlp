<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.genetics">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="RandomKey" line="29">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="AbstractListChromosome">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </extends>
            <implements interface="PermutationChromosome">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <javadoc line="29">
                Random Key chromosome is used for permutation representation. It is a vector
                  of a fixed length of real numbers in [0,1] interval. The index of the i-th
                  smallest value in the vector represents an i-th member of the permutation.
                  &lt;p&gt;
                  For example, the random key [0.2, 0.3, 0.8, 0.1] corresponds to the
                  permutation of indices (3,0,1,2). If the original (unpermuted) sequence would
                  be (a,b,c,d), this would mean the sequence (d,a,b,c).
                  &lt;p&gt;
                  With this representation, common operators like n-point crossover can be
                  used, because any such chromosome represents a valid permutation.
                  &lt;p&gt;
                  Since the chromosome (and thus its arrayRepresentation) is immutable, the
                  array representation is sorted only once in the constructor.
                  &lt;p&gt;
                  For details, see:
                  &lt;ul&gt;
                  &lt;li&gt;Bean, J.C.: Genetic algorithms and random keys for sequencing and
                  optimization. ORSA Journal on Computing 6 (1994) 154-160&lt;/li&gt;
                  &lt;li&gt;Rothlauf, F.: Representations for Genetic and Evolutionary Algorithms.
                  Volume 104 of Studies in Fuzziness and Soft Computing. Physica-Verlag,
                  Heidelberg (2002)&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    <T>
                       type of the permuted objects                    
                </param>
                <since>
                    2.0                    
                </since>
                <version>
                    $Id: RandomKey.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="sortedRepresentation" type="List&lt;Double&gt;" line="59"/>
            <javadoc line="59">
                Cache of sorted representation (unmodifiable).                
            </javadoc>
            <declaration name="baseSeqPermutation" type="List&lt;Integer&gt;" line="62"/>
            <javadoc line="62">
                Base sequence [0,1,...,n-1], permuted accorting to the representation (unmodifiable).                
            </javadoc>
            <javadoc line="67">
                Constructor.                
                <param>
                    representation list of [0,1] values representing the permutation                    
                </param>
                <throws>
                    InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome                    
                </throws>
            </javadoc>
            <method name="RandomKey" type="constructor" line="73">
                <params>
                    <param name="representation" type="List<Double>"/>
                </params>
                <comment line="75">
                    store the sorted representation                    
                </comment>
                <comment line="79">
                    store the permutation of [0,1,...,n-1] list for toString() and isSame() methods                    
                </comment>
                <declaration name="sortedRepr" type="List&lt;Double&gt;" line="76"/>
            </method>
            <javadoc line="85">
                Constructor.                
                <param>
                    representation array of [0,1] values representing the permutation                    
                </param>
                <throws>
                    InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome                    
                </throws>
            </javadoc>
            <method name="RandomKey" type="constructor" line="91">
                <params>
                    <param name="representation" type="Double[]"/>
                </params>
            </method>
            <javadoc line="95">
                {@inheritDoc}                
            </javadoc>
            <method name="decode" type="List<T>" line="98">
                <params>
                    <param name="sequence" type="List<T>"/>
                </params>
            </method>
            <javadoc line="102">
                Decodes a permutation represented by &lt;code&gt;representation&lt;/code&gt; and
                  returns a (generic) list with the permuted values.                
                <param>
                    <S>
                       generic type of the sequence values                    
                </param>
                <param>
                    sequence the unpermuted sequence                    
                </param>
                <param>
                    representation representation of the permutation ([0,1] vector)                    
                </param>
                <param>
                    sortedRepr sorted <code>representation</code>                    
                </param>
                <return>
                    list with the sequence values permuted according to the representation                    
                </return>
                <throws>
                    DimensionMismatchException iff the length of the <code>sequence</code>,
                      <code>representation</code> or <code>sortedRepr</code> lists are not equal                    
                </throws>
            </javadoc>
            <method name="decodeGeneric" type="List<S>" line="116">
                <params>
                    <param name="sequence" type="List<S>"/>
                    <param name="representation" type="List<Double>"/>
                    <param name="sortedRepr" type="List<Double>"/>
                </params>
                <comment line="120">
                    the size of the three lists must be equal                    
                </comment>
                <comment line="128">
                    do not modify the original representation                    
                </comment>
                <comment line="131">
                    now find the indices in the original repr and use them for permuting                    
                </comment>
                <declaration name="l" type="int" line="118"/>
                <scope line="121"/>
                <scope line="124"/>
                <declaration name="reprCopy" type="List&lt;Double&gt;" line="129"/>
                <declaration name="res" type="List&lt;S&gt;" line="132"/>
                <scope line="133">
                    <declaration name="index" type="int" line="134"/>
                </scope>
            </method>
            <javadoc line="141">
                Returns &lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;another&lt;/code&gt; is a RandomKey and
                  encodes the same permutation.                
                <param>
                    another chromosome to compare                    
                </param>
                <return>
                    true iff chromosomes encode the same permutation                    
                </return>
            </javadoc>
            <method name="isSame" type="boolean" line="149">
                <params>
                    <param name="another" type="Chromosome"/>
                </params>
                <comment line="150">
                    type check                    
                </comment>
                <comment line="155">
                    size check                    
                </comment>
                <comment line="160">
                    two different representations can still encode the same permutation                    
                </comment>
                <comment line="161">
                    the ordering is what counts                    
                </comment>
                <comment line="170">
                    the permutations are the same                    
                </comment>
                <scope line="151"/>
                <declaration name="anotherRk" type="RandomKey&lt;?&gt;" line="154"/>
                <scope line="156"/>
                <declaration name="thisPerm" type="List&lt;Integer&gt;" line="162"/>
                <declaration name="anotherPerm" type="List&lt;Integer&gt;" line="163"/>
                <scope line="165">
                    <scope line="166"/>
                </scope>
            </method>
            <javadoc line="174">
                {@inheritDoc}                
            </javadoc>
            <method name="checkValidity" type="void" line="179">
                <params>
                    <param name="chromosomeRepresentation" type="List<Double>"/>
                </params>
                <scope line="181">
                    <scope line="182"/>
                </scope>
            </method>
            <javadoc line="190">
                Generates a representation corresponding to a random permutation of
                  length l which can be passed to the RandomKey constructor.                
                <param>
                    l length of the permutation                    
                </param>
                <return>
                    representation of a random permutation                    
                </return>
            </javadoc>
            <method name="randomPermutation" type="List<Double>" line="197">
                <params>
                    <param name="l" type="int"/>
                </params>
                <declaration name="repr" type="List&lt;Double&gt;" line="198"/>
                <scope line="199"/>
            </method>
            <javadoc line="205">
                Generates a representation corresponding to an identity permutation of
                  length l which can be passed to the RandomKey constructor.                
                <param>
                    l length of the permutation                    
                </param>
                <return>
                    representation of an identity permutation                    
                </return>
            </javadoc>
            <method name="identityPermutation" type="List<Double>" line="212">
                <params>
                    <param name="l" type="int"/>
                </params>
                <declaration name="repr" type="List&lt;Double&gt;" line="213"/>
                <scope line="214"/>
            </method>
            <javadoc line="220">
                Generates a representation of a permutation corresponding to the
                  &lt;code&gt;data&lt;/code&gt; sorted by &lt;code&gt;comparator&lt;/code&gt;. The
                  &lt;code&gt;data&lt;/code&gt; is not modified during the process.
                  This is useful if you want to inject some permutations to the initial
                  population.                
                <param>
                    <S>
                       type of the data                    
                </param>
                <param>
                    data list of data determining the order                    
                </param>
                <param>
                    comparator how the data will be compared                    
                </param>
                <return>
                    list representation of the permutation corresponding to the parameters                    
                </return>
            </javadoc>
            <method name="comparatorPermutation" type="List<Double>" line="234">
                <params>
                    <param name="data" type="List<S>"/>
                    <param name="comparator" type="Comparator<S>"/>
                </params>
                <declaration name="sortedData" type="List&lt;S&gt;" line="235"/>
            </method>
            <javadoc line="241">
                Generates a representation of a permutation corresponding to a
                  permutation which yields &lt;code&gt;permutedData&lt;/code&gt; when applied to
                  &lt;code&gt;originalData&lt;/code&gt;.
                  This method can be viewed as an inverse to {@link #decode(List)}.                
                <param>
                    <S>
                       type of the data                    
                </param>
                <param>
                    originalData the original, unpermuted data                    
                </param>
                <param>
                    permutedData the data, somehow permuted                    
                </param>
                <return>
                    representation of a permutation corresponding to the permutation
                      <code>originalData -> permutedData</code>                    
                </return>
                <throws>
                    DimensionMismatchException iff the length of <code>originalData</code>
                      and <code>permutedData</code> lists are not equal                    
                </throws>
                <throws>
                    MathIllegalArgumentException iff the <code>permutedData</code> and
                      <code>originalData</code> lists contain different data                    
                </throws>
            </javadoc>
            <method name="inducedPermutation" type="List<Double>" line="260">
                <params>
                    <param name="originalData" type="List<S>"/>
                    <param name="permutedData" type="List<S>"/>
                </params>
                <scope line="262"/>
                <declaration name="l" type="int" line="265"/>
                <declaration name="origDataCopy" type="List&lt;S&gt;" line="267"/>
                <declaration name="res" type="Double[]" line="269"/>
                <scope line="270">
                    <declaration name="index" type="int" line="271"/>
                    <scope line="272"/>
                </scope>
            </method>
            <method name="toString" type="String" line="282"/>
            <javadoc line="286">
                Helper for constructor. Generates a list of natural numbers (0,1,...,l-1).                
                <param>
                    l length of list to generate                    
                </param>
                <return>
                    list of integers from 0 to l-1                    
                </return>
            </javadoc>
            <method name="baseSequence" type="List<Integer>" line="292">
                <params>
                    <param name="l" type="int"/>
                </params>
                <declaration name="baseSequence" type="List&lt;Integer&gt;" line="293"/>
                <scope line="294"/>
            </method>
        </class>
    </source>