<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="BiDiagonalTransformer" line="23">
            <javadoc line="23">
                Class transforming any matrix to bi-diagonal shape.
                  &lt;p&gt;Any m &amp;times; n matrix A can be written as the product of three matrices:
                  A = U &amp;times; B &amp;times; V&lt;sup&gt;T&lt;/sup&gt; with U an m &amp;times; m orthogonal matrix,
                  B an m &amp;times; n bi-diagonal matrix (lower diagonal if m &amp;lt; n, upper diagonal
                  otherwise), and V an n &amp;times; n orthogonal matrix.&lt;/p&gt;
                  &lt;p&gt;Transformation to bi-diagonal shape is often not a goal by itself, but it is
                  an intermediate step in more general decomposition algorithms like {@link SingularValueDecomposition Singular Value Decomposition}. This class is therefore
                  intended for internal use by the library and is not public. As a consequence of
                  this explicitly limited scope, many methods directly returns references to
                  internal arrays, not copies.&lt;/p&gt;                
                <version>
                    $Id: BiDiagonalTransformer.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="householderVectors" type="double" line="40"/>
            <javadoc line="40">
                Householder vectors.                
            </javadoc>
            <declaration name="main" type="double[]" line="43"/>
            <javadoc line="43">
                Main diagonal.                
            </javadoc>
            <declaration name="secondary" type="double[]" line="46"/>
            <javadoc line="46">
                Secondary diagonal.                
            </javadoc>
            <declaration name="cachedU" type="RealMatrix" line="49"/>
            <javadoc line="49">
                Cached value of U.                
            </javadoc>
            <declaration name="cachedB" type="RealMatrix" line="52"/>
            <javadoc line="52">
                Cached value of B.                
            </javadoc>
            <declaration name="cachedV" type="RealMatrix" line="55"/>
            <javadoc line="55">
                Cached value of V.                
            </javadoc>
            <javadoc line="58">
                Build the transformation to bi-diagonal shape of a matrix.                
                <param>
                    matrix the matrix to transform.                    
                </param>
            </javadoc>
            <method name="BiDiagonalTransformer" type="constructor" line="62">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <comment line="75">
                    transform matrix                    
                </comment>
                <declaration name="m" type="int" line="64"/>
                <declaration name="n" type="int" line="65"/>
                <declaration name="p" type="int" line="66"/>
                <scope line="75"/>
                <scope line="77"/>
            </method>
            <javadoc line="83">
                Returns the matrix U of the transform.
                  &lt;p&gt;U is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the U matrix                    
                </return>
            </javadoc>
            <method name="getU" type="RealMatrix" line="88">
                <comment line="100">
                    fill up the part of the matrix not affected by Householder transforms                    
                </comment>
                <comment line="105">
                    build up first part of the matrix by applying Householder transforms                    
                </comment>
                <comment line="129">
                    return the cached matrix                    
                </comment>
                <scope line="90">
                    <declaration name="m" type="int" line="92"/>
                    <declaration name="n" type="int" line="93"/>
                    <declaration name="p" type="int" line="94"/>
                    <declaration name="diagOffset" type="int" line="95"/>
                    <declaration name="diagonal" type="double[]" line="96"/>
                    <declaration name="ua" type="double[][]" line="97"/>
                    <scope line="100"/>
                    <scope line="105">
                        <declaration name="hK" type="double[]" line="106"/>
                        <scope line="108">
                            <scope line="109">
                                <declaration name="alpha" type="double" line="110"/>
                                <scope line="111"/>
                                <scope line="116"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="122"/>
                </scope>
            </method>
            <javadoc line="133">
                Returns the bi-diagonal matrix B of the transform.                
                <return>
                    the B matrix                    
                </return>
            </javadoc>
            <method name="getB" type="RealMatrix" line="137">
                <comment line="160">
                    return the cached matrix                    
                </comment>
                <scope line="139">
                    <declaration name="m" type="int" line="141"/>
                    <declaration name="n" type="int" line="142"/>
                    <declaration name="ba" type="double[][]" line="143"/>
                    <scope line="144">
                        <scope line="146">
                            <scope line="147"/>
                        </scope>
                        <scope line="150">
                            <scope line="151"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="164">
                Returns the matrix V of the transform.
                  &lt;p&gt;V is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the V matrix                    
                </return>
            </javadoc>
            <method name="getV" type="RealMatrix" line="169">
                <comment line="181">
                    fill up the part of the matrix not affected by Householder transforms                    
                </comment>
                <comment line="186">
                    build up first part of the matrix by applying Householder transforms                    
                </comment>
                <comment line="210">
                    return the cached matrix                    
                </comment>
                <scope line="171">
                    <declaration name="m" type="int" line="173"/>
                    <declaration name="n" type="int" line="174"/>
                    <declaration name="p" type="int" line="175"/>
                    <declaration name="diagOffset" type="int" line="176"/>
                    <declaration name="diagonal" type="double[]" line="177"/>
                    <declaration name="va" type="double[][]" line="178"/>
                    <scope line="181"/>
                    <scope line="186">
                        <declaration name="hK" type="double[]" line="187"/>
                        <scope line="189">
                            <scope line="190">
                                <declaration name="beta" type="double" line="191"/>
                                <scope line="192"/>
                                <scope line="197"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="203"/>
                </scope>
            </method>
            <javadoc line="214">
                Get the Householder vectors of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the main diagonal elements of the B matrix                    
                </return>
            </javadoc>
            <method name="getHouseholderVectorsRef" type="double[][]" line="220"/>
            <javadoc line="224">
                Get the main diagonal elements of the matrix B of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the main diagonal elements of the B matrix                    
                </return>
            </javadoc>
            <method name="getMainDiagonalRef" type="double[]" line="230"/>
            <javadoc line="234">
                Get the secondary diagonal elements of the matrix B of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the secondary diagonal elements of the B matrix                    
                </return>
            </javadoc>
            <method name="getSecondaryDiagonalRef" type="double[]" line="240"/>
            <javadoc line="244">
                Check if the matrix is transformed to upper bi-diagonal.                
                <return>
                    true if the matrix is transformed to upper bi-diagonal                    
                </return>
            </javadoc>
            <method name="isUpperBiDiagonal" type="boolean" line="248"/>
            <javadoc line="252">
                Transform original matrix to upper bi-diagonal form.
                  &lt;p&gt;Transformation is done using alternate Householder transforms
                  on columns and rows.&lt;/p&gt;                
            </javadoc>
            <method name="transformToUpperBiDiagonal" type="void" line="257">
                <comment line="264">
                    zero-out a column                    
                </comment>
                <comment line="290">
                    zero-out a row                    
                </comment>
                <declaration name="m" type="int" line="259"/>
                <declaration name="n" type="int" line="260"/>
                <scope line="261">
                    <declaration name="xNormSqr" type="double" line="264"/>
                    <scope line="265">
                        <declaration name="c" type="double" line="266"/>
                    </scope>
                    <declaration name="hK" type="double[]" line="269"/>
                    <declaration name="a" type="double" line="270"/>
                    <scope line="272">
                        <scope line="274">
                            <declaration name="alpha" type="double" line="275"/>
                            <scope line="276">
                                <declaration name="hI" type="double[]" line="277"/>
                            </scope>
                            <scope line="281">
                                <declaration name="hI" type="double[]" line="282"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="288">
                        <scope line="291">
                            <declaration name="c" type="double" line="292"/>
                        </scope>
                        <declaration name="b" type="double" line="295"/>
                        <scope line="297">
                            <scope line="299">
                                <declaration name="hI" type="double[]" line="300"/>
                                <declaration name="beta" type="double" line="301"/>
                                <scope line="302"/>
                                <scope line="306"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="316">
                Transform original matrix to lower bi-diagonal form.
                  &lt;p&gt;Transformation is done using alternate Householder transforms
                  on rows and columns.&lt;/p&gt;                
            </javadoc>
            <method name="transformToLowerBiDiagonal" type="void" line="321">
                <comment line="328">
                    zero-out a row                    
                </comment>
                <comment line="353">
                    zero-out a column                    
                </comment>
                <declaration name="m" type="int" line="323"/>
                <declaration name="n" type="int" line="324"/>
                <scope line="325">
                    <declaration name="hK" type="double[]" line="328"/>
                    <declaration name="xNormSqr" type="double" line="329"/>
                    <scope line="330">
                        <declaration name="c" type="double" line="331"/>
                    </scope>
                    <declaration name="a" type="double" line="334"/>
                    <scope line="336">
                        <scope line="338">
                            <declaration name="hI" type="double[]" line="339"/>
                            <declaration name="alpha" type="double" line="340"/>
                            <scope line="341"/>
                            <scope line="345"/>
                        </scope>
                    </scope>
                    <scope line="351">
                        <declaration name="hKp1" type="double[]" line="353"/>
                        <scope line="355">
                            <declaration name="c" type="double" line="356"/>
                        </scope>
                        <declaration name="b" type="double" line="359"/>
                        <scope line="361">
                            <scope line="363">
                                <declaration name="beta" type="double" line="364"/>
                                <scope line="365">
                                    <declaration name="hI" type="double[]" line="366"/>
                                </scope>
                                <scope line="370">
                                    <declaration name="hI" type="double[]" line="371"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>