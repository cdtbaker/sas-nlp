<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="BiDiagonalTransformer" line="3">
            <javadoc line="3">
                Class transforming any matrix to bi-diagonal shape.
                  &lt;p&gt;Any m &amp;times; n matrix A can be written as the product of three matrices:
                  A = U &amp;times; B &amp;times; V&lt;sup&gt;T&lt;/sup&gt; with U an m &amp;times; m orthogonal matrix,
                  B an m &amp;times; n bi-diagonal matrix (lower diagonal if m &amp;lt; n, upper diagonal
                  otherwise), and V an n &amp;times; n orthogonal matrix.&lt;/p&gt;
                  &lt;p&gt;Transformation to bi-diagonal shape is often not a goal by itself, but it is
                  an intermediate step in more general decomposition algorithms like {@link SingularValueDecomposition Singular Value Decomposition}. This class is therefore
                  intended for internal use by the library and is not public. As a consequence of
                  this explicitly limited scope, many methods directly returns references to
                  internal arrays, not copies.&lt;/p&gt;                
                <version>
                    $Id: BiDiagonalTransformer.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="householderVectors" type="double" line="18"/>
            <javadoc line="18">
                Householder vectors.                
            </javadoc>
            <declaration name="main" type="double[]" line="22"/>
            <javadoc line="22">
                Main diagonal.                
            </javadoc>
            <declaration name="secondary" type="double[]" line="26"/>
            <javadoc line="26">
                Secondary diagonal.                
            </javadoc>
            <declaration name="cachedU" type="RealMatrix" line="30"/>
            <javadoc line="30">
                Cached value of U.                
            </javadoc>
            <declaration name="cachedB" type="RealMatrix" line="34"/>
            <javadoc line="34">
                Cached value of B.                
            </javadoc>
            <declaration name="cachedV" type="RealMatrix" line="38"/>
            <javadoc line="38">
                Cached value of V.                
            </javadoc>
            <javadoc line="42">
                Build the transformation to bi-diagonal shape of a matrix.                
                <param>
                    matrix the matrix to transform.                    
                </param>
            </javadoc>
            <method name="BiDiagonalTransformer" type="constructor" line="46">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
                <declaration name="m" type="int" line="47"/>
                <declaration name="n" type="int" line="48"/>
                <declaration name="p" type="int" line="49"/>
                <scope line="56"/>
                <scope line="59"/>
            </method>
            <javadoc line="63">
                Returns the matrix U of the transform.
                  &lt;p&gt;U is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the U matrix                    
                </return>
            </javadoc>
            <method name="getU" type="RealMatrix" line="68">
                <scope line="69">
                    <declaration name="m" type="int" line="70"/>
                    <declaration name="n" type="int" line="71"/>
                    <declaration name="p" type="int" line="72"/>
                    <declaration name="diagOffset" type="int" line="73"/>
                    <declaration name="diagonal" type="double[]" line="74"/>
                    <declaration name="ua" type="double[][]" line="75"/>
                    <scope line="76"/>
                    <scope line="79">
                        <declaration name="hK" type="double[]" line="80"/>
                        <scope line="82">
                            <scope line="83">
                                <declaration name="alpha" type="double" line="84"/>
                                <scope line="85"/>
                                <scope line="89"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="95"/>
                </scope>
            </method>
            <javadoc line="102">
                Returns the bi-diagonal matrix B of the transform.                
                <return>
                    the B matrix                    
                </return>
            </javadoc>
            <method name="getB" type="RealMatrix" line="106">
                <scope line="107">
                    <declaration name="m" type="int" line="108"/>
                    <declaration name="n" type="int" line="109"/>
                    <declaration name="ba" type="double[][]" line="110"/>
                    <scope line="111">
                        <scope line="113">
                            <scope line="114"/>
                        </scope>
                        <scope line="118">
                            <scope line="119"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="128">
                Returns the matrix V of the transform.
                  &lt;p&gt;V is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;                
                <return>
                    the V matrix                    
                </return>
            </javadoc>
            <method name="getV" type="RealMatrix" line="133">
                <scope line="134">
                    <declaration name="m" type="int" line="135"/>
                    <declaration name="n" type="int" line="136"/>
                    <declaration name="p" type="int" line="137"/>
                    <declaration name="diagOffset" type="int" line="138"/>
                    <declaration name="diagonal" type="double[]" line="139"/>
                    <declaration name="va" type="double[][]" line="140"/>
                    <scope line="141"/>
                    <scope line="144">
                        <declaration name="hK" type="double[]" line="145"/>
                        <scope line="147">
                            <scope line="148">
                                <declaration name="beta" type="double" line="149"/>
                                <scope line="150"/>
                                <scope line="154"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="160"/>
                </scope>
            </method>
            <javadoc line="167">
                Get the Householder vectors of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the main diagonal elements of the B matrix                    
                </return>
            </javadoc>
            <method name="getHouseholderVectorsRef" type="double[][]" line="173"/>
            <javadoc line="176">
                Get the main diagonal elements of the matrix B of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the main diagonal elements of the B matrix                    
                </return>
            </javadoc>
            <method name="getMainDiagonalRef" type="double[]" line="182"/>
            <javadoc line="185">
                Get the secondary diagonal elements of the matrix B of the transform.
                  &lt;p&gt;Note that since this class is only intended for internal use,
                  it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;                
                <return>
                    the secondary diagonal elements of the B matrix                    
                </return>
            </javadoc>
            <method name="getSecondaryDiagonalRef" type="double[]" line="191"/>
            <javadoc line="194">
                Check if the matrix is transformed to upper bi-diagonal.                
                <return>
                    true if the matrix is transformed to upper bi-diagonal                    
                </return>
            </javadoc>
            <method name="isUpperBiDiagonal" type="boolean" line="198"/>
            <javadoc line="201">
                Transform original matrix to upper bi-diagonal form.
                  &lt;p&gt;Transformation is done using alternate Householder transforms
                  on columns and rows.&lt;/p&gt;                
            </javadoc>
            <method name="transformToUpperBiDiagonal" type="void" line="206">
                <declaration name="m" type="int" line="207"/>
                <declaration name="n" type="int" line="208"/>
                <scope line="209">
                    <declaration name="xNormSqr" type="double" line="210"/>
                    <scope line="211">
                        <declaration name="c" type="double" line="212"/>
                    </scope>
                    <declaration name="hK" type="double[]" line="215"/>
                    <declaration name="a" type="double" line="216"/>
                    <scope line="218">
                        <scope line="220">
                            <declaration name="alpha" type="double" line="221"/>
                            <scope line="222">
                                <declaration name="hI" type="double[]" line="223"/>
                            </scope>
                            <scope line="227">
                                <declaration name="hI" type="double[]" line="228"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="233">
                        <scope line="235">
                            <declaration name="c" type="double" line="236"/>
                        </scope>
                        <declaration name="b" type="double" line="239"/>
                        <scope line="241">
                            <scope line="243">
                                <declaration name="hI" type="double[]" line="244"/>
                                <declaration name="beta" type="double" line="245"/>
                                <scope line="246"/>
                                <scope line="250"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="258">
                Transform original matrix to lower bi-diagonal form.
                  &lt;p&gt;Transformation is done using alternate Householder transforms
                  on rows and columns.&lt;/p&gt;                
            </javadoc>
            <method name="transformToLowerBiDiagonal" type="void" line="263">
                <declaration name="m" type="int" line="264"/>
                <declaration name="n" type="int" line="265"/>
                <scope line="266">
                    <declaration name="hK" type="double[]" line="267"/>
                    <declaration name="xNormSqr" type="double" line="268"/>
                    <scope line="269">
                        <declaration name="c" type="double" line="270"/>
                    </scope>
                    <declaration name="a" type="double" line="273"/>
                    <scope line="275">
                        <scope line="277">
                            <declaration name="hI" type="double[]" line="278"/>
                            <declaration name="alpha" type="double" line="279"/>
                            <scope line="280"/>
                            <scope line="284"/>
                        </scope>
                    </scope>
                    <scope line="289">
                        <declaration name="hKp1" type="double[]" line="290"/>
                        <scope line="292">
                            <declaration name="c" type="double" line="293"/>
                        </scope>
                        <declaration name="b" type="double" line="296"/>
                        <scope line="298">
                            <scope line="300">
                                <declaration name="beta" type="double" line="301"/>
                                <scope line="302">
                                    <declaration name="hI" type="double[]" line="303"/>
                                </scope>
                                <scope line="307">
                                    <declaration name="hI" type="double[]" line="308"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>