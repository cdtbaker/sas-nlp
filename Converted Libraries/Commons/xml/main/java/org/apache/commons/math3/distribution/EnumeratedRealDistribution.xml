<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotANumberException"/>
        <import package="org.apache.commons.math3.exception.NotFiniteNumberException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <class name="EnumeratedRealDistribution" line="32">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="32">
                &lt;p&gt;Implementation of a real-valued {@link EnumeratedDistribution}.
                  &lt;p&gt;Values with zero-probability are allowed but they do not extend the
                  support.&lt;br/&gt;
                  Duplicate values are allowed. Probabilities of duplicate values are combined
                  when computing cumulative probabilities and statistics.&lt;/p&gt;                
                <version>
                    $Id: EnumeratedRealDistribution.java 1566274 2014-02-09 11:21:28Z tn $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <javadoc line="45">
                Serializable UID.                
            </javadoc>
            <declaration name="innerDistribution" type="EnumeratedDistribution&amp;lt;Double&amp;gt;" line="48"/>
            <javadoc line="48">
                {@link EnumeratedDistribution} (using the {@link Double} wrapper)
                  used to generate the pmf.                
            </javadoc>
            <javadoc line="54">
                Create a discrete distribution using the given probability mass function
                  enumeration.                
                <param>
                    singletons array of random variable values.                    
                </param>
                <param>
                    probabilities array of probabilities.                    
                </param>
                <throws>
                    DimensionMismatchException if{@code singletons.length != probabilities.length}                    
                </throws>
                <throws>
                    NotPositiveException if any of the probabilities are negative.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the probabilities are infinite.                    
                </throws>
                <throws>
                    NotANumberException if any of the probabilities are NaN.                    
                </throws>
                <throws>
                    MathArithmeticException all of the probabilities are 0.                    
                </throws>
            </javadoc>
            <method name="EnumeratedRealDistribution" type="constructor" line="69">
                <params>
                    <param name="singletons" type="double[]"/>
                    <param name="probabilities" type="double[]"/>
                </params>
            </method>
            <javadoc line="73">
                Create a discrete distribution using the given random number generator
                  and probability mass function enumeration.                
                <param>
                    rng random number generator.                    
                </param>
                <param>
                    singletons array of random variable values.                    
                </param>
                <param>
                    probabilities array of probabilities.                    
                </param>
                <throws>
                    DimensionMismatchException if{@code singletons.length != probabilities.length}                    
                </throws>
                <throws>
                    NotPositiveException if any of the probabilities are negative.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the probabilities are infinite.                    
                </throws>
                <throws>
                    NotANumberException if any of the probabilities are NaN.                    
                </throws>
                <throws>
                    MathArithmeticException all of the probabilities are 0.                    
                </throws>
            </javadoc>
            <method name="EnumeratedRealDistribution" type="constructor" line="90">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="singletons" type="double[]"/>
                    <param name="probabilities" type="double[]"/>
                </params>
                <scope line="92"/>
                <declaration name="samples" type="List&amp;lt;Pair&amp;lt;Double,Double&amp;gt;&amp;gt;" line="96"/>
                <scope line="98"/>
            </method>
            <javadoc line="105">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="109">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="113">
                For a random variable {@code X} whose values are distributed according to
                  this distribution, this method returns {@code P(X = x)}. In other words,
                  this method represents the probability mass function (PMF) for the
                  distribution.                
                <param>
                    x the point at which the PMF is evaluated                    
                </param>
                <return>
                    the value of the probability mass function at point {@code x}                    
                </return>
            </javadoc>
            <method name="density" type="double" line="122">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="126">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="129">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="probability" type="double" line="130"/>
                <scope line="132">
                    <scope line="133"/>
                </scope>
            </method>
            <javadoc line="141">
                {@inheritDoc}                
            </javadoc>
            <method name="inverseCumulativeProbability" type="double" line="145">
                <params>
                    <param name="p" type="double"/>
                </params>
                <scope line="146"/>
                <declaration name="probability" type="double" line="150"/>
                <declaration name="x" type="double" line="151"/>
                <scope line="152">
                    <scope line="153"/>
                    <scope line="160"/>
                </scope>
            </method>
            <javadoc line="168">
                {@inheritDoc}                
                <return>
                    {@code sum(singletons[i]  probabilities[i])}                    
                </return>
            </javadoc>
            <method name="getNumericalMean" type="double" line="173">
                <declaration name="mean" type="double" line="174"/>
                <scope line="176"/>
            </method>
            <javadoc line="183">
                {@inheritDoc}                
                <return>
                    {@code sum((singletons[i] - mean) ^ 2  probabilities[i])}                    
                </return>
            </javadoc>
            <method name="getNumericalVariance" type="double" line="188">
                <declaration name="mean" type="double" line="189"/>
                <declaration name="meanOfSquares" type="double" line="190"/>
                <scope line="192"/>
            </method>
            <javadoc line="200">
                {@inheritDoc}Returns the lowest value with non-zero probability.                
                <return>
                    the lowest value with non-zero probability.                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="207">
                <declaration name="min" type="double" line="208"/>
                <scope line="209">
                    <scope line="210"/>
                </scope>
            </method>
            <javadoc line="218">
                {@inheritDoc}Returns the highest value with non-zero probability.                
                <return>
                    the highest value with non-zero probability.                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="225">
                <declaration name="max" type="double" line="226"/>
                <scope line="227">
                    <scope line="228"/>
                </scope>
            </method>
            <javadoc line="236">
                {@inheritDoc}The support of this distribution includes the lower bound.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="243"/>
            <javadoc line="247">
                {@inheritDoc}The support of this distribution includes the upper bound.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="254"/>
            <javadoc line="258">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="265"/>
            <javadoc line="269">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="double" line="273"/>
        </class>
    </source>