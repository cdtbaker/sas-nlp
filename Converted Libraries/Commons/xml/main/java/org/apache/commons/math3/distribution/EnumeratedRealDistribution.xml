<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotANumberException"/>
        <import package="org.apache.commons.math3.exception.NotFiniteNumberException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <class name="EnumeratedRealDistribution" line="12">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="12">
                &lt;p&gt;Implementation of a real-valued {@link EnumeratedDistribution}.
                  &lt;p&gt;Values with zero-probability are allowed but they do not extend the
                  support.&lt;br/&gt;
                  Duplicate values are allowed. Probabilities of duplicate values are combined
                  when computing cumulative probabilities and statistics.&lt;/p&gt;                
                <version>
                    $Id: EnumeratedRealDistribution.java 1456769 2013-03-15 04:51:34Z psteitz $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="22"/>
            <javadoc line="22">
                Serializable UID.                
            </javadoc>
            <declaration name="innerDistribution" type="EnumeratedDistribution&lt;Double&gt;" line="26"/>
            <javadoc line="26">
                {@link EnumeratedDistribution} (using the {@link Double} wrapper)
                  used to generate the pmf.                
            </javadoc>
            <javadoc line="31">
                Create a discrete distribution using the given probability mass function
                  enumeration.                
                <param>
                    singletons array of random variable values.                    
                </param>
                <param>
                    probabilities array of probabilities.                    
                </param>
                <throws>
                    DimensionMismatchException if{@code singletons.length != probabilities.length}                    
                </throws>
                <throws>
                    NotPositiveException if any of the probabilities are negative.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the probabilities are infinite.                    
                </throws>
                <throws>
                    NotANumberException if any of the probabilities are NaN.                    
                </throws>
                <throws>
                    MathArithmeticException all of the probabilities are 0.                    
                </throws>
            </javadoc>
            <method name="EnumeratedRealDistribution" type="constructor" line="42">
                <params>
                    <param name="singletons" type="double[]"/>
                    <param name="probabilities" type="double[]"/>
                </params>
            </method>
            <javadoc line="45">
                Create a discrete distribution using the given random number generator
                  and probability mass function enumeration.                
                <param>
                    rng random number generator.                    
                </param>
                <param>
                    singletons array of random variable values.                    
                </param>
                <param>
                    probabilities array of probabilities.                    
                </param>
                <throws>
                    DimensionMismatchException if{@code singletons.length != probabilities.length}                    
                </throws>
                <throws>
                    NotPositiveException if any of the probabilities are negative.                    
                </throws>
                <throws>
                    NotFiniteNumberException if any of the probabilities are infinite.                    
                </throws>
                <throws>
                    NotANumberException if any of the probabilities are NaN.                    
                </throws>
                <throws>
                    MathArithmeticException all of the probabilities are 0.                    
                </throws>
            </javadoc>
            <method name="EnumeratedRealDistribution" type="constructor" line="57">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="singletons" type="double[]"/>
                    <param name="probabilities" type="double[]"/>
                </params>
                <scope line="59"/>
                <declaration name="samples" type="List&lt;Pair&lt;Double,Double&gt;&gt;" line="62"/>
                <scope line="63"/>
            </method>
            <javadoc line="68">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="71">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="74">
                For a random variable {@code X} whose values are distributed according to
                  this distribution, this method returns {@code P(X = x)}. In other words,
                  this method represents the probability mass function (PMF) for the
                  distribution.                
                <param>
                    x the point at which the PMF is evaluated                    
                </param>
                <return>
                    the value of the probability mass function at point {@code x}                    
                </return>
            </javadoc>
            <method name="density" type="double" line="82">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="85">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="88">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="probability" type="double" line="89"/>
                <scope line="90">
                    <scope line="91"/>
                </scope>
            </method>
            <javadoc line="97">
                {@inheritDoc}                
                <return>
                    {@code sum(singletons[i]  probabilities[i])}                    
                </return>
            </javadoc>
            <method name="getNumericalMean" type="double" line="101">
                <declaration name="mean" type="double" line="102"/>
                <scope line="103"/>
            </method>
            <javadoc line="108">
                {@inheritDoc}                
                <return>
                    {@code sum((singletons[i] - mean) ^ 2  probabilities[i])}                    
                </return>
            </javadoc>
            <method name="getNumericalVariance" type="double" line="112">
                <declaration name="mean" type="double" line="113"/>
                <declaration name="meanOfSquares" type="double" line="114"/>
                <scope line="115"/>
            </method>
            <javadoc line="121">
                {@inheritDoc}Returns the lowest value with non-zero probability.                
                <return>
                    the lowest value with non-zero probability.                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="125">
                <declaration name="min" type="double" line="126"/>
                <scope line="127">
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="134">
                {@inheritDoc}Returns the highest value with non-zero probability.                
                <return>
                    the highest value with non-zero probability.                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="138">
                <declaration name="max" type="double" line="139"/>
                <scope line="140">
                    <scope line="141"/>
                </scope>
            </method>
            <javadoc line="147">
                {@inheritDoc}The support of this distribution includes the lower bound.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="151"/>
            <javadoc line="154">
                {@inheritDoc}The support of this distribution includes the upper bound.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="158"/>
            <javadoc line="161">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="165"/>
            <javadoc line="168">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="double" line="171"/>
        </class>
    </source>