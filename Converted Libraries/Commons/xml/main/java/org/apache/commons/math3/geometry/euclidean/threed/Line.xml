<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Vector1D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Embedding"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="Line" line="30">
            <implements interface="Embedding">
                <type_params>
                    <type_param name="Euclidean3D"/>
                    <type_param name="Euclidean1D"/>
                </type_params>
            </implements>
            <javadoc line="30">
                The class represent lines in a three dimensional space.
                  &lt;p&gt;Each oriented line is intrinsically associated with an abscissa
                  which is a coordinate on the line. The point at abscissa 0 is the
                  orthogonal projection of the origin on the line, another equivalent
                  way to express this is to say that it is the point of the line
                  which is closest to the origin. Abscissa increases in the line
                  direction.&lt;/p&gt;                
                <version>
                    $Id: Line.java 1555176 2014-01-03 18:07:59Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_TOLERANCE" type="double" line="44"/>
            <javadoc line="44">
                Default value for tolerance.                
            </javadoc>
            <declaration name="direction" type="Vector3D" line="47"/>
            <javadoc line="47">
                Line direction.                
            </javadoc>
            <declaration name="zero" type="Vector3D" line="50"/>
            <javadoc line="50">
                Line point closest to the origin.                
            </javadoc>
            <declaration name="tolerance" type="double" line="53"/>
            <javadoc line="53">
                Tolerance below which points are considered identical.                
            </javadoc>
            <javadoc line="56">
                Build a line from two points.                
                <param>
                    p1 first point belonging to the line (this can be any point)                    
                </param>
                <param>
                    p2 second point belonging to the line (this can be any point, different from p1)                    
                </param>
                <param>
                    tolerance tolerance below which points are considered identical                    
                </param>
                <exception>
                    MathIllegalArgumentException if the points are equal                    
                </exception>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="Line" type="constructor" line="64">
                <params>
                    <param name="p1" type="Vector3D"/>
                    <param name="p2" type="Vector3D"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="69">
                Copy constructor.
                  &lt;p&gt;The created instance is completely independent from the
                  original instance, it is a deep copy.&lt;/p&gt;                
                <param>
                    line line to copy                    
                </param>
            </javadoc>
            <method name="Line" type="constructor" line="74">
                <params>
                    <param name="line" type="Line"/>
                </params>
            </method>
            <javadoc line="80">
                Build a line from two points.                
                <param>
                    p1 first point belonging to the line (this can be any point)                    
                </param>
                <param>
                    p2 second point belonging to the line (this can be any point, different from p1)                    
                </param>
                <exception>
                    MathIllegalArgumentException if the points are equal                    
                </exception>
                <deprecated>
                    as of 3.3, replaced with {@link #Line(Vector3D,Vector3D,double)}                    
                </deprecated>
            </javadoc>
            <method name="Line" type="constructor" line="87">
                <params>
                    <param name="p1" type="Vector3D"/>
                    <param name="p2" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="91">
                Reset the instance as if built from two points.                
                <param>
                    p1 first point belonging to the line (this can be any point)                    
                </param>
                <param>
                    p2 second point belonging to the line (this can be any point, different from p1)                    
                </param>
                <exception>
                    MathIllegalArgumentException if the points are equal                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="96">
                <params>
                    <param name="p1" type="Vector3D"/>
                    <param name="p2" type="Vector3D"/>
                </params>
                <declaration name="delta" type="Vector3D" line="97"/>
                <declaration name="norm2" type="double" line="98"/>
                <scope line="99"/>
            </method>
            <javadoc line="106">
                Get the tolerance below which points are considered identical.                
                <return>
                    tolerance below which points are considered identical                    
                </return>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="getTolerance" type="double" line="110"/>
            <javadoc line="114">
                Get a line with reversed direction.                
                <return>
                    a new instance, with reversed direction                    
                </return>
            </javadoc>
            <method name="revert" type="Line" line="117">
                <declaration name="reverted" type="Line" line="118"/>
            </method>
            <javadoc line="123">
                Get the normalized direction vector.                
                <return>
                    normalized direction vector                    
                </return>
            </javadoc>
            <method name="getDirection" type="Vector3D" line="126"/>
            <javadoc line="130">
                Get the line point closest to the origin.                
                <return>
                    line point closest to the origin                    
                </return>
            </javadoc>
            <method name="getOrigin" type="Vector3D" line="133"/>
            <javadoc line="137">
                Get the abscissa of a point with respect to the line.
                  &lt;p&gt;The abscissa is 0 if the projection of the point and the
                  projection of the frame origin on the line are the same
                  point.&lt;/p&gt;                
                <param>
                    point point to check                    
                </param>
                <return>
                    abscissa of the point                    
                </return>
            </javadoc>
            <method name="getAbscissa" type="double" line="144">
                <params>
                    <param name="point" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="148">
                Get one point from the line.                
                <param>
                    abscissa desired abscissa for the point                    
                </param>
                <return>
                    one point belonging to the line, at specified abscissa                    
                </return>
            </javadoc>
            <method name="pointAt" type="Vector3D" line="152">
                <params>
                    <param name="abscissa" type="double"/>
                </params>
            </method>
            <javadoc line="156">
                Transform a space point into a sub-space point.                
                <param>
                    vector n-dimension point of the space                    
                </param>
                <return>
                    (n-1)-dimension point of the sub-space corresponding to
                      the specified space point                    
                </return>
            </javadoc>
            <method name="toSubSpace" type="Vector1D" line="161">
                <params>
                    <param name="vector" type="Vector&lt;Euclidean3D&gt;"/>
                </params>
            </method>
            <javadoc line="165">
                Transform a sub-space point into a space point.                
                <param>
                    vector (n-1)-dimension point of the sub-space                    
                </param>
                <return>
                    n-dimension point of the space corresponding to the
                      specified sub-space point                    
                </return>
            </javadoc>
            <method name="toSpace" type="Vector3D" line="170">
                <params>
                    <param name="vector" type="Vector&lt;Euclidean1D&gt;"/>
                </params>
            </method>
            <javadoc line="174">
                {@inheritDoc}                
                <see>
                    #getAbscissa(Vector3D)                    
                </see>
            </javadoc>
            <method name="toSubSpace" type="Vector1D" line="177">
                <params>
                    <param name="point" type="Point&lt;Euclidean3D&gt;"/>
                </params>
            </method>
            <javadoc line="181">
                {@inheritDoc}                
                <see>
                    #pointAt(double)                    
                </see>
            </javadoc>
            <method name="toSpace" type="Vector3D" line="184">
                <params>
                    <param name="point" type="Point&lt;Euclidean1D&gt;"/>
                </params>
            </method>
            <javadoc line="188">
                Check if the instance is similar to another line.
                  &lt;p&gt;Lines are considered similar if they contain the same
                  points. This does not mean they are equal since they can have
                  opposite directions.&lt;/p&gt;                
                <param>
                    line line to which instance should be compared                    
                </param>
                <return>
                    true if the lines are similar                    
                </return>
            </javadoc>
            <method name="isSimilarTo" type="boolean" line="195">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <declaration name="angle" type="double" line="196"/>
            </method>
            <javadoc line="200">
                Check if the instance contains a point.                
                <param>
                    p point to check                    
                </param>
                <return>
                    true if p belongs to the line                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="204">
                <params>
                    <param name="p" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="208">
                Compute the distance between the instance and a point.                
                <param>
                    p to check                    
                </param>
                <return>
                    distance between the instance and the point                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="212">
                <params>
                    <param name="p" type="Vector3D"/>
                </params>
                <declaration name="d" type="Vector3D" line="213"/>
                <declaration name="n" type="Vector3D" line="214"/>
            </method>
            <javadoc line="218">
                Compute the shortest distance between the instance and another line.                
                <param>
                    line line to check against the instance                    
                </param>
                <return>
                    shortest distance between the instance and the line                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="222">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <comment line="228">
                    lines are parallel                    
                </comment>
                <comment line="232">
                    signed separation of the two parallel planes that contains the lines                    
                </comment>
                <declaration name="normal" type="Vector3D" line="224"/>
                <declaration name="n" type="double" line="225"/>
                <scope line="226"/>
                <declaration name="offset" type="double" line="232"/>
            </method>
            <javadoc line="238">
                Compute the point of the instance closest to another line.                
                <param>
                    line line to check against the instance                    
                </param>
                <return>
                    point of the instance closest to another line                    
                </return>
            </javadoc>
            <method name="closestPoint" type="Vector3D" line="242">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <comment line="248">
                    the lines are parallel                    
                </comment>
                <declaration name="cos" type="double" line="244"/>
                <declaration name="n" type="double" line="245"/>
                <scope line="246"/>
                <declaration name="delta0" type="Vector3D" line="251"/>
                <declaration name="a" type="double" line="252"/>
                <declaration name="b" type="double" line="253"/>
            </method>
            <javadoc line="259">
                Get the intersection point of the instance and another line.                
                <param>
                    line other line                    
                </param>
                <return>
                    intersection point of the instance and the other line
                      or null if there are no intersection points                    
                </return>
            </javadoc>
            <method name="intersection" type="Vector3D" line="264">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <declaration name="closest" type="Vector3D" line="265"/>
            </method>
            <javadoc line="269">
                Build a sub-line covering the whole line.                
                <return>
                    a sub-line covering the whole line                    
                </return>
            </javadoc>
            <method name="wholeLine" type="SubLine" line="272"/>
        </class>
    </source>