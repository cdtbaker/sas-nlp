<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.linear">
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <class name="AbstractLinearOptimizer" line="8">
            <implements interface="LinearOptimizer"/>
            <javadoc line="8">
                Base class for implementing linear optimizers.
                  &lt;p&gt;
                  This base class handles the boilerplate methods associated to thresholds
                  settings and iterations counters.                
                <version>
                    $Id: AbstractLinearOptimizer.java 1422230 2012-12-15 12:11:13Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_MAX_ITERATIONS" type="int" line="18"/>
            <javadoc line="18">
                Default maximal number of iterations allowed.                
            </javadoc>
            <declaration name="function" type="LinearObjectiveFunction" line="22"/>
            <javadoc line="22">
                Linear objective function.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="linearConstraints" type="Collection&lt;LinearConstraint&gt;" line="27"/>
            <javadoc line="27">
                Linear constraints.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="goal" type="GoalType" line="32"/>
            <javadoc line="32">
                Type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="nonNegative" type="boolean" line="37"/>
            <javadoc line="37">
                Whether to restrict the variables to non-negative values.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="maxIterations" type="int" line="42"/>
            <javadoc line="42">
                Maximal number of iterations allowed.                
            </javadoc>
            <declaration name="iterations" type="int" line="46"/>
            <javadoc line="46">
                Number of iterations already performed.                
            </javadoc>
            <javadoc line="50">
                Simple constructor with default settings.
                  &lt;p&gt;The maximal number of evaluation is set to its default value.&lt;/p&gt;                
            </javadoc>
            <method name="AbstractLinearOptimizer" type="constructor" line="54"/>
            <javadoc line="57">
                @return {@code true} if the variables are restricted to non-negative values.                
            </javadoc>
            <method name="restrictToNonNegative" type="boolean" line="60"/>
            <javadoc line="63">
                @return the optimization type.                
            </javadoc>
            <method name="getGoalType" type="GoalType" line="66"/>
            <javadoc line="69">
                @return the optimization type.                
            </javadoc>
            <method name="getFunction" type="LinearObjectiveFunction" line="72"/>
            <javadoc line="75">
                @return the optimization type.                
            </javadoc>
            <method name="getConstraints" type="Collection<LinearConstraint>" line="78"/>
            <javadoc line="81">
                {@inheritDoc}                
            </javadoc>
            <method name="setMaxIterations" type="void" line="84">
                <params>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="87">
                {@inheritDoc}                
            </javadoc>
            <method name="getMaxIterations" type="int" line="90"/>
            <javadoc line="93">
                {@inheritDoc}                
            </javadoc>
            <method name="getIterations" type="int" line="96"/>
            <javadoc line="99">
                Increment the iterations counter by 1.                
                <exception>
                    MaxCountExceededException if the maximal number of iterations is exceeded                    
                </exception>
            </javadoc>
            <method name="incrementIterationsCounter" type="void" line="103">
                <scope line="104"/>
            </method>
            <javadoc line="108">
                {@inheritDoc}                
            </javadoc>
            <method name="optimize" type="PointValuePair" line="111">
                <params>
                    <param name="f" type="LinearObjectiveFunction"/>
                    <param name="constraints" type="Collection<LinearConstraint>"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="restrictToNonNegative" type="boolean"/>
                </params>
            </method>
            <method name="doOptimize" type="PointValuePair" line="119"/>
            <javadoc line="119">
                Perform the bulk of optimization algorithm.                
                <return>
                    the point/value pair giving the optimal value for objective function                    
                </return>
                <exception>
                    MathIllegalStateException if no solution fulfilling the constraints
                      can be found in the allowed number of iterations                    
                </exception>
            </javadoc>
        </class>
    </source>