<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode">
        <import package="java.lang.reflect.Array"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="JacobianMatrices" line="10">
            <javadoc line="10">
                This class defines a set of {@link SecondaryEquations secondary equations} to
                  compute the Jacobian matrices with respect to the initial state vector and, if
                  any, to some parameters of the primary ODE set.
                  &lt;p&gt;
                  It is intended to be packed into an {@link ExpandableStatefulODE}in conjunction with a primary set of ODE, which may be:
                  &lt;ul&gt;
                  &lt;li&gt;a {@link FirstOrderDifferentialEquations}&lt;/li&gt;
                  &lt;li&gt;a {@link MainStateJacobianProvider}&lt;/li&gt;
                  &lt;/ul&gt;
                  In order to compute Jacobian matrices with respect to some parameters of the
                  primary ODE set, the following parameter Jacobian providers may be set:
                  &lt;ul&gt;
                  &lt;li&gt;a {@link ParameterJacobianProvider}&lt;/li&gt;
                  &lt;li&gt;a {@link ParameterizedODE}&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <see>
                    ExpandableStatefulODE                    
                </see>
                <see>
                    FirstOrderDifferentialEquations                    
                </see>
                <see>
                    MainStateJacobianProvider                    
                </see>
                <see>
                    ParameterJacobianProvider                    
                </see>
                <see>
                    ParameterizedODE                    
                </see>
                <version>
                    $Id: JacobianMatrices.java 1422447 2012-12-16 01:38:40Z psteitz $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="efode" type="ExpandableStatefulODE" line="36"/>
            <javadoc line="36">
                Expandable first order differential equation.                
            </javadoc>
            <declaration name="index" type="int" line="40"/>
            <javadoc line="40">
                Index of the instance in the expandable set.                
            </javadoc>
            <declaration name="jode" type="MainStateJacobianProvider" line="44"/>
            <javadoc line="44">
                FODE with exact primary Jacobian computation skill.                
            </javadoc>
            <declaration name="pode" type="ParameterizedODE" line="48"/>
            <javadoc line="48">
                FODE without exact parameter Jacobian computation skill.                
            </javadoc>
            <declaration name="stateDim" type="int" line="52"/>
            <javadoc line="52">
                Main state vector dimension.                
            </javadoc>
            <declaration name="selectedParameters" type="ParameterConfiguration[]" line="56"/>
            <javadoc line="56">
                Selected parameters for parameter Jacobian computation.                
            </javadoc>
            <declaration name="jacobianProviders" type="List&lt;ParameterJacobianProvider&gt;" line="60"/>
            <javadoc line="60">
                FODE with exact parameter Jacobian computation skill.                
            </javadoc>
            <declaration name="paramDim" type="int" line="64"/>
            <javadoc line="64">
                Parameters dimension.                
            </javadoc>
            <declaration name="dirtyParameter" type="boolean" line="68"/>
            <javadoc line="68">
                Boolean for selected parameters consistency.                
            </javadoc>
            <declaration name="matricesData" type="double[]" line="72"/>
            <javadoc line="72">
                State and parameters Jacobian matrices in a row.                
            </javadoc>
            <javadoc line="76">
                Simple constructor for a secondary equations set computing Jacobian matrices.
                  &lt;p&gt;
                  Parameters must belong to the supported ones given by {@link Parameterizable#getParametersNames()}, so the primary set of differential
                  equations must be {@link Parameterizable}.
                  &lt;/p&gt;
                  &lt;p&gt;Note that each selection clears the previous selected parameters.&lt;/p&gt;                
                <param>
                    fode the primary first order differential equations set to extend                    
                </param>
                <param>
                    hY step used for finite difference computation with respect to state vector                    
                </param>
                <param>
                    parameters parameters to consider for Jacobian matrices processing
                      (may be null if parameters Jacobians is not desired)                    
                </param>
                <exception>
                    DimensionMismatchException if there is a dimension mismatch between
                      the steps array {@code hY} and the equation dimension                    
                </exception>
            </javadoc>
            <method name="JacobianMatrices" type="constructor" line="90">
                <params>
                    <param name="fode" type="FirstOrderDifferentialEquations"/>
                    <param name="hY" type="double[]"/>
                    <param name="parameters" type="String"/>
                </params>
            </method>
            <javadoc line="93">
                Simple constructor for a secondary equations set computing Jacobian matrices.
                  &lt;p&gt;
                  Parameters must belong to the supported ones given by {@link Parameterizable#getParametersNames()}, so the primary set of differential
                  equations must be {@link Parameterizable}.
                  &lt;/p&gt;
                  &lt;p&gt;Note that each selection clears the previous selected parameters.&lt;/p&gt;                
                <param>
                    jode the primary first order differential equations set to extend                    
                </param>
                <param>
                    parameters parameters to consider for Jacobian matrices processing
                      (may be null if parameters Jacobians is not desired)                    
                </param>
            </javadoc>
            <method name="JacobianMatrices" type="constructor" line="104">
                <params>
                    <param name="jode" type="MainStateJacobianProvider"/>
                    <param name="parameters" type="String"/>
                </params>
                <scope line="110"/>
                <scope line="114">
                    <scope line="116"/>
                </scope>
                <scope line="124"/>
            </method>
            <javadoc line="128">
                Register the variational equations for the Jacobians matrices to the expandable set.                
                <param>
                    expandable expandable set into which variational equations should be registered                    
                </param>
                <throws>
                    DimensionMismatchException if the dimension of the partial state does not
                      match the selected equations set dimension                    
                </throws>
                <exception>
                    MismatchedEquations if the primary set of the expandable set does
                      not match the one used to build the instance                    
                </exception>
                <see>
                    ExpandableStatefulODE#addSecondaryEquations(SecondaryEquations)                    
                </see>
            </javadoc>
            <method name="registerVariationalEquations" type="void" line="137">
                <params>
                    <param name="expandable" type="ExpandableStatefulODE"/>
                </params>
                <declaration name="ode" type="FirstOrderDifferentialEquations" line="138"/>
                <scope line="139"/>
            </method>
            <javadoc line="146">
                Add a parameter Jacobian provider.                
                <param>
                    provider the parameter Jacobian provider to compute exactly the parameter Jacobian matrix                    
                </param>
            </javadoc>
            <method name="addParameterJacobianProvider" type="void" line="150">
                <params>
                    <param name="provider" type="ParameterJacobianProvider"/>
                </params>
            </method>
            <javadoc line="153">
                Set a parameter Jacobian provider.                
                <param>
                    parameterizedOde the parameterized ODE to compute the parameter Jacobian matrix using finite differences                    
                </param>
            </javadoc>
            <method name="setParameterizedODE" type="void" line="157">
                <params>
                    <param name="parameterizedOde" type="ParameterizedODE"/>
                </params>
            </method>
            <javadoc line="161">
                Set the step associated to a parameter in order to compute by finite
                  difference the Jacobian matrix.
                  &lt;p&gt;
                  Needed if and only if the primary ODE set is a {@link ParameterizedODE}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Given a non zero parameter value pval for the parameter, a reasonable value
                  for such a step is {@code pval  FastMath.sqrt(Precision.EPSILON)}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A zero value for such a step doesn&apos;t enable to compute the parameter Jacobian matrix.
                  &lt;/p&gt;                
                <param>
                    parameter parameter to consider for Jacobian processing                    
                </param>
                <param>
                    hP step for Jacobian finite difference computation w.r.t. the specified parameter                    
                </param>
                <see>
                    ParameterizedODE                    
                </see>
                <exception>
                    UnknownParameterException if the parameter is not supported                    
                </exception>
            </javadoc>
            <method name="setParameterStep" type="void" line="179">
                <params>
                    <param name="parameter" type="String"/>
                    <param name="hP" type="double"/>
                </params>
                <scope line="180">
                    <scope line="181"/>
                </scope>
            </method>
            <javadoc line="189">
                Set the initial value of the Jacobian matrix with respect to state.
                  &lt;p&gt;
                  If this method is not called, the initial value of the Jacobian
                  matrix with respect to state is set to identity.
                  &lt;/p&gt;                
                <param>
                    dYdY0 initial Jacobian matrix w.r.t. state                    
                </param>
                <exception>
                    DimensionMismatchException if matrix dimensions are incorrect                    
                </exception>
            </javadoc>
            <method name="setInitialMainStateJacobian" type="void" line="198">
                <params>
                    <param name="dYdY0" type="double[][]"/>
                </params>
                <declaration name="i" type="int" line="201"/>
                <scope line="202"/>
                <scope line="206"/>
            </method>
            <javadoc line="210">
                Set the initial value of a column of the Jacobian matrix with respect to one parameter.
                  &lt;p&gt;
                  If this method is not called for some parameter, the initial value of
                  the column of the Jacobian matrix with respect to this parameter is set to zero.
                  &lt;/p&gt;                
                <param>
                    pName parameter name                    
                </param>
                <param>
                    dYdP initial Jacobian column vector with respect to the parameter                    
                </param>
                <exception>
                    UnknownParameterException if a parameter is not supported                    
                </exception>
                <throws>
                    DimensionMismatchException if the column vector does not match state dimension                    
                </throws>
            </javadoc>
            <method name="setInitialParameterJacobian" type="void" line="221">
                <params>
                    <param name="pName" type="String"/>
                    <param name="dYdP" type="double[]"/>
                </params>
                <declaration name="i" type="int" line="223"/>
                <scope line="224">
                    <scope line="225">
                        <scope line="227"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="236">
                Get the current value of the Jacobian matrix with respect to state.                
                <param>
                    dYdY0 current Jacobian matrix with respect to state.                    
                </param>
            </javadoc>
            <method name="getCurrentMainSetJacobian" type="void" line="240">
                <params>
                    <param name="dYdY0" type="double[][]"/>
                </params>
                <declaration name="p" type="double[]" line="241"/>
                <declaration name="j" type="int" line="242"/>
                <scope line="243"/>
            </method>
            <javadoc line="248">
                Get the current value of the Jacobian matrix with respect to one parameter.                
                <param>
                    pName name of the parameter for the computed Jacobian matrix                    
                </param>
                <param>
                    dYdP current Jacobian matrix with respect to the named parameter                    
                </param>
            </javadoc>
            <method name="getCurrentParameterJacobian" type="void" line="253">
                <params>
                    <param name="pName" type="String"/>
                    <param name="dYdP" type="double[]"/>
                </params>
                <declaration name="p" type="double[]" line="254"/>
                <declaration name="i" type="int" line="255"/>
                <scope line="256">
                    <scope line="257"/>
                </scope>
            </method>
            <javadoc line="264">
                Check array dimensions.                
                <param>
                    expected expected dimension                    
                </param>
                <param>
                    array (may be null if expected is 0)                    
                </param>
                <throws>
                    DimensionMismatchException if the array dimension does not match the expected one                    
                </throws>
            </javadoc>
            <method name="checkDimension" type="void" line="270">
                <params>
                    <param name="expected" type="int"/>
                    <param name="array" type="Object"/>
                </params>
                <declaration name="arrayDimension" type="int" line="271"/>
                <scope line="272"/>
            </method>
            <class name="JacobiansSecondaryEquations" line="276">
                <implements interface="SecondaryEquations"/>
                <javadoc line="276">
                    Local implementation of secondary equations.
                      &lt;p&gt;
                      This class is an inner class to ensure proper scheduling of calls
                      by forcing the use of {@link JacobianMatrices#registerVariationalEquations(ExpandableStatefulODE)}.
                      &lt;/p&gt;                    
                </javadoc>
                <javadoc line="284">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getDimension" type="int" line="287"/>
                <javadoc line="290">
                    {@inheritDoc}                    
                </javadoc>
                <method name="computeDerivatives" type="void" line="293">
                    <params>
                        <param name="t" type="double"/>
                        <param name="y" type="double[]"/>
                        <param name="yDot" type="double[]"/>
                        <param name="z" type="double[]"/>
                        <param name="zDot" type="double[]"/>
                    </params>
                    <scope line="294"/>
                    <declaration name="dFdY" type="double[][]" line="298"/>
                    <scope line="300">
                        <declaration name="dFdYi" type="double[]" line="301"/>
                        <scope line="302">
                            <declaration name="s" type="double" line="303"/>
                            <declaration name="startIndex" type="int" line="304"/>
                            <declaration name="zIndex" type="int" line="305"/>
                            <scope line="306"/>
                        </scope>
                    </scope>
                    <scope line="313">
                        <declaration name="dFdP" type="double[]" line="314"/>
                        <declaration name="startIndex" type="int" line="315"/>
                        <scope line="316">
                            <declaration name="found" type="boolean" line="317"/>
                            <scope line="318">
                                <declaration name="provider" type="ParameterJacobianProvider" line="319"/>
                                <scope line="320">
                                    <scope line="322">
                                        <declaration name="dFdYi" type="double[]" line="323"/>
                                        <declaration name="zIndex" type="int" line="324"/>
                                        <declaration name="s" type="double" line="325"/>
                                        <scope line="326"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="335"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="MainStateJacobianWrapper" line="343">
                <implements interface="MainStateJacobianProvider"/>
                <javadoc line="343">
                    Wrapper class to compute jacobian matrices by finite differences for ODE
                      which do not compute them by themselves.                    
                </javadoc>
                <declaration name="ode" type="FirstOrderDifferentialEquations" line="348"/>
                <javadoc line="348">
                    Raw ODE without jacobians computation skill to be wrapped into a MainStateJacobianProvider.                    
                </javadoc>
                <declaration name="hY" type="double[]" line="352"/>
                <javadoc line="352">
                    Steps for finite difference computation of the jacobian df/dy w.r.t. state.                    
                </javadoc>
                <javadoc line="356">
                    Wrap a {@link FirstOrderDifferentialEquations} into a {@link MainStateJacobianProvider}.                    
                    <param>
                        ode original ODE problem, without jacobians computation skill                        
                    </param>
                    <param>
                        hY step sizes to compute the jacobian df/dy                        
                    </param>
                    <see>
                        JacobianMatrices#setMainStateSteps(double[])                        
                    </see>
                    <exception>
                        DimensionMismatchException if there is a dimension mismatch between
                          the steps array {@code hY} and the equation dimension                        
                    </exception>
                </javadoc>
                <method name="MainStateJacobianWrapper" type="constructor" line="364">
                    <params>
                        <param name="ode" type="FirstOrderDifferentialEquations"/>
                        <param name="hY" type="double[]"/>
                    </params>
                    <scope line="367"/>
                </method>
                <javadoc line="371">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getDimension" type="int" line="374"/>
                <javadoc line="377">
                    {@inheritDoc}                    
                </javadoc>
                <method name="computeDerivatives" type="void" line="380">
                    <params>
                        <param name="t" type="double"/>
                        <param name="y" type="double[]"/>
                        <param name="yDot" type="double[]"/>
                    </params>
                </method>
                <javadoc line="383">
                    {@inheritDoc}                    
                </javadoc>
                <method name="computeMainStateJacobian" type="void" line="386">
                    <params>
                        <param name="t" type="double"/>
                        <param name="y" type="double[]"/>
                        <param name="yDot" type="double[]"/>
                        <param name="dFdY" type="double[][]"/>
                    </params>
                    <declaration name="n" type="int" line="387"/>
                    <declaration name="tmpDot" type="double[]" line="388"/>
                    <scope line="389">
                        <declaration name="savedYj" type="double" line="390"/>
                        <scope line="393"/>
                    </scope>
                </method>
            </class>
            <class name="MismatchedEquations" line="400">
                <extends class="MathIllegalArgumentException"/>
                <javadoc line="400">
                    Special exception for equations mismatch.                    
                    <since>
                        3.1                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="405"/>
                <javadoc line="405">
                    Serializable UID.                    
                </javadoc>
                <javadoc line="409">
                    Simple constructor.                    
                </javadoc>
                <method name="MismatchedEquations" type="constructor" line="412"/>
            </class>
        </class>
    </source>