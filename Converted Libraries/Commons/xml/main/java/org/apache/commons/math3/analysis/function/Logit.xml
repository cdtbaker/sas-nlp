<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.function">
        <import package="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Logit" line="12">
            <implements interface="UnivariateDifferentiableFunction"/>
            <implements interface="DifferentiableUnivariateFunction"/>
            <javadoc line="12">
                &lt;a href=&quot;http://en.wikipedia.org/wiki/Logit&quot;&gt;
                  Logit&lt;/a&gt; function.
                  It is the inverse of the {@link Sigmoid sigmoid} function.                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: Logit.java 1391927 2012-09-30 00:03:30Z erans $                    
                </version>
            </javadoc>
            <declaration name="lo" type="double" line="20"/>
            <javadoc line="20">
                Lower bound.                
            </javadoc>
            <declaration name="hi" type="double" line="24"/>
            <javadoc line="24">
                Higher bound.                
            </javadoc>
            <javadoc line="28">
                Usual logit function, where the lower bound is 0 and the higher
                  bound is 1.                
            </javadoc>
            <method name="Logit" type="constructor" line="32"/>
            <javadoc line="35">
                Logit function.                
                <param>
                    lo Lower bound of the function domain.                    
                </param>
                <param>
                    hi Higher bound of the function domain.                    
                </param>
            </javadoc>
            <method name="Logit" type="constructor" line="40">
                <params>
                    <param name="lo" type="double"/>
                    <param name="hi" type="double"/>
                </params>
            </method>
            <javadoc line="44">
                {@inheritDoc}                
            </javadoc>
            <method name="value" type="double" line="47">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="50">
                {@inheritDoc}                
                <deprecated>
                    as of 3.1, replaced by {@link #value(DerivativeStructure)}                    
                </deprecated>
            </javadoc>
            <method name="derivative" type="UnivariateFunction" line="54"/>
            <class name="Parametric" line="57">
                <implements interface="ParametricUnivariateFunction"/>
                <javadoc line="57">
                    Parametric function where the input array contains the parameters of
                      the logit function, ordered as follows:
                      &lt;ul&gt;
                      &lt;li&gt;Lower bound&lt;/li&gt;
                      &lt;li&gt;Higher bound&lt;/li&gt;
                      &lt;/ul&gt;                    
                </javadoc>
                <javadoc line="66">
                    Computes the value of the logit at {@code x}.                    
                    <param>
                        x Value for which the function must be computed.                        
                    </param>
                    <param>
                        param Values of lower bound and higher bounds.                        
                    </param>
                    <return>
                        the value of the function.                        
                    </return>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 2.                        
                    </throws>
                </javadoc>
                <method name="value" type="double" line="75">
                    <params>
                        <param name="x" type="double"/>
                        <param name="param" type="double"/>
                    </params>
                </method>
                <javadoc line="79">
                    Computes the value of the gradient at {@code x}.
                      The components of the gradient vector are the partial
                      derivatives of the function with respect to each of the
                      &lt;em&gt;parameters&lt;/em&gt; (lower bound and higher bound).                    
                    <param>
                        x Value at which the gradient must be computed.                        
                    </param>
                    <param>
                        param Values for lower and higher bounds.                        
                    </param>
                    <return>
                        the gradient vector at {@code x}.                        
                    </return>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 2.                        
                    </throws>
                </javadoc>
                <method name="gradient" type="double[]" line="91">
                    <params>
                        <param name="x" type="double"/>
                        <param name="param" type="double"/>
                    </params>
                    <declaration name="lo" type="double" line="93"/>
                    <declaration name="hi" type="double" line="94"/>
                </method>
                <javadoc line="97">
                    Validates parameters to ensure they are appropriate for the evaluation of
                      the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.                    
                    <param>
                        param Values for lower and higher bounds.                        
                    </param>
                    <throws>
                        NullArgumentException if {@code param} is {@code null}.                        
                    </throws>
                    <throws>
                        DimensionMismatchException if the size of {@code param} is
                          not 2.                        
                    </throws>
                </javadoc>
                <method name="validateParameters" type="void" line="105">
                    <params>
                        <param name="param" type="double[]"/>
                    </params>
                    <scope line="106"/>
                    <scope line="109"/>
                </method>
            </class>
            <javadoc line="114">
                @param x Value at which to compute the logit.                
                <param>
                    lo Lower bound.                    
                </param>
                <param>
                    hi Higher bound.                    
                </param>
                <return>
                    the value of the logit function at {@code x}.                    
                </return>
                <throws>
                    OutOfRangeException if {@code x < lo} or {@code x > hi}.                    
                </throws>
            </javadoc>
            <method name="value" type="double" line="121">
                <params>
                    <param name="x" type="double"/>
                    <param name="lo" type="double"/>
                    <param name="hi" type="double"/>
                </params>
                <scope line="122"/>
            </method>
            <javadoc line="127">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
                <exception>
                    OutOfRangeException if parameter is outside of function domain                    
                </exception>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="132">
                <params>
                    <param name="t" type="DerivativeStructure"/>
                </params>
                <declaration name="x" type="double" line="133"/>
                <scope line="134"/>
                <declaration name="f" type="double[]" line="137"/>
                <scope line="139">
                    <scope line="140"/>
                    <scope line="143"/>
                </scope>
                <scope line="147">
                    <declaration name="invL" type="double" line="148"/>
                    <declaration name="xL" type="double" line="149"/>
                    <declaration name="invH" type="double" line="150"/>
                    <declaration name="xH" type="double" line="151"/>
                    <scope line="152"/>
                </scope>
            </method>
        </class>
    </source>