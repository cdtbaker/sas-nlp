<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomDataImpl"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="AbstractRealDistribution" line="31">
            <implements interface="RealDistribution"/>
            <implements interface="Serializable"/>
            <javadoc line="31">
                Base class for probability distributions on the reals.
                  Default implementations are provided for some of the methods
                  that do not vary from distribution to distribution.                
                <version>
                    $Id: AbstractRealDistribution.java 1422195 2012-12-15 06:45:18Z psteitz $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="SOLVER_DEFAULT_ABSOLUTE_ACCURACY" type="double" line="41"/>
            <javadoc line="41">
                Default accuracy.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="43">
                Serializable version identifier                
            </javadoc>
            <declaration name="randomData" type="RandomDataImpl" line="45"/>
            <javadoc line="45">
                RandomData instance used to generate samples from the distribution.                
                <deprecated>
                    As of 3.1, to be removed in 4.0. Please use the{@link #random} instance variable instead.                    
                </deprecated>
            </javadoc>
            <declaration name="random" type="RandomGenerator" line="53"/>
            <javadoc line="53">
                RNG instance used to generate samples from the distribution.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="59"/>
            <javadoc line="59">
                Solver absolute accuracy for inverse cumulative computation                
            </javadoc>
            <javadoc line="62">
                @deprecated As of 3.1, to be removed in 4.0. Please use{@link #AbstractRealDistribution(RandomGenerator)} instead.                
            </javadoc>
            <method name="AbstractRealDistribution" type="constructor" line="67">
                <comment line="69">
                    Legacy users are only allowed to access the deprecated &quot;randomData&quot;.
                     New users are forbidden to use this constructor.                    
                </comment>
            </method>
            <javadoc line="72">
                @param rng Random number generator.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="AbstractRealDistribution" type="constructor" line="76">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="80">
                {@inheritDoc}The default implementation uses the identity
                  &lt;p&gt;{@code P(x0 &lt; X &lt;= x1) = P(X &lt;= x1) - P(X &lt;= x0)}&lt;/p&gt;                
                <deprecated>
                    As of 3.1 (to be removed in 4.0). Please use{@link #probability(double,double)} instead.                    
                </deprecated>
            </javadoc>
            <method name="cumulativeProbability" type="double" line="90">
                <params>
                    <param name="x0" type="double"/>
                    <param name="x1" type="double"/>
                </params>
            </method>
            <javadoc line="94">
                For a random variable {@code X} whose values are distributed according
                  to this distribution, this method returns {@code P(x0 &lt; X &lt;= x1)}.                
                <param>
                    x0 Lower bound (excluded).                    
                </param>
                <param>
                    x1 Upper bound (included).                    
                </param>
                <return>
                    the probability that a random variable with this distribution
                      takes a value between {@code x0} and {@code x1}, excluding the lower
                      and including the upper endpoint.                    
                </return>
                <throws>
                    NumberIsTooLargeException if {@code x0 > x1}.
                      The default implementation uses the identity{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="probability" type="double" line="111">
                <params>
                    <param name="x0" type="double"/>
                    <param name="x1" type="double"/>
                </params>
                <scope line="112"/>
            </method>
            <javadoc line="119">
                {@inheritDoc}The default implementation returns
                  &lt;ul&gt;
                  &lt;li&gt;{@link #getSupportLowerBound()} for {@code p = 0},&lt;/li&gt;
                  &lt;li&gt;{@link #getSupportUpperBound()} for {@code p = 1}.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="inverseCumulativeProbability" type="double" line="128">
                <params>
                    <param name="p" type="double"/>
                </params>
                <comment line="130">
                    IMPLEMENTATION NOTES
                     --------------------
                     Where applicable, use is made of the one-sided Chebyshev inequality
                     to bracket the root. This inequality states that
                     P(X - mu &gt;= k  sig) &lt;= 1  (1 + k^2),
                     mu: mean, sig: standard deviation. Equivalently
                     1 - P(X &lt; mu + k  sig) &lt;= 1  (1 + k^2),
                     F(mu + k  sig) &gt;= k^2  (1 + k^2).
                    
                     For k = sqrt(p  (1 - p)), we find
                     F(mu + k  sig) &gt;= p,
                     and (mu + k  sig) is an upper-bound for the root.
                    
                     Then, introducing Y = -X, mean(Y) = -mu, sd(Y) = sig, and
                     P(Y &gt;= -mu + k  sig) &lt;= 1  (1 + k^2),
                     P(-X &gt;= -mu + k  sig) &lt;= 1  (1 + k^2),
                     P(X &lt;= mu - k  sig) &lt;= 1  (1 + k^2),
                     F(mu - k  sig) &lt;= 1  (1 + k^2).
                    
                     For k = sqrt((1 - p)  p), we find
                     F(mu - k  sig) &lt;= p,
                     and (mu - k  sig) is a lower-bound for the root.
                    
                     In cases where the Chebyshev inequality does not apply, geometric
                     progressions 1, 2, 4, ... and -1, -2, -4, ... are used to bracket
                     the root.                    
                </comment>
                <comment line="213">
                                        
                </comment>
                <scope line="157"/>
                <declaration name="lowerBound" type="double" line="161"/>
                <scope line="162"/>
                <declaration name="upperBound" type="double" line="166"/>
                <scope line="167"/>
                <declaration name="mu" type="double" line="171"/>
                <declaration name="sig" type="double" line="172"/>
                <declaration name="chebyshevApplies" type="boolean" line="173"/>
                <scope line="177">
                    <scope line="178"/>
                    <scope line="180">
                        <scope line="182"/>
                    </scope>
                </scope>
                <scope line="188">
                    <scope line="189"/>
                    <scope line="191">
                        <scope line="193"/>
                    </scope>
                </scope>
                <anonymous_class line="199">
                    <method name="value" type="double" line="201">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="toSolve" type="UnivariateFunction" line="199"/>
                <declaration name="x" type="double" line="206"/>
                <scope line="211">
                    <declaration name="dx" type="double" line="213"/>
                    <scope line="214">
                        <declaration name="px" type="double" line="215"/>
                        <scope line="216">
                            <scope line="218">
                                <declaration name="midPoint" type="double" line="219"/>
                                <scope line="220"/>
                                <scope line="222"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="233">
                Returns the solver absolute accuracy for inverse cumulative computation.
                  You can override this method in order to use a Brent solver with an
                  absolute accuracy different from the default.                
                <return>
                    the maximum absolute error in inverse cumulative probability estimates                    
                </return>
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="240"/>
            <javadoc line="244">
                {@inheritDoc}                
            </javadoc>
            <method name="reseedRandomGenerator" type="void" line="245">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <javadoc line="250">
                {@inheritDoc}The default implementation uses the
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Inverse_transform_sampling&quot;&gt;
                  inversion method.
                  &lt;/a&gt;                
            </javadoc>
            <method name="sample" type="double" line="258"/>
            <javadoc line="262">
                {@inheritDoc}The default implementation generates the sample by calling{@link #sample()} in a loop.                
            </javadoc>
            <method name="sample" type="double[]" line="268">
                <params>
                    <param name="sampleSize" type="int"/>
                </params>
                <scope line="269"/>
                <declaration name="out" type="double[]" line="273"/>
                <scope line="274"/>
            </method>
            <javadoc line="280">
                {@inheritDoc}                
                <return>
                    zero.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="probability" type="double" line="286">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
        </class>
    </source>