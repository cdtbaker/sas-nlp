<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomDataImpl"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="AbstractRealDistribution" line="12">
            <implements interface="RealDistribution"/>
            <implements interface="Serializable"/>
            <javadoc line="12">
                Base class for probability distributions on the reals.
                  Default implementations are provided for some of the methods
                  that do not vary from distribution to distribution.                
                <version>
                    $Id: AbstractRealDistribution.java 1422195 2012-12-15 06:45:18Z psteitz $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="SOLVER_DEFAULT_ABSOLUTE_ACCURACY" type="double" line="20"/>
            <javadoc line="20">
                Default accuracy.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="24"/>
            <javadoc line="24">
                Serializable version identifier                
            </javadoc>
            <declaration name="randomData" type="RandomDataImpl" line="28"/>
            <javadoc line="28">
                RandomData instance used to generate samples from the distribution.                
                <deprecated>
                    As of 3.1, to be removed in 4.0. Please use the{@link #random} instance variable instead.                    
                </deprecated>
            </javadoc>
            <declaration name="random" type="RandomGenerator" line="33"/>
            <javadoc line="33">
                RNG instance used to generate samples from the distribution.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="38"/>
            <javadoc line="38">
                Solver absolute accuracy for inverse cumulative computation                
            </javadoc>
            <javadoc line="42">
                @deprecated As of 3.1, to be removed in 4.0. Please use{@link #AbstractRealDistribution(RandomGenerator)} instead.                
            </javadoc>
            <method name="AbstractRealDistribution" type="constructor" line="45"/>
            <javadoc line="48">
                @param rng Random number generator.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="AbstractRealDistribution" type="constructor" line="52">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="55">
                {@inheritDoc}The default implementation uses the identity
                  &lt;p&gt;{@code P(x0 &lt; X &lt;= x1) = P(X &lt;= x1) - P(X &lt;= x0)}&lt;/p&gt;                
                <deprecated>
                    As of 3.1 (to be removed in 4.0). Please use{@link #probability(double,double)} instead.                    
                </deprecated>
            </javadoc>
            <method name="cumulativeProbability" type="double" line="60">
                <params>
                    <param name="x0" type="double"/>
                    <param name="x1" type="double"/>
                </params>
            </method>
            <javadoc line="63">
                For a random variable {@code X} whose values are distributed according
                  to this distribution, this method returns {@code P(x0 &lt; X &lt;= x1)}.                
                <param>
                    x0 Lower bound (excluded).                    
                </param>
                <param>
                    x1 Upper bound (included).                    
                </param>
                <return>
                    the probability that a random variable with this distribution
                      takes a value between {@code x0} and {@code x1}, excluding the lower
                      and including the upper endpoint.                    
                </return>
                <throws>
                    NumberIsTooLargeException if {@code x0 > x1}.
                      The default implementation uses the identity{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="probability" type="double" line="75">
                <params>
                    <param name="x0" type="double"/>
                    <param name="x1" type="double"/>
                </params>
                <scope line="76"/>
            </method>
            <javadoc line="81">
                {@inheritDoc}The default implementation returns
                  &lt;ul&gt;
                  &lt;li&gt;{@link #getSupportLowerBound()} for {@code p = 0},&lt;/li&gt;
                  &lt;li&gt;{@link #getSupportUpperBound()} for {@code p = 1}.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="inverseCumulativeProbability" type="double" line="88">
                <params>
                    <param name="p" type="double"/>
                </params>
                <scope line="89"/>
                <declaration name="lowerBound" type="double" line="92"/>
                <scope line="93"/>
                <declaration name="upperBound" type="double" line="96"/>
                <scope line="97"/>
                <declaration name="mu" type="double" line="100"/>
                <declaration name="sig" type="double" line="101"/>
                <declaration name="chebyshevApplies" type="boolean" line="102"/>
                <scope line="104">
                    <scope line="105"/>
                    <scope line="108">
                        <scope line="110"/>
                    </scope>
                </scope>
                <scope line="115">
                    <scope line="116"/>
                    <scope line="119">
                        <scope line="121"/>
                    </scope>
                </scope>
                <anonymous_class line="126">
                    <method name="value" type="double" line="127">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="toSolve" type="UnivariateFunction" line="126"/>
                <declaration name="x" type="double" line="132"/>
                <scope line="133">
                    <declaration name="dx" type="double" line="134"/>
                    <scope line="135">
                        <declaration name="px" type="double" line="136"/>
                        <scope line="137">
                            <scope line="139">
                                <declaration name="midPoint" type="double" line="140"/>
                                <scope line="141"/>
                                <scope line="144"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="154">
                Returns the solver absolute accuracy for inverse cumulative computation.
                  You can override this method in order to use a Brent solver with an
                  absolute accuracy different from the default.                
                <return>
                    the maximum absolute error in inverse cumulative probability estimates                    
                </return>
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="160"/>
            <javadoc line="163">
                {@inheritDoc}                
            </javadoc>
            <method name="reseedRandomGenerator" type="void" line="166">
                <params>
                    <param name="seed" type="long"/>
                </params>
            </method>
            <javadoc line="170">
                {@inheritDoc}The default implementation uses the
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Inverse_transform_sampling&quot;&gt;
                  inversion method.
                  &lt;/a&gt;                
            </javadoc>
            <method name="sample" type="double" line="176"/>
            <javadoc line="179">
                {@inheritDoc}The default implementation generates the sample by calling{@link #sample()} in a loop.                
            </javadoc>
            <method name="sample" type="double[]" line="182">
                <params>
                    <param name="sampleSize" type="int"/>
                </params>
                <scope line="183"/>
                <declaration name="out" type="double[]" line="186"/>
                <scope line="187"/>
            </method>
            <javadoc line="192">
                {@inheritDoc}                
                <return>
                    zero.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="probability" type="double" line="197">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
        </class>
    </source>