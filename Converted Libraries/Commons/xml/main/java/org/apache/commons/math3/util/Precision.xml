<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.math.BigDecimal"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="Precision" line="26">
            <javadoc line="26">
                Utilities for comparing numbers.                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: Precision.java 1591835 2014-05-02 09:04:01Z tn $                    
                </version>
            </javadoc>
            <declaration name="EPSILON" type="double" line="33"/>
            <javadoc line="33">
                &lt;p&gt;
                  Largest double-precision floating-point number such that{@code 1 + EPSILON} is numerically equal to 1. This value is an upper
                  bound on the relative error due to rounding real numbers to double
                  precision floating-point numbers.
                  &lt;/p&gt;
                  &lt;p&gt;
                  In IEEE 754 arithmetic, this is 2&lt;sup&gt;-53&lt;/sup&gt;.
                  &lt;/p&gt;                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Machine_epsilon&quot;&gt;Machine epsilon&lt;/a&gt;                    
                </see>
            </javadoc>
            <declaration name="SAFE_MIN" type="double" line="48"/>
            <javadoc line="48">
                Safe minimum, such that {@code 1 / SAFE_MIN} does not overflow.
                  &lt;br/&gt;
                  In IEEE 754 arithmetic, this is also the smallest normalized
                  number 2&lt;sup&gt;-1022&lt;/sup&gt;.                
            </javadoc>
            <declaration name="EXPONENT_OFFSET" type="long" line="56"/>
            <javadoc line="56">
                Exponent offset in IEEE754 representation.                
            </javadoc>
            <declaration name="SGN_MASK" type="long" line="59"/>
            <javadoc line="59">
                Offset to order signed double numbers lexicographically.                
            </javadoc>
            <declaration name="SGN_MASK_FLOAT" type="int" line="61"/>
            <javadoc line="61">
                Offset to order signed double numbers lexicographically.                
            </javadoc>
            <declaration name="POSITIVE_ZERO" type="double" line="63"/>
            <javadoc line="63">
                Positive zero.                
            </javadoc>
            <scope line="66"/>
            <javadoc line="82">
                Private constructor.                
            </javadoc>
            <method name="Precision" type="constructor" line="85"/>
            <javadoc line="87">
                Compares two numbers given some amount of allowed error.                
                <param>
                    x the first number                    
                </param>
                <param>
                    y the second number                    
                </param>
                <param>
                    eps the amount of error to allow when checking for equality                    
                </param>
                <return>
                    &lt;ul&gt;&lt;li&gt;0 if  {@link #equals(double,double,double) equals(x, y, eps)}&lt;/li&gt;
                      &lt;li&gt;&amp;lt; 0 if !{@link #equals(double,double,double) equals(x, y, eps)} &amp;amp;&amp;amp; x &amp;lt; y&lt;/li&gt;
                      &lt;li&gt;&gt; 0 if !{@link #equals(double,double,double) equals(x, y, eps)} &amp;amp;&amp;amp; x &gt; y&lt;/li&gt;&lt;/ul&gt;                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="97">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
                <scope line="98"/>
                <scope line="100"/>
            </method>
            <javadoc line="106">
                Compares two numbers given some amount of allowed error.
                  Two float numbers are considered equal if there are {@code (maxUlps - 1)}(or fewer) floating point numbers between them, i.e. two adjacent floating
                  point numbers are considered equal.
                  Adapted from &lt;a
                  href=&quot;http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm&quot;&gt;
                  Bruce Dawson&lt;/a&gt;                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    &lt;ul&gt;&lt;li&gt;0 if  {@link #equals(double,double,int) equals(x, y, maxUlps)}&lt;/li&gt;
                      &lt;li&gt;&amp;lt; 0 if !{@link #equals(double,double,int) equals(x, y, maxUlps)} &amp;amp;&amp;amp; x &amp;lt; y&lt;/li&gt;
                      &lt;li&gt;&gt; 0 if !{@link #equals(double,double,int) equals(x, y, maxUlps)} &amp;amp;&amp;amp; x &gt; y&lt;/li&gt;&lt;/ul&gt;                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="123">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
                <scope line="124"/>
                <scope line="126"/>
            </method>
            <javadoc line="132">
                Returns true iff they are equal as defined by{@link #equals(float,float,int) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="140">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="144">
                Returns true if both arguments are NaN or neither is NaN and they are
                  equal as defined by {@link #equals(float,float) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="153">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="157">
                Returns true if both arguments are equal or within the range of allowed
                  error (inclusive).                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    eps the amount of absolute error to allow.                    
                </param>
                <return>
                    {@code true} if the values are equal or within range of each other.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="167">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="eps" type="float"/>
                </params>
            </method>
            <javadoc line="171">
                Returns true if both arguments are NaN or are equal or within the range
                  of allowed error (inclusive).                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    eps the amount of absolute error to allow.                    
                </param>
                <return>
                    {@code true} if the values are equal or within range of each other,
                      or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="182">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="eps" type="float"/>
                </params>
            </method>
            <javadoc line="186">
                Returns true if both arguments are equal or within the range of allowed
                  error (inclusive).
                  Two float numbers are considered equal if there are {@code (maxUlps - 1)}(or fewer) floating point numbers between them, i.e. two adjacent floating
                  point numbers are considered equal.
                  Adapted from &lt;a
                  href=&quot;http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm&quot;&gt;
                  Bruce Dawson&lt;/a&gt;                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if there are fewer than {@code maxUlps} floating
                      point values between {@code x} and {@code y}.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="204">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="maxUlps" type="int"/>
                </params>
                <comment line="209">
                    Make lexicographically ordered as a two&apos;s-complement integer.                    
                </comment>
                <declaration name="xInt" type="int" line="205"/>
                <declaration name="yInt" type="int" line="206"/>
                <scope line="209"/>
                <scope line="212"/>
                <declaration name="isEqual" type="boolean" line="216"/>
            </method>
            <javadoc line="221">
                Returns true if both arguments are NaN or if they are equal as defined
                  by {@link #equals(float,float,int) equals(x, y, maxUlps)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if both arguments are NaN or if there are less than{@code maxUlps} floating point values between {@code x} and {@code y}.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="233">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="237">
                Returns true iff they are equal as defined by{@link #equals(double,double,int) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="245">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="249">
                Returns true if both arguments are NaN or neither is NaN and they are
                  equal as defined by {@link #equals(double,double) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="258">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="262">
                Returns {@code true} if there is no double value strictly between the
                  arguments or the difference between them is within the range of allowed
                  error (inclusive).                
                <param>
                    x First value.                    
                </param>
                <param>
                    y Second value.                    
                </param>
                <param>
                    eps Amount of allowed absolute error.                    
                </param>
                <return>
                    {@code true} if the values are two adjacent floating point
                      numbers or they are within range of each other.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="273">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="277">
                Returns {@code true} if there is no double value strictly between the
                  arguments or the relative difference between them is smaller or equal
                  to the given tolerance.                
                <param>
                    x First value.                    
                </param>
                <param>
                    y Second value.                    
                </param>
                <param>
                    eps Amount of allowed relative error.                    
                </param>
                <return>
                    {@code true} if the values are two adjacent floating point
                      numbers or they are within range of each other.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="equalsWithRelativeTolerance" type="boolean" line="289">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
                <scope line="290"/>
                <declaration name="absoluteMax" type="double" line="294"/>
                <declaration name="relativeDifference" type="double" line="295"/>
            </method>
            <javadoc line="300">
                Returns true if both arguments are NaN or are equal or within the range
                  of allowed error (inclusive).                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    eps the amount of absolute error to allow.                    
                </param>
                <return>
                    {@code true} if the values are equal or within range of each other,
                      or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="311">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="315">
                Returns true if both arguments are equal or within the range of allowed
                  error (inclusive).
                  Two float numbers are considered equal if there are {@code (maxUlps - 1)}(or fewer) floating point numbers between them, i.e. two adjacent floating
                  point numbers are considered equal.
                  Adapted from &lt;a
                  href=&quot;http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm&quot;&gt;
                  Bruce Dawson&lt;/a&gt;                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if there are fewer than {@code maxUlps} floating
                      point values between {@code x} and {@code y}.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="332">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
                <comment line="337">
                    Make lexicographically ordered as a two&apos;s-complement integer.                    
                </comment>
                <declaration name="xInt" type="long" line="333"/>
                <declaration name="yInt" type="long" line="334"/>
                <scope line="337"/>
                <scope line="340"/>
                <declaration name="isEqual" type="boolean" line="344"/>
            </method>
            <javadoc line="349">
                Returns true if both arguments are NaN or if they are equal as defined
                  by {@link #equals(double,double,int) equals(x, y, maxUlps)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if both arguments are NaN or if there are less than{@code maxUlps} floating point values between {@code x} and {@code y}.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="361">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="365">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="round" type="double" line="374">
                <params>
                    <param name="x" type="double"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="378">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the given method which is any method defined
                  in {@link BigDecimal}.
                  If {@code x} is infinite or {@code NaN}, then the value of {@code x} is
                  returned unchanged, regardless of the other parameters.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <param>
                    roundingMethod Rounding method as defined in {@link BigDecimal}.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <throws>
                    ArithmeticException if {@code roundingMethod == ROUND_UNNECESSARY}and the specified scaling operation would require rounding.                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code roundingMethod} does not
                      represent a valid rounding mode.                    
                </throws>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="round" type="double" line="395">
                <params>
                    <param name="x" type="double"/>
                    <param name="scale" type="int"/>
                    <param name="roundingMethod" type="int"/>
                </params>
                <comment line="401">
                    MATH-1089: negative values rounded to zero should result in negative zero                    
                </comment>
                <scope line="396">
                    <declaration name="rounded" type="double" line="397"/>
                </scope>
                <scope line="402">
                    <scope line="403"/>
                    <scope line="405"/>
                </scope>
            </method>
            <javadoc line="411">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="round" type="float" line="420">
                <params>
                    <param name="x" type="float"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="424">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the given method which is any method defined
                  in {@link BigDecimal}.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <param>
                    roundingMethod Rounding method as defined in {@link BigDecimal}.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
                <throws>
                    MathArithmeticException if an exact operation is required but result is not exact                    
                </throws>
                <throws>
                    MathIllegalArgumentException if {@code roundingMethod} is not a valid rounding method.                    
                </throws>
            </javadoc>
            <method name="round" type="float" line="438">
                <params>
                    <param name="x" type="float"/>
                    <param name="scale" type="int"/>
                    <param name="roundingMethod" type="int"/>
                </params>
                <declaration name="sign" type="float" line="439"/>
                <declaration name="factor" type="float" line="440"/>
            </method>
            <javadoc line="444">
                Rounds the given non-negative value to the &quot;nearest&quot; integer. Nearest is
                  determined by the rounding method specified. Rounding methods are defined
                  in {@link BigDecimal}.                
                <param>
                    unscaled Value to round.                    
                </param>
                <param>
                    sign Sign of the original, scaled value.                    
                </param>
                <param>
                    roundingMethod Rounding method, as defined in {@link BigDecimal}.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <throws>
                    MathArithmeticException if an exact operation is required but result is not exact                    
                </throws>
                <throws>
                    MathIllegalArgumentException if {@code roundingMethod} is not a valid rounding method.                    
                </throws>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="roundUnscaled" type="double" line="460">
                <params>
                    <param name="unscaled" type="double"/>
                    <param name="sign" type="double"/>
                    <param name="roundingMethod" type="int"/>
                </params>
                <comment line="497">
                    The following equality test is intentional and needed for rounding purposes                    
                </comment>
                <comment line="498">
                    even                    
                </comment>
                <comment line="500">
                    odd                    
                </comment>
                <comment line="522">
                    do not round if the discarded fraction is equal to zero                    
                </comment>
                <scope line="463"/>
                <scope line="465"/>
                <scope line="473"/>
                <scope line="475"/>
                <scope line="479">
                    <declaration name="fraction" type="double" line="481"/>
                    <scope line="482"/>
                    <scope line="484"/>
                </scope>
                <scope line="489">
                    <declaration name="fraction" type="double" line="490"/>
                    <scope line="491"/>
                    <scope line="493"/>
                    <scope line="495">
                        <scope line="497"/>
                        <scope line="499"/>
                    </scope>
                </scope>
                <scope line="505">
                    <declaration name="fraction" type="double" line="507"/>
                    <scope line="508"/>
                    <scope line="510"/>
                </scope>
                <scope line="516"/>
                <scope line="522"/>
            </method>
            <javadoc line="542">
                Computes a number {@code delta} close to {@code originalDelta} with
                  the property that &lt;pre&gt;&lt;code&gt;
                  x + delta - x
                  &lt;/code&gt;&lt;/pre&gt;
                  is exactly machine-representable.
                  This is useful when computing numerical derivatives, in order to reduce
                  roundoff errors.                
                <param>
                    x Value.                    
                </param>
                <param>
                    originalDelta Offset value.                    
                </param>
                <return>
                    a number {@code delta} so that {@code x + delta} and {@code x}differ by a representable floating number.                    
                </return>
            </javadoc>
            <method name="representableDelta" type="double" line="557">
                <params>
                    <param name="x" type="double"/>
                    <param name="originalDelta" type="double"/>
                </params>
            </method>
        </class>
    </source>