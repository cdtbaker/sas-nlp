<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.math.BigDecimal"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="Precision" line="6">
            <javadoc line="6">
                Utilities for comparing numbers.                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: Precision.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="EPSILON" type="double" line="12"/>
            <javadoc line="12">
                &lt;p&gt;
                  Largest double-precision floating-point number such that{@code 1 + EPSILON} is numerically equal to 1. This value is an upper
                  bound on the relative error due to rounding real numbers to double
                  precision floating-point numbers.
                  &lt;/p&gt;
                  &lt;p&gt;
                  In IEEE 754 arithmetic, this is 2&lt;sup&gt;-53&lt;/sup&gt;.
                  &lt;/p&gt;                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Machine_epsilon">Machine epsilon</a>                    
                </see>
            </javadoc>
            <declaration name="SAFE_MIN" type="double" line="24"/>
            <javadoc line="24">
                Safe minimum, such that {@code 1 / SAFE_MIN} does not overflow.
                  &lt;br/&gt;
                  In IEEE 754 arithmetic, this is also the smallest normalized
                  number 2&lt;sup&gt;-1022&lt;/sup&gt;.                
            </javadoc>
            <declaration name="EXPONENT_OFFSET" type="long" line="31"/>
            <javadoc line="31">
                Exponent offset in IEEE754 representation.                
            </javadoc>
            <declaration name="SGN_MASK" type="long" line="35"/>
            <javadoc line="35">
                Offset to order signed double numbers lexicographically.                
            </javadoc>
            <declaration name="SGN_MASK_FLOAT" type="int" line="39"/>
            <javadoc line="39">
                Offset to order signed double numbers lexicographically.                
            </javadoc>
            <scope line="43"/>
            <javadoc line="47">
                Private constructor.                
            </javadoc>
            <method name="Precision" type="constructor" line="50"/>
            <javadoc line="52">
                Compares two numbers given some amount of allowed error.                
                <param>
                    x the first number                    
                </param>
                <param>
                    y the second number                    
                </param>
                <param>
                    eps the amount of error to allow when checking for equality                    
                </param>
                <return>
                    <ul><li>0 if  {@link #equals(double,double,double) equals(x, y, eps)}</li>
                      <li>&lt; 0 if !{@link #equals(double,double,double) equals(x, y, eps)} &amp;&amp; x &lt; y</li>
                      <li>> 0 if !{@link #equals(double,double,double) equals(x, y, eps)} &amp;&amp; x > y</li></ul>                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="61">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
                <scope line="62"/>
                <scope line="65"/>
            </method>
            <javadoc line="70">
                Compares two numbers given some amount of allowed error.
                  Two float numbers are considered equal if there are {@code (maxUlps - 1)}(or fewer) floating point numbers between them, i.e. two adjacent floating
                  point numbers are considered equal.
                  Adapted from &lt;a
                  href=&quot;http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm&quot;&gt;
                  Bruce Dawson&lt;/a&gt;                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    <ul><li>0 if  {@link #equals(double,double,int) equals(x, y, maxUlps)}</li>
                      <li>&lt; 0 if !{@link #equals(double,double,int) equals(x, y, maxUlps)} &amp;&amp; x &lt; y</li>
                      <li>> 0 if !{@link #equals(double,double,int) equals(x, y, maxUlps)} &amp;&amp; x > y</li></ul>                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="85">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
                <scope line="86"/>
                <scope line="89"/>
            </method>
            <javadoc line="94">
                Returns true iff they are equal as defined by{@link #equals(float,float,int) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="100">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="103">
                Returns true if both arguments are NaN or neither is NaN and they are
                  equal as defined by {@link #equals(float,float) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="111">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="114">
                Returns true if both arguments are equal or within the range of allowed
                  error (inclusive).                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    eps the amount of absolute error to allow.                    
                </param>
                <return>
                    {@code true} if the values are equal or within range of each other.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="123">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="eps" type="float"/>
                </params>
            </method>
            <javadoc line="126">
                Returns true if both arguments are NaN or are equal or within the range
                  of allowed error (inclusive).                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    eps the amount of absolute error to allow.                    
                </param>
                <return>
                    {@code true} if the values are equal or within range of each other,
                      or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="136">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="eps" type="float"/>
                </params>
            </method>
            <javadoc line="139">
                Returns true if both arguments are equal or within the range of allowed
                  error (inclusive).
                  Two float numbers are considered equal if there are {@code (maxUlps - 1)}(or fewer) floating point numbers between them, i.e. two adjacent floating
                  point numbers are considered equal.
                  Adapted from &lt;a
                  href=&quot;http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm&quot;&gt;
                  Bruce Dawson&lt;/a&gt;                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if there are fewer than {@code maxUlps} floating
                      point values between {@code x} and {@code y}.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="155">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="maxUlps" type="int"/>
                </params>
                <declaration name="xInt" type="int" line="156"/>
                <declaration name="yInt" type="int" line="157"/>
                <scope line="158"/>
                <scope line="161"/>
                <declaration name="isEqual" type="boolean" line="164"/>
            </method>
            <javadoc line="167">
                Returns true if both arguments are NaN or if they are equal as defined
                  by {@link #equals(float,float,int) equals(x, y, maxUlps)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if both arguments are NaN or if there are less than{@code maxUlps} floating point values between {@code x} and {@code y}.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="177">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="180">
                Returns true iff they are equal as defined by{@link #equals(double,double,int) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="186">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="189">
                Returns true if both arguments are NaN or neither is NaN and they are
                  equal as defined by {@link #equals(double,double) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="197">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="200">
                Returns {@code true} if there is no double value strictly between the
                  arguments or the difference between them is within the range of allowed
                  error (inclusive).                
                <param>
                    x First value.                    
                </param>
                <param>
                    y Second value.                    
                </param>
                <param>
                    eps Amount of allowed absolute error.                    
                </param>
                <return>
                    {@code true} if the values are two adjacent floating point
                      numbers or they are within range of each other.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="210">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="213">
                Returns {@code true} if there is no double value strictly between the
                  arguments or the reltaive difference between them is smaller or equal
                  to the given tolerance.                
                <param>
                    x First value.                    
                </param>
                <param>
                    y Second value.                    
                </param>
                <param>
                    eps Amount of allowed relative error.                    
                </param>
                <return>
                    {@code true} if the values are two adjacent floating point
                      numbers or they are within range of each other.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="equalsWithRelativeTolerance" type="boolean" line="224">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
                <scope line="225"/>
                <declaration name="absoluteMax" type="double" line="228"/>
                <declaration name="relativeDifference" type="double" line="229"/>
            </method>
            <javadoc line="232">
                Returns true if both arguments are NaN or are equal or within the range
                  of allowed error (inclusive).                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    eps the amount of absolute error to allow.                    
                </param>
                <return>
                    {@code true} if the values are equal or within range of each other,
                      or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="242">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="245">
                Returns true if both arguments are equal or within the range of allowed
                  error (inclusive).
                  Two float numbers are considered equal if there are {@code (maxUlps - 1)}(or fewer) floating point numbers between them, i.e. two adjacent floating
                  point numbers are considered equal.
                  Adapted from &lt;a
                  href=&quot;http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm&quot;&gt;
                  Bruce Dawson&lt;/a&gt;                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if there are fewer than {@code maxUlps} floating
                      point values between {@code x} and {@code y}.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="260">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
                <declaration name="xInt" type="long" line="261"/>
                <declaration name="yInt" type="long" line="262"/>
                <scope line="263"/>
                <scope line="266"/>
                <declaration name="isEqual" type="boolean" line="269"/>
            </method>
            <javadoc line="272">
                Returns true if both arguments are NaN or if they are equal as defined
                  by {@link #equals(double,double,int) equals(x, y, maxUlps)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if both arguments are NaN or if there are less than{@code maxUlps} floating point values between {@code x} and {@code y}.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="282">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="285">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="round" type="double" line="293">
                <params>
                    <param name="x" type="double"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="296">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the given method which is any method defined
                  in {@link BigDecimal}.
                  If {@code x} is infinite or {@code NaN}, then the value of {@code x} is
                  returned unchanged, regardless of the other parameters.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <param>
                    roundingMethod Rounding method as defined in {@link BigDecimal}.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <throws>
                    ArithmeticException if {@code roundingMethod == ROUND_UNNECESSARY}and the specified scaling operation would require rounding.                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code roundingMethod} does not
                      represent a valid rounding mode.                    
                </throws>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="round" type="double" line="311">
                <params>
                    <param name="x" type="double"/>
                    <param name="scale" type="int"/>
                    <param name="roundingMethod" type="int"/>
                </params>
                <scope line="312"/>
                <scope line="315">
                    <scope line="316"/>
                    <scope line="319"/>
                </scope>
            </method>
            <javadoc line="324">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="round" type="float" line="332">
                <params>
                    <param name="x" type="float"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="335">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the given method which is any method defined
                  in {@link BigDecimal}.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <param>
                    roundingMethod Rounding method as defined in {@link BigDecimal}.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
                <throws>
                    MathArithmeticException if an exact operation is required but result is not exact                    
                </throws>
                <throws>
                    MathIllegalArgumentException if {@code roundingMethod} is not a valid rounding method.                    
                </throws>
            </javadoc>
            <method name="round" type="float" line="347">
                <params>
                    <param name="x" type="float"/>
                    <param name="scale" type="int"/>
                    <param name="roundingMethod" type="int"/>
                </params>
                <declaration name="sign" type="float" line="348"/>
                <declaration name="factor" type="float" line="349"/>
            </method>
            <javadoc line="352">
                Rounds the given non-negative value to the &quot;nearest&quot; integer. Nearest is
                  determined by the rounding method specified. Rounding methods are defined
                  in {@link BigDecimal}.                
                <param>
                    unscaled Value to round.                    
                </param>
                <param>
                    sign Sign of the original, scaled value.                    
                </param>
                <param>
                    roundingMethod Rounding method, as defined in {@link BigDecimal}.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <throws>
                    MathArithmeticException if an exact operation is required but result is not exact                    
                </throws>
                <throws>
                    MathIllegalArgumentException if {@code roundingMethod} is not a valid rounding method.                    
                </throws>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="roundUnscaled" type="double" line="364">
                <params>
                    <param name="unscaled" type="double"/>
                    <param name="sign" type="double"/>
                    <param name="roundingMethod" type="int"/>
                </params>
                <scope line="367"/>
                <scope line="370"/>
                <scope line="378"/>
                <scope line="381"/>
                <scope line="386">
                    <declaration name="fraction" type="double" line="388"/>
                    <scope line="389"/>
                    <scope line="392"/>
                </scope>
                <scope line="398">
                    <declaration name="fraction" type="double" line="399"/>
                    <scope line="400"/>
                    <scope line="403"/>
                    <scope line="406">
                        <scope line="407"/>
                        <scope line="410"/>
                    </scope>
                </scope>
                <scope line="417">
                    <declaration name="fraction" type="double" line="419"/>
                    <scope line="420"/>
                    <scope line="423"/>
                </scope>
                <scope line="429"/>
            </method>
            <javadoc line="441">
                Computes a number {@code delta} close to {@code originalDelta} with
                  the property that &lt;pre&gt;&lt;code&gt;
                  x + delta - x
                  &lt;/code&gt;&lt;/pre&gt;
                  is exactly machine-representable.
                  This is useful when computing numerical derivatives, in order to reduce
                  roundoff errors.                
                <param>
                    x Value.                    
                </param>
                <param>
                    originalDelta Offset value.                    
                </param>
                <return>
                    a number {@code delta} so that {@code x + delta} and {@code x}differ by a representable floating number.                    
                </return>
            </javadoc>
            <method name="representableDelta" type="double" line="453">
                <params>
                    <param name="x" type="double"/>
                    <param name="originalDelta" type="double"/>
                </params>
            </method>
        </class>
    </source>