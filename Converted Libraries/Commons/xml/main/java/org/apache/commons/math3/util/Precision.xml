<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.math.BigDecimal"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="Precision" line="26">
            <javadoc line="26">
                Utilities for comparing numbers.                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: Precision.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="EPSILON" type="double" line="33"/>
            <javadoc line="33">
                &lt;p&gt;
                  Largest double-precision floating-point number such that{@code 1 + EPSILON} is numerically equal to 1. This value is an upper
                  bound on the relative error due to rounding real numbers to double
                  precision floating-point numbers.
                  &lt;/p&gt;
                  &lt;p&gt;
                  In IEEE 754 arithmetic, this is 2&lt;sup&gt;-53&lt;/sup&gt;.
                  &lt;/p&gt;                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Machine_epsilon">Machine epsilon</a>                    
                </see>
            </javadoc>
            <declaration name="SAFE_MIN" type="double" line="48"/>
            <javadoc line="48">
                Safe minimum, such that {@code 1 / SAFE_MIN} does not overflow.
                  &lt;br/&gt;
                  In IEEE 754 arithmetic, this is also the smallest normalized
                  number 2&lt;sup&gt;-1022&lt;/sup&gt;.                
            </javadoc>
            <declaration name="EXPONENT_OFFSET" type="long" line="56"/>
            <javadoc line="56">
                Exponent offset in IEEE754 representation.                
            </javadoc>
            <declaration name="SGN_MASK" type="long" line="59"/>
            <javadoc line="59">
                Offset to order signed double numbers lexicographically.                
            </javadoc>
            <declaration name="SGN_MASK_FLOAT" type="int" line="61"/>
            <javadoc line="61">
                Offset to order signed double numbers lexicographically.                
            </javadoc>
            <scope line="64"/>
            <javadoc line="80">
                Private constructor.                
            </javadoc>
            <method name="Precision" type="constructor" line="83"/>
            <javadoc line="85">
                Compares two numbers given some amount of allowed error.                
                <param>
                    x the first number                    
                </param>
                <param>
                    y the second number                    
                </param>
                <param>
                    eps the amount of error to allow when checking for equality                    
                </param>
                <return>
                    <ul><li>0 if  {@link #equals(double,double,double) equals(x, y, eps)}</li>
                      <li>&lt; 0 if !{@link #equals(double,double,double) equals(x, y, eps)} &amp;&amp; x &lt; y</li>
                      <li>> 0 if !{@link #equals(double,double,double) equals(x, y, eps)} &amp;&amp; x > y</li></ul>                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="95">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
                <scope line="96"/>
                <scope line="98"/>
            </method>
            <javadoc line="104">
                Compares two numbers given some amount of allowed error.
                  Two float numbers are considered equal if there are {@code (maxUlps - 1)}(or fewer) floating point numbers between them, i.e. two adjacent floating
                  point numbers are considered equal.
                  Adapted from &lt;a
                  href=&quot;http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm&quot;&gt;
                  Bruce Dawson&lt;/a&gt;                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    <ul><li>0 if  {@link #equals(double,double,int) equals(x, y, maxUlps)}</li>
                      <li>&lt; 0 if !{@link #equals(double,double,int) equals(x, y, maxUlps)} &amp;&amp; x &lt; y</li>
                      <li>> 0 if !{@link #equals(double,double,int) equals(x, y, maxUlps)} &amp;&amp; x > y</li></ul>                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="121">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
                <scope line="122"/>
                <scope line="124"/>
            </method>
            <javadoc line="130">
                Returns true iff they are equal as defined by{@link #equals(float,float,int) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="138">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="142">
                Returns true if both arguments are NaN or neither is NaN and they are
                  equal as defined by {@link #equals(float,float) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="151">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="155">
                Returns true if both arguments are equal or within the range of allowed
                  error (inclusive).                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    eps the amount of absolute error to allow.                    
                </param>
                <return>
                    {@code true} if the values are equal or within range of each other.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="165">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="eps" type="float"/>
                </params>
            </method>
            <javadoc line="169">
                Returns true if both arguments are NaN or are equal or within the range
                  of allowed error (inclusive).                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    eps the amount of absolute error to allow.                    
                </param>
                <return>
                    {@code true} if the values are equal or within range of each other,
                      or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="180">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="eps" type="float"/>
                </params>
            </method>
            <javadoc line="184">
                Returns true if both arguments are equal or within the range of allowed
                  error (inclusive).
                  Two float numbers are considered equal if there are {@code (maxUlps - 1)}(or fewer) floating point numbers between them, i.e. two adjacent floating
                  point numbers are considered equal.
                  Adapted from &lt;a
                  href=&quot;http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm&quot;&gt;
                  Bruce Dawson&lt;/a&gt;                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if there are fewer than {@code maxUlps} floating
                      point values between {@code x} and {@code y}.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="202">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="maxUlps" type="int"/>
                </params>
                <comment line="207">
                    Make lexicographically ordered as a two&apos;s-complement integer.                    
                </comment>
                <declaration name="xInt" type="int" line="203"/>
                <declaration name="yInt" type="int" line="204"/>
                <scope line="207"/>
                <scope line="210"/>
                <declaration name="isEqual" type="boolean" line="214"/>
            </method>
            <javadoc line="219">
                Returns true if both arguments are NaN or if they are equal as defined
                  by {@link #equals(float,float,int) equals(x, y, maxUlps)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if both arguments are NaN or if there are less than{@code maxUlps} floating point values between {@code x} and {@code y}.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="231">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="235">
                Returns true iff they are equal as defined by{@link #equals(double,double,int) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="243">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="247">
                Returns true if both arguments are NaN or neither is NaN and they are
                  equal as defined by {@link #equals(double,double) equals(x, y, 1)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <return>
                    {@code true} if the values are equal or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="256">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="260">
                Returns {@code true} if there is no double value strictly between the
                  arguments or the difference between them is within the range of allowed
                  error (inclusive).                
                <param>
                    x First value.                    
                </param>
                <param>
                    y Second value.                    
                </param>
                <param>
                    eps Amount of allowed absolute error.                    
                </param>
                <return>
                    {@code true} if the values are two adjacent floating point
                      numbers or they are within range of each other.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="271">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="275">
                Returns {@code true} if there is no double value strictly between the
                  arguments or the reltaive difference between them is smaller or equal
                  to the given tolerance.                
                <param>
                    x First value.                    
                </param>
                <param>
                    y Second value.                    
                </param>
                <param>
                    eps Amount of allowed relative error.                    
                </param>
                <return>
                    {@code true} if the values are two adjacent floating point
                      numbers or they are within range of each other.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="equalsWithRelativeTolerance" type="boolean" line="287">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
                <scope line="288"/>
                <declaration name="absoluteMax" type="double" line="292"/>
                <declaration name="relativeDifference" type="double" line="293"/>
            </method>
            <javadoc line="298">
                Returns true if both arguments are NaN or are equal or within the range
                  of allowed error (inclusive).                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    eps the amount of absolute error to allow.                    
                </param>
                <return>
                    {@code true} if the values are equal or within range of each other,
                      or both are NaN.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="309">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="313">
                Returns true if both arguments are equal or within the range of allowed
                  error (inclusive).
                  Two float numbers are considered equal if there are {@code (maxUlps - 1)}(or fewer) floating point numbers between them, i.e. two adjacent floating
                  point numbers are considered equal.
                  Adapted from &lt;a
                  href=&quot;http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm&quot;&gt;
                  Bruce Dawson&lt;/a&gt;                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if there are fewer than {@code maxUlps} floating
                      point values between {@code x} and {@code y}.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="330">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
                <comment line="335">
                    Make lexicographically ordered as a two&apos;s-complement integer.                    
                </comment>
                <declaration name="xInt" type="long" line="331"/>
                <declaration name="yInt" type="long" line="332"/>
                <scope line="335"/>
                <scope line="338"/>
                <declaration name="isEqual" type="boolean" line="342"/>
            </method>
            <javadoc line="347">
                Returns true if both arguments are NaN or if they are equal as defined
                  by {@link #equals(double,double,int) equals(x, y, maxUlps)}.                
                <param>
                    x first value                    
                </param>
                <param>
                    y second value                    
                </param>
                <param>
                    maxUlps {@code (maxUlps - 1)} is the number of floating point
                      values between {@code x} and {@code y}.                    
                </param>
                <return>
                    {@code true} if both arguments are NaN or if there are less than{@code maxUlps} floating point values between {@code x} and {@code y}.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="equalsIncludingNaN" type="boolean" line="359">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="363">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="round" type="double" line="372">
                <params>
                    <param name="x" type="double"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="376">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the given method which is any method defined
                  in {@link BigDecimal}.
                  If {@code x} is infinite or {@code NaN}, then the value of {@code x} is
                  returned unchanged, regardless of the other parameters.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <param>
                    roundingMethod Rounding method as defined in {@link BigDecimal}.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <throws>
                    ArithmeticException if {@code roundingMethod == ROUND_UNNECESSARY}and the specified scaling operation would require rounding.                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code roundingMethod} does not
                      represent a valid rounding mode.                    
                </throws>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="round" type="double" line="393">
                <params>
                    <param name="x" type="double"/>
                    <param name="scale" type="int"/>
                    <param name="roundingMethod" type="int"/>
                </params>
                <scope line="394"/>
                <scope line="399">
                    <scope line="400"/>
                    <scope line="402"/>
                </scope>
            </method>
            <javadoc line="408">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the {@link BigDecimal#ROUND_HALF_UP} method.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="round" type="float" line="417">
                <params>
                    <param name="x" type="float"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="421">
                Rounds the given value to the specified number of decimal places.
                  The value is rounded using the given method which is any method defined
                  in {@link BigDecimal}.                
                <param>
                    x Value to round.                    
                </param>
                <param>
                    scale Number of digits to the right of the decimal point.                    
                </param>
                <param>
                    roundingMethod Rounding method as defined in {@link BigDecimal}.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
                <throws>
                    MathArithmeticException if an exact operation is required but result is not exact                    
                </throws>
                <throws>
                    MathIllegalArgumentException if {@code roundingMethod} is not a valid rounding method.                    
                </throws>
            </javadoc>
            <method name="round" type="float" line="435">
                <params>
                    <param name="x" type="float"/>
                    <param name="scale" type="int"/>
                    <param name="roundingMethod" type="int"/>
                </params>
                <declaration name="sign" type="float" line="436"/>
                <declaration name="factor" type="float" line="437"/>
            </method>
            <javadoc line="441">
                Rounds the given non-negative value to the &quot;nearest&quot; integer. Nearest is
                  determined by the rounding method specified. Rounding methods are defined
                  in {@link BigDecimal}.                
                <param>
                    unscaled Value to round.                    
                </param>
                <param>
                    sign Sign of the original, scaled value.                    
                </param>
                <param>
                    roundingMethod Rounding method, as defined in {@link BigDecimal}.                    
                </param>
                <return>
                    the rounded value.                    
                </return>
                <throws>
                    MathArithmeticException if an exact operation is required but result is not exact                    
                </throws>
                <throws>
                    MathIllegalArgumentException if {@code roundingMethod} is not a valid rounding method.                    
                </throws>
                <since>
                    1.1 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="roundUnscaled" type="double" line="457">
                <params>
                    <param name="unscaled" type="double"/>
                    <param name="sign" type="double"/>
                    <param name="roundingMethod" type="int"/>
                </params>
                <comment line="494">
                    The following equality test is intentional and needed for rounding purposes                    
                </comment>
                <comment line="496">
                    even                    
                </comment>
                <comment line="498">
                    odd                    
                </comment>
                <scope line="460"/>
                <scope line="462"/>
                <scope line="470"/>
                <scope line="472"/>
                <scope line="476">
                    <declaration name="fraction" type="double" line="478"/>
                    <scope line="479"/>
                    <scope line="481"/>
                </scope>
                <scope line="486">
                    <declaration name="fraction" type="double" line="487"/>
                    <scope line="488"/>
                    <scope line="490"/>
                    <scope line="492">
                        <scope line="495"/>
                        <scope line="497"/>
                    </scope>
                </scope>
                <scope line="503">
                    <declaration name="fraction" type="double" line="505"/>
                    <scope line="506"/>
                    <scope line="508"/>
                </scope>
                <scope line="514"/>
            </method>
            <javadoc line="537">
                Computes a number {@code delta} close to {@code originalDelta} with
                  the property that &lt;pre&gt;&lt;code&gt;
                  x + delta - x
                  &lt;/code&gt;&lt;/pre&gt;
                  is exactly machine-representable.
                  This is useful when computing numerical derivatives, in order to reduce
                  roundoff errors.                
                <param>
                    x Value.                    
                </param>
                <param>
                    originalDelta Offset value.                    
                </param>
                <return>
                    a number {@code delta} so that {@code x + delta} and {@code x}differ by a representable floating number.                    
                </return>
            </javadoc>
            <method name="representableDelta" type="double" line="552">
                <params>
                    <param name="x" type="double"/>
                    <param name="originalDelta" type="double"/>
                </params>
            </method>
        </class>
    </source>