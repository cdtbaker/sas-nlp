<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.linear">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimplexTableau" line="20">
            <implements interface="Serializable"/>
            <javadoc line="20">
                A tableau for use in the Simplex method.
                  &lt;p&gt;
                  Example:
                  &lt;pre&gt;
                  W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS
                  ---------------------------------------------------
                  -1    0    0     0     0     0     0     1     0   &amp;lt;= phase 1 objective
                  0    1   -15   -10    0     0     0     0     0   &amp;lt;= phase 2 objective
                  0    0    1     0     0     1     0     0     2   &amp;lt;= constraint 1
                  0    0    0     1     0     0     1     0     3   &amp;lt;= constraint 2
                  0    0    1     1     0     0     0     1     4   &amp;lt;= constraint 3
                  &lt;/pre&gt;
                  W: Phase 1 objective function&lt;/br&gt;
                  Z: Phase 2 objective function&lt;/br&gt;
                  x1 &amp;amp; x2: Decision variables&lt;/br&gt;
                  x-: Extra decision variable to allow for negative values&lt;/br&gt;
                  s1 &amp;amp; s2: Slack/Surplus variables&lt;/br&gt;
                  a1: Artificial variable&lt;/br&gt;
                  RHS: Right hand side&lt;/br&gt;
                  &lt;/p&gt;                
                <version>
                    $Id: SimplexTableau.java 1435810 2013-01-20 10:04:45Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="NEGATIVE_VAR_COLUMN_LABEL" type="String" line="45"/>
            <javadoc line="45">
                Column label for negative vars.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <javadoc line="49">
                Serializable version identifier.                
            </javadoc>
            <declaration name="f" type="LinearObjectiveFunction" line="53"/>
            <javadoc line="53">
                Linear objective function.                
            </javadoc>
            <declaration name="constraints" type="List&lt;LinearConstraint&gt;" line="57"/>
            <javadoc line="57">
                Linear constraints.                
            </javadoc>
            <declaration name="restrictToNonNegative" type="boolean" line="61"/>
            <javadoc line="61">
                Whether to restrict the variables to non-negative values.                
            </javadoc>
            <declaration name="columnLabels" type="List&lt;String&gt;" line="65"/>
            <javadoc line="65">
                The variables each column represents                
            </javadoc>
            <declaration name="tableau" type="RealMatrix" line="69"/>
            <javadoc line="69">
                Simple tableau.                
            </javadoc>
            <declaration name="numDecisionVariables" type="int" line="73"/>
            <javadoc line="73">
                Number of decision variables.                
            </javadoc>
            <declaration name="numSlackVariables" type="int" line="77"/>
            <javadoc line="77">
                Number of slack variables.                
            </javadoc>
            <declaration name="numArtificialVariables" type="int" line="81"/>
            <javadoc line="81">
                Number of artificial variables.                
            </javadoc>
            <declaration name="epsilon" type="double" line="85"/>
            <javadoc line="85">
                Amount of error to accept when checking for optimality.                
            </javadoc>
            <declaration name="maxUlps" type="int" line="89"/>
            <javadoc line="89">
                Amount of error to accept in floating point comparisons.                
            </javadoc>
            <declaration name="cutOff" type="double" line="93"/>
            <javadoc line="93">
                Cut-off value for entries in the tableau.                
            </javadoc>
            <javadoc line="97">
                Builds a tableau for a linear problem.                
                <param>
                    f Linear objective function.                    
                </param>
                <param>
                    constraints Linear constraints.                    
                </param>
                <param>
                    goalType Optimization goal: either {@link GoalType#MAXIMIZE}or {@link GoalType#MINIMIZE}.                    
                </param>
                <param>
                    restrictToNonNegative Whether to restrict the variables to non-negative values.                    
                </param>
                <param>
                    epsilon Amount of error to accept when checking for optimality.                    
                </param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="105">
                <params>
                    <param name="f" type="LinearObjectiveFunction"/>
                    <param name="constraints" type="Collection<LinearConstraint>"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="restrictToNonNegative" type="boolean"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="108">
                Build a tableau for a linear problem.                
                <param>
                    f linear objective function                    
                </param>
                <param>
                    constraints linear constraints                    
                </param>
                <param>
                    goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}                    
                </param>
                <param>
                    restrictToNonNegative whether to restrict the variables to non-negative values                    
                </param>
                <param>
                    epsilon amount of error to accept when checking for optimality                    
                </param>
                <param>
                    maxUlps amount of error to accept in floating point comparisons                    
                </param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="117">
                <params>
                    <param name="f" type="LinearObjectiveFunction"/>
                    <param name="constraints" type="Collection<LinearConstraint>"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="restrictToNonNegative" type="boolean"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="120">
                Build a tableau for a linear problem.                
                <param>
                    f linear objective function                    
                </param>
                <param>
                    constraints linear constraints                    
                </param>
                <param>
                    goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}                    
                </param>
                <param>
                    restrictToNonNegative whether to restrict the variables to non-negative values                    
                </param>
                <param>
                    epsilon amount of error to accept when checking for optimality                    
                </param>
                <param>
                    maxUlps amount of error to accept in floating point comparisons                    
                </param>
                <param>
                    cutOff the cut-off value for tableau entries                    
                </param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="130">
                <params>
                    <param name="f" type="LinearObjectiveFunction"/>
                    <param name="constraints" type="Collection<LinearConstraint>"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="restrictToNonNegative" type="boolean"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxUlps" type="int"/>
                    <param name="cutOff" type="double"/>
                </params>
            </method>
            <javadoc line="143">
                Initialize the labels for the columns.                
            </javadoc>
            <method name="initializeColumnLabels" type="void" line="146">
                <scope line="147"/>
                <scope line="151"/>
                <scope line="154"/>
                <scope line="157"/>
                <scope line="160"/>
            </method>
            <javadoc line="165">
                Create the tableau by itself.                
                <param>
                    maximize if true, goal is to maximize the objective function                    
                </param>
                <return>
                    created tableau                    
                </return>
            </javadoc>
            <method name="createTableau" type="RealMatrix" line="170">
                <params>
                    <param name="maximize" type="boolean"/>
                </params>
                <declaration name="width" type="int" line="171"/>
                <declaration name="height" type="int" line="172"/>
                <declaration name="matrix" type="Array2DRowRealMatrix" line="173"/>
                <scope line="174"/>
                <declaration name="zIndex" type="int" line="177"/>
                <declaration name="objectiveCoefficients" type="RealVector" line="179"/>
                <scope line="182"/>
                <declaration name="slackVar" type="int" line="185"/>
                <declaration name="artificialVar" type="int" line="186"/>
                <scope line="187">
                    <declaration name="constraint" type="LinearConstraint" line="188"/>
                    <declaration name="row" type="int" line="189"/>
                    <scope line="191"/>
                    <scope line="195"/>
                    <scope line="198"/>
                    <scope line="201"/>
                </scope>
            </method>
            <javadoc line="209">
                Get new versions of the constraints which have positive right hand sides.                
                <param>
                    originalConstraints original (not normalized) constraints                    
                </param>
                <return>
                    new versions of the constraints                    
                </return>
            </javadoc>
            <method name="normalizeConstraints" type="List<LinearConstraint>" line="214">
                <params>
                    <param name="originalConstraints" type="Collection<LinearConstraint>"/>
                </params>
                <declaration name="normalized" type="List&lt;LinearConstraint&gt;" line="215"/>
                <scope line="216"/>
            </method>
            <javadoc line="221">
                Get a new equation equivalent to this one with a positive right hand side.                
                <param>
                    constraint reference constraint                    
                </param>
                <return>
                    new equation                    
                </return>
            </javadoc>
            <method name="normalize" type="LinearConstraint" line="226">
                <params>
                    <param name="constraint" type="LinearConstraint"/>
                </params>
                <scope line="227"/>
            </method>
            <javadoc line="232">
                Get the number of objective functions in this tableau.                
                <return>
                    2 for Phase 1.  1 for Phase 2.                    
                </return>
            </javadoc>
            <method name="getNumObjectiveFunctions" type="int" line="236"/>
            <javadoc line="239">
                Get a count of constraints corresponding to a specified relationship.                
                <param>
                    relationship relationship to count                    
                </param>
                <return>
                    number of constraint with the specified relationship                    
                </return>
            </javadoc>
            <method name="getConstraintTypeCounts" type="int" line="244">
                <params>
                    <param name="relationship" type="Relationship"/>
                </params>
                <declaration name="count" type="int" line="245"/>
                <scope line="246">
                    <scope line="247"/>
                </scope>
            </method>
            <javadoc line="253">
                Get the -1 times the sum of all coefficients in the given array.                
                <param>
                    coefficients coefficients to sum                    
                </param>
                <return>
                    the -1 times the sum of all coefficients in the given array.                    
                </return>
            </javadoc>
            <method name="getInvertedCoefficientSum" type="double" line="258">
                <params>
                    <param name="coefficients" type="RealVector"/>
                </params>
                <declaration name="sum" type="double" line="259"/>
                <scope line="260"/>
            </method>
            <javadoc line="265">
                Checks whether the given column is basic.                
                <param>
                    col index of the column to check                    
                </param>
                <return>
                    the row that the variable is basic in.  null if the column is not basic                    
                </return>
            </javadoc>
            <method name="getBasicRow" type="Integer" line="270">
                <params>
                    <param name="col" type="int"/>
                </params>
                <declaration name="row" type="Integer" line="271"/>
                <scope line="272">
                    <declaration name="entry" type="double" line="273"/>
                    <scope line="274"/>
                    <scope line="277"/>
                </scope>
            </method>
            <javadoc line="283">
                Removes the phase 1 objective function, positive cost non-artificial variables,
                  and the non-basic artificial variables from this tableau.                
            </javadoc>
            <method name="dropPhase1Objective" type="void" line="287">
                <scope line="288"/>
                <declaration name="columnsToDrop" type="Set&lt;Integer&gt;" line="291"/>
                <scope line="293">
                    <declaration name="entry" type="double" line="294"/>
                    <scope line="295"/>
                </scope>
                <scope line="299">
                    <declaration name="col" type="int" line="300"/>
                    <scope line="301"/>
                </scope>
                <declaration name="matrix" type="double[][]" line="305"/>
                <scope line="306">
                    <declaration name="col" type="int" line="307"/>
                    <scope line="308">
                        <scope line="309"/>
                    </scope>
                </scope>
                <declaration name="drop" type="Integer[]" line="314"/>
                <scope line="315"/>
            </method>
            <javadoc line="321">
                @param src the source array                
                <param>
                    dest the destination array                    
                </param>
            </javadoc>
            <method name="copyArray" type="void" line="325">
                <params>
                    <param name="src" type="double[]"/>
                    <param name="dest" type="double[]"/>
                </params>
            </method>
            <javadoc line="328">
                Returns whether the problem is at an optimal state.                
                <return>
                    whether the model has been solved                    
                </return>
            </javadoc>
            <method name="isOptimal" type="boolean" line="332">
                <scope line="333">
                    <declaration name="entry" type="double" line="334"/>
                    <scope line="335"/>
                </scope>
            </method>
            <javadoc line="341">
                Get the current solution.                
                <return>
                    current solution                    
                </return>
            </javadoc>
            <method name="getSolution" type="PointValuePair" line="345">
                <declaration name="negativeVarColumn" type="int" line="346"/>
                <declaration name="negativeVarBasicRow" type="Integer" line="347"/>
                <declaration name="mostNegative" type="double" line="348"/>
                <declaration name="basicRows" type="Set&lt;Integer&gt;" line="349"/>
                <declaration name="coefficients" type="double[]" line="350"/>
                <scope line="351">
                    <declaration name="colIndex" type="int" line="352"/>
                    <scope line="353"/>
                    <declaration name="basicRow" type="Integer" line="357"/>
                    <scope line="358"/>
                    <scope line="361"/>
                    <scope line="364"/>
                </scope>
            </method>
            <javadoc line="371">
                Subtracts a multiple of one row from another.
                  &lt;p&gt;
                  After application of this operation, the following will hold:
                  &lt;pre&gt;minuendRow = minuendRow - multiple  subtrahendRow&lt;/pre&gt;                
                <param>
                    dividendRow index of the row                    
                </param>
                <param>
                    divisor value of the divisor                    
                </param>
            </javadoc>
            <method name="divideRow" type="void" line="379">
                <params>
                    <param name="dividendRow" type="int"/>
                    <param name="divisor" type="double"/>
                </params>
                <scope line="380"/>
            </method>
            <javadoc line="384">
                Subtracts a multiple of one row from another.
                  &lt;p&gt;
                  After application of this operation, the following will hold:
                  &lt;pre&gt;minuendRow = minuendRow - multiple  subtrahendRow&lt;/pre&gt;                
                <param>
                    minuendRow row index                    
                </param>
                <param>
                    subtrahendRow row index                    
                </param>
                <param>
                    multiple multiplication factor                    
                </param>
            </javadoc>
            <method name="subtractRow" type="void" line="393">
                <params>
                    <param name="minuendRow" type="int"/>
                    <param name="subtrahendRow" type="int"/>
                    <param name="multiple" type="double"/>
                </params>
                <scope line="394">
                    <declaration name="result" type="double" line="395"/>
                    <scope line="396"/>
                </scope>
            </method>
            <javadoc line="402">
                Get the width of the tableau.                
                <return>
                    width of the tableau                    
                </return>
            </javadoc>
            <method name="getWidth" type="int" line="406"/>
            <javadoc line="409">
                Get the height of the tableau.                
                <return>
                    height of the tableau                    
                </return>
            </javadoc>
            <method name="getHeight" type="int" line="413"/>
            <javadoc line="416">
                Get an entry of the tableau.                
                <param>
                    row row index                    
                </param>
                <param>
                    column column index                    
                </param>
                <return>
                    entry at (row, column)                    
                </return>
            </javadoc>
            <method name="getEntry" type="double" line="422">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="425">
                Set an entry of the tableau.                
                <param>
                    row row index                    
                </param>
                <param>
                    column column index                    
                </param>
                <param>
                    value for the entry                    
                </param>
            </javadoc>
            <method name="setEntry" type="void" line="431">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="434">
                Get the offset of the first slack variable.                
                <return>
                    offset of the first slack variable                    
                </return>
            </javadoc>
            <method name="getSlackVariableOffset" type="int" line="438"/>
            <javadoc line="441">
                Get the offset of the first artificial variable.                
                <return>
                    offset of the first artificial variable                    
                </return>
            </javadoc>
            <method name="getArtificialVariableOffset" type="int" line="445"/>
            <javadoc line="448">
                Get the offset of the right hand side.                
                <return>
                    offset of the right hand side                    
                </return>
            </javadoc>
            <method name="getRhsOffset" type="int" line="452"/>
            <javadoc line="455">
                Get the number of decision variables.
                  &lt;p&gt;
                  If variables are not restricted to positive values, this will include 1 extra decision variable to represent
                  the absolute value of the most negative variable.                
                <return>
                    number of decision variables                    
                </return>
                <see>
                    #getOriginalNumDecisionVariables()                    
                </see>
            </javadoc>
            <method name="getNumDecisionVariables" type="int" line="463"/>
            <javadoc line="466">
                Get the original number of decision variables.                
                <return>
                    original number of decision variables                    
                </return>
                <see>
                    #getNumDecisionVariables()                    
                </see>
            </javadoc>
            <method name="getOriginalNumDecisionVariables" type="int" line="471"/>
            <javadoc line="474">
                Get the number of slack variables.                
                <return>
                    number of slack variables                    
                </return>
            </javadoc>
            <method name="getNumSlackVariables" type="int" line="478"/>
            <javadoc line="481">
                Get the number of artificial variables.                
                <return>
                    number of artificial variables                    
                </return>
            </javadoc>
            <method name="getNumArtificialVariables" type="int" line="485"/>
            <javadoc line="488">
                Get the tableau data.                
                <return>
                    tableau data                    
                </return>
            </javadoc>
            <method name="getData" type="double[][]" line="492"/>
            <method name="equals" type="boolean" line="495">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="496"/>
                <scope line="499">
                    <declaration name="rhs" type="SimplexTableau" line="500"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="505"/>
            <javadoc line="508">
                Serialize the instance.                
                <param>
                    oos stream where object should be written                    
                </param>
                <throws>
                    IOException if object cannot be written to stream                    
                </throws>
            </javadoc>
            <method name="writeObject" type="void" line="513">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="517">
                Deserialize the instance.                
                <param>
                    ois stream from which the object should be read                    
                </param>
                <throws>
                    ClassNotFoundException if a class in the stream cannot be found                    
                </throws>
                <throws>
                    IOException if object cannot be read from the stream                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="523">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>