<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.linear">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimplexTableau" line="38">
            <implements interface="Serializable"/>
            <javadoc line="38">
                A tableau for use in the Simplex method.
                  &lt;p&gt;
                  Example:
                  &lt;pre&gt;
                  W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS
                  ---------------------------------------------------
                  -1    0    0     0     0     0     0     1     0   &amp;lt;= phase 1 objective
                  0    1   -15   -10    0     0     0     0     0   &amp;lt;= phase 2 objective
                  0    0    1     0     0     1     0     0     2   &amp;lt;= constraint 1
                  0    0    0     1     0     0     1     0     3   &amp;lt;= constraint 2
                  0    0    1     1     0     0     0     1     4   &amp;lt;= constraint 3
                  &lt;/pre&gt;
                  W: Phase 1 objective function&lt;/br&gt;
                  Z: Phase 2 objective function&lt;/br&gt;
                  x1 &amp;amp; x2: Decision variables&lt;/br&gt;
                  x-: Extra decision variable to allow for negative values&lt;/br&gt;
                  s1 &amp;amp; s2: Slack/Surplus variables&lt;/br&gt;
                  a1: Artificial variable&lt;/br&gt;
                  RHS: Right hand side&lt;/br&gt;
                  &lt;/p&gt;                
                <version>
                    $Id: SimplexTableau.java 1554544 2013-12-31 15:40:35Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="NEGATIVE_VAR_COLUMN_LABEL" type="String" line="65"/>
            <javadoc line="65">
                Column label for negative vars.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="68"/>
            <javadoc line="68">
                Serializable version identifier.                
            </javadoc>
            <declaration name="f" type="LinearObjectiveFunction" line="71"/>
            <javadoc line="71">
                Linear objective function.                
            </javadoc>
            <declaration name="constraints" type="List&amp;lt;LinearConstraint&amp;gt;" line="74"/>
            <javadoc line="74">
                Linear constraints.                
            </javadoc>
            <declaration name="restrictToNonNegative" type="boolean" line="77"/>
            <javadoc line="77">
                Whether to restrict the variables to non-negative values.                
            </javadoc>
            <declaration name="columnLabels" type="List&amp;lt;String&amp;gt;" line="80"/>
            <javadoc line="80">
                The variables each column represents                
            </javadoc>
            <declaration name="tableau" type="Array2DRowRealMatrix" line="83"/>
            <javadoc line="83">
                Simple tableau.                
            </javadoc>
            <declaration name="numDecisionVariables" type="int" line="86"/>
            <javadoc line="86">
                Number of decision variables.                
            </javadoc>
            <declaration name="numSlackVariables" type="int" line="89"/>
            <javadoc line="89">
                Number of slack variables.                
            </javadoc>
            <declaration name="numArtificialVariables" type="int" line="92"/>
            <javadoc line="92">
                Number of artificial variables.                
            </javadoc>
            <declaration name="epsilon" type="double" line="95"/>
            <javadoc line="95">
                Amount of error to accept when checking for optimality.                
            </javadoc>
            <declaration name="maxUlps" type="int" line="98"/>
            <javadoc line="98">
                Amount of error to accept in floating point comparisons.                
            </javadoc>
            <declaration name="basicVariables" type="int[]" line="101"/>
            <javadoc line="101">
                Maps basic variables to row they are basic in.                
            </javadoc>
            <declaration name="basicRows" type="int[]" line="104"/>
            <javadoc line="104">
                Maps rows to their corresponding basic variables.                
            </javadoc>
            <javadoc line="107">
                Builds a tableau for a linear problem.                
                <param>
                    f Linear objective function.                    
                </param>
                <param>
                    constraints Linear constraints.                    
                </param>
                <param>
                    goalType Optimization goal: either {@link GoalType#MAXIMIZE}or {@link GoalType#MINIMIZE}.                    
                </param>
                <param>
                    restrictToNonNegative Whether to restrict the variables to non-negative values.                    
                </param>
                <param>
                    epsilon Amount of error to accept when checking for optimality.                    
                </param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="121">
                <params>
                    <param name="f" type="LinearObjectiveFunction"/>
                    <param name="constraints" type="Collection&lt;LinearConstraint&gt;"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="restrictToNonNegative" type="boolean"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="125">
                Build a tableau for a linear problem.                
                <param>
                    f linear objective function                    
                </param>
                <param>
                    constraints linear constraints                    
                </param>
                <param>
                    goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}                    
                </param>
                <param>
                    restrictToNonNegative whether to restrict the variables to non-negative values                    
                </param>
                <param>
                    epsilon amount of error to accept when checking for optimality                    
                </param>
                <param>
                    maxUlps amount of error to accept in floating point comparisons                    
                </param>
            </javadoc>
            <method name="SimplexTableau" type="constructor" line="139">
                <params>
                    <param name="f" type="LinearObjectiveFunction"/>
                    <param name="constraints" type="Collection&lt;LinearConstraint&gt;"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="restrictToNonNegative" type="boolean"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
                <comment line="152">
                    initialize the basic variables for phase 1:
                       we know that only slack or artificial variables can be basic                    
                </comment>
            </method>
            <javadoc line="157">
                Initialize the labels for the columns.                
            </javadoc>
            <method name="initializeColumnLabels" type="void" line="160">
                <scope line="161"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171"/>
                <scope line="174"/>
            </method>
            <javadoc line="180">
                Create the tableau by itself.                
                <param>
                    maximize if true, goal is to maximize the objective function                    
                </param>
                <return>
                    created tableau                    
                </return>
            </javadoc>
            <method name="createTableau" type="Array2DRowRealMatrix" line="185">
                <params>
                    <param name="maximize" type="boolean"/>
                </params>
                <comment line="188">
                    create a matrix of the correct size                    
                </comment>
                <comment line="190">
                    + 1 is for RHS                    
                </comment>
                <comment line="194">
                    initialize the objective function rows                    
                </comment>
                <comment line="210">
                    initialize the constraint rows                    
                </comment>
                <comment line="217">
                    decision variable coefficients                    
                </comment>
                <comment line="220">
                    x-                    
                </comment>
                <comment line="226">
                    RHS                    
                </comment>
                <comment line="229">
                    slack variables                    
                </comment>
                <comment line="231">
                    slack                    
                </comment>
                <comment line="233">
                    excess                    
                </comment>
                <comment line="236">
                    artificial variables                    
                </comment>
                <declaration name="width" type="int" line="188"/>
                <declaration name="height" type="int" line="190"/>
                <declaration name="matrix" type="Array2DRowRealMatrix" line="191"/>
                <scope line="194"/>
                <declaration name="zIndex" type="int" line="198"/>
                <declaration name="objectiveCoefficients" type="RealVector" line="200"/>
                <scope line="204"/>
                <declaration name="slackVar" type="int" line="210"/>
                <declaration name="artificialVar" type="int" line="211"/>
                <scope line="212">
                    <declaration name="constraint" type="LinearConstraint" line="213"/>
                    <declaration name="row" type="int" line="214"/>
                    <scope line="220"/>
                    <scope line="229"/>
                    <scope line="231"/>
                    <scope line="237"/>
                </scope>
            </method>
            <javadoc line="247">
                Get new versions of the constraints which have positive right hand sides.                
                <param>
                    originalConstraints original (not normalized) constraints                    
                </param>
                <return>
                    new versions of the constraints                    
                </return>
            </javadoc>
            <method name="normalizeConstraints" type="List&lt;LinearConstraint&gt;" line="252">
                <params>
                    <param name="originalConstraints" type="Collection&lt;LinearConstraint&gt;"/>
                </params>
                <declaration name="normalized" type="List&amp;lt;LinearConstraint&amp;gt;" line="253"/>
                <scope line="254"/>
            </method>
            <javadoc line="260">
                Get a new equation equivalent to this one with a positive right hand side.                
                <param>
                    constraint reference constraint                    
                </param>
                <return>
                    new equation                    
                </return>
            </javadoc>
            <method name="normalize" type="LinearConstraint" line="265">
                <params>
                    <param name="constraint" type="LinearConstraint"/>
                </params>
                <scope line="266"/>
            </method>
            <javadoc line="275">
                Get the number of objective functions in this tableau.                
                <return>
                    2 for Phase 1.  1 for Phase 2.                    
                </return>
            </javadoc>
            <method name="getNumObjectiveFunctions" type="int" line="279"/>
            <javadoc line="283">
                Get a count of constraints corresponding to a specified relationship.                
                <param>
                    relationship relationship to count                    
                </param>
                <return>
                    number of constraint with the specified relationship                    
                </return>
            </javadoc>
            <method name="getConstraintTypeCounts" type="int" line="288">
                <params>
                    <param name="relationship" type="Relationship"/>
                </params>
                <declaration name="count" type="int" line="289"/>
                <scope line="290">
                    <scope line="291"/>
                </scope>
            </method>
            <javadoc line="298">
                Get the -1 times the sum of all coefficients in the given array.                
                <param>
                    coefficients coefficients to sum                    
                </param>
                <return>
                    the -1 times the sum of all coefficients in the given array.                    
                </return>
            </javadoc>
            <method name="getInvertedCoefficientSum" type="double" line="303">
                <params>
                    <param name="coefficients" type="RealVector"/>
                </params>
                <declaration name="sum" type="double" line="304"/>
                <scope line="305"/>
            </method>
            <javadoc line="311">
                Checks whether the given column is basic.                
                <param>
                    col index of the column to check                    
                </param>
                <return>
                    the row that the variable is basic in.  null if the column is not basic                    
                </return>
            </javadoc>
            <method name="getBasicRow" type="Integer" line="316">
                <params>
                    <param name="col" type="int"/>
                </params>
                <declaration name="row" type="int" line="317"/>
            </method>
            <javadoc line="321">
                Returns the variable that is basic in this row.                
                <param>
                    row the index of the row to check                    
                </param>
                <return>
                    the variable that is basic for this row.                    
                </return>
            </javadoc>
            <method name="getBasicVariable" type="int" line="326">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="330">
                Initializes the basic variable / row mapping.                
                <param>
                    startColumn the column to start                    
                </param>
            </javadoc>
            <method name="initializeBasicVariables" type="void" line="334">
                <params>
                    <param name="startColumn" type="int"/>
                </params>
                <scope line="340">
                    <declaration name="row" type="Integer" line="341"/>
                    <scope line="342"/>
                </scope>
            </method>
            <javadoc line="349">
                Returns the row in which the given column is basic.                
                <param>
                    col index of the column                    
                </param>
                <return>
                    the row that the variable is basic in, or {@code null} if the variable is not basic.                    
                </return>
            </javadoc>
            <method name="findBasicRow" type="Integer" line="354">
                <params>
                    <param name="col" type="int"/>
                </params>
                <declaration name="row" type="Integer" line="355"/>
                <scope line="356">
                    <declaration name="entry" type="double" line="357"/>
                    <scope line="358"/>
                    <scope line="360"/>
                </scope>
            </method>
            <javadoc line="367">
                Removes the phase 1 objective function, positive cost non-artificial variables,
                  and the non-basic artificial variables from this tableau.                
            </javadoc>
            <method name="dropPhase1Objective" type="void" line="371">
                <comment line="380">
                    positive cost non-artificial variables                    
                </comment>
                <comment line="388">
                    non-basic artificial variables                    
                </comment>
                <comment line="406">
                    remove the columns in reverse order so the indices are correct                    
                </comment>
                <comment line="414">
                    need to update the basic variable mappings as row/columns have been dropped                    
                </comment>
                <scope line="372"/>
                <declaration name="columnsToDrop" type="Set&amp;lt;Integer&amp;gt;" line="376"/>
                <scope line="380">
                    <declaration name="entry" type="double" line="381"/>
                    <scope line="382"/>
                </scope>
                <scope line="388">
                    <declaration name="col" type="int" line="389"/>
                    <scope line="390"/>
                </scope>
                <declaration name="matrix" type="double[][]" line="395"/>
                <scope line="396">
                    <declaration name="col" type="int" line="397"/>
                    <scope line="398">
                        <scope line="399"/>
                    </scope>
                </scope>
                <declaration name="drop" type="Integer[]" line="406"/>
                <scope line="407"/>
            </method>
            <javadoc line="417">
                @param src the source array                
                <param>
                    dest the destination array                    
                </param>
            </javadoc>
            <method name="copyArray" type="void" line="421">
                <params>
                    <param name="src" type="double[]"/>
                    <param name="dest" type="double[]"/>
                </params>
            </method>
            <javadoc line="425">
                Returns whether the problem is at an optimal state.                
                <return>
                    whether the model has been solved                    
                </return>
            </javadoc>
            <method name="isOptimal" type="boolean" line="429">
                <declaration name="objectiveFunctionRow" type="double[]" line="430"/>
                <declaration name="end" type="int" line="431"/>
                <scope line="432">
                    <declaration name="entry" type="double" line="433"/>
                    <scope line="434"/>
                </scope>
            </method>
            <javadoc line="441">
                Get the current solution.                
                <return>
                    current solution                    
                </return>
            </javadoc>
            <method name="getSolution" type="PointValuePair" line="445">
                <comment line="461">
                    if the basic row is found to be the objective function row
                     set the coefficient to 0 -&gt; this case handles unconstrained
                     variables that are still part of the objective function                    
                </comment>
                <comment line="466">
                    if multiple variables can take a given value
                     then we choose the first and set the rest equal to 0                    
                </comment>
                <declaration name="negativeVarColumn" type="int" line="446"/>
                <declaration name="negativeVarBasicRow" type="Integer" line="447"/>
                <declaration name="mostNegative" type="double" line="448"/>
                <declaration name="usedBasicRows" type="Set&amp;lt;Integer&amp;gt;" line="450"/>
                <declaration name="coefficients" type="double[]" line="451"/>
                <scope line="452">
                    <declaration name="colIndex" type="int" line="453"/>
                    <scope line="454"/>
                    <declaration name="basicRow" type="Integer" line="458"/>
                    <scope line="459"/>
                    <scope line="464"/>
                    <scope line="468"/>
                </scope>
            </method>
            <javadoc line="478">
                Perform the row operations of the simplex algorithm with the selected
                  pivot column and row.                
                <param>
                    pivotCol the pivot column                    
                </param>
                <param>
                    pivotRow the pivot row                    
                </param>
            </javadoc>
            <method name="performRowOperations" type="void" line="484">
                <params>
                    <param name="pivotCol" type="int"/>
                    <param name="pivotRow" type="int"/>
                </params>
                <comment line="486">
                    set the pivot element to 1                    
                </comment>
                <comment line="490">
                    set the rest of the pivot column to 0                    
                </comment>
                <comment line="500">
                    update the basic variable mappings                    
                </comment>
                <declaration name="pivotVal" type="double" line="486"/>
                <scope line="490">
                    <scope line="491">
                        <declaration name="multiplier" type="double" line="492"/>
                        <scope line="493"/>
                    </scope>
                </scope>
                <declaration name="previousBasicVariable" type="int" line="500"/>
            </method>
            <javadoc line="506">
                Divides one row by a given divisor.
                  &lt;p&gt;
                  After application of this operation, the following will hold:
                  &lt;pre&gt;dividendRow = dividendRow / divisor&lt;/pre&gt;                
                <param>
                    dividendRowIndex index of the row                    
                </param>
                <param>
                    divisor value of the divisor                    
                </param>
            </javadoc>
            <method name="divideRow" type="void" line="515">
                <params>
                    <param name="dividendRowIndex" type="int"/>
                    <param name="divisor" type="double"/>
                </params>
                <declaration name="dividendRow" type="double[]" line="516"/>
                <scope line="517"/>
            </method>
            <javadoc line="522">
                Subtracts a multiple of one row from another.
                  &lt;p&gt;
                  After application of this operation, the following will hold:
                  &lt;pre&gt;minuendRow = minuendRow - multiple  subtrahendRow&lt;/pre&gt;                
                <param>
                    minuendRowIndex row index                    
                </param>
                <param>
                    subtrahendRowIndex row index                    
                </param>
                <param>
                    multiplier multiplication factor                    
                </param>
            </javadoc>
            <method name="subtractRow" type="void" line="532">
                <params>
                    <param name="minuendRowIndex" type="int"/>
                    <param name="subtrahendRowIndex" type="int"/>
                    <param name="multiplier" type="double"/>
                </params>
                <declaration name="minuendRow" type="double[]" line="533"/>
                <declaration name="subtrahendRow" type="double[]" line="534"/>
                <scope line="535"/>
            </method>
            <javadoc line="540">
                Get the width of the tableau.                
                <return>
                    width of the tableau                    
                </return>
            </javadoc>
            <method name="getWidth" type="int" line="544"/>
            <javadoc line="548">
                Get the height of the tableau.                
                <return>
                    height of the tableau                    
                </return>
            </javadoc>
            <method name="getHeight" type="int" line="552"/>
            <javadoc line="556">
                Get an entry of the tableau.                
                <param>
                    row row index                    
                </param>
                <param>
                    column column index                    
                </param>
                <return>
                    entry at (row, column)                    
                </return>
            </javadoc>
            <method name="getEntry" type="double" line="562">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="566">
                Set an entry of the tableau.                
                <param>
                    row row index                    
                </param>
                <param>
                    column column index                    
                </param>
                <param>
                    value for the entry                    
                </param>
            </javadoc>
            <method name="setEntry" type="void" line="572">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="576">
                Get the offset of the first slack variable.                
                <return>
                    offset of the first slack variable                    
                </return>
            </javadoc>
            <method name="getSlackVariableOffset" type="int" line="580"/>
            <javadoc line="584">
                Get the offset of the first artificial variable.                
                <return>
                    offset of the first artificial variable                    
                </return>
            </javadoc>
            <method name="getArtificialVariableOffset" type="int" line="588"/>
            <javadoc line="592">
                Get the offset of the right hand side.                
                <return>
                    offset of the right hand side                    
                </return>
            </javadoc>
            <method name="getRhsOffset" type="int" line="596"/>
            <javadoc line="600">
                Get the number of decision variables.
                  &lt;p&gt;
                  If variables are not restricted to positive values, this will include 1 extra decision variable to represent
                  the absolute value of the most negative variable.                
                <return>
                    number of decision variables                    
                </return>
                <see>
                    #getOriginalNumDecisionVariables()                    
                </see>
            </javadoc>
            <method name="getNumDecisionVariables" type="int" line="609"/>
            <javadoc line="613">
                Get the original number of decision variables.                
                <return>
                    original number of decision variables                    
                </return>
                <see>
                    #getNumDecisionVariables()                    
                </see>
            </javadoc>
            <method name="getOriginalNumDecisionVariables" type="int" line="618"/>
            <javadoc line="622">
                Get the number of slack variables.                
                <return>
                    number of slack variables                    
                </return>
            </javadoc>
            <method name="getNumSlackVariables" type="int" line="626"/>
            <javadoc line="630">
                Get the number of artificial variables.                
                <return>
                    number of artificial variables                    
                </return>
            </javadoc>
            <method name="getNumArtificialVariables" type="int" line="634"/>
            <javadoc line="638">
                Get the row from the tableau.                
                <param>
                    row the row index                    
                </param>
                <return>
                    the reference to the underlying row data                    
                </return>
            </javadoc>
            <method name="getRow" type="double[]" line="643">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="647">
                Get the tableau data.                
                <return>
                    tableau data                    
                </return>
            </javadoc>
            <method name="getData" type="double[][]" line="651"/>
            <method name="equals" type="boolean" line="656">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="658"/>
                <scope line="662">
                    <declaration name="rhs" type="SimplexTableau" line="663"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="678"/>
            <javadoc line="690">
                Serialize the instance.                
                <param>
                    oos stream where object should be written                    
                </param>
                <throws>
                    IOException if object cannot be written to stream                    
                </throws>
            </javadoc>
            <method name="writeObject" type="void" line="696">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="701">
                Deserialize the instance.                
                <param>
                    ois stream from which the object should be read                    
                </param>
                <throws>
                    ClassNotFoundException if a class in the stream cannot be found                    
                </throws>
                <throws>
                    IOException if object cannot be read from the stream                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="708">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>