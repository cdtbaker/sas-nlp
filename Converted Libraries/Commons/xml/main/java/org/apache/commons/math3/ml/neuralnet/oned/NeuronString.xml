<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet.oned">
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="org.apache.commons.math3.ml.neuralnet.Network"/>
        <import package="org.apache.commons.math3.ml.neuralnet.FeatureInitializer"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <class name="NeuronString" line="27">
            <implements interface="Serializable"/>
            <javadoc line="27">
                Neural network with the topology of a one-dimensional line.
                  Each neuron defines one point on the line.                
                <version>
                    $Id: NeuronString.java 1566396 2014-02-09 20:36:24Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="network" type="Network" line="35"/>
            <javadoc line="35">
                Underlying network.                
            </javadoc>
            <declaration name="size" type="int" line="37"/>
            <javadoc line="37">
                Number of neurons.                
            </javadoc>
            <declaration name="wrap" type="boolean" line="39"/>
            <javadoc line="39">
                Wrap.                
            </javadoc>
            <declaration name="identifiers" type="long[]" line="42"/>
            <javadoc line="42">
                Mapping of the 1D coordinate to the neuron identifiers
                  (attributed by the {@link #network} instance).                
            </javadoc>
            <javadoc line="48">
                Constructor with restricted access, solely used for deserialization.                
                <param>
                    wrap Whether to wrap the dimension (i.e the first and last
                      neurons will be linked together).                    
                </param>
                <param>
                    featuresList Arrays that will initialize the features sets of
                      the network&apos;s neurons.                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code num &lt; 2}.                    
                </throws>
            </javadoc>
            <method name="NeuronString" type="constructor" line="58">
                <params>
                    <param name="wrap" type="boolean"/>
                    <param name="featuresList" type="double[][]"/>
                </params>
                <comment line="72">
                    Add neurons.                    
                </comment>
                <comment line="77">
                    Add links.                    
                </comment>
                <scope line="61"/>
                <declaration name="fLen" type="int" line="67"/>
                <scope line="72"/>
            </method>
            <javadoc line="80">
                Creates a one-dimensional network:
                  Each neuron not located on the border of the mesh has two
                  neurons linked to it.
                  &lt;br/&gt;
                  The links are bi-directional.
                  Neurons created successively are neighbours (i.e. there are
                  links between them).
                  &lt;br/&gt;
                  The topology of the network can also be a circle (if the
                  dimension is wrapped).                
                <param>
                    num Number of neurons.                    
                </param>
                <param>
                    wrap Whether to wrap the dimension (i.e the first and last
                      neurons will be linked together).                    
                </param>
                <param>
                    featureInit Arrays that will initialize the features sets of
                      the network&apos;s neurons.                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code num &lt; 2}.                    
                </throws>
            </javadoc>
            <method name="NeuronString" type="constructor" line="101">
                <params>
                    <param name="num" type="int"/>
                    <param name="wrap" type="boolean"/>
                    <param name="featureInit" type="FeatureInitializer[]"/>
                </params>
                <comment line="114">
                    Add neurons.                    
                </comment>
                <comment line="123">
                    Add links.                    
                </comment>
                <scope line="102"/>
                <declaration name="fLen" type="int" line="110"/>
                <scope line="114">
                    <declaration name="features" type="double[]" line="115"/>
                    <scope line="116"/>
                </scope>
            </method>
            <javadoc line="126">
                Retrieves the underlying network.
                  A reference is returned (enabling, for example, the network to be
                  trained).
                  This also implies that calling methods that modify the {@link Network}topology may cause this class to become inconsistent.                
                <return>
                    the network.                    
                </return>
            </javadoc>
            <method name="getNetwork" type="Network" line="135"/>
            <javadoc line="139">
                Gets the number of neurons.                
                <return>
                    the number of neurons.                    
                </return>
            </javadoc>
            <method name="getSize" type="int" line="144"/>
            <javadoc line="148">
                Retrieves the features set from the neuron at location{@code i} in the map.                
                <param>
                    i Neuron index.                    
                </param>
                <return>
                    the features of the neuron at index {@code i}.                    
                </return>
                <throws>
                    OutOfRangeException if {@code i} is out of range.                    
                </throws>
            </javadoc>
            <method name="getFeatures" type="double[]" line="156">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="158"/>
            </method>
            <javadoc line="165">
                Creates the neighbour relationships between neurons.                
            </javadoc>
            <method name="createLinks" type="void" line="168">
                <scope line="169"/>
                <scope line="172"/>
                <scope line="175"/>
            </method>
            <javadoc line="181">
                Prevents proxy bypass.                
                <param>
                    in Input stream.                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="186">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="190">
                Custom serialization.                
                <return>
                    the proxy instance that will be actually serialized.                    
                </return>
            </javadoc>
            <method name="writeReplace" type="Object" line="195">
                <declaration name="featuresList" type="double[][]" line="196"/>
                <scope line="197"/>
            </method>
            <class name="SerializationProxy" line="205">
                <implements interface="Serializable"/>
                <javadoc line="205">
                    Serialization.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="209"/>
                <javadoc line="209">
                    Serializable.                    
                </javadoc>
                <declaration name="wrap" type="boolean" line="211"/>
                <javadoc line="211">
                    Wrap.                    
                </javadoc>
                <declaration name="featuresList" type="double[][]" line="213"/>
                <javadoc line="213">
                    Neurons&apos; features.                    
                </javadoc>
                <javadoc line="216">
                    @param wrap Whether the dimension is wrapped.                    
                    <param>
                        featuresList List of neurons features.{@code neuronList}.                        
                    </param>
                </javadoc>
                <method name="SerializationProxy" type="constructor" line="222">
                    <params>
                        <param name="wrap" type="boolean"/>
                        <param name="featuresList" type="double[][]"/>
                    </params>
                </method>
                <javadoc line="227">
                    Custom serialization.                    
                    <return>
                        the {@link Neuron} for which this instance is the proxy.                        
                    </return>
                </javadoc>
                <method name="readResolve" type="Object" line="232"/>
            </class>
        </class>
    </source>