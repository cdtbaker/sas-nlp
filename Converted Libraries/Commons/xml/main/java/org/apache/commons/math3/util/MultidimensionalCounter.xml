<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.NoSuchElementException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <class name="MultidimensionalCounter" line="25">
            <implements interface="Iterable">
                <type_params>
                    <type_param name="Integer"/>
                </type_params>
            </implements>
            <javadoc line="25">
                Converter between unidimensional storage structure and multidimensional
                  conceptual structure.
                  This utility will convert from indices in a multidimensional structure
                  to the corresponding index in a one-dimensional array. For example,
                  assuming that the ranges (in 3 dimensions) of indices are 2, 4 and 3,
                  the following correspondences, between 3-tuples indices and unidimensional
                  indices, will hold:
                  &lt;ul&gt;
                  &lt;li&gt;(0, 0, 0) corresponds to 0&lt;/li&gt;
                  &lt;li&gt;(0, 0, 1) corresponds to 1&lt;/li&gt;
                  &lt;li&gt;(0, 0, 2) corresponds to 2&lt;/li&gt;
                  &lt;li&gt;(0, 1, 0) corresponds to 3&lt;/li&gt;
                  &lt;li&gt;...&lt;/li&gt;
                  &lt;li&gt;(1, 0, 0) corresponds to 12&lt;/li&gt;
                  &lt;li&gt;...&lt;/li&gt;
                  &lt;li&gt;(1, 3, 2) corresponds to 23&lt;/li&gt;
                  &lt;/ul&gt;                
                <since>
                    2.2                    
                </since>
                <version>
                    $Id: MultidimensionalCounter.java 1558833 2014-01-16 15:26:29Z erans $                    
                </version>
            </javadoc>
            <declaration name="dimension" type="int" line="48"/>
            <javadoc line="48">
                Number of dimensions.                
            </javadoc>
            <declaration name="uniCounterOffset" type="int[]" line="52"/>
            <javadoc line="52">
                Offset for each dimension.                
            </javadoc>
            <declaration name="size" type="int[]" line="56"/>
            <javadoc line="56">
                Counter sizes.                
            </javadoc>
            <declaration name="totalSize" type="int" line="60"/>
            <javadoc line="60">
                Total number of (one-dimensional) slots.                
            </javadoc>
            <declaration name="last" type="int" line="64"/>
            <javadoc line="64">
                Index of last dimension.                
            </javadoc>
            <class name="Iterator" line="69">
                <implements interface="java.util.Iterator">
                    <type_params>
                        <type_param name="Integer"/>
                    </type_params>
                </implements>
                <javadoc line="69">
                    Perform iteration over the multidimensional counter.                    
                </javadoc>
                <declaration name="counter" type="int[]" line="73"/>
                <javadoc line="73">
                    Multidimensional counter.                    
                </javadoc>
                <declaration name="count" type="int" line="77"/>
                <javadoc line="77">
                    Unidimensional counter.                    
                </javadoc>
                <declaration name="maxCount" type="int" line="81"/>
                <javadoc line="81">
                    Maximum value for {@link #count}.                    
                </javadoc>
                <javadoc line="86">
                    Create an iterator                    
                    <see>
                        #iterator()                        
                    </see>
                </javadoc>
                <method name="Iterator" type="constructor" line="90"/>
                <javadoc line="94">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hasNext" type="boolean" line="97"/>
                <javadoc line="101">
                    @return the unidimensional count after the counter has been
                      incremented by {@code 1}.                    
                    <throws>
                        NoSuchElementException if {@link #hasNext()} would have
                          returned {@code false}.                        
                    </throws>
                </javadoc>
                <method name="next" type="Integer" line="107">
                    <scope line="108"/>
                    <scope line="112">
                        <scope line="113"/>
                        <scope line="115"/>
                    </scope>
                </method>
                <javadoc line="124">
                    Get the current unidimensional counter slot.                    
                    <return>
                        the index within the unidimensionl counter.                        
                    </return>
                </javadoc>
                <method name="getCount" type="int" line="129"/>
                <javadoc line="132">
                    Get the current multidimensional counter slots.                    
                    <return>
                        the indices within the multidimensional counter.                        
                    </return>
                </javadoc>
                <method name="getCounts" type="int[]" line="137"/>
                <javadoc line="141">
                    Get the current count in the selected dimension.                    
                    <param>
                        dim Dimension index.                        
                    </param>
                    <return>
                        the count at the corresponding index for the current state
                          of the iterator.                        
                    </return>
                    <throws>
                        IndexOutOfBoundsException if {@code index} is not in the
                          correct interval (as defined by the length of the argument in the{@link MultidimensionalCounter#MultidimensionalCounter(int[])constructor of the enclosing class}).                        
                    </throws>
                </javadoc>
                <method name="getCount" type="int" line="152">
                    <params>
                        <param name="dim" type="int"/>
                    </params>
                </method>
                <javadoc line="156">
                    @throws UnsupportedOperationException                    
                </javadoc>
                <method name="remove" type="void" line="159"/>
            </class>
            <javadoc line="164">
                Create a counter.                
                <param>
                    size Counter sizes (number of slots in each dimension).                    
                </param>
                <throws>
                    NotStrictlyPositiveException if one of the sizes is
                      negative or zero.                    
                </throws>
            </javadoc>
            <method name="MultidimensionalCounter" type="constructor" line="171">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="tS" type="int" line="178"/>
                <scope line="179">
                    <declaration name="count" type="int" line="180"/>
                    <scope line="181"/>
                </scope>
                <scope line="189"/>
            </method>
            <javadoc line="196">
                Create an iterator over this counter.                
                <return>
                    the iterator.                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator" line="201"/>
            <javadoc line="205">
                Get the number of dimensions of the multidimensional counter.                
                <return>
                    the number of dimensions.                    
                </return>
            </javadoc>
            <method name="getDimension" type="int" line="210"/>
            <javadoc line="214">
                Convert to multidimensional counter.                
                <param>
                    index Index in unidimensional counter.                    
                </param>
                <return>
                    the multidimensional counts.                    
                </return>
                <throws>
                    OutOfRangeException if {@code index} is not between{@code 0} and the value returned by {@link #getSize()} (excluded).                    
                </throws>
            </javadoc>
            <method name="getCounts" type="int[]" line="222">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="224"/>
                <declaration name="indices" type="int[]" line="228"/>
                <declaration name="count" type="int" line="230"/>
                <scope line="231">
                    <declaration name="idx" type="int" line="232"/>
                    <declaration name="offset" type="int" line="233"/>
                    <scope line="234"/>
                </scope>
            </method>
            <javadoc line="248">
                Convert to unidimensional counter.                
                <param>
                    c Indices in multidimensional counter.                    
                </param>
                <return>
                    the index within the unidimensionl counter.                    
                </return>
                <throws>
                    DimensionMismatchException if the size of {@code c}does not match the size of the array given in the constructor.                    
                </throws>
                <throws>
                    OutOfRangeException if a value of {@code c} is not in
                      the range of the corresponding dimension, as defined in the{@link MultidimensionalCounter#MultidimensionalCounter(int) constructor}.                    
                </throws>
            </javadoc>
            <method name="getCount" type="int" line="260">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="261"/>
                <declaration name="count" type="int" line="264"/>
                <scope line="265">
                    <declaration name="index" type="int" line="266"/>
                    <scope line="268"/>
                </scope>
            </method>
            <javadoc line="276">
                Get the total number of elements.                
                <return>
                    the total size of the unidimensional counter.                    
                </return>
            </javadoc>
            <method name="getSize" type="int" line="281"/>
            <javadoc line="284">
                Get the number of multidimensional counter slots in each dimension.                
                <return>
                    the sizes of the multidimensional counter in each dimension.                    
                </return>
            </javadoc>
            <method name="getSizes" type="int[]" line="289"/>
            <javadoc line="293">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="297">
                <declaration name="sb" type="StringBuilder" line="298"/>
                <scope line="299"/>
            </method>
        </class>
    </source>