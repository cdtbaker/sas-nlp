<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <class name="MultidimensionalCounter" line="5">
            <implements interface="Iterable">
                <type_params>
                    <type_param name="Integer"/>
                </type_params>
            </implements>
            <javadoc line="5">
                Converter between unidimensional storage structure and multidimensional
                  conceptual structure.
                  This utility will convert from indices in a multidimensional structure
                  to the corresponding index in a one-dimensional array. For example,
                  assuming that the ranges (in 3 dimensions) of indices are 2, 4 and 3,
                  the following correspondences, between 3-tuples indices and unidimensional
                  indices, will hold:
                  &lt;ul&gt;
                  &lt;li&gt;(0, 0, 0) corresponds to 0&lt;/li&gt;
                  &lt;li&gt;(0, 0, 1) corresponds to 1&lt;/li&gt;
                  &lt;li&gt;(0, 0, 2) corresponds to 2&lt;/li&gt;
                  &lt;li&gt;(0, 1, 0) corresponds to 3&lt;/li&gt;
                  &lt;li&gt;...&lt;/li&gt;
                  &lt;li&gt;(1, 0, 0) corresponds to 12&lt;/li&gt;
                  &lt;li&gt;...&lt;/li&gt;
                  &lt;li&gt;(1, 3, 2) corresponds to 23&lt;/li&gt;
                  &lt;/ul&gt;                
                <since>
                    2.2                    
                </since>
                <version>
                    $Id: MultidimensionalCounter.java 1382887 2012-09-10 14:37:27Z luc $                    
                </version>
            </javadoc>
            <declaration name="dimension" type="int" line="27"/>
            <javadoc line="27">
                Number of dimensions.                
            </javadoc>
            <declaration name="uniCounterOffset" type="int[]" line="31"/>
            <javadoc line="31">
                Offset for each dimension.                
            </javadoc>
            <declaration name="size" type="int[]" line="35"/>
            <javadoc line="35">
                Counter sizes.                
            </javadoc>
            <declaration name="totalSize" type="int" line="39"/>
            <javadoc line="39">
                Total number of (one-dimensional) slots.                
            </javadoc>
            <declaration name="last" type="int" line="43"/>
            <javadoc line="43">
                Index of last dimension.                
            </javadoc>
            <class name="Iterator" line="47">
                <implements interface="java.util.Iterator">
                    <type_params>
                        <type_param name="Integer"/>
                    </type_params>
                </implements>
                <javadoc line="47">
                    Perform iteration over the multidimensional counter.                    
                </javadoc>
                <declaration name="counter" type="int[]" line="51"/>
                <javadoc line="51">
                    Multidimensional counter.                    
                </javadoc>
                <declaration name="count" type="int" line="55"/>
                <javadoc line="55">
                    Unidimensional counter.                    
                </javadoc>
                <javadoc line="59">
                    Create an iterator                    
                    <see>
                        #iterator()                        
                    </see>
                </javadoc>
                <method name="Iterator" type="constructor" line="63"/>
                <javadoc line="66">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hasNext" type="boolean" line="69">
                    <scope line="70">
                        <scope line="71"/>
                    </scope>
                </method>
                <javadoc line="77">
                    @return the unidimensional count after the counter has been
                      incremented by {@code 1}.                    
                </javadoc>
                <method name="next" type="Integer" line="81">
                    <scope line="82">
                        <scope line="83"/>
                        <scope line="86"/>
                    </scope>
                </method>
                <javadoc line="93">
                    Get the current unidimensional counter slot.                    
                    <return>
                        the index within the unidimensionl counter.                        
                    </return>
                </javadoc>
                <method name="getCount" type="int" line="97"/>
                <javadoc line="100">
                    Get the current multidimensional counter slots.                    
                    <return>
                        the indices within the multidimensional counter.                        
                    </return>
                </javadoc>
                <method name="getCounts" type="int[]" line="104"/>
                <javadoc line="107">
                    Get the current count in the selected dimension.                    
                    <param>
                        dim Dimension index.                        
                    </param>
                    <return>
                        the count at the corresponding index for the current state
                          of the iterator.                        
                    </return>
                    <throws>
                        IndexOutOfBoundsException if {@code index} is not in the
                          correct interval (as defined by the length of the argument in the{@link MultidimensionalCounter#MultidimensionalCounter(int[])constructor of the enclosing class}).                        
                    </throws>
                </javadoc>
                <method name="getCount" type="int" line="115">
                    <params>
                        <param name="dim" type="int"/>
                    </params>
                </method>
                <javadoc line="118">
                    @throws UnsupportedOperationException                    
                </javadoc>
                <method name="remove" type="void" line="121"/>
            </class>
            <javadoc line="125">
                Create a counter.                
                <param>
                    size Counter sizes (number of slots in each dimension).                    
                </param>
                <throws>
                    NotStrictlyPositiveException if one of the sizes is
                      negative or zero.                    
                </throws>
            </javadoc>
            <method name="MultidimensionalCounter" type="constructor" line="131">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="tS" type="int" line="136"/>
                <scope line="137">
                    <declaration name="count" type="int" line="138"/>
                    <scope line="139"/>
                </scope>
                <scope line="146"/>
            </method>
            <javadoc line="151">
                Create an iterator over this counter.                
                <return>
                    the iterator.                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator" line="155"/>
            <javadoc line="158">
                Get the number of dimensions of the multidimensional counter.                
                <return>
                    the number of dimensions.                    
                </return>
            </javadoc>
            <method name="getDimension" type="int" line="162"/>
            <javadoc line="165">
                Convert to multidimensional counter.                
                <param>
                    index Index in unidimensional counter.                    
                </param>
                <return>
                    the multidimensional counts.                    
                </return>
                <throws>
                    OutOfRangeException if {@code index} is not between{@code 0} and the value returned by {@link #getSize()} (excluded).                    
                </throws>
            </javadoc>
            <method name="getCounts" type="int[]" line="171">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="172"/>
                <declaration name="indices" type="int[]" line="175"/>
                <declaration name="count" type="int" line="176"/>
                <scope line="177">
                    <declaration name="idx" type="int" line="178"/>
                    <declaration name="offset" type="int" line="179"/>
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="191">
                Convert to unidimensional counter.                
                <param>
                    c Indices in multidimensional counter.                    
                </param>
                <return>
                    the index within the unidimensionl counter.                    
                </return>
                <throws>
                    DimensionMismatchException if the size of {@code c}does not match the size of the array given in the constructor.                    
                </throws>
                <throws>
                    OutOfRangeException if a value of {@code c} is not in
                      the range of the corresponding dimension, as defined in the{@link MultidimensionalCounter#MultidimensionalCounter(int) constructor}.                    
                </throws>
            </javadoc>
            <method name="getCount" type="int" line="199">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="200"/>
                <declaration name="count" type="int" line="203"/>
                <scope line="204">
                    <declaration name="index" type="int" line="205"/>
                    <scope line="206"/>
                </scope>
            </method>
            <javadoc line="213">
                Get the total number of elements.                
                <return>
                    the total size of the unidimensional counter.                    
                </return>
            </javadoc>
            <method name="getSize" type="int" line="217"/>
            <javadoc line="220">
                Get the number of multidimensional counter slots in each dimension.                
                <return>
                    the sizes of the multidimensional counter in each dimension.                    
                </return>
            </javadoc>
            <method name="getSizes" type="int[]" line="224"/>
            <javadoc line="227">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="230">
                <declaration name="sb" type="StringBuilder" line="231"/>
                <scope line="232"/>
            </method>
        </class>
    </source>