<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.fitting">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction"/>
        <import package="org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer"/>
        <import package="org.apache.commons.math3.optimization.PointVectorValuePair"/>
        <class name="CurveFitter" line="12">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="12">
                Fitter for parametric univariate real functions y = f(x).
                  &lt;br/&gt;
                  When a univariate real function y = f(x) does depend on some
                  unknown parameters p&lt;sub&gt;0&lt;/sub&gt;, p&lt;sub&gt;1&lt;/sub&gt; ... p&lt;sub&gt;n-1&lt;/sub&gt;,
                  this class can be used to find these parameters. It does this
                  by &lt;em&gt;fitting&lt;/em&gt; the curve so it remains very close to a set of
                  observed points (x&lt;sub&gt;0&lt;/sub&gt;, y&lt;sub&gt;0&lt;/sub&gt;), (x&lt;sub&gt;1&lt;/sub&gt;,
                  y&lt;sub&gt;1&lt;/sub&gt;) ... (x&lt;sub&gt;k-1&lt;/sub&gt;, y&lt;sub&gt;k-1&lt;/sub&gt;). This fitting
                  is done by finding the parameters values that minimizes the objective
                  function &amp;sum;(y&lt;sub&gt;i&lt;/sub&gt;-f(x&lt;sub&gt;i&lt;/sub&gt;))&lt;sup&gt;2&lt;/sup&gt;. This is
                  really a least squares problem.                
                <param>
                    <T>
                      Function to use for the fit.                    
                </param>
                <version>
                    $Id: CurveFitter.java 1422230 2012-12-15 12:11:13Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="oldOptimizer" type="DifferentiableMultivariateVectorOptimizer" line="31"/>
            <javadoc line="31">
                Optimizer to use for the fitting.                
                <deprecated>
                    as of 3.1 replaced by {@link #optimizer}                    
                </deprecated>
            </javadoc>
            <declaration name="optimizer" type="MultivariateDifferentiableVectorOptimizer" line="36"/>
            <javadoc line="36">
                Optimizer to use for the fitting.                
            </javadoc>
            <declaration name="observations" type="List&lt;WeightedObservedPoint&gt;" line="40"/>
            <javadoc line="40">
                Observed points.                
            </javadoc>
            <javadoc line="44">
                Simple constructor.                
                <param>
                    optimizer optimizer to use for the fitting                    
                </param>
                <deprecated>
                    as of 3.1 replaced by {@link #CurveFitter(MultivariateDifferentiableVectorOptimizer)}                    
                </deprecated>
            </javadoc>
            <method name="CurveFitter" type="constructor" line="49">
                <params>
                    <param name="optimizer" type="DifferentiableMultivariateVectorOptimizer"/>
                </params>
            </method>
            <javadoc line="54">
                Simple constructor.                
                <param>
                    optimizer optimizer to use for the fitting                    
                </param>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="CurveFitter" type="constructor" line="59">
                <params>
                    <param name="optimizer" type="MultivariateDifferentiableVectorOptimizer"/>
                </params>
            </method>
            <javadoc line="64">
                Add an observed (x,y) point to the sample with unit weight.
                  &lt;p&gt;Calling this method is equivalent to call{@code addObservedPoint(1.0, x, y)}.&lt;/p&gt;                
                <param>
                    x abscissa of the point                    
                </param>
                <param>
                    y observed value of the point at x, after fitting we should
                      have f(x) as close as possible to this value                    
                </param>
                <see>
                    #addObservedPoint(double,double,double)                    
                </see>
                <see>
                    #addObservedPoint(WeightedObservedPoint)                    
                </see>
                <see>
                    #getObservations()                    
                </see>
            </javadoc>
            <method name="addObservedPoint" type="void" line="74">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="77">
                Add an observed weighted (x,y) point to the sample.                
                <param>
                    weight weight of the observed point in the fit                    
                </param>
                <param>
                    x abscissa of the point                    
                </param>
                <param>
                    y observed value of the point at x, after fitting we should
                      have f(x) as close as possible to this value                    
                </param>
                <see>
                    #addObservedPoint(double,double)                    
                </see>
                <see>
                    #addObservedPoint(WeightedObservedPoint)                    
                </see>
                <see>
                    #getObservations()                    
                </see>
            </javadoc>
            <method name="addObservedPoint" type="void" line="87">
                <params>
                    <param name="weight" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="90">
                Add an observed weighted (x,y) point to the sample.                
                <param>
                    observed observed point to add                    
                </param>
                <see>
                    #addObservedPoint(double,double)                    
                </see>
                <see>
                    #addObservedPoint(double,double,double)                    
                </see>
                <see>
                    #getObservations()                    
                </see>
            </javadoc>
            <method name="addObservedPoint" type="void" line="97">
                <params>
                    <param name="observed" type="WeightedObservedPoint"/>
                </params>
            </method>
            <javadoc line="100">
                Get the observed points.                
                <return>
                    observed points                    
                </return>
                <see>
                    #addObservedPoint(double,double)                    
                </see>
                <see>
                    #addObservedPoint(double,double,double)                    
                </see>
                <see>
                    #addObservedPoint(WeightedObservedPoint)                    
                </see>
            </javadoc>
            <method name="getObservations" type="WeightedObservedPoint[]" line="107"/>
            <javadoc line="110">
                Remove all observations.                
            </javadoc>
            <method name="clearObservations" type="void" line="113"/>
            <javadoc line="116">
                Fit a curve.
                  This method compute the coefficients of the curve that best
                  fit the sample of observed points previously given through calls
                  to the {@link #addObservedPoint(WeightedObservedPoint)addObservedPoint} method.                
                <param>
                    f parametric function to fit.                    
                </param>
                <param>
                    initialGuess first guess of the function parameters.                    
                </param>
                <return>
                    the fitted parameters.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.                    
                </throws>
            </javadoc>
            <method name="fit" type="double[]" line="126">
                <params>
                    <param name="f" type="T"/>
                    <param name="initialGuess" type="double[]"/>
                </params>
            </method>
            <javadoc line="129">
                Fit a curve.
                  This method compute the coefficients of the curve that best
                  fit the sample of observed points previously given through calls
                  to the {@link #addObservedPoint(WeightedObservedPoint)addObservedPoint} method.                
                <param>
                    f parametric function to fit.                    
                </param>
                <param>
                    initialGuess first guess of the function parameters.                    
                </param>
                <param>
                    maxEval Maximum number of function evaluations.                    
                </param>
                <return>
                    the fitted parameters.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the number of allowed evaluations is exceeded.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.                    
                </throws>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="fit" type="double[]" line="142">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="T"/>
                    <param name="initialGuess" type="double[]"/>
                </params>
                <declaration name="target" type="double[]" line="143"/>
                <declaration name="weights" type="double[]" line="144"/>
                <declaration name="i" type="int" line="145"/>
                <scope line="146"/>
                <declaration name="optimum" type="PointVectorValuePair" line="151"/>
                <scope line="152"/>
                <scope line="155"/>
            </method>
            <class name="OldTheoreticalValuesFunction" line="160">
                <implements interface="DifferentiableMultivariateVectorFunction"/>
                <javadoc line="160">
                    Vectorial function computing function theoretical values.                    
                </javadoc>
                <declaration name="f" type="ParametricUnivariateFunction" line="164"/>
                <javadoc line="164">
                    Function to fit.                    
                </javadoc>
                <javadoc line="168">
                    Simple constructor.                    
                    <param>
                        f function to fit.                        
                    </param>
                </javadoc>
                <method name="OldTheoreticalValuesFunction" type="constructor" line="172">
                    <params>
                        <param name="f" type="ParametricUnivariateFunction"/>
                    </params>
                </method>
                <javadoc line="175">
                    {@inheritDoc}                    
                </javadoc>
                <method name="jacobian" type="MultivariateMatrixFunction" line="178">
                    <anonymous_class line="179">
                        <method name="value" type="double[][]" line="180">
                            <params>
                                <param name="point" type="double[]"/>
                            </params>
                            <declaration name="jacobian" type="double[][]" line="181"/>
                            <declaration name="i" type="int" line="182"/>
                            <scope line="183"/>
                        </method>
                    </anonymous_class>
                </method>
                <javadoc line="191">
                    {@inheritDoc}                    
                </javadoc>
                <method name="value" type="double[]" line="194">
                    <params>
                        <param name="point" type="double[]"/>
                    </params>
                    <declaration name="values" type="double[]" line="195"/>
                    <declaration name="i" type="int" line="196"/>
                    <scope line="197"/>
                </method>
            </class>
            <class name="TheoreticalValuesFunction" line="203">
                <implements interface="MultivariateDifferentiableVectorFunction"/>
                <javadoc line="203">
                    Vectorial function computing function theoretical values.                    
                </javadoc>
                <declaration name="f" type="ParametricUnivariateFunction" line="207"/>
                <javadoc line="207">
                    Function to fit.                    
                </javadoc>
                <javadoc line="211">
                    Simple constructor.                    
                    <param>
                        f function to fit.                        
                    </param>
                </javadoc>
                <method name="TheoreticalValuesFunction" type="constructor" line="215">
                    <params>
                        <param name="f" type="ParametricUnivariateFunction"/>
                    </params>
                </method>
                <javadoc line="218">
                    {@inheritDoc}                    
                </javadoc>
                <method name="value" type="double[]" line="221">
                    <params>
                        <param name="point" type="double[]"/>
                    </params>
                    <declaration name="values" type="double[]" line="222"/>
                    <declaration name="i" type="int" line="223"/>
                    <scope line="224"/>
                </method>
                <javadoc line="229">
                    {@inheritDoc}                    
                </javadoc>
                <method name="value" type="DerivativeStructure[]" line="232">
                    <params>
                        <param name="point" type="DerivativeStructure[]"/>
                    </params>
                    <declaration name="parameters" type="double[]" line="233"/>
                    <scope line="234"/>
                    <declaration name="values" type="DerivativeStructure[]" line="237"/>
                    <declaration name="i" type="int" line="238"/>
                    <scope line="239">
                        <declaration name="vi" type="DerivativeStructure" line="240"/>
                        <scope line="241"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>