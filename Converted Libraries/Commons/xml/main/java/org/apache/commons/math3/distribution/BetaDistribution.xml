<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Gamma"/>
        <import package="org.apache.commons.math3.special.Beta"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="BetaDistribution" line="9">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="9">
                Implements the Beta distribution.                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Beta_distribution">Beta distribution</a>                    
                </see>
                <version>
                    $Id: BetaDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="16"/>
            <javadoc line="16">
                Default inverse cumulative probability accuracy.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="21"/>
            <javadoc line="21">
                Serializable version identifier.                
            </javadoc>
            <declaration name="alpha" type="double" line="25"/>
            <javadoc line="25">
                First shape parameter.                
            </javadoc>
            <declaration name="beta" type="double" line="29"/>
            <javadoc line="29">
                Second shape parameter.                
            </javadoc>
            <declaration name="z" type="double" line="33"/>
            <javadoc line="33">
                Normalizing factor used in density computations.
                  updated whenever alpha or beta are changed.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="38"/>
            <javadoc line="38">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <javadoc line="42">
                Build a new instance.                
                <param>
                    alpha First shape parameter (must be positive).                    
                </param>
                <param>
                    beta Second shape parameter (must be positive).                    
                </param>
            </javadoc>
            <method name="BetaDistribution" type="constructor" line="47">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                </params>
            </method>
            <javadoc line="50">
                Build a new instance.                
                <param>
                    alpha First shape parameter (must be positive).                    
                </param>
                <param>
                    beta Second shape parameter (must be positive).                    
                </param>
                <param>
                    inverseCumAccuracy Maximum absolute error in inverse
                      cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </param>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="BetaDistribution" type="constructor" line="58">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="61">
                Creates a &amp;beta; distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    alpha First shape parameter (must be positive).                    
                </param>
                <param>
                    beta Second shape parameter (must be positive).                    
                </param>
                <param>
                    inverseCumAccuracy Maximum absolute error in inverse
                      cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </param>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="BetaDistribution" type="constructor" line="70">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="77">
                Access the first shape parameter, {@code alpha}.                
                <return>
                    the first shape parameter.                    
                </return>
            </javadoc>
            <method name="getAlpha" type="double" line="81"/>
            <javadoc line="84">
                Access the second shape parameter, {@code beta}.                
                <return>
                    the second shape parameter.                    
                </return>
            </javadoc>
            <method name="getBeta" type="double" line="88"/>
            <javadoc line="91">
                Recompute the normalization factor.                
            </javadoc>
            <method name="recomputeZ" type="void" line="94">
                <scope line="95"/>
            </method>
            <javadoc line="99">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="102">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="104"/>
                <scope line="107">
                    <scope line="108"/>
                </scope>
                <scope line="113">
                    <scope line="114"/>
                </scope>
                <scope line="119">
                    <declaration name="logX" type="double" line="120"/>
                    <declaration name="log1mX" type="double" line="121"/>
                </scope>
            </method>
            <javadoc line="125">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="128">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="129"/>
                <scope line="132"/>
                <scope line="135"/>
            </method>
            <javadoc line="139">
                Return the absolute accuracy setting of the solver used to estimate
                  inverse cumulative probabilities.                
                <return>
                    the solver absolute accuracy.                    
                </return>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="145"/>
            <javadoc line="148">
                {@inheritDoc}For first shape parameter {@code alpha} and second shape parameter{@code beta}, the mean is {@code alpha / (alpha + beta)}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="151">
                <declaration name="a" type="double" line="152"/>
            </method>
            <javadoc line="155">
                {@inheritDoc}For first shape parameter {@code alpha} and second shape parameter{@code beta}, the variance is{@code (alpha  beta) / [(alpha + beta)^2  (alpha + beta + 1)]}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="158">
                <declaration name="a" type="double" line="159"/>
                <declaration name="b" type="double" line="160"/>
                <declaration name="alphabetasum" type="double" line="161"/>
            </method>
            <javadoc line="164">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="168"/>
            <javadoc line="171">
                {@inheritDoc}The upper bound of the support is always 1 no matter the parameters.                
                <return>
                    upper bound of the support (always 1)                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="175"/>
            <javadoc line="178">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="181"/>
            <javadoc line="184">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="187"/>
            <javadoc line="190">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="194"/>
        </class>
    </source>