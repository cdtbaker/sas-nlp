<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.DescriptiveStatistics"/>
        <import package="org.apache.commons.math3.stat.descriptive.UnivariateStatistic"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.GeometricMean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Mean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Max"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Min"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Percentile"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.Product"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.Sum"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfLogs"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfSquares"/>
        <class name="StatUtils" line="37">
            <javadoc line="37">
                StatUtils provides static methods for computing statistics based on data
                  stored in double[] arrays.                
                <version>
                    $Id: StatUtils.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="SUM" type="UnivariateStatistic" line="45"/>
            <javadoc line="45">
                sum                
            </javadoc>
            <declaration name="SUM_OF_SQUARES" type="UnivariateStatistic" line="48"/>
            <javadoc line="48">
                sumSq                
            </javadoc>
            <declaration name="PRODUCT" type="UnivariateStatistic" line="51"/>
            <javadoc line="51">
                prod                
            </javadoc>
            <declaration name="SUM_OF_LOGS" type="UnivariateStatistic" line="54"/>
            <javadoc line="54">
                sumLog                
            </javadoc>
            <declaration name="MIN" type="UnivariateStatistic" line="57"/>
            <javadoc line="57">
                min                
            </javadoc>
            <declaration name="MAX" type="UnivariateStatistic" line="60"/>
            <javadoc line="60">
                max                
            </javadoc>
            <declaration name="MEAN" type="UnivariateStatistic" line="63"/>
            <javadoc line="63">
                mean                
            </javadoc>
            <declaration name="VARIANCE" type="Variance" line="66"/>
            <javadoc line="66">
                variance                
            </javadoc>
            <declaration name="PERCENTILE" type="Percentile" line="69"/>
            <javadoc line="69">
                percentile                
            </javadoc>
            <declaration name="GEOMETRIC_MEAN" type="GeometricMean" line="72"/>
            <javadoc line="72">
                geometric mean                
            </javadoc>
            <javadoc line="75">
                Private Constructor                
            </javadoc>
            <method name="StatUtils" type="constructor" line="78"/>
            <javadoc line="81">
                Returns the sum of the values in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the input array
                  is null.&lt;/p&gt;                
                <param>
                    values  array of values to sum                    
                </param>
                <return>
                    the sum of the values or <code>Double.NaN</code> if the array
                      is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="sum" type="double" line="94">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="98">
                Returns the sum of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the sum of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="sum" type="double" line="113">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="117">
                Returns the sum of the squares of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values  input array                    
                </param>
                <return>
                    the sum of the squared values or <code>Double.NaN</code> if the
                      array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="sumSq" type="double" line="128">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="132">
                Returns the sum of the squares of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the sum of the squares of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="sumSq" type="double" line="147">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="151">
                Returns the product of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the product of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="product" type="double" line="162">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="166">
                Returns the product of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the product of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="product" type="double" line="181">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="185">
                Returns the sum of the natural logs of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.summary.SumOfLogs}.
                  &lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the sum of the natural logs of the values or Double.NaN if
                      the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="sumLog" type="double" line="200">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="204">
                Returns the sum of the natural logs of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.summary.SumOfLogs}.
                  &lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the sum of the natural logs of the values or Double.NaN if
                      length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="sumLog" type="double" line="223">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="227">
                Returns the arithmetic mean of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Mean} for
                  details on the computing algorithm.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the mean of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="mean" type="double" line="241">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="245">
                Returns the arithmetic mean of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Mean} for
                  details on the computing algorithm.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the mean of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="mean" type="double" line="263">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="267">
                Returns the geometric mean of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.GeometricMean}for details on the computing algorithm.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the geometric mean of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="geometricMean" type="double" line="281">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="285">
                Returns the geometric mean of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.GeometricMean}for details on the computing algorithm.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the geometric mean of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="geometricMean" type="double" line="303">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="308">
                Returns the variance of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #populationVariance(double[])} for the non-bias-corrected
                  population variance.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the variance of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="variance" type="double" line="327">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="331">
                Returns the variance of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #populationVariance(double[],int,int)} for the non-bias-corrected
                  population variance.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
                  array index parameters are not valid.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="variance" type="double" line="356">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="360">
                Returns the variance of the entries in the specified portion of
                  the input array, using the precomputed mean value.  Returns
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #populationVariance(double[],double,int,int)} for the non-bias-corrected
                  population variance.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
                  array index parameters are not valid.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="variance" type="double" line="391">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="395">
                Returns the variance of the entries in the input array, using the
                  precomputed mean value.  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if the array
                  is empty.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #populationVariance(double[],double)} for the non-bias-corrected
                  population variance.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <return>
                    the variance of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="variance" type="double" line="422">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                </params>
            </method>
            <javadoc line="426">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the formula and computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the population variance of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="populationVariance" type="double" line="443">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="447">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
                  array index parameters are not valid.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the population variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="populationVariance" type="double" line="469">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="473">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the entries in the specified portion of
                  the input array, using the precomputed mean value.  Returns
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
                  array index parameters are not valid.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the population variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="populationVariance" type="double" line="501">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="505">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the entries in the input array, using the
                  precomputed mean value.  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if the array
                  is empty.
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <return>
                    the population variance of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="populationVariance" type="double" line="529">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                </params>
            </method>
            <javadoc line="533">
                Returns the maximum of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                  (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                  &lt;li&gt;If any of the values equals &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,
                  the result is &lt;code&gt;Double.POSITIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the maximum of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="max" type="double" line="550">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="554">
                Returns the maximum of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or
                  the array index parameters are not valid.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                  (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                  &lt;li&gt;If any of the values equals &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,
                  the result is &lt;code&gt;Double.POSITIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the maximum of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="max" type="double" line="577">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="581">
                Returns the minimum of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                  (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                  &lt;li&gt;If any of the values equals &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt;,
                  the result is &lt;code&gt;Double.NEGATIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt; &lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the minimum of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="min" type="double" line="598">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="602">
                Returns the minimum of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or
                  the array index parameters are not valid.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                  (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                  &lt;li&gt;If any of the values equals &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt;,
                  the result is &lt;code&gt;Double.NEGATIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the minimum of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="min" type="double" line="625">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="629">
                Returns an estimate of the &lt;code&gt;p&lt;/code&gt;th percentile of the values
                  in the &lt;code&gt;values&lt;/code&gt; array.
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Returns &lt;code&gt;Double.NaN&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt; has length
                  &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;&lt;/p&gt;
                  &lt;li&gt;Returns (for any value of &lt;code&gt;p&lt;/code&gt;) &lt;code&gt;values[0]&lt;/code&gt;
                  if &lt;code&gt;values&lt;/code&gt; has length &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt;
                  is null  or p is not a valid quantile value (p must be greater than 0
                  and less than or equal to 100)&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.rank.Percentile} for
                  a description of the percentile estimation algorithm used.&lt;/p&gt;                
                <param>
                    values input array of values                    
                </param>
                <param>
                    p the percentile value to compute                    
                </param>
                <return>
                    the percentile value or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if <code>values</code> is null
                      or p is invalid                    
                </throws>
            </javadoc>
            <method name="percentile" type="double" line="653">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="657">
                Returns an estimate of the &lt;code&gt;p&lt;/code&gt;th percentile of the values
                  in the &lt;code&gt;values&lt;/code&gt; array, starting with the element in (0-based)
                  position &lt;code&gt;begin&lt;/code&gt; in the array and including &lt;code&gt;length&lt;/code&gt;
                  values.
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Returns &lt;code&gt;Double.NaN&lt;/code&gt; if &lt;code&gt;length = 0&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;Returns (for any value of &lt;code&gt;p&lt;/code&gt;) &lt;code&gt;values[begin]&lt;/code&gt;
                  if &lt;code&gt;length = 1 &lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt;
                  is null , &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; is invalid, or
                  &lt;code&gt;p&lt;/code&gt; is not a valid quantile value (p must be greater than 0
                  and less than or equal to 100)&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.rank.Percentile} for
                  a description of the percentile estimation algorithm used.&lt;/p&gt;                
                <param>
                    values array of input values                    
                </param>
                <param>
                    p  the percentile to compute                    
                </param>
                <param>
                    begin  the first (0-based) element to include in the computation                    
                </param>
                <param>
                    length  the number of array elements to include                    
                </param>
                <return>
                    the percentile value                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid or the
                      input array is null                    
                </throws>
            </javadoc>
            <method name="percentile" type="double" line="685">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="689">
                Returns the sum of the (signed) differences between corresponding elements of the
                  input arrays -- i.e., sum(sample1[i] - sample2[i]).                
                <param>
                    sample1  the first array                    
                </param>
                <param>
                    sample2  the second array                    
                </param>
                <return>
                    sum of paired differences                    
                </return>
                <throws>
                    DimensionMismatchException if the arrays do not have the same
                      (positive) length.                    
                </throws>
                <throws>
                    NoDataException if the sample arrays are empty.                    
                </throws>
            </javadoc>
            <method name="sumDifference" type="double" line="701">
                <params>
                    <param name="sample1" type="double[]"/>
                    <param name="sample2" type="double[]"/>
                </params>
                <declaration name="n" type="int" line="702"/>
                <scope line="703"/>
                <scope line="706"/>
                <declaration name="result" type="double" line="709"/>
                <scope line="710"/>
            </method>
            <javadoc line="716">
                Returns the mean of the (signed) differences between corresponding elements of the
                  input arrays -- i.e., sum(sample1[i] - sample2[i]) / sample1.length.                
                <param>
                    sample1  the first array                    
                </param>
                <param>
                    sample2  the second array                    
                </param>
                <return>
                    mean of paired differences                    
                </return>
                <throws>
                    DimensionMismatchException if the arrays do not have the same
                      (positive) length.                    
                </throws>
                <throws>
                    NoDataException if the sample arrays are empty.                    
                </throws>
            </javadoc>
            <method name="meanDifference" type="double" line="728">
                <params>
                    <param name="sample1" type="double[]"/>
                    <param name="sample2" type="double[]"/>
                </params>
            </method>
            <javadoc line="732">
                Returns the variance of the (signed) differences between corresponding elements of the
                  input arrays -- i.e., var(sample1[i] - sample2[i]).                
                <param>
                    sample1  the first array                    
                </param>
                <param>
                    sample2  the second array                    
                </param>
                <param>
                    meanDifference   the mean difference between corresponding entries                    
                </param>
                <see>
                    #meanDifference(double[],double[])                    
                </see>
                <return>
                    variance of paired differences                    
                </return>
                <throws>
                    DimensionMismatchException if the arrays do not have the same
                      length.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the arrays length is less than 2.                    
                </throws>
            </javadoc>
            <method name="varianceDifference" type="double" line="747">
                <params>
                    <param name="sample1" type="double[]"/>
                    <param name="sample2" type="double[]"/>
                    <param name="meanDifference" type="double"/>
                </params>
                <declaration name="sum1" type="double" line="748"/>
                <declaration name="sum2" type="double" line="749"/>
                <declaration name="diff" type="double" line="750"/>
                <declaration name="n" type="int" line="751"/>
                <scope line="752"/>
                <scope line="755"/>
                <scope line="758"/>
            </method>
            <javadoc line="766">
                Normalize (standardize) the sample, so it is has a mean of 0 and a standard deviation of 1.                
                <param>
                    sample Sample to normalize.                    
                </param>
                <return>
                    normalized (standardized) sample.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="normalize" type="double[]" line="773">
                <params>
                    <param name="sample" type="double[]"/>
                </params>
                <comment line="777">
                    Add the data from the series to stats                    
                </comment>
                <comment line="782">
                    Compute mean and standard deviation                    
                </comment>
                <comment line="786">
                    initialize the standardizedSample, which has the same length as the sample                    
                </comment>
                <comment line="790">
                    z = (x- mean)/standardDeviation                    
                </comment>
                <declaration name="stats" type="DescriptiveStatistics" line="774"/>
                <scope line="777"/>
                <declaration name="mean" type="double" line="782"/>
                <declaration name="standardDeviation" type="double" line="783"/>
                <declaration name="standardizedSample" type="double[]" line="786"/>
                <scope line="788"/>
            </method>
        </class>
    </source>