<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat">
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.DescriptiveStatistics"/>
        <import package="org.apache.commons.math3.stat.descriptive.UnivariateStatistic"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.GeometricMean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Mean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Max"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Min"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Percentile"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.Product"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.Sum"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfLogs"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfSquares"/>
        <class name="StatUtils" line="41">
            <javadoc line="41">
                StatUtils provides static methods for computing statistics based on data
                  stored in double[] arrays.                
                <version>
                    $Id: StatUtils.java 1505931 2013-07-23 08:37:39Z luc $                    
                </version>
            </javadoc>
            <declaration name="SUM" type="UnivariateStatistic" line="49"/>
            <javadoc line="49">
                sum                
            </javadoc>
            <declaration name="SUM_OF_SQUARES" type="UnivariateStatistic" line="52"/>
            <javadoc line="52">
                sumSq                
            </javadoc>
            <declaration name="PRODUCT" type="UnivariateStatistic" line="55"/>
            <javadoc line="55">
                prod                
            </javadoc>
            <declaration name="SUM_OF_LOGS" type="UnivariateStatistic" line="58"/>
            <javadoc line="58">
                sumLog                
            </javadoc>
            <declaration name="MIN" type="UnivariateStatistic" line="61"/>
            <javadoc line="61">
                min                
            </javadoc>
            <declaration name="MAX" type="UnivariateStatistic" line="64"/>
            <javadoc line="64">
                max                
            </javadoc>
            <declaration name="MEAN" type="UnivariateStatistic" line="67"/>
            <javadoc line="67">
                mean                
            </javadoc>
            <declaration name="VARIANCE" type="Variance" line="70"/>
            <javadoc line="70">
                variance                
            </javadoc>
            <declaration name="PERCENTILE" type="Percentile" line="73"/>
            <javadoc line="73">
                percentile                
            </javadoc>
            <declaration name="GEOMETRIC_MEAN" type="GeometricMean" line="76"/>
            <javadoc line="76">
                geometric mean                
            </javadoc>
            <javadoc line="79">
                Private Constructor                
            </javadoc>
            <method name="StatUtils" type="constructor" line="82"/>
            <javadoc line="85">
                Returns the sum of the values in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the input array
                  is null.&lt;/p&gt;                
                <param>
                    values  array of values to sum                    
                </param>
                <return>
                    the sum of the values or &lt;code&gt;Double.NaN&lt;/code&gt; if the array
                      is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="sum" type="double" line="98">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="102">
                Returns the sum of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the sum of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="sum" type="double" line="117">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="121">
                Returns the sum of the squares of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values  input array                    
                </param>
                <return>
                    the sum of the squared values or &lt;code&gt;Double.NaN&lt;/code&gt; if the
                      array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="sumSq" type="double" line="132">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="136">
                Returns the sum of the squares of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the sum of the squares of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="sumSq" type="double" line="151">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="155">
                Returns the product of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the product of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="product" type="double" line="166">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="170">
                Returns the product of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the product of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="product" type="double" line="185">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="189">
                Returns the sum of the natural logs of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.summary.SumOfLogs}.
                  &lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the sum of the natural logs of the values or Double.NaN if
                      the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="sumLog" type="double" line="204">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="208">
                Returns the sum of the natural logs of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.summary.SumOfLogs}.
                  &lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the sum of the natural logs of the values or Double.NaN if
                      length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="sumLog" type="double" line="227">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="231">
                Returns the arithmetic mean of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Mean} for
                  details on the computing algorithm.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the mean of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="mean" type="double" line="245">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="249">
                Returns the arithmetic mean of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Mean} for
                  details on the computing algorithm.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the mean of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="mean" type="double" line="267">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="271">
                Returns the geometric mean of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.GeometricMean}for details on the computing algorithm.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the geometric mean of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="geometricMean" type="double" line="285">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="289">
                Returns the geometric mean of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.GeometricMean}for details on the computing algorithm.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the geometric mean of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="geometricMean" type="double" line="307">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="312">
                Returns the variance of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #populationVariance(double[])} for the non-bias-corrected
                  population variance.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the variance of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="variance" type="double" line="331">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="335">
                Returns the variance of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #populationVariance(double[],int,int)} for the non-bias-corrected
                  population variance.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
                  array index parameters are not valid.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="variance" type="double" line="360">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="364">
                Returns the variance of the entries in the specified portion of
                  the input array, using the precomputed mean value.  Returns
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #populationVariance(double[],double,int,int)} for the non-bias-corrected
                  population variance.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
                  array index parameters are not valid.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="variance" type="double" line="395">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="399">
                Returns the variance of the entries in the input array, using the
                  precomputed mean value.  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if the array
                  is empty.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #populationVariance(double[],double)} for the non-bias-corrected
                  population variance.&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <return>
                    the variance of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="variance" type="double" line="426">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                </params>
            </method>
            <javadoc line="430">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the formula and computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the population variance of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="populationVariance" type="double" line="447">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="451">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
                  array index parameters are not valid.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the population variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="populationVariance" type="double" line="473">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="477">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the entries in the specified portion of
                  the input array, using the precomputed mean value.  Returns
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
                  array index parameters are not valid.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the population variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="populationVariance" type="double" line="505">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="509">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the entries in the input array, using the
                  precomputed mean value.  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if the array
                  is empty.
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
                  details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <return>
                    the population variance of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="populationVariance" type="double" line="533">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                </params>
            </method>
            <javadoc line="537">
                Returns the maximum of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                  (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                  &lt;li&gt;If any of the values equals &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,
                  the result is &lt;code&gt;Double.POSITIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the maximum of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="max" type="double" line="554">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="558">
                Returns the maximum of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or
                  the array index parameters are not valid.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                  (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                  &lt;li&gt;If any of the values equals &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,
                  the result is &lt;code&gt;Double.POSITIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the maximum of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="max" type="double" line="581">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="585">
                Returns the minimum of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                  (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                  &lt;li&gt;If any of the values equals &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt;,
                  the result is &lt;code&gt;Double.NEGATIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt; &lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the minimum of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="min" type="double" line="602">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="606">
                Returns the minimum of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or
                  the array index parameters are not valid.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
                  (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
                  &lt;li&gt;If any of the values equals &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt;,
                  the result is &lt;code&gt;Double.NEGATIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the minimum of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="min" type="double" line="629">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="633">
                Returns an estimate of the &lt;code&gt;p&lt;/code&gt;th percentile of the values
                  in the &lt;code&gt;values&lt;/code&gt; array.
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Returns &lt;code&gt;Double.NaN&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt; has length
                  &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;&lt;/p&gt;
                  &lt;li&gt;Returns (for any value of &lt;code&gt;p&lt;/code&gt;) &lt;code&gt;values[0]&lt;/code&gt;
                  if &lt;code&gt;values&lt;/code&gt; has length &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt;
                  is null  or p is not a valid quantile value (p must be greater than 0
                  and less than or equal to 100)&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.rank.Percentile} for
                  a description of the percentile estimation algorithm used.&lt;/p&gt;                
                <param>
                    values input array of values                    
                </param>
                <param>
                    p the percentile value to compute                    
                </param>
                <return>
                    the percentile value or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if &lt;code&gt;values&lt;/code&gt; is null
                      or p is invalid                    
                </throws>
            </javadoc>
            <method name="percentile" type="double" line="657">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="661">
                Returns an estimate of the &lt;code&gt;p&lt;/code&gt;th percentile of the values
                  in the &lt;code&gt;values&lt;/code&gt; array, starting with the element in (0-based)
                  position &lt;code&gt;begin&lt;/code&gt; in the array and including &lt;code&gt;length&lt;/code&gt;
                  values.
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Returns &lt;code&gt;Double.NaN&lt;/code&gt; if &lt;code&gt;length = 0&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;Returns (for any value of &lt;code&gt;p&lt;/code&gt;) &lt;code&gt;values[begin]&lt;/code&gt;
                  if &lt;code&gt;length = 1 &lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt;
                  is null , &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; is invalid, or
                  &lt;code&gt;p&lt;/code&gt; is not a valid quantile value (p must be greater than 0
                  and less than or equal to 100)&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  See {@link org.apache.commons.math3.stat.descriptive.rank.Percentile} for
                  a description of the percentile estimation algorithm used.&lt;/p&gt;                
                <param>
                    values array of input values                    
                </param>
                <param>
                    p  the percentile to compute                    
                </param>
                <param>
                    begin  the first (0-based) element to include in the computation                    
                </param>
                <param>
                    length  the number of array elements to include                    
                </param>
                <return>
                    the percentile value                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid or the
                      input array is null                    
                </throws>
            </javadoc>
            <method name="percentile" type="double" line="689">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="693">
                Returns the sum of the (signed) differences between corresponding elements of the
                  input arrays -- i.e., sum(sample1[i] - sample2[i]).                
                <param>
                    sample1  the first array                    
                </param>
                <param>
                    sample2  the second array                    
                </param>
                <return>
                    sum of paired differences                    
                </return>
                <throws>
                    DimensionMismatchException if the arrays do not have the same
                      (positive) length.                    
                </throws>
                <throws>
                    NoDataException if the sample arrays are empty.                    
                </throws>
            </javadoc>
            <method name="sumDifference" type="double" line="705">
                <params>
                    <param name="sample1" type="double[]"/>
                    <param name="sample2" type="double[]"/>
                </params>
                <declaration name="n" type="int" line="706"/>
                <scope line="707"/>
                <scope line="710"/>
                <declaration name="result" type="double" line="713"/>
                <scope line="714"/>
            </method>
            <javadoc line="720">
                Returns the mean of the (signed) differences between corresponding elements of the
                  input arrays -- i.e., sum(sample1[i] - sample2[i]) / sample1.length.                
                <param>
                    sample1  the first array                    
                </param>
                <param>
                    sample2  the second array                    
                </param>
                <return>
                    mean of paired differences                    
                </return>
                <throws>
                    DimensionMismatchException if the arrays do not have the same
                      (positive) length.                    
                </throws>
                <throws>
                    NoDataException if the sample arrays are empty.                    
                </throws>
            </javadoc>
            <method name="meanDifference" type="double" line="732">
                <params>
                    <param name="sample1" type="double[]"/>
                    <param name="sample2" type="double[]"/>
                </params>
            </method>
            <javadoc line="736">
                Returns the variance of the (signed) differences between corresponding elements of the
                  input arrays -- i.e., var(sample1[i] - sample2[i]).                
                <param>
                    sample1  the first array                    
                </param>
                <param>
                    sample2  the second array                    
                </param>
                <param>
                    meanDifference   the mean difference between corresponding entries                    
                </param>
                <see>
                    #meanDifference(double[],double[])                    
                </see>
                <return>
                    variance of paired differences                    
                </return>
                <throws>
                    DimensionMismatchException if the arrays do not have the same
                      length.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the arrays length is less than 2.                    
                </throws>
            </javadoc>
            <method name="varianceDifference" type="double" line="751">
                <params>
                    <param name="sample1" type="double[]"/>
                    <param name="sample2" type="double[]"/>
                    <param name="meanDifference" type="double"/>
                </params>
                <declaration name="sum1" type="double" line="752"/>
                <declaration name="sum2" type="double" line="753"/>
                <declaration name="diff" type="double" line="754"/>
                <declaration name="n" type="int" line="755"/>
                <scope line="756"/>
                <scope line="759"/>
                <scope line="762"/>
            </method>
            <javadoc line="770">
                Normalize (standardize) the sample, so it is has a mean of 0 and a standard deviation of 1.                
                <param>
                    sample Sample to normalize.                    
                </param>
                <return>
                    normalized (standardized) sample.                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="normalize" type="double[]" line="777">
                <params>
                    <param name="sample" type="double[]"/>
                </params>
                <comment line="781">
                    Add the data from the series to stats                    
                </comment>
                <comment line="786">
                    Compute mean and standard deviation                    
                </comment>
                <comment line="790">
                    initialize the standardizedSample, which has the same length as the sample                    
                </comment>
                <comment line="794">
                    z = (x- mean)/standardDeviation                    
                </comment>
                <declaration name="stats" type="DescriptiveStatistics" line="778"/>
                <scope line="781"/>
                <declaration name="mean" type="double" line="786"/>
                <declaration name="standardDeviation" type="double" line="787"/>
                <declaration name="standardizedSample" type="double[]" line="790"/>
                <scope line="792"/>
            </method>
            <javadoc line="799">
                Returns the sample mode(s).  The mode is the most frequently occurring
                  value in the sample. If there is a unique value with maximum frequency,
                  this value is returned as the only element of the output array. Otherwise,
                  the returned array contains the maximum frequency elements in increasing
                  order.  For example, if {@code sample} is {0, 12, 5, 6, 0, 13, 5, 17},
                  the returned array will have length two, with 0 in the first element and
                  5 in the second.
                  &lt;p&gt;NaN values are ignored when computing the mode - i.e., NaNs will never
                  appear in the output array.  If the sample includes only NaNs or has
                  length 0, an empty array is returned.&lt;/p&gt;                
                <param>
                    sample input data                    
                </param>
                <return>
                    array of array of the most frequently occurring element(s) sorted in ascending order.                    
                </return>
                <throws>
                    MathIllegalArgumentException if the indices are invalid or the array is null                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="mode" type="double[]" line="817">
                <params>
                    <param name="sample" type="double[]"/>
                </params>
                <scope line="818"/>
            </method>
            <javadoc line="824">
                Returns the sample mode(s).  The mode is the most frequently occurring
                  value in the sample. If there is a unique value with maximum frequency,
                  this value is returned as the only element of the output array. Otherwise,
                  the returned array contains the maximum frequency elements in increasing
                  order.  For example, if {@code sample} is {0, 12, 5, 6, 0, 13, 5, 17},
                  the returned array will have length two, with 0 in the first element and
                  5 in the second.
                  &lt;p&gt;NaN values are ignored when computing the mode - i.e., NaNs will never
                  appear in the output array.  If the sample includes only NaNs or has
                  length 0, an empty array is returned.&lt;/p&gt;                
                <param>
                    sample input data                    
                </param>
                <param>
                    begin index (0-based) of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    array of array of the most frequently occurring element(s) sorted in ascending order.                    
                </return>
                <throws>
                    MathIllegalArgumentException if the indices are invalid or the array is null                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="mode" type="double[]" line="845">
                <params>
                    <param name="sample" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="846"/>
                <scope line="850"/>
                <scope line="854"/>
            </method>
            <javadoc line="861">
                Private helper method.
                  Assumes parameters have been validated.                
                <param>
                    values input data                    
                </param>
                <param>
                    begin index (0-based) of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    array of array of the most frequently occurring element(s) sorted in ascending order.                    
                </return>
            </javadoc>
            <method name="getMode" type="double[]" line="869">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="871">
                    Add the values to the frequency table                    
                </comment>
                <comment line="880">
                    Convert the list to an array of primitive double                    
                </comment>
                <declaration name="freq" type="Frequency" line="871"/>
                <scope line="872">
                    <declaration name="value" type="double" line="873"/>
                    <scope line="874"/>
                </scope>
                <declaration name="list" type="List&amp;lt;Comparable&amp;lt;?&amp;gt;&amp;gt;" line="878"/>
                <declaration name="modes" type="double[]" line="880"/>
                <declaration name="i" type="int" line="881"/>
                <scope line="882"/>
            </method>
        </class>
    </source>