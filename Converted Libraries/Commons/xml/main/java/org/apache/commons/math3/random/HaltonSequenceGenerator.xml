<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="HaltonSequenceGenerator" line="25">
            <implements interface="RandomVectorGenerator"/>
            <javadoc line="25">
                Implementation of a Halton sequence.
                  &lt;p&gt;
                  A Halton sequence is a low-discrepancy sequence generating points in the interval [0, 1] according to
                  &lt;pre&gt;
                  H(n) = d_0 / b + d_1 / b^2 .... d_j / b^j+1
                  with
                  n = d_j  b^j-1 + ... d_1  b + d_0  b^0
                  &lt;/pre&gt;
                  For higher dimensions, subsequent prime numbers are used as base, e.g. { 2, 3, 5 } for a Halton sequence in R^3.
                  &lt;p&gt;
                  Halton sequences are known to suffer from linear correlation for larger prime numbers, thus the individual digits
                  are usually scrambled. This implementation already comes with support for up to 40 dimensions with optimal weight
                  numbers from &lt;a href=&quot;http://etd.lib.fsu.edu/theses/available/etd-07062004-140409/unrestricted/dissertation1.pdf&quot;&gt;
                  H. Chi: Scrambled quasirandom sequences and their applications&lt;/a&gt;.
                  &lt;p&gt;
                  The generator supports two modes:
                  &lt;ul&gt;
                  &lt;li&gt;sequential generation of points: {@link #nextVector()}&lt;/li&gt;
                  &lt;li&gt;random access to the i-th point in the sequence: {@link #skipTo(int)}&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Halton_sequence&quot;&gt;Halton sequence (Wikipedia)&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;https://lirias.kuleuven.be/bitstream/123456789/131168/1/mcm2005_bartv.pdf&quot;&gt;
                      On the Halton sequence and its scramblings&lt;/a&gt;                    
                </see>
                <version>
                    $Id: HaltonSequenceGenerator.java 1512043 2013-08-08 21:27:57Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="PRIMES" type="int[]" line="57"/>
            <javadoc line="57">
                The first 40 primes.                
            </javadoc>
            <declaration name="WEIGHTS" type="int[]" line="64"/>
            <javadoc line="64">
                The optimal weights used for scrambling of the first 40 dimension.                
            </javadoc>
            <declaration name="dimension" type="int" line="71"/>
            <javadoc line="71">
                Space dimension.                
            </javadoc>
            <declaration name="count" type="int" line="74"/>
            <javadoc line="74">
                The current index in the sequence.                
            </javadoc>
            <declaration name="base" type="int[]" line="77"/>
            <javadoc line="77">
                The base numbers for each component.                
            </javadoc>
            <declaration name="weight" type="int[]" line="80"/>
            <javadoc line="80">
                The scrambling weights for each component.                
            </javadoc>
            <javadoc line="83">
                Construct a new Halton sequence generator for the given space dimension.                
                <param>
                    dimension the space dimension                    
                </param>
                <throws>
                    OutOfRangeException if the space dimension is outside the allowed range of [1, 40]                    
                </throws>
            </javadoc>
            <method name="HaltonSequenceGenerator" type="constructor" line="89">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="93">
                Construct a new Halton sequence generator with the given base numbers and weights for each dimension.
                  The length of the bases array defines the space dimension and is required to be &amp;gt; 0.                
                <param>
                    dimension the space dimension                    
                </param>
                <param>
                    bases the base number for each dimension, entries should be (pairwise) prime, may not be null                    
                </param>
                <param>
                    weights the weights used during scrambling, may be null in which case no scrambling will be performed                    
                </param>
                <throws>
                    NullArgumentException if base is null                    
                </throws>
                <throws>
                    OutOfRangeException if the space dimension is outside the range [1, len], where
                      len refers to the length of the bases array                    
                </throws>
                <throws>
                    DimensionMismatchException if weights is non-null and the length of the input arrays differ                    
                </throws>
            </javadoc>
            <method name="HaltonSequenceGenerator" type="constructor" line="106">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="bases" type="int[]"/>
                    <param name="weights" type="int[]"/>
                </params>
                <scope line="110"/>
                <scope line="114"/>
            </method>
            <javadoc line="124">
                {@inheritDoc}                
            </javadoc>
            <method name="nextVector" type="double[]" line="125">
                <comment line="136">
                    floor( index / base )                    
                </comment>
                <declaration name="v" type="double[]" line="126"/>
                <scope line="127">
                    <declaration name="index" type="int" line="128"/>
                    <declaration name="f" type="double" line="129"/>
                    <declaration name="j" type="int" line="131"/>
                    <scope line="132">
                        <declaration name="digit" type="int" line="133"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="143">
                Performs scrambling of digit {@code d_j} according to the formula:
                  &lt;pre&gt;
                  ( weight_i  d_j ) mod base
                  &lt;/pre&gt;
                  Implementations can override this method to do a different scrambling.                
                <param>
                    i the dimension index                    
                </param>
                <param>
                    j the digit index                    
                </param>
                <param>
                    b the base for this dimension                    
                </param>
                <param>
                    digit the j-th digit                    
                </param>
                <return>
                    the scrambled digit                    
                </return>
            </javadoc>
            <method name="scramble" type="int" line="156">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                    <param name="b" type="int"/>
                    <param name="digit" type="int"/>
                </params>
            </method>
            <javadoc line="160">
                Skip to the i-th point in the Halton sequence.
                  &lt;p&gt;
                  This operation can be performed in O(1).                
                <param>
                    index the index in the sequence to skip to                    
                </param>
                <return>
                    the i-th point in the Halton sequence                    
                </return>
                <throws>
                    NotPositiveException if index &amp;lt; 0                    
                </throws>
            </javadoc>
            <method name="skipTo" type="double[]" line="169">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="174">
                Returns the index i of the next point in the Halton sequence that will be returned
                  by calling {@link #nextVector()}.                
                <return>
                    the index of the next point                    
                </return>
            </javadoc>
            <method name="getNextIndex" type="int" line="180"/>
        </class>
    </source>