<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.genetics">
        <class name="Chromosome" line="19">
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Chromosome"/>
                </type_params>
            </implements>
            <implements interface="Fitness"/>
            <javadoc line="19">
                Individual in a population. Chromosomes are compared based on their fitness.
                  &lt;p&gt;
                  The chromosomes are IMMUTABLE, and so their fitness is also immutable and
                  therefore it can be cached.                
                <since>
                    2.0                    
                </since>
                <version>
                    $Id: Chromosome.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="NO_FITNESS" type="double" line="29"/>
            <javadoc line="29">
                Value assigned when no fitness has been computed yet.                
            </javadoc>
            <declaration name="fitness" type="double" line="32"/>
            <javadoc line="32">
                Cached value of the fitness of this chromosome.                
            </javadoc>
            <javadoc line="35">
                Access the fitness of this chromosome. The bigger the fitness, the better the chromosome.
                  &lt;p&gt;
                  Computation of fitness is usually very time-consuming task, therefore the fitness is cached.                
                <return>
                    the fitness                    
                </return>
            </javadoc>
            <method name="getFitness" type="double" line="42">
                <comment line="45">
                    no cache - compute the fitness                    
                </comment>
                <scope line="43"/>
            </method>
            <javadoc line="50">
                Compares two chromosomes based on their fitness. The bigger the fitness, the better the chromosome.                
                <param>
                    another another chromosome to compare                    
                </param>
                <return>
                    <ul>
                      <li>-1 if <code>another</code> is better than <code>this</code></li>
                      <li>1 if <code>another</code> is worse than <code>this</code></li>
                      <li>0 if the two chromosomes have the same fitness</li>
                      </ul>                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="61">
                <params>
                    <param name="another" type="Chromosome"/>
                </params>
            </method>
            <javadoc line="65">
                Returns &lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;another&lt;/code&gt; has the same representation and therefore the same fitness. By
                  default, it returns false -- override it in your implementation if you need it.                
                <param>
                    another chromosome to compare                    
                </param>
                <return>
                    true if <code>another</code> is equivalent to this chromosome                    
                </return>
            </javadoc>
            <method name="isSame" type="boolean" line="72">
                <params>
                    <param name="another" type="Chromosome"/>
                </params>
            </method>
            <javadoc line="76">
                Searches the &lt;code&gt;population&lt;/code&gt; for another chromosome with the same representation. If such chromosome is
                  found, it is returned, if no such chromosome exists, returns &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    population Population to search                    
                </param>
                <return>
                    Chromosome with the same representation, or <code>null</code> if no such chromosome exists.                    
                </return>
            </javadoc>
            <method name="findSameChromosome" type="Chromosome" line="83">
                <params>
                    <param name="population" type="Population"/>
                </params>
                <scope line="84">
                    <scope line="85"/>
                </scope>
            </method>
            <javadoc line="92">
                Searches the population for a chromosome representing the same solution, and if it finds one,
                  updates the fitness to its value.                
                <param>
                    population Population to search                    
                </param>
            </javadoc>
            <method name="searchForFitnessUpdate" type="void" line="98">
                <params>
                    <param name="population" type="Population"/>
                </params>
                <declaration name="sameChromosome" type="Chromosome" line="99"/>
                <scope line="100"/>
            </method>
        </class>
    </source>