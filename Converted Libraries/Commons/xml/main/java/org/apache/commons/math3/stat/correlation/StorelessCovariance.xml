<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.correlation">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <class name="StorelessCovariance" line="7">
            <extends class="Covariance"/>
            <javadoc line="7">
                Covariance implementation that does not require input data to be
                  stored in memory. The size of the covariance matrix is specified in the
                  constructor. Specific elements of the matrix are incrementally updated with
                  calls to incrementRow() or increment Covariance().
                  &lt;p&gt;This class is based on a paper written by Philippe P&amp;eacute;bay:
                  &lt;a href=&quot;http://prod.sandia.gov/techlib/access-control.cgi/2008/086212.pdf&quot;&gt;
                  Formulas for Robust, One-Pass Parallel Computation of Covariances and
                  Arbitrary-Order Statistical Moments&lt;/a&gt;, 2008, Technical Report SAND2008-6212,
                  Sandia National Laboratories.&lt;/p&gt;
                  &lt;p&gt;Note: the underlying covariance matrix is symmetric, thus only the
                  upper triangular part of the matrix is stored and updated each increment.&lt;/p&gt;                
                <version>
                    $Id: StorelessCovariance.java 1410238 2012-11-16 07:58:49Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="covMatrix" type="StorelessBivariateCovariance[]" line="23"/>
            <javadoc line="23">
                the square covariance matrix (upper triangular part)                
            </javadoc>
            <declaration name="dimension" type="int" line="27"/>
            <javadoc line="27">
                dimension of the square covariance matrix                
            </javadoc>
            <javadoc line="31">
                Create a bias corrected covariance matrix with a given dimension.                
                <param>
                    dim the dimension of the square covariance matrix                    
                </param>
            </javadoc>
            <method name="StorelessCovariance" type="constructor" line="35">
                <params>
                    <param name="dim" type="int"/>
                </params>
            </method>
            <javadoc line="38">
                Create a covariance matrix with a given number of rows and columns and the
                  indicated bias correction.                
                <param>
                    dim the dimension of the covariance matrix                    
                </param>
                <param>
                    biasCorrected if <code>true</code> the covariance estimate is corrected
                      for bias, i.e. n-1 in the denominator, otherwise there is no bias correction,
                      i.e. n in the denominator.                    
                </param>
            </javadoc>
            <method name="StorelessCovariance" type="constructor" line="46">
                <params>
                    <param name="dim" type="int"/>
                    <param name="biasCorrected" type="boolean"/>
                </params>
            </method>
            <javadoc line="51">
                Initialize the internal two-dimensional array of{@link StorelessBivariateCovariance} instances.                
                <param>
                    biasCorrected if the covariance estimate shall be corrected for bias                    
                </param>
            </javadoc>
            <method name="initializeMatrix" type="void" line="55">
                <params>
                    <param name="biasCorrected" type="boolean"/>
                </params>
                <scope line="56">
                    <scope line="57"/>
                </scope>
            </method>
            <javadoc line="62">
                Returns the index (i, j) translated into the one-dimensional
                  array used to store the upper triangular part of the symmetric
                  covariance matrix.                
                <param>
                    i the row index                    
                </param>
                <param>
                    j the column index                    
                </param>
                <return>
                    the corresponding index in the matrix array                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="70">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <javadoc line="73">
                Gets the element at index (i, j) from the covariance matrix                
                <param>
                    i the row index                    
                </param>
                <param>
                    j the column index                    
                </param>
                <return>
                    the {@link StorelessBivariateCovariance} element at the given index                    
                </return>
            </javadoc>
            <method name="getElement" type="StorelessBivariateCovariance" line="79">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <javadoc line="82">
                Sets the covariance element at index (i, j) in the covariance matrix                
                <param>
                    i the row index                    
                </param>
                <param>
                    j the column index                    
                </param>
                <param>
                    cov the {@link StorelessBivariateCovariance} element to be set                    
                </param>
            </javadoc>
            <method name="setElement" type="void" line="88">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                    <param name="cov" type="StorelessBivariateCovariance"/>
                </params>
            </method>
            <javadoc line="91">
                Get the covariance for an individual element of the covariance matrix.                
                <param>
                    xIndex row index in the covariance matrix                    
                </param>
                <param>
                    yIndex column index in the covariance matrix                    
                </param>
                <return>
                    the covariance of the given element                    
                </return>
                <throws>
                    NumberIsTooSmallException if the number of observations
                      in the cell is &lt; 2                    
                </throws>
            </javadoc>
            <method name="getCovariance" type="double" line="99">
                <params>
                    <param name="xIndex" type="int"/>
                    <param name="yIndex" type="int"/>
                </params>
            </method>
            <javadoc line="102">
                Increment the covariance matrix with one row of data.                
                <param>
                    data array representing one row of data.                    
                </param>
                <throws>
                    DimensionMismatchException if the length of <code>rowData</code>
                      does not match with the covariance matrix                    
                </throws>
            </javadoc>
            <method name="increment" type="void" line="108">
                <params>
                    <param name="data" type="double[]"/>
                </params>
                <declaration name="length" type="int" line="109"/>
                <scope line="110"/>
                <scope line="113">
                    <scope line="114"/>
                </scope>
            </method>
            <javadoc line="119">
                {@inheritDoc}                
                <throws>
                    NumberIsTooSmallException if the number of observations
                      in a cell is &lt; 2                    
                </throws>
            </javadoc>
            <method name="getCovarianceMatrix" type="RealMatrix" line="124"/>
            <javadoc line="127">
                Return the covariance matrix as two-dimensional array.                
                <return>
                    a two-dimensional double array of covariance values                    
                </return>
                <throws>
                    NumberIsTooSmallException if the number of observations
                      for a cell is &lt; 2                    
                </throws>
            </javadoc>
            <method name="getData" type="double[][]" line="133">
                <declaration name="data" type="double[][]" line="134"/>
                <scope line="135">
                    <scope line="136"/>
                </scope>
            </method>
            <javadoc line="142">
                This {@link Covariance} method is not supported by a {@link StorelessCovariance},
                  since the number of bivariate observations does not have to be the same for different
                  pairs of covariates - i.e., N as defined in {@link Covariance#getN()} is undefined.                
                <return>
                    nothing as this implementation always throws a{@link MathUnsupportedOperationException}                    
                </return>
                <throws>
                    MathUnsupportedOperationException in all cases                    
                </throws>
            </javadoc>
            <method name="getN" type="int" line="149"/>
        </class>
    </source>