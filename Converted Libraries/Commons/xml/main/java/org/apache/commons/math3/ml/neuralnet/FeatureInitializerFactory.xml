<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet">
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.distribution.UniformRealDistribution"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Constant"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <class name="FeatureInitializerFactory" line="26">
            <javadoc line="26">
                Creates functions that will select the initial values of a neuron&apos;s
                  features.                
                <version>
                    $Id: FeatureInitializerFactory.java 1566092 2014-02-08 18:48:29Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <javadoc line="34">
                Class contains only static methods.                
            </javadoc>
            <method name="FeatureInitializerFactory" type="constructor" line="35"/>
            <javadoc line="37">
                Uniform sampling of the given range.                
                <param>
                    min Lower bound of the range.                    
                </param>
                <param>
                    max Upper bound of the range.                    
                </param>
                <param>
                    rng Random number generator used to draw samples from a
                      uniform distribution.                    
                </param>
                <return>
                    an initializer such that the features will be initialized with
                      values within the given range.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.NumberIsTooLargeExceptionif {@code min &gt;= max}.                    
                </throws>
            </javadoc>
            <method name="uniform" type="FeatureInitializer" line="51">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
            </method>
            <javadoc line="56">
                Uniform sampling of the given range.                
                <param>
                    min Lower bound of the range.                    
                </param>
                <param>
                    max Upper bound of the range.                    
                </param>
                <return>
                    an initializer such that the features will be initialized with
                      values within the given range.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.NumberIsTooLargeExceptionif {@code min &gt;= max}.                    
                </throws>
            </javadoc>
            <method name="uniform" type="FeatureInitializer" line="67">
                <params>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
            </method>
            <javadoc line="72">
                Creates an initializer from a univariate function {@code f(x)}.
                  The argument {@code x} is set to {@code init} at the first call
                  and will be incremented at each call.                
                <param>
                    f Function.                    
                </param>
                <param>
                    init Initial value.                    
                </param>
                <param>
                    inc Increment                    
                </param>
                <return>
                    the initializer.                    
                </return>
            </javadoc>
            <method name="function" type="FeatureInitializer" line="84">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="init" type="double"/>
                    <param name="inc" type="double"/>
                </params>
                <anonymous_class line="85">
                    <declaration name="arg" type="double" line="86"/>
                    <javadoc line="86">
                        Argument.                        
                    </javadoc>
                    <javadoc line="89">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="90">
                        <declaration name="result" type="double" line="91"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="98">
                Adds some amount of random data to the given initializer.                
                <param>
                    random Random variable distribution.                    
                </param>
                <param>
                    orig Original initializer.                    
                </param>
                <return>
                    an initializer whose {@link FeatureInitializer#value() value}method will return {@code orig.value() + random.sample()}.                    
                </return>
            </javadoc>
            <method name="randomize" type="FeatureInitializer" line="107">
                <params>
                    <param name="random" type="RealDistribution"/>
                    <param name="orig" type="FeatureInitializer"/>
                </params>
                <anonymous_class line="108">
                    <javadoc line="109">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="110"/>
                </anonymous_class>
            </method>
        </class>
    </source>