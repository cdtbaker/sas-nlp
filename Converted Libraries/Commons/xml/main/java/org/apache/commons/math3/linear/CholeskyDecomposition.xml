<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="CholeskyDecomposition" line="24">
            <javadoc line="24">
                Calculates the Cholesky decomposition of a matrix.
                  &lt;p&gt;The Cholesky decomposition of a real symmetric positive-definite
                  matrix A consists of a lower triangular matrix L with same size such
                  that: A = LL&lt;sup&gt;T&lt;/sup&gt;. In a sense, this is the square root of A.&lt;/p&gt;
                  &lt;p&gt;This class is based on the class with similar name from the
                  &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; library, with the
                  following changes:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;a {@link #getLT() getLT} method has been added,&lt;/li&gt;
                  &lt;li&gt;the {@code isspd} method has been removed, since the constructor of
                  this class throws a {@link NonPositiveDefiniteMatrixException} when a
                  matrix cannot be decomposed,&lt;/li&gt;
                  &lt;li&gt;a {@link #getDeterminant() getDeterminant} method has been added,&lt;/li&gt;
                  &lt;li&gt;the {@code solve} method has been replaced by a {@link #getSolver()getSolver} method and the equivalent method provided by the returned{@link DecompositionSolver}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/CholeskyDecomposition.html&quot;&gt;MathWorld&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Cholesky_decomposition&quot;&gt;Wikipedia&lt;/a&gt;                    
                </see>
                <version>
                    $Id: CholeskyDecomposition.java 1566017 2014-02-08 14:13:34Z tn $                    
                </version>
                <since>
                    2.0 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_RELATIVE_SYMMETRY_THRESHOLD" type="double" line="49"/>
            <javadoc line="49">
                Default threshold above which off-diagonal elements are considered too different
                  and matrix not symmetric.                
            </javadoc>
            <declaration name="DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD" type="double" line="54"/>
            <javadoc line="54">
                Default threshold below which diagonal elements are considered null
                  and matrix not positive definite.                
            </javadoc>
            <declaration name="lTData" type="double[][]" line="59"/>
            <javadoc line="59">
                Row-oriented storage for L&lt;sup&gt;T&lt;/sup&gt; matrix data.                
            </javadoc>
            <declaration name="cachedL" type="RealMatrix" line="61"/>
            <javadoc line="61">
                Cached value of L.                
            </javadoc>
            <declaration name="cachedLT" type="RealMatrix" line="63"/>
            <javadoc line="63">
                Cached value of LT.                
            </javadoc>
            <javadoc line="66">
                Calculates the Cholesky decomposition of the given matrix.
                  &lt;p&gt;
                  Calling this constructor is equivalent to call {@link #CholeskyDecomposition(RealMatrix,double,double)} with the
                  thresholds set to the default values {@link #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD} and {@link #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD}&lt;/p&gt;                
                <param>
                    matrix the matrix to decompose                    
                </param>
                <throws>
                    NonSquareMatrixException if the matrix is not square.                    
                </throws>
                <throws>
                    NonSymmetricMatrixException if the matrix is not symmetric.                    
                </throws>
                <throws>
                    NonPositiveDefiniteMatrixException if the matrix is not
                      strictly positive definite.                    
                </throws>
                <see>
                    #CholeskyDecomposition(RealMatrix,double,double)                    
                </see>
                <see>
                    #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD                    
                </see>
                <see>
                    #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD                    
                </see>
            </javadoc>
            <method name="CholeskyDecomposition" type="constructor" line="84">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="89">
                Calculates the Cholesky decomposition of the given matrix.                
                <param>
                    matrix the matrix to decompose                    
                </param>
                <param>
                    relativeSymmetryThreshold threshold above which off-diagonal
                      elements are considered too different and matrix not symmetric                    
                </param>
                <param>
                    absolutePositivityThreshold threshold below which diagonal
                      elements are considered null and matrix not positive definite                    
                </param>
                <throws>
                    NonSquareMatrixException if the matrix is not square.                    
                </throws>
                <throws>
                    NonSymmetricMatrixException if the matrix is not symmetric.                    
                </throws>
                <throws>
                    NonPositiveDefiniteMatrixException if the matrix is not
                      strictly positive definite.                    
                </throws>
                <see>
                    #CholeskyDecomposition(RealMatrix)                    
                </see>
                <see>
                    #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD                    
                </see>
                <see>
                    #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD                    
                </see>
            </javadoc>
            <method name="CholeskyDecomposition" type="constructor" line="106">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="relativeSymmetryThreshold" type="double"/>
                    <param name="absolutePositivityThreshold" type="double"/>
                </params>
                <comment line="118">
                    check the matrix before transformation                    
                </comment>
                <comment line="122">
                    check off-diagonal elements (and reset them to 0)                    
                </comment>
                <comment line="136">
                    transform the matrix                    
                </comment>
                <comment line="141">
                    check diagonal element                    
                </comment>
                <scope line="107"/>
                <declaration name="order" type="int" line="112"/>
                <scope line="118">
                    <declaration name="lI" type="double[]" line="119"/>
                    <scope line="122">
                        <declaration name="lJ" type="double[]" line="123"/>
                        <declaration name="lIJ" type="double" line="124"/>
                        <declaration name="lJI" type="double" line="125"/>
                        <declaration name="maxDelta" type="double" line="126"/>
                        <scope line="128"/>
                    </scope>
                </scope>
                <scope line="136">
                    <declaration name="ltI" type="double[]" line="138"/>
                    <scope line="141"/>
                    <declaration name="inverse" type="double" line="146"/>
                    <scope line="148">
                        <declaration name="ltQ" type="double[]" line="150"/>
                        <scope line="151"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="158">
                Returns the matrix L of the decomposition.
                  &lt;p&gt;L is an lower-triangular matrix&lt;/p&gt;                
                <return>
                    the L matrix                    
                </return>
            </javadoc>
            <method name="getL" type="RealMatrix" line="163">
                <scope line="164"/>
            </method>
            <javadoc line="170">
                Returns the transpose of the matrix L of the decomposition.
                  &lt;p&gt;L&lt;sup&gt;T&lt;/sup&gt; is an upper-triangular matrix&lt;/p&gt;                
                <return>
                    the transpose of the matrix L of the decomposition                    
                </return>
            </javadoc>
            <method name="getLT" type="RealMatrix" line="175">
                <comment line="182">
                    return the cached matrix                    
                </comment>
                <scope line="177"/>
            </method>
            <javadoc line="185">
                Return the determinant of the matrix                
                <return>
                    determinant of the matrix                    
                </return>
            </javadoc>
            <method name="getDeterminant" type="double" line="189">
                <declaration name="determinant" type="double" line="190"/>
                <scope line="191">
                    <declaration name="lTii" type="double" line="192"/>
                </scope>
            </method>
            <javadoc line="198">
                Get a solver for finding the A &amp;times; X = B solution in least square sense.                
                <return>
                    a solver                    
                </return>
            </javadoc>
            <method name="getSolver" type="DecompositionSolver" line="202"/>
            <class name="Solver" line="206">
                <implements interface="DecompositionSolver"/>
                <javadoc line="206">
                    Specialized solver.                    
                </javadoc>
                <declaration name="lTData" type="double[][]" line="208"/>
                <javadoc line="208">
                    Row-oriented storage for L&lt;sup&gt;T&lt;/sup&gt; matrix data.                    
                </javadoc>
                <javadoc line="211">
                    Build a solver from decomposed matrix.                    
                    <param>
                        lTData row-oriented storage for L&lt;sup&gt;T&lt;/sup&gt; matrix data                        
                    </param>
                </javadoc>
                <method name="Solver" type="constructor" line="215">
                    <params>
                        <param name="lTData" type="double[][]"/>
                    </params>
                </method>
                <javadoc line="219">
                    {@inheritDoc}                    
                </javadoc>
                <method name="isNonSingular" type="boolean" line="220">
                    <comment line="222">
                        if we get this far, the matrix was positive definite, hence non-singular                        
                    </comment>
                </method>
                <javadoc line="225">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="RealVector" line="226">
                    <params>
                        <param name="b" type="RealVector"/>
                    </params>
                    <comment line="235">
                        Solve LY = b                        
                    </comment>
                    <comment line="245">
                        Solve LTX = Y                        
                    </comment>
                    <declaration name="m" type="int" line="227"/>
                    <scope line="228"/>
                    <declaration name="x" type="double[]" line="232"/>
                    <scope line="235">
                        <declaration name="lJ" type="double[]" line="236"/>
                        <declaration name="xJ" type="double" line="238"/>
                        <scope line="239"/>
                    </scope>
                    <scope line="245">
                        <declaration name="xJ" type="double" line="247"/>
                        <scope line="248"/>
                    </scope>
                </method>
                <javadoc line="256">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="RealMatrix" line="257">
                    <params>
                        <param name="b" type="RealMatrix"/>
                    </params>
                    <comment line="267">
                        Solve LY = b                        
                    </comment>
                    <comment line="284">
                        Solve LTX = Y                        
                    </comment>
                    <declaration name="m" type="int" line="258"/>
                    <scope line="259"/>
                    <declaration name="nColB" type="int" line="263"/>
                    <declaration name="x" type="double[][]" line="264"/>
                    <scope line="267">
                        <declaration name="lJ" type="double[]" line="268"/>
                        <declaration name="lJJ" type="double" line="269"/>
                        <declaration name="xJ" type="double[]" line="270"/>
                        <scope line="271"/>
                        <scope line="274">
                            <declaration name="xI" type="double[]" line="275"/>
                            <declaration name="lJI" type="double" line="276"/>
                            <scope line="277"/>
                        </scope>
                    </scope>
                    <scope line="284">
                        <declaration name="lJJ" type="double" line="285"/>
                        <declaration name="xJ" type="double[]" line="286"/>
                        <scope line="287"/>
                        <scope line="290">
                            <declaration name="xI" type="double[]" line="291"/>
                            <declaration name="lIJ" type="double" line="292"/>
                            <scope line="293"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="302">
                    Get the inverse of the decomposed matrix.                    
                    <return>
                        the inverse matrix.                        
                    </return>
                </javadoc>
                <method name="getInverse" type="RealMatrix" line="307"/>
            </class>
        </class>
    </source>