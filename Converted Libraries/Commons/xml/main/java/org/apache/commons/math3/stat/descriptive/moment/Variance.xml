<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive.moment">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.WeightedEvaluation"/>
        <import package="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Variance" line="9">
            <extends class="AbstractStorelessUnivariateStatistic"/>
            <implements interface="Serializable"/>
            <implements interface="WeightedEvaluation"/>
            <javadoc line="9">
                Computes the variance of the available values.  By default, the unbiased
                  &quot;sample variance&quot; definitional formula is used:
                  &lt;p&gt;
                  variance = sum((x_i - mean)^2) / (n - 1) &lt;/p&gt;
                  &lt;p&gt;
                  where mean is the {@link Mean} and &lt;code&gt;n&lt;/code&gt; is the number
                  of sample observations.&lt;/p&gt;
                  &lt;p&gt;
                  The definitional formula does not have good numerical properties, so
                  this implementation does not compute the statistic using the definitional
                  formula. &lt;ul&gt;
                  &lt;li&gt; The &lt;code&gt;getResult&lt;/code&gt; method computes the variance using
                  updating formulas based on West&apos;s algorithm, as described in
                  &lt;a href=&quot;http://doi.acm.org/10.1145/359146.359152&quot;&gt; Chan, T. F. and
                  J. G. Lewis 1979, &lt;i&gt;Communications of the ACM&lt;/i&gt;,
                  vol. 22 no. 9, pp. 526-531.&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt; The &lt;code&gt;evaluate&lt;/code&gt; methods leverage the fact that they have the
                  full array of values in memory to execute a two-pass algorithm.
                  Specifically, these methods use the &quot;corrected two-pass algorithm&quot; from
                  Chan, Golub, Levesque, &lt;i&gt;Algorithms for Computing the Sample Variance&lt;/i&gt;,
                  American Statistician, vol. 37, no. 3 (1983) pp. 242-247.&lt;/li&gt;&lt;/ul&gt;
                  Note that adding values using &lt;code&gt;increment&lt;/code&gt; or
                  &lt;code&gt;incrementAll&lt;/code&gt; and then executing &lt;code&gt;getResult&lt;/code&gt; will
                  sometimes give a different, less accurate, result than executing
                  &lt;code&gt;evaluate&lt;/code&gt; with the full array of values. The former approach
                  should only be used when the full array of values is not available.&lt;/p&gt;
                  &lt;p&gt;
                  The &quot;population variance&quot;  ( sum((x_i - mean)^2) / n ) can also
                  be computed using this statistic.  The &lt;code&gt;isBiasCorrected&lt;/code&gt;
                  property determines whether the &quot;population&quot; or &quot;sample&quot; value is
                  returned by the &lt;code&gt;evaluate&lt;/code&gt; and &lt;code&gt;getResult&lt;/code&gt; methods.
                  To compute population variances, set this property to &lt;code&gt;false.&lt;/code&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
                  multiple threads access an instance of this class concurrently, and at least
                  one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
                  &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;                
                <version>
                    $Id: Variance.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <javadoc line="51">
                Serializable version identifier                
            </javadoc>
            <declaration name="moment" type="SecondMoment" line="55"/>
            <javadoc line="55">
                SecondMoment is used in incremental calculation of Variance                
            </javadoc>
            <declaration name="incMoment" type="boolean" line="59"/>
            <javadoc line="59">
                Whether or not {@link #increment(double)} should increment
                  the internal second moment. When a Variance is constructed with an
                  external SecondMoment as a constructor parameter, this property is
                  set to false and increments must be applied to the second moment
                  directly.                
            </javadoc>
            <declaration name="isBiasCorrected" type="boolean" line="67"/>
            <javadoc line="67">
                Whether or not bias correction is applied when computing the
                  value of the statistic. True means that bias is corrected.  See{@link Variance} for details on the formula.                
            </javadoc>
            <javadoc line="72">
                Constructs a Variance with default (true) &lt;code&gt;isBiasCorrected&lt;/code&gt;
                  property.                
            </javadoc>
            <method name="Variance" type="constructor" line="76"/>
            <javadoc line="79">
                Constructs a Variance based on an external second moment.
                  When this constructor is used, the statistic may only be
                  incremented via the moment, i.e., {@link #increment(double)}does nothing; whereas {@code m2.increment(value)} increments
                  both {@code m2} and the Variance instance constructed from it.                
                <param>
                    m2 the SecondMoment (Third or Fourth moments work
                      here as well.)                    
                </param>
            </javadoc>
            <method name="Variance" type="constructor" line="87">
                <params>
                    <param name="m2" type="SecondMoment"/>
                </params>
            </method>
            <javadoc line="91">
                Constructs a Variance with the specified &lt;code&gt;isBiasCorrected&lt;/code&gt;
                  property                
                <param>
                    isBiasCorrected  setting for bias correction - true means
                      bias will be corrected and is equivalent to using the argumentless
                      constructor                    
                </param>
            </javadoc>
            <method name="Variance" type="constructor" line="98">
                <params>
                    <param name="isBiasCorrected" type="boolean"/>
                </params>
            </method>
            <javadoc line="102">
                Constructs a Variance with the specified &lt;code&gt;isBiasCorrected&lt;/code&gt;
                  property and the supplied external second moment.                
                <param>
                    isBiasCorrected  setting for bias correction - true means
                      bias will be corrected                    
                </param>
                <param>
                    m2 the SecondMoment (Third or Fourth moments work
                      here as well.)                    
                </param>
            </javadoc>
            <method name="Variance" type="constructor" line="110">
                <params>
                    <param name="isBiasCorrected" type="boolean"/>
                    <param name="m2" type="SecondMoment"/>
                </params>
            </method>
            <javadoc line="115">
                Copy constructor, creates a new {@code Variance} identical
                  to the {@code original}                
                <param>
                    original the {@code Variance} instance to copy                    
                </param>
                <throws>
                    NullArgumentException if original is null                    
                </throws>
            </javadoc>
            <method name="Variance" type="constructor" line="121">
                <params>
                    <param name="original" type="Variance"/>
                </params>
            </method>
            <javadoc line="124">
                {@inheritDoc}&lt;p&gt;If all values are available, it is more accurate to use{@link #evaluate(double[])} rather than adding values one at a time
                  using this method and then executing {@link #getResult}, since
                  &lt;code&gt;evaluate&lt;/code&gt; leverages the fact that is has the full
                  list of values together to execute a two-pass algorithm.
                  See {@link Variance}.&lt;/p&gt;
                  &lt;p&gt;Note also that when {@link #Variance(SecondMoment)} is used to
                  create a Variance, this method does nothing. In that case, the
                  SecondMoment should be incremented directly.&lt;/p&gt;                
            </javadoc>
            <method name="increment" type="void" line="134">
                <params>
                    <param name="d" type="double"/>
                </params>
                <scope line="135"/>
            </method>
            <javadoc line="139">
                {@inheritDoc}                
            </javadoc>
            <method name="getResult" type="double" line="142">
                <scope line="143"/>
                <scope line="146"/>
                <scope line="149">
                    <scope line="150"/>
                    <scope line="153"/>
                </scope>
            </method>
            <javadoc line="158">
                {@inheritDoc}                
            </javadoc>
            <method name="getN" type="long" line="161"/>
            <javadoc line="164">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="167">
                <scope line="168"/>
            </method>
            <javadoc line="172">
                Returns the variance of the entries in the input array, or
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
                  &lt;p&gt;
                  See {@link Variance} for details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <return>
                    the variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="187">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <scope line="188"/>
            </method>
            <javadoc line="193">
                Returns the variance of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.
                  &lt;p&gt;
                  See {@link Variance} for details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="212">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="var" type="double" line="213"/>
                <scope line="214">
                    <scope line="216"/>
                    <scope line="219">
                        <declaration name="mean" type="Mean" line="220"/>
                        <declaration name="m" type="double" line="221"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="227">
                &lt;p&gt;Returns the weighted variance of the entries in the specified portion of
                  the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
                  is empty.&lt;/p&gt;
                  &lt;p&gt;
                  Uses the formula &lt;pre&gt;
                  &amp;Sigma;(weights[i](values[i] - weightedMean)&lt;sup&gt;2&lt;/sup&gt;)/(&amp;Sigma;(weights[i]) - 1)
                  &lt;/pre&gt;
                  where weightedMean is the weighted mean&lt;/p&gt;
                  &lt;p&gt;
                  This formula will not return the same result as the unweighted variance when all
                  weights are equal, unless all weights are equal to 1. The formula assumes that
                  weights are to be treated as &quot;expansion values,&quot; as will be the case if for example
                  the weights represent frequency counts. To normalize weights so that the denominator
                  in the variance computation equals the length of the input vector minus one, use &lt;pre&gt;
                  &lt;code&gt;evaluate(values, MathArrays.normalizeArray(weights, values.length)); &lt;/code&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if any of the following are true:
                  &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                  &lt;li&gt;the weights array is null&lt;/li&gt;
                  &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                  &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                  &lt;li&gt;the start and length arguments do not determine a valid array&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if either array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    weights the weights array                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the weighted variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="evaluate" type="double" line="268">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="weights" type="double[]"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="var" type="double" line="269"/>
                <scope line="270">
                    <scope line="272"/>
                    <scope line="275">
                        <declaration name="mean" type="Mean" line="276"/>
                        <declaration name="m" type="double" line="277"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="283">
                &lt;p&gt;
                  Returns the weighted variance of the entries in the the input array.&lt;/p&gt;
                  &lt;p&gt;
                  Uses the formula &lt;pre&gt;
                  &amp;Sigma;(weights[i](values[i] - weightedMean)&lt;sup&gt;2&lt;/sup&gt;)/(&amp;Sigma;(weights[i]) - 1)
                  &lt;/pre&gt;
                  where weightedMean is the weighted mean&lt;/p&gt;
                  &lt;p&gt;
                  This formula will not return the same result as the unweighted variance when all
                  weights are equal, unless all weights are equal to 1. The formula assumes that
                  weights are to be treated as &quot;expansion values,&quot; as will be the case if for example
                  the weights represent frequency counts. To normalize weights so that the denominator
                  in the variance computation equals the length of the input vector minus one, use &lt;pre&gt;
                  &lt;code&gt;evaluate(values, MathArrays.normalizeArray(weights, values.length)); &lt;/code&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                  &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                  &lt;li&gt;the weights array is null&lt;/li&gt;
                  &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                  &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if either array is null.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    weights the weights array                    
                </param>
                <return>
                    the weighted variance of the values                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="evaluate" type="double" line="320">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="weights" type="double[]"/>
                </params>
            </method>
            <javadoc line="323">
                Returns the variance of the entries in the specified portion of
                  the input array, using the precomputed mean value.  Returns
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
                  &lt;p&gt;
                  See {@link Variance} for details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the arithmetic
                  mean of the sample data, not a known population parameter.  This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null or the array index
                      parameters are not valid                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="348">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="var" type="double" line="349"/>
                <scope line="350">
                    <scope line="351"/>
                    <scope line="354">
                        <declaration name="accum" type="double" line="355"/>
                        <declaration name="dev" type="double" line="356"/>
                        <declaration name="accum2" type="double" line="357"/>
                        <scope line="358"/>
                        <declaration name="len" type="double" line="363"/>
                        <scope line="364"/>
                        <scope line="367"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="374">
                Returns the variance of the entries in the input array, using the
                  precomputed mean value.  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if the array
                  is empty.
                  &lt;p&gt;
                  See {@link Variance} for details on the computing algorithm.&lt;/p&gt;
                  &lt;p&gt;
                  If &lt;code&gt;isBiasCorrected&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; the formula used
                  assumes that the supplied mean value is the arithmetic mean of the
                  sample data, not a known population parameter.  If the mean is a known
                  population parameter, or if the &quot;population&quot; version of the variance is
                  desired, set &lt;code&gt;isBiasCorrected&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; before
                  invoking this method.&lt;/p&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    mean the precomputed mean value                    
                </param>
                <return>
                    the variance of the values or Double.NaN if the array is empty                    
                </return>
                <throws>
                    MathIllegalArgumentException if the array is null                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="398">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="mean" type="double"/>
                </params>
            </method>
            <javadoc line="401">
                Returns the weighted variance of the entries in the specified portion of
                  the input array, using the precomputed weighted mean value.  Returns
                  &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
                  &lt;p&gt;
                  Uses the formula &lt;pre&gt;
                  &amp;Sigma;(weights[i](values[i] - mean)&lt;sup&gt;2&lt;/sup&gt;)/(&amp;Sigma;(weights[i]) - 1)
                  &lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the weighted arithmetic
                  mean of the sample data, not a known population parameter. This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  This formula will not return the same result as the unweighted variance when all
                  weights are equal, unless all weights are equal to 1. The formula assumes that
                  weights are to be treated as &quot;expansion values,&quot; as will be the case if for example
                  the weights represent frequency counts. To normalize weights so that the denominator
                  in the variance computation equals the length of the input vector minus one, use &lt;pre&gt;
                  &lt;code&gt;evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); &lt;/code&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                  &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                  &lt;li&gt;the weights array is null&lt;/li&gt;
                  &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                  &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                  &lt;li&gt;the start and length arguments do not determine a valid array&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    weights the weights array                    
                </param>
                <param>
                    mean the precomputed weighted mean value                    
                </param>
                <param>
                    begin index of the first array element to include                    
                </param>
                <param>
                    length the number of elements to include                    
                </param>
                <return>
                    the variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="evaluate" type="double" line="445">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="weights" type="double[]"/>
                    <param name="mean" type="double"/>
                    <param name="begin" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="var" type="double" line="446"/>
                <scope line="447">
                    <scope line="448"/>
                    <scope line="451">
                        <declaration name="accum" type="double" line="452"/>
                        <declaration name="dev" type="double" line="453"/>
                        <declaration name="accum2" type="double" line="454"/>
                        <scope line="455"/>
                        <declaration name="sumWts" type="double" line="460"/>
                        <scope line="461"/>
                        <scope line="464"/>
                        <scope line="467"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="474">
                &lt;p&gt;Returns the weighted variance of the values in the input array, using
                  the precomputed weighted mean value.&lt;/p&gt;
                  &lt;p&gt;
                  Uses the formula &lt;pre&gt;
                  &amp;Sigma;(weights[i](values[i] - mean)&lt;sup&gt;2&lt;/sup&gt;)/(&amp;Sigma;(weights[i]) - 1)
                  &lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;
                  The formula used assumes that the supplied mean value is the weighted arithmetic
                  mean of the sample data, not a known population parameter. This method
                  is supplied only to save computation when the mean has already been
                  computed.&lt;/p&gt;
                  &lt;p&gt;
                  This formula will not return the same result as the unweighted variance when all
                  weights are equal, unless all weights are equal to 1. The formula assumes that
                  weights are to be treated as &quot;expansion values,&quot; as will be the case if for example
                  the weights represent frequency counts. To normalize weights so that the denominator
                  in the variance computation equals the length of the input vector minus one, use &lt;pre&gt;
                  &lt;code&gt;evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); &lt;/code&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
                  &lt;p&gt;
                  Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
                  &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
                  &lt;li&gt;the weights array is null&lt;/li&gt;
                  &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
                  &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
                  &lt;li&gt;the weights array contains negative values&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;
                  Does not change the internal state of the statistic.&lt;/p&gt;                
                <param>
                    values the input array                    
                </param>
                <param>
                    weights the weights array                    
                </param>
                <param>
                    mean the precomputed weighted mean value                    
                </param>
                <return>
                    the variance of the values or Double.NaN if length = 0                    
                </return>
                <throws>
                    MathIllegalArgumentException if the parameters are not valid                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="evaluate" type="double" line="514">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="weights" type="double[]"/>
                    <param name="mean" type="double"/>
                </params>
            </method>
            <javadoc line="517">
                @return Returns the isBiasCorrected.                
            </javadoc>
            <method name="isBiasCorrected" type="boolean" line="520"/>
            <javadoc line="523">
                @param biasCorrected The isBiasCorrected to set.                
            </javadoc>
            <method name="setBiasCorrected" type="void" line="526">
                <params>
                    <param name="biasCorrected" type="boolean"/>
                </params>
            </method>
            <javadoc line="529">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="Variance" line="532">
                <declaration name="result" type="Variance" line="533"/>
            </method>
            <javadoc line="537">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source Variance to copy                    
                </param>
                <param>
                    dest Variance to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="544">
                <params>
                    <param name="source" type="Variance"/>
                    <param name="dest" type="Variance"/>
                </params>
            </method>
        </class>
    </source>