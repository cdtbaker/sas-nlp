<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Beta"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="PascalDistribution" line="10">
            <extends class="AbstractIntegerDistribution"/>
            <javadoc line="10">
                &lt;p&gt;
                  Implementation of the Pascal distribution. The Pascal distribution is a
                  special case of the Negative Binomial distribution where the number of
                  successes parameter is an integer.
                  &lt;/p&gt;
                  &lt;p&gt;
                  There are various ways to express the probability mass and distribution
                  functions for the Pascal distribution. The present implementation represents
                  the distribution of the number of failures before {@code r} successes occur.
                  This is the convention adopted in e.g.
                  &lt;a href=&quot;http://mathworld.wolfram.com/NegativeBinomialDistribution.html&quot;&gt;MathWorld&lt;/a&gt;,
                  but &lt;em&gt;not&lt;/em&gt; in
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Negative_binomial_distribution&quot;&gt;Wikipedia&lt;/a&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For a random variable {@code X} whose values are distributed according to this
                  distribution, the probability mass function is given by&lt;br/&gt;{@code P(X = k) = C(k + r - 1, r - 1)  p^r  (1 - p)^k,}&lt;br/&gt;
                  where {@code r} is the number of successes, {@code p} is the probability of
                  success, and {@code X} is the total number of failures. {@code C(n, k)} is
                  the binomial coefficient ({@code n} choose {@code k}). The mean and variance
                  of {@code X} are&lt;br/&gt;{@code E(X) = (1 - p)  r / p, var(X) = (1 - p)  r / p^2.}&lt;br/&gt;
                  Finally, the cumulative distribution function is given by&lt;br/&gt;{@code P(X &lt;= k) = I(p, r, k + 1)},
                  where I is the regularized incomplete Beta function.
                  &lt;/p&gt;                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Negative_binomial_distribution">
                      Negative binomial distribution (Wikipedia)</a>                    
                </see>
                <see>
                    <a href="http://mathworld.wolfram.com/NegativeBinomialDistribution.html">
                      Negative binomial distribution (MathWorld)</a>                    
                </see>
                <version>
                    $Id: PascalDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="43">
                Serializable version identifier.                
            </javadoc>
            <declaration name="numberOfSuccesses" type="int" line="47"/>
            <javadoc line="47">
                The number of successes.                
            </javadoc>
            <declaration name="probabilityOfSuccess" type="double" line="51"/>
            <javadoc line="51">
                The probability of success.                
            </javadoc>
            <javadoc line="55">
                Create a Pascal distribution with the given number of successes and
                  probability of success.                
                <param>
                    r Number of successes.                    
                </param>
                <param>
                    p Probability of success.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if the number of successes is not positive                    
                </throws>
                <throws>
                    OutOfRangeException if the probability of success is not in the
                      range {@code [0, 1]}.                    
                </throws>
            </javadoc>
            <method name="PascalDistribution" type="constructor" line="64">
                <params>
                    <param name="r" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="67">
                Create a Pascal distribution with the given number of successes and
                  probability of success.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    r Number of successes.                    
                </param>
                <param>
                    p Probability of success.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if the number of successes is not positive                    
                </throws>
                <throws>
                    OutOfRangeException if the probability of success is not in the
                      range {@code [0, 1]}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="PascalDistribution" type="constructor" line="78">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="r" type="int"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="80"/>
                <scope line="83"/>
            </method>
            <javadoc line="89">
                Access the number of successes for this distribution.                
                <return>
                    the number of successes.                    
                </return>
            </javadoc>
            <method name="getNumberOfSuccesses" type="int" line="93"/>
            <javadoc line="96">
                Access the probability of success for this distribution.                
                <return>
                    the probability of success.                    
                </return>
            </javadoc>
            <method name="getProbabilityOfSuccess" type="double" line="100"/>
            <javadoc line="103">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="106">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="ret" type="double" line="107"/>
                <scope line="108"/>
                <scope line="111"/>
            </method>
            <javadoc line="116">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="119">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="ret" type="double" line="120"/>
                <scope line="121"/>
                <scope line="124"/>
            </method>
            <javadoc line="129">
                {@inheritDoc}For number of successes {@code r} and probability of success {@code p},
                  the mean is {@code r  (1 - p) / p}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="133">
                <declaration name="p" type="double" line="134"/>
                <declaration name="r" type="double" line="135"/>
            </method>
            <javadoc line="138">
                {@inheritDoc}For number of successes {@code r} and probability of success {@code p},
                  the variance is {@code r  (1 - p) / p^2}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="142">
                <declaration name="p" type="double" line="143"/>
                <declaration name="r" type="double" line="144"/>
            </method>
            <javadoc line="147">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="int" line="151"/>
            <javadoc line="154">
                {@inheritDoc}The upper bound of the support is always positive infinity no matter the
                  parameters. Positive infinity is symbolized by {@code Integer.MAX_VALUE}.                
                <return>
                    upper bound of the support (always {@code Integer.MAX_VALUE}for positive infinity)                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="int" line="159"/>
            <javadoc line="162">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="166"/>
        </class>
    </source>