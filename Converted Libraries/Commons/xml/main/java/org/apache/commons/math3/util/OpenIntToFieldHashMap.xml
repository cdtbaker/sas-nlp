<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.util.ConcurrentModificationException"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <class name="OpenIntToFieldHashMap" line="10">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="Serializable"/>
            <javadoc line="10">
                Open addressed map from int to FieldElement.
                  &lt;p&gt;This class provides a dedicated map from integers to FieldElements with a
                  much smaller memory overhead than standard &lt;code&gt;java.util.Map&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;This class is not synchronized. The specialized iterators returned by{@link #iterator()} are fail-fast: they throw a
                  &lt;code&gt;ConcurrentModificationException&lt;/code&gt; when they detect the map has been
                  modified during iteration.&lt;/p&gt;                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <version>
                    $Id: OpenIntToFieldHashMap.java 1421448 2012-12-13 19:45:57Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="FREE" type="byte" line="23"/>
            <javadoc line="23">
                Status indicator for free table entries.                
            </javadoc>
            <declaration name="FULL" type="byte" line="27"/>
            <javadoc line="27">
                Status indicator for full table entries.                
            </javadoc>
            <declaration name="REMOVED" type="byte" line="31"/>
            <javadoc line="31">
                Status indicator for removed table entries.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="35"/>
            <javadoc line="35">
                Serializable version identifier.                
            </javadoc>
            <declaration name="LOAD_FACTOR" type="float" line="39"/>
            <javadoc line="39">
                Load factor for the map.                
            </javadoc>
            <declaration name="DEFAULT_EXPECTED_SIZE" type="int" line="43"/>
            <javadoc line="43">
                Default starting size.
                  &lt;p&gt;This must be a power of two for bit mask to work properly. &lt;/p&gt;                
            </javadoc>
            <declaration name="RESIZE_MULTIPLIER" type="int" line="48"/>
            <javadoc line="48">
                Multiplier for size growth when map fills up.
                  &lt;p&gt;This must be a power of two for bit mask to work properly. &lt;/p&gt;                
            </javadoc>
            <declaration name="PERTURB_SHIFT" type="int" line="53"/>
            <javadoc line="53">
                Number of bits to perturb the index when probing for collision resolution.                
            </javadoc>
            <declaration name="field" type="Field&lt;T&gt;" line="57"/>
            <javadoc line="57">
                Field to which the elements belong.                
            </javadoc>
            <declaration name="keys" type="int[]" line="61"/>
            <javadoc line="61">
                Keys table.                
            </javadoc>
            <declaration name="values" type="T[]" line="65"/>
            <javadoc line="65">
                Values table.                
            </javadoc>
            <declaration name="states" type="byte[]" line="69"/>
            <javadoc line="69">
                States table.                
            </javadoc>
            <declaration name="missingEntries" type="T" line="73"/>
            <javadoc line="73">
                Return value for missing entries.                
            </javadoc>
            <declaration name="size" type="int" line="77"/>
            <javadoc line="77">
                Current size of the map.                
            </javadoc>
            <declaration name="mask" type="int" line="81"/>
            <javadoc line="81">
                Bit mask for hash values.                
            </javadoc>
            <declaration name="count" type="int" line="85"/>
            <javadoc line="85">
                Modifications count.                
            </javadoc>
            <javadoc line="89">
                Build an empty map with default size and using zero for missing entries.                
                <param>
                    field field to which the elements belong                    
                </param>
            </javadoc>
            <method name="OpenIntToFieldHashMap" type="constructor" line="93">
                <params>
                    <param name="field" type="Field<T>"/>
                </params>
            </method>
            <javadoc line="96">
                Build an empty map with default size                
                <param>
                    field field to which the elements belong                    
                </param>
                <param>
                    missingEntries value to return when a missing entry is fetched                    
                </param>
            </javadoc>
            <method name="OpenIntToFieldHashMap" type="constructor" line="101">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="missingEntries" type="T"/>
                </params>
            </method>
            <javadoc line="104">
                Build an empty map with specified size and using zero for missing entries.                
                <param>
                    field field to which the elements belong                    
                </param>
                <param>
                    expectedSize expected number of elements in the map                    
                </param>
            </javadoc>
            <method name="OpenIntToFieldHashMap" type="constructor" line="109">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="expectedSize" type="int"/>
                </params>
            </method>
            <javadoc line="112">
                Build an empty map with specified size.                
                <param>
                    field field to which the elements belong                    
                </param>
                <param>
                    expectedSize expected number of elements in the map                    
                </param>
                <param>
                    missingEntries value to return when a missing entry is fetched                    
                </param>
            </javadoc>
            <method name="OpenIntToFieldHashMap" type="constructor" line="118">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="expectedSize" type="int"/>
                    <param name="missingEntries" type="T"/>
                </params>
                <declaration name="capacity" type="int" line="120"/>
            </method>
            <javadoc line="127">
                Copy constructor.                
                <param>
                    source map to copy                    
                </param>
            </javadoc>
            <method name="OpenIntToFieldHashMap" type="constructor" line="131">
                <params>
                    <param name="source" type="OpenIntToFieldHashMap<T>"/>
                </params>
                <declaration name="length" type="int" line="133"/>
            </method>
            <javadoc line="145">
                Compute the capacity needed for a given size.                
                <param>
                    expectedSize expected size of the map                    
                </param>
                <return>
                    capacity to use for the specified size                    
                </return>
            </javadoc>
            <method name="computeCapacity" type="int" line="150">
                <params>
                    <param name="expectedSize" type="int"/>
                </params>
                <scope line="151"/>
                <declaration name="capacity" type="int" line="154"/>
                <declaration name="powerOfTwo" type="int" line="155"/>
                <scope line="156"/>
            </method>
            <javadoc line="161">
                Find the smallest power of two greater than the input value                
                <param>
                    i input value                    
                </param>
                <return>
                    smallest power of two greater than the input value                    
                </return>
            </javadoc>
            <method name="nextPowerOfTwo" type="int" line="166">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="169">
                Get the stored value associated with the given key                
                <param>
                    key key associated with the data                    
                </param>
                <return>
                    data associated with the key                    
                </return>
            </javadoc>
            <method name="get" type="T" line="174">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="175"/>
                <declaration name="index" type="int" line="176"/>
                <scope line="177"/>
                <scope line="180"/>
                <declaration name="j" type="int" line="183"/>
                <scope line="184">
                    <scope line="187"/>
                </scope>
            </method>
            <javadoc line="193">
                Check if a value is associated with a key.                
                <param>
                    key key to check                    
                </param>
                <return>
                    true if a value is associated with key                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="198">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="199"/>
                <declaration name="index" type="int" line="200"/>
                <scope line="201"/>
                <scope line="204"/>
                <declaration name="j" type="int" line="207"/>
                <scope line="208">
                    <scope line="211"/>
                </scope>
            </method>
            <javadoc line="217">
                Get an iterator over map elements.
                  &lt;p&gt;The specialized iterators returned are fail-fast: they throw a
                  &lt;code&gt;ConcurrentModificationException&lt;/code&gt; when they detect the map
                  has been modified during iteration.&lt;/p&gt;                
                <return>
                    iterator over the map elements                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator" line="224"/>
            <javadoc line="227">
                Perturb the hash for starting probing.                
                <param>
                    hash initial hash                    
                </param>
                <return>
                    perturbed hash                    
                </return>
            </javadoc>
            <method name="perturb" type="int" line="232">
                <params>
                    <param name="hash" type="int"/>
                </params>
            </method>
            <javadoc line="235">
                Find the index at which a key should be inserted                
                <param>
                    key key to lookup                    
                </param>
                <return>
                    index at which key should be inserted                    
                </return>
            </javadoc>
            <method name="findInsertionIndex" type="int" line="240">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="243">
                Find the index at which a key should be inserted                
                <param>
                    keys keys table                    
                </param>
                <param>
                    states states table                    
                </param>
                <param>
                    key key to lookup                    
                </param>
                <param>
                    mask bit mask for hash values                    
                </param>
                <return>
                    index at which key should be inserted                    
                </return>
            </javadoc>
            <method name="findInsertionIndex" type="int" line="251">
                <params>
                    <param name="keys" type="int[]"/>
                    <param name="states" type="byte[]"/>
                    <param name="key" type="int"/>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="hash" type="int" line="252"/>
                <declaration name="index" type="int" line="253"/>
                <scope line="254"/>
                <scope line="257"/>
                <declaration name="perturb" type="int" line="260"/>
                <declaration name="j" type="int" line="261"/>
                <scope line="262">
                    <scope line="263">
                        <scope line="267"/>
                    </scope>
                </scope>
                <scope line="272"/>
                <scope line="275"/>
                <declaration name="firstRemoved" type="int" line="278"/>
                <scope line="279">
                    <scope line="282"/>
                    <scope line="285"/>
                </scope>
            </method>
            <javadoc line="291">
                Compute next probe for collision resolution                
                <param>
                    perturb perturbed hash                    
                </param>
                <param>
                    j previous probe                    
                </param>
                <return>
                    next probe                    
                </return>
            </javadoc>
            <method name="probe" type="int" line="297">
                <params>
                    <param name="perturb" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <javadoc line="300">
                Change the index sign                
                <param>
                    index initial index                    
                </param>
                <return>
                    changed index                    
                </return>
            </javadoc>
            <method name="changeIndexSign" type="int" line="305">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="308">
                Get the number of elements stored in the map.                
                <return>
                    number of elements stored in the map                    
                </return>
            </javadoc>
            <method name="size" type="int" line="312"/>
            <javadoc line="315">
                Remove the value associated with a key.                
                <param>
                    key key to which the value is associated                    
                </param>
                <return>
                    removed value                    
                </return>
            </javadoc>
            <method name="remove" type="T" line="320">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="hash" type="int" line="321"/>
                <declaration name="index" type="int" line="322"/>
                <scope line="323"/>
                <scope line="326"/>
                <declaration name="j" type="int" line="329"/>
                <scope line="330">
                    <scope line="333"/>
                </scope>
            </method>
            <javadoc line="339">
                Check if the tables contain an element associated with specified key
                  at specified index.                
                <param>
                    key key to check                    
                </param>
                <param>
                    index index to check                    
                </param>
                <return>
                    true if an element is associated with key at index                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="346">
                <params>
                    <param name="key" type="int"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="349">
                Remove an element at specified index.                
                <param>
                    index index of the element to remove                    
                </param>
                <return>
                    removed value                    
                </return>
            </javadoc>
            <method name="doRemove" type="T" line="354">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="previous" type="T" line="357"/>
            </method>
            <javadoc line="363">
                Put a value associated with a key in the map.                
                <param>
                    key key to which value is associated                    
                </param>
                <param>
                    value value to put in the map                    
                </param>
                <return>
                    previous value associated with the key                    
                </return>
            </javadoc>
            <method name="put" type="T" line="369">
                <params>
                    <param name="key" type="int"/>
                    <param name="value" type="T"/>
                </params>
                <declaration name="index" type="int" line="370"/>
                <declaration name="previous" type="T" line="371"/>
                <declaration name="newMapping" type="boolean" line="372"/>
                <scope line="373"/>
                <scope line="381">
                    <scope line="383"/>
                </scope>
            </method>
            <javadoc line="390">
                Grow the tables.                
            </javadoc>
            <method name="growTable" type="void" line="393">
                <declaration name="oldLength" type="int" line="394"/>
                <declaration name="oldKeys" type="int[]" line="395"/>
                <declaration name="oldValues" type="T[]" line="396"/>
                <declaration name="oldStates" type="byte[]" line="397"/>
                <declaration name="newLength" type="int" line="398"/>
                <declaration name="newKeys" type="int[]" line="399"/>
                <declaration name="newValues" type="T[]" line="400"/>
                <declaration name="newStates" type="byte[]" line="401"/>
                <declaration name="newMask" type="int" line="402"/>
                <scope line="403">
                    <scope line="404">
                        <declaration name="key" type="int" line="405"/>
                        <declaration name="index" type="int" line="406"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="417">
                Check if tables should grow due to increased size.                
                <return>
                    true if  tables should grow                    
                </return>
            </javadoc>
            <method name="shouldGrowTable" type="boolean" line="421"/>
            <javadoc line="424">
                Compute the hash value of a key                
                <param>
                    key key to hash                    
                </param>
                <return>
                    hash value of the key                    
                </return>
            </javadoc>
            <method name="hashOf" type="int" line="429">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="h" type="int" line="430"/>
            </method>
            <class name="Iterator" line="433">
                <javadoc line="433">
                    Iterator class for the map.                    
                </javadoc>
                <declaration name="referenceCount" type="int" line="437"/>
                <javadoc line="437">
                    Reference modification count.                    
                </javadoc>
                <declaration name="current" type="int" line="441"/>
                <javadoc line="441">
                    Index of current element.                    
                </javadoc>
                <declaration name="next" type="int" line="445"/>
                <javadoc line="445">
                    Index of next element.                    
                </javadoc>
                <javadoc line="449">
                    Simple constructor.                    
                </javadoc>
                <method name="Iterator" type="constructor" line="452">
                    <scope line="455"/>
                    <scope line="458"/>
                </method>
                <javadoc line="461">
                    Check if there is a next element in the map.                    
                    <return>
                        true if there is a next element                        
                    </return>
                </javadoc>
                <method name="hasNext" type="boolean" line="465"/>
                <javadoc line="468">
                    Get the key of current entry.                    
                    <return>
                        key of current entry                        
                    </return>
                    <exception>
                        ConcurrentModificationException if the map is modified during iteration                        
                    </exception>
                    <exception>
                        NoSuchElementException if there is no element left in the map                        
                    </exception>
                </javadoc>
                <method name="key" type="int" line="474">
                    <scope line="475"/>
                    <scope line="478"/>
                </method>
                <javadoc line="483">
                    Get the value of current entry.                    
                    <return>
                        value of current entry                        
                    </return>
                    <exception>
                        ConcurrentModificationException if the map is modified during iteration                        
                    </exception>
                    <exception>
                        NoSuchElementException if there is no element left in the map                        
                    </exception>
                </javadoc>
                <method name="value" type="T" line="489">
                    <scope line="490"/>
                    <scope line="493"/>
                </method>
                <javadoc line="498">
                    Advance iterator one step further.                    
                    <exception>
                        ConcurrentModificationException if the map is modified during iteration                        
                    </exception>
                    <exception>
                        NoSuchElementException if there is no element left in the map                        
                    </exception>
                </javadoc>
                <method name="advance" type="void" line="503">
                    <scope line="504"/>
                    <scope line="508">
                        <scope line="509"/>
                    </scope>
                    <scope line="512">
                        <scope line="514"/>
                    </scope>
                </method>
            </class>
            <javadoc line="520">
                Read a serialized object.                
                <param>
                    stream input stream                    
                </param>
                <throws>
                    IOException if object cannot be read                    
                </throws>
                <throws>
                    ClassNotFoundException if the class corresponding
                      to the serialized object cannot be found                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="527">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="531">
                Build an array of elements.                
                <param>
                    length size of the array to build                    
                </param>
                <return>
                    a new array                    
                </return>
            </javadoc>
            <method name="buildArray" type="T[]" line="536">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
        </class>
    </source>