<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting.leastsquares">
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.optim.OptimizationProblem"/>
        <interface name="LeastSquaresProblem">
            <implements interface="OptimizationProblem">
                <type_params>
                    <type_param name="LeastSquaresProblem.Evaluation"/>
                </type_params>
            </implements>
            <javadoc line="23">
                The data necessary to define a non-linear least squares problem.
                  &lt;p&gt;
                  Includes the observed values, computed model function, and
                  convergence/divergence criteria. Weights are implicit in {@link Evaluation#getResiduals()} and {@link Evaluation#getJacobian()}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Instances are typically either created progressively using a {@link LeastSquaresBuilder builder} or created at once using a {@link LeastSquaresFactoryfactory}.
                  &lt;/p&gt;                
                <see>
                    LeastSquaresBuilder                    
                </see>
                <see>
                    LeastSquaresFactory                    
                </see>
                <see>
                    LeastSquaresAdapter                    
                </see>
                <version>
                    $Id: LeastSquaresProblem.java 1571306 2014-02-24 14:57:44Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="getStart" type="RealVector" line="44"/>
            <javadoc line="44">
                Gets the initial guess.                
                <return>
                    the initial guess values.                    
                </return>
            </javadoc>
            <method name="getObservationSize" type="int" line="51"/>
            <javadoc line="51">
                Get the number of observations (rows in the Jacobian) in this problem.                
                <return>
                    the number of scalar observations                    
                </return>
            </javadoc>
            <method name="getParameterSize" type="int" line="58"/>
            <javadoc line="58">
                Get the number of parameters (columns in the Jacobian) in this problem.                
                <return>
                    the number of scalar parameters                    
                </return>
            </javadoc>
            <method name="evaluate" type="Evaluation" line="65"/>
            <javadoc line="65">
                Evaluate the model at the specified point.                
                <param>
                    point the parameter values.                    
                </param>
                <return>
                    the model&apos;s value and derivative at the given point.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations (of the model vector function) is
                      exceeded.                    
                </throws>
            </javadoc>
            <interface name="Evaluation">
                <javadoc line="77">
                    An evaluation of a {@link LeastSquaresProblem} at a particular point. This class
                      also computes several quantities derived from the value and its Jacobian.                    
                </javadoc>
                <method name="getCovariances" type="RealMatrix" line="83"/>
                <javadoc line="83">
                    Get the covariance matrix of the optimized parameters. &lt;br/&gt; Note that this
                      operation involves the inversion of the &lt;code&gt;J&lt;sup&gt;T&lt;/sup&gt;J&lt;/code&gt; matrix,
                      where {@code J} is the Jacobian matrix. The {@code threshold} parameter is a
                      way for the caller to specify that the result of this computation should be
                      considered meaningless, and thus trigger an exception.                    
                    <param>
                        threshold Singularity threshold.                        
                    </param>
                    <return>
                        the covariance matrix.                        
                    </return>
                    <throws>
                        org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed (singular problem).                        
                    </throws>
                </javadoc>
                <method name="getSigma" type="RealVector" line="98"/>
                <javadoc line="98">
                    Get an estimate of the standard deviation of the parameters. The returned
                      values are the square root of the diagonal coefficients of the covariance
                      matrix, {@code sd(a[i]) ~= sqrt(C[i][i])}, where {@code a[i]} is the optimized
                      value of the {@code i}-th parameter, and {@code C} is the covariance matrix.                    
                    <param>
                        covarianceSingularityThreshold Singularity threshold (see {@link #getCovariances(double) computeCovariances}).                        
                    </param>
                    <return>
                        an estimate of the standard deviation of the optimized parameters                        
                    </return>
                    <throws>
                        org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed.                        
                    </throws>
                </javadoc>
                <method name="getRMS" type="double" line="113"/>
                <javadoc line="113">
                    Get the normalized cost. It is the square-root of the sum of squared of
                      the residuals, divided by the number of measurements.                    
                    <return>
                        the cost.                        
                    </return>
                </javadoc>
                <method name="getJacobian" type="RealMatrix" line="121"/>
                <javadoc line="121">
                    Get the weighted Jacobian matrix.                    
                    <return>
                        the weighted Jacobian: W&lt;sup&gt;1/2&lt;/sup&gt; J.                        
                    </return>
                    <throws>
                        org.apache.commons.math3.exception.DimensionMismatchExceptionif the Jacobian dimension does not match problem dimension.                        
                    </throws>
                </javadoc>
                <method name="getCost" type="double" line="130"/>
                <javadoc line="130">
                    Get the cost.                    
                    <return>
                        the cost.                        
                    </return>
                    <see>
                        #getResiduals()                        
                    </see>
                </javadoc>
                <method name="getResiduals" type="RealVector" line="138"/>
                <javadoc line="138">
                    Get the weighted residuals. The residual is the difference between the
                      observed (target) values and the model (objective function) value. There is one
                      residual for each element of the vector-valued function. The raw residuals are
                      then multiplied by the square root of the weight matrix.                    
                    <return>
                        the weighted residuals: W&lt;sup&gt;1/2&lt;/sup&gt; K.                        
                    </return>
                    <throws>
                        org.apache.commons.math3.exception.DimensionMismatchExceptionif the residuals have the wrong length.                        
                    </throws>
                </javadoc>
                <method name="getPoint" type="RealVector" line="150"/>
                <javadoc line="150">
                    Get the abscissa (independent variables) of this evaluation.                    
                    <return>
                        the point provided to {@link #evaluate(RealVector)}.                        
                    </return>
                </javadoc>
            </interface>
        </interface>
    </source>