<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigInteger"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Fraction" line="29">
            <extends class="Number"/>
            <implements interface="FieldElement">
                <type_params>
                    <type_param name="Fraction"/>
                </type_params>
            </implements>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Fraction"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="29">
                Representation of a rational number.
                  implements Serializable since 2.0                
                <since>
                    1.1                    
                </since>
                <version>
                    $Id: Fraction.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="TWO" type="Fraction" line="41"/>
            <javadoc line="41">
                A fraction representing &quot;2 / 1&quot;.                
            </javadoc>
            <declaration name="ONE" type="Fraction" line="44"/>
            <javadoc line="44">
                A fraction representing &quot;1&quot;.                
            </javadoc>
            <declaration name="ZERO" type="Fraction" line="47"/>
            <javadoc line="47">
                A fraction representing &quot;0&quot;.                
            </javadoc>
            <declaration name="FOUR_FIFTHS" type="Fraction" line="50"/>
            <javadoc line="50">
                A fraction representing &quot;4/5&quot;.                
            </javadoc>
            <declaration name="ONE_FIFTH" type="Fraction" line="53"/>
            <javadoc line="53">
                A fraction representing &quot;1/5&quot;.                
            </javadoc>
            <declaration name="ONE_HALF" type="Fraction" line="56"/>
            <javadoc line="56">
                A fraction representing &quot;1/2&quot;.                
            </javadoc>
            <declaration name="ONE_QUARTER" type="Fraction" line="59"/>
            <javadoc line="59">
                A fraction representing &quot;1/4&quot;.                
            </javadoc>
            <declaration name="ONE_THIRD" type="Fraction" line="62"/>
            <javadoc line="62">
                A fraction representing &quot;1/3&quot;.                
            </javadoc>
            <declaration name="THREE_FIFTHS" type="Fraction" line="65"/>
            <javadoc line="65">
                A fraction representing &quot;3/5&quot;.                
            </javadoc>
            <declaration name="THREE_QUARTERS" type="Fraction" line="68"/>
            <javadoc line="68">
                A fraction representing &quot;3/4&quot;.                
            </javadoc>
            <declaration name="TWO_FIFTHS" type="Fraction" line="71"/>
            <javadoc line="71">
                A fraction representing &quot;2/5&quot;.                
            </javadoc>
            <declaration name="TWO_QUARTERS" type="Fraction" line="74"/>
            <javadoc line="74">
                A fraction representing &quot;2/4&quot;.                
            </javadoc>
            <declaration name="TWO_THIRDS" type="Fraction" line="77"/>
            <javadoc line="77">
                A fraction representing &quot;2/3&quot;.                
            </javadoc>
            <declaration name="MINUS_ONE" type="Fraction" line="80"/>
            <javadoc line="80">
                A fraction representing &quot;-1 / 1&quot;.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="83"/>
            <javadoc line="83">
                Serializable version identifier                
            </javadoc>
            <declaration name="denominator" type="int" line="86"/>
            <javadoc line="86">
                The denominator.                
            </javadoc>
            <declaration name="numerator" type="int" line="89"/>
            <javadoc line="89">
                The numerator.                
            </javadoc>
            <javadoc line="92">
                Create a fraction given the double value.                
                <param>
                    value the double value to convert to a fraction.                    
                </param>
                <throws>
                    FractionConversionException if the continued fraction failed to
                      converge.                    
                </throws>
            </javadoc>
            <method name="Fraction" type="constructor" line="98">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="102">
                Create a fraction given the double value and maximum error allowed.
                  &lt;p&gt;
                  References:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/ContinuedFraction.html&quot;&gt;
                  Continued Fraction&lt;/a&gt; equations (11) and (22)-(26)&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    value the double value to convert to a fraction.                    
                </param>
                <param>
                    epsilon maximum error allowed.  The resulting fraction is within{@code epsilon} of {@code value}, in absolute terms.                    
                </param>
                <param>
                    maxIterations maximum number of convergents                    
                </param>
                <throws>
                    FractionConversionException if the continued fraction failed to
                      converge.                    
                </throws>
            </javadoc>
            <method name="Fraction" type="constructor" line="120">
                <params>
                    <param name="value" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="124">
                Create a fraction given the double value and maximum denominator.
                  &lt;p&gt;
                  References:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://mathworld.wolfram.com/ContinuedFraction.html&quot;&gt;
                  Continued Fraction&lt;/a&gt; equations (11) and (22)-(26)&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    value the double value to convert to a fraction.                    
                </param>
                <param>
                    maxDenominator The maximum allowed value for denominator                    
                </param>
                <throws>
                    FractionConversionException if the continued fraction failed to
                      converge                    
                </throws>
            </javadoc>
            <method name="Fraction" type="constructor" line="140">
                <params>
                    <param name="value" type="double"/>
                    <param name="maxDenominator" type="int"/>
                </params>
            </method>
            <javadoc line="144">
                Create a fraction given the double value and either the maximum error
                  allowed or the maximum number of denominator digits.
                  &lt;p&gt;
                  NOTE: This constructor is called with EITHER
                  - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
                  (that way the maxDenominator has no effect).
                  OR
                  - a valid maxDenominator value and the epsilon value set to zero
                  (that way epsilon only has effect if there is an exact match before
                  the maxDenominator value is reached).
                  &lt;/p&gt;&lt;p&gt;
                  It has been done this way so that the same code can be (re)used for both
                  scenarios. However this could be confusing to users if it were part of
                  the public API and this constructor should therefore remain PRIVATE.
                  &lt;/p&gt;
                  See JIRA issue ticket MATH-181 for more details:
                  https://issues.apache.org/jira/browse/MATH-181                
                <param>
                    value the double value to convert to a fraction.                    
                </param>
                <param>
                    epsilon maximum error allowed.  The resulting fraction is within{@code epsilon} of {@code value}, in absolute terms.                    
                </param>
                <param>
                    maxDenominator maximum denominator value allowed.                    
                </param>
                <param>
                    maxIterations maximum number of convergents                    
                </param>
                <throws>
                    FractionConversionException if the continued fraction failed to
                      converge.                    
                </throws>
            </javadoc>
            <method name="Fraction" type="constructor" line="177">
                <params>
                    <param name="value" type="double"/>
                    <param name="epsilon" type="double"/>
                    <param name="maxDenominator" type="int"/>
                    <param name="maxIterations" type="int"/>
                </params>
                <comment line="186">
                    check for (almost) integer arguments, which should not go
                     to iterations.                    
                </comment>
                <declaration name="overflow" type="long" line="178"/>
                <declaration name="r0" type="double" line="179"/>
                <declaration name="a0" type="long" line="180"/>
                <scope line="181"/>
                <scope line="187"/>
                <declaration name="p0" type="long" line="193"/>
                <declaration name="q0" type="long" line="194"/>
                <declaration name="p1" type="long" line="195"/>
                <declaration name="q1" type="long" line="196"/>
                <declaration name="p2" type="long" line="198"/>
                <declaration name="q2" type="long" line="199"/>
                <declaration name="n" type="int" line="201"/>
                <declaration name="stop" type="boolean" line="202"/>
                <scope line="203">
                    <declaration name="r1" type="double" line="205"/>
                    <declaration name="a1" type="long" line="206"/>
                    <scope line="209"/>
                    <declaration name="convergent" type="double" line="213"/>
                    <scope line="214"/>
                    <scope line="221"/>
                </scope>
                <scope line="226"/>
                <scope line="230"/>
                <scope line="233"/>
            </method>
            <javadoc line="240">
                Create a fraction from an int.
                  The fraction is num / 1.                
                <param>
                    num the numerator.                    
                </param>
            </javadoc>
            <method name="Fraction" type="constructor" line="245">
                <params>
                    <param name="num" type="int"/>
                </params>
            </method>
            <javadoc line="249">
                Create a fraction given the numerator and denominator.  The fraction is
                  reduced to lowest terms.                
                <param>
                    num the numerator.                    
                </param>
                <param>
                    den the denominator.                    
                </param>
                <throws>
                    MathArithmeticException if the denominator is {@code zero}                    
                </throws>
            </javadoc>
            <method name="Fraction" type="constructor" line="256">
                <params>
                    <param name="num" type="int"/>
                    <param name="den" type="int"/>
                </params>
                <comment line="271">
                    reduce numerator and denominator by greatest common denominator.                    
                </comment>
                <comment line="278">
                    move sign to numerator.                    
                </comment>
                <scope line="257"/>
                <scope line="261">
                    <scope line="263"/>
                </scope>
                <declaration name="d" type="int" line="271"/>
                <scope line="272"/>
                <scope line="278"/>
            </method>
            <javadoc line="286">
                Returns the absolute value of this fraction.                
                <return>
                    the absolute value.                    
                </return>
            </javadoc>
            <method name="abs" type="Fraction" line="290">
                <declaration name="ret" type="Fraction" line="291"/>
                <scope line="292"/>
                <scope line="294"/>
            </method>
            <javadoc line="300">
                Compares this object to another based on size.                
                <param>
                    object the object to compare to                    
                </param>
                <return>
                    -1 if this is less than <tt>object</tt>, +1 if this is greater
                      than <tt>object</tt>, 0 if they are equal.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="306">
                <params>
                    <param name="object" type="Fraction"/>
                </params>
                <declaration name="nOd" type="long" line="307"/>
                <declaration name="dOn" type="long" line="308"/>
            </method>
            <javadoc line="312">
                Gets the fraction as a &lt;tt&gt;double&lt;/tt&gt;. This calculates the fraction as
                  the numerator divided by denominator.                
                <return>
                    the fraction as a <tt>double</tt>                    
                </return>
            </javadoc>
            <method name="doubleValue" type="double" line="318"/>
            <javadoc line="322">
                Test for the equality of two fractions.  If the lowest term
                  numerator and denominators are the same for both fractions, the two
                  fractions are considered to be equal.                
                <param>
                    other fraction to test for equality to this fraction                    
                </param>
                <return>
                    true if two fractions are equal, false if object is
                      <tt>null</tt>, not an instance of {@link Fraction}, or not equal
                      to this fraction instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="332">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <comment line="338">
                    since fractions are always in lowest terms, numerators and
                     denominators can be compared directly for equality.                    
                </comment>
                <scope line="333"/>
                <scope line="336">
                    <declaration name="rhs" type="Fraction" line="339"/>
                </scope>
            </method>
            <javadoc line="346">
                Gets the fraction as a &lt;tt&gt;float&lt;/tt&gt;. This calculates the fraction as
                  the numerator divided by denominator.                
                <return>
                    the fraction as a <tt>float</tt>                    
                </return>
            </javadoc>
            <method name="floatValue" type="float" line="352"/>
            <javadoc line="356">
                Access the denominator.                
                <return>
                    the denominator.                    
                </return>
            </javadoc>
            <method name="getDenominator" type="int" line="360"/>
            <javadoc line="364">
                Access the numerator.                
                <return>
                    the numerator.                    
                </return>
            </javadoc>
            <method name="getNumerator" type="int" line="368"/>
            <javadoc line="372">
                Gets a hashCode for the fraction.                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="377"/>
            <javadoc line="381">
                Gets the fraction as an &lt;tt&gt;int&lt;/tt&gt;. This returns the whole number part
                  of the fraction.                
                <return>
                    the whole number fraction part                    
                </return>
            </javadoc>
            <method name="intValue" type="int" line="387"/>
            <javadoc line="391">
                Gets the fraction as a &lt;tt&gt;long&lt;/tt&gt;. This returns the whole number part
                  of the fraction.                
                <return>
                    the whole number fraction part                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="397"/>
            <javadoc line="401">
                Return the additive inverse of this fraction.                
                <return>
                    the negation of this fraction.                    
                </return>
            </javadoc>
            <method name="negate" type="Fraction" line="405">
                <scope line="406"/>
            </method>
            <javadoc line="412">
                Return the multiplicative inverse of this fraction.                
                <return>
                    the reciprocal fraction                    
                </return>
            </javadoc>
            <method name="reciprocal" type="Fraction" line="416"/>
            <javadoc line="420">
                &lt;p&gt;Adds the value of this fraction to another, returning the result in reduced form.
                  The algorithm follows Knuth, 4.5.1.&lt;/p&gt;                
                <param>
                    fraction  the fraction to add, must not be {@code null}                    
                </param>
                <return>
                    a {@code Fraction} instance with the resulting values                    
                </return>
                <throws>
                    NullArgumentException if the fraction is {@code null}                    
                </throws>
                <throws>
                    MathArithmeticException if the resulting numerator or denominator exceeds{@code Integer.MAX_VALUE}                    
                </throws>
            </javadoc>
            <method name="add" type="Fraction" line="430">
                <params>
                    <param name="fraction" type="Fraction"/>
                </params>
                <comment line="432">
                                        
                </comment>
            </method>
            <javadoc line="434">
                Add an integer to the fraction.                
                <param>
                    i the <tt>integer</tt> to add.                    
                </param>
                <return>
                    this + i                    
                </return>
            </javadoc>
            <method name="add" type="Fraction" line="439">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="443">
                &lt;p&gt;Subtracts the value of another fraction from the value of this one,
                  returning the result in reduced form.&lt;/p&gt;                
                <param>
                    fraction  the fraction to subtract, must not be {@code null}                    
                </param>
                <return>
                    a {@code Fraction} instance with the resulting values                    
                </return>
                <throws>
                    NullArgumentException if the fraction is {@code null}                    
                </throws>
                <throws>
                    MathArithmeticException if the resulting numerator or denominator
                      cannot be represented in an {@code int}.                    
                </throws>
            </javadoc>
            <method name="subtract" type="Fraction" line="453">
                <params>
                    <param name="fraction" type="Fraction"/>
                </params>
                <comment line="455">
                                        
                </comment>
            </method>
            <javadoc line="457">
                Subtract an integer from the fraction.                
                <param>
                    i the <tt>integer</tt> to subtract.                    
                </param>
                <return>
                    this - i                    
                </return>
            </javadoc>
            <method name="subtract" type="Fraction" line="462">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="466">
                Implement add and subtract using algorithm described in Knuth 4.5.1.                
                <param>
                    fraction the fraction to subtract, must not be {@code null}                    
                </param>
                <param>
                    isAdd true to add, false to subtract                    
                </param>
                <return>
                    a {@code Fraction} instance with the resulting values                    
                </return>
                <throws>
                    NullArgumentException if the fraction is {@code null}                    
                </throws>
                <throws>
                    MathArithmeticException if the resulting numerator or denominator
                      cannot be represented in an {@code int}.                    
                </throws>
            </javadoc>
            <method name="addSub" type="Fraction" line="476">
                <params>
                    <param name="fraction" type="Fraction"/>
                    <param name="isAdd" type="boolean"/>
                </params>
                <comment line="481">
                    zero is identity for addition.                    
                </comment>
                <comment line="488">
                    if denominators are randomly distributed, d1 will be 1 about 61%
                     of the time.                    
                </comment>
                <comment line="492">
                    result is ( (u*v&apos; +/- u&apos;v) / u&apos;v&apos;)                    
                </comment>
                <comment line="500">
                    the quantity &apos;t&apos; requires 65 bits of precision; see knuth 4.5.1
                     exercise 7.  we&apos;re going to use a BigInteger.
                     t = u(v&apos;/d1) +/- v(u&apos;/d1)                    
                </comment>
                <comment line="508">
                    but d2 doesn&apos;t need extra precision because
                     d2 = gcd(t,d1) = gcd(t mod d1, d1)                    
                </comment>
                <comment line="513">
                    result is (t/d2) / (u&apos;/d1)(v&apos;/d2)                    
                </comment>
                <scope line="477"/>
                <scope line="481"/>
                <scope line="484"/>
                <declaration name="d1" type="int" line="489"/>
                <scope line="490">
                    <declaration name="uvp" type="int" line="492"/>
                    <declaration name="upv" type="int" line="493"/>
                </scope>
                <declaration name="uvp" type="BigInteger" line="502"/>
                <declaration name="upv" type="BigInteger" line="504"/>
                <declaration name="t" type="BigInteger" line="506"/>
                <declaration name="tmodd1" type="int" line="509"/>
                <declaration name="d2" type="int" line="510"/>
                <declaration name="w" type="BigInteger" line="513"/>
                <scope line="514"/>
            </method>
            <javadoc line="523">
                &lt;p&gt;Multiplies the value of this fraction by another, returning the
                  result in reduced form.&lt;/p&gt;                
                <param>
                    fraction  the fraction to multiply by, must not be {@code null}                    
                </param>
                <return>
                    a {@code Fraction} instance with the resulting values                    
                </return>
                <throws>
                    NullArgumentException if the fraction is {@code null}                    
                </throws>
                <throws>
                    MathArithmeticException if the resulting numerator or denominator exceeds{@code Integer.MAX_VALUE}                    
                </throws>
            </javadoc>
            <method name="multiply" type="Fraction" line="533">
                <params>
                    <param name="fraction" type="Fraction"/>
                </params>
                <comment line="541">
                    knuth 4.5.1
                     make sure we don&apos;t overflow unless the result *must* overflow.                    
                </comment>
                <scope line="534"/>
                <scope line="537"/>
                <declaration name="d1" type="int" line="542"/>
                <declaration name="d2" type="int" line="543"/>
            </method>
            <javadoc line="549">
                Multiply the fraction by an integer.                
                <param>
                    i the <tt>integer</tt> to multiply by.                    
                </param>
                <return>
                    this  i                    
                </return>
            </javadoc>
            <method name="multiply" type="Fraction" line="554">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="558">
                &lt;p&gt;Divide the value of this fraction by another.&lt;/p&gt;                
                <param>
                    fraction  the fraction to divide by, must not be {@code null}                    
                </param>
                <return>
                    a {@code Fraction} instance with the resulting values                    
                </return>
                <throws>
                    IllegalArgumentException if the fraction is {@code null}                    
                </throws>
                <throws>
                    MathArithmeticException if the fraction to divide by is zero                    
                </throws>
                <throws>
                    MathArithmeticException if the resulting numerator or denominator exceeds{@code Integer.MAX_VALUE}                    
                </throws>
            </javadoc>
            <method name="divide" type="Fraction" line="568">
                <params>
                    <param name="fraction" type="Fraction"/>
                </params>
                <scope line="569"/>
                <scope line="572"/>
            </method>
            <javadoc line="579">
                Divide the fraction by an integer.                
                <param>
                    i the <tt>integer</tt> to divide by.                    
                </param>
                <return>
                    this  i                    
                </return>
            </javadoc>
            <method name="divide" type="Fraction" line="584">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="588">
                &lt;p&gt;
                  Gets the fraction percentage as a &lt;tt&gt;double&lt;/tt&gt;. This calculates the
                  fraction as the numerator divided by denominator multiplied by 100.
                  &lt;/p&gt;                
                <return>
                    the fraction percentage as a <tt>double</tt>.                    
                </return>
            </javadoc>
            <method name="percentageValue" type="double" line="596"/>
            <javadoc line="600">
                &lt;p&gt;Creates a {@code Fraction} instance with the 2 parts
                  of a fraction Y/Z.&lt;/p&gt;
                  &lt;p&gt;Any negative signs are resolved to be on the numerator.&lt;/p&gt;                
                <param>
                    numerator  the numerator, for example the three in 'three sevenths'                    
                </param>
                <param>
                    denominator  the denominator, for example the seven in 'three sevenths'                    
                </param>
                <return>
                    a new fraction instance, with the numerator and denominator reduced                    
                </return>
                <throws>
                    MathArithmeticException if the denominator is {@code zero}                    
                </throws>
            </javadoc>
            <method name="getReducedFraction" type="Fraction" line="611">
                <params>
                    <param name="numerator" type="int"/>
                    <param name="denominator" type="int"/>
                </params>
                <comment line="618">
                    normalize zero.                    
                </comment>
                <comment line="620">
                    allow 2^k/-2^31 as a valid fraction (where k&gt;0)                    
                </comment>
                <comment line="633">
                    simplify fraction.                    
                </comment>
                <scope line="612"/>
                <scope line="616"/>
                <scope line="620"/>
                <scope line="623">
                    <scope line="625"/>
                </scope>
                <declaration name="gcd" type="int" line="633"/>
            </method>
            <javadoc line="639">
                &lt;p&gt;
                  Returns the {@code String} representing this fraction, ie
                  &quot;num / dem&quot; or just &quot;num&quot; if the denominator is one.
                  &lt;/p&gt;                
                <return>
                    a string representation of the fraction.                    
                </return>
                <see>
                    java.lang.Object#toString()                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="649">
                <declaration name="str" type="String" line="650"/>
                <scope line="651"/>
                <scope line="653"/>
                <scope line="655"/>
            </method>
            <javadoc line="661">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="FractionField" line="662"/>
        </class>
    </source>