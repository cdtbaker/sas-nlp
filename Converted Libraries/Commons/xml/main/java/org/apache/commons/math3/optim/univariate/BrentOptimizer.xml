<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.univariate">
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <class name="BrentOptimizer" line="26">
            <extends class="UnivariateOptimizer"/>
            <javadoc line="26">
                For a function defined on some interval {@code (lo, hi)}, this class
                  finds an approximation {@code x} to the point at which the function
                  attains its minimum.
                  It implements Richard Brent&apos;s algorithm (from his book &quot;Algorithms for
                  Minimization without Derivatives&quot;, p. 79) for finding minima of real
                  univariate functions.
                  &lt;br/&gt;
                  This code is an adaptation, partly based on the Python code from SciPy
                  (module &quot;optimize.py&quot; v0.5); the original algorithm is also modified
                  &lt;ul&gt;
                  &lt;li&gt;to use an initial guess provided by the user,&lt;/li&gt;
                  &lt;li&gt;to ensure that the best point encountered is the one returned.&lt;/li&gt;
                  &lt;/ul&gt;                
                <version>
                    $Id: BrentOptimizer.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="GOLDEN_SECTION" type="double" line="45"/>
            <javadoc line="45">
                Golden section.                
            </javadoc>
            <declaration name="MIN_RELATIVE_TOLERANCE" type="double" line="49"/>
            <javadoc line="49">
                Minimum relative tolerance.                
            </javadoc>
            <declaration name="relativeThreshold" type="double" line="53"/>
            <javadoc line="53">
                Relative threshold.                
            </javadoc>
            <declaration name="absoluteThreshold" type="double" line="57"/>
            <javadoc line="57">
                Absolute threshold.                
            </javadoc>
            <javadoc line="62">
                The arguments are used implement the original stopping criterion
                  of Brent&apos;s algorithm.{@code abs} and {@code rel} define a tolerance{@code tol = rel |x| + abs}. {@code rel} should be no smaller than
                  &lt;em&gt;2 macheps&lt;/em&gt; and preferably not much less than &lt;em&gt;sqrt(macheps)&lt;/em&gt;,
                  where &lt;em&gt;macheps&lt;/em&gt; is the relative machine precision. {@code abs} must
                  be positive.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <param>
                    checker Additional, user-defined, convergence checking
                      procedure.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs &lt;= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel &lt; 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="BrentOptimizer" type="constructor" line="80">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="checker" type="ConvergenceChecker<UnivariatePointValuePair>"/>
                </params>
                <scope line="83"/>
                <scope line="86"/>
            </method>
            <javadoc line="94">
                The arguments are used for implementing the original stopping criterion
                  of Brent&apos;s algorithm.{@code abs} and {@code rel} define a tolerance{@code tol = rel |x| + abs}. {@code rel} should be no smaller than
                  &lt;em&gt;2 macheps&lt;/em&gt; and preferably not much less than &lt;em&gt;sqrt(macheps)&lt;/em&gt;,
                  where &lt;em&gt;macheps&lt;/em&gt; is the relative machine precision. {@code abs} must
                  be positive.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs &lt;= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel &lt; 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="BrentOptimizer" type="constructor" line="109">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                </params>
            </method>
            <javadoc line="113">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="UnivariatePointValuePair" line="115">
                <comment line="122">
                    Optional additional convergence criteria.                    
                </comment>
                <comment line="151">
                    Best point encountered so far (which is the initial guess).                    
                </comment>
                <comment line="160">
                    Default stopping criterion.                    
                </comment>
                <comment line="168">
                    Fit parabola.                    
                </comment>
                <comment line="186">
                    Parabolic interpolation step.                    
                </comment>
                <comment line="190">
                    f must not be evaluated too close to a or b.                    
                </comment>
                <comment line="199">
                    Golden section step.                    
                </comment>
                <comment line="208">
                    Golden section step.                    
                </comment>
                <comment line="217">
                    Update by at least &quot;tol1&quot;.                    
                </comment>
                <comment line="233">
                    User-defined convergence checker.                    
                </comment>
                <comment line="246">
                    Update a, b, v, w and x.                    
                </comment>
                <comment line="278">
                    Default termination (Brent&apos;s criterion).                    
                </comment>
                <declaration name="isMinim" type="boolean" line="116"/>
                <declaration name="lo" type="double" line="117"/>
                <declaration name="mid" type="double" line="118"/>
                <declaration name="hi" type="double" line="119"/>
                <declaration name="checker" type="ConvergenceChecker&lt;UnivariatePointValuePair&gt;" line="122"/>
                <declaration name="a" type="double" line="125"/>
                <declaration name="b" type="double" line="126"/>
                <scope line="127"/>
                <scope line="130"/>
                <declaration name="x" type="double" line="135"/>
                <declaration name="v" type="double" line="136"/>
                <declaration name="w" type="double" line="137"/>
                <declaration name="d" type="double" line="138"/>
                <declaration name="e" type="double" line="139"/>
                <declaration name="fx" type="double" line="140"/>
                <scope line="141"/>
                <declaration name="fv" type="double" line="144"/>
                <declaration name="fw" type="double" line="145"/>
                <declaration name="previous" type="UnivariatePointValuePair" line="147"/>
                <declaration name="current" type="UnivariatePointValuePair" line="148"/>
                <declaration name="best" type="UnivariatePointValuePair" line="151"/>
                <declaration name="iter" type="int" line="153"/>
                <scope line="154">
                    <declaration name="m" type="double" line="155"/>
                    <declaration name="tol1" type="double" line="156"/>
                    <declaration name="tol2" type="double" line="157"/>
                    <declaration name="stop" type="boolean" line="160"/>
                    <scope line="161">
                        <declaration name="p" type="double" line="162"/>
                        <declaration name="q" type="double" line="163"/>
                        <declaration name="r" type="double" line="164"/>
                        <declaration name="u" type="double" line="165"/>
                        <scope line="167">
                            <scope line="173"/>
                            <scope line="175"/>
                            <scope line="184">
                                <scope line="190">
                                    <scope line="191"/>
                                    <scope line="193"/>
                                </scope>
                            </scope>
                            <scope line="197">
                                <scope line="199"/>
                                <scope line="201"/>
                            </scope>
                        </scope>
                        <scope line="206">
                            <scope line="208"/>
                            <scope line="210"/>
                        </scope>
                        <scope line="217">
                            <scope line="218"/>
                            <scope line="220"/>
                        </scope>
                        <scope line="223"/>
                        <declaration name="fu" type="double" line="227"/>
                        <scope line="228"/>
                        <scope line="241"/>
                        <scope line="246">
                            <scope line="247"/>
                            <scope line="249"/>
                        </scope>
                        <scope line="258">
                            <scope line="259"/>
                            <scope line="261"/>
                            <scope line="265"/>
                            <scope line="272"/>
                        </scope>
                    </scope>
                    <scope line="277"/>
                </scope>
            </method>
            <javadoc line="288">
                Selects the best of two points.                
                <param>
                    a Point and value.                    
                </param>
                <param>
                    b Point and value.                    
                </param>
                <param>
                    isMinim {@code true} if the selected point must be the one with
                      the lowest value.                    
                </param>
                <return>
                    the best point, or {@code null} if {@code a} and {@code b} are
                      both {@code null}. When {@code a} and {@code b} have the same function
                      value, {@code a} is returned.                    
                </return>
            </javadoc>
            <method name="best" type="UnivariatePointValuePair" line="301">
                <params>
                    <param name="a" type="UnivariatePointValuePair"/>
                    <param name="b" type="UnivariatePointValuePair"/>
                    <param name="isMinim" type="boolean"/>
                </params>
                <scope line="302"/>
                <scope line="305"/>
                <scope line="309"/>
                <scope line="311"/>
            </method>
        </class>
    </source>