<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.univariate">
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <class name="BrentOptimizer" line="8">
            <extends class="UnivariateOptimizer"/>
            <javadoc line="8">
                For a function defined on some interval {@code (lo, hi)}, this class
                  finds an approximation {@code x} to the point at which the function
                  attains its minimum.
                  It implements Richard Brent&apos;s algorithm (from his book &quot;Algorithms for
                  Minimization without Derivatives&quot;, p. 79) for finding minima of real
                  univariate functions.
                  &lt;br/&gt;
                  This code is an adaptation, partly based on the Python code from SciPy
                  (module &quot;optimize.py&quot; v0.5); the original algorithm is also modified
                  &lt;ul&gt;
                  &lt;li&gt;to use an initial guess provided by the user,&lt;/li&gt;
                  &lt;li&gt;to ensure that the best point encountered is the one returned.&lt;/li&gt;
                  &lt;/ul&gt;                
                <version>
                    $Id: BrentOptimizer.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="GOLDEN_SECTION" type="double" line="26"/>
            <javadoc line="26">
                Golden section.                
            </javadoc>
            <declaration name="MIN_RELATIVE_TOLERANCE" type="double" line="30"/>
            <javadoc line="30">
                Minimum relative tolerance.                
            </javadoc>
            <declaration name="relativeThreshold" type="double" line="34"/>
            <javadoc line="34">
                Relative threshold.                
            </javadoc>
            <declaration name="absoluteThreshold" type="double" line="38"/>
            <javadoc line="38">
                Absolute threshold.                
            </javadoc>
            <javadoc line="42">
                The arguments are used implement the original stopping criterion
                  of Brent&apos;s algorithm.{@code abs} and {@code rel} define a tolerance{@code tol = rel |x| + abs}. {@code rel} should be no smaller than
                  &lt;em&gt;2 macheps&lt;/em&gt; and preferably not much less than &lt;em&gt;sqrt(macheps)&lt;/em&gt;,
                  where &lt;em&gt;macheps&lt;/em&gt; is the relative machine precision. {@code abs} must
                  be positive.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <param>
                    checker Additional, user-defined, convergence checking
                      procedure.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel < 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="BrentOptimizer" type="constructor" line="55">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                    <param name="checker" type="ConvergenceChecker<UnivariatePointValuePair>"/>
                </params>
                <scope line="57"/>
                <scope line="60"/>
            </method>
            <javadoc line="66">
                The arguments are used for implementing the original stopping criterion
                  of Brent&apos;s algorithm.{@code abs} and {@code rel} define a tolerance{@code tol = rel |x| + abs}. {@code rel} should be no smaller than
                  &lt;em&gt;2 macheps&lt;/em&gt; and preferably not much less than &lt;em&gt;sqrt(macheps)&lt;/em&gt;,
                  where &lt;em&gt;macheps&lt;/em&gt; is the relative machine precision. {@code abs} must
                  be positive.                
                <param>
                    rel Relative threshold.                    
                </param>
                <param>
                    abs Absolute threshold.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code abs <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code rel < 2  Math.ulp(1d)}.                    
                </throws>
            </javadoc>
            <method name="BrentOptimizer" type="constructor" line="77">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                </params>
            </method>
            <javadoc line="80">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="UnivariatePointValuePair" line="83">
                <declaration name="isMinim" type="boolean" line="84"/>
                <declaration name="lo" type="double" line="85"/>
                <declaration name="mid" type="double" line="86"/>
                <declaration name="hi" type="double" line="87"/>
                <declaration name="checker" type="ConvergenceChecker&lt;UnivariatePointValuePair&gt;" line="88"/>
                <declaration name="a" type="double" line="89"/>
                <declaration name="b" type="double" line="90"/>
                <scope line="91"/>
                <scope line="95"/>
                <declaration name="x" type="double" line="99"/>
                <declaration name="v" type="double" line="100"/>
                <declaration name="w" type="double" line="101"/>
                <declaration name="d" type="double" line="102"/>
                <declaration name="e" type="double" line="103"/>
                <declaration name="fx" type="double" line="104"/>
                <scope line="105"/>
                <declaration name="fv" type="double" line="108"/>
                <declaration name="fw" type="double" line="109"/>
                <declaration name="previous" type="UnivariatePointValuePair" line="110"/>
                <declaration name="current" type="UnivariatePointValuePair" line="111"/>
                <declaration name="best" type="UnivariatePointValuePair" line="112"/>
                <declaration name="iter" type="int" line="113"/>
                <scope line="114">
                    <declaration name="m" type="double" line="115"/>
                    <declaration name="tol1" type="double" line="116"/>
                    <declaration name="tol2" type="double" line="117"/>
                    <declaration name="stop" type="boolean" line="118"/>
                    <scope line="119">
                        <declaration name="p" type="double" line="120"/>
                        <declaration name="q" type="double" line="121"/>
                        <declaration name="r" type="double" line="122"/>
                        <declaration name="u" type="double" line="123"/>
                        <scope line="124">
                            <scope line="129"/>
                            <scope line="132"/>
                            <scope line="137">
                                <scope line="140">
                                    <scope line="141"/>
                                    <scope line="144"/>
                                </scope>
                            </scope>
                            <scope line="149">
                                <scope line="150"/>
                                <scope line="153"/>
                            </scope>
                        </scope>
                        <scope line="159">
                            <scope line="160"/>
                            <scope line="163"/>
                        </scope>
                        <scope line="168">
                            <scope line="169"/>
                            <scope line="172"/>
                        </scope>
                        <scope line="176"/>
                        <declaration name="fu" type="double" line="179"/>
                        <scope line="180"/>
                        <scope line="186"/>
                        <scope line="189">
                            <scope line="190"/>
                            <scope line="193"/>
                        </scope>
                        <scope line="203">
                            <scope line="204"/>
                            <scope line="207"/>
                            <scope line="210"/>
                            <scope line="216"/>
                        </scope>
                    </scope>
                    <scope line="222"/>
                </scope>
            </method>
            <javadoc line="228">
                Selects the best of two points.                
                <param>
                    a Point and value.                    
                </param>
                <param>
                    b Point and value.                    
                </param>
                <param>
                    isMinim {@code true} if the selected point must be the one with
                      the lowest value.                    
                </param>
                <return>
                    the best point, or {@code null} if {@code a} and {@code b} are
                      both {@code null}. When {@code a} and {@code b} have the same function
                      value, {@code a} is returned.                    
                </return>
            </javadoc>
            <method name="best" type="UnivariatePointValuePair" line="238">
                <params>
                    <param name="a" type="UnivariatePointValuePair"/>
                    <param name="b" type="UnivariatePointValuePair"/>
                    <param name="isMinim" type="boolean"/>
                </params>
                <scope line="239"/>
                <scope line="242"/>
                <scope line="245"/>
                <scope line="248"/>
            </method>
        </class>
    </source>