<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.complex">
        <import package="java.text.FieldPosition"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathParseException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.CompositeFormat"/>
        <class name="ComplexFormat" line="12">
            <javadoc line="12">
                Formats a Complex number in cartesian format &quot;Re(c) + Im(c)i&quot;.  &apos;i&apos; can
                  be replaced with &apos;j&apos; (or anything else), and the number format for both real
                  and imaginary parts can be configured.                
                <version>
                    $Id: ComplexFormat.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_IMAGINARY_CHARACTER" type="String" line="19"/>
            <javadoc line="19">
                The default imaginary character.                
            </javadoc>
            <declaration name="imaginaryCharacter" type="String" line="23"/>
            <javadoc line="23">
                The notation used to signify the imaginary part of the complex number.                
            </javadoc>
            <declaration name="imaginaryFormat" type="NumberFormat" line="27"/>
            <javadoc line="27">
                The format used for the imaginary part.                
            </javadoc>
            <declaration name="realFormat" type="NumberFormat" line="31"/>
            <javadoc line="31">
                The format used for the real part.                
            </javadoc>
            <javadoc line="35">
                Create an instance with the default imaginary character, &apos;i&apos;, and the
                  default number format for both real and imaginary parts.                
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="39"/>
            <javadoc line="44">
                Create an instance with a custom number format for both real and
                  imaginary parts.                
                <param>
                    format the custom format for both real and imaginary parts.                    
                </param>
                <throws>
                    NullArgumentException if {@code realFormat} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="50">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
                <scope line="51"/>
            </method>
            <javadoc line="58">
                Create an instance with a custom number format for the real part and a
                  custom number format for the imaginary part.                
                <param>
                    realFormat the custom format for the real part.                    
                </param>
                <param>
                    imaginaryFormat the custom format for the imaginary part.                    
                </param>
                <throws>
                    NullArgumentException if {@code imaginaryFormat} is {@code null}.                    
                </throws>
                <throws>
                    NullArgumentException if {@code realFormat} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="66">
                <params>
                    <param name="realFormat" type="NumberFormat"/>
                    <param name="imaginaryFormat" type="NumberFormat"/>
                </params>
                <scope line="67"/>
                <scope line="70"/>
            </method>
            <javadoc line="77">
                Create an instance with a custom imaginary character, and the default
                  number format for both real and imaginary parts.                
                <param>
                    imaginaryCharacter The custom imaginary character.                    
                </param>
                <throws>
                    NullArgumentException if {@code imaginaryCharacter} is{@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code imaginaryCharacter} is an
                      empty string.                    
                </throws>
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="85">
                <params>
                    <param name="imaginaryCharacter" type="String"/>
                </params>
            </method>
            <javadoc line="88">
                Create an instance with a custom imaginary character, and a custom number
                  format for both real and imaginary parts.                
                <param>
                    imaginaryCharacter The custom imaginary character.                    
                </param>
                <param>
                    format the custom format for both real and imaginary parts.                    
                </param>
                <throws>
                    NullArgumentException if {@code imaginaryCharacter} is{@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code imaginaryCharacter} is an
                      empty string.                    
                </throws>
                <throws>
                    NullArgumentException if {@code format} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="98">
                <params>
                    <param name="imaginaryCharacter" type="String"/>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="101">
                Create an instance with a custom imaginary character, a custom number
                  format for the real part, and a custom number format for the imaginary
                  part.                
                <param>
                    imaginaryCharacter The custom imaginary character.                    
                </param>
                <param>
                    realFormat the custom format for the real part.                    
                </param>
                <param>
                    imaginaryFormat the custom format for the imaginary part.                    
                </param>
                <throws>
                    NullArgumentException if {@code imaginaryCharacter} is{@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code imaginaryCharacter} is an
                      empty string.                    
                </throws>
                <throws>
                    NullArgumentException if {@code imaginaryFormat} is {@code null}.                    
                </throws>
                <throws>
                    NullArgumentException if {@code realFormat} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="ComplexFormat" type="constructor" line="114">
                <params>
                    <param name="imaginaryCharacter" type="String"/>
                    <param name="realFormat" type="NumberFormat"/>
                    <param name="imaginaryFormat" type="NumberFormat"/>
                </params>
                <scope line="115"/>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="124"/>
            </method>
            <javadoc line="131">
                Get the set of locales for which complex formats are available.
                  &lt;p&gt;This is the same set as the {@link NumberFormat} set.&lt;/p&gt;                
                <return>
                    available complex format locales.                    
                </return>
            </javadoc>
            <method name="getAvailableLocales" type="Locale[]" line="136"/>
            <javadoc line="139">
                This method calls {@link #format(Object,StringBuffer,FieldPosition)}.                
                <param>
                    c Complex object to format.                    
                </param>
                <return>
                    A formatted number in the form "Re(c) + Im(c)i".                    
                </return>
            </javadoc>
            <method name="format" type="String" line="144">
                <params>
                    <param name="c" type="Complex"/>
                </params>
            </method>
            <javadoc line="147">
                This method calls {@link #format(Object,StringBuffer,FieldPosition)}.                
                <param>
                    c Double object to format.                    
                </param>
                <return>
                    A formatted number.                    
                </return>
            </javadoc>
            <method name="format" type="String" line="152">
                <params>
                    <param name="c" type="Double"/>
                </params>
            </method>
            <javadoc line="155">
                Formats a {@link Complex} object to produce a string.                
                <param>
                    complex the object to format.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended                    
                </param>
                <param>
                    pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </param>
                <return>
                    the value passed in as toAppendTo.                    
                </return>
            </javadoc>
            <method name="format" type="StringBuffer" line="163">
                <params>
                    <param name="complex" type="Complex"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <declaration name="re" type="double" line="166"/>
                <declaration name="im" type="double" line="168"/>
                <declaration name="imAppendTo" type="StringBuffer" line="169"/>
                <scope line="170"/>
                <scope line="176"/>
            </method>
            <javadoc line="184">
                Format the absolute value of the imaginary part.                
                <param>
                    absIm Absolute value of the imaginary part of a complex number.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended.                    
                </param>
                <param>
                    pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field.                    
                </param>
                <return>
                    the value passed in as toAppendTo.                    
                </return>
            </javadoc>
            <method name="formatImaginary" type="StringBuffer" line="192">
                <params>
                    <param name="absIm" type="double"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <scope line="196"/>
            </method>
            <javadoc line="201">
                Formats a object to produce a string.  {@code obj} must be either a{@link Complex} object or a {@link Number} object.  Any other type of
                  object will result in an {@link IllegalArgumentException} being thrown.                
                <param>
                    obj the object to format.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended                    
                </param>
                <param>
                    pos On input: an alignment field, if desired. On output: the
                      offsets of the alignment field                    
                </param>
                <return>
                    the value passed in as toAppendTo.                    
                </return>
                <see>
                    java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)                    
                </see>
                <throws>
                    MathIllegalArgumentException is {@code obj} is not a valid type.                    
                </throws>
            </javadoc>
            <method name="format" type="StringBuffer" line="212">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <declaration name="ret" type="StringBuffer" line="213"/>
                <scope line="214"/>
                <scope line="217"/>
                <scope line="220"/>
            </method>
            <javadoc line="225">
                Access the imaginaryCharacter.                
                <return>
                    the imaginaryCharacter.                    
                </return>
            </javadoc>
            <method name="getImaginaryCharacter" type="String" line="229"/>
            <javadoc line="232">
                Access the imaginaryFormat.                
                <return>
                    the imaginaryFormat.                    
                </return>
            </javadoc>
            <method name="getImaginaryFormat" type="NumberFormat" line="236"/>
            <javadoc line="239">
                Returns the default complex format for the current locale.                
                <return>
                    the default complex format.                    
                </return>
            </javadoc>
            <method name="getInstance" type="ComplexFormat" line="243"/>
            <javadoc line="246">
                Returns the default complex format for the given locale.                
                <param>
                    locale the specific locale used by the format.                    
                </param>
                <return>
                    the complex format specific to the given locale.                    
                </return>
            </javadoc>
            <method name="getInstance" type="ComplexFormat" line="251">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="f" type="NumberFormat" line="252"/>
            </method>
            <javadoc line="255">
                Returns the default complex format for the given locale.                
                <param>
                    locale the specific locale used by the format.                    
                </param>
                <param>
                    imaginaryCharacter Imaginary character.                    
                </param>
                <return>
                    the complex format specific to the given locale.                    
                </return>
                <throws>
                    NullArgumentException if {@code imaginaryCharacter} is{@code null}.                    
                </throws>
                <throws>
                    NoDataException if {@code imaginaryCharacter} is an
                      empty string.                    
                </throws>
            </javadoc>
            <method name="getInstance" type="ComplexFormat" line="264">
                <params>
                    <param name="imaginaryCharacter" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="f" type="NumberFormat" line="265"/>
            </method>
            <javadoc line="268">
                Access the realFormat.                
                <return>
                    the realFormat.                    
                </return>
            </javadoc>
            <method name="getRealFormat" type="NumberFormat" line="272"/>
            <javadoc line="275">
                Parses a string to produce a {@link Complex} object.                
                <param>
                    source the string to parse.                    
                </param>
                <return>
                    the parsed {@link Complex} object.                    
                </return>
                <throws>
                    MathParseException if the beginning of the specified string
                      cannot be parsed.                    
                </throws>
            </javadoc>
            <method name="parse" type="Complex" line="282">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="parsePosition" type="ParsePosition" line="283"/>
                <declaration name="result" type="Complex" line="284"/>
                <scope line="285"/>
            </method>
            <javadoc line="290">
                Parses a string to produce a {@link Complex} object.                
                <param>
                    source the string to parse                    
                </param>
                <param>
                    pos input/ouput parsing parameter.                    
                </param>
                <return>
                    the parsed {@link Complex} object.                    
                </return>
            </javadoc>
            <method name="parse" type="Complex" line="296">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <declaration name="initialIndex" type="int" line="297"/>
                <declaration name="re" type="Number" line="299"/>
                <scope line="300"/>
                <declaration name="startIndex" type="int" line="304"/>
                <declaration name="c" type="char" line="305"/>
                <declaration name="sign" type="int" line="306"/>
                <declaration name="im" type="Number" line="322"/>
                <scope line="323"/>
                <scope line="327"/>
            </method>
        </class>
    </source>