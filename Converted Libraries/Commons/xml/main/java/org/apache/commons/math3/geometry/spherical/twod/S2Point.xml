<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.spherical.twod">
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.Space"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Vector3D"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="S2Point" line="27">
            <comment line="60">
                CHECKSTYLE: stop ConstantName                
            </comment>
            <comment line="63">
                CHECKSTYLE: resume ConstantName                
            </comment>
            <implements interface="Point">
                <type_params>
                    <type_param name="Sphere2D"/>
                </type_params>
            </implements>
            <javadoc line="27">
                This class represents a point on the 2-sphere.
                  &lt;p&gt;
                  We use the mathematical convention to use the azimuthal angle \( \theta \)
                  in the x-y plane as the first coordinate, and the polar angle \( \varphi \)
                  as the second coordinate (see &lt;a
                  href=&quot;http://mathworld.wolfram.com/SphericalCoordinates.html&quot;&gt;Spherical
                  Coordinates&lt;/a&gt; in MathWorld).
                  &lt;/p&gt;
                  &lt;p&gt;Instances of this class are guaranteed to be immutable.&lt;/p&gt;                
                <version>
                    $Id: S2Point.java 1554651 2014-01-01 17:27:48Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="PLUS_I" type="S2Point" line="41"/>
            <javadoc line="41">
                +I (coordinates: \( \theta = 0, \varphi = \pi/2 \)).                
            </javadoc>
            <declaration name="PLUS_J" type="S2Point" line="44"/>
            <javadoc line="44">
                +J (coordinates: \( \theta = \pi/2, \varphi = \pi/2 \))).                
            </javadoc>
            <declaration name="PLUS_K" type="S2Point" line="47"/>
            <javadoc line="47">
                +K (coordinates: \( \theta = any angle, \varphi = 0 \)).                
            </javadoc>
            <declaration name="MINUS_I" type="S2Point" line="50"/>
            <javadoc line="50">
                -I (coordinates: \( \theta = \pi, \varphi = \pi/2 \)).                
            </javadoc>
            <declaration name="MINUS_J" type="S2Point" line="53"/>
            <javadoc line="53">
                -J (coordinates: \( \theta = 3\pi/2, \varphi = \pi/2 \)).                
            </javadoc>
            <declaration name="MINUS_K" type="S2Point" line="56"/>
            <javadoc line="56">
                -K (coordinates: \( \theta = any angle, \varphi = \pi \)).                
            </javadoc>
            <declaration name="NaN" type="S2Point" line="60"/>
            <javadoc line="60">
                A vector with all coordinates set to NaN.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="64"/>
            <javadoc line="64">
                Serializable UID.                
            </javadoc>
            <declaration name="theta" type="double" line="67"/>
            <javadoc line="67">
                Azimuthal angle \( \theta \) in the x-y plane.                
            </javadoc>
            <declaration name="phi" type="double" line="70"/>
            <javadoc line="70">
                Polar angle \( \varphi \).                
            </javadoc>
            <declaration name="vector" type="Vector3D" line="73"/>
            <javadoc line="73">
                Corresponding 3D normalized vector.                
            </javadoc>
            <javadoc line="76">
                Simple constructor.
                  Build a vector from its spherical coordinates                
                <param>
                    theta azimuthal angle \( \theta \) in the x-y plane                    
                </param>
                <param>
                    phi polar angle \( \varphi \)                    
                </param>
                <see>
                    #getTheta()                    
                </see>
                <see>
                    #getPhi()                    
                </see>
                <exception>
                    OutOfRangeException if \( \varphi \) is not in the [\( 0; \pi \)] range                    
                </exception>
            </javadoc>
            <method name="S2Point" type="constructor" line="85">
                <params>
                    <param name="theta" type="double"/>
                    <param name="phi" type="double"/>
                </params>
            </method>
            <javadoc line="89">
                Simple constructor.
                  Build a vector from its underlying 3D vector                
                <param>
                    vector 3D vector                    
                </param>
                <exception>
                    MathArithmeticException if vector norm is zero                    
                </exception>
            </javadoc>
            <method name="S2Point" type="constructor" line="94">
                <params>
                    <param name="vector" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="99">
                Build a point from its internal components.                
                <param>
                    theta azimuthal angle \( \theta \) in the x-y plane                    
                </param>
                <param>
                    phi polar angle \( \varphi \)                    
                </param>
                <param>
                    vector corresponding vector                    
                </param>
            </javadoc>
            <method name="S2Point" type="constructor" line="104">
                <params>
                    <param name="theta" type="double"/>
                    <param name="phi" type="double"/>
                    <param name="vector" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="110">
                Build the normalized vector corresponding to spherical coordinates.                
                <param>
                    theta azimuthal angle \( \theta \) in the x-y plane                    
                </param>
                <param>
                    phi polar angle \( \varphi \)                    
                </param>
                <return>
                    normalized vector                    
                </return>
                <exception>
                    OutOfRangeException if \( \varphi \) is not in the [\( 0; \pi \)] range                    
                </exception>
            </javadoc>
            <method name="vector" type="Vector3D" line="117">
                <params>
                    <param name="theta" type="double"/>
                    <param name="phi" type="double"/>
                </params>
                <scope line="119"/>
                <declaration name="cosTheta" type="double" line="123"/>
                <declaration name="sinTheta" type="double" line="124"/>
                <declaration name="cosPhi" type="double" line="125"/>
                <declaration name="sinPhi" type="double" line="126"/>
            </method>
            <javadoc line="132">
                Get the azimuthal angle \( \theta \) in the x-y plane.                
                <return>
                    azimuthal angle \( \theta \) in the x-y plane                    
                </return>
                <see>
                    #S2Point(double,double)                    
                </see>
            </javadoc>
            <method name="getTheta" type="double" line="136"/>
            <javadoc line="140">
                Get the polar angle \( \varphi \).                
                <return>
                    polar angle \( \varphi \)                    
                </return>
                <see>
                    #S2Point(double,double)                    
                </see>
            </javadoc>
            <method name="getPhi" type="double" line="144"/>
            <javadoc line="148">
                Get the corresponding normalized vector in the 3D euclidean space.                
                <return>
                    normalized vector                    
                </return>
            </javadoc>
            <method name="getVector" type="Vector3D" line="151"/>
            <javadoc line="155">
                {@inheritDoc}                
            </javadoc>
            <method name="getSpace" type="Space" line="156"/>
            <javadoc line="160">
                {@inheritDoc}                
            </javadoc>
            <method name="isNaN" type="boolean" line="161"/>
            <javadoc line="165">
                Get the opposite of the instance.                
                <return>
                    a new vector which is opposite to the instance                    
                </return>
            </javadoc>
            <method name="negate" type="S2Point" line="168"/>
            <javadoc line="172">
                {@inheritDoc}                
            </javadoc>
            <method name="distance" type="double" line="173">
                <params>
                    <param name="point" type="Point&lt;Sphere2D&gt;"/>
                </params>
            </method>
            <javadoc line="177">
                Compute the distance (angular separation) between two points.                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the angular separation between p1 and p2                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="182">
                <params>
                    <param name="p1" type="S2Point"/>
                    <param name="p2" type="S2Point"/>
                </params>
            </method>
            <javadoc line="186">
                Test for the equality of two points on the 2-sphere.
                  &lt;p&gt;
                  If all coordinates of two points are exactly the same, and none are
                  &lt;code&gt;Double.NaN&lt;/code&gt;, the two points are considered to be equal.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;NaN&lt;/code&gt; coordinates are considered to affect globally the vector
                  and be equals to each other - i.e, if either (or all) coordinates of the
                  2D vector are equal to &lt;code&gt;Double.NaN&lt;/code&gt;, the 2D vector is equal to{@link #NaN}.
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two points on the 2-sphere objects are equal, false if
                      object is null, not an instance of S2Point, or
                      not equal to this S2Point instance                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="206">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="208"/>
                <scope line="212">
                    <declaration name="rhs" type="S2Point" line="213"/>
                    <scope line="214"/>
                </scope>
            </method>
            <javadoc line="223">
                Get a hashCode for the 2D vector.
                  &lt;p&gt;
                  All NaN values have the same hash code.&lt;/p&gt;                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="231">
                <scope line="232"/>
            </method>
        </class>
    </source>