<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod.hull">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.InsufficientDataException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Line"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Segment"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.geometry.hull.ConvexHull"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Region"/>
        <import package="org.apache.commons.math3.geometry.partitioning.RegionFactory"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="ConvexHull2D" line="34">
            <implements interface="ConvexHull">
                <type_params>
                    <type_param name="Euclidean2D"/>
                    <type_param name="Vector2D"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="34">
                This class represents a convex hull in an two-dimensional euclidean space.                
                <version>
                    $Id: ConvexHull2D.java 1568752 2014-02-16 12:19:51Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <javadoc line="42">
                Serializable UID.                
            </javadoc>
            <declaration name="vertices" type="Vector2D[]" line="45"/>
            <javadoc line="45">
                Vertices of the hull.                
            </javadoc>
            <declaration name="tolerance" type="double" line="48"/>
            <javadoc line="48">
                Tolerance threshold used during creation of the hull vertices.                
            </javadoc>
            <declaration name="lineSegments" type="Segment[]" line="51"/>
            <javadoc line="51">
                Line segments of the hull.
                  The array is not serialized and will be created from the vertices on first access.                
            </javadoc>
            <javadoc line="57">
                Simple constructor.                
                <param>
                    vertices the vertices of the convex hull, must be ordered                    
                </param>
                <param>
                    tolerance tolerance below which points are considered identical                    
                </param>
                <throws>
                    MathIllegalArgumentException if the vertices do not form a convex hull                    
                </throws>
            </javadoc>
            <method name="ConvexHull2D" type="constructor" line="64">
                <params>
                    <param name="vertices" type="Vector2D[]"/>
                    <param name="tolerance" type="double"/>
                </params>
                <scope line="66"/>
            </method>
            <javadoc line="74">
                Checks whether the given hull vertices form a convex hull.                
                <param>
                    hullVertices the hull vertices                    
                </param>
                <return>
                    {@code true} if the vertices form a convex hull, {@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isConvex" type="boolean" line="79">
                <params>
                    <param name="hullVertices" type="Vector2D[]"/>
                </params>
                <comment line="96">
                    in case of collinear points the cross product will be zero                    
                </comment>
                <scope line="80"/>
                <declaration name="sign" type="double" line="84"/>
                <scope line="85">
                    <declaration name="p1" type="Vector2D" line="86"/>
                    <declaration name="p2" type="Vector2D" line="87"/>
                    <declaration name="p3" type="Vector2D" line="88"/>
                    <declaration name="d1" type="Vector2D" line="90"/>
                    <declaration name="d2" type="Vector2D" line="91"/>
                    <declaration name="cross" type="double" line="93"/>
                    <scope line="96">
                        <scope line="97"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="107">
                {@inheritDoc}                
            </javadoc>
            <method name="getVertices" type="Vector2D[]" line="108"/>
            <javadoc line="112">
                Get the line segments of the convex hull, ordered.                
                <return>
                    the line segments of the convex hull                    
                </return>
            </javadoc>
            <method name="getLineSegments" type="Segment[]" line="116"/>
            <javadoc line="120">
                Retrieve the line segments from the cached array or create them if needed.                
                <return>
                    the array of line segments                    
                </return>
            </javadoc>
            <method name="retrieveLineSegments" type="Segment[]" line="125">
                <comment line="128">
                    construct the line segments - handle special cases of 1 or 2 points                    
                </comment>
                <scope line="126">
                    <declaration name="size" type="int" line="128"/>
                    <scope line="129"/>
                    <scope line="131">
                        <declaration name="p1" type="Vector2D" line="133"/>
                        <declaration name="p2" type="Vector2D" line="134"/>
                    </scope>
                    <scope line="136">
                        <declaration name="firstPoint" type="Vector2D" line="138"/>
                        <declaration name="lastPoint" type="Vector2D" line="139"/>
                        <declaration name="index" type="int" line="140"/>
                        <scope line="141">
                            <scope line="142"/>
                            <scope line="145"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="158">
                {@inheritDoc}                
            </javadoc>
            <method name="createRegion" type="Region&lt;Euclidean2D&gt;" line="159">
                <scope line="160"/>
                <declaration name="factory" type="RegionFactory&amp;lt;Euclidean2D&amp;gt;" line="163"/>
                <declaration name="segments" type="Segment[]" line="164"/>
                <declaration name="lineArray" type="Line[]" line="165"/>
                <scope line="166"/>
            </method>
        </class>
    </source>