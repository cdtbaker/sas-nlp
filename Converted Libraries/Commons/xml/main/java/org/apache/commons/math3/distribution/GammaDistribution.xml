<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Gamma"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="GammaDistribution" line="26">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="26">
                Implementation of the Gamma distribution.                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Gamma_distribution&quot;&gt;Gamma distribution (Wikipedia)&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/GammaDistribution.html&quot;&gt;Gamma distribution (MathWorld)&lt;/a&gt;                    
                </see>
                <version>
                    $Id: GammaDistribution.java 1534362 2013-10-21 20:23:54Z tn $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="34"/>
            <javadoc line="34">
                Default inverse cumulative probability accuracy.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <javadoc line="39">
                Serializable version identifier.                
            </javadoc>
            <declaration name="shape" type="double" line="41"/>
            <javadoc line="41">
                The shape parameter.                
            </javadoc>
            <declaration name="scale" type="double" line="43"/>
            <javadoc line="43">
                The scale parameter.                
            </javadoc>
            <declaration name="shiftedShape" type="double" line="45"/>
            <javadoc line="45">
                The constant value of {@code shape + g + 0.5}, where {@code g} is the
                  Lanczos constant {@link Gamma#LANCZOS_G}.                
            </javadoc>
            <declaration name="densityPrefactor1" type="double" line="50"/>
            <javadoc line="50">
                The constant value of{@code shape / scale  sqrt(e / (2  pi  (shape + g + 0.5))) / L(shape)},
                  where {@code L(shape)} is the Lanczos approximation returned by{@link Gamma#lanczos(double)}. This prefactor is used in{@link #density(double)}, when no overflow occurs with the natural
                  calculation.                
            </javadoc>
            <declaration name="logDensityPrefactor1" type="double" line="59"/>
            <javadoc line="59">
                The constant value of{@code log(shape / scale  sqrt(e / (2  pi  (shape + g + 0.5))) / L(shape))},
                  where {@code L(shape)} is the Lanczos approximation returned by{@link Gamma#lanczos(double)}. This prefactor is used in{@link #logDensity(double)}, when no overflow occurs with the natural
                  calculation.                
            </javadoc>
            <declaration name="densityPrefactor2" type="double" line="68"/>
            <javadoc line="68">
                The constant value of{@code shape  sqrt(e / (2  pi  (shape + g + 0.5))) / L(shape)},
                  where {@code L(shape)} is the Lanczos approximation returned by{@link Gamma#lanczos(double)}. This prefactor is used in{@link #density(double)}, when overflow occurs with the natural
                  calculation.                
            </javadoc>
            <declaration name="logDensityPrefactor2" type="double" line="77"/>
            <javadoc line="77">
                The constant value of{@code log(shape  sqrt(e / (2  pi  (shape + g + 0.5))) / L(shape))},
                  where {@code L(shape)} is the Lanczos approximation returned by{@link Gamma#lanczos(double)}. This prefactor is used in{@link #logDensity(double)}, when overflow occurs with the natural
                  calculation.                
            </javadoc>
            <declaration name="minY" type="double" line="86"/>
            <javadoc line="86">
                Lower bound on {@code y = x / scale} for the selection of the computation
                  method in {@link #density(double)}. For {@code y &lt;= minY}, the natural
                  calculation overflows.                
            </javadoc>
            <declaration name="maxLogY" type="double" line="92"/>
            <javadoc line="92">
                Upper bound on {@code log(y)} ({@code y = x / scale}) for the selection
                  of the computation method in {@link #density(double)}. For{@code log(y) &gt;= maxLogY}, the natural calculation overflows.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="98"/>
            <javadoc line="98">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <javadoc line="101">
                Creates a new gamma distribution with specified values of the shape and
                  scale parameters.                
                <param>
                    shape the shape parameter                    
                </param>
                <param>
                    scale the scale parameter                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape &lt;= 0} or{@code scale &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="GammaDistribution" type="constructor" line="110">
                <params>
                    <param name="shape" type="double"/>
                    <param name="scale" type="double"/>
                </params>
            </method>
            <javadoc line="114">
                Creates a new gamma distribution with specified values of the shape and
                  scale parameters.                
                <param>
                    shape the shape parameter                    
                </param>
                <param>
                    scale the scale parameter                    
                </param>
                <param>
                    inverseCumAccuracy the maximum absolute error in inverse
                      cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape &lt;= 0} or{@code scale &lt;= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="GammaDistribution" type="constructor" line="128">
                <params>
                    <param name="shape" type="double"/>
                    <param name="scale" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="132">
                Creates a Gamma distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    shape the shape parameter                    
                </param>
                <param>
                    scale the scale parameter                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape &lt;= 0} or{@code scale &lt;= 0}.                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="GammaDistribution" type="constructor" line="143">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="shape" type="double"/>
                    <param name="scale" type="double"/>
                </params>
            </method>
            <javadoc line="147">
                Creates a Gamma distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    shape the shape parameter                    
                </param>
                <param>
                    scale the scale parameter                    
                </param>
                <param>
                    inverseCumAccuracy the maximum absolute error in inverse
                      cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape &lt;= 0} or{@code scale &lt;= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="GammaDistribution" type="constructor" line="164">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="shape" type="double"/>
                    <param name="scale" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
                <scope line="167"/>
                <scope line="170"/>
                <declaration name="aux" type="double" line="178"/>
            </method>
            <javadoc line="192">
                Returns the shape parameter of {@code this} distribution.                
                <return>
                    the shape parameter                    
                </return>
                <deprecated>
                    as of version 3.1, {@link #getShape()} should be preferred.
                      This method will be removed in version 4.0.                    
                </deprecated>
            </javadoc>
            <method name="getAlpha" type="double" line="200"/>
            <javadoc line="204">
                Returns the shape parameter of {@code this} distribution.                
                <return>
                    the shape parameter                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getShape" type="double" line="210"/>
            <javadoc line="214">
                Returns the scale parameter of {@code this} distribution.                
                <return>
                    the scale parameter                    
                </return>
                <deprecated>
                    as of version 3.1, {@link #getScale()} should be preferred.
                      This method will be removed in version 4.0.                    
                </deprecated>
            </javadoc>
            <method name="getBeta" type="double" line="222"/>
            <javadoc line="226">
                Returns the scale parameter of {@code this} distribution.                
                <return>
                    the scale parameter                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getScale" type="double" line="232"/>
            <javadoc line="236">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="237">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="239">
                    The present method must return the value of
                    
                         1       x a     - x
                     ---------- (-)  exp(---)
                     x Gamma(a)  b        b
                    
                     where a is the shape parameter, and b the scale parameter.
                     Substituting the Lanczos approximation of Gamma(a) leads to the
                     following expression of the density
                    
                     a              e            1         y      a
                     - sqrt(------------------) ---- (-----------)  exp(a - y + g),
                     x      2 pi (a + g + 0.5)  L(a)  a + g + 0.5
                    
                     where y = x  b. The above formula is the &quot;natural&quot; computation, which
                     is implemented when no overflow is likely to occur. If overflow occurs
                     with the natural computation, the following identity is used. It is
                     based on the BOOST library
                     http:www.boost.orgdoclibs1_35_0libsmathdocsf_and_disthtmlmath_toolkitspecialsf_gammaigamma.html
                     Formula (15) needs adaptations, which are detailed below.
                    
                           y      a
                     (-----------)  exp(a - y + g)
                      a + g + 0.5
                                                  y - a - g - 0.5    y (g + 0.5)
                                   = exp(a log1pm(---------------) - ----------- + g),
                                                    a + g + 0.5      a + g + 0.5
                    
                      where log1pm(z) = log(1 + z) - z. Therefore, the value to be
                      returned is
                    
                     a              e            1
                     - sqrt(------------------) ----
                     x      2 pi (a + g + 0.5)  L(a)
                                                  y - a - g - 0.5    y (g + 0.5)
                                    exp(a log1pm(---------------) - ----------- + g).
                                                    a + g + 0.5      a + g + 0.5                    
                </comment>
                <comment line="282">
                    Overflow.                    
                </comment>
                <comment line="291">
                    Natural calculation.                    
                </comment>
                <scope line="276"/>
                <declaration name="y" type="double" line="279"/>
                <scope line="280">
                    <declaration name="aux1" type="double" line="284"/>
                    <declaration name="aux2" type="double" line="285"/>
                    <declaration name="aux3" type="double" line="286"/>
                </scope>
            </method>
            <javadoc line="296">
                {@inheritDoc}                
            </javadoc>
            <method name="logDensity" type="double" line="298">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="300">
                    see the comment in {@link #density(double)} for computation details                    
                </comment>
                <comment line="308">
                    Overflow.                    
                </comment>
                <comment line="317">
                    Natural calculation.                    
                </comment>
                <scope line="302"/>
                <declaration name="y" type="double" line="305"/>
                <scope line="306">
                    <declaration name="aux1" type="double" line="310"/>
                    <declaration name="aux2" type="double" line="311"/>
                    <declaration name="aux3" type="double" line="312"/>
                </scope>
            </method>
            <javadoc line="322">
                {@inheritDoc}The implementation of this method is based on:
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/Chi-SquaredDistribution.html&quot;&gt;
                  Chi-Squared Distribution&lt;/a&gt;, equation (9).
                  &lt;/li&gt;
                  &lt;li&gt;Casella, G., &amp; Berger, R. (1990). &lt;i&gt;Statistical Inference&lt;/i&gt;.
                  Belmont, CA: Duxbury Press.
                  &lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="336">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="ret" type="double" line="337"/>
                <scope line="339"/>
                <scope line="341"/>
            </method>
            <javadoc line="348">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="350"/>
            <javadoc line="354">
                {@inheritDoc}For shape parameter {@code alpha} and scale parameter {@code beta}, the
                  mean is {@code alpha  beta}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="360"/>
            <javadoc line="364">
                {@inheritDoc}For shape parameter {@code alpha} and scale parameter {@code beta}, the
                  variance is {@code alpha  beta^2}.                
                <return>
                    {@inheritDoc}                    
                </return>
            </javadoc>
            <method name="getNumericalVariance" type="double" line="372"/>
            <javadoc line="376">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="383"/>
            <javadoc line="387">
                {@inheritDoc}The upper bound of the support is always positive infinity
                  no matter the parameters.                
                <return>
                    upper bound of the support (always Double.POSITIVE_INFINITY)                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="395"/>
            <javadoc line="399">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="400"/>
            <javadoc line="404">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="405"/>
            <javadoc line="409">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="416"/>
            <javadoc line="420">
                &lt;p&gt;This implementation uses the following algorithms: &lt;/p&gt;
                  &lt;p&gt;For 0 &lt; shape &lt; 1: &lt;br/&gt;
                  Ahrens, J. H. and Dieter, U., &lt;i&gt;Computer methods for
                  sampling from gamma, beta, Poisson and binomial distributions.&lt;/i&gt;
                  Computing, 12, 223-246, 1974.&lt;/p&gt;
                  &lt;p&gt;For shape &gt;= 1: &lt;br/&gt;
                  Marsaglia and Tsang, &lt;i&gt;A Simple Method for Generating
                  Gamma Variables.&lt;/i&gt; ACM Transactions on Mathematical Software,
                  Volume 26 Issue 3, September, 2000.&lt;/p&gt;                
                <return>
                    random value sampled from the Gamma(shape, scale) distribution                    
                </return>
            </javadoc>
            <method name="sample" type="double" line="436">
                <comment line="439">
                    [1]: p. 228, Algorithm GS                    
                </comment>
                <comment line="442">
                    Step 1:                    
                </comment>
                <comment line="448">
                    Step 2:                    
                </comment>
                <comment line="454">
                    Reject                    
                </comment>
                <comment line="460">
                    Step 3:                    
                </comment>
                <comment line="466">
                    Reject                    
                </comment>
                <comment line="475">
                    Now shape &gt;= 1                    
                </comment>
                <comment line="491">
                    Squeeze                    
                </comment>
                <scope line="437">
                    <scope line="440">
                        <declaration name="u" type="double" line="442"/>
                        <declaration name="bGS" type="double" line="443"/>
                        <declaration name="p" type="double" line="444"/>
                        <scope line="446">
                            <declaration name="x" type="double" line="449"/>
                            <declaration name="u2" type="double" line="450"/>
                            <scope line="452"/>
                            <scope line="455"/>
                        </scope>
                        <scope line="458">
                            <declaration name="x" type="double" line="461"/>
                            <declaration name="u2" type="double" line="462"/>
                            <scope line="464"/>
                            <scope line="467"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="d" type="double" line="476"/>
                <declaration name="c" type="double" line="477"/>
                <scope line="479">
                    <declaration name="x" type="double" line="480"/>
                    <declaration name="v" type="double" line="481"/>
                    <scope line="483"/>
                    <declaration name="x2" type="double" line="487"/>
                    <declaration name="u" type="double" line="488"/>
                    <scope line="491"/>
                    <scope line="495"/>
                </scope>
            </method>
        </class>
    </source>