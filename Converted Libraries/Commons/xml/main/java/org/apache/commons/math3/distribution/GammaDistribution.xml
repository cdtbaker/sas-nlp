<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Gamma"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="GammaDistribution" line="8">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="8">
                Implementation of the Gamma distribution.                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Gamma distribution (Wikipedia)</a>                    
                </see>
                <see>
                    <a href="http://mathworld.wolfram.com/GammaDistribution.html">Gamma distribution (MathWorld)</a>                    
                </see>
                <version>
                    $Id: GammaDistribution.java 1422195 2012-12-15 06:45:18Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="15"/>
            <javadoc line="15">
                Default inverse cumulative probability accuracy.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="20"/>
            <javadoc line="20">
                Serializable version identifier.                
            </javadoc>
            <declaration name="shape" type="double" line="24"/>
            <javadoc line="24">
                The shape parameter.                
            </javadoc>
            <declaration name="scale" type="double" line="28"/>
            <javadoc line="28">
                The scale parameter.                
            </javadoc>
            <declaration name="shiftedShape" type="double" line="32"/>
            <javadoc line="32">
                The constant value of {@code shape + g + 0.5}, where {@code g} is the
                  Lanczos constant {@link Gamma#LANCZOS_G}.                
            </javadoc>
            <declaration name="densityPrefactor1" type="double" line="37"/>
            <javadoc line="37">
                The constant value of{@code shape / scale  sqrt(e / (2  pi  (shape + g + 0.5))) / L(shape)},
                  where {@code L(shape)} is the Lanczos approximation returned by{@link Gamma#lanczos(double)}. This prefactor is used in{@link #density(double)}, when no overflow occurs with the natural
                  calculation.                
            </javadoc>
            <declaration name="densityPrefactor2" type="double" line="43"/>
            <javadoc line="43">
                The constant value of{@code shape  sqrt(e / (2  pi  (shape + g + 0.5))) / L(shape)},
                  where {@code L(shape)} is the Lanczos approximation returned by{@link Gamma#lanczos(double)}. This prefactor is used in{@link #density(double)}, when overflow occurs with the natural
                  calculation.                
            </javadoc>
            <declaration name="minY" type="double" line="49"/>
            <javadoc line="49">
                Lower bound on {@code y = x / scale} for the selection of the computation
                  method in {@link #density(double)}. For {@code y &lt;= minY}, the natural
                  calculation overflows.                
            </javadoc>
            <declaration name="maxLogY" type="double" line="55"/>
            <javadoc line="55">
                Upper bound on {@code log(y)} ({@code y = x / scale}) for the selection
                  of the computation method in {@link #density(double)}. For{@code log(y) &gt;= maxLogY}, the natural calculation overflows.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="60"/>
            <javadoc line="60">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <javadoc line="64">
                Creates a new gamma distribution with specified values of the shape and
                  scale parameters.                
                <param>
                    shape the shape parameter                    
                </param>
                <param>
                    scale the scale parameter                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape <= 0} or{@code scale <= 0}.                    
                </throws>
            </javadoc>
            <method name="GammaDistribution" type="constructor" line="71">
                <params>
                    <param name="shape" type="double"/>
                    <param name="scale" type="double"/>
                </params>
            </method>
            <javadoc line="74">
                Creates a new gamma distribution with specified values of the shape and
                  scale parameters.                
                <param>
                    shape the shape parameter                    
                </param>
                <param>
                    scale the scale parameter                    
                </param>
                <param>
                    inverseCumAccuracy the maximum absolute error in inverse
                      cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape <= 0} or{@code scale <= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="GammaDistribution" type="constructor" line="84">
                <params>
                    <param name="shape" type="double"/>
                    <param name="scale" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="87">
                Creates a Gamma distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    shape the shape parameter                    
                </param>
                <param>
                    scale the scale parameter                    
                </param>
                <param>
                    inverseCumAccuracy the maximum absolute error in inverse
                      cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code shape <= 0} or{@code scale <= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="GammaDistribution" type="constructor" line="97">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="shape" type="double"/>
                    <param name="scale" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
                <scope line="99"/>
                <scope line="102"/>
                <declaration name="aux" type="double" line="109"/>
            </method>
            <javadoc line="115">
                Returns the shape parameter of {@code this} distribution.                
                <return>
                    the shape parameter                    
                </return>
                <deprecated>
                    as of version 3.1, {@link #getShape()} should be preferred.
                      This method will be removed in version 4.0.                    
                </deprecated>
            </javadoc>
            <method name="getAlpha" type="double" line="121"/>
            <javadoc line="124">
                Returns the shape parameter of {@code this} distribution.                
                <return>
                    the shape parameter                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getShape" type="double" line="129"/>
            <javadoc line="132">
                Returns the scale parameter of {@code this} distribution.                
                <return>
                    the scale parameter                    
                </return>
                <deprecated>
                    as of version 3.1, {@link #getScale()} should be preferred.
                      This method will be removed in version 4.0.                    
                </deprecated>
            </javadoc>
            <method name="getBeta" type="double" line="138"/>
            <javadoc line="141">
                Returns the scale parameter of {@code this} distribution.                
                <return>
                    the scale parameter                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getScale" type="double" line="146"/>
            <javadoc line="149">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="152">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="153"/>
                <declaration name="y" type="double" line="156"/>
                <scope line="157">
                    <declaration name="aux1" type="double" line="158"/>
                    <declaration name="aux2" type="double" line="159"/>
                    <declaration name="aux3" type="double" line="160"/>
                </scope>
            </method>
            <javadoc line="165">
                {@inheritDoc}The implementation of this method is based on:
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;a href=&quot;http://mathworld.wolfram.com/Chi-SquaredDistribution.html&quot;&gt;
                  Chi-Squared Distribution&lt;/a&gt;, equation (9).
                  &lt;/li&gt;
                  &lt;li&gt;Casella, G., &amp; Berger, R. (1990). &lt;i&gt;Statistical Inference&lt;/i&gt;.
                  Belmont, CA: Duxbury Press.
                  &lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="177">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="ret" type="double" line="178"/>
                <scope line="179"/>
                <scope line="182"/>
            </method>
            <javadoc line="187">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="190"/>
            <javadoc line="193">
                {@inheritDoc}For shape parameter {@code alpha} and scale parameter {@code beta}, the
                  mean is {@code alpha  beta}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="197"/>
            <javadoc line="200">
                {@inheritDoc}For shape parameter {@code alpha} and scale parameter {@code beta}, the
                  variance is {@code alpha  beta^2}.                
                <return>
                    {@inheritDoc}                    
                </return>
            </javadoc>
            <method name="getNumericalVariance" type="double" line="205"/>
            <javadoc line="208">
                {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.                
                <return>
                    lower bound of the support (always 0)                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="212"/>
            <javadoc line="215">
                {@inheritDoc}The upper bound of the support is always positive infinity
                  no matter the parameters.                
                <return>
                    upper bound of the support (always Double.POSITIVE_INFINITY)                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="220"/>
            <javadoc line="223">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="226"/>
            <javadoc line="229">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="232"/>
            <javadoc line="235">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="239"/>
            <javadoc line="242">
                &lt;p&gt;This implementation uses the following algorithms: &lt;/p&gt;
                  &lt;p&gt;For 0 &lt; shape &lt; 1: &lt;br/&gt;
                  Ahrens, J. H. and Dieter, U., &lt;i&gt;Computer methods for
                  sampling from gamma, beta, Poisson and binomial distributions.&lt;/i&gt;
                  Computing, 12, 223-246, 1974.&lt;/p&gt;
                  &lt;p&gt;For shape &gt;= 1: &lt;br/&gt;
                  Marsaglia and Tsang, &lt;i&gt;A Simple Method for Generating
                  Gamma Variables.&lt;/i&gt; ACM Transactions on Mathematical Software,
                  Volume 26 Issue 3, September, 2000.&lt;/p&gt;                
                <return>
                    random value sampled from the Gamma(shape, scale) distribution                    
                </return>
            </javadoc>
            <method name="sample" type="double" line="254">
                <scope line="255">
                    <scope line="256">
                        <declaration name="u" type="double" line="257"/>
                        <declaration name="bGS" type="double" line="258"/>
                        <declaration name="p" type="double" line="259"/>
                        <scope line="260">
                            <declaration name="x" type="double" line="261"/>
                            <declaration name="u2" type="double" line="262"/>
                            <scope line="263"/>
                            <scope line="266"/>
                        </scope>
                        <scope line="270">
                            <declaration name="x" type="double" line="271"/>
                            <declaration name="u2" type="double" line="272"/>
                            <scope line="273"/>
                            <scope line="276"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="d" type="double" line="282"/>
                <declaration name="c" type="double" line="283"/>
                <scope line="284">
                    <declaration name="x" type="double" line="285"/>
                    <declaration name="v" type="double" line="286"/>
                    <scope line="287"/>
                    <declaration name="x2" type="double" line="290"/>
                    <declaration name="u" type="double" line="291"/>
                    <scope line="292"/>
                    <scope line="295"/>
                </scope>
            </method>
        </class>
    </source>