<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="PolynomialFunctionLagrangeForm" line="27">
            <implements interface="UnivariateFunction"/>
            <javadoc line="27">
                Implements the representation of a real polynomial function in
                  &lt;a href=&quot;http://mathworld.wolfram.com/LagrangeInterpolatingPolynomial.html&quot;&gt;
                  Lagrange Form&lt;/a&gt;. For reference, see &lt;b&gt;Introduction to Numerical
                  Analysis&lt;/b&gt;, ISBN 038795452X, chapter 2.
                  &lt;p&gt;
                  The approximated function should be smooth enough for Lagrange polynomial
                  to work well. Otherwise, consider using splines instead.&lt;/p&gt;                
                <version>
                    $Id: PolynomialFunctionLagrangeForm.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="coefficients" type="double" line="40"/>
            <javadoc line="40">
                The coefficients of the polynomial, ordered by degree -- i.e.
                  coefficients[0] is the constant term and coefficients[n] is the
                  coefficient of x^n where n is the degree of the polynomial.                
            </javadoc>
            <declaration name="x" type="double" line="46"/>
            <javadoc line="46">
                Interpolating points (abscissas).                
            </javadoc>
            <declaration name="y" type="double" line="50"/>
            <javadoc line="50">
                Function values at interpolating points.                
            </javadoc>
            <declaration name="coefficientsComputed" type="boolean" line="54"/>
            <javadoc line="54">
                Whether the polynomial coefficients are available.                
            </javadoc>
            <javadoc line="59">
                Construct a Lagrange polynomial with the given abscissas and function
                  values. The order of interpolating points are not important.
                  &lt;p&gt;
                  The constructor makes copy of the input arrays and assigns them.&lt;/p&gt;                
                <param>
                    x interpolating points                    
                </param>
                <param>
                    y function values at interpolating points                    
                </param>
                <throws>
                    DimensionMismatchException if the array lengths are different.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the number of points is less than 2.                    
                </throws>
                <throws>
                    NonMonotonicSequenceExceptionif two abscissae have the same value.                    
                </throws>
            </javadoc>
            <method name="PolynomialFunctionLagrangeForm" type="constructor" line="73">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <comment line="83">
                    Second check in case some abscissa is duplicated.                    
                </comment>
                <scope line="80"/>
            </method>
            <javadoc line="87">
                Calculate the function value at the given point.                
                <param>
                    z Point at which the function value is to be computed.                    
                </param>
                <return>
                    the function value.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code x} and {@code y} have
                      different lengths.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the size of {@code x} is less
                      than 2.                    
                </throws>
            </javadoc>
            <method name="value" type="double" line="99">
                <params>
                    <param name="z" type="double"/>
                </params>
            </method>
            <javadoc line="103">
                Returns the degree of the polynomial.                
                <return>
                    the degree of the polynomial                    
                </return>
            </javadoc>
            <method name="degree" type="int" line="108"/>
            <javadoc line="112">
                Returns a copy of the interpolating points array.
                  &lt;p&gt;
                  Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;                
                <return>
                    a fresh copy of the interpolating points array                    
                </return>
            </javadoc>
            <method name="getInterpolatingPoints" type="double[]" line="119">
                <declaration name="out" type="double[]" line="120"/>
            </method>
            <javadoc line="125">
                Returns a copy of the interpolating values array.
                  &lt;p&gt;
                  Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;                
                <return>
                    a fresh copy of the interpolating values array                    
                </return>
            </javadoc>
            <method name="getInterpolatingValues" type="double[]" line="132">
                <declaration name="out" type="double[]" line="133"/>
            </method>
            <javadoc line="138">
                Returns a copy of the coefficients array.
                  &lt;p&gt;
                  Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;
                  &lt;p&gt;
                  Note that coefficients computation can be ill-conditioned. Use with caution
                  and only when it is necessary.&lt;/p&gt;                
                <return>
                    a fresh copy of the coefficients array                    
                </return>
            </javadoc>
            <method name="getCoefficients" type="double[]" line="148">
                <scope line="149"/>
                <declaration name="out" type="double[]" line="152"/>
            </method>
            <javadoc line="157">
                Evaluate the Lagrange polynomial using
                  &lt;a href=&quot;http://mathworld.wolfram.com/NevillesAlgorithm.html&quot;&gt;
                  Neville&apos;s Algorithm&lt;/a&gt;. It takes O(n^2) time.                
                <param>
                    x Interpolating points array.                    
                </param>
                <param>
                    y Interpolating values array.                    
                </param>
                <param>
                    z Point at which the function value is to be computed.                    
                </param>
                <return>
                    the function value.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code x} and {@code y} have
                      different lengths.                    
                </throws>
                <throws>
                    NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the size of {@code x} is less
                      than 2.                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="174">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <comment line="180">
                    Array is not sorted.                    
                </comment>
                <comment line="187">
                    Second check in case some abscissa is duplicated.                    
                </comment>
                <scope line="175"/>
                <declaration name="xNew" type="double[]" line="180"/>
                <declaration name="yNew" type="double[]" line="181"/>
            </method>
            <javadoc line="191">
                Evaluate the Lagrange polynomial using
                  &lt;a href=&quot;http://mathworld.wolfram.com/NevillesAlgorithm.html&quot;&gt;
                  Neville&apos;s Algorithm&lt;/a&gt;. It takes O(n^2) time.                
                <param>
                    x Interpolating points array.                    
                </param>
                <param>
                    y Interpolating values array.                    
                </param>
                <param>
                    z Point at which the function value is to be computed.                    
                </param>
                <return>
                    the function value.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code x} and {@code y} have
                      different lengths.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the size of {@code x} is less
                      than 2.                    
                </throws>
            </javadoc>
            <method name="evaluateInternal" type="double" line="207">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <comment line="215">
                    initialize the difference arrays                    
                </comment>
                <comment line="218">
                    find out the abscissa closest to z                    
                </comment>
                <comment line="226">
                    initial approximation to the function value at z                    
                </comment>
                <comment line="234">
                    update the difference arrays                    
                </comment>
                <comment line="239">
                    sum up the difference terms to get the final value                    
                </comment>
                <comment line="241">
                    fork down                    
                </comment>
                <comment line="244">
                    fork up                    
                </comment>
                <declaration name="nearest" type="int" line="208"/>
                <declaration name="n" type="int" line="209"/>
                <declaration name="c" type="double[]" line="210"/>
                <declaration name="d" type="double[]" line="211"/>
                <declaration name="min_dist" type="double" line="212"/>
                <scope line="213">
                    <declaration name="dist" type="double" line="218"/>
                    <scope line="219"/>
                </scope>
                <declaration name="value" type="double" line="226"/>
                <scope line="228">
                    <scope line="229">
                        <declaration name="tc" type="double" line="230"/>
                        <declaration name="td" type="double" line="231"/>
                        <declaration name="divider" type="double" line="232"/>
                        <declaration name="w" type="double" line="234"/>
                    </scope>
                    <scope line="239"/>
                    <scope line="241"/>
                </scope>
            </method>
            <javadoc line="250">
                Calculate the coefficients of Lagrange polynomial from the
                  interpolation data. It takes O(n^2) time.
                  Note that this computation can be ill-conditioned: Use with caution
                  and only when it is necessary.                
            </javadoc>
            <method name="computeCoefficients" type="void" line="256">
                <comment line="264">
                    c[] are the coefficients of P(x) = (x-x[0])(x-x[1])...(x-x[n-1])                    
                </comment>
                <comment line="277">
                    d = (x[i]-x[0])...(x[i]-x[i-1])(x[i]-x[i+1])...(x[i]-x[n-1])                    
                </comment>
                <comment line="285">
                    Lagrange polynomial is the sum of n terms, each of which is a
                     polynomial of degree n-1. tc[] are the coefficients of the i-th
                     numerator Pi(x) = (x-x[0])...(x-x[i-1])(x-x[i+1])...(x-x[n-1]).                    
                </comment>
                <comment line="288">
                    actually c[n] = 1                    
                </comment>
                <declaration name="n" type="int" line="257"/>
                <scope line="259"/>
                <declaration name="c" type="double[]" line="264"/>
                <scope line="266">
                    <scope line="267"/>
                </scope>
                <declaration name="tc" type="double[]" line="274"/>
                <scope line="275">
                    <declaration name="d" type="double" line="277"/>
                    <scope line="278">
                        <scope line="279"/>
                    </scope>
                    <declaration name="t" type="double" line="283"/>
                    <scope line="289"/>
                </scope>
            </method>
            <javadoc line="298">
                Check that the interpolation arrays are valid.
                  The arrays features checked by this method are that both arrays have the
                  same length and this length is at least 2.                
                <param>
                    x Interpolating points array.                    
                </param>
                <param>
                    y Interpolating values array.                    
                </param>
                <param>
                    abort Whether to throw an exception if {@code x} is not sorted.                    
                </param>
                <throws>
                    DimensionMismatchException if the array lengths are different.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the number of points is less than 2.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order and {@code abort}is {@code true}.                    
                </throws>
                <return>
                    {@code false} if the {@code x} is not sorted in increasing order,{@code true} otherwise.                    
                </return>
                <see>
                    #evaluate(double[],double[],double)                    
                </see>
                <see>
                    #computeCoefficients()                    
                </see>
            </javadoc>
            <method name="verifyInterpolationArray" type="boolean" line="317">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="abort" type="boolean"/>
                </params>
                <scope line="318"/>
                <scope line="321"/>
            </method>
        </class>
    </source>