<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="PolynomialFunctionLagrangeForm" line="9">
            <implements interface="UnivariateFunction"/>
            <javadoc line="9">
                Implements the representation of a real polynomial function in
                  &lt;a href=&quot;http://mathworld.wolfram.com/LagrangeInterpolatingPolynomial.html&quot;&gt;
                  Lagrange Form&lt;/a&gt;. For reference, see &lt;b&gt;Introduction to Numerical
                  Analysis&lt;/b&gt;, ISBN 038795452X, chapter 2.
                  &lt;p&gt;
                  The approximated function should be smooth enough for Lagrange polynomial
                  to work well. Otherwise, consider using splines instead.&lt;/p&gt;                
                <version>
                    $Id: PolynomialFunctionLagrangeForm.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="coefficients" type="double" line="21"/>
            <javadoc line="21">
                The coefficients of the polynomial, ordered by degree -- i.e.
                  coefficients[0] is the constant term and coefficients[n] is the
                  coefficient of x^n where n is the degree of the polynomial.                
            </javadoc>
            <declaration name="x" type="double" line="27"/>
            <javadoc line="27">
                Interpolating points (abscissas).                
            </javadoc>
            <declaration name="y" type="double" line="31"/>
            <javadoc line="31">
                Function values at interpolating points.                
            </javadoc>
            <declaration name="coefficientsComputed" type="boolean" line="35"/>
            <javadoc line="35">
                Whether the polynomial coefficients are available.                
            </javadoc>
            <javadoc line="39">
                Construct a Lagrange polynomial with the given abscissas and function
                  values. The order of interpolating points are not important.
                  &lt;p&gt;
                  The constructor makes copy of the input arrays and assigns them.&lt;/p&gt;                
                <param>
                    x interpolating points                    
                </param>
                <param>
                    y function values at interpolating points                    
                </param>
                <throws>
                    DimensionMismatchException if the array lengths are different.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the number of points is less than 2.                    
                </throws>
                <throws>
                    NonMonotonicSequenceExceptionif two abscissae have the same value.                    
                </throws>
            </javadoc>
            <method name="PolynomialFunctionLagrangeForm" type="constructor" line="50">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="56"/>
            </method>
            <javadoc line="61">
                Calculate the function value at the given point.                
                <param>
                    z Point at which the function value is to be computed.                    
                </param>
                <return>
                    the function value.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code x} and {@code y} have
                      different lengths.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the size of {@code x} is less
                      than 2.                    
                </throws>
            </javadoc>
            <method name="value" type="double" line="71">
                <params>
                    <param name="z" type="double"/>
                </params>
            </method>
            <javadoc line="74">
                Returns the degree of the polynomial.                
                <return>
                    the degree of the polynomial                    
                </return>
            </javadoc>
            <method name="degree" type="int" line="78"/>
            <javadoc line="81">
                Returns a copy of the interpolating points array.
                  &lt;p&gt;
                  Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;                
                <return>
                    a fresh copy of the interpolating points array                    
                </return>
            </javadoc>
            <method name="getInterpolatingPoints" type="double[]" line="87">
                <declaration name="out" type="double[]" line="88"/>
            </method>
            <javadoc line="92">
                Returns a copy of the interpolating values array.
                  &lt;p&gt;
                  Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;                
                <return>
                    a fresh copy of the interpolating values array                    
                </return>
            </javadoc>
            <method name="getInterpolatingValues" type="double[]" line="98">
                <declaration name="out" type="double[]" line="99"/>
            </method>
            <javadoc line="103">
                Returns a copy of the coefficients array.
                  &lt;p&gt;
                  Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;
                  &lt;p&gt;
                  Note that coefficients computation can be ill-conditioned. Use with caution
                  and only when it is necessary.&lt;/p&gt;                
                <return>
                    a fresh copy of the coefficients array                    
                </return>
            </javadoc>
            <method name="getCoefficients" type="double[]" line="112">
                <scope line="113"/>
                <declaration name="out" type="double[]" line="116"/>
            </method>
            <javadoc line="120">
                Evaluate the Lagrange polynomial using
                  &lt;a href=&quot;http://mathworld.wolfram.com/NevillesAlgorithm.html&quot;&gt;
                  Neville&apos;s Algorithm&lt;/a&gt;. It takes O(n^2) time.                
                <param>
                    x Interpolating points array.                    
                </param>
                <param>
                    y Interpolating values array.                    
                </param>
                <param>
                    z Point at which the function value is to be computed.                    
                </param>
                <return>
                    the function value.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code x} and {@code y} have
                      different lengths.                    
                </throws>
                <throws>
                    NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the size of {@code x} is less
                      than 2.                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="134">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <scope line="135"/>
                <declaration name="xNew" type="double[]" line="138"/>
                <declaration name="yNew" type="double[]" line="139"/>
            </method>
            <javadoc line="146">
                Evaluate the Lagrange polynomial using
                  &lt;a href=&quot;http://mathworld.wolfram.com/NevillesAlgorithm.html&quot;&gt;
                  Neville&apos;s Algorithm&lt;/a&gt;. It takes O(n^2) time.                
                <param>
                    x Interpolating points array.                    
                </param>
                <param>
                    y Interpolating values array.                    
                </param>
                <param>
                    z Point at which the function value is to be computed.                    
                </param>
                <return>
                    the function value.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code x} and {@code y} have
                      different lengths.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the size of {@code x} is less
                      than 2.                    
                </throws>
            </javadoc>
            <method name="evaluateInternal" type="double" line="160">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <declaration name="nearest" type="int" line="161"/>
                <declaration name="n" type="int" line="162"/>
                <declaration name="c" type="double[]" line="163"/>
                <declaration name="d" type="double[]" line="164"/>
                <declaration name="min_dist" type="double" line="165"/>
                <scope line="166">
                    <declaration name="dist" type="double" line="169"/>
                    <scope line="170"/>
                </scope>
                <declaration name="value" type="double" line="175"/>
                <scope line="176">
                    <scope line="177">
                        <declaration name="tc" type="double" line="178"/>
                        <declaration name="td" type="double" line="179"/>
                        <declaration name="divider" type="double" line="180"/>
                        <declaration name="w" type="double" line="181"/>
                    </scope>
                    <scope line="185"/>
                    <scope line="188"/>
                </scope>
            </method>
            <javadoc line="195">
                Calculate the coefficients of Lagrange polynomial from the
                  interpolation data. It takes O(n^2) time.
                  Note that this computation can be ill-conditioned: Use with caution
                  and only when it is necessary.                
            </javadoc>
            <method name="computeCoefficients" type="void" line="201">
                <declaration name="n" type="int" line="202"/>
                <scope line="204"/>
                <declaration name="c" type="double[]" line="207"/>
                <scope line="209">
                    <scope line="210"/>
                </scope>
                <declaration name="tc" type="double[]" line="216"/>
                <scope line="217">
                    <declaration name="d" type="double" line="218"/>
                    <scope line="219">
                        <scope line="220"/>
                    </scope>
                    <declaration name="t" type="double" line="224"/>
                    <scope line="227"/>
                </scope>
            </method>
            <javadoc line="234">
                Check that the interpolation arrays are valid.
                  The arrays features checked by this method are that both arrays have the
                  same length and this length is at least 2.                
                <param>
                    x Interpolating points array.                    
                </param>
                <param>
                    y Interpolating values array.                    
                </param>
                <param>
                    abort Whether to throw an exception if {@code x} is not sorted.                    
                </param>
                <throws>
                    DimensionMismatchException if the array lengths are different.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the number of points is less than 2.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order and {@code abort}is {@code true}.                    
                </throws>
                <return>
                    {@code false} if the {@code x} is not sorted in increasing order,{@code true} otherwise.                    
                </return>
                <see>
                    #evaluate(double[],double[],double)                    
                </see>
                <see>
                    #computeCoefficients()                    
                </see>
            </javadoc>
            <method name="verifyInterpolationArray" type="boolean" line="248">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="abort" type="boolean"/>
                </params>
                <scope line="249"/>
                <scope line="252"/>
            </method>
        </class>
    </source>