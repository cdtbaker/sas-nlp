<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.util.OpenIntToFieldHashMap"/>
        <class name="SparseFieldMatrix" line="5">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="AbstractFieldMatrix">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="5">
                Sparse matrix implementation based on an open addressed map.                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <version>
                    $Id: SparseFieldMatrix.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
                <deprecated>
                    As of version 3.1, this class is deprecated, for reasons exposed
                      in this JIRA
                      <a href="https://issues.apache.org/jira/browse/MATH-870">ticket</a>. This
                      class will be removed in version 4.0.                    
                </deprecated>
            </javadoc>
            <declaration name="entries" type="OpenIntToFieldHashMap&lt;T&gt;" line="17"/>
            <javadoc line="17">
                Storage for (sparse) matrix elements.                
            </javadoc>
            <declaration name="rows" type="int" line="21"/>
            <javadoc line="21">
                Row dimension.                
            </javadoc>
            <declaration name="columns" type="int" line="25"/>
            <javadoc line="25">
                Column dimension.                
            </javadoc>
            <javadoc line="29">
                Create a matrix with no data.                
                <param>
                    field Field to which the elements belong.                    
                </param>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="33">
                <params>
                    <param name="field" type="Field<T>"/>
                </params>
            </method>
            <javadoc line="39">
                Create a new SparseFieldMatrix&lt;T&gt; with the supplied row and column
                  dimensions.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    rowDimension Number of rows in the new matrix.                    
                </param>
                <param>
                    columnDimension Number of columns in the new matrix.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif row or column dimension is not positive.                    
                </throws>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="47">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="53">
                Copy constructor.                
                <param>
                    other Instance to copy.                    
                </param>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="57">
                <params>
                    <param name="other" type="SparseFieldMatrix<T>"/>
                </params>
            </method>
            <javadoc line="63">
                Generic copy constructor.                
                <param>
                    other Instance to copy.                    
                </param>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="67">
                <params>
                    <param name="other" type="FieldMatrix<T>"/>
                </params>
                <scope line="72">
                    <scope line="73"/>
                </scope>
            </method>
            <javadoc line="78">
                {@inheritDoc}                
            </javadoc>
            <method name="addToEntry" type="void" line="81">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="increment" type="T"/>
                </params>
                <declaration name="key" type="int" line="84"/>
                <declaration name="value" type="T" line="85"/>
                <scope line="86"/>
                <scope line="89"/>
            </method>
            <javadoc line="93">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="FieldMatrix<T>" line="96"/>
            <javadoc line="99">
                {@inheritDoc}                
            </javadoc>
            <method name="createMatrix" type="FieldMatrix<T>" line="102">
                <params>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="105">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="108"/>
            <javadoc line="111">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="T" line="114">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="119">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="122"/>
            <javadoc line="125">
                {@inheritDoc}                
            </javadoc>
            <method name="multiplyEntry" type="void" line="128">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="factor" type="T"/>
                </params>
                <declaration name="key" type="int" line="131"/>
                <declaration name="value" type="T" line="132"/>
                <scope line="133"/>
                <scope line="136"/>
            </method>
            <javadoc line="140">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="143">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="T"/>
                </params>
                <scope line="146"/>
                <scope line="149"/>
            </method>
            <javadoc line="153">
                Compute the key to access a matrix element.                
                <param>
                    row Row index of the matrix element.                    
                </param>
                <param>
                    column Column index of the matrix element.                    
                </param>
                <return>
                    the key within the map to access the matrix element.                    
                </return>
            </javadoc>
            <method name="computeKey" type="int" line="159">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
        </class>
    </source>