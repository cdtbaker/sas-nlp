<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.util.OpenIntToFieldHashMap"/>
        <class name="SparseFieldMatrix" line="23">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="AbstractFieldMatrix">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="23">
                Sparse matrix implementation based on an open addressed map.
                  &lt;p&gt;
                  Caveat: This implementation assumes that, for any {@code x},
                  the equality {@code x  0d == 0d} holds. But it is is not true for{@code NaN}. Moreover, zero entries will lose their sign.
                  Some operations (that involve {@code NaN} and/or infinities) may
                  thus give incorrect results.
                  &lt;/p&gt;                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <version>
                    $Id: SparseFieldMatrix.java 1569825 2014-02-19 17:19:59Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="entries" type="OpenIntToFieldHashMap&amp;lt;T&amp;gt;" line="39"/>
            <javadoc line="39">
                Storage for (sparse) matrix elements.                
            </javadoc>
            <declaration name="rows" type="int" line="41"/>
            <javadoc line="41">
                Row dimension.                
            </javadoc>
            <declaration name="columns" type="int" line="43"/>
            <javadoc line="43">
                Column dimension.                
            </javadoc>
            <javadoc line="46">
                Create a matrix with no data.                
                <param>
                    field Field to which the elements belong.                    
                </param>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="51">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="58">
                Create a new SparseFieldMatrix&lt;T&gt; with the supplied row and column
                  dimensions.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    rowDimension Number of rows in the new matrix.                    
                </param>
                <param>
                    columnDimension Number of columns in the new matrix.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif row or column dimension is not positive.                    
                </throws>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="69">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="76">
                Copy constructor.                
                <param>
                    other Instance to copy.                    
                </param>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="81">
                <params>
                    <param name="other" type="SparseFieldMatrix&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="88">
                Generic copy constructor.                
                <param>
                    other Instance to copy.                    
                </param>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="93">
                <params>
                    <param name="other" type="FieldMatrix&lt;T&gt;"/>
                </params>
                <scope line="98">
                    <scope line="99"/>
                </scope>
            </method>
            <javadoc line="105">
                {@inheritDoc}                
            </javadoc>
            <method name="addToEntry" type="void" line="107">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="increment" type="T"/>
                </params>
                <declaration name="key" type="int" line="110"/>
                <declaration name="value" type="T" line="111"/>
                <scope line="112"/>
                <scope line="114"/>
            </method>
            <javadoc line="119">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="FieldMatrix&lt;T&gt;" line="121"/>
            <javadoc line="125">
                {@inheritDoc}                
            </javadoc>
            <method name="createMatrix" type="FieldMatrix&lt;T&gt;" line="127">
                <params>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="131">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="133"/>
            <javadoc line="137">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="T" line="139">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="147"/>
            <javadoc line="151">
                {@inheritDoc}                
            </javadoc>
            <method name="multiplyEntry" type="void" line="153">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="factor" type="T"/>
                </params>
                <declaration name="key" type="int" line="156"/>
                <declaration name="value" type="T" line="157"/>
                <scope line="158"/>
                <scope line="160"/>
            </method>
            <javadoc line="166">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="168">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="T"/>
                </params>
                <scope line="171"/>
                <scope line="173"/>
            </method>
            <javadoc line="178">
                Compute the key to access a matrix element.                
                <param>
                    row Row index of the matrix element.                    
                </param>
                <param>
                    column Column index of the matrix element.                    
                </param>
                <return>
                    the key within the map to access the matrix element.                    
                </return>
            </javadoc>
            <method name="computeKey" type="int" line="185">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
        </class>
    </source>