<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.util.OpenIntToFieldHashMap"/>
        <class name="SparseFieldMatrix" line="23">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="AbstractFieldMatrix">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="23">
                Sparse matrix implementation based on an open addressed map.                
                <param>
                    <T>
                       the type of the field elements                    
                </param>
                <version>
                    $Id: SparseFieldMatrix.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
                <deprecated>
                    As of version 3.1, this class is deprecated, for reasons exposed
                      in this JIRA
                      <a href="https://issues.apache.org/jira/browse/MATH-870">ticket</a>. This
                      class will be removed in version 4.0.                    
                </deprecated>
            </javadoc>
            <declaration name="entries" type="OpenIntToFieldHashMap&lt;T&gt;" line="38"/>
            <javadoc line="38">
                Storage for (sparse) matrix elements.                
            </javadoc>
            <declaration name="rows" type="int" line="40"/>
            <javadoc line="40">
                Row dimension.                
            </javadoc>
            <declaration name="columns" type="int" line="42"/>
            <javadoc line="42">
                Column dimension.                
            </javadoc>
            <javadoc line="45">
                Create a matrix with no data.                
                <param>
                    field Field to which the elements belong.                    
                </param>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="50">
                <params>
                    <param name="field" type="Field<T>"/>
                </params>
            </method>
            <javadoc line="57">
                Create a new SparseFieldMatrix&lt;T&gt; with the supplied row and column
                  dimensions.                
                <param>
                    field Field to which the elements belong.                    
                </param>
                <param>
                    rowDimension Number of rows in the new matrix.                    
                </param>
                <param>
                    columnDimension Number of columns in the new matrix.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif row or column dimension is not positive.                    
                </throws>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="68">
                <params>
                    <param name="field" type="Field<T>"/>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="75">
                Copy constructor.                
                <param>
                    other Instance to copy.                    
                </param>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="80">
                <params>
                    <param name="other" type="SparseFieldMatrix<T>"/>
                </params>
            </method>
            <javadoc line="87">
                Generic copy constructor.                
                <param>
                    other Instance to copy.                    
                </param>
            </javadoc>
            <method name="SparseFieldMatrix" type="constructor" line="92">
                <params>
                    <param name="other" type="FieldMatrix<T>"/>
                </params>
                <scope line="97">
                    <scope line="98"/>
                </scope>
            </method>
            <javadoc line="104">
                {@inheritDoc}                
            </javadoc>
            <method name="addToEntry" type="void" line="106">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="increment" type="T"/>
                </params>
                <declaration name="key" type="int" line="109"/>
                <declaration name="value" type="T" line="110"/>
                <scope line="111"/>
                <scope line="113"/>
            </method>
            <javadoc line="118">
                {@inheritDoc}                
            </javadoc>
            <method name="copy" type="FieldMatrix<T>" line="120"/>
            <javadoc line="124">
                {@inheritDoc}                
            </javadoc>
            <method name="createMatrix" type="FieldMatrix<T>" line="126">
                <params>
                    <param name="rowDimension" type="int"/>
                    <param name="columnDimension" type="int"/>
                </params>
            </method>
            <javadoc line="130">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="132"/>
            <javadoc line="136">
                {@inheritDoc}                
            </javadoc>
            <method name="getEntry" type="T" line="138">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="144">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="146"/>
            <javadoc line="150">
                {@inheritDoc}                
            </javadoc>
            <method name="multiplyEntry" type="void" line="152">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="factor" type="T"/>
                </params>
                <declaration name="key" type="int" line="155"/>
                <declaration name="value" type="T" line="156"/>
                <scope line="157"/>
                <scope line="159"/>
            </method>
            <javadoc line="165">
                {@inheritDoc}                
            </javadoc>
            <method name="setEntry" type="void" line="167">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="T"/>
                </params>
                <scope line="170"/>
                <scope line="172"/>
            </method>
            <javadoc line="177">
                Compute the key to access a matrix element.                
                <param>
                    row Row index of the matrix element.                    
                </param>
                <param>
                    column Column index of the matrix element.                    
                </param>
                <return>
                    the key within the map to access the matrix element.                    
                </return>
            </javadoc>
            <method name="computeKey" type="int" line="184">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
        </class>
    </source>