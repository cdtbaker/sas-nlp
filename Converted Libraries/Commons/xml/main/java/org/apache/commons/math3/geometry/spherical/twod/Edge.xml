<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.spherical.twod">
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Vector3D"/>
        <import package="org.apache.commons.math3.geometry.spherical.oned.Arc"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Edge" line="26">
            <javadoc line="26">
                Spherical polygons boundary edge.                
                <see>
                    SphericalPolygonsSet#getBoundaryLoops()                    
                </see>
                <see>
                    Vertex                    
                </see>
                <version>
                    $Id: Edge.java 1561506 2014-01-26 15:31:18Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="start" type="Vertex" line="34"/>
            <javadoc line="34">
                Start vertex.                
            </javadoc>
            <declaration name="end" type="Vertex" line="37"/>
            <javadoc line="37">
                End vertex.                
            </javadoc>
            <declaration name="length" type="double" line="40"/>
            <javadoc line="40">
                Length of the arc.                
            </javadoc>
            <declaration name="circle" type="Circle" line="43"/>
            <javadoc line="43">
                Circle supporting the edge.                
            </javadoc>
            <javadoc line="46">
                Build an edge not contained in any node yet.                
                <param>
                    start start vertex                    
                </param>
                <param>
                    end end vertex                    
                </param>
                <param>
                    length length of the arc (it can be greater than \( \pi \))                    
                </param>
                <param>
                    circle circle supporting the edge                    
                </param>
            </javadoc>
            <method name="Edge" type="constructor" line="52">
                <params>
                    <param name="start" type="Vertex"/>
                    <param name="end" type="Vertex"/>
                    <param name="length" type="double"/>
                    <param name="circle" type="Circle"/>
                </params>
                <comment line="60">
                    connect the vertices back to the edge                    
                </comment>
            </method>
            <javadoc line="65">
                Get start vertex.                
                <return>
                    start vertex                    
                </return>
            </javadoc>
            <method name="getStart" type="Vertex" line="68"/>
            <javadoc line="72">
                Get end vertex.                
                <return>
                    end vertex                    
                </return>
            </javadoc>
            <method name="getEnd" type="Vertex" line="75"/>
            <javadoc line="79">
                Get the length of the arc.                
                <return>
                    length of the arc (can be greater than \( \pi \))                    
                </return>
            </javadoc>
            <method name="getLength" type="double" line="82"/>
            <javadoc line="86">
                Get the circle supporting this edge.                
                <return>
                    circle supporting this edge                    
                </return>
            </javadoc>
            <method name="getCircle" type="Circle" line="89"/>
            <javadoc line="93">
                Get an intermediate point.
                  &lt;p&gt;
                  The angle along the edge should normally be between 0 and {@link #getLength()}in order to remain within edge limits. However, there are no checks on the
                  value of the angle, so user can rebuild the full circle on which an edge is
                  defined if they want.
                  &lt;/p&gt;                
                <param>
                    alpha angle along the edge, counted from {@link #getStart()}                    
                </param>
                <return>
                    an intermediate point                    
                </return>
            </javadoc>
            <method name="getPointAt" type="Vector3D" line="103">
                <params>
                    <param name="alpha" type="double"/>
                </params>
            </method>
            <javadoc line="107">
                Connect the instance with a following edge.                
                <param>
                    next edge following the instance                    
                </param>
            </javadoc>
            <method name="setNextEdge" type="void" line="110">
                <params>
                    <param name="next" type="Edge"/>
                </params>
            </method>
            <javadoc line="116">
                Split the edge.
                  &lt;p&gt;
                  Once split, this edge is not referenced anymore by the vertices,
                  it is replaced by the two or three sub-edges and intermediate splitting
                  vertices are introduced to connect these sub-edges together.
                  &lt;/p&gt;                
                <param>
                    splitCircle circle splitting the edge in several parts                    
                </param>
                <param>
                    outsideList list where to put parts that are outside of the split circle                    
                </param>
                <param>
                    insideList list where to put parts that are inside the split circle                    
                </param>
            </javadoc>
            <method name="split" type="void" line="127">
                <params>
                    <param name="splitCircle" type="Circle"/>
                    <param name="outsideList" type="List&lt;Edge&gt;"/>
                    <param name="insideList" type="List&lt;Edge&gt;"/>
                </params>
                <comment line="130">
                    get the inside arc, synchronizing its phase with the edge itself                    
                </comment>
                <comment line="137">
                    build the sub-edges                    
                </comment>
                <comment line="142">
                    the edge is entirely contained inside the circle
                     we don&apos;t split anything                    
                </comment>
                <comment line="148">
                    there are at least some parts of the edge that should be outside
                     (even is they are later be filtered out as being too small)                    
                </comment>
                <comment line="152">
                    the start of the edge is inside the circle                    
                </comment>
                <comment line="160">
                    the edge ends while still outside of the circle                    
                </comment>
                <comment line="165">
                    the edge is entirely outside of the circle
                     we don&apos;t split anything                    
                </comment>
                <comment line="170">
                    the edge is long enough to enter inside the circle                    
                </comment>
                <comment line="177">
                    the edge ends while still inside of the circle                    
                </comment>
                <comment line="181">
                    the edge is long enough to exit outside of the circle                    
                </comment>
                <declaration name="edgeStart" type="double" line="130"/>
                <declaration name="arc" type="Arc" line="131"/>
                <declaration name="arcRelativeStart" type="double" line="132"/>
                <declaration name="arcRelativeEnd" type="double" line="133"/>
                <declaration name="unwrappedEnd" type="double" line="134"/>
                <declaration name="tolerance" type="double" line="137"/>
                <declaration name="previousVertex" type="Vertex" line="138"/>
                <scope line="139"/>
                <scope line="145">
                    <declaration name="alreadyManagedLength" type="double" line="149"/>
                    <scope line="150"/>
                    <scope line="158">
                        <scope line="160"/>
                        <scope line="163"/>
                    </scope>
                    <scope line="168">
                        <scope line="175"/>
                        <scope line="179"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="194">
                Add a sub-edge to a list if long enough.
                  &lt;p&gt;
                  If the length of the sub-edge to add is smaller than the {@link Circle#getTolerance()}tolerance of the support circle, it will be ignored.
                  &lt;/p&gt;                
                <param>
                    subStart start of the sub-edge                    
                </param>
                <param>
                    subEnd end of the sub-edge                    
                </param>
                <param>
                    subLength length of the sub-edge                    
                </param>
                <param>
                    splitCircle circle splitting the edge in several parts                    
                </param>
                <param>
                    list list where to put the sub-edge                    
                </param>
                <return>
                    end vertex of the edge ({@code subEnd} if the edge was long enough and really
                      added, {@code subStart} if the edge was too small and therefore ignored)                    
                </return>
            </javadoc>
            <method name="addSubEdge" type="Vertex" line="208">
                <params>
                    <param name="subStart" type="Vertex"/>
                    <param name="subEnd" type="Vertex"/>
                    <param name="subLength" type="double"/>
                    <param name="list" type="List&lt;Edge&gt;"/>
                    <param name="splitCircle" type="Circle"/>
                </params>
                <comment line="212">
                    the edge is too short, we ignore it                    
                </comment>
                <comment line="216">
                    really add the edge                    
                </comment>
                <scope line="210"/>
                <declaration name="edge" type="Edge" line="217"/>
            </method>
        </class>
    </source>