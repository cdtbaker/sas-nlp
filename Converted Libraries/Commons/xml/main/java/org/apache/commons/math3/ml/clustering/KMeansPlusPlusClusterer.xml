<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.ml.distance.DistanceMeasure"/>
        <import package="org.apache.commons.math3.ml.distance.EuclideanDistance"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="KMeansPlusPlusClusterer" line="36">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="Clusterer">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="36">
                Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.                
                <param>
                    &lt;T&gt;
                       type of the points to cluster                    
                </param>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/K-means%2B%2B&quot;&gt;K-means++ (wikipedia)&lt;/a&gt;                    
                </see>
                <version>
                    $Id: KMeansPlusPlusClusterer.java 1461866 2013-03-27 21:54:36Z tn $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <javadoc line="45">
                Strategies to use for replacing an empty cluster.                
            </javadoc>
            <javadoc line="48">
                Split the cluster with largest distance variance.                
            </javadoc>
            <javadoc line="51">
                Split the cluster with largest number of points.                
            </javadoc>
            <javadoc line="54">
                Create a cluster around the point farthest from its centroid.                
            </javadoc>
            <javadoc line="57">
                Generate an error.                
            </javadoc>
            <declaration name="k" type="int" line="62"/>
            <javadoc line="62">
                The number of clusters.                
            </javadoc>
            <declaration name="maxIterations" type="int" line="65"/>
            <javadoc line="65">
                The maximum number of iterations.                
            </javadoc>
            <declaration name="random" type="RandomGenerator" line="68"/>
            <javadoc line="68">
                Random generator for choosing initial centers.                
            </javadoc>
            <declaration name="emptyStrategy" type="EmptyClusterStrategy" line="71"/>
            <javadoc line="71">
                Selected strategy for empty clusters.                
            </javadoc>
            <javadoc line="74">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.
                  &lt;p&gt;
                  The euclidean distance will be used as default distance measure.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="83">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="87">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.
                  &lt;p&gt;
                  The euclidean distance will be used as default distance measure.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="98">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="102">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="112">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                </params>
            </method>
            <javadoc line="116">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="129">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                    <param name="random" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="133">
                Build a clusterer.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
                <param>
                    emptyStrategy strategy to use for handling empty clusters that
                      may appear during algorithm iterations                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="146">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                    <param name="random" type="RandomGenerator"/>
                    <param name="emptyStrategy" type="EmptyClusterStrategy"/>
                </params>
            </method>
            <javadoc line="154">
                Return the number of clusters this instance will use.                
                <return>
                    the number of clusters                    
                </return>
            </javadoc>
            <method name="getK" type="int" line="158"/>
            <javadoc line="162">
                Returns the maximum number of iterations this instance will use.                
                <return>
                    the maximum number of iterations, or -1 if no maximum is set                    
                </return>
            </javadoc>
            <method name="getMaxIterations" type="int" line="166"/>
            <javadoc line="170">
                Returns the random generator this instance will use.                
                <return>
                    the random generator                    
                </return>
            </javadoc>
            <method name="getRandomGenerator" type="RandomGenerator" line="174"/>
            <javadoc line="178">
                Returns the {@link EmptyClusterStrategy} used by this instance.                
                <return>
                    the {@link EmptyClusterStrategy}                    
                </return>
            </javadoc>
            <method name="getEmptyClusterStrategy" type="EmptyClusterStrategy" line="182"/>
            <javadoc line="186">
                Runs the K-means++ clustering algorithm.                
                <param>
                    points the points to cluster                    
                </param>
                <return>
                    a list of clusters containing the points                    
                </return>
                <throws>
                    MathIllegalArgumentException if the data points are null or the number
                      of clusters is larger than the number of data points                    
                </throws>
                <throws>
                    ConvergenceException if an empty cluster is encountered and the{@link #emptyStrategy} is set to {@code ERROR}                    
                </throws>
            </javadoc>
            <method name="cluster" type="List<CentroidCluster<T>>" line="197">
                <params>
                    <param name="points" type="Collection<T>"/>
                </params>
                <comment line="200">
                    sanity checks                    
                </comment>
                <comment line="203">
                    number of clusters has to be smaller or equal the number of data points                    
                </comment>
                <comment line="208">
                    create the initial clusters                    
                </comment>
                <comment line="211">
                    create an array containing the latest assignment of a point to a cluster
                     no need to initialize the array, as it will be filled with the first assignment                    
                </comment>
                <comment line="216">
                    iterate through updating the centers until we&apos;re done                    
                </comment>
                <comment line="246">
                    if there were no more changes in the point-to-cluster assignment
                     and there are no empty clusters left, return the current clusters                    
                </comment>
                <scope line="203"/>
                <declaration name="clusters" type="List&lt;CentroidCluster&lt;T&gt;&gt;" line="208"/>
                <declaration name="assignments" type="int[]" line="212"/>
                <declaration name="max" type="int" line="216"/>
                <scope line="217">
                    <declaration name="emptyCluster" type="boolean" line="218"/>
                    <declaration name="newClusters" type="List&lt;CentroidCluster&lt;T&gt;&gt;" line="219"/>
                    <scope line="220">
                        <declaration name="newCenter" type="Clusterable" line="221"/>
                        <scope line="222"/>
                        <scope line="237"/>
                    </scope>
                    <declaration name="changes" type="int" line="242"/>
                    <scope line="247"/>
                </scope>
            </method>
            <javadoc line="254">
                Adds the given points to the closest {@link Cluster}.                
                <param>
                    clusters the {@link Cluster}s to add the points to                    
                </param>
                <param>
                    points the points to add to the given {@link Cluster}s                    
                </param>
                <param>
                    assignments points assignments to clusters                    
                </param>
                <return>
                    the number of points assigned to different clusters as the iteration before                    
                </return>
            </javadoc>
            <method name="assignPointsToClusters" type="int" line="264">
                <params>
                    <param name="clusters" type="List<CentroidCluster<T>>"/>
                    <param name="points" type="Collection<T>"/>
                    <param name="assignments" type="int[]"/>
                </params>
                <declaration name="assignedDifferently" type="int" line="265"/>
                <declaration name="pointIndex" type="int" line="266"/>
                <scope line="267">
                    <declaration name="clusterIndex" type="int" line="268"/>
                    <scope line="269"/>
                    <declaration name="cluster" type="CentroidCluster&lt;T&gt;" line="273"/>
                </scope>
            </method>
            <javadoc line="281">
                Use K-means++ to choose the initial centers.                
                <param>
                    points the points to choose the initial centers from                    
                </param>
                <return>
                    the initial centers                    
                </return>
            </javadoc>
            <method name="chooseInitialCenters" type="List<CentroidCluster<T>>" line="287">
                <params>
                    <param name="points" type="Collection<T>"/>
                </params>
                <comment line="290">
                    Convert to list for indexed access. Make it unmodifiable, since removal of items
                     would screw up the logic of this method.                    
                </comment>
                <comment line="294">
                    The number of points in the list.                    
                </comment>
                <comment line="297">
                    Set the corresponding element in this array to indicate when
                     elements of pointList are no longer available.                    
                </comment>
                <comment line="301">
                    The resulting list of initial centers.                    
                </comment>
                <comment line="304">
                    Choose one center uniformly at random from among the data points.                    
                </comment>
                <comment line="311">
                    Must mark it as taken                    
                </comment>
                <comment line="314">
                    To keep track of the minimum distance squared of elements of
                     pointList to elements of resultSet.                    
                </comment>
                <comment line="318">
                    Initialize the elements.  Since the only point in resultSet is firstPoint,
                     this is very easy.                    
                </comment>
                <comment line="321">
                    That point isn&apos;t considered                    
                </comment>
                <comment line="329">
                    Sum up the squared distances for the points in pointList not
                     already taken.                    
                </comment>
                <comment line="339">
                    Add one new data point as a center. Each point x is chosen with
                     probability proportional to D(x)2                    
                </comment>
                <comment line="343">
                    The index of the next point to be added to the resultSet.                    
                </comment>
                <comment line="346">
                    Sum through the squared min distances again, stopping when
                     sum &gt;= r.                    
                </comment>
                <comment line="359">
                    If it&apos;s not set to &gt;= 0, the point wasn&apos;t found in the previous
                     for loop, probably because distances are extremely small.  Just pick
                     the last available point.                    
                </comment>
                <comment line="371">
                    We found one.                    
                </comment>
                <comment line="378">
                    Mark it as taken.                    
                </comment>
                <comment line="382">
                    Now update elements of minDistSquared.  We only have to compute
                     the distance to the new center to do this.                    
                </comment>
                <comment line="385">
                    Only have to worry about the points still not taken.                    
                </comment>
                <comment line="397">
                    None found --
                     Break from the while loop to prevent
                     an infinite loop.                    
                </comment>
                <declaration name="pointList" type="List&lt;T&gt;" line="291"/>
                <declaration name="numPoints" type="int" line="294"/>
                <declaration name="taken" type="boolean[]" line="298"/>
                <declaration name="resultSet" type="List&lt;CentroidCluster&lt;T&gt;&gt;" line="301"/>
                <declaration name="firstPointIndex" type="int" line="304"/>
                <declaration name="firstPoint" type="T" line="306"/>
                <declaration name="minDistSquared" type="double[]" line="315"/>
                <scope line="319">
                    <scope line="320">
                        <declaration name="d" type="double" line="321"/>
                    </scope>
                </scope>
                <scope line="326">
                    <declaration name="distSqSum" type="double" line="330"/>
                    <scope line="332">
                        <scope line="333"/>
                    </scope>
                    <declaration name="r" type="double" line="340"/>
                    <declaration name="nextPointIndex" type="int" line="343"/>
                    <declaration name="sum" type="double" line="347"/>
                    <scope line="348">
                        <scope line="349">
                            <scope line="351"/>
                        </scope>
                    </scope>
                    <scope line="361">
                        <scope line="362">
                            <scope line="363"/>
                        </scope>
                    </scope>
                    <scope line="371">
                        <declaration name="p" type="T" line="373"/>
                        <scope line="380">
                            <scope line="383">
                                <scope line="385">
                                    <declaration name="d" type="double" line="386"/>
                                    <declaration name="d2" type="double" line="387"/>
                                    <scope line="388"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="395"/>
                </scope>
            </method>
            <javadoc line="406">
                Get a random point from the {@link Cluster} with the largest distance variance.                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    a random point from the selected cluster                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getPointFromLargestVarianceCluster" type="T" line="414">
                <params>
                    <param name="clusters" type="Collection<CentroidCluster<T>>"/>
                </params>
                <comment line="422">
                    compute the distance variance of the current cluster                    
                </comment>
                <comment line="430">
                    select the cluster with the largest variance                    
                </comment>
                <comment line="439">
                    did we find at least one non-empty cluster ?                    
                </comment>
                <comment line="444">
                    extract a random point from the cluster                    
                </comment>
                <declaration name="maxVariance" type="double" line="416"/>
                <declaration name="selected" type="Cluster&lt;T&gt;" line="417"/>
                <scope line="418">
                    <scope line="419">
                        <declaration name="center" type="Clusterable" line="422"/>
                        <declaration name="stat" type="Variance" line="423"/>
                        <scope line="424"/>
                        <declaration name="variance" type="double" line="427"/>
                        <scope line="430"/>
                    </scope>
                </scope>
                <scope line="439"/>
                <declaration name="selectedPoints" type="List&lt;T&gt;" line="444"/>
            </method>
            <javadoc line="449">
                Get a random point from the {@link Cluster} with the largest number of points                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    a random point from the selected cluster                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getPointFromLargestNumberCluster" type="T" line="457">
                <params>
                    <param name="clusters" type="Collection<? extends Cluster<T>>"/>
                </params>
                <comment line="464">
                    get the number of points of the current cluster                    
                </comment>
                <comment line="467">
                    select the cluster with the largest number of points                    
                </comment>
                <comment line="475">
                    did we find at least one non-empty cluster ?                    
                </comment>
                <comment line="480">
                    extract a random point from the cluster                    
                </comment>
                <declaration name="maxNumber" type="int" line="459"/>
                <declaration name="selected" type="Cluster&lt;T&gt;" line="460"/>
                <scope line="461">
                    <declaration name="number" type="int" line="464"/>
                    <scope line="467"/>
                </scope>
                <scope line="475"/>
                <declaration name="selectedPoints" type="List&lt;T&gt;" line="480"/>
            </method>
            <javadoc line="485">
                Get the point farthest to its cluster center                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    point farthest to its cluster center                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getFarthestPoint" type="T" line="492">
                <params>
                    <param name="clusters" type="Collection<CentroidCluster<T>>"/>
                </params>
                <comment line="500">
                    get the farthest point                    
                </comment>
                <comment line="514">
                    did we find at least one non-empty cluster ?                    
                </comment>
                <declaration name="maxDistance" type="double" line="494"/>
                <declaration name="selectedCluster" type="Cluster&lt;T&gt;" line="495"/>
                <declaration name="selectedPoint" type="int" line="496"/>
                <scope line="497">
                    <declaration name="center" type="Clusterable" line="500"/>
                    <declaration name="points" type="List&lt;T&gt;" line="501"/>
                    <scope line="502">
                        <declaration name="distance" type="double" line="503"/>
                        <scope line="504"/>
                    </scope>
                </scope>
                <scope line="514"/>
            </method>
            <javadoc line="522">
                Returns the nearest {@link Cluster} to the given point                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <param>
                    point the point to find the nearest {@link Cluster} for                    
                </param>
                <return>
                    the index of the nearest {@link Cluster} to the given point                    
                </return>
            </javadoc>
            <method name="getNearestCluster" type="int" line="529">
                <params>
                    <param name="clusters" type="Collection<CentroidCluster<T>>"/>
                    <param name="point" type="T"/>
                </params>
                <declaration name="minDistance" type="double" line="530"/>
                <declaration name="clusterIndex" type="int" line="531"/>
                <declaration name="minCluster" type="int" line="532"/>
                <scope line="533">
                    <declaration name="distance" type="double" line="534"/>
                    <scope line="535"/>
                </scope>
            </method>
            <javadoc line="544">
                Computes the centroid for a set of points.                
                <param>
                    points the set of points                    
                </param>
                <param>
                    dimension the point dimension                    
                </param>
                <return>
                    the computed centroid for the set of points                    
                </return>
            </javadoc>
            <method name="centroidOf" type="Clusterable" line="551">
                <params>
                    <param name="points" type="Collection<T>"/>
                    <param name="dimension" type="int"/>
                </params>
                <declaration name="centroid" type="double[]" line="552"/>
                <scope line="553">
                    <declaration name="point" type="double[]" line="554"/>
                    <scope line="555"/>
                </scope>
                <scope line="559"/>
            </method>
        </class>
    </source>