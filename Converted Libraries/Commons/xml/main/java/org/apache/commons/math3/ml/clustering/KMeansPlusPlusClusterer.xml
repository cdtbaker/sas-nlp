<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.ml.distance.DistanceMeasure"/>
        <import package="org.apache.commons.math3.ml.distance.EuclideanDistance"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="KMeansPlusPlusClusterer" line="16">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="Clusterer">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="16">
                Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.                
                <param>
                    <T>
                      type of the points to cluster                    
                </param>
                <see>
                    <a href="http://en.wikipedia.org/wiki/K-means%2B%2B">K-means++ (wikipedia)</a>                    
                </see>
                <version>
                    $Id: KMeansPlusPlusClusterer.java 1461866 2013-03-27 21:54:36Z tn $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="EmptyClusterStrategy" type="enum" line="25"/>
            <javadoc line="25">
                Strategies to use for replacing an empty cluster.                
            </javadoc>
            <scope line="28"/>
            <declaration name="k" type="int" line="41"/>
            <javadoc line="41">
                The number of clusters.                
            </javadoc>
            <declaration name="maxIterations" type="int" line="45"/>
            <javadoc line="45">
                The maximum number of iterations.                
            </javadoc>
            <declaration name="random" type="RandomGenerator" line="49"/>
            <javadoc line="49">
                Random generator for choosing initial centers.                
            </javadoc>
            <declaration name="emptyStrategy" type="EmptyClusterStrategy" line="53"/>
            <javadoc line="53">
                Selected strategy for empty clusters.                
            </javadoc>
            <javadoc line="57">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.
                  &lt;p&gt;
                  The euclidean distance will be used as default distance measure.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="66">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="69">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.
                  &lt;p&gt;
                  The euclidean distance will be used as default distance measure.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="80">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="83">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="93">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                </params>
            </method>
            <javadoc line="96">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="107">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                    <param name="random" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="110">
                Build a clusterer.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
                <param>
                    emptyStrategy strategy to use for handling empty clusters that
                      may appear during algorithm iterations                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="120">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                    <param name="random" type="RandomGenerator"/>
                    <param name="emptyStrategy" type="EmptyClusterStrategy"/>
                </params>
            </method>
            <javadoc line="127">
                Return the number of clusters this instance will use.                
                <return>
                    the number of clusters                    
                </return>
            </javadoc>
            <method name="getK" type="int" line="131"/>
            <javadoc line="134">
                Returns the maximum number of iterations this instance will use.                
                <return>
                    the maximum number of iterations, or -1 if no maximum is set                    
                </return>
            </javadoc>
            <method name="getMaxIterations" type="int" line="138"/>
            <javadoc line="141">
                Returns the random generator this instance will use.                
                <return>
                    the random generator                    
                </return>
            </javadoc>
            <method name="getRandomGenerator" type="RandomGenerator" line="145"/>
            <javadoc line="148">
                Returns the {@link EmptyClusterStrategy} used by this instance.                
                <return>
                    the {@link EmptyClusterStrategy}                    
                </return>
            </javadoc>
            <method name="getEmptyClusterStrategy" type="EmptyClusterStrategy" line="152"/>
            <javadoc line="155">
                Runs the K-means++ clustering algorithm.                
                <param>
                    points the points to cluster                    
                </param>
                <return>
                    a list of clusters containing the points                    
                </return>
                <throws>
                    MathIllegalArgumentException if the data points are null or the number
                      of clusters is larger than the number of data points                    
                </throws>
                <throws>
                    ConvergenceException if an empty cluster is encountered and the{@link #emptyStrategy} is set to {@code ERROR}                    
                </throws>
            </javadoc>
            <method name="cluster" type="List<CentroidCluster<T>>" line="163">
                <params>
                    <param name="points" type="Collection<T>"/>
                </params>
                <scope line="165"/>
                <declaration name="clusters" type="List&lt;CentroidCluster&lt;T&gt;&gt;" line="168"/>
                <declaration name="assignments" type="int[]" line="169"/>
                <declaration name="max" type="int" line="171"/>
                <scope line="172">
                    <declaration name="emptyCluster" type="boolean" line="173"/>
                    <declaration name="newClusters" type="List&lt;CentroidCluster&lt;T&gt;&gt;" line="174"/>
                    <scope line="175">
                        <declaration name="newCenter" type="Clusterable" line="176"/>
                        <scope line="177"/>
                        <scope line="193"/>
                    </scope>
                    <declaration name="changes" type="int" line="198"/>
                    <scope line="200"/>
                </scope>
            </method>
            <javadoc line="206">
                Adds the given points to the closest {@link Cluster}.                
                <param>
                    clusters the {@link Cluster}s to add the points to                    
                </param>
                <param>
                    points the points to add to the given {@link Cluster}s                    
                </param>
                <param>
                    assignments points assignments to clusters                    
                </param>
                <return>
                    the number of points assigned to different clusters as the iteration before                    
                </return>
            </javadoc>
            <method name="assignPointsToClusters" type="int" line="213">
                <params>
                    <param name="clusters" type="List<CentroidCluster<T>>"/>
                    <param name="points" type="Collection<T>"/>
                    <param name="assignments" type="int[]"/>
                </params>
                <declaration name="assignedDifferently" type="int" line="214"/>
                <declaration name="pointIndex" type="int" line="215"/>
                <scope line="216">
                    <declaration name="clusterIndex" type="int" line="217"/>
                    <scope line="218"/>
                    <declaration name="cluster" type="CentroidCluster&lt;T&gt;" line="221"/>
                </scope>
            </method>
            <javadoc line="227">
                Use K-means++ to choose the initial centers.                
                <param>
                    points the points to choose the initial centers from                    
                </param>
                <return>
                    the initial centers                    
                </return>
            </javadoc>
            <method name="chooseInitialCenters" type="List<CentroidCluster<T>>" line="232">
                <params>
                    <param name="points" type="Collection<T>"/>
                </params>
                <declaration name="pointList" type="List&lt;T&gt;" line="233"/>
                <declaration name="numPoints" type="int" line="234"/>
                <declaration name="taken" type="boolean[]" line="235"/>
                <declaration name="resultSet" type="List&lt;CentroidCluster&lt;T&gt;&gt;" line="236"/>
                <declaration name="firstPointIndex" type="int" line="237"/>
                <declaration name="firstPoint" type="T" line="238"/>
                <declaration name="minDistSquared" type="double[]" line="241"/>
                <scope line="242">
                    <scope line="243">
                        <declaration name="d" type="double" line="244"/>
                    </scope>
                </scope>
                <scope line="248">
                    <declaration name="distSqSum" type="double" line="249"/>
                    <scope line="250">
                        <scope line="251"/>
                    </scope>
                    <declaration name="r" type="double" line="255"/>
                    <declaration name="nextPointIndex" type="int" line="256"/>
                    <declaration name="sum" type="double" line="257"/>
                    <scope line="258">
                        <scope line="259">
                            <scope line="261"/>
                        </scope>
                    </scope>
                    <scope line="267">
                        <scope line="268">
                            <scope line="269"/>
                        </scope>
                    </scope>
                    <scope line="275">
                        <declaration name="p" type="T" line="276"/>
                        <scope line="279">
                            <scope line="280">
                                <scope line="281">
                                    <declaration name="d" type="double" line="282"/>
                                    <declaration name="d2" type="double" line="283"/>
                                    <scope line="284"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="291"/>
                </scope>
            </method>
            <javadoc line="297">
                Get a random point from the {@link Cluster} with the largest distance variance.                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    a random point from the selected cluster                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getPointFromLargestVarianceCluster" type="T" line="303">
                <params>
                    <param name="clusters" type="Collection<CentroidCluster<T>>"/>
                </params>
                <declaration name="maxVariance" type="double" line="304"/>
                <declaration name="selected" type="Cluster&lt;T&gt;" line="305"/>
                <scope line="306">
                    <scope line="307">
                        <declaration name="center" type="Clusterable" line="308"/>
                        <declaration name="stat" type="Variance" line="309"/>
                        <scope line="310"/>
                        <declaration name="variance" type="double" line="313"/>
                        <scope line="314"/>
                    </scope>
                </scope>
                <scope line="320"/>
                <declaration name="selectedPoints" type="List&lt;T&gt;" line="323"/>
            </method>
            <javadoc line="326">
                Get a random point from the {@link Cluster} with the largest number of points                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    a random point from the selected cluster                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getPointFromLargestNumberCluster" type="T" line="332">
                <params>
                    <param name="clusters" type="Collection<? extends Cluster<T>>"/>
                </params>
                <declaration name="maxNumber" type="int" line="333"/>
                <declaration name="selected" type="Cluster&lt;T&gt;" line="334"/>
                <scope line="335">
                    <declaration name="number" type="int" line="336"/>
                    <scope line="337"/>
                </scope>
                <scope line="342"/>
                <declaration name="selectedPoints" type="List&lt;T&gt;" line="345"/>
            </method>
            <javadoc line="348">
                Get the point farthest to its cluster center                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    point farthest to its cluster center                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getFarthestPoint" type="T" line="354">
                <params>
                    <param name="clusters" type="Collection<CentroidCluster<T>>"/>
                </params>
                <declaration name="maxDistance" type="double" line="355"/>
                <declaration name="selectedCluster" type="Cluster&lt;T&gt;" line="356"/>
                <declaration name="selectedPoint" type="int" line="357"/>
                <scope line="358">
                    <declaration name="center" type="Clusterable" line="359"/>
                    <declaration name="points" type="List&lt;T&gt;" line="360"/>
                    <scope line="361">
                        <declaration name="distance" type="double" line="362"/>
                        <scope line="363"/>
                    </scope>
                </scope>
                <scope line="370"/>
            </method>
            <javadoc line="375">
                Returns the nearest {@link Cluster} to the given point                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <param>
                    point the point to find the nearest {@link Cluster} for                    
                </param>
                <return>
                    the index of the nearest {@link Cluster} to the given point                    
                </return>
            </javadoc>
            <method name="getNearestCluster" type="int" line="381">
                <params>
                    <param name="clusters" type="Collection<CentroidCluster<T>>"/>
                    <param name="point" type="T"/>
                </params>
                <declaration name="minDistance" type="double" line="382"/>
                <declaration name="clusterIndex" type="int" line="383"/>
                <declaration name="minCluster" type="int" line="384"/>
                <scope line="385">
                    <declaration name="distance" type="double" line="386"/>
                    <scope line="387"/>
                </scope>
            </method>
            <javadoc line="395">
                Computes the centroid for a set of points.                
                <param>
                    points the set of points                    
                </param>
                <param>
                    dimension the point dimension                    
                </param>
                <return>
                    the computed centroid for the set of points                    
                </return>
            </javadoc>
            <method name="centroidOf" type="Clusterable" line="401">
                <params>
                    <param name="points" type="Collection<T>"/>
                    <param name="dimension" type="int"/>
                </params>
                <declaration name="centroid" type="double[]" line="402"/>
                <scope line="403">
                    <declaration name="point" type="double[]" line="404"/>
                    <scope line="405"/>
                </scope>
                <scope line="409"/>
            </method>
        </class>
    </source>