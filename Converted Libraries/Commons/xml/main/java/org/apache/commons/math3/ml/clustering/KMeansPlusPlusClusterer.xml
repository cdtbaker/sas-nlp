<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.ml.distance.DistanceMeasure"/>
        <import package="org.apache.commons.math3.ml.distance.EuclideanDistance"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="KMeansPlusPlusClusterer" line="36">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="Clusterer">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="36">
                Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.                
                <param>
                    &lt;T&gt;
                       type of the points to cluster                    
                </param>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/K-means%2B%2B&quot;&gt;K-means++ (wikipedia)&lt;/a&gt;                    
                </see>
                <version>
                    $Id: KMeansPlusPlusClusterer.java 1503290 2013-07-15 15:16:29Z sebb $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="EmptyClusterStrategy" type="enum" line="45"/>
            <javadoc line="45">
                Strategies to use for replacing an empty cluster.                
            </javadoc>
            <scope line="46"/>
            <declaration name="k" type="int" line="62"/>
            <javadoc line="62">
                The number of clusters.                
            </javadoc>
            <declaration name="maxIterations" type="int" line="65"/>
            <javadoc line="65">
                The maximum number of iterations.                
            </javadoc>
            <declaration name="random" type="RandomGenerator" line="68"/>
            <javadoc line="68">
                Random generator for choosing initial centers.                
            </javadoc>
            <declaration name="emptyStrategy" type="EmptyClusterStrategy" line="71"/>
            <javadoc line="71">
                Selected strategy for empty clusters.                
            </javadoc>
            <javadoc line="74">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.
                  &lt;p&gt;
                  The euclidean distance will be used as default distance measure.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="83">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="87">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.
                  &lt;p&gt;
                  The euclidean distance will be used as default distance measure.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="98">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <javadoc line="102">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="112">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                </params>
            </method>
            <javadoc line="116">
                Build a clusterer.
                  &lt;p&gt;
                  The default strategy for handling empty clusters that may appear during
                  algorithm iterations is to split the cluster with largest distance variance.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="129">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                    <param name="random" type="RandomGenerator"/>
                </params>
            </method>
            <javadoc line="133">
                Build a clusterer.                
                <param>
                    k the number of clusters to split the data into                    
                </param>
                <param>
                    maxIterations the maximum number of iterations to run the algorithm for.
                      If negative, no maximum will be used.                    
                </param>
                <param>
                    measure the distance measure to use                    
                </param>
                <param>
                    random random generator to use for choosing initial centers                    
                </param>
                <param>
                    emptyStrategy strategy to use for handling empty clusters that
                      may appear during algorithm iterations                    
                </param>
            </javadoc>
            <method name="KMeansPlusPlusClusterer" type="constructor" line="146">
                <params>
                    <param name="k" type="int"/>
                    <param name="maxIterations" type="int"/>
                    <param name="measure" type="DistanceMeasure"/>
                    <param name="random" type="RandomGenerator"/>
                    <param name="emptyStrategy" type="EmptyClusterStrategy"/>
                </params>
            </method>
            <javadoc line="154">
                Return the number of clusters this instance will use.                
                <return>
                    the number of clusters                    
                </return>
            </javadoc>
            <method name="getK" type="int" line="158"/>
            <javadoc line="162">
                Returns the maximum number of iterations this instance will use.                
                <return>
                    the maximum number of iterations, or -1 if no maximum is set                    
                </return>
            </javadoc>
            <method name="getMaxIterations" type="int" line="166"/>
            <javadoc line="170">
                Returns the random generator this instance will use.                
                <return>
                    the random generator                    
                </return>
            </javadoc>
            <method name="getRandomGenerator" type="RandomGenerator" line="174"/>
            <javadoc line="178">
                Returns the {@link EmptyClusterStrategy} used by this instance.                
                <return>
                    the {@link EmptyClusterStrategy}                    
                </return>
            </javadoc>
            <method name="getEmptyClusterStrategy" type="EmptyClusterStrategy" line="182"/>
            <javadoc line="186">
                Runs the K-means++ clustering algorithm.                
                <param>
                    points the points to cluster                    
                </param>
                <return>
                    a list of clusters containing the points                    
                </return>
                <throws>
                    MathIllegalArgumentException if the data points are null or the number
                      of clusters is larger than the number of data points                    
                </throws>
                <throws>
                    ConvergenceException if an empty cluster is encountered and the{@link #emptyStrategy} is set to {@code ERROR}                    
                </throws>
            </javadoc>
            <method name="cluster" type="List&lt;CentroidCluster&lt;T&gt;&gt;" line="198">
                <params>
                    <param name="points" type="Collection&lt;T&gt;"/>
                </params>
                <comment line="201">
                    sanity checks                    
                </comment>
                <comment line="204">
                    number of clusters has to be smaller or equal the number of data points                    
                </comment>
                <comment line="209">
                    create the initial clusters                    
                </comment>
                <comment line="212">
                    create an array containing the latest assignment of a point to a cluster
                     no need to initialize the array, as it will be filled with the first assignment                    
                </comment>
                <comment line="217">
                    iterate through updating the centers until we&apos;re done                    
                </comment>
                <comment line="247">
                    if there were no more changes in the point-to-cluster assignment
                     and there are no empty clusters left, return the current clusters                    
                </comment>
                <scope line="204"/>
                <declaration name="clusters" type="List&amp;lt;CentroidCluster&amp;lt;T&amp;gt;&amp;gt;" line="209"/>
                <declaration name="assignments" type="int[]" line="213"/>
                <declaration name="max" type="int" line="217"/>
                <scope line="218">
                    <declaration name="emptyCluster" type="boolean" line="219"/>
                    <declaration name="newClusters" type="List&amp;lt;CentroidCluster&amp;lt;T&amp;gt;&amp;gt;" line="220"/>
                    <scope line="221">
                        <declaration name="newCenter" type="Clusterable" line="222"/>
                        <scope line="223"/>
                        <scope line="238"/>
                    </scope>
                    <declaration name="changes" type="int" line="243"/>
                    <scope line="248"/>
                </scope>
            </method>
            <javadoc line="255">
                Adds the given points to the closest {@link Cluster}.                
                <param>
                    clusters the {@link Cluster}s to add the points to                    
                </param>
                <param>
                    points the points to add to the given {@link Cluster}s                    
                </param>
                <param>
                    assignments points assignments to clusters                    
                </param>
                <return>
                    the number of points assigned to different clusters as the iteration before                    
                </return>
            </javadoc>
            <method name="assignPointsToClusters" type="int" line="265">
                <params>
                    <param name="clusters" type="List&lt;CentroidCluster&lt;T&gt;&gt;"/>
                    <param name="points" type="Collection&lt;T&gt;"/>
                    <param name="assignments" type="int[]"/>
                </params>
                <declaration name="assignedDifferently" type="int" line="266"/>
                <declaration name="pointIndex" type="int" line="267"/>
                <scope line="268">
                    <declaration name="clusterIndex" type="int" line="269"/>
                    <scope line="270"/>
                    <declaration name="cluster" type="CentroidCluster&amp;lt;T&amp;gt;" line="274"/>
                </scope>
            </method>
            <javadoc line="282">
                Use K-means++ to choose the initial centers.                
                <param>
                    points the points to choose the initial centers from                    
                </param>
                <return>
                    the initial centers                    
                </return>
            </javadoc>
            <method name="chooseInitialCenters" type="List&lt;CentroidCluster&lt;T&gt;&gt;" line="288">
                <params>
                    <param name="points" type="Collection&lt;T&gt;"/>
                </params>
                <comment line="291">
                    Convert to list for indexed access. Make it unmodifiable, since removal of items
                     would screw up the logic of this method.                    
                </comment>
                <comment line="295">
                    The number of points in the list.                    
                </comment>
                <comment line="298">
                    Set the corresponding element in this array to indicate when
                     elements of pointList are no longer available.                    
                </comment>
                <comment line="302">
                    The resulting list of initial centers.                    
                </comment>
                <comment line="305">
                    Choose one center uniformly at random from among the data points.                    
                </comment>
                <comment line="312">
                    Must mark it as taken                    
                </comment>
                <comment line="315">
                    To keep track of the minimum distance squared of elements of
                     pointList to elements of resultSet.                    
                </comment>
                <comment line="319">
                    Initialize the elements.  Since the only point in resultSet is firstPoint,
                     this is very easy.                    
                </comment>
                <comment line="322">
                    That point isn&apos;t considered                    
                </comment>
                <comment line="330">
                    Sum up the squared distances for the points in pointList not
                     already taken.                    
                </comment>
                <comment line="340">
                    Add one new data point as a center. Each point x is chosen with
                     probability proportional to D(x)2                    
                </comment>
                <comment line="344">
                    The index of the next point to be added to the resultSet.                    
                </comment>
                <comment line="347">
                    Sum through the squared min distances again, stopping when
                     sum &gt;= r.                    
                </comment>
                <comment line="360">
                    If it&apos;s not set to &gt;= 0, the point wasn&apos;t found in the previous
                     for loop, probably because distances are extremely small.  Just pick
                     the last available point.                    
                </comment>
                <comment line="372">
                    We found one.                    
                </comment>
                <comment line="379">
                    Mark it as taken.                    
                </comment>
                <comment line="383">
                    Now update elements of minDistSquared.  We only have to compute
                     the distance to the new center to do this.                    
                </comment>
                <comment line="386">
                    Only have to worry about the points still not taken.                    
                </comment>
                <comment line="398">
                    None found --
                     Break from the while loop to prevent
                     an infinite loop.                    
                </comment>
                <declaration name="pointList" type="List&amp;lt;T&amp;gt;" line="292"/>
                <declaration name="numPoints" type="int" line="295"/>
                <declaration name="taken" type="boolean[]" line="299"/>
                <declaration name="resultSet" type="List&amp;lt;CentroidCluster&amp;lt;T&amp;gt;&amp;gt;" line="302"/>
                <declaration name="firstPointIndex" type="int" line="305"/>
                <declaration name="firstPoint" type="T" line="307"/>
                <declaration name="minDistSquared" type="double[]" line="316"/>
                <scope line="320">
                    <scope line="321">
                        <declaration name="d" type="double" line="322"/>
                    </scope>
                </scope>
                <scope line="327">
                    <declaration name="distSqSum" type="double" line="331"/>
                    <scope line="333">
                        <scope line="334"/>
                    </scope>
                    <declaration name="r" type="double" line="341"/>
                    <declaration name="nextPointIndex" type="int" line="344"/>
                    <declaration name="sum" type="double" line="348"/>
                    <scope line="349">
                        <scope line="350">
                            <scope line="352"/>
                        </scope>
                    </scope>
                    <scope line="362">
                        <scope line="363">
                            <scope line="364"/>
                        </scope>
                    </scope>
                    <scope line="372">
                        <declaration name="p" type="T" line="374"/>
                        <scope line="381">
                            <scope line="384">
                                <scope line="386">
                                    <declaration name="d" type="double" line="387"/>
                                    <declaration name="d2" type="double" line="388"/>
                                    <scope line="389"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="396"/>
                </scope>
            </method>
            <javadoc line="407">
                Get a random point from the {@link Cluster} with the largest distance variance.                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    a random point from the selected cluster                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getPointFromLargestVarianceCluster" type="T" line="415">
                <params>
                    <param name="clusters" type="Collection&lt;CentroidCluster&lt;T&gt;&gt;"/>
                </params>
                <comment line="423">
                    compute the distance variance of the current cluster                    
                </comment>
                <comment line="431">
                    select the cluster with the largest variance                    
                </comment>
                <comment line="440">
                    did we find at least one non-empty cluster ?                    
                </comment>
                <comment line="445">
                    extract a random point from the cluster                    
                </comment>
                <declaration name="maxVariance" type="double" line="417"/>
                <declaration name="selected" type="Cluster&amp;lt;T&amp;gt;" line="418"/>
                <scope line="419">
                    <scope line="420">
                        <declaration name="center" type="Clusterable" line="423"/>
                        <declaration name="stat" type="Variance" line="424"/>
                        <scope line="425"/>
                        <declaration name="variance" type="double" line="428"/>
                        <scope line="431"/>
                    </scope>
                </scope>
                <scope line="440"/>
                <declaration name="selectedPoints" type="List&amp;lt;T&amp;gt;" line="445"/>
            </method>
            <javadoc line="450">
                Get a random point from the {@link Cluster} with the largest number of points                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    a random point from the selected cluster                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getPointFromLargestNumberCluster" type="T" line="458">
                <params>
                    <param name="clusters" type="Collection&lt;? extends Cluster&lt;T&gt;&gt;"/>
                </params>
                <comment line="465">
                    get the number of points of the current cluster                    
                </comment>
                <comment line="468">
                    select the cluster with the largest number of points                    
                </comment>
                <comment line="476">
                    did we find at least one non-empty cluster ?                    
                </comment>
                <comment line="481">
                    extract a random point from the cluster                    
                </comment>
                <declaration name="maxNumber" type="int" line="460"/>
                <declaration name="selected" type="Cluster&amp;lt;T&amp;gt;" line="461"/>
                <scope line="462">
                    <declaration name="number" type="int" line="465"/>
                    <scope line="468"/>
                </scope>
                <scope line="476"/>
                <declaration name="selectedPoints" type="List&amp;lt;T&amp;gt;" line="481"/>
            </method>
            <javadoc line="486">
                Get the point farthest to its cluster center                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <return>
                    point farthest to its cluster center                    
                </return>
                <throws>
                    ConvergenceException if clusters are all empty                    
                </throws>
            </javadoc>
            <method name="getFarthestPoint" type="T" line="493">
                <params>
                    <param name="clusters" type="Collection&lt;CentroidCluster&lt;T&gt;&gt;"/>
                </params>
                <comment line="501">
                    get the farthest point                    
                </comment>
                <comment line="515">
                    did we find at least one non-empty cluster ?                    
                </comment>
                <declaration name="maxDistance" type="double" line="495"/>
                <declaration name="selectedCluster" type="Cluster&amp;lt;T&amp;gt;" line="496"/>
                <declaration name="selectedPoint" type="int" line="497"/>
                <scope line="498">
                    <declaration name="center" type="Clusterable" line="501"/>
                    <declaration name="points" type="List&amp;lt;T&amp;gt;" line="502"/>
                    <scope line="503">
                        <declaration name="distance" type="double" line="504"/>
                        <scope line="505"/>
                    </scope>
                </scope>
                <scope line="515"/>
            </method>
            <javadoc line="523">
                Returns the nearest {@link Cluster} to the given point                
                <param>
                    clusters the {@link Cluster}s to search                    
                </param>
                <param>
                    point the point to find the nearest {@link Cluster} for                    
                </param>
                <return>
                    the index of the nearest {@link Cluster} to the given point                    
                </return>
            </javadoc>
            <method name="getNearestCluster" type="int" line="530">
                <params>
                    <param name="clusters" type="Collection&lt;CentroidCluster&lt;T&gt;&gt;"/>
                    <param name="point" type="T"/>
                </params>
                <declaration name="minDistance" type="double" line="531"/>
                <declaration name="clusterIndex" type="int" line="532"/>
                <declaration name="minCluster" type="int" line="533"/>
                <scope line="534">
                    <declaration name="distance" type="double" line="535"/>
                    <scope line="536"/>
                </scope>
            </method>
            <javadoc line="545">
                Computes the centroid for a set of points.                
                <param>
                    points the set of points                    
                </param>
                <param>
                    dimension the point dimension                    
                </param>
                <return>
                    the computed centroid for the set of points                    
                </return>
            </javadoc>
            <method name="centroidOf" type="Clusterable" line="552">
                <params>
                    <param name="points" type="Collection&lt;T&gt;"/>
                    <param name="dimension" type="int"/>
                </params>
                <declaration name="centroid" type="double[]" line="553"/>
                <scope line="554">
                    <declaration name="point" type="double[]" line="555"/>
                    <scope line="556"/>
                </scope>
                <scope line="560"/>
            </method>
        </class>
    </source>