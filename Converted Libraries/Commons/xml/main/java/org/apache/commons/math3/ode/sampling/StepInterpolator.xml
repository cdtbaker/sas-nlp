<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.sampling">
        <import package="java.io.Externalizable"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <interface name="StepInterpolator">
            <implements interface="Externalizable"/>
            <javadoc line="4">
                This interface represents an interpolator over the last step
                  during an ODE integration.
                  &lt;p&gt;The various ODE integrators provide objects implementing this
                  interface to the step handlers. These objects are often custom
                  objects tightly bound to the integrator internal algorithms. The
                  handlers can use these objects to retrieve the state vector at
                  intermediate times between the previous and the current grid points
                  (this feature is often called dense output).&lt;/p&gt;
                  &lt;p&gt;One important thing to note is that the step handlers may be so
                  tightly bound to the integrators that they often share some internal
                  state arrays. This imply that one should &lt;em&gt;never&lt;/em&gt; use a direct
                  reference to a step interpolator outside of the step handler, either
                  for future use or for use in another thread. If such a need arise, the
                  step interpolator &lt;em&gt;must&lt;/em&gt; be copied using the dedicated{@link #copy()} method.
                  &lt;/p&gt;                
                <see>
                    org.apache.commons.math3.ode.FirstOrderIntegrator                    
                </see>
                <see>
                    org.apache.commons.math3.ode.SecondOrderIntegrator                    
                </see>
                <see>
                    StepHandler                    
                </see>
                <version>
                    $Id: StepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPreviousTime" type="double" line="27"/>
            <javadoc line="27">
                Get the previous grid point time.                
                <return>
                    previous grid point time                    
                </return>
            </javadoc>
            <method name="getCurrentTime" type="double" line="32"/>
            <javadoc line="32">
                Get the current grid point time.                
                <return>
                    current grid point time                    
                </return>
            </javadoc>
            <method name="getInterpolatedTime" type="double" line="37"/>
            <javadoc line="37">
                Get the time of the interpolated point.
                  If {@link #setInterpolatedTime} has not been called, it returns
                  the current grid point time.                
                <return>
                    interpolation point time                    
                </return>
            </javadoc>
            <method name="setInterpolatedTime" type="void" line="44"/>
            <javadoc line="44">
                Set the time of the interpolated point.
                  &lt;p&gt;Setting the time outside of the current step is now allowed, but
                  should be used with care since the accuracy of the interpolator will
                  probably be very poor far from this step. This allowance has been
                  added to simplify implementation of search algorithms near the
                  step endpoints.&lt;/p&gt;
                  &lt;p&gt;Setting the time changes the instance internal state. If a
                  specific state must be preserved, a copy of the instance must be
                  created using {@link #copy()}.&lt;/p&gt;                
                <param>
                    time time of the interpolated point                    
                </param>
            </javadoc>
            <method name="getInterpolatedState" type="double[]" line="57"/>
            <javadoc line="57">
                Get the state vector of the interpolated point.
                  &lt;p&gt;The returned vector is a reference to a reused array, so
                  it should not be modified and it should be copied if it needs
                  to be preserved across several calls.&lt;/p&gt;                
                <return>
                    state vector at time {@link #getInterpolatedTime}                    
                </return>
                <see>
                    #getInterpolatedDerivatives()                    
                </see>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded                    
                </exception>
            </javadoc>
            <method name="getInterpolatedDerivatives" type="double[]" line="67"/>
            <javadoc line="67">
                Get the derivatives of the state vector of the interpolated point.
                  &lt;p&gt;The returned vector is a reference to a reused array, so
                  it should not be modified and it should be copied if it needs
                  to be preserved across several calls.&lt;/p&gt;                
                <return>
                    derivatives of the state vector at time {@link #getInterpolatedTime}                    
                </return>
                <see>
                    #getInterpolatedState()                    
                </see>
                <since>
                    2.0                    
                </since>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded                    
                </exception>
            </javadoc>
            <method name="getInterpolatedSecondaryState" type="double[]" line="78"/>
            <javadoc line="78">
                Get the interpolated secondary state corresponding to the secondary equations.
                  &lt;p&gt;The returned vector is a reference to a reused array, so
                  it should not be modified and it should be copied if it needs
                  to be preserved across several calls.&lt;/p&gt;                
                <param>
                    index index of the secondary set, as returned by {@link org.apache.commons.math3.ode.ExpandableStatefulODE#addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations)ExpandableStatefulODE.addSecondaryEquations(SecondaryEquations)}                    
                </param>
                <return>
                    interpolated secondary state at the current interpolation date                    
                </return>
                <see>
                    #getInterpolatedState()                    
                </see>
                <see>
                    #getInterpolatedDerivatives()                    
                </see>
                <see>
                    #getInterpolatedSecondaryDerivatives(int)                    
                </see>
                <see>
                    #setInterpolatedTime(double)                    
                </see>
                <since>
                    3.0                    
                </since>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded                    
                </exception>
            </javadoc>
            <method name="getInterpolatedSecondaryDerivatives" type="double[]" line="93"/>
            <javadoc line="93">
                Get the interpolated secondary derivatives corresponding to the secondary equations.
                  &lt;p&gt;The returned vector is a reference to a reused array, so
                  it should not be modified and it should be copied if it needs
                  to be preserved across several calls.&lt;/p&gt;                
                <param>
                    index index of the secondary set, as returned by {@link org.apache.commons.math3.ode.ExpandableStatefulODE#addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations)ExpandableStatefulODE.addSecondaryEquations(SecondaryEquations)}                    
                </param>
                <return>
                    interpolated secondary derivatives at the current interpolation date                    
                </return>
                <see>
                    #getInterpolatedState()                    
                </see>
                <see>
                    #getInterpolatedDerivatives()                    
                </see>
                <see>
                    #getInterpolatedSecondaryState(int)                    
                </see>
                <see>
                    #setInterpolatedTime(double)                    
                </see>
                <since>
                    3.0                    
                </since>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded                    
                </exception>
            </javadoc>
            <method name="isForward" type="boolean" line="108"/>
            <javadoc line="108">
                Check if the natural integration direction is forward.
                  &lt;p&gt;This method provides the integration direction as specified by
                  the integrator itself, it avoid some nasty problems in
                  degenerated cases like null steps due to cancellation at step
                  initialization, step control or discrete events
                  triggering.&lt;/p&gt;                
                <return>
                    true if the integration variable (time) increases during
                      integration                    
                </return>
            </javadoc>
            <method name="copy" type="StepInterpolator" line="119"/>
            <javadoc line="119">
                Copy the instance.
                  &lt;p&gt;The copied instance is guaranteed to be independent from the
                  original one. Both can be used with different settings for
                  interpolated time without any side effect.&lt;/p&gt;                
                <return>
                    a deep copy of the instance, which can be used independently.                    
                </return>
                <see>
                    #setInterpolatedTime(double)                    
                </see>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded
                      during step finalization                    
                </exception>
            </javadoc>
        </interface>
    </source>