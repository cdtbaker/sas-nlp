<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector">
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.BaseMultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <class name="MultivariateVectorOptimizer" line="29">
            <extends class="BaseMultivariateOptimizer">
                <type_params>
                    <type_param name="PointVectorValuePair"/>
                </type_params>
            </extends>
            <javadoc line="29">
                Base class for a multivariate vector function optimizer.                
                <version>
                    $Id: MultivariateVectorOptimizer.java 1443444 2013-02-07 12:41:36Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="target" type="double[]" line="37"/>
            <javadoc line="37">
                Target values for the model function at optimum.                
            </javadoc>
            <declaration name="weightMatrix" type="RealMatrix" line="39"/>
            <javadoc line="39">
                Weight matrix.                
            </javadoc>
            <declaration name="model" type="MultivariateVectorFunction" line="41"/>
            <javadoc line="41">
                Model function.                
            </javadoc>
            <javadoc line="44">
                @param checker Convergence checker.                
            </javadoc>
            <method name="MultivariateVectorOptimizer" type="constructor" line="47">
                <params>
                    <param name="checker" type="ConvergenceChecker<PointVectorValuePair>"/>
                </params>
            </method>
            <javadoc line="51">
                Computes the objective function value.
                  This method &lt;em&gt;must&lt;/em&gt; be called by subclasses to enforce the
                  evaluation counter limit.                
                <param>
                    params Point at which the objective function must be evaluated.                    
                </param>
                <return>
                    the objective function value at the specified point.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of evaluations
                      (of the model vector function) is exceeded.                    
                </throws>
            </javadoc>
            <method name="computeObjectiveValue" type="double[]" line="61">
                <params>
                    <param name="params" type="double[]"/>
                </params>
            </method>
            <javadoc line="66">
                {@inheritDoc}                
                <param>
                    optData Optimization data. In addition to those documented in{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])BaseMultivariateOptimizer}, this method will register the following data:
                      <ul>
                      <li>{@link Target}</li>
                      <li>{@link Weight}</li>
                      <li>{@link ModelFunction}</li>
                      </ul>                    
                </param>
                <return>
                    {@inheritDoc}                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
                <throws>
                    DimensionMismatchException if the initial guess, target, and weight
                      arguments have inconsistent dimensions.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PointVectorValuePair" line="85">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="86">
                    Set up base class and perform computation.                    
                </comment>
            </method>
            <javadoc line="90">
                Gets the weight matrix of the observations.                
                <return>
                    the weight matrix.                    
                </return>
            </javadoc>
            <method name="getWeight" type="RealMatrix" line="95"/>
            <javadoc line="98">
                Gets the observed values to be matched by the objective vector
                  function.                
                <return>
                    the target values.                    
                </return>
            </javadoc>
            <method name="getTarget" type="double[]" line="104"/>
            <javadoc line="108">
                Gets the number of observed values.                
                <return>
                    the length of the target vector.                    
                </return>
            </javadoc>
            <method name="getTargetSize" type="int" line="113"/>
            <javadoc line="117">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data. The following data will be looked for:
                      <ul>
                      <li>{@link Target}</li>
                      <li>{@link Weight}</li>
                      <li>{@link ModelFunction}</li>
                      </ul>                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="129">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="130">
                    Allow base class to register its own data.                    
                </comment>
                <comment line="133">
                    The existing values (as set by the previous call) are reused if                    
                </comment>
                <comment line="134">
                    not provided in the argument list.                    
                </comment>
                <comment line="150">
                    Check input consistency.                    
                </comment>
                <scope line="135">
                    <scope line="136"/>
                    <scope line="140"/>
                    <scope line="144"/>
                </scope>
            </method>
            <javadoc line="154">
                Check parameters consistency.                
                <throws>
                    DimensionMismatchException if {@link #target} and{@link #weightMatrix} have inconsistent dimensions.                    
                </throws>
            </javadoc>
            <method name="checkParameters" type="void" line="160">
                <scope line="161"/>
            </method>
        </class>
    </source>