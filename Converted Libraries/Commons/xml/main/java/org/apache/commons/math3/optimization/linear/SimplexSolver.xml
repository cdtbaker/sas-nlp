<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.linear">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimplexSolver" line="7">
            <extends class="AbstractLinearOptimizer"/>
            <javadoc line="7">
                Solves a linear problem using the Two-Phase Simplex Method.                
                <version>
                    $Id: SimplexSolver.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="14"/>
            <javadoc line="14">
                Default amount of error to accept for algorithm convergence.                
            </javadoc>
            <declaration name="DEFAULT_ULPS" type="int" line="18"/>
            <javadoc line="18">
                Default amount of error to accept in floating point comparisons (as ulps).                
            </javadoc>
            <declaration name="epsilon" type="double" line="22"/>
            <javadoc line="22">
                Amount of error to accept for algorithm convergence.                
            </javadoc>
            <declaration name="maxUlps" type="int" line="26"/>
            <javadoc line="26">
                Amount of error to accept in floating point comparisons (as ulps).                
            </javadoc>
            <javadoc line="30">
                Build a simplex solver with default settings.                
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="33"/>
            <javadoc line="36">
                Build a simplex solver with a specified accepted amount of error                
                <param>
                    epsilon the amount of error to accept for algorithm convergence                    
                </param>
                <param>
                    maxUlps amount of error to accept in floating point comparisons                    
                </param>
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="41">
                <params>
                    <param name="epsilon" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="45">
                Returns the column with the most negative coefficient in the objective function row.                
                <param>
                    tableau simple tableau for the problem                    
                </param>
                <return>
                    column with the most negative coefficient                    
                </return>
            </javadoc>
            <method name="getPivotColumn" type="Integer" line="50">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                </params>
                <declaration name="minValue" type="double" line="51"/>
                <declaration name="minPos" type="Integer" line="52"/>
                <scope line="53">
                    <declaration name="entry" type="double" line="54"/>
                    <scope line="55"/>
                </scope>
            </method>
            <javadoc line="62">
                Returns the row with the minimum ratio as given by the minimum ratio test (MRT).                
                <param>
                    tableau simple tableau for the problem                    
                </param>
                <param>
                    col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}                    
                </param>
                <return>
                    row with the minimum ratio                    
                </return>
            </javadoc>
            <method name="getPivotRow" type="Integer" line="68">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                    <param name="col" type="int"/>
                </params>
                <declaration name="minRatioPositions" type="List&lt;Integer&gt;" line="69"/>
                <declaration name="minRatio" type="double" line="70"/>
                <scope line="71">
                    <declaration name="rhs" type="double" line="72"/>
                    <declaration name="entry" type="double" line="73"/>
                    <scope line="74">
                        <declaration name="ratio" type="double" line="75"/>
                        <declaration name="cmp" type="int" line="76"/>
                        <scope line="77"/>
                        <scope line="80"/>
                    </scope>
                </scope>
                <scope line="87"/>
                <scope line="90">
                    <scope line="91">
                        <scope line="92">
                            <scope line="93">
                                <declaration name="column" type="int" line="94"/>
                                <declaration name="entry" type="double" line="95"/>
                                <scope line="96"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="102">
                        <declaration name="minRow" type="Integer" line="103"/>
                        <declaration name="minIndex" type="int" line="104"/>
                        <declaration name="varStart" type="int" line="105"/>
                        <declaration name="varEnd" type="int" line="106"/>
                        <scope line="107">
                            <scope line="108">
                                <declaration name="basicRow" type="Integer" line="109"/>
                                <scope line="110"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="121">
                Runs one iteration of the Simplex method on the given model.                
                <param>
                    tableau simple tableau for the problem                    
                </param>
                <throws>
                    MaxCountExceededException if the maximal iteration count has been exceeded                    
                </throws>
                <throws>
                    UnboundedSolutionException if the model is found not to have a bounded solution                    
                </throws>
            </javadoc>
            <method name="doIteration" type="void" line="127">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                </params>
                <declaration name="pivotCol" type="Integer" line="129"/>
                <declaration name="pivotRow" type="Integer" line="130"/>
                <scope line="131"/>
                <declaration name="pivotVal" type="double" line="134"/>
                <scope line="136">
                    <scope line="137">
                        <declaration name="multiplier" type="double" line="138"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="143">
                Solves Phase 1 of the Simplex method.                
                <param>
                    tableau simple tableau for the problem                    
                </param>
                <throws>
                    MaxCountExceededException if the maximal iteration count has been exceeded                    
                </throws>
                <throws>
                    UnboundedSolutionException if the model is found not to have a bounded solution                    
                </throws>
                <throws>
                    NoFeasibleSolutionException if there is no feasible solution                    
                </throws>
            </javadoc>
            <method name="solvePhase1" type="void" line="150">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                </params>
                <scope line="151"/>
                <scope line="154"/>
                <scope line="157"/>
            </method>
            <javadoc line="161">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="164">
                <declaration name="tableau" type="SimplexTableau" line="165"/>
                <scope line="168"/>
            </method>
        </class>
    </source>