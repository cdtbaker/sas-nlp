<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.linear">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimplexSolver" line="28">
            <extends class="AbstractLinearOptimizer"/>
            <javadoc line="28">
                Solves a linear problem using the Two-Phase Simplex Method.                
                <version>
                    $Id: SimplexSolver.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="38"/>
            <javadoc line="38">
                Default amount of error to accept for algorithm convergence.                
            </javadoc>
            <declaration name="DEFAULT_ULPS" type="int" line="41"/>
            <javadoc line="41">
                Default amount of error to accept in floating point comparisons (as ulps).                
            </javadoc>
            <declaration name="epsilon" type="double" line="44"/>
            <javadoc line="44">
                Amount of error to accept for algorithm convergence.                
            </javadoc>
            <declaration name="maxUlps" type="int" line="47"/>
            <javadoc line="47">
                Amount of error to accept in floating point comparisons (as ulps).                
            </javadoc>
            <javadoc line="50">
                Build a simplex solver with default settings.                
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="53"/>
            <javadoc line="57">
                Build a simplex solver with a specified accepted amount of error                
                <param>
                    epsilon the amount of error to accept for algorithm convergence                    
                </param>
                <param>
                    maxUlps amount of error to accept in floating point comparisons                    
                </param>
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="62">
                <params>
                    <param name="epsilon" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="67">
                Returns the column with the most negative coefficient in the objective function row.                
                <param>
                    tableau simple tableau for the problem                    
                </param>
                <return>
                    column with the most negative coefficient                    
                </return>
            </javadoc>
            <method name="getPivotColumn" type="Integer" line="72">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                </params>
                <comment line="78">
                    check if the entry is strictly smaller than the current minimum
                     do not use a ulp/epsilon check                    
                </comment>
                <declaration name="minValue" type="double" line="73"/>
                <declaration name="minPos" type="Integer" line="74"/>
                <scope line="75">
                    <declaration name="entry" type="double" line="76"/>
                    <scope line="79"/>
                </scope>
            </method>
            <javadoc line="87">
                Returns the row with the minimum ratio as given by the minimum ratio test (MRT).                
                <param>
                    tableau simple tableau for the problem                    
                </param>
                <param>
                    col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}                    
                </param>
                <return>
                    row with the minimum ratio                    
                </return>
            </javadoc>
            <method name="getPivotRow" type="Integer" line="93">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                    <param name="col" type="int"/>
                </params>
                <comment line="95">
                    create a list of all the rows that tie for the lowest score in the minimum ratio test                    
                </comment>
                <comment line="104">
                    check if the entry is strictly equal to the current min ratio
                     do not use a ulp/epsilon check                    
                </comment>
                <comment line="120">
                    there&apos;s a degeneracy as indicated by a tie in the minimum ratio test                    
                </comment>
                <comment line="122">
                    1. check if there&apos;s an artificial variable that can be forced out of the basis                    
                </comment>
                <comment line="135">
                    2. apply Bland&apos;s rule to prevent cycling:
                        take the row for which the corresponding basic variable has the smallest index
                    
                     see http:www.stanford.edu/class/msande310/blandrule.pdf
                     see http:en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
                    
                     Additional heuristic: if we did not get a solution after half of maxIterations
                                           revert to the simple case of just returning the top-most row
                     This heuristic is based on empirical data gathered while investigating MATH-828.                    
                </comment>
                <declaration name="minRatioPositions" type="List&lt;Integer&gt;" line="95"/>
                <declaration name="minRatio" type="double" line="96"/>
                <scope line="97">
                    <declaration name="rhs" type="double" line="98"/>
                    <declaration name="entry" type="double" line="99"/>
                    <scope line="101">
                        <declaration name="ratio" type="double" line="102"/>
                        <declaration name="cmp" type="int" line="105"/>
                        <scope line="106"/>
                        <scope line="108"/>
                    </scope>
                </scope>
                <scope line="116"/>
                <scope line="118">
                    <scope line="122">
                        <scope line="123">
                            <scope line="124">
                                <declaration name="column" type="int" line="125"/>
                                <declaration name="entry" type="double" line="126"/>
                                <scope line="127"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="143">
                        <declaration name="minRow" type="Integer" line="144"/>
                        <declaration name="minIndex" type="int" line="145"/>
                        <declaration name="varStart" type="int" line="146"/>
                        <declaration name="varEnd" type="int" line="147"/>
                        <scope line="148">
                            <scope line="149">
                                <declaration name="basicRow" type="Integer" line="150"/>
                                <scope line="151"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="163">
                Runs one iteration of the Simplex method on the given model.                
                <param>
                    tableau simple tableau for the problem                    
                </param>
                <throws>
                    MaxCountExceededException if the maximal iteration count has been exceeded                    
                </throws>
                <throws>
                    UnboundedSolutionException if the model is found not to have a bounded solution                    
                </throws>
            </javadoc>
            <method name="doIteration" type="void" line="170">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                </params>
                <comment line="181">
                    set the pivot element to 1                    
                </comment>
                <comment line="185">
                    set the rest of the pivot column to 0                    
                </comment>
                <declaration name="pivotCol" type="Integer" line="174"/>
                <declaration name="pivotRow" type="Integer" line="175"/>
                <scope line="176"/>
                <declaration name="pivotVal" type="double" line="181"/>
                <scope line="185">
                    <scope line="186">
                        <declaration name="multiplier" type="double" line="187"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="193">
                Solves Phase 1 of the Simplex method.                
                <param>
                    tableau simple tableau for the problem                    
                </param>
                <throws>
                    MaxCountExceededException if the maximal iteration count has been exceeded                    
                </throws>
                <throws>
                    UnboundedSolutionException if the model is found not to have a bounded solution                    
                </throws>
                <throws>
                    NoFeasibleSolutionException if there is no feasible solution                    
                </throws>
            </javadoc>
            <method name="solvePhase1" type="void" line="201">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                </params>
                <comment line="204">
                    make sure we&apos;re in Phase 1                    
                </comment>
                <comment line="213">
                    if W is not zero then we have no feasible solution                    
                </comment>
                <scope line="204"/>
                <scope line="208"/>
                <scope line="213"/>
            </method>
            <javadoc line="218">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="221">
                <declaration name="tableau" type="SimplexTableau" line="222"/>
                <scope line="233"/>
            </method>
        </class>
    </source>