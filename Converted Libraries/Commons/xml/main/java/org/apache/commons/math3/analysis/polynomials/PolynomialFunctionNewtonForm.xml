<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="PolynomialFunctionNewtonForm" line="9">
            <implements interface="UnivariateDifferentiableFunction"/>
            <javadoc line="9">
                Implements the representation of a real polynomial function in
                  Newton Form. For reference, see &lt;b&gt;Elementary Numerical Analysis&lt;/b&gt;,
                  ISBN 0070124477, chapter 2.
                  &lt;p&gt;
                  The formula of polynomial in Newton form is
                  p(x) = a[0] + a[1](x-c[0]) + a[2](x-c[0])(x-c[1]) + ... +
                  a[n](x-c[0])(x-c[1])...(x-c[n-1])
                  Note that the length of a[] is one more than the length of c[]&lt;/p&gt;                
                <version>
                    $Id: PolynomialFunctionNewtonForm.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="coefficients" type="double" line="22"/>
            <javadoc line="22">
                The coefficients of the polynomial, ordered by degree -- i.e.
                  coefficients[0] is the constant term and coefficients[n] is the
                  coefficient of x^n where n is the degree of the polynomial.                
            </javadoc>
            <declaration name="c" type="double" line="28"/>
            <javadoc line="28">
                Centers of the Newton polynomial.                
            </javadoc>
            <declaration name="a" type="double" line="32"/>
            <javadoc line="32">
                When all c[i] = 0, a[] becomes normal polynomial coefficients,
                  i.e. a[i] = coefficients[i].                
            </javadoc>
            <declaration name="coefficientsComputed" type="boolean" line="37"/>
            <javadoc line="37">
                Whether the polynomial coefficients are available.                
            </javadoc>
            <javadoc line="41">
                Construct a Newton polynomial with the given a[] and c[]. The order of
                  centers are important in that if c[] shuffle, then values of a[] would
                  completely change, not just a permutation of old a[].
                  &lt;p&gt;
                  The constructor makes copy of the input arrays and assigns them.&lt;/p&gt;                
                <param>
                    a Coefficients in Newton form formula.                    
                </param>
                <param>
                    c Centers.                    
                </param>
                <throws>
                    NullArgumentException if any argument is {@code null}.                    
                </throws>
                <throws>
                    NoDataException if any array has zero length.                    
                </throws>
                <throws>
                    DimensionMismatchException if the size difference between{@code a} and {@code c} is not equal to 1.                    
                </throws>
            </javadoc>
            <method name="PolynomialFunctionNewtonForm" type="constructor" line="53">
                <params>
                    <param name="a" type="double"/>
                    <param name="c" type="double"/>
                </params>
            </method>
            <javadoc line="61">
                Calculate the function value at the given point.                
                <param>
                    z Point at which the function value is to be computed.                    
                </param>
                <return>
                    the function value.                    
                </return>
            </javadoc>
            <method name="value" type="double" line="66">
                <params>
                    <param name="z" type="double"/>
                </params>
            </method>
            <javadoc line="69">
                {@inheritDoc}                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="value" type="DerivativeStructure" line="73">
                <params>
                    <param name="t" type="DerivativeStructure"/>
                </params>
                <declaration name="n" type="int" line="75"/>
                <declaration name="value" type="DerivativeStructure" line="76"/>
                <scope line="77"/>
            </method>
            <javadoc line="82">
                Returns the degree of the polynomial.                
                <return>
                    the degree of the polynomial                    
                </return>
            </javadoc>
            <method name="degree" type="int" line="86"/>
            <javadoc line="89">
                Returns a copy of coefficients in Newton form formula.
                  &lt;p&gt;
                  Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;                
                <return>
                    a fresh copy of coefficients in Newton form formula                    
                </return>
            </javadoc>
            <method name="getNewtonCoefficients" type="double[]" line="95">
                <declaration name="out" type="double[]" line="96"/>
            </method>
            <javadoc line="100">
                Returns a copy of the centers array.
                  &lt;p&gt;
                  Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;                
                <return>
                    a fresh copy of the centers array.                    
                </return>
            </javadoc>
            <method name="getCenters" type="double[]" line="106">
                <declaration name="out" type="double[]" line="107"/>
            </method>
            <javadoc line="111">
                Returns a copy of the coefficients array.
                  &lt;p&gt;
                  Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;                
                <return>
                    a fresh copy of the coefficients array.                    
                </return>
            </javadoc>
            <method name="getCoefficients" type="double[]" line="117">
                <scope line="118"/>
                <declaration name="out" type="double[]" line="121"/>
            </method>
            <javadoc line="125">
                Evaluate the Newton polynomial using nested multiplication. It is
                  also called &lt;a href=&quot;http://mathworld.wolfram.com/HornersRule.html&quot;&gt;
                  Horner&apos;s Rule&lt;/a&gt; and takes O(N) time.                
                <param>
                    a Coefficients in Newton form formula.                    
                </param>
                <param>
                    c Centers.                    
                </param>
                <param>
                    z Point at which the function value is to be computed.                    
                </param>
                <return>
                    the function value.                    
                </return>
                <throws>
                    NullArgumentException if any argument is {@code null}.                    
                </throws>
                <throws>
                    NoDataException if any array has zero length.                    
                </throws>
                <throws>
                    DimensionMismatchException if the size difference between{@code a} and {@code c} is not equal to 1.                    
                </throws>
            </javadoc>
            <method name="evaluate" type="double" line="137">
                <params>
                    <param name="a" type="double"/>
                    <param name="c" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <declaration name="n" type="int" line="139"/>
                <declaration name="value" type="double" line="140"/>
                <scope line="141"/>
            </method>
            <javadoc line="146">
                Calculate the normal polynomial coefficients given the Newton form.
                  It also uses nested multiplication but takes O(N^2) time.                
            </javadoc>
            <method name="computeCoefficients" type="void" line="150">
                <declaration name="n" type="int" line="151"/>
                <scope line="153"/>
                <scope line="157">
                    <scope line="158"/>
                </scope>
            </method>
            <javadoc line="165">
                Verifies that the input arrays are valid.
                  &lt;p&gt;
                  The centers must be distinct for interpolation purposes, but not
                  for general use. Thus it is not verified here.&lt;/p&gt;                
                <param>
                    a the coefficients in Newton form formula                    
                </param>
                <param>
                    c the centers                    
                </param>
                <throws>
                    NullArgumentException if any argument is {@code null}.                    
                </throws>
                <throws>
                    NoDataException if any array has zero length.                    
                </throws>
                <throws>
                    DimensionMismatchException if the size difference between{@code a} and {@code c} is not equal to 1.                    
                </throws>
                <see>
                    org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator#computeDividedDifference(double[],double[])                    
                </see>
            </javadoc>
            <method name="verifyInputArray" type="void" line="177">
                <params>
                    <param name="a" type="double"/>
                    <param name="c" type="double"/>
                </params>
                <scope line="180"/>
                <scope line="183"/>
            </method>
        </class>
    </source>