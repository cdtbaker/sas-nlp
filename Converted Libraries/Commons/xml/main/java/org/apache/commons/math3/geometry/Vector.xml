<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry">
        <import package="java.io.Serializable"/>
        <import package="java.text.NumberFormat"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <interface name="Vector">
            <type_params>
                <type_param name="S"/>
            </type_params>
            <implements interface="Serializable"/>
            <javadoc line="5">
                This interface represents a generic vector in a vectorial space or a point in an affine space.                
                <param>
                    <S>
                      Type of the space.                    
                </param>
                <version>
                    $Id: Vector.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <see>
                    Space                    
                </see>
                <see>
                    Vector                    
                </see>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="getSpace" type="Space" line="15"/>
            <javadoc line="15">
                Get the space to which the vector belongs.                
                <return>
                    containing space                    
                </return>
            </javadoc>
            <method name="getZero" type="Vector<S>" line="20"/>
            <javadoc line="20">
                Get the null vector of the vectorial space or origin point of the affine space.                
                <return>
                    null vector of the vectorial space or origin point of the affine space                    
                </return>
            </javadoc>
            <method name="getNorm1" type="double" line="25"/>
            <javadoc line="25">
                Get the L&lt;sub&gt;1&lt;/sub&gt; norm for the vector.                
                <return>
                    L<sub>1</sub> norm for the vector                    
                </return>
            </javadoc>
            <method name="getNorm" type="double" line="30"/>
            <javadoc line="30">
                Get the L&lt;sub&gt;2&lt;/sub&gt; norm for the vector.                
                <return>
                    Euclidean norm for the vector                    
                </return>
            </javadoc>
            <method name="getNormSq" type="double" line="35"/>
            <javadoc line="35">
                Get the square of the norm for the vector.                
                <return>
                    square of the Euclidean norm for the vector                    
                </return>
            </javadoc>
            <method name="getNormInf" type="double" line="40"/>
            <javadoc line="40">
                Get the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm for the vector.                
                <return>
                    L<sub>&infin;</sub> norm for the vector                    
                </return>
            </javadoc>
            <method name="add" type="Vector<S>" line="45"/>
            <javadoc line="45">
                Add a vector to the instance.                
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="Vector<S>" line="51"/>
            <javadoc line="51">
                Add a scaled vector to the instance.                
                <param>
                    factor scale factor to apply to v before adding it                    
                </param>
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="Vector<S>" line="58"/>
            <javadoc line="58">
                Subtract a vector from the instance.                
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="Vector<S>" line="64"/>
            <javadoc line="64">
                Subtract a scaled vector from the instance.                
                <param>
                    factor scale factor to apply to v before subtracting it                    
                </param>
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="negate" type="Vector<S>" line="71"/>
            <javadoc line="71">
                Get the opposite of the instance.                
                <return>
                    a new vector which is opposite to the instance                    
                </return>
            </javadoc>
            <method name="normalize" type="Vector<S>" line="76"/>
            <javadoc line="76">
                Get a normalized vector aligned with the instance.                
                <return>
                    a new normalized vector                    
                </return>
                <exception>
                    MathArithmeticException if the norm is zero                    
                </exception>
            </javadoc>
            <method name="scalarMultiply" type="Vector<S>" line="82"/>
            <javadoc line="82">
                Multiply the instance by a scalar.                
                <param>
                    a scalar                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="88"/>
            <javadoc line="88">
                Returns true if any coordinate of this vector is NaN; false otherwise                
                <return>
                    true if any coordinate of this vector is NaN; false otherwise                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="93"/>
            <javadoc line="93">
                Returns true if any coordinate of this vector is infinite and none are NaN;
                  false otherwise                
                <return>
                    true if any coordinate of this vector is infinite and none are NaN;
                      false otherwise                    
                </return>
            </javadoc>
            <method name="distance1" type="double" line="100"/>
            <javadoc line="100">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L<sub>1</sub> norm                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="109"/>
            <javadoc line="109">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L<sub>2</sub> norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="double" line="118"/>
            <javadoc line="118">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L<sub>&infin;</sub> norm                    
                </return>
            </javadoc>
            <method name="distanceSq" type="double" line="127"/>
            <javadoc line="127">
                Compute the square of the distance between the instance and another vector.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the square of the distance between the instance and p                    
                </return>
            </javadoc>
            <method name="dotProduct" type="double" line="136"/>
            <javadoc line="136">
                Compute the dot-product of the instance and another vector.                
                <param>
                    v second vector                    
                </param>
                <return>
                    the dot product this.v                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="142"/>
            <javadoc line="142">
                Get a string representation of this vector.                
                <param>
                    format the custom format for components                    
                </param>
                <return>
                    a string representation of this vector                    
                </return>
            </javadoc>
        </interface>
    </source>