<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry">
        <import package="java.io.Serializable"/>
        <import package="java.text.NumberFormat"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <interface name="Vector">
            <type_params>
                <type_param name="S"/>
            </type_params>
            <implements interface="Serializable"/>
            <javadoc line="24">
                This interface represents a generic vector in a vectorial space or a point in an affine space.                
                <param>
                    &lt;S&gt;
                       Type of the space.                    
                </param>
                <version>
                    $Id: Vector.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <see>
                    Space                    
                </see>
                <see>
                    Vector                    
                </see>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="getSpace" type="Space" line="33"/>
            <javadoc line="33">
                Get the space to which the vector belongs.                
                <return>
                    containing space                    
                </return>
            </javadoc>
            <method name="getZero" type="Vector<S>" line="38"/>
            <javadoc line="38">
                Get the null vector of the vectorial space or origin point of the affine space.                
                <return>
                    null vector of the vectorial space or origin point of the affine space                    
                </return>
            </javadoc>
            <method name="getNorm1" type="double" line="43"/>
            <javadoc line="43">
                Get the L&lt;sub&gt;1&lt;/sub&gt; norm for the vector.                
                <return>
                    L&lt;sub&gt;1&lt;/sub&gt; norm for the vector                    
                </return>
            </javadoc>
            <method name="getNorm" type="double" line="48"/>
            <javadoc line="48">
                Get the L&lt;sub&gt;2&lt;/sub&gt; norm for the vector.                
                <return>
                    Euclidean norm for the vector                    
                </return>
            </javadoc>
            <method name="getNormSq" type="double" line="53"/>
            <javadoc line="53">
                Get the square of the norm for the vector.                
                <return>
                    square of the Euclidean norm for the vector                    
                </return>
            </javadoc>
            <method name="getNormInf" type="double" line="58"/>
            <javadoc line="58">
                Get the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm for the vector.                
                <return>
                    L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm for the vector                    
                </return>
            </javadoc>
            <method name="add" type="Vector<S>" line="63"/>
            <javadoc line="63">
                Add a vector to the instance.                
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="add" type="Vector<S>" line="69"/>
            <javadoc line="69">
                Add a scaled vector to the instance.                
                <param>
                    factor scale factor to apply to v before adding it                    
                </param>
                <param>
                    v vector to add                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="Vector<S>" line="76"/>
            <javadoc line="76">
                Subtract a vector from the instance.                
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="subtract" type="Vector<S>" line="82"/>
            <javadoc line="82">
                Subtract a scaled vector from the instance.                
                <param>
                    factor scale factor to apply to v before subtracting it                    
                </param>
                <param>
                    v vector to subtract                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="negate" type="Vector<S>" line="89"/>
            <javadoc line="89">
                Get the opposite of the instance.                
                <return>
                    a new vector which is opposite to the instance                    
                </return>
            </javadoc>
            <method name="normalize" type="Vector<S>" line="94"/>
            <javadoc line="94">
                Get a normalized vector aligned with the instance.                
                <return>
                    a new normalized vector                    
                </return>
                <exception>
                    MathArithmeticException if the norm is zero                    
                </exception>
            </javadoc>
            <method name="scalarMultiply" type="Vector<S>" line="100"/>
            <javadoc line="100">
                Multiply the instance by a scalar.                
                <param>
                    a scalar                    
                </param>
                <return>
                    a new vector                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="106"/>
            <javadoc line="106">
                Returns true if any coordinate of this vector is NaN; false otherwise                
                <return>
                    true if any coordinate of this vector is NaN; false otherwise                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="112"/>
            <javadoc line="112">
                Returns true if any coordinate of this vector is infinite and none are NaN;
                  false otherwise                
                <return>
                    true if any coordinate of this vector is infinite and none are NaN;
                      false otherwise                    
                </return>
            </javadoc>
            <method name="distance1" type="double" line="120"/>
            <javadoc line="120">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm1()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L&lt;sub&gt;1&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="129"/>
            <javadoc line="129">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L&lt;sub&gt;2&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="double" line="138"/>
            <javadoc line="138">
                Compute the distance between the instance and another vector according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the distance between the instance and p according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm                    
                </return>
            </javadoc>
            <method name="distanceSq" type="double" line="147"/>
            <javadoc line="147">
                Compute the square of the distance between the instance and another vector.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;q.subtract(p).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    v second vector                    
                </param>
                <return>
                    the square of the distance between the instance and p                    
                </return>
            </javadoc>
            <method name="dotProduct" type="double" line="156"/>
            <javadoc line="156">
                Compute the dot-product of the instance and another vector.                
                <param>
                    v second vector                    
                </param>
                <return>
                    the dot product this.v                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="162"/>
            <javadoc line="162">
                Get a string representation of this vector.                
                <param>
                    format the custom format for components                    
                </param>
                <return>
                    a string representation of this vector                    
                </return>
            </javadoc>
        </interface>
    </source>