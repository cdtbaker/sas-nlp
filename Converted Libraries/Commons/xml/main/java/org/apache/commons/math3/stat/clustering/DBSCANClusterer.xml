<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="DBSCANClusterer" line="12">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="12">
                DBSCAN (density-based spatial clustering of applications with noise) algorithm.
                  &lt;p&gt;
                  The DBSCAN algorithm forms clusters based on the idea of density connectivity, i.e.
                  a point p is density connected to another point q, if there exists a chain of
                  points p&lt;sub&gt;i&lt;/sub&gt;, with i = 1 .. n and p&lt;sub&gt;1&lt;/sub&gt; = p and p&lt;sub&gt;n&lt;/sub&gt; = q,
                  such that each pair &amp;lt;p&lt;sub&gt;i&lt;/sub&gt;, p&lt;sub&gt;i+1&lt;/sub&gt;&amp;gt; is directly density-reachable.
                  A point q is directly density-reachable from point p if it is in the &amp;epsilon;-neighborhood
                  of this point.
                  &lt;p&gt;
                  Any point that is not density-reachable from a formed cluster is treated as noise, and
                  will thus not be present in the result.
                  &lt;p&gt;
                  The algorithm requires two parameters:
                  &lt;ul&gt;
                  &lt;li&gt;eps: the distance that defines the &amp;epsilon;-neighborhood of a point
                  &lt;li&gt;minPoints: the minimum number of density-connected points required to form a cluster
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; as DBSCAN is not a centroid-based clustering algorithm, the resulting{@link Cluster} objects will have no defined center, i.e. {@link Cluster#getCenter()} will
                  return {@code null}.                
                <param>
                    <T>
                      type of the points to cluster                    
                </param>
                <see>
                    <a href="http://en.wikipedia.org/wiki/DBSCAN">DBSCAN (wikipedia)</a>                    
                </see>
                <see>
                    <a href="http://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf">
                      A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise</a>                    
                </see>
                <version>
                    $Id: DBSCANClusterer.java 1461871 2013-03-27 22:01:25Z tn $                    
                </version>
                <since>
                    3.1                    
                </since>
                <deprecated>
                    As of 3.2 (to be removed in 4.0),
                      use {@link org.apache.commons.math3.ml.clustering.DBSCANClusterer} instead                    
                </deprecated>
            </javadoc>
            <declaration name="eps" type="double" line="44"/>
            <javadoc line="44">
                Maximum radius of the neighborhood to be considered.                
            </javadoc>
            <declaration name="minPts" type="int" line="48"/>
            <javadoc line="48">
                Minimum number of points needed for a cluster.                
            </javadoc>
            <declaration name="PointStatus" type="enum" line="52"/>
            <javadoc line="52">
                Status of a point during the clustering process.                
            </javadoc>
            <scope line="55"/>
            <javadoc line="62">
                Creates a new instance of a DBSCANClusterer.                
                <param>
                    eps maximum radius of the neighborhood to be considered                    
                </param>
                <param>
                    minPts minimum number of points needed for a cluster                    
                </param>
                <throws>
                    NotPositiveException if {@code eps < 0.0} or {@code minPts < 0}                    
                </throws>
            </javadoc>
            <method name="DBSCANClusterer" type="constructor" line="68">
                <params>
                    <param name="eps" type="double"/>
                    <param name="minPts" type="int"/>
                </params>
                <scope line="69"/>
                <scope line="72"/>
            </method>
            <javadoc line="78">
                Returns the maximum radius of the neighborhood to be considered.                
                <return>
                    maximum radius of the neighborhood                    
                </return>
            </javadoc>
            <method name="getEps" type="double" line="82"/>
            <javadoc line="85">
                Returns the minimum number of points needed for a cluster.                
                <return>
                    minimum number of points needed for a cluster                    
                </return>
            </javadoc>
            <method name="getMinPts" type="int" line="89"/>
            <javadoc line="92">
                Performs DBSCAN cluster analysis.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; as DBSCAN is not a centroid-based clustering algorithm, the resulting{@link Cluster} objects will have no defined center, i.e. {@link Cluster#getCenter()} will
                  return {@code null}.                
                <param>
                    points the points to cluster                    
                </param>
                <return>
                    the list of clusters                    
                </return>
                <throws>
                    NullArgumentException if the data points are null                    
                </throws>
            </javadoc>
            <method name="cluster" type="List<Cluster<T>>" line="101">
                <params>
                    <param name="points" type="Collection<T>"/>
                </params>
                <declaration name="clusters" type="List&lt;Cluster&lt;T&gt;&gt;" line="103"/>
                <declaration name="visited" type="Map&lt;Clusterable&lt;T&gt;,PointStatus&gt;" line="104"/>
                <scope line="105">
                    <scope line="106"/>
                    <declaration name="neighbors" type="List&lt;T&gt;" line="109"/>
                    <scope line="110">
                        <declaration name="cluster" type="Cluster&lt;T&gt;" line="111"/>
                    </scope>
                    <scope line="114"/>
                </scope>
            </method>
            <javadoc line="120">
                Expands the cluster to include density-reachable items.                
                <param>
                    cluster Cluster to expand                    
                </param>
                <param>
                    point Point to add to cluster                    
                </param>
                <param>
                    neighbors List of neighbors                    
                </param>
                <param>
                    points the data set                    
                </param>
                <param>
                    visited the set of already visited points                    
                </param>
                <return>
                    the expanded cluster                    
                </return>
            </javadoc>
            <method name="expandCluster" type="Cluster<T>" line="129">
                <params>
                    <param name="cluster" type="Cluster<T>"/>
                    <param name="point" type="T"/>
                    <param name="neighbors" type="List<T>"/>
                    <param name="points" type="Collection<T>"/>
                    <param name="visited" type="Map<Clusterable<T>,PointStatus>"/>
                </params>
                <declaration name="seeds" type="List&lt;T&gt;" line="132"/>
                <declaration name="index" type="int" line="133"/>
                <scope line="134">
                    <declaration name="current" type="T" line="135"/>
                    <declaration name="pStatus" type="PointStatus" line="136"/>
                    <scope line="137">
                        <declaration name="currentNeighbors" type="List&lt;T&gt;" line="138"/>
                        <scope line="139"/>
                    </scope>
                    <scope line="143"/>
                </scope>
            </method>
            <javadoc line="151">
                Returns a list of density-reachable neighbors of a {@code point}.                
                <param>
                    point the point to look for                    
                </param>
                <param>
                    points possible neighbors                    
                </param>
                <return>
                    the List of neighbors                    
                </return>
            </javadoc>
            <method name="getNeighbors" type="List<T>" line="157">
                <params>
                    <param name="point" type="T"/>
                    <param name="points" type="Collection<T>"/>
                </params>
                <declaration name="neighbors" type="List&lt;T&gt;" line="158"/>
                <scope line="159">
                    <scope line="160"/>
                </scope>
            </method>
            <javadoc line="166">
                Merges two lists together.                
                <param>
                    one first list                    
                </param>
                <param>
                    two second list                    
                </param>
                <return>
                    merged lists                    
                </return>
            </javadoc>
            <method name="merge" type="List<T>" line="172">
                <params>
                    <param name="one" type="List<T>"/>
                    <param name="two" type="List<T>"/>
                </params>
                <declaration name="oneSet" type="Set&lt;T&gt;" line="173"/>
                <scope line="174">
                    <scope line="175"/>
                </scope>
            </method>
        </class>
    </source>