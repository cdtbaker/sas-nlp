<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.io.PrintStream"/>
        <class name="FastMath" line="21">
            <comment line="95">
                0, 1/1024, ... 1024/1024                
            </comment>
            <comment line="295">
                There are 52 bits in the mantissa of a double.
                  For additional precision, the code splits double numbers into two parts,
                  by clearing the low order 30 bits if possible, and then performs the arithmetic
                  on each half separately.                
            </comment>
            <comment line="306">
                1073741824L                
            </comment>
            <comment line="309">
                0xFFFFFFFFC0000000L;                
            </comment>
            <comment line="362">
                Generic helper methods                
            </comment>
            <javadoc line="21">
                Faster, more accurate, portable alternative to {@link Math} and{@link StrictMath} for large scale computation.
                  &lt;p&gt;
                  FastMath is a drop-in replacement for both Math and StrictMath. This
                  means that for any method in Math (say {@code Math.sin(x)} or{@code Math.cbrt(y)}), user can directly change the class and use the
                  methods as is (using {@code FastMath.sin(x)} or {@code FastMath.cbrt(y)}in the previous example).
                  &lt;/p&gt;
                  &lt;p&gt;
                  FastMath speed is achieved by relying heavily on optimizing compilers
                  to native code present in many JVMs today and use of large tables.
                  The larger tables are lazily initialised on first use, so that the setup
                  time does not penalise methods that don&apos;t need them.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Note that FastMath is
                  extensively used inside Apache Commons Math, so by calling some algorithms,
                  the overhead when the the tables need to be intialised will occur
                  regardless of the end-user calling FastMath methods directly or not.
                  Performance figures for a specific JVM and hardware can be evaluated by
                  running the FastMathTestPerformance tests in the test directory of the source
                  distribution.
                  &lt;/p&gt;
                  &lt;p&gt;
                  FastMath accuracy should be mostly independent of the JVM as it relies only
                  on IEEE-754 basic operations and on embedded tables. Almost all operations
                  are accurate to about 0.5 ulp throughout the domain range. This statement,
                  of course is only a rough global observed behavior, it is &lt;em&gt;not&lt;/em&gt; a
                  guarantee for &lt;em&gt;every&lt;/em&gt; double numbers input (see William Kahan&apos;s &lt;a
                  href=&quot;http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma&quot;&gt;Table
                  Maker&apos;s Dilemma&lt;/a&gt;).
                  &lt;/p&gt;
                  &lt;p&gt;
                  FastMath additionally implements the following methods not found in Math/StrictMath:
                  &lt;ul&gt;
                  &lt;li&gt;{@link #asinh(double)}&lt;/li&gt;
                  &lt;li&gt;{@link #acosh(double)}&lt;/li&gt;
                  &lt;li&gt;{@link #atanh(double)}&lt;/li&gt;
                  &lt;/ul&gt;
                  The following methods are found in Math/StrictMath since 1.6 only, they are provided
                  by FastMath even in 1.5 Java virtual machines
                  &lt;ul&gt;
                  &lt;li&gt;{@link #copySign(double,double)}&lt;/li&gt;
                  &lt;li&gt;{@link #getExponent(double)}&lt;/li&gt;
                  &lt;li&gt;{@link #nextAfter(double,double)}&lt;/li&gt;
                  &lt;li&gt;{@link #nextUp(double)}&lt;/li&gt;
                  &lt;li&gt;{@link #scalb(double,int)}&lt;/li&gt;
                  &lt;li&gt;{@link #copySign(float,float)}&lt;/li&gt;
                  &lt;li&gt;{@link #getExponent(float)}&lt;/li&gt;
                  &lt;li&gt;{@link #nextAfter(float,double)}&lt;/li&gt;
                  &lt;li&gt;{@link #nextUp(float)}&lt;/li&gt;
                  &lt;li&gt;{@link #scalb(float,int)}&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <version>
                    $Id: FastMath.java 1591835 2014-05-02 09:04:01Z tn $                    
                </version>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <declaration name="PI" type="double" line="81"/>
            <javadoc line="81">
                Archimede&apos;s constant PI, ratio of circle circumference to diameter.                
            </javadoc>
            <declaration name="E" type="double" line="84"/>
            <javadoc line="84">
                Napier&apos;s constant e, base of the natural logarithm.                
            </javadoc>
            <declaration name="EXP_INT_TABLE_MAX_INDEX" type="int" line="87"/>
            <javadoc line="87">
                Index of exp(0) in the array of integer exponentials.                
            </javadoc>
            <declaration name="EXP_INT_TABLE_LEN" type="int" line="89"/>
            <javadoc line="89">
                Length of the array of integer exponentials.                
            </javadoc>
            <declaration name="LN_MANT_LEN" type="int" line="91"/>
            <javadoc line="91">
                Logarithm table length.                
            </javadoc>
            <declaration name="EXP_FRAC_TABLE_LEN" type="int" line="93"/>
            <javadoc line="93">
                Exponential fractions table length.                
            </javadoc>
            <declaration name="LOG_MAX_VALUE" type="double" line="96"/>
            <javadoc line="96">
                StrictMath.log(Double.MAX_VALUE): {@value}                
            </javadoc>
            <declaration name="RECOMPUTE_TABLES_AT_RUNTIME" type="boolean" line="99"/>
            <javadoc line="99">
                Indicator for tables initialization.
                  &lt;p&gt;
                  This compile-time constant should be set to true only if one explicitly
                  wants to compute the tables at class loading time instead of using the
                  already computed ones provided as literal arrays below.
                  &lt;/p&gt;                
            </javadoc>
            <declaration name="LN_2_A" type="double" line="108"/>
            <javadoc line="108">
                log(2) (high bits).                
            </javadoc>
            <declaration name="LN_2_B" type="double" line="111"/>
            <javadoc line="111">
                log(2) (low bits).                
            </javadoc>
            <declaration name="LN_QUICK_COEF" type="double" line="114"/>
            <javadoc line="114">
                Coefficients for log, when input 0.99 &lt; x &lt; 1.01.                
            </javadoc>
            <declaration name="LN_HI_PREC_COEF" type="double" line="127"/>
            <javadoc line="127">
                Coefficients for log in the range of 1.0 &lt; x &lt; 1.0 + 2^-10.                
            </javadoc>
            <declaration name="SINE_TABLE_LEN" type="int" line="137"/>
            <javadoc line="137">
                Sine, Cosine, Tangent tables are for 0, 1/8, 2/8, ... 13/8 = PI/2 approx.                
            </javadoc>
            <declaration name="SINE_TABLE_A" type="double" line="140"/>
            <javadoc line="140">
                Sine table (high bits).                
            </javadoc>
            <declaration name="SINE_TABLE_B" type="double" line="159"/>
            <javadoc line="159">
                Sine table (low bits).                
            </javadoc>
            <declaration name="COSINE_TABLE_A" type="double" line="178"/>
            <javadoc line="178">
                Cosine table (high bits).                
            </javadoc>
            <declaration name="COSINE_TABLE_B" type="double" line="197"/>
            <javadoc line="197">
                Cosine table (low bits).                
            </javadoc>
            <declaration name="TANGENT_TABLE_A" type="double" line="217"/>
            <javadoc line="217">
                Tangent table, used by atan() (high bits).                
            </javadoc>
            <declaration name="TANGENT_TABLE_B" type="double" line="236"/>
            <javadoc line="236">
                Tangent table, used by atan() (low bits).                
            </javadoc>
            <declaration name="RECIP_2PI" type="long" line="255"/>
            <javadoc line="255">
                Bits of 1/(2pi), need for reducePayneHanek().                
            </javadoc>
            <declaration name="PI_O_4_BITS" type="long" line="276"/>
            <javadoc line="276">
                Bits of pi/4, need for reducePayneHanek().                
            </javadoc>
            <declaration name="EIGHTHS" type="double" line="281"/>
            <javadoc line="281">
                Eighths.
                  This is used by sinQ, because its faster to do a table lookup than
                  a multiply in this time-critical routine                
            </javadoc>
            <declaration name="CBRTTWO" type="double" line="287"/>
            <javadoc line="287">
                Table of 2^((n+2)/3)                
            </javadoc>
            <declaration name="HEX_40000000" type="long" line="301"/>
            <javadoc line="301">
                0x40000000 - used to split a double into two parts, both with the low order bits cleared.
                  Equivalent to 2^30.                
            </javadoc>
            <declaration name="MASK_30BITS" type="long" line="307"/>
            <javadoc line="307">
                Mask used to clear low order 30 bits                
            </javadoc>
            <declaration name="MASK_NON_SIGN_INT" type="int" line="310"/>
            <javadoc line="310">
                Mask used to clear the non-sign part of an int.                
            </javadoc>
            <declaration name="MASK_NON_SIGN_LONG" type="long" line="313"/>
            <javadoc line="313">
                Mask used to clear the non-sign part of a long.                
            </javadoc>
            <declaration name="TWO_POWER_52" type="double" line="316"/>
            <javadoc line="316">
                2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite                
            </javadoc>
            <declaration name="TWO_POWER_53" type="double" line="318"/>
            <javadoc line="318">
                2^53 - double numbers this large must be even.                
            </javadoc>
            <declaration name="F_1_3" type="double" line="321"/>
            <javadoc line="321">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_1_5" type="double" line="323"/>
            <javadoc line="323">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_1_7" type="double" line="325"/>
            <javadoc line="325">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_1_9" type="double" line="327"/>
            <javadoc line="327">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_1_11" type="double" line="329"/>
            <javadoc line="329">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_1_13" type="double" line="331"/>
            <javadoc line="331">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_1_15" type="double" line="333"/>
            <javadoc line="333">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_1_17" type="double" line="335"/>
            <javadoc line="335">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_3_4" type="double" line="337"/>
            <javadoc line="337">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_15_16" type="double" line="339"/>
            <javadoc line="339">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_13_14" type="double" line="341"/>
            <javadoc line="341">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_11_12" type="double" line="343"/>
            <javadoc line="343">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_9_10" type="double" line="345"/>
            <javadoc line="345">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_7_8" type="double" line="347"/>
            <javadoc line="347">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_5_6" type="double" line="349"/>
            <javadoc line="349">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_1_2" type="double" line="351"/>
            <javadoc line="351">
                Constant: {@value}.                
            </javadoc>
            <declaration name="F_1_4" type="double" line="353"/>
            <javadoc line="353">
                Constant: {@value}.                
            </javadoc>
            <javadoc line="356">
                Private Constructor                
            </javadoc>
            <method name="FastMath" type="constructor" line="359"/>
            <javadoc line="363">
                Get the high order bits from the mantissa.
                  Equivalent to adding and subtracting HEX_40000 but also works for very large numbers                
                <param>
                    d the value to split                    
                </param>
                <return>
                    the high order part of the mantissa                    
                </return>
            </javadoc>
            <method name="doubleHighPart" type="double" line="370">
                <params>
                    <param name="d" type="double"/>
                </params>
                <comment line="373">
                    These are un-normalised - don&apos;t try to convert                    
                </comment>
                <comment line="375">
                    can take raw bits because just gonna convert it back                    
                </comment>
                <comment line="376">
                    Drop low order bits                    
                </comment>
                <scope line="371"/>
                <declaration name="xl" type="long" line="374"/>
            </method>
            <javadoc line="379">
                Compute the square root of a number.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; this implementation currently delegates to {@link Math#sqrt}                
                <param>
                    a number on which evaluation is done                    
                </param>
                <return>
                    square root of a                    
                </return>
            </javadoc>
            <method name="sqrt" type="double" line="384">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="388">
                Compute the hyperbolic cosine of a number.                
                <param>
                    x number on which evaluation is done                    
                </param>
                <return>
                    hyperbolic cosine of x                    
                </return>
            </javadoc>
            <method name="cosh" type="double" line="392">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="398">
                    cosh[z] = (exp(z) + exp(-z))/2                    
                </comment>
                <comment line="400">
                    for numbers with magnitude 20 or so,
                     exp(-z) can be ignored in comparison with exp(z)                    
                </comment>
                <comment line="405">
                    Avoid overflow (MATH-905).                    
                </comment>
                <comment line="413">
                    Avoid overflow (MATH-905).                    
                </comment>
                <comment line="434">
                    recip = 1/y                    
                </comment>
                <comment line="440">
                    Correct for rounding in division                    
                </comment>
                <comment line="442">
                    Account for yb                    
                </comment>
                <comment line="445">
                    y = y + 1/y                    
                </comment>
                <scope line="393"/>
                <scope line="402">
                    <scope line="403">
                        <declaration name="t" type="double" line="405"/>
                    </scope>
                    <scope line="407"/>
                </scope>
                <scope line="410">
                    <scope line="411">
                        <declaration name="t" type="double" line="413"/>
                    </scope>
                    <scope line="415"/>
                </scope>
                <declaration name="hiPrec" type="double" line="420"/>
                <scope line="421"/>
                <declaration name="ya" type="double" line="426"/>
                <declaration name="yb" type="double" line="427"/>
                <declaration name="temp" type="double" line="429"/>
                <declaration name="yaa" type="double" line="430"/>
                <declaration name="yab" type="double" line="431"/>
                <declaration name="recip" type="double" line="434"/>
                <declaration name="recipa" type="double" line="436"/>
                <declaration name="recipb" type="double" line="437"/>
                <declaration name="result" type="double" line="452"/>
            </method>
            <javadoc line="457">
                Compute the hyperbolic sine of a number.                
                <param>
                    x number on which evaluation is done                    
                </param>
                <return>
                    hyperbolic sine of x                    
                </return>
            </javadoc>
            <method name="sinh" type="double" line="461">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="468">
                    sinh[z] = (exp(z) - exp(-z) / 2                    
                </comment>
                <comment line="470">
                    for values of z larger than about 20,
                     exp(-z) can be ignored in comparison with exp(z)                    
                </comment>
                <comment line="475">
                    Avoid overflow (MATH-905).                    
                </comment>
                <comment line="483">
                    Avoid overflow (MATH-905).                    
                </comment>
                <comment line="513">
                    recip = 1/y                    
                </comment>
                <comment line="519">
                    Correct for rounding in division                    
                </comment>
                <comment line="521">
                    Account for yb                    
                </comment>
                <comment line="527">
                    y = y + 1/y                    
                </comment>
                <comment line="545">
                                        
                </comment>
                <comment line="560">
                    Adjust for yb                    
                </comment>
                <comment line="561">
                    numerator                    
                </comment>
                <comment line="562">
                    denominator                    
                </comment>
                <comment line="564">
                    y = y - 1/y                    
                </comment>
                <declaration name="negate" type="boolean" line="462"/>
                <scope line="463"/>
                <scope line="472">
                    <scope line="473">
                        <declaration name="t" type="double" line="475"/>
                    </scope>
                    <scope line="477"/>
                </scope>
                <scope line="480">
                    <scope line="481">
                        <declaration name="t" type="double" line="483"/>
                    </scope>
                    <scope line="485"/>
                </scope>
                <scope line="490"/>
                <scope line="494"/>
                <declaration name="result" type="double" line="499"/>
                <scope line="501">
                    <declaration name="hiPrec" type="double" line="502"/>
                    <declaration name="ya" type="double" line="505"/>
                    <declaration name="yb" type="double" line="506"/>
                    <declaration name="temp" type="double" line="508"/>
                    <declaration name="yaa" type="double" line="509"/>
                    <declaration name="yab" type="double" line="510"/>
                    <declaration name="recip" type="double" line="513"/>
                    <declaration name="recipa" type="double" line="515"/>
                    <declaration name="recipb" type="double" line="516"/>
                </scope>
                <scope line="537">
                    <declaration name="hiPrec" type="double" line="538"/>
                    <declaration name="ya" type="double" line="541"/>
                    <declaration name="yb" type="double" line="542"/>
                    <declaration name="denom" type="double" line="545"/>
                    <declaration name="denomr" type="double" line="546"/>
                    <declaration name="denomb" type="double" line="547"/>
                    <declaration name="ratio" type="double" line="548"/>
                    <declaration name="temp" type="double" line="549"/>
                    <declaration name="ra" type="double" line="550"/>
                    <declaration name="rb" type="double" line="551"/>
                    <declaration name="za" type="double" line="554"/>
                    <declaration name="zb" type="double" line="555"/>
                </scope>
                <scope line="575"/>
            </method>
            <javadoc line="582">
                Compute the hyperbolic tangent of a number.                
                <param>
                    x number on which evaluation is done                    
                </param>
                <return>
                    hyperbolic tangent of x                    
                </return>
            </javadoc>
            <method name="tanh" type="double" line="586">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="594">
                    tanh[z] = sinh[z] / cosh[z]
                     = (exp(z) - exp(-z)) / (exp(z) + exp(-z))
                     = (exp(2x) - 1) / (exp(2x) + 1)                    
                </comment>
                <comment line="598">
                    for magnitude &gt; 20, sinh[z] == cosh[z] in double precision                    
                </comment>
                <comment line="620">
                    tanh(x) = (exp(2x) - 1) / (exp(2x) + 1)                    
                </comment>
                <comment line="626">
                                        
                </comment>
                <comment line="633">
                                        
                </comment>
                <comment line="644">
                    ratio = na/da                    
                </comment>
                <comment line="650">
                    Correct for rounding in division                    
                </comment>
                <comment line="653">
                    Account for nb                    
                </comment>
                <comment line="655">
                    Account for db                    
                </comment>
                <comment line="662">
                    tanh(x) = expm1(2x) / (expm1(2x) + 2)                    
                </comment>
                <comment line="668">
                                        
                </comment>
                <comment line="672">
                                        
                </comment>
                <comment line="683">
                    ratio = na/da                    
                </comment>
                <comment line="689">
                    Correct for rounding in division                    
                </comment>
                <comment line="692">
                    Account for nb                    
                </comment>
                <comment line="694">
                    Account for db                    
                </comment>
                <declaration name="negate" type="boolean" line="587"/>
                <scope line="589"/>
                <scope line="599"/>
                <scope line="603"/>
                <scope line="607"/>
                <scope line="611"/>
                <declaration name="result" type="double" line="616"/>
                <scope line="617">
                    <declaration name="hiPrec" type="double" line="618"/>
                    <declaration name="ya" type="double" line="622"/>
                    <declaration name="yb" type="double" line="623"/>
                    <declaration name="na" type="double" line="626"/>
                    <declaration name="nb" type="double" line="627"/>
                    <declaration name="temp" type="double" line="628"/>
                    <declaration name="da" type="double" line="633"/>
                    <declaration name="db" type="double" line="634"/>
                    <declaration name="daa" type="double" line="640"/>
                    <declaration name="dab" type="double" line="641"/>
                    <declaration name="ratio" type="double" line="644"/>
                    <declaration name="ratioa" type="double" line="646"/>
                    <declaration name="ratiob" type="double" line="647"/>
                </scope>
                <scope line="659">
                    <declaration name="hiPrec" type="double" line="660"/>
                    <declaration name="ya" type="double" line="664"/>
                    <declaration name="yb" type="double" line="665"/>
                    <declaration name="na" type="double" line="668"/>
                    <declaration name="nb" type="double" line="669"/>
                    <declaration name="da" type="double" line="672"/>
                    <declaration name="db" type="double" line="673"/>
                    <declaration name="temp" type="double" line="674"/>
                    <declaration name="daa" type="double" line="679"/>
                    <declaration name="dab" type="double" line="680"/>
                    <declaration name="ratio" type="double" line="683"/>
                    <declaration name="ratioa" type="double" line="685"/>
                    <declaration name="ratiob" type="double" line="686"/>
                </scope>
                <scope line="699"/>
            </method>
            <javadoc line="706">
                Compute the inverse hyperbolic cosine of a number.                
                <param>
                    a number on which evaluation is done                    
                </param>
                <return>
                    inverse hyperbolic cosine of a                    
                </return>
            </javadoc>
            <method name="acosh" type="double" line="710">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="714">
                Compute the inverse hyperbolic sine of a number.                
                <param>
                    a number on which evaluation is done                    
                </param>
                <return>
                    inverse hyperbolic sine of a                    
                </return>
            </javadoc>
            <method name="asinh" type="double" line="718">
                <params>
                    <param name="a" type="double"/>
                </params>
                <declaration name="negative" type="boolean" line="719"/>
                <scope line="720"/>
                <declaration name="absAsinh" type="double" line="725"/>
                <scope line="726"/>
                <scope line="728">
                    <declaration name="a2" type="double" line="729"/>
                    <scope line="730"/>
                    <scope line="732"/>
                    <scope line="734"/>
                    <scope line="736"/>
                </scope>
            </method>
            <javadoc line="744">
                Compute the inverse hyperbolic tangent of a number.                
                <param>
                    a number on which evaluation is done                    
                </param>
                <return>
                    inverse hyperbolic tangent of a                    
                </return>
            </javadoc>
            <method name="atanh" type="double" line="748">
                <params>
                    <param name="a" type="double"/>
                </params>
                <declaration name="negative" type="boolean" line="749"/>
                <scope line="750"/>
                <declaration name="absAtanh" type="double" line="755"/>
                <scope line="756"/>
                <scope line="758">
                    <declaration name="a2" type="double" line="759"/>
                    <scope line="760"/>
                    <scope line="762"/>
                    <scope line="764"/>
                    <scope line="766"/>
                </scope>
            </method>
            <javadoc line="774">
                Compute the signum of a number.
                  The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise                
                <param>
                    a number on which evaluation is done                    
                </param>
                <return>
                    -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a                    
                </return>
            </javadoc>
            <method name="signum" type="double" line="779">
                <params>
                    <param name="a" type="double"/>
                </params>
                <comment line="781">
                    return +0.0/-0.0/NaN depending on a                    
                </comment>
            </method>
            <javadoc line="783">
                Compute the signum of a number.
                  The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise                
                <param>
                    a number on which evaluation is done                    
                </param>
                <return>
                    -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a                    
                </return>
            </javadoc>
            <method name="signum" type="float" line="788">
                <params>
                    <param name="a" type="float"/>
                </params>
                <comment line="790">
                    return +0.0/-0.0/NaN depending on a                    
                </comment>
            </method>
            <javadoc line="792">
                Compute next number towards positive infinity.                
                <param>
                    a number to which neighbor should be computed                    
                </param>
                <return>
                    neighbor of a towards positive infinity                    
                </return>
            </javadoc>
            <method name="nextUp" type="double" line="796">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="800">
                Compute next number towards positive infinity.                
                <param>
                    a number to which neighbor should be computed                    
                </param>
                <return>
                    neighbor of a towards positive infinity                    
                </return>
            </javadoc>
            <method name="nextUp" type="float" line="804">
                <params>
                    <param name="a" type="float"/>
                </params>
            </method>
            <javadoc line="808">
                Returns a pseudo-random number between 0.0 and 1.0.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; this implementation currently delegates to {@link Math#random}                
                <return>
                    a random number between 0.0 and 1.0                    
                </return>
            </javadoc>
            <method name="random" type="double" line="812"/>
            <javadoc line="816">
                Exponential function.
                  Computes exp(x), function result is nearly rounded.   It will be correctly
                  rounded to the theoretical value for 99.9% of input values, otherwise it will
                  have a 1 UPL error.
                  Method:
                  Lookup intVal = exp(int(x))
                  Lookup fracVal = exp(int(x-int(x) / 1024.0)  1024.0 );
                  Compute z as the exponential of the remaining bits by a polynomial minus one
                  exp(x) = intVal  fracVal  (1 + z)
                  Accuracy:
                  Calculation is done with 63 bits of precision, so result should be correctly
                  rounded for 99.9% of input values, with less than 1 ULP error otherwise.                
                <param>
                    x   a double                    
                </param>
                <return>
                    double e&lt;sup&gt;x&lt;/sup&gt;                    
                </return>
            </javadoc>
            <method name="exp" type="double" line="836">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="840">
                Internal helper method for exponential function.                
                <param>
                    x original argument of the exponential function                    
                </param>
                <param>
                    extra extra bits of precision on input (To Be Confirmed)                    
                </param>
                <param>
                    hiPrec extra bits of precision on output (To Be Confirmed)                    
                </param>
                <return>
                    exp(x)                    
                </return>
            </javadoc>
            <method name="exp" type="double" line="847">
                <params>
                    <param name="x" type="double"/>
                    <param name="extra" type="double"/>
                    <param name="hiPrec" type="double[]"/>
                </params>
                <comment line="853">
                    Lookup exp(floor(x)).
                     intPartA will have the upper 22 bits, intPartB will have the lower
                     52 bits.                    
                </comment>
                <comment line="869">
                                        
                </comment>
                <comment line="879">
                                        
                </comment>
                <comment line="909">
                    Get the fractional part of x, find the greatest multiple of 2^-10 less than
                     x and look up the exp function of it.
                     fracPartA will have the upper 22 bits, fracPartB the lower 52 bits.                    
                </comment>
                <comment line="917">
                    epsilon is the difference in x from the nearest multiple of 2^-10.  It
                     has a value in the range 0 &lt;= epsilon &lt; 2^-10.
                     Do the subtraction from x as the last step to avoid possible loss of percison.                    
                </comment>
                <comment line="923">
                    Compute z = exp(epsilon) - 1.0 via a minimax polynomial.  z has
                    full double precision (52 bits).  Since z &lt; 2^-10, we will have
                    62 bits of precision when combined with the contant 1.  This will be                    
                </comment>
                <comment line="928">
                    Remez generated polynomial.  Converges on the interval [0, 2^-10], error                    
                </comment>
                <comment line="936">
                    Compute (intPartA+intPartB)  (fracPartA+fracPartB) by binomial
                    expansion.
                    tempA is exact since intPartA and intPartB only have 22 bits each.
                    tempB will have 52 bits of precision.                    
                </comment>
                <comment line="944">
                    Compute the result.  (1+z)(tempA+tempB).  Order of operations is
                    important.  For accuracy add by increasing size.  tempA is exact and
                    much larger than the others.  If there are extra bits specified from the                    
                </comment>
                <comment line="957">
                    If requesting high precision                    
                </comment>
                <declaration name="intPartA" type="double" line="848"/>
                <declaration name="intPartB" type="double" line="849"/>
                <declaration name="intVal" type="int" line="850"/>
                <scope line="856">
                    <scope line="859">
                        <scope line="860"/>
                    </scope>
                    <scope line="867">
                        <declaration name="result" type="double" line="869"/>
                        <scope line="870"/>
                    </scope>
                    <scope line="877">
                        <declaration name="result" type="double" line="879"/>
                        <scope line="880"/>
                    </scope>
                </scope>
                <scope line="893">
                    <scope line="896">
                        <scope line="897"/>
                    </scope>
                </scope>
                <declaration name="intFrac" type="int" line="912"/>
                <declaration name="fracPartA" type="double" line="913"/>
                <declaration name="fracPartB" type="double" line="914"/>
                <declaration name="epsilon" type="double" line="920"/>
                <declaration name="z" type="double" line="929"/>
                <declaration name="tempA" type="double" line="940"/>
                <declaration name="tempB" type="double" line="941"/>
                <declaration name="tempC" type="double" line="947"/>
                <declaration name="result" type="double" line="948"/>
                <scope line="949"/>
                <scope line="951"/>
                <scope line="955"/>
            </method>
            <javadoc line="964">
                Compute exp(x) - 1                
                <param>
                    x number to compute shifted exponential                    
                </param>
                <return>
                    exp(x) - 1                    
                </return>
            </javadoc>
            <method name="expm1" type="double" line="968">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="972">
                Internal helper method for expm1                
                <param>
                    x number to compute shifted exponential                    
                </param>
                <param>
                    hiPrecOut receive high precision result for -1.0 &lt; x &lt; 1.0                    
                </param>
                <return>
                    exp(x) - 1                    
                </return>
            </javadoc>
            <method name="expm1" type="double" line="977">
                <params>
                    <param name="x" type="double"/>
                    <param name="hiPrecOut" type="double"/>
                </params>
                <comment line="979">
                    NaN or zero                    
                </comment>
                <comment line="984">
                    If not between +/- 1.0
                    return exp(x) - 1.0;                    
                </comment>
                <comment line="1025">
                                        
                </comment>
                <comment line="1043">
                                        
                </comment>
                <comment line="1045">
                    double yb = za*baseB + zb*baseA + zb*baseB;                    
                </comment>
                <comment line="1058">
                    ya = ya + za + baseA;
                    yb = yb + zb + baseB;                    
                </comment>
                <comment line="1065">
                    yb += (ya &gt; za) ? -(temp - ya - za) : -(temp - za - ya);                    
                </comment>
                <comment line="1070">
                    yb += (ya &gt; baseB) ? -(temp - ya - baseB) : -(temp - baseB - ya);                    
                </comment>
                <comment line="1075">
                    yb += (ya &gt; zb) ? -(temp - ya - zb) : -(temp - zb - ya);                    
                </comment>
                <comment line="1080">
                                        
                </comment>
                <comment line="1095">
                    f(x) = x/1+x
                     Compute f&apos;(x)
                     Product rule:  d(uv) = du*v + u*dv
                     Chain rule:  d(f(g(x)) = f&apos;(g(x))*f(g&apos;(x))
                     d(1/x) = -1/(x*x)
                     d(1/1+x) = -1/( (1+x)^2) *  1 =  -1/((1+x)*(1+x))
                     d(x/1+x) = -x/((1+x)(1+x)) + 1/1+x = 1 / ((1+x)(1+x))                    
                </comment>
                <comment line="1103">
                    Adjust for yb                    
                </comment>
                <comment line="1104">
                    numerator                    
                </comment>
                <comment line="1105">
                    denominator                    
                </comment>
                <comment line="1107">
                    negate                    
                </comment>
                <scope line="978"/>
                <scope line="982">
                    <declaration name="hiPrec" type="double" line="985"/>
                    <scope line="987"/>
                    <scope line="989">
                        <declaration name="ra" type="double" line="990"/>
                        <declaration name="rb" type="double" line="991"/>
                    </scope>
                </scope>
                <declaration name="baseA" type="double" line="997"/>
                <declaration name="baseB" type="double" line="998"/>
                <declaration name="epsilon" type="double" line="999"/>
                <declaration name="negative" type="boolean" line="1000"/>
                <scope line="1002"/>
                <scope line="1007">
                    <declaration name="intFrac" type="int" line="1008"/>
                    <declaration name="tempA" type="double" line="1009"/>
                    <declaration name="tempB" type="double" line="1010"/>
                    <declaration name="temp" type="double" line="1012"/>
                </scope>
                <declaration name="zb" type="double" line="1025"/>
                <declaration name="za" type="double" line="1032"/>
                <declaration name="temp" type="double" line="1033"/>
                <declaration name="ya" type="double" line="1043"/>
                <declaration name="yb" type="double" line="1046"/>
                <scope line="1078">
                    <declaration name="denom" type="double" line="1080"/>
                    <declaration name="denomr" type="double" line="1081"/>
                    <declaration name="denomb" type="double" line="1082"/>
                    <declaration name="ratio" type="double" line="1083"/>
                    <declaration name="ra" type="double" line="1085"/>
                    <declaration name="rb" type="double" line="1086"/>
                </scope>
                <scope line="1111"/>
            </method>
            <javadoc line="1119">
                Natural logarithm.                
                <param>
                    x   a double                    
                </param>
                <return>
                    log(x)                    
                </return>
            </javadoc>
            <method name="log" type="double" line="1125">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="1129">
                Internal helper method for natural logarithm function.                
                <param>
                    x original argument of the natural logarithm function                    
                </param>
                <param>
                    hiPrec extra bits of precision on output (To Be Confirmed)                    
                </param>
                <return>
                    log(x)                    
                </return>
            </javadoc>
            <method name="log" type="double" line="1135">
                <params>
                    <param name="x" type="double"/>
                    <param name="hiPrec" type="double[]"/>
                </params>
                <comment line="1137">
                    Handle special case of +0/-0                    
                </comment>
                <comment line="1142">
                                        
                </comment>
                <comment line="1151">
                                        
                </comment>
                <comment line="1160">
                                        
                </comment>
                <comment line="1164">
                    Subnormal!                    
                </comment>
                <comment line="1166">
                    Zero                    
                </comment>
                <comment line="1174">
                                        
                </comment>
                <comment line="1184">
                    The normal method doesn&apos;t work well in the range [0.99, 1.01], so call do a straight                    
                </comment>
                <comment line="1187">
                                        
                </comment>
                <comment line="1201">
                                        
                </comment>
                <comment line="1204">
                                        
                </comment>
                <comment line="1209">
                                        
                </comment>
                <comment line="1213">
                                        
                </comment>
                <comment line="1219">
                                        
                </comment>
                <comment line="1222">
                                        
                </comment>
                <comment line="1230">
                    lnm is a log of a number in the range of 1.0 - 2.0, so 0 &lt;= lnm &lt; ln(2)                    
                </comment>
                <comment line="1233">
                    double epsilon = x  Double.longBitsToDouble(bits &amp; 0xfffffc0000000000L);
                    
                    epsilon -= 1.0;                    
                </comment>
                <comment line="1239">
                    y is the most significant 10 bits of the mantissa
                    double y = Double.longBitsToDouble(bits &amp; 0xfffffc0000000000L);
                    double epsilon = (x - y) / y;                    
                </comment>
                <comment line="1248">
                                        
                </comment>
                <comment line="1255">
                                        
                </comment>
                <comment line="1261">
                                        
                </comment>
                <comment line="1267">
                                        
                </comment>
                <comment line="1270">
                                        
                </comment>
                <comment line="1275">
                                        
                </comment>
                <comment line="1279">
                                        
                </comment>
                <comment line="1285">
                                        
                </comment>
                <comment line="1289">
                                        
                </comment>
                <comment line="1290">
                    tmp = aa  1073741824.0;
                    lnza = aa + tmp - tmp;
                    lnzb = aa - lnza + ab;                    
                </comment>
                <comment line="1298">
                    High precision not required.  Eval Remez polynomial                    
                </comment>
                <comment line="1309">
                    Relative sizes:
                     lnzb     [0, 2.33E-10]
                     lnm[1]   [0, 1.17E-7]
                     ln2Bexp [0, 1.12E-4]
                     lnza      [0, 9.7E-4]
                     lnm[0]   [0, 0.692]
                     ln2Aexp [0, 709]                    
                </comment>
                <comment line="1318">
                    Compute the following sum:
                     lnzb + lnm[1] + ln2Bexp + lnza + lnm[0] + ln2Aexp;                    
                </comment>
                <comment line="1322">
                    return lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;                    
                </comment>
                <scope line="1136"/>
                <declaration name="bits" type="long" line="1139"/>
                <scope line="1142">
                    <scope line="1143"/>
                </scope>
                <scope line="1151">
                    <scope line="1152"/>
                </scope>
                <declaration name="exp" type="int" line="1160"/>
                <scope line="1162">
                    <scope line="1164">
                        <scope line="1166"/>
                    </scope>
                    <scope line="1175"/>
                </scope>
                <scope line="1182">
                    <declaration name="xa" type="double" line="1187"/>
                    <declaration name="xb" type="double" line="1188"/>
                    <declaration name="tmp" type="double" line="1189"/>
                    <declaration name="aa" type="double" line="1190"/>
                    <declaration name="ab" type="double" line="1191"/>
                    <declaration name="lnCoef_last" type="double[]" line="1195"/>
                    <declaration name="ya" type="double" line="1196"/>
                    <declaration name="yb" type="double" line="1197"/>
                    <scope line="1199">
                        <declaration name="lnCoef_i" type="double[]" line="1209"/>
                    </scope>
                </scope>
                <declaration name="lnm" type="double[]" line="1230"/>
                <declaration name="epsilon" type="double" line="1241"/>
                <declaration name="lnza" type="double" line="1243"/>
                <declaration name="lnzb" type="double" line="1244"/>
                <scope line="1246">
                    <declaration name="tmp" type="double" line="1248"/>
                    <declaration name="aa" type="double" line="1249"/>
                    <declaration name="ab" type="double" line="1250"/>
                    <declaration name="xa" type="double" line="1251"/>
                    <declaration name="xb" type="double" line="1252"/>
                    <declaration name="numer" type="double" line="1255"/>
                    <declaration name="denom" type="double" line="1256"/>
                    <declaration name="lnCoef_last" type="double[]" line="1261"/>
                    <declaration name="ya" type="double" line="1262"/>
                    <declaration name="yb" type="double" line="1263"/>
                    <scope line="1265">
                        <declaration name="lnCoef_i" type="double[]" line="1275"/>
                    </scope>
                </scope>
                <scope line="1296"/>
                <declaration name="a" type="double" line="1322"/>
                <declaration name="b" type="double" line="1323"/>
                <declaration name="c" type="double" line="1324"/>
                <declaration name="d" type="double" line="1325"/>
                <scope line="1349"/>
            </method>
            <javadoc line="1357">
                Computes log(1 + x).                
                <param>
                    x Number.                    
                </param>
                <return>
                    {@code log(1 + x)}.                    
                </return>
            </javadoc>
            <method name="log1p" type="double" line="1363">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="1380">
                    Don&apos;t allow this to be converted to NaN                    
                </comment>
                <comment line="1384">
                    Do a taylor series expansion around xpa:
                       f(x+y) = f(x) + f&apos;(x) y + f&apos;&apos;(x)/2 y^2                    
                </comment>
                <comment line="1390">
                    Value is small |x| &lt; 1e6, do a Taylor series centered on 1.                    
                </comment>
                <scope line="1364"/>
                <scope line="1368"/>
                <scope line="1373">
                    <declaration name="xpa" type="double" line="1374"/>
                    <declaration name="xpb" type="double" line="1375"/>
                    <declaration name="hiPrec" type="double[]" line="1377"/>
                    <declaration name="lores" type="double" line="1378"/>
                    <scope line="1379"/>
                    <declaration name="fx1" type="double" line="1385"/>
                    <declaration name="epsilon" type="double" line="1386"/>
                </scope>
                <scope line="1388">
                    <declaration name="y" type="double" line="1390"/>
                </scope>
            </method>
            <javadoc line="1395">
                Compute the base 10 logarithm.                
                <param>
                    x a number                    
                </param>
                <return>
                    log10(x)                    
                </return>
            </javadoc>
            <method name="log10" type="double" line="1399">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="1404">
                    don&apos;t allow this to be converted to NaN                    
                </comment>
                <declaration name="hiPrec" type="double" line="1400"/>
                <declaration name="lores" type="double" line="1402"/>
                <scope line="1403"/>
                <declaration name="tmp" type="double" line="1407"/>
                <declaration name="lna" type="double" line="1408"/>
                <declaration name="lnb" type="double" line="1409"/>
                <declaration name="rln10a" type="double" line="1411"/>
                <declaration name="rln10b" type="double" line="1412"/>
            </method>
            <javadoc line="1417">
                Computes the &lt;a href=&quot;http://mathworld.wolfram.com/Logarithm.html&quot;&gt;
                  logarithm&lt;/a&gt; in a given base.
                  Returns {@code NaN} if either argument is negative.
                  If {@code base} is 0 and {@code x} is positive, 0 is returned.
                  If {@code base} is positive and {@code x} is 0,{@code Double.NEGATIVE_INFINITY} is returned.
                  If both arguments are 0, the result is {@code NaN}.                
                <param>
                    base Base of the logarithm, must be greater than 0.                    
                </param>
                <param>
                    x Argument, must be greater than 0.                    
                </param>
                <return>
                    the value of the logarithm, i.e. the number {@code y} such that
                      &lt;code&gt;base&lt;sup&gt;y&lt;/sup&gt; = x&lt;/code&gt;.                    
                </return>
                <since>
                    1.2 (previously in {@code MathUtils}, moved as of version 3.0)                    
                </since>
            </javadoc>
            <method name="log" type="double" line="1433">
                <params>
                    <param name="base" type="double"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="1437">
                Power function.  Compute x^y.                
                <param>
                    x   a double                    
                </param>
                <param>
                    y   a double                    
                </param>
                <return>
                    double                    
                </return>
            </javadoc>
            <method name="pow" type="double" line="1444">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <comment line="1452">
                    X is NaN                    
                </comment>
                <comment line="1460">
                    -zero                    
                </comment>
                <comment line="1483">
                    y is NaN                    
                </comment>
                <comment line="1506">
                    y is NaN                    
                </comment>
                <comment line="1542">
                                        
                </comment>
                <comment line="1544">
                    y is an even integer in this case                    
                </comment>
                <comment line="1550">
                    If y is an integer                    
                </comment>
                <comment line="1557">
                                        
                </comment>
                <comment line="1571">
                                        
                </comment>
                <comment line="1573">
                    don&apos;t allow this to be converted to NaN                    
                </comment>
                <comment line="1580">
                                        
                </comment>
                <comment line="1586">
                    y*ln(x) = (aa+ab)                    
                </comment>
                <comment line="1601">
                    result = result + result * z;                    
                </comment>
                <declaration name="lns" type="double" line="1445"/>
                <scope line="1447"/>
                <scope line="1451"/>
                <scope line="1456">
                    <declaration name="bits" type="long" line="1457"/>
                    <scope line="1458">
                        <declaration name="yi" type="long" line="1460"/>
                        <scope line="1462"/>
                        <scope line="1466"/>
                    </scope>
                    <scope line="1471"/>
                    <scope line="1474"/>
                </scope>
                <scope line="1481">
                    <scope line="1482"/>
                    <scope line="1485"/>
                    <scope line="1487"/>
                </scope>
                <scope line="1492">
                    <scope line="1493"/>
                    <scope line="1497"/>
                    <scope line="1499"/>
                </scope>
                <scope line="1504">
                    <scope line="1505"/>
                    <scope line="1509">
                        <declaration name="yi" type="long" line="1510"/>
                        <scope line="1511"/>
                    </scope>
                    <scope line="1518">
                        <declaration name="yi" type="long" line="1519"/>
                        <scope line="1520"/>
                    </scope>
                </scope>
                <scope line="1528">
                    <scope line="1530"/>
                    <scope line="1534"/>
                    <scope line="1536"/>
                </scope>
                <scope line="1542">
                    <scope line="1544"/>
                    <scope line="1548"/>
                    <scope line="1551"/>
                </scope>
                <declaration name="ya" type="double" line="1557"/>
                <declaration name="yb" type="double" line="1558"/>
                <scope line="1559">
                    <declaration name="tmp1" type="double" line="1560"/>
                </scope>
                <scope line="1563">
                    <declaration name="tmp1" type="double" line="1564"/>
                    <declaration name="tmp2" type="double" line="1565"/>
                </scope>
                <declaration name="lores" type="double" line="1571"/>
                <scope line="1572"/>
                <declaration name="lna" type="double" line="1576"/>
                <declaration name="lnb" type="double" line="1577"/>
                <declaration name="tmp1" type="double" line="1580"/>
                <declaration name="tmp2" type="double" line="1581"/>
                <declaration name="aa" type="double" line="1586"/>
                <declaration name="ab" type="double" line="1587"/>
                <declaration name="z" type="double" line="1592"/>
                <declaration name="result" type="double" line="1599"/>
            </method>
            <javadoc line="1605">
                Raise a double to an int power.                
                <param>
                    d Number to raise.                    
                </param>
                <param>
                    e Exponent.                    
                </param>
                <return>
                    d&lt;sup&gt;e&lt;/sup&gt;                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="pow" type="double" line="1613">
                <params>
                    <param name="d" type="double"/>
                    <param name="e" type="int"/>
                </params>
                <comment line="1623">
                    split d as two 26 bits numbers
                     beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties                    
                </comment>
                <comment line="1630">
                    prepare result                    
                </comment>
                <comment line="1634">
                    d^(2p)                    
                </comment>
                <comment line="1642">
                    accurate multiplication result = result * d^(2p) using Veltkamp TwoProduct algorithm
                     beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties                    
                </comment>
                <comment line="1653">
                    accurate squaring d^(2(p+1)) = d^(2p) * d^(2p) using Veltkamp TwoProduct algorithm
                     beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties                    
                </comment>
                <scope line="1615"/>
                <scope line="1617"/>
                <declaration name="splitFactor" type="int" line="1624"/>
                <declaration name="cd" type="double" line="1625"/>
                <declaration name="d1High" type="double" line="1626"/>
                <declaration name="d1Low" type="double" line="1627"/>
                <declaration name="resultHigh" type="double" line="1630"/>
                <declaration name="resultLow" type="double" line="1631"/>
                <declaration name="d2p" type="double" line="1634"/>
                <declaration name="d2pHigh" type="double" line="1635"/>
                <declaration name="d2pLow" type="double" line="1636"/>
                <scope line="1638">
                    <scope line="1640">
                        <declaration name="tmpHigh" type="double" line="1643"/>
                        <declaration name="cRH" type="double" line="1644"/>
                        <declaration name="rHH" type="double" line="1645"/>
                        <declaration name="rHL" type="double" line="1646"/>
                        <declaration name="tmpLow" type="double" line="1647"/>
                    </scope>
                    <declaration name="tmpHigh" type="double" line="1654"/>
                    <declaration name="cD2pH" type="double" line="1655"/>
                    <declaration name="d2pHH" type="double" line="1656"/>
                    <declaration name="d2pHL" type="double" line="1657"/>
                    <declaration name="tmpLow" type="double" line="1658"/>
                    <declaration name="cTmpH" type="double" line="1659"/>
                </scope>
            </method>
            <javadoc line="1672">
                Computes sin(x) - x, where |x| &lt; 1/16.
                  Use a Remez polynomial approximation.                
                <param>
                    x a number smaller than 1/16                    
                </param>
                <return>
                    sin(x) - x                    
                </return>
            </javadoc>
            <method name="polySine" type="double" line="1679">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="1687">
                    p *= x2;
                    p *= x;                    
                </comment>
                <declaration name="x2" type="double" line="1680"/>
                <declaration name="p" type="double" line="1682"/>
            </method>
            <javadoc line="1693">
                Computes cos(x) - 1, where |x| &lt; 1/16.
                  Use a Remez polynomial approximation.                
                <param>
                    x a number smaller than 1/16                    
                </param>
                <return>
                    cos(x) - 1                    
                </return>
            </javadoc>
            <method name="polyCosine" type="double" line="1699">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="x2" type="double" line="1700"/>
                <declaration name="p" type="double" line="1702"/>
            </method>
            <javadoc line="1711">
                Compute sine over the first quadrant (0 &lt; x &lt; pi/2).
                  Use combination of table lookup and rational polynomial expansion.                
                <param>
                    xa number from which sine is requested                    
                </param>
                <param>
                    xb extra bits for x (may be 0.0)                    
                </param>
                <return>
                    sin(xa + xb)                    
                </return>
            </javadoc>
            <method name="sinQ" type="double" line="1718">
                <params>
                    <param name="xa" type="double"/>
                    <param name="xb" type="double"/>
                </params>
                <comment line="1721">
                    idx*0.125;                    
                </comment>
                <comment line="1723">
                    Table lookups                    
                </comment>
                <comment line="1729">
                    Polynomial eval of sin(epsilon), cos(epsilon)                    
                </comment>
                <comment line="1735">
                    Split epsilon   xa + xb = x                    
                </comment>
                <comment line="1741">
                                        
                </comment>
                <comment line="1744">
                    Compute the following sum:
                    
                     result = sintA + costAsinEpsA + sintAcosEpsB + costAsinEpsB +
                              sintB + costBsinEpsA + sintBcosEpsB + costBsinEpsB;
                    
                     Ranges of elements
                    
                     xxxtA   0            PI2
                     xxxtB   -1.5e-9      1.5e-9
                     sinEpsA -0.0625      0.0625
                     sinEpsB -6e-11       6e-11
                     cosEpsA  1.0
                     cosEpsB  0           -0.0625                    
                </comment>
                <comment line="1760">
                    result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +
                              sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;                    
                </comment>
                <comment line="1763">
                    result = sintA + sintA*cosEpsB + sintB + sintB * cosEpsB;
                    result += costA*sinEpsA + costA*sinEpsB + costB*sinEpsA + costB * sinEpsB;                    
                </comment>
                <comment line="1781">
                    t = sintAcosEpsB;
                    c = a + t;
                    d = -(c - a - t);
                    a = c;
                    b = b + d;
                    
                    t = costAsinEpsB;
                    c = a + t;
                    d = -(c - a - t);
                    a = c;
                    b = b + d;                    
                </comment>
                <comment line="1796">
                    t = sintB;
                    c = a + t;
                    d = -(c - a - t);
                    a = c;
                    b = b + d;
                    
                    t = costBsinEpsA;
                    c = a + t;
                    d = -(c - a - t);
                    a = c;
                    b = b + d;
                    
                    t = sintBcosEpsB;
                    c = a + t;
                    d = -(c - a - t);
                    a = c;
                    b = b + d;
                    
                    t = costBsinEpsB;
                    c = a + t;
                    d = -(c - a - t);
                    a = c;
                    b = b + d;                    
                </comment>
                <comment line="1824">
                    approximate cosine*xb                    
                </comment>
                <declaration name="idx" type="int" line="1719"/>
                <declaration name="epsilon" type="double" line="1720"/>
                <declaration name="sintA" type="double" line="1723"/>
                <declaration name="sintB" type="double" line="1724"/>
                <declaration name="costA" type="double" line="1725"/>
                <declaration name="costB" type="double" line="1726"/>
                <declaration name="sinEpsA" type="double" line="1729"/>
                <declaration name="sinEpsB" type="double" line="1730"/>
                <declaration name="cosEpsA" type="double" line="1731"/>
                <declaration name="cosEpsB" type="double" line="1732"/>
                <declaration name="temp" type="double" line="1735"/>
                <declaration name="temp2" type="double" line="1736"/>
                <declaration name="result" type="double" line="1741"/>
                <declaration name="a" type="double" line="1764"/>
                <declaration name="b" type="double" line="1765"/>
                <declaration name="t" type="double" line="1767"/>
                <declaration name="c" type="double" line="1768"/>
                <declaration name="d" type="double" line="1769"/>
                <scope line="1821"/>
            </method>
            <javadoc line="1835">
                Compute cosine in the first quadrant by subtracting input from PI/2 and
                  then calling sinQ.  This is more accurate as the input approaches PI/2.                
                <param>
                    xa number from which cosine is requested                    
                </param>
                <param>
                    xb extra bits for x (may be 0.0)                    
                </param>
                <return>
                    cos(xa + xb)                    
                </return>
            </javadoc>
            <method name="cosQ" type="double" line="1842">
                <params>
                    <param name="xa" type="double"/>
                    <param name="xb" type="double"/>
                </params>
                <declaration name="pi2a" type="double" line="1843"/>
                <declaration name="pi2b" type="double" line="1844"/>
                <declaration name="a" type="double" line="1846"/>
                <declaration name="b" type="double" line="1847"/>
            </method>
            <javadoc line="1853">
                Compute tangent (or cotangent) over the first quadrant.   0 &lt; x &lt; pi/2
                  Use combination of table lookup and rational polynomial expansion.                
                <param>
                    xa number from which sine is requested                    
                </param>
                <param>
                    xb extra bits for x (may be 0.0)                    
                </param>
                <param>
                    cotanFlag if true, compute the cotangent instead of the tangent                    
                </param>
                <return>
                    tan(xa+xb) (or cotangent, depending on cotanFlag)                    
                </return>
            </javadoc>
            <method name="tanQ" type="double" line="1861">
                <params>
                    <param name="xa" type="double"/>
                    <param name="xb" type="double"/>
                    <param name="cotanFlag" type="boolean"/>
                </params>
                <comment line="1865">
                    idx*0.125;                    
                </comment>
                <comment line="1867">
                    Table lookups                    
                </comment>
                <comment line="1873">
                    Polynomial eval of sin(epsilon), cos(epsilon)                    
                </comment>
                <comment line="1879">
                    Split epsilon   xa + xb = x                    
                </comment>
                <comment line="1885">
                                        
                </comment>
                <comment line="1887">
                    Compute the following sum:
                    
                     result = sintA + costAsinEpsA + sintAcosEpsB + costAsinEpsB +
                              sintB + costBsinEpsA + sintBcosEpsB + costBsinEpsB;
                    
                     Ranges of elements
                    
                     xxxtA   0            PI2
                     xxxtB   -1.5e-9      1.5e-9
                     sinEpsA -0.0625      0.0625
                     sinEpsB -6e-11       6e-11
                     cosEpsA  1.0
                     cosEpsB  0           -0.0625                    
                </comment>
                <comment line="1903">
                    result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +
                              sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;                    
                </comment>
                <comment line="1906">
                    result = sintA + sintA*cosEpsB + sintB + sintB * cosEpsB;
                    result += costA*sinEpsA + costA*sinEpsB + costB*sinEpsA + costB * sinEpsB;                    
                </comment>
                <comment line="1911">
                    Compute sine                    
                </comment>
                <comment line="1930">
                    Compute cosine                    
                </comment>
                <comment line="1959">
                                        
                </comment>
                <comment line="1960">
                    double est = (sina+sinb)(cosa+cosb);
                    double err = (sina - cosaest) + (sinb - cosbest);
                    est += err(cosa+cosb);
                    err = (sina - cosaest) + (sinb - cosbest);                    
                </comment>
                <comment line="1967">
                    f(x) = 1/x,   f&apos;(x) = -1/x^2                    
                </comment>
                <comment line="1971">
                                        
                </comment>
                <comment line="1980">
                    double err = (sina - est*cosa)/cosa;  // Correction for division rounding                    
                </comment>
                <comment line="1981">
                    Correction for division rounding                    
                </comment>
                <comment line="1982">
                    Change in est due to sinb                    
                </comment>
                <comment line="1983">
                    Change in est due to cosb                    
                </comment>
                <comment line="1986">
                    tan&apos; = 1 + tan^2      cot&apos; = -(1 + cot^2)
                     Approximate impact of xb                    
                </comment>
                <declaration name="idx" type="int" line="1863"/>
                <declaration name="epsilon" type="double" line="1864"/>
                <declaration name="sintA" type="double" line="1867"/>
                <declaration name="sintB" type="double" line="1868"/>
                <declaration name="costA" type="double" line="1869"/>
                <declaration name="costB" type="double" line="1870"/>
                <declaration name="sinEpsA" type="double" line="1873"/>
                <declaration name="sinEpsB" type="double" line="1874"/>
                <declaration name="cosEpsA" type="double" line="1875"/>
                <declaration name="cosEpsB" type="double" line="1876"/>
                <declaration name="temp" type="double" line="1879"/>
                <declaration name="temp2" type="double" line="1880"/>
                <declaration name="a" type="double" line="1907"/>
                <declaration name="b" type="double" line="1908"/>
                <declaration name="t" type="double" line="1911"/>
                <declaration name="c" type="double" line="1912"/>
                <declaration name="d" type="double" line="1913"/>
                <declaration name="sina" type="double" line="1926"/>
                <declaration name="sinb" type="double" line="1927"/>
                <declaration name="cosa" type="double" line="1948"/>
                <declaration name="cosb" type="double" line="1949"/>
                <scope line="1951">
                    <declaration name="tmp" type="double" line="1952"/>
                </scope>
                <declaration name="est" type="double" line="1968"/>
                <declaration name="esta" type="double" line="1972"/>
                <declaration name="estb" type="double" line="1973"/>
                <declaration name="cosaa" type="double" line="1976"/>
                <declaration name="cosab" type="double" line="1977"/>
                <declaration name="err" type="double" line="1980"/>
                <scope line="1984">
                    <declaration name="xbadj" type="double" line="1987"/>
                    <scope line="1988"/>
                </scope>
            </method>
            <javadoc line="1998">
                Reduce the input argument using the Payne and Hanek method.
                  This is good for all inputs 0.0 &lt; x &lt; inf
                  Output is remainder after dividing by PI/2
                  The result array should contain 3 numbers.
                  result[0] is the integer portion, so mod 4 this gives the quadrant.
                  result[1] is the upper bits of the remainder
                  result[2] is the lower bits of the remainder                
                <param>
                    x number to reduce                    
                </param>
                <param>
                    result placeholder where to put the result                    
                </param>
            </javadoc>
            <method name="reducePayneHanek" type="void" line="2010">
                <params>
                    <param name="x" type="double"/>
                    <param name="result" type="double"/>
                </params>
                <comment line="2012">
                                        
                </comment>
                <comment line="2016">
                                        
                </comment>
                <comment line="2020">
                                        
                </comment>
                <comment line="2024">
                                        
                </comment>
                <comment line="2042">
                                        
                </comment>
                <comment line="2061">
                                        
                </comment>
                <comment line="2075">
                                        
                </comment>
                <comment line="2081">
                                        
                </comment>
                <comment line="2088">
                                        
                </comment>
                <comment line="2095">
                                        
                </comment>
                <comment line="2101">
                                        
                </comment>
                <comment line="2111">
                    prodA, prodB now contain the remainder as a fraction of PI.  We want this as a fraction of
                     PI2, so use the following steps:
                     1.) multiply by 4.
                     2.) do a fixed point muliply by PI4.
                     3.) Convert to floating point.
                     4.) Multiply by 2                    
                </comment>
                <comment line="2120">
                                        
                </comment>
                <comment line="2123">
                                        
                </comment>
                <comment line="2128">
                                        
                </comment>
                <comment line="2147">
                                        
                </comment>
                <comment line="2161">
                                        
                </comment>
                <comment line="2167">
                                        
                </comment>
                <comment line="2174">
                                        
                </comment>
                <comment line="2181">
                                        
                </comment>
                <comment line="2187">
                                        
                </comment>
                <comment line="2196">
                                        
                </comment>
                <comment line="2203">
                                        
                </comment>
                <comment line="2209">
                                        
                </comment>
                <comment line="2210">
                    High order 52 bits                    
                </comment>
                <comment line="2211">
                    Low bits                    
                </comment>
                <comment line="2216">
                                        
                </comment>
                <declaration name="inbits" type="long" line="2012"/>
                <declaration name="exponent" type="int" line="2013"/>
                <declaration name="shpi0" type="long" line="2024"/>
                <declaration name="shpiA" type="long" line="2025"/>
                <declaration name="shpiB" type="long" line="2026"/>
                <declaration name="idx" type="int" line="2027"/>
                <declaration name="shift" type="int" line="2028"/>
                <scope line="2030"/>
                <scope line="2035"/>
                <declaration name="a" type="long" line="2042"/>
                <declaration name="b" type="long" line="2043"/>
                <declaration name="c" type="long" line="2045"/>
                <declaration name="d" type="long" line="2046"/>
                <declaration name="ac" type="long" line="2048"/>
                <declaration name="bd" type="long" line="2049"/>
                <declaration name="bc" type="long" line="2050"/>
                <declaration name="ad" type="long" line="2051"/>
                <declaration name="prodB" type="long" line="2053"/>
                <declaration name="prodA" type="long" line="2054"/>
                <declaration name="bita" type="boolean" line="2056"/>
                <declaration name="bitb" type="boolean" line="2057"/>
                <declaration name="bitsum" type="boolean" line="2058"/>
                <scope line="2062"/>
                <scope line="2076"/>
                <scope line="2096"/>
                <declaration name="intPart" type="int" line="2120"/>
                <declaration name="prod2B" type="long" line="2139"/>
                <declaration name="prod2A" type="long" line="2140"/>
                <scope line="2148"/>
                <scope line="2162"/>
                <scope line="2182"/>
                <scope line="2204"/>
                <declaration name="tmpA" type="double" line="2209"/>
                <declaration name="tmpB" type="double" line="2210"/>
                <declaration name="sumA" type="double" line="2212"/>
                <declaration name="sumB" type="double" line="2213"/>
            </method>
            <javadoc line="2221">
                Sine function.                
                <param>
                    x Argument.                    
                </param>
                <return>
                    sin(x)                    
                </return>
            </javadoc>
            <method name="sin" type="double" line="2227">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="2234">
                                        
                </comment>
                <comment line="2241">
                                        
                </comment>
                <comment line="2254">
                                        
                </comment>
                <comment line="2256">
                    PI * (2**20)
                     Argument too big for CodyWaite reduction.  Must use
                     PayneHanek.                    
                </comment>
                <comment line="2272">
                    Flip bit 1                    
                </comment>
                <declaration name="negative" type="boolean" line="2228"/>
                <declaration name="quadrant" type="int" line="2229"/>
                <declaration name="xa" type="double" line="2230"/>
                <declaration name="xb" type="double" line="2231"/>
                <scope line="2235"/>
                <scope line="2241">
                    <declaration name="bits" type="long" line="2242"/>
                    <scope line="2243"/>
                </scope>
                <scope line="2249"/>
                <scope line="2254">
                    <declaration name="reduceResults" type="double" line="2258"/>
                </scope>
                <scope line="2263">
                    <declaration name="cw" type="CodyWaite" line="2264"/>
                </scope>
                <scope line="2270"/>
            </method>
            <javadoc line="2288">
                Cosine function.                
                <param>
                    x Argument.                    
                </param>
                <return>
                    cos(x)                    
                </return>
            </javadoc>
            <method name="cos" type="double" line="2294">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="2298">
                                        
                </comment>
                <comment line="2308">
                                        
                </comment>
                <comment line="2311">
                    PI * (2**20)
                     Argument too big for CodyWaite reduction.  Must use
                     PayneHanek.                    
                </comment>
                <comment line="2326">
                    if (negative)
                      quadrant = (quadrant + 2) % 4;                    
                </comment>
                <declaration name="quadrant" type="int" line="2295"/>
                <declaration name="xa" type="double" line="2298"/>
                <scope line="2299"/>
                <scope line="2303"/>
                <declaration name="xb" type="double" line="2308"/>
                <scope line="2309">
                    <declaration name="reduceResults" type="double" line="2313"/>
                </scope>
                <scope line="2318">
                    <declaration name="cw" type="CodyWaite" line="2319"/>
                </scope>
            </method>
            <javadoc line="2342">
                Tangent function.                
                <param>
                    x Argument.                    
                </param>
                <return>
                    tan(x)                    
                </return>
            </javadoc>
            <method name="tan" type="double" line="2348">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="2353">
                                        
                </comment>
                <comment line="2360">
                                        
                </comment>
                <comment line="2373">
                                        
                </comment>
                <comment line="2376">
                    PI * (2**20)
                     Argument too big for CodyWaite reduction.  Must use
                     PayneHanek.                    
                </comment>
                <comment line="2392">
                    Accuracy suffers between 1.5 and PI/2                    
                </comment>
                <declaration name="negative" type="boolean" line="2349"/>
                <declaration name="quadrant" type="int" line="2350"/>
                <declaration name="xa" type="double" line="2353"/>
                <scope line="2354"/>
                <scope line="2360">
                    <declaration name="bits" type="long" line="2361"/>
                    <scope line="2362"/>
                </scope>
                <scope line="2368"/>
                <declaration name="xb" type="double" line="2373"/>
                <scope line="2374">
                    <declaration name="reduceResults" type="double" line="2378"/>
                </scope>
                <scope line="2383">
                    <declaration name="cw" type="CodyWaite" line="2384"/>
                </scope>
                <scope line="2390">
                    <declaration name="pi2a" type="double" line="2392"/>
                    <declaration name="pi2b" type="double" line="2393"/>
                    <declaration name="a" type="double" line="2395"/>
                    <declaration name="b" type="double" line="2396"/>
                </scope>
                <declaration name="result" type="double" line="2405"/>
                <scope line="2406"/>
                <scope line="2408"/>
                <scope line="2412"/>
            </method>
            <javadoc line="2419">
                Arctangent function                
                <param>
                    x a number                    
                </param>
                <return>
                    atan(x)                    
                </return>
            </javadoc>
            <method name="atan" type="double" line="2424">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="2428">
                Internal helper function to compute arctangent.                
                <param>
                    xa number from which arctangent is requested                    
                </param>
                <param>
                    xb extra bits for x (may be 0.0)                    
                </param>
                <param>
                    leftPlane if true, result angle must be put in the left half plane                    
                </param>
                <return>
                    atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)                    
                </return>
            </javadoc>
            <method name="atan" type="double" line="2434">
                <params>
                    <param name="xa" type="double"/>
                    <param name="xb" type="double"/>
                    <param name="leftPlane" type="boolean"/>
                </params>
                <comment line="2436">
                    Matches +/- 0.0; return correct sign                    
                </comment>
                <comment line="2442">
                    negative                    
                </comment>
                <comment line="2450">
                    Very large input                    
                </comment>
                <comment line="2454">
                                        
                </comment>
                <comment line="2474">
                                        
                </comment>
                <comment line="2481">
                    if (idx &gt; 8 || idx == 0)                    
                </comment>
                <comment line="2483">
                                        
                </comment>
                <comment line="2484">
                    double denom = 1.0 / (1.0 + xa*tangentTableA[idx] + xb*tangentTableA[idx] + xa*tangentTableB[idx] + xb*tangentTableB[idx]);                    
                </comment>
                <comment line="2486">
                    double denom = 1.0 / (1.0 + xa*tangentTableA[idx]);                    
                </comment>
                <comment line="2509">
                                        
                </comment>
                <comment line="2520">
                                        
                </comment>
                <comment line="2523">
                    yb = -0.09001346640161823;
                    yb = yb  epsA2 + 0.11110718400605211;
                    yb = yb  epsA2 + -0.1428571349122913;
                    yb = yb  epsA2 + 0.19999999999273194;
                    yb = yb  epsA2 + -0.33333333333333093;
                    yb = yb  epsA2  epsA;                    
                </comment>
                <comment line="2547">
                                        
                </comment>
                <comment line="2552">
                    result = yb + eighths[idx] + ya;                    
                </comment>
                <comment line="2562">
                    Result is in the left plane                    
                </comment>
                <scope line="2435"/>
                <declaration name="negate" type="boolean" line="2439"/>
                <scope line="2440"/>
                <scope line="2445"/>
                <scope line="2449"/>
                <declaration name="idx" type="int" line="2454"/>
                <scope line="2455"/>
                <scope line="2457">
                    <declaration name="oneOverXa" type="double" line="2458"/>
                </scope>
                <declaration name="ttA" type="double" line="2462"/>
                <declaration name="ttB" type="double" line="2463"/>
                <declaration name="epsA" type="double" line="2465"/>
                <declaration name="epsB" type="double" line="2466"/>
                <declaration name="temp" type="double" line="2469"/>
                <declaration name="ya" type="double" line="2475"/>
                <declaration name="yb" type="double" line="2476"/>
                <scope line="2481">
                    <declaration name="denom" type="double" line="2484"/>
                </scope>
                <scope line="2488">
                    <declaration name="temp2" type="double" line="2489"/>
                    <declaration name="za" type="double" line="2490"/>
                    <declaration name="zb" type="double" line="2491"/>
                    <declaration name="yaa" type="double" line="2501"/>
                    <declaration name="yab" type="double" line="2502"/>
                    <declaration name="zaa" type="double" line="2505"/>
                    <declaration name="zab" type="double" line="2506"/>
                </scope>
                <declaration name="epsA2" type="double" line="2520"/>
                <declaration name="eighths" type="double" line="2549"/>
                <declaration name="za" type="double" line="2552"/>
                <declaration name="zb" type="double" line="2553"/>
                <declaration name="result" type="double" line="2558"/>
                <scope line="2560">
                    <declaration name="resultb" type="double" line="2562"/>
                    <declaration name="pia" type="double" line="2563"/>
                    <declaration name="pib" type="double" line="2564"/>
                </scope>
                <scope line="2574"/>
            </method>
            <javadoc line="2581">
                Two arguments arctangent function                
                <param>
                    y ordinate                    
                </param>
                <param>
                    x abscissa                    
                </param>
                <return>
                    phase angle of point (x,y) between {@code -PI} and {@code PI}                    
                </return>
            </javadoc>
            <method name="atan2" type="double" line="2587">
                <params>
                    <param name="y" type="double"/>
                    <param name="x" type="double"/>
                </params>
                <comment line="2598">
                    X is infinite                    
                </comment>
                <comment line="2600">
                    return +/- 0.0                    
                </comment>
                <comment line="2617">
                    y cannot now be zero                    
                </comment>
                <comment line="2664">
                    Neither y nor x can be infinite or NAN here                    
                </comment>
                <comment line="2676">
                    Compute ratio r = y/x                    
                </comment>
                <comment line="2678">
                    bypass calculations that can create NaN                    
                </comment>
                <comment line="2685">
                    Split x                    
                </comment>
                <comment line="2695">
                    Fix up the sign so atan works correctly                    
                </comment>
                <comment line="2699">
                    Call atan                    
                </comment>
                <scope line="2588"/>
                <scope line="2592">
                    <declaration name="result" type="double" line="2593"/>
                    <declaration name="invx" type="double" line="2594"/>
                    <declaration name="invy" type="double" line="2595"/>
                    <scope line="2597">
                        <scope line="2598"/>
                        <scope line="2600"/>
                    </scope>
                    <scope line="2605">
                        <scope line="2606"/>
                        <scope line="2608"/>
                    </scope>
                    <scope line="2611"/>
                </scope>
                <scope line="2618">
                    <scope line="2619"/>
                    <scope line="2623"/>
                </scope>
                <scope line="2630">
                    <scope line="2631"/>
                    <scope line="2635"/>
                </scope>
                <scope line="2642">
                    <scope line="2643"/>
                    <scope line="2647"/>
                </scope>
                <scope line="2653">
                    <scope line="2654"/>
                    <scope line="2658"/>
                </scope>
                <scope line="2665">
                    <scope line="2666"/>
                    <scope line="2670"/>
                </scope>
                <declaration name="r" type="double" line="2676"/>
                <scope line="2677"/>
                <declaration name="ra" type="double" line="2681"/>
                <declaration name="rb" type="double" line="2682"/>
                <declaration name="xa" type="double" line="2685"/>
                <declaration name="xb" type="double" line="2686"/>
                <declaration name="temp" type="double" line="2690"/>
                <scope line="2694"/>
                <declaration name="result" type="double" line="2699"/>
            </method>
            <javadoc line="2704">
                Compute the arc sine of a number.                
                <param>
                    x number on which evaluation is done                    
                </param>
                <return>
                    arc sine of x                    
                </return>
            </javadoc>
            <method name="asin" type="double" line="2708">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="2726">
                    Matches +/- 0.0; return correct sign                    
                </comment>
                <comment line="2730">
                                        
                </comment>
                <comment line="2732">
                                        
                </comment>
                <comment line="2737">
                                        
                </comment>
                <comment line="2741">
                                        
                </comment>
                <comment line="2752">
                                        
                </comment>
                <comment line="2759">
                                        
                </comment>
                <comment line="2762">
                                        
                </comment>
                <comment line="2765">
                    Compute ratio r = x/y                    
                </comment>
                <comment line="2771">
                    Correct for rounding in division                    
                </comment>
                <comment line="2772">
                    Add in effect additional bits of sqrt.                    
                </comment>
                <scope line="2709"/>
                <scope line="2713"/>
                <scope line="2717"/>
                <scope line="2721"/>
                <scope line="2725"/>
                <declaration name="temp" type="double" line="2732"/>
                <declaration name="xa" type="double" line="2733"/>
                <declaration name="xb" type="double" line="2734"/>
                <declaration name="ya" type="double" line="2737"/>
                <declaration name="yb" type="double" line="2738"/>
                <declaration name="za" type="double" line="2744"/>
                <declaration name="zb" type="double" line="2745"/>
                <declaration name="y" type="double" line="2752"/>
                <declaration name="dx" type="double" line="2762"/>
                <declaration name="r" type="double" line="2765"/>
                <declaration name="ra" type="double" line="2767"/>
                <declaration name="rb" type="double" line="2768"/>
            </method>
            <javadoc line="2780">
                Compute the arc cosine of a number.                
                <param>
                    x number on which evaluation is done                    
                </param>
                <return>
                    arc cosine of x                    
                </return>
            </javadoc>
            <method name="acos" type="double" line="2784">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="2806">
                                        
                </comment>
                <comment line="2808">
                                        
                </comment>
                <comment line="2813">
                                        
                </comment>
                <comment line="2817">
                                        
                </comment>
                <comment line="2828">
                                        
                </comment>
                <comment line="2834">
                                        
                </comment>
                <comment line="2837">
                                        
                </comment>
                <comment line="2842">
                    Compute ratio r = y/x                    
                </comment>
                <comment line="2845">
                    Did r overflow?                    
                </comment>
                <comment line="2846">
                    x is effectively zero                    
                </comment>
                <comment line="2847">
                    so return the appropriate value                    
                </comment>
                <comment line="2853">
                    Correct for rounding in division                    
                </comment>
                <comment line="2854">
                    Add in effect additional bits of sqrt.                    
                </comment>
                <scope line="2785"/>
                <scope line="2789"/>
                <scope line="2793"/>
                <scope line="2797"/>
                <scope line="2801"/>
                <declaration name="temp" type="double" line="2808"/>
                <declaration name="xa" type="double" line="2809"/>
                <declaration name="xb" type="double" line="2810"/>
                <declaration name="ya" type="double" line="2813"/>
                <declaration name="yb" type="double" line="2814"/>
                <declaration name="za" type="double" line="2820"/>
                <declaration name="zb" type="double" line="2821"/>
                <declaration name="y" type="double" line="2828"/>
                <declaration name="r" type="double" line="2842"/>
                <scope line="2845"/>
                <declaration name="ra" type="double" line="2849"/>
                <declaration name="rb" type="double" line="2850"/>
            </method>
            <javadoc line="2862">
                Compute the cubic root of a number.                
                <param>
                    x number on which evaluation is done                    
                </param>
                <return>
                    cubic root of x                    
                </return>
            </javadoc>
            <method name="cbrt" type="double" line="2866">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="2868">
                                        
                </comment>
                <comment line="2878">
                                        
                </comment>
                <comment line="2880">
                    2^54                    
                </comment>
                <comment line="2886">
                    Nan or infinity.  Don&apos;t care which.                    
                </comment>
                <comment line="2890">
                                        
                </comment>
                <comment line="2893">
                                        
                </comment>
                <comment line="2897">
                                        
                </comment>
                <comment line="2900">
                                        
                </comment>
                <comment line="2909">
                    est should now be good to about 15 bits of precision.   Do 2 rounds of
                     Newton&apos;s method to get closer,  this should get us full double precision
                     Scale down x for the purpose of doing newtons method.  This avoids over/under flows.                    
                </comment>
                <comment line="2916">
                    Do one round of Newton&apos;s method in extended precision to get the last bit right.                    
                </comment>
                <comment line="2937">
                                        
                </comment>
                <comment line="2941">
                    2^-18                    
                </comment>
                <declaration name="inbits" type="long" line="2868"/>
                <declaration name="exponent" type="int" line="2869"/>
                <declaration name="subnormal" type="boolean" line="2870"/>
                <scope line="2872">
                    <scope line="2873"/>
                </scope>
                <scope line="2884"/>
                <declaration name="exp3" type="int" line="2890"/>
                <declaration name="p2" type="double" line="2893"/>
                <declaration name="mant" type="double" line="2897"/>
                <declaration name="est" type="double" line="2900"/>
                <declaration name="xs" type="double" line="2911"/>
                <declaration name="temp" type="double" line="2916"/>
                <declaration name="ya" type="double" line="2917"/>
                <declaration name="yb" type="double" line="2918"/>
                <declaration name="za" type="double" line="2920"/>
                <declaration name="zb" type="double" line="2921"/>
                <declaration name="temp2" type="double" line="2923"/>
                <declaration name="na" type="double" line="2930"/>
                <declaration name="nb" type="double" line="2931"/>
                <scope line="2939"/>
            </method>
            <javadoc line="2946">
                Convert degrees to radians, with error of less than 0.5 ULP                
                <param>
                    x angle in degrees                    
                </param>
                <return>
                    x converted into radians                    
                </return>
            </javadoc>
            <method name="toRadians" type="double" line="2952">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="2954">
                    Matches +/- 0.0; return correct sign                    
                </comment>
                <comment line="2958">
                    These are PI/180 split into high and low order bits                    
                </comment>
                <comment line="2967">
                    ensure correct sign if calculation underflows                    
                </comment>
                <scope line="2953"/>
                <declaration name="facta" type="double" line="2958"/>
                <declaration name="factb" type="double" line="2959"/>
                <declaration name="xa" type="double" line="2961"/>
                <declaration name="xb" type="double" line="2962"/>
                <declaration name="result" type="double" line="2964"/>
                <scope line="2965"/>
            </method>
            <javadoc line="2971">
                Convert radians to degrees, with error of less than 0.5 ULP                
                <param>
                    x angle in radians                    
                </param>
                <return>
                    x converted into degrees                    
                </return>
            </javadoc>
            <method name="toDegrees" type="double" line="2977">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="2979">
                    Matches +/- 0.0; return correct sign                    
                </comment>
                <comment line="2983">
                    These are 180/PI split into high and low order bits                    
                </comment>
                <scope line="2978"/>
                <declaration name="facta" type="double" line="2983"/>
                <declaration name="factb" type="double" line="2984"/>
                <declaration name="xa" type="double" line="2986"/>
                <declaration name="xb" type="double" line="2987"/>
            </method>
            <javadoc line="2992">
                Absolute value.                
                <param>
                    x number from which absolute value is requested                    
                </param>
                <return>
                    abs(x)                    
                </return>
            </javadoc>
            <method name="abs" type="int" line="2997">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="i" type="int" line="2998"/>
            </method>
            <javadoc line="3002">
                Absolute value.                
                <param>
                    x number from which absolute value is requested                    
                </param>
                <return>
                    abs(x)                    
                </return>
            </javadoc>
            <method name="abs" type="long" line="3007">
                <params>
                    <param name="x" type="long"/>
                </params>
                <comment line="3010">
                    l is one if x negative zero else
                     ~l+1 is zero if x is positive, -1 if x is negative
                     x^(~l+1) is x is x is positive, ~x if x is negative
                     add around                    
                </comment>
                <declaration name="l" type="long" line="3008"/>
            </method>
            <javadoc line="3016">
                Absolute value.                
                <param>
                    x number from which absolute value is requested                    
                </param>
                <return>
                    abs(x)                    
                </return>
            </javadoc>
            <method name="abs" type="float" line="3021">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <javadoc line="3025">
                Absolute value.                
                <param>
                    x number from which absolute value is requested                    
                </param>
                <return>
                    abs(x)                    
                </return>
            </javadoc>
            <method name="abs" type="double" line="3030">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="3034">
                Compute least significant bit (Unit in Last Position) for a number.                
                <param>
                    x number from which ulp is requested                    
                </param>
                <return>
                    ulp(x)                    
                </return>
            </javadoc>
            <method name="ulp" type="double" line="3039">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="3040"/>
            </method>
            <javadoc line="3046">
                Compute least significant bit (Unit in Last Position) for a number.                
                <param>
                    x number from which ulp is requested                    
                </param>
                <return>
                    ulp(x)                    
                </return>
            </javadoc>
            <method name="ulp" type="float" line="3051">
                <params>
                    <param name="x" type="float"/>
                </params>
                <scope line="3052"/>
            </method>
            <javadoc line="3058">
                Multiply a double number by a power of 2.                
                <param>
                    d number to multiply                    
                </param>
                <param>
                    n power of 2                    
                </param>
                <return>
                    d &amp;times; 2&lt;sup&gt;n&lt;/sup&gt;                    
                </return>
            </javadoc>
            <method name="scalb" type="double" line="3064">
                <params>
                    <param name="d" type="double"/>
                    <param name="n" type="int"/>
                </params>
                <comment line="3067">
                    first simple and fast handling when 2^n can be represented using normal numbers                    
                </comment>
                <comment line="3072">
                    handle special cases                    
                </comment>
                <comment line="3083">
                    decompose d                    
                </comment>
                <comment line="3089">
                    compute scaled exponent                    
                </comment>
                <comment line="3093">
                    we are really in the case n &lt;= -1023                    
                </comment>
                <comment line="3095">
                    both the input and the result are normal numbers, we only adjust the exponent                    
                </comment>
                <comment line="3098">
                    the input is a normal number and the result is a subnormal number                    
                </comment>
                <comment line="3100">
                    recover the hidden mantissa bit                    
                </comment>
                <comment line="3103">
                    scales down complete mantissa, hence losing least significant bits                    
                </comment>
                <comment line="3107">
                    we need to add 1 bit to round up the result                    
                </comment>
                <comment line="3113">
                    no need to compute the mantissa, the number scales down to 0                    
                </comment>
                <comment line="3117">
                    we are really in the case n &gt;= 1024                    
                </comment>
                <comment line="3120">
                    the input number is subnormal, normalize it                    
                </comment>
                <scope line="3067"/>
                <scope line="3072"/>
                <scope line="3075"/>
                <scope line="3078"/>
                <declaration name="bits" type="long" line="3083"/>
                <declaration name="sign" type="long" line="3084"/>
                <declaration name="exponent" type="int" line="3085"/>
                <declaration name="mantissa" type="long" line="3086"/>
                <declaration name="scaledExponent" type="int" line="3089"/>
                <scope line="3091">
                    <scope line="3093"/>
                    <scope line="3096">
                        <declaration name="mostSignificantLostBit" type="long" line="3103"/>
                        <scope line="3105"/>
                    </scope>
                    <scope line="3111"/>
                </scope>
                <scope line="3115">
                    <scope line="3117">
                        <scope line="3120"/>
                        <scope line="3127"/>
                        <scope line="3129"/>
                    </scope>
                    <scope line="3133"/>
                    <scope line="3135"/>
                </scope>
            </method>
            <javadoc line="3142">
                Multiply a float number by a power of 2.                
                <param>
                    f number to multiply                    
                </param>
                <param>
                    n power of 2                    
                </param>
                <return>
                    f &amp;times; 2&lt;sup&gt;n&lt;/sup&gt;                    
                </return>
            </javadoc>
            <method name="scalb" type="float" line="3148">
                <params>
                    <param name="f" type="float"/>
                    <param name="n" type="int"/>
                </params>
                <comment line="3151">
                    first simple and fast handling when 2^n can be represented using normal numbers                    
                </comment>
                <comment line="3156">
                    handle special cases                    
                </comment>
                <comment line="3167">
                    decompose f                    
                </comment>
                <comment line="3173">
                    compute scaled exponent                    
                </comment>
                <comment line="3177">
                    we are really in the case n &lt;= -127                    
                </comment>
                <comment line="3179">
                    both the input and the result are normal numbers, we only adjust the exponent                    
                </comment>
                <comment line="3182">
                    the input is a normal number and the result is a subnormal number                    
                </comment>
                <comment line="3184">
                    recover the hidden mantissa bit                    
                </comment>
                <comment line="3187">
                    scales down complete mantissa, hence losing least significant bits                    
                </comment>
                <comment line="3191">
                    we need to add 1 bit to round up the result                    
                </comment>
                <comment line="3197">
                    no need to compute the mantissa, the number scales down to 0                    
                </comment>
                <comment line="3201">
                    we are really in the case n &gt;= 128                    
                </comment>
                <comment line="3204">
                    the input number is subnormal, normalize it                    
                </comment>
                <scope line="3151"/>
                <scope line="3156"/>
                <scope line="3159"/>
                <scope line="3162"/>
                <declaration name="bits" type="int" line="3167"/>
                <declaration name="sign" type="int" line="3168"/>
                <declaration name="exponent" type="int" line="3169"/>
                <declaration name="mantissa" type="int" line="3170"/>
                <declaration name="scaledExponent" type="int" line="3173"/>
                <scope line="3175">
                    <scope line="3177"/>
                    <scope line="3180">
                        <declaration name="mostSignificantLostBit" type="int" line="3187"/>
                        <scope line="3189"/>
                    </scope>
                    <scope line="3195"/>
                </scope>
                <scope line="3199">
                    <scope line="3201">
                        <scope line="3204"/>
                        <scope line="3211"/>
                        <scope line="3213"/>
                    </scope>
                    <scope line="3217"/>
                    <scope line="3219"/>
                </scope>
            </method>
            <javadoc line="3226">
                Get the next machine representable number after a number, moving
                  in the direction of another number.
                  &lt;p&gt;
                  The ordering is as follows (increasing):
                  &lt;ul&gt;
                  &lt;li&gt;-INFINITY&lt;/li&gt;
                  &lt;li&gt;-MAX_VALUE&lt;/li&gt;
                  &lt;li&gt;-MIN_VALUE&lt;/li&gt;
                  &lt;li&gt;-0.0&lt;/li&gt;
                  &lt;li&gt;+0.0&lt;/li&gt;
                  &lt;li&gt;+MIN_VALUE&lt;/li&gt;
                  &lt;li&gt;+MAX_VALUE&lt;/li&gt;
                  &lt;li&gt;+INFINITY&lt;/li&gt;
                  &lt;li&gt;&lt;/li&gt;
                  &lt;p&gt;
                  If arguments compare equal, then the second argument is returned.
                  &lt;p&gt;
                  If {@code direction} is greater than {@code d},
                  the smallest machine representable number strictly greater than{@code d} is returned; if less, then the largest representable number
                  strictly less than {@code d} is returned.&lt;/p&gt;
                  &lt;p&gt;
                  If {@code d} is infinite and direction does not
                  bring it back to finite numbers, it is returned unchanged.&lt;/p&gt;                
                <param>
                    d base number                    
                </param>
                <param>
                    direction (the only important thing is whether{@code direction} is greater or smaller than {@code d})                    
                </param>
                <return>
                    the next machine representable number in the specified direction                    
                </return>
            </javadoc>
            <method name="nextAfter" type="double" line="3257">
                <params>
                    <param name="d" type="double"/>
                    <param name="direction" type="double"/>
                </params>
                <comment line="3260">
                    handling of some important special cases                    
                </comment>
                <comment line="3270">
                    special cases MAX_VALUE to infinity and  MIN_VALUE to 0
                     are handled just as normal numbers
                     can use raw bits since already dealt with infinity and NaN                    
                </comment>
                <scope line="3260"/>
                <scope line="3262"/>
                <scope line="3264"/>
                <scope line="3266"/>
                <declaration name="bits" type="long" line="3272"/>
                <declaration name="sign" type="long" line="3273"/>
                <scope line="3274"/>
                <scope line="3276"/>
            </method>
            <javadoc line="3282">
                Get the next machine representable number after a number, moving
                  in the direction of another number.
                  &lt;p&gt;
                  The ordering is as follows (increasing):
                  &lt;ul&gt;
                  &lt;li&gt;-INFINITY&lt;/li&gt;
                  &lt;li&gt;-MAX_VALUE&lt;/li&gt;
                  &lt;li&gt;-MIN_VALUE&lt;/li&gt;
                  &lt;li&gt;-0.0&lt;/li&gt;
                  &lt;li&gt;+0.0&lt;/li&gt;
                  &lt;li&gt;+MIN_VALUE&lt;/li&gt;
                  &lt;li&gt;+MAX_VALUE&lt;/li&gt;
                  &lt;li&gt;+INFINITY&lt;/li&gt;
                  &lt;li&gt;&lt;/li&gt;
                  &lt;p&gt;
                  If arguments compare equal, then the second argument is returned.
                  &lt;p&gt;
                  If {@code direction} is greater than {@code f},
                  the smallest machine representable number strictly greater than{@code f} is returned; if less, then the largest representable number
                  strictly less than {@code f} is returned.&lt;/p&gt;
                  &lt;p&gt;
                  If {@code f} is infinite and direction does not
                  bring it back to finite numbers, it is returned unchanged.&lt;/p&gt;                
                <param>
                    f base number                    
                </param>
                <param>
                    direction (the only important thing is whether{@code direction} is greater or smaller than {@code f})                    
                </param>
                <return>
                    the next machine representable number in the specified direction                    
                </return>
            </javadoc>
            <method name="nextAfter" type="float" line="3313">
                <params>
                    <param name="f" type="float"/>
                    <param name="direction" type="double"/>
                </params>
                <comment line="3316">
                    handling of some important special cases                    
                </comment>
                <comment line="3326">
                    special cases MAX_VALUE to infinity and  MIN_VALUE to 0
                     are handled just as normal numbers                    
                </comment>
                <scope line="3316"/>
                <scope line="3318"/>
                <scope line="3320"/>
                <scope line="3322"/>
                <declaration name="bits" type="int" line="3328"/>
                <declaration name="sign" type="int" line="3329"/>
                <scope line="3330"/>
                <scope line="3332"/>
            </method>
            <javadoc line="3338">
                Get the largest whole number smaller than x.                
                <param>
                    x number from which floor is requested                    
                </param>
                <return>
                    a double number f such that f is an integer f &lt;= x &lt; f + 1.0                    
                </return>
            </javadoc>
            <method name="floor" type="double" line="3342">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="3346">
                    NaN                    
                </comment>
                <declaration name="y" type="long" line="3343"/>
                <scope line="3345"/>
                <scope line="3349"/>
                <scope line="3354"/>
                <scope line="3358"/>
            </method>
            <javadoc line="3365">
                Get the smallest whole number larger than x.                
                <param>
                    x number from which ceil is requested                    
                </param>
                <return>
                    a double number c such that c is an integer c - 1.0 &lt; x &lt;= c                    
                </return>
            </javadoc>
            <method name="ceil" type="double" line="3369">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="3373">
                    NaN                    
                </comment>
                <declaration name="y" type="double" line="3370"/>
                <scope line="3372"/>
                <scope line="3377"/>
                <scope line="3383"/>
            </method>
            <javadoc line="3390">
                Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers.                
                <param>
                    x number from which nearest whole number is requested                    
                </param>
                <return>
                    a double number r such that r is an integer r - 0.5 &lt;= x &lt;= r + 0.5                    
                </return>
            </javadoc>
            <method name="rint" type="double" line="3394">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="3401">
                    Preserve sign of operand                    
                </comment>
                <comment line="3409">
                                        
                </comment>
                <declaration name="y" type="double" line="3395"/>
                <declaration name="d" type="double" line="3396"/>
                <scope line="3398">
                    <scope line="3399"/>
                </scope>
                <scope line="3404"/>
                <declaration name="z" type="long" line="3409"/>
            </method>
            <javadoc line="3413">
                Get the closest long to x.                
                <param>
                    x number from which closest long is requested                    
                </param>
                <return>
                    closest long to x                    
                </return>
            </javadoc>
            <method name="round" type="long" line="3417">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="3421">
                Get the closest int to x.                
                <param>
                    x number from which closest int is requested                    
                </param>
                <return>
                    closest int to x                    
                </return>
            </javadoc>
            <method name="round" type="int" line="3425">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <javadoc line="3429">
                Compute the minimum of two values                
                <param>
                    a first value                    
                </param>
                <param>
                    b second value                    
                </param>
                <return>
                    a if a is lesser or equal to b, b otherwise                    
                </return>
            </javadoc>
            <method name="min" type="int" line="3434">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="3438">
                Compute the minimum of two values                
                <param>
                    a first value                    
                </param>
                <param>
                    b second value                    
                </param>
                <return>
                    a if a is lesser or equal to b, b otherwise                    
                </return>
            </javadoc>
            <method name="min" type="long" line="3443">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
            </method>
            <javadoc line="3447">
                Compute the minimum of two values                
                <param>
                    a first value                    
                </param>
                <param>
                    b second value                    
                </param>
                <return>
                    a if a is lesser or equal to b, b otherwise                    
                </return>
            </javadoc>
            <method name="min" type="float" line="3452">
                <params>
                    <param name="a" type="float"/>
                    <param name="b" type="float"/>
                </params>
                <comment line="3460">
                                        
                </comment>
                <comment line="3464">
                                        
                </comment>
                <comment line="3465">
                                        
                </comment>
                <scope line="3453"/>
                <scope line="3456"/>
                <scope line="3460"/>
                <declaration name="bits" type="int" line="3465"/>
                <scope line="3466"/>
            </method>
            <javadoc line="3472">
                Compute the minimum of two values                
                <param>
                    a first value                    
                </param>
                <param>
                    b second value                    
                </param>
                <return>
                    a if a is lesser or equal to b, b otherwise                    
                </return>
            </javadoc>
            <method name="min" type="double" line="3477">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <comment line="3485">
                                        
                </comment>
                <comment line="3489">
                                        
                </comment>
                <comment line="3490">
                                        
                </comment>
                <scope line="3478"/>
                <scope line="3481"/>
                <scope line="3485"/>
                <declaration name="bits" type="long" line="3490"/>
                <scope line="3491"/>
            </method>
            <javadoc line="3497">
                Compute the maximum of two values                
                <param>
                    a first value                    
                </param>
                <param>
                    b second value                    
                </param>
                <return>
                    b if a is lesser or equal to b, a otherwise                    
                </return>
            </javadoc>
            <method name="max" type="int" line="3502">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="3506">
                Compute the maximum of two values                
                <param>
                    a first value                    
                </param>
                <param>
                    b second value                    
                </param>
                <return>
                    b if a is lesser or equal to b, a otherwise                    
                </return>
            </javadoc>
            <method name="max" type="long" line="3511">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
            </method>
            <javadoc line="3515">
                Compute the maximum of two values                
                <param>
                    a first value                    
                </param>
                <param>
                    b second value                    
                </param>
                <return>
                    b if a is lesser or equal to b, a otherwise                    
                </return>
            </javadoc>
            <method name="max" type="float" line="3520">
                <params>
                    <param name="a" type="float"/>
                    <param name="b" type="float"/>
                </params>
                <comment line="3528">
                                        
                </comment>
                <comment line="3532">
                                        
                </comment>
                <comment line="3533">
                                        
                </comment>
                <scope line="3521"/>
                <scope line="3524"/>
                <scope line="3528"/>
                <declaration name="bits" type="int" line="3533"/>
                <scope line="3534"/>
            </method>
            <javadoc line="3540">
                Compute the maximum of two values                
                <param>
                    a first value                    
                </param>
                <param>
                    b second value                    
                </param>
                <return>
                    b if a is lesser or equal to b, a otherwise                    
                </return>
            </javadoc>
            <method name="max" type="double" line="3545">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <comment line="3553">
                                        
                </comment>
                <comment line="3557">
                                        
                </comment>
                <comment line="3558">
                                        
                </comment>
                <scope line="3546"/>
                <scope line="3549"/>
                <scope line="3553"/>
                <declaration name="bits" type="long" line="3558"/>
                <scope line="3559"/>
            </method>
            <javadoc line="3565">
                Returns the hypotenuse of a triangle with sides {@code x} and {@code y}- sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;br/&gt;
                  avoiding intermediate overflow or underflow.
                  &lt;ul&gt;
                  &lt;li&gt; If either argument is infinite, then the result is positive infinity.&lt;/li&gt;
                  &lt;li&gt; else, if either argument is NaN then the result is NaN.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    x a value                    
                </param>
                <param>
                    y a value                    
                </param>
                <return>
                    sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)                    
                </return>
            </javadoc>
            <method name="hypot" type="double" line="3579">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <comment line="3590">
                    y is neglectible with respect to x                    
                </comment>
                <comment line="3593">
                    x is neglectible with respect to y                    
                </comment>
                <comment line="3597">
                    find an intermediate scale to avoid both overflow and underflow                    
                </comment>
                <comment line="3600">
                    scale parameters without losing precision                    
                </comment>
                <comment line="3604">
                    compute scaled hypotenuse                    
                </comment>
                <comment line="3607">
                    remove scaling                    
                </comment>
                <scope line="3580"/>
                <scope line="3582"/>
                <scope line="3584">
                    <declaration name="expX" type="int" line="3586"/>
                    <declaration name="expY" type="int" line="3587"/>
                    <scope line="3588"/>
                    <scope line="3591"/>
                    <scope line="3594">
                        <declaration name="middleExp" type="int" line="3597"/>
                        <declaration name="scaledX" type="double" line="3600"/>
                        <declaration name="scaledY" type="double" line="3601"/>
                        <declaration name="scaledH" type="double" line="3604"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="3614">
                Computes the remainder as prescribed by the IEEE 754 standard.
                  The remainder value is mathematically equal to {@code x - yn}where {@code n} is the mathematical integer closest to the exact mathematical value
                  of the quotient {@code x/y}.
                  If two mathematical integers are equally close to {@code x/y} then{@code n} is the integer that is even.
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;If either operand is NaN, the result is NaN.&lt;/li&gt;
                  &lt;li&gt;If the result is not NaN, the sign of the result equals the sign of the dividend.&lt;/li&gt;
                  &lt;li&gt;If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.&lt;/li&gt;
                  &lt;li&gt;If the dividend is finite and the divisor is an infinity, the result equals the dividend.&lt;/li&gt;
                  &lt;li&gt;If the dividend is a zero and the divisor is finite, the result equals the dividend.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; this implementation currently delegates to {@link StrictMath#IEEEremainder}                
                <param>
                    dividend the number to be divided                    
                </param>
                <param>
                    divisor the number by which to divide                    
                </param>
                <return>
                    the remainder, rounded                    
                </return>
            </javadoc>
            <method name="IEEEremainder" type="double" line="3634">
                <params>
                    <param name="dividend" type="double"/>
                    <param name="divisor" type="double"/>
                </params>
                <comment line="3636">
                    TODO provide our own implementation                    
                </comment>
            </method>
            <javadoc line="3638">
                Returns the first argument with the sign of the second argument.
                  A NaN {@code sign} argument is treated as positive.                
                <param>
                    magnitude the value to return                    
                </param>
                <param>
                    sign the sign for the returned value                    
                </param>
                <return>
                    the magnitude with the same sign as the {@code sign} argument                    
                </return>
            </javadoc>
            <method name="copySign" type="double" line="3646">
                <params>
                    <param name="magnitude" type="double"/>
                    <param name="sign" type="double"/>
                </params>
                <comment line="3648">
                    The highest order bit is going to be zero if the
                     highest order bit of m and s is the same and one otherwise.
                     So (m^s) will be positive if both m and s have the same sign
                     and negative otherwise.                    
                </comment>
                <comment line="3652">
                    don&apos;t care about NaN                    
                </comment>
                <comment line="3657">
                    flip sign                    
                </comment>
                <declaration name="m" type="long" line="3651"/>
                <declaration name="s" type="long" line="3652"/>
                <scope line="3653"/>
            </method>
            <javadoc line="3659">
                Returns the first argument with the sign of the second argument.
                  A NaN {@code sign} argument is treated as positive.                
                <param>
                    magnitude the value to return                    
                </param>
                <param>
                    sign the sign for the returned value                    
                </param>
                <return>
                    the magnitude with the same sign as the {@code sign} argument                    
                </return>
            </javadoc>
            <method name="copySign" type="float" line="3667">
                <params>
                    <param name="magnitude" type="float"/>
                    <param name="sign" type="float"/>
                </params>
                <comment line="3669">
                    The highest order bit is going to be zero if the
                     highest order bit of m and s is the same and one otherwise.
                     So (m^s) will be positive if both m and s have the same sign
                     and negative otherwise.                    
                </comment>
                <comment line="3678">
                    flip sign                    
                </comment>
                <declaration name="m" type="int" line="3672"/>
                <declaration name="s" type="int" line="3673"/>
                <scope line="3674"/>
            </method>
            <javadoc line="3680">
                Return the exponent of a double number, removing the bias.
                  &lt;p&gt;
                  For double numbers of the form 2&lt;sup&gt;x&lt;/sup&gt;, the unbiased
                  exponent is exactly x.
                  &lt;/p&gt;                
                <param>
                    d number from which exponent is requested                    
                </param>
                <return>
                    exponent for d in IEEE754 representation, without bias                    
                </return>
            </javadoc>
            <method name="getExponent" type="int" line="3689">
                <params>
                    <param name="d" type="double"/>
                </params>
                <comment line="3691">
                    NaN and Infinite will return 1024 anywho so can use raw bits                    
                </comment>
            </method>
            <javadoc line="3694">
                Return the exponent of a float number, removing the bias.
                  &lt;p&gt;
                  For float numbers of the form 2&lt;sup&gt;x&lt;/sup&gt;, the unbiased
                  exponent is exactly x.
                  &lt;/p&gt;                
                <param>
                    f number from which exponent is requested                    
                </param>
                <return>
                    exponent for d in IEEE754 representation, without bias                    
                </return>
            </javadoc>
            <method name="getExponent" type="int" line="3703">
                <params>
                    <param name="f" type="float"/>
                </params>
                <comment line="3705">
                    NaN and Infinite will return the same exponent anywho so can use raw bits                    
                </comment>
            </method>
            <javadoc line="3708">
                Print out contents of arrays, and check the length.
                  &lt;p&gt;used to generate the preset arrays originally.&lt;/p&gt;                
                <param>
                    a unused                    
                </param>
            </javadoc>
            <method name="main" type="void" line="3713">
                <params>
                    <param name="a" type="String[]"/>
                </params>
                <declaration name="out" type="PrintStream" line="3714"/>
            </method>
            <class name="ExpIntTable" line="3728">
                <javadoc line="3728">
                    Enclose large data table in nested static class so it&apos;s only loaded on first access.                    
                </javadoc>
                <declaration name="EXP_INT_TABLE_A" type="double[]" line="3730"/>
                <javadoc line="3730">
                    Exponential evaluated at integer values,
                      exp(x) =  expIntTableA[x + EXP_INT_TABLE_MAX_INDEX] + expIntTableB[x+EXP_INT_TABLE_MAX_INDEX].                    
                </javadoc>
                <declaration name="EXP_INT_TABLE_B" type="double[]" line="3734"/>
                <javadoc line="3734">
                    Exponential evaluated at integer values,
                      exp(x) =  expIntTableA[x + EXP_INT_TABLE_MAX_INDEX] + expIntTableB[x+EXP_INT_TABLE_MAX_INDEX]                    
                </javadoc>
                <scope line="3739">
                    <scope line="3740">
                        <declaration name="tmp" type="double" line="3744"/>
                        <declaration name="recip" type="double" line="3745"/>
                        <scope line="3748">
                            <scope line="3753"/>
                        </scope>
                    </scope>
                    <scope line="3760"/>
                </scope>
            </class>
            <class name="ExpFracTable" line="3767">
                <javadoc line="3767">
                    Enclose large data table in nested static class so it&apos;s only loaded on first access.                    
                </javadoc>
                <declaration name="EXP_FRAC_TABLE_A" type="double[]" line="3769"/>
                <javadoc line="3769">
                    Exponential over the range of 0 - 1 in increments of 2^-10
                      exp(x/1024) =  expFracTableA[x] + expFracTableB[x].
                      1024 = 2^10                    
                </javadoc>
                <declaration name="EXP_FRAC_TABLE_B" type="double[]" line="3774"/>
                <javadoc line="3774">
                    Exponential over the range of 0 - 1 in increments of 2^-10
                      exp(x/1024) =  expFracTableA[x] + expFracTableB[x].                    
                </javadoc>
                <scope line="3779">
                    <scope line="3780">
                        <declaration name="tmp" type="double" line="3784"/>
                        <declaration name="factor" type="double" line="3787"/>
                        <scope line="3788"/>
                    </scope>
                    <scope line="3793"/>
                </scope>
            </class>
            <class name="lnMant" line="3800">
                <javadoc line="3800">
                    Enclose large data table in nested static class so it&apos;s only loaded on first access.                    
                </javadoc>
                <declaration name="LN_MANT" type="double[][]" line="3802"/>
                <javadoc line="3802">
                    Extended precision logarithm table over the range 1 - 2 in increments of 2^-10.                    
                </javadoc>
                <scope line="3805">
                    <scope line="3806">
                        <scope line="3810">
                            <declaration name="d" type="double" line="3811"/>
                        </scope>
                    </scope>
                    <scope line="3814"/>
                </scope>
            </class>
            <class name="CodyWaite" line="3820">
                <javadoc line="3820">
                    Enclose the Cody/Waite reduction (used in &quot;sin&quot;, &quot;cos&quot; and &quot;tan&quot;).                    
                </javadoc>
                <declaration name="finalK" type="int" line="3822"/>
                <javadoc line="3822">
                    k                    
                </javadoc>
                <declaration name="finalRemA" type="double" line="3824"/>
                <javadoc line="3824">
                    remA                    
                </javadoc>
                <declaration name="finalRemB" type="double" line="3826"/>
                <javadoc line="3826">
                    remB                    
                </javadoc>
                <javadoc line="3829">
                    @param xa Argument.                    
                </javadoc>
                <method name="CodyWaite" type="constructor" line="3832">
                    <params>
                        <param name="xa" type="double"/>
                    </params>
                    <comment line="3834">
                        Estimate k.
                        k = (int)(xa / 1.5707963267948966);                        
                    </comment>
                    <comment line="3838">
                        Compute remainder.                        
                    </comment>
                    <comment line="3860">
                        Remainder is negative, so decrement k and try again.
                         This should only happen if the input is very close
                         to an even multiple of pi/2.                        
                    </comment>
                    <declaration name="k" type="int" line="3835"/>
                    <declaration name="remA" type="double" line="3838"/>
                    <declaration name="remB" type="double" line="3839"/>
                    <scope line="3840">
                        <declaration name="a" type="double" line="3841"/>
                        <declaration name="b" type="double" line="3846"/>
                        <scope line="3855"/>
                    </scope>
                </method>
                <javadoc line="3870">
                    @return k                    
                </javadoc>
                <method name="getK" type="int" line="3873"/>
                <javadoc line="3876">
                    @return remA                    
                </javadoc>
                <method name="getRemA" type="double" line="3879"/>
                <javadoc line="3882">
                    @return remB                    
                </javadoc>
                <method name="getRemB" type="double" line="3885"/>
            </class>
        </class>
    </source>