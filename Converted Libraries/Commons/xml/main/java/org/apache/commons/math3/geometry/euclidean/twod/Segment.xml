<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod">
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="Segment" line="22">
            <javadoc line="22">
                Simple container for a two-points segment.                
                <version>
                    $Id: Segment.java 1554651 2014-01-01 17:27:48Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="start" type="Vector2D" line="28"/>
            <javadoc line="28">
                Start point of the segment.                
            </javadoc>
            <declaration name="end" type="Vector2D" line="31"/>
            <javadoc line="31">
                End point of the segment.                
            </javadoc>
            <declaration name="line" type="Line" line="34"/>
            <javadoc line="34">
                Line containing the segment.                
            </javadoc>
            <javadoc line="37">
                Build a segment.                
                <param>
                    start start point of the segment                    
                </param>
                <param>
                    end end point of the segment                    
                </param>
                <param>
                    line line containing the segment                    
                </param>
            </javadoc>
            <method name="Segment" type="constructor" line="42">
                <params>
                    <param name="start" type="Vector2D"/>
                    <param name="end" type="Vector2D"/>
                    <param name="line" type="Line"/>
                </params>
            </method>
            <javadoc line="48">
                Get the start point of the segment.                
                <return>
                    start point of the segment                    
                </return>
            </javadoc>
            <method name="getStart" type="Vector2D" line="51"/>
            <javadoc line="55">
                Get the end point of the segment.                
                <return>
                    end point of the segment                    
                </return>
            </javadoc>
            <method name="getEnd" type="Vector2D" line="58"/>
            <javadoc line="62">
                Get the line containing the segment.                
                <return>
                    line containing the segment                    
                </return>
            </javadoc>
            <method name="getLine" type="Line" line="65"/>
            <javadoc line="69">
                Calculates the shortest distance from a point to this line segment.
                  &lt;p&gt;
                  If the perpendicular extension from the point to the line does not
                  cross in the bounds of the line segment, the shortest distance to
                  the two end points will be returned.
                  &lt;/p&gt;
                  Algorithm adapted from:
                  &lt;a href=&quot;http://www.codeguru.com/forum/printthread.php?s=cc8cf0596231f9a7dba4da6e77c29db3&amp;t=194400&amp;pp=15&amp;page=1&quot;&gt;
                  Thread @ Codeguru&lt;/a&gt;                
                <param>
                    p to check                    
                </param>
                <return>
                    distance between the instance and the point                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="distance" type="double" line="84">
                <params>
                    <param name="p" type="Vector2D"/>
                </params>
                <comment line="92">
                    r == 0 =&gt; P = startPt
                     r == 1 =&gt; P = endPt
                     r &lt; 0 =&gt; P is on the backward extension of the segment
                     r &gt; 1 =&gt; P is on the forward extension of the segment
                     0 &lt; r &lt; 1 =&gt; P is on the segment                    
                </comment>
                <comment line="98">
                    if point isn&apos;t on the line segment, just return the shortest distance to the end points                    
                </comment>
                <comment line="106">
                    find point on line and see if it is in the line segment                    
                </comment>
                <declaration name="deltaX" type="double" line="85"/>
                <declaration name="deltaY" type="double" line="86"/>
                <declaration name="r" type="double" line="88"/>
                <scope line="98">
                    <declaration name="dist1" type="double" line="99"/>
                    <declaration name="dist2" type="double" line="100"/>
                </scope>
                <scope line="104">
                    <declaration name="px" type="double" line="106"/>
                    <declaration name="py" type="double" line="107"/>
                    <declaration name="interPt" type="Vector2D" line="109"/>
                </scope>
            </method>
        </class>
    </source>