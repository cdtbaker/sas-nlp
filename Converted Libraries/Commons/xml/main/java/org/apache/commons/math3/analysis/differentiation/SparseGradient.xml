<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.differentiation">
        <import package="java.io.Serializable"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.RealFieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SparseGradient" line="33">
            <implements interface="RealFieldElement">
                <type_params>
                    <type_param name="SparseGradient"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="33">
                First derivative computation with large number of variables.
                  &lt;p&gt;
                  This class plays a similar role to {@link DerivativeStructure}, with
                  a focus on efficiency when dealing with large number of independent variables
                  and most computation depend only on a few of them, and when only first derivative
                  is desired. When these conditions are met, this class should be much faster than{@link DerivativeStructure} and use less memory.
                  &lt;/p&gt;                
                <version>
                    $Id: SparseGradient.java 1536147 2013-10-27 14:39:16Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="48"/>
            <javadoc line="48">
                Serializable UID.                
            </javadoc>
            <declaration name="value" type="double" line="51"/>
            <javadoc line="51">
                Value of the calculation.                
            </javadoc>
            <declaration name="derivatives" type="Map&amp;lt;Integer,Double&amp;gt;" line="54"/>
            <javadoc line="54">
                Stored derivative, each key representing a different independent variable.                
            </javadoc>
            <javadoc line="57">
                Internal constructor.                
                <param>
                    value value of the function                    
                </param>
                <param>
                    derivatives derivatives map, a deep copy will be performed,
                      so the map given here will remain safe from changes in the new instance,
                      may be null to create an empty derivatives map, i.e. a constant value                    
                </param>
            </javadoc>
            <method name="SparseGradient" type="constructor" line="63">
                <params>
                    <param name="value" type="double"/>
                    <param name="derivatives" type="Map&lt;Integer,Double&gt;"/>
                </params>
                <scope line="66"/>
            </method>
            <javadoc line="71">
                Internal constructor.                
                <param>
                    value value of the function                    
                </param>
                <param>
                    scale scaling factor to apply to all derivatives                    
                </param>
                <param>
                    derivatives derivatives map, a deep copy will be performed,
                      so the map given here will remain safe from changes in the new instance,
                      may be null to create an empty derivatives map, i.e. a constant value                    
                </param>
            </javadoc>
            <method name="SparseGradient" type="constructor" line="79">
                <params>
                    <param name="value" type="double"/>
                    <param name="scale" type="double"/>
                    <param name="derivatives" type="Map&lt;Integer,Double&gt;"/>
                </params>
                <scope line="82">
                    <scope line="83"/>
                </scope>
            </method>
            <javadoc line="89">
                Factory method creating a constant.                
                <param>
                    value value of the constant                    
                </param>
                <return>
                    a new instance                    
                </return>
            </javadoc>
            <method name="createConstant" type="SparseGradient" line="93">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="97">
                Factory method creating an independent variable.                
                <param>
                    idx index of the variable                    
                </param>
                <param>
                    value value of the variable                    
                </param>
                <return>
                    a new instance                    
                </return>
            </javadoc>
            <method name="createVariable" type="SparseGradient" line="102">
                <params>
                    <param name="idx" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="106">
                Find the number of variables.                
                <return>
                    number of variables                    
                </return>
            </javadoc>
            <method name="numVars" type="int" line="110"/>
            <javadoc line="114">
                Get the derivative with respect to a particular index variable.                
                <param>
                    index index to differentiate with.                    
                </param>
                <return>
                    derivative with respect to a particular index variable                    
                </return>
            </javadoc>
            <method name="getDerivative" type="double" line="120">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="out" type="Double" line="121"/>
            </method>
            <javadoc line="125">
                Get the value of the function.                
                <return>
                    value of the function.                    
                </return>
            </javadoc>
            <method name="getValue" type="double" line="129"/>
            <javadoc line="133">
                {@inheritDoc}                
            </javadoc>
            <method name="getReal" type="double" line="134"/>
            <javadoc line="138">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="SparseGradient" line="139">
                <params>
                    <param name="a" type="SparseGradient"/>
                </params>
                <declaration name="out" type="SparseGradient" line="140"/>
                <scope line="141">
                    <declaration name="id" type="int" line="142"/>
                    <declaration name="old" type="Double" line="143"/>
                    <scope line="144"/>
                    <scope line="146"/>
                </scope>
            </method>
            <javadoc line="154">
                Add in place.
                  &lt;p&gt;
                  This method is designed to be faster when used multiple times in a loop.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The instance is changed here, in order to not change the
                  instance the {@link #add(SparseGradient)} method should
                  be used.
                  &lt;/p&gt;                
                <param>
                    a instance to add                    
                </param>
            </javadoc>
            <method name="addInPlace" type="void" line="166">
                <params>
                    <param name="a" type="SparseGradient"/>
                </params>
                <scope line="168">
                    <declaration name="id" type="int" line="169"/>
                    <declaration name="old" type="Double" line="170"/>
                    <scope line="171"/>
                    <scope line="173"/>
                </scope>
            </method>
            <javadoc line="179">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="SparseGradient" line="180">
                <params>
                    <param name="c" type="double"/>
                </params>
                <declaration name="out" type="SparseGradient" line="181"/>
            </method>
            <javadoc line="185">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="SparseGradient" line="186">
                <params>
                    <param name="a" type="SparseGradient"/>
                </params>
                <declaration name="out" type="SparseGradient" line="187"/>
                <scope line="188">
                    <declaration name="id" type="int" line="189"/>
                    <declaration name="old" type="Double" line="190"/>
                    <scope line="191"/>
                    <scope line="193"/>
                </scope>
            </method>
            <javadoc line="200">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="SparseGradient" line="201">
                <params>
                    <param name="c" type="double"/>
                </params>
            </method>
            <javadoc line="205">
                {@inheritDoc}                
            </javadoc>
            <method name="multiply" type="SparseGradient" line="206">
                <params>
                    <param name="a" type="SparseGradient"/>
                </params>
                <comment line="211">
                    Derivatives.                    
                </comment>
                <declaration name="out" type="SparseGradient" line="207"/>
                <scope line="211"/>
                <scope line="214">
                    <declaration name="id" type="int" line="215"/>
                    <declaration name="old" type="Double" line="216"/>
                    <scope line="217"/>
                    <scope line="219"/>
                </scope>
            </method>
            <javadoc line="226">
                Multiply in place.
                  &lt;p&gt;
                  This method is designed to be faster when used multiple times in a loop.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The instance is changed here, in order to not change the
                  instance the {@link #add(SparseGradient)} method should
                  be used.
                  &lt;/p&gt;                
                <param>
                    a instance to multiply                    
                </param>
            </javadoc>
            <method name="multiplyInPlace" type="void" line="238">
                <params>
                    <param name="a" type="SparseGradient"/>
                </params>
                <comment line="240">
                    Derivatives.                    
                </comment>
                <scope line="240"/>
                <scope line="243">
                    <declaration name="id" type="int" line="244"/>
                    <declaration name="old" type="Double" line="245"/>
                    <scope line="246"/>
                    <scope line="248"/>
                </scope>
            </method>
            <javadoc line="255">
                {@inheritDoc}                
            </javadoc>
            <method name="multiply" type="SparseGradient" line="256">
                <params>
                    <param name="c" type="double"/>
                </params>
            </method>
            <javadoc line="260">
                {@inheritDoc}                
            </javadoc>
            <method name="multiply" type="SparseGradient" line="261">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="265">
                {@inheritDoc}                
            </javadoc>
            <method name="divide" type="SparseGradient" line="266">
                <params>
                    <param name="a" type="SparseGradient"/>
                </params>
                <comment line="270">
                    Derivatives.                    
                </comment>
                <declaration name="out" type="SparseGradient" line="267"/>
                <scope line="270"/>
                <scope line="273">
                    <declaration name="id" type="int" line="274"/>
                    <declaration name="old" type="Double" line="275"/>
                    <scope line="276"/>
                    <scope line="278"/>
                </scope>
            </method>
            <javadoc line="285">
                {@inheritDoc}                
            </javadoc>
            <method name="divide" type="SparseGradient" line="286">
                <params>
                    <param name="c" type="double"/>
                </params>
            </method>
            <javadoc line="290">
                {@inheritDoc}                
            </javadoc>
            <method name="negate" type="SparseGradient" line="291"/>
            <javadoc line="295">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="Field&lt;SparseGradient&gt;" line="296">
                <anonymous_class line="297">
                    <javadoc line="299">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getZero" type="SparseGradient" line="300"/>
                    <javadoc line="304">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getOne" type="SparseGradient" line="305"/>
                    <javadoc line="309">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getRuntimeClass" type="Class&lt;? extends FieldElement&lt;SparseGradient&gt;&gt;" line="310"/>
                </anonymous_class>
            </method>
            <javadoc line="317">
                {@inheritDoc}                
            </javadoc>
            <method name="remainder" type="SparseGradient" line="318">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="322">
                {@inheritDoc}                
            </javadoc>
            <method name="remainder" type="SparseGradient" line="323">
                <params>
                    <param name="a" type="SparseGradient"/>
                </params>
                <comment line="326">
                    compute k such that lhs % rhs = lhs - k rhs                    
                </comment>
                <declaration name="rem" type="double" line="326"/>
                <declaration name="k" type="double" line="327"/>
            </method>
            <javadoc line="333">
                {@inheritDoc}                
            </javadoc>
            <method name="abs" type="SparseGradient" line="334">
                <comment line="337">
                    we use the bits representation to also handle -0.0                    
                </comment>
                <scope line="335"/>
                <scope line="338"/>
            </method>
            <javadoc line="343">
                {@inheritDoc}                
            </javadoc>
            <method name="ceil" type="SparseGradient" line="344"/>
            <javadoc line="348">
                {@inheritDoc}                
            </javadoc>
            <method name="floor" type="SparseGradient" line="349"/>
            <javadoc line="353">
                {@inheritDoc}                
            </javadoc>
            <method name="rint" type="SparseGradient" line="354"/>
            <javadoc line="358">
                {@inheritDoc}                
            </javadoc>
            <method name="round" type="long" line="359"/>
            <javadoc line="363">
                {@inheritDoc}                
            </javadoc>
            <method name="signum" type="SparseGradient" line="364"/>
            <javadoc line="368">
                {@inheritDoc}                
            </javadoc>
            <method name="copySign" type="SparseGradient" line="369">
                <params>
                    <param name="sign" type="SparseGradient"/>
                </params>
                <comment line="373">
                    Sign is currently OK                    
                </comment>
                <comment line="376">
                    flip sign                    
                </comment>
                <declaration name="m" type="long" line="370"/>
                <declaration name="s" type="long" line="371"/>
                <scope line="372"/>
            </method>
            <javadoc line="378">
                {@inheritDoc}                
            </javadoc>
            <method name="copySign" type="SparseGradient" line="379">
                <params>
                    <param name="sign" type="double"/>
                </params>
                <comment line="383">
                    Sign is currently OK                    
                </comment>
                <comment line="386">
                    flip sign                    
                </comment>
                <declaration name="m" type="long" line="380"/>
                <declaration name="s" type="long" line="381"/>
                <scope line="382"/>
            </method>
            <javadoc line="388">
                {@inheritDoc}                
            </javadoc>
            <method name="scalb" type="SparseGradient" line="389">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="out" type="SparseGradient" line="390"/>
                <scope line="391"/>
            </method>
            <javadoc line="397">
                {@inheritDoc}                
            </javadoc>
            <method name="hypot" type="SparseGradient" line="398">
                <params>
                    <param name="y" type="SparseGradient"/>
                </params>
                <comment line="409">
                    y is negligible with respect to x                    
                </comment>
                <comment line="412">
                    x is negligible with respect to y                    
                </comment>
                <comment line="416">
                    find an intermediate scale to avoid both overflow and underflow                    
                </comment>
                <comment line="419">
                    scale parameters without losing precision                    
                </comment>
                <comment line="423">
                    compute scaled hypotenuse                    
                </comment>
                <comment line="427">
                    remove scaling                    
                </comment>
                <scope line="399"/>
                <scope line="401"/>
                <scope line="403">
                    <declaration name="expX" type="int" line="405"/>
                    <declaration name="expY" type="int" line="406"/>
                    <scope line="407"/>
                    <scope line="410"/>
                    <scope line="413">
                        <declaration name="middleExp" type="int" line="416"/>
                        <declaration name="scaledX" type="SparseGradient" line="419"/>
                        <declaration name="scaledY" type="SparseGradient" line="420"/>
                        <declaration name="scaledH" type="SparseGradient" line="423"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="434">
                Returns the hypotenuse of a triangle with sides {@code x} and {@code y}- sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;br/&gt;
                  avoiding intermediate overflow or underflow.
                  &lt;ul&gt;
                  &lt;li&gt; If either argument is infinite, then the result is positive infinity.&lt;/li&gt;
                  &lt;li&gt; else, if either argument is NaN then the result is NaN.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    x a value                    
                </param>
                <param>
                    y a value                    
                </param>
                <return>
                    sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)                    
                </return>
            </javadoc>
            <method name="hypot" type="SparseGradient" line="448">
                <params>
                    <param name="x" type="SparseGradient"/>
                    <param name="y" type="SparseGradient"/>
                </params>
            </method>
            <javadoc line="452">
                {@inheritDoc}                
            </javadoc>
            <method name="reciprocal" type="SparseGradient" line="453"/>
            <javadoc line="457">
                {@inheritDoc}                
            </javadoc>
            <method name="sqrt" type="SparseGradient" line="458">
                <declaration name="sqrt" type="double" line="459"/>
            </method>
            <javadoc line="463">
                {@inheritDoc}                
            </javadoc>
            <method name="cbrt" type="SparseGradient" line="464">
                <declaration name="cbrt" type="double" line="465"/>
            </method>
            <javadoc line="469">
                {@inheritDoc}                
            </javadoc>
            <method name="rootN" type="SparseGradient" line="470">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="471"/>
                <scope line="473"/>
                <scope line="475">
                    <declaration name="root" type="double" line="476"/>
                </scope>
            </method>
            <javadoc line="481">
                {@inheritDoc}                
            </javadoc>
            <method name="pow" type="SparseGradient" line="482">
                <params>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="486">
                {@inheritDoc}                
            </javadoc>
            <method name="pow" type="SparseGradient" line="487">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="488"/>
                <scope line="490">
                    <declaration name="valueNm1" type="double" line="491"/>
                </scope>
            </method>
            <javadoc line="496">
                {@inheritDoc}                
            </javadoc>
            <method name="pow" type="SparseGradient" line="497">
                <params>
                    <param name="e" type="SparseGradient"/>
                </params>
            </method>
            <javadoc line="501">
                Compute a&lt;sup&gt;x&lt;/sup&gt; where a is a double and x a {@link SparseGradient}                
                <param>
                    a number to exponentiate                    
                </param>
                <param>
                    x power to apply                    
                </param>
                <return>
                    a&lt;sup&gt;x&lt;/sup&gt;                    
                </return>
            </javadoc>
            <method name="pow" type="SparseGradient" line="506">
                <params>
                    <param name="a" type="double"/>
                    <param name="x" type="SparseGradient"/>
                </params>
                <scope line="507">
                    <scope line="508"/>
                    <scope line="510"/>
                    <scope line="512"/>
                </scope>
                <scope line="515">
                    <declaration name="ax" type="double" line="516"/>
                </scope>
            </method>
            <javadoc line="521">
                {@inheritDoc}                
            </javadoc>
            <method name="exp" type="SparseGradient" line="522">
                <declaration name="e" type="double" line="523"/>
            </method>
            <javadoc line="527">
                {@inheritDoc}                
            </javadoc>
            <method name="expm1" type="SparseGradient" line="528"/>
            <javadoc line="532">
                {@inheritDoc}                
            </javadoc>
            <method name="log" type="SparseGradient" line="533"/>
            <javadoc line="537">
                Base 10 logarithm.                
                <return>
                    base 10 logarithm of the instance                    
                </return>
            </javadoc>
            <method name="log10" type="SparseGradient" line="540"/>
            <javadoc line="544">
                {@inheritDoc}                
            </javadoc>
            <method name="log1p" type="SparseGradient" line="545"/>
            <javadoc line="549">
                {@inheritDoc}                
            </javadoc>
            <method name="cos" type="SparseGradient" line="550"/>
            <javadoc line="554">
                {@inheritDoc}                
            </javadoc>
            <method name="sin" type="SparseGradient" line="555"/>
            <javadoc line="559">
                {@inheritDoc}                
            </javadoc>
            <method name="tan" type="SparseGradient" line="560">
                <declaration name="t" type="double" line="561"/>
            </method>
            <javadoc line="565">
                {@inheritDoc}                
            </javadoc>
            <method name="acos" type="SparseGradient" line="566"/>
            <javadoc line="570">
                {@inheritDoc}                
            </javadoc>
            <method name="asin" type="SparseGradient" line="571"/>
            <javadoc line="575">
                {@inheritDoc}                
            </javadoc>
            <method name="atan" type="SparseGradient" line="576"/>
            <javadoc line="580">
                {@inheritDoc}                
            </javadoc>
            <method name="atan2" type="SparseGradient" line="581">
                <params>
                    <param name="x" type="SparseGradient"/>
                </params>
                <comment line="584">
                    compute r = sqrt(x^2+y^2)                    
                </comment>
                <comment line="590">
                    compute atan2(y, x) = 2 atan(y / (r + x))                    
                </comment>
                <comment line="595">
                    compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))                    
                </comment>
                <comment line="601">
                    fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly                    
                </comment>
                <declaration name="r" type="SparseGradient" line="584"/>
                <declaration name="a" type="SparseGradient" line="586"/>
                <scope line="587"/>
                <scope line="592">
                    <declaration name="tmp" type="SparseGradient" line="595"/>
                </scope>
            </method>
            <javadoc line="607">
                Two arguments arc tangent operation.                
                <param>
                    y first argument of the arc tangent                    
                </param>
                <param>
                    x second argument of the arc tangent                    
                </param>
                <return>
                    atan2(y, x)                    
                </return>
            </javadoc>
            <method name="atan2" type="SparseGradient" line="612">
                <params>
                    <param name="y" type="SparseGradient"/>
                    <param name="x" type="SparseGradient"/>
                </params>
            </method>
            <javadoc line="616">
                {@inheritDoc}                
            </javadoc>
            <method name="cosh" type="SparseGradient" line="617"/>
            <javadoc line="621">
                {@inheritDoc}                
            </javadoc>
            <method name="sinh" type="SparseGradient" line="622"/>
            <javadoc line="626">
                {@inheritDoc}                
            </javadoc>
            <method name="tanh" type="SparseGradient" line="627">
                <declaration name="t" type="double" line="628"/>
            </method>
            <javadoc line="632">
                {@inheritDoc}                
            </javadoc>
            <method name="acosh" type="SparseGradient" line="633"/>
            <javadoc line="637">
                {@inheritDoc}                
            </javadoc>
            <method name="asinh" type="SparseGradient" line="638"/>
            <javadoc line="642">
                {@inheritDoc}                
            </javadoc>
            <method name="atanh" type="SparseGradient" line="643"/>
            <javadoc line="647">
                Convert radians to degrees, with error of less than 0.5 ULP                
                <return>
                    instance converted into degrees                    
                </return>
            </javadoc>
            <method name="toDegrees" type="SparseGradient" line="650"/>
            <javadoc line="654">
                Convert degrees to radians, with error of less than 0.5 ULP                
                <return>
                    instance converted into radians                    
                </return>
            </javadoc>
            <method name="toRadians" type="SparseGradient" line="657"/>
            <javadoc line="661">
                Evaluate Taylor expansion of a sparse gradient.                
                <param>
                    delta parameters offsets (&amp;Delta;x, &amp;Delta;y, ...)                    
                </param>
                <return>
                    value of the Taylor expansion at x + &amp;Delta;x, y + &amp;Delta;y, ...                    
                </return>
            </javadoc>
            <method name="taylor" type="double" line="665">
                <params>
                    <param name="delta" type="double"/>
                </params>
                <declaration name="y" type="double" line="666"/>
                <scope line="667"/>
            </method>
            <javadoc line="673">
                Compute composition of the instance by a univariate function.                
                <param>
                    f0 value of the function at (i.e. f({@link #getValue()}))                    
                </param>
                <param>
                    f1 first derivative of the function at
                      the current point (i.e. f&apos;({@link #getValue()}))                    
                </param>
                <return>
                    f(this)                    
                </return>
            </javadoc>
            <method name="compose" type="SparseGradient" line="679">
                <params>
                    <param name="f0" type="double"/>
                    <param name="f1" type="double"/>
                </params>
            </method>
            <javadoc line="683">
                {@inheritDoc}                
            </javadoc>
            <method name="linearCombination" type="SparseGradient" line="686">
                <params>
                    <param name="a" type="SparseGradient[]"/>
                    <param name="b" type="SparseGradient[]"/>
                </params>
                <comment line="689">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="695">
                    recompute an accurate value, taking care of cancellations                    
                </comment>
                <declaration name="out" type="SparseGradient" line="689"/>
                <scope line="690"/>
                <declaration name="aDouble" type="double[]" line="695"/>
                <scope line="696"/>
                <declaration name="bDouble" type="double[]" line="699"/>
                <scope line="700"/>
            </method>
            <javadoc line="709">
                {@inheritDoc}                
            </javadoc>
            <method name="linearCombination" type="SparseGradient" line="710">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="b" type="SparseGradient[]"/>
                </params>
                <comment line="713">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="719">
                    recompute an accurate value, taking care of cancellations                    
                </comment>
                <declaration name="out" type="SparseGradient" line="713"/>
                <scope line="714"/>
                <declaration name="bDouble" type="double[]" line="719"/>
                <scope line="720"/>
            </method>
            <javadoc line="729">
                {@inheritDoc}                
            </javadoc>
            <method name="linearCombination" type="SparseGradient" line="731">
                <params>
                    <param name="a1" type="SparseGradient"/>
                    <param name="b1" type="SparseGradient"/>
                    <param name="a2" type="SparseGradient"/>
                    <param name="b2" type="SparseGradient"/>
                </params>
                <comment line="734">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="737">
                    recompute an accurate value, taking care of cancellations                    
                </comment>
                <declaration name="out" type="SparseGradient" line="734"/>
            </method>
            <javadoc line="743">
                {@inheritDoc}                
            </javadoc>
            <method name="linearCombination" type="SparseGradient" line="745">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="SparseGradient"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="SparseGradient"/>
                </params>
                <comment line="748">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="751">
                    recompute an accurate value, taking care of cancellations                    
                </comment>
                <declaration name="out" type="SparseGradient" line="748"/>
            </method>
            <javadoc line="757">
                {@inheritDoc}                
            </javadoc>
            <method name="linearCombination" type="SparseGradient" line="760">
                <params>
                    <param name="a1" type="SparseGradient"/>
                    <param name="b1" type="SparseGradient"/>
                    <param name="a2" type="SparseGradient"/>
                    <param name="b2" type="SparseGradient"/>
                    <param name="a3" type="SparseGradient"/>
                    <param name="b3" type="SparseGradient"/>
                </params>
                <comment line="763">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="766">
                    recompute an accurate value, taking care of cancellations                    
                </comment>
                <declaration name="out" type="SparseGradient" line="763"/>
            </method>
            <javadoc line="774">
                {@inheritDoc}                
            </javadoc>
            <method name="linearCombination" type="SparseGradient" line="777">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="SparseGradient"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="SparseGradient"/>
                    <param name="a3" type="double"/>
                    <param name="b3" type="SparseGradient"/>
                </params>
                <comment line="780">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="783">
                    recompute an accurate value, taking care of cancellations                    
                </comment>
                <declaration name="out" type="SparseGradient" line="780"/>
            </method>
            <javadoc line="791">
                {@inheritDoc}                
            </javadoc>
            <method name="linearCombination" type="SparseGradient" line="795">
                <params>
                    <param name="a1" type="SparseGradient"/>
                    <param name="b1" type="SparseGradient"/>
                    <param name="a2" type="SparseGradient"/>
                    <param name="b2" type="SparseGradient"/>
                    <param name="a3" type="SparseGradient"/>
                    <param name="b3" type="SparseGradient"/>
                    <param name="a4" type="SparseGradient"/>
                    <param name="b4" type="SparseGradient"/>
                </params>
                <comment line="798">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="801">
                    recompute an accurate value, taking care of cancellations                    
                </comment>
                <declaration name="out" type="SparseGradient" line="798"/>
            </method>
            <javadoc line="810">
                {@inheritDoc}                
            </javadoc>
            <method name="linearCombination" type="SparseGradient" line="814">
                <params>
                    <param name="a1" type="double"/>
                    <param name="b1" type="SparseGradient"/>
                    <param name="a2" type="double"/>
                    <param name="b2" type="SparseGradient"/>
                    <param name="a3" type="double"/>
                    <param name="b3" type="SparseGradient"/>
                    <param name="a4" type="double"/>
                    <param name="b4" type="SparseGradient"/>
                </params>
                <comment line="817">
                    compute a simple value, with all partial derivatives                    
                </comment>
                <comment line="820">
                    recompute an accurate value, taking care of cancellations                    
                </comment>
                <declaration name="out" type="SparseGradient" line="817"/>
            </method>
            <javadoc line="829">
                Test for the equality of two sparse gradients.
                  &lt;p&gt;
                  Sparse gradients are considered equal if they have the same value
                  and the same derivatives.
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two sparse gradients are equal                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="839">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="841"/>
                <scope line="845">
                    <declaration name="rhs" type="SparseGradient" line="846"/>
                    <scope line="847"/>
                    <scope line="850"/>
                    <scope line="853">
                        <scope line="854"/>
                        <scope line="857"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="868">
                Get a hashCode for the derivative structure.                
                <return>
                    a hash code value for this object                    
                </return>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="874"/>
        </class>
    </source>