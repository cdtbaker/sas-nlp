<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="HypergeometricDistribution" line="28">
            <extends class="AbstractIntegerDistribution"/>
            <javadoc line="28">
                Implementation of the hypergeometric distribution.                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Hypergeometric_distribution">Hypergeometric distribution (Wikipedia)</a>                    
                </see>
                <see>
                    <a href="http://mathworld.wolfram.com/HypergeometricDistribution.html">Hypergeometric distribution (MathWorld)</a>                    
                </see>
                <version>
                    $Id: HypergeometricDistribution.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="36"/>
            <javadoc line="36">
                Serializable version identifier.                
            </javadoc>
            <declaration name="numberOfSuccesses" type="int" line="38"/>
            <javadoc line="38">
                The number of successes in the population.                
            </javadoc>
            <declaration name="populationSize" type="int" line="40"/>
            <javadoc line="40">
                The population size.                
            </javadoc>
            <declaration name="sampleSize" type="int" line="42"/>
            <javadoc line="42">
                The sample size.                
            </javadoc>
            <declaration name="numericalVariance" type="double" line="44"/>
            <javadoc line="44">
                Cached numerical variance                
            </javadoc>
            <declaration name="numericalVarianceIsCalculated" type="boolean" line="46"/>
            <javadoc line="46">
                Whether or not the numerical variance has been calculated                
            </javadoc>
            <javadoc line="49">
                Construct a new hypergeometric distribution with the specified population
                  size, number of successes in the population, and sample size.                
                <param>
                    populationSize Population size.                    
                </param>
                <param>
                    numberOfSuccesses Number of successes in the population.                    
                </param>
                <param>
                    sampleSize Sample size.                    
                </param>
                <throws>
                    NotPositiveException if {@code numberOfSuccesses < 0}.                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code populationSize <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
                      or {@code sampleSize > populationSize}.                    
                </throws>
            </javadoc>
            <method name="HypergeometricDistribution" type="constructor" line="62">
                <params>
                    <param name="populationSize" type="int"/>
                    <param name="numberOfSuccesses" type="int"/>
                    <param name="sampleSize" type="int"/>
                </params>
            </method>
            <javadoc line="66">
                Creates a new hypergeometric distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    populationSize Population size.                    
                </param>
                <param>
                    numberOfSuccesses Number of successes in the population.                    
                </param>
                <param>
                    sampleSize Sample size.                    
                </param>
                <throws>
                    NotPositiveException if {@code numberOfSuccesses < 0}.                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code populationSize <= 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
                      or {@code sampleSize > populationSize}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="HypergeometricDistribution" type="constructor" line="83">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="populationSize" type="int"/>
                    <param name="numberOfSuccesses" type="int"/>
                    <param name="sampleSize" type="int"/>
                </params>
                <scope line="86"/>
                <scope line="90"/>
                <scope line="94"/>
                <scope line="99"/>
                <scope line="103"/>
            </method>
            <javadoc line="113">
                {@inheritDoc}                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="114">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="ret" type="double" line="115"/>
                <declaration name="domain" type="int[]" line="117"/>
                <scope line="118"/>
                <scope line="120"/>
                <scope line="122"/>
            </method>
            <javadoc line="129">
                Return the domain for the given hypergeometric distribution parameters.                
                <param>
                    n Population size.                    
                </param>
                <param>
                    m Number of successes in the population.                    
                </param>
                <param>
                    k Sample size.                    
                </param>
                <return>
                    a two element array containing the lower and upper bounds of the
                      hypergeometric distribution.                    
                </return>
            </javadoc>
            <method name="getDomain" type="int[]" line="138">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="142">
                Return the lowest domain value for the given hypergeometric distribution
                  parameters.                
                <param>
                    n Population size.                    
                </param>
                <param>
                    m Number of successes in the population.                    
                </param>
                <param>
                    k Sample size.                    
                </param>
                <return>
                    the lowest domain value of the hypergeometric distribution.                    
                </return>
            </javadoc>
            <method name="getLowerDomain" type="int" line="151">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="155">
                Access the number of successes.                
                <return>
                    the number of successes.                    
                </return>
            </javadoc>
            <method name="getNumberOfSuccesses" type="int" line="160"/>
            <javadoc line="164">
                Access the population size.                
                <return>
                    the population size.                    
                </return>
            </javadoc>
            <method name="getPopulationSize" type="int" line="169"/>
            <javadoc line="173">
                Access the sample size.                
                <return>
                    the sample size.                    
                </return>
            </javadoc>
            <method name="getSampleSize" type="int" line="178"/>
            <javadoc line="182">
                Return the highest domain value for the given hypergeometric distribution
                  parameters.                
                <param>
                    m Number of successes in the population.                    
                </param>
                <param>
                    k Sample size.                    
                </param>
                <return>
                    the highest domain value of the hypergeometric distribution.                    
                </return>
            </javadoc>
            <method name="getUpperDomain" type="int" line="190">
                <params>
                    <param name="m" type="int"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="194">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="195">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="ret" type="double" line="196"/>
                <declaration name="domain" type="int[]" line="198"/>
                <scope line="199"/>
                <scope line="201">
                    <declaration name="p" type="double" line="202"/>
                    <declaration name="q" type="double" line="203"/>
                    <declaration name="p1" type="double" line="204"/>
                    <declaration name="p2" type="double" line="206"/>
                    <declaration name="p3" type="double" line="209"/>
                </scope>
            </method>
            <javadoc line="217">
                For this distribution, {@code X}, this method returns {@code P(X &gt;= x)}.                
                <param>
                    x Value at which the CDF is evaluated.                    
                </param>
                <return>
                    the upper tail CDF for this distribution.                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="upperCumulativeProbability" type="double" line="224">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="ret" type="double" line="225"/>
                <declaration name="domain" type="int[]" line="227"/>
                <scope line="228"/>
                <scope line="230"/>
                <scope line="232"/>
            </method>
            <javadoc line="239">
                For this distribution, {@code X}, this method returns{@code P(x0 &lt;= X &lt;= x1)}.
                  This probability is computed by summing the point probabilities for the
                  values {@code x0, x0 + 1, x0 + 2, ..., x1}, in the order directed by{@code dx}.                
                <param>
                    x0 Inclusive lower bound.                    
                </param>
                <param>
                    x1 Inclusive upper bound.                    
                </param>
                <param>
                    dx Direction of summation (1 indicates summing from x0 to x1, and
                      0 indicates summing from x1 to x0).                    
                </param>
                <return>
                    {@code P(x0 <= X <= x1)}.                    
                </return>
            </javadoc>
            <method name="innerCumulativeProbability" type="double" line="252">
                <params>
                    <param name="x0" type="int"/>
                    <param name="x1" type="int"/>
                    <param name="dx" type="int"/>
                </params>
                <declaration name="ret" type="double" line="253"/>
                <scope line="254"/>
            </method>
            <javadoc line="261">
                {@inheritDoc}For population size {@code N}, number of successes {@code m}, and sample
                  size {@code n}, the mean is {@code n  m / N}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="267"/>
            <javadoc line="271">
                {@inheritDoc}For population size {@code N}, number of successes {@code m}, and sample
                  size {@code n}, the variance is{@code [n  m  (N - n)  (N - m)] / [N^2  (N - 1)]}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="278">
                <scope line="279"/>
            </method>
            <javadoc line="286">
                Used by {@link #getNumericalVariance()}.                
                <return>
                    the variance of this distribution                    
                </return>
            </javadoc>
            <method name="calculateNumericalVariance" type="double" line="291">
                <declaration name="N" type="double" line="292"/>
                <declaration name="m" type="double" line="293"/>
                <declaration name="n" type="double" line="294"/>
            </method>
            <javadoc line="298">
                {@inheritDoc}For population size {@code N}, number of successes {@code m}, and sample
                  size {@code n}, the lower bound of the support is{@code max(0, n + m - N)}.                
                <return>
                    lower bound of the support                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="int" line="307"/>
            <javadoc line="312">
                {@inheritDoc}For number of successes {@code m} and sample size {@code n}, the upper
                  bound of the support is {@code min(m, n)}.                
                <return>
                    upper bound of the support                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="int" line="320"/>
            <javadoc line="324">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="331"/>
        </class>
    </source>