<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.special">
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="GammaTest" line="8">
            <javadoc line="8">
                @version $Id: GammaTest.java 1414531 2012-11-28 05:39:39Z celestin $                
            </javadoc>
            <method name="testRegularizedGamma" type="void" line="12">
                <params>
                    <param name="expected" type="double"/>
                    <param name="a" type="double"/>
                    <param name="x" type="double"/>
                </params>
                <declaration name="actualP" type="double" line="13"/>
                <declaration name="actualQ" type="double" line="14"/>
            </method>
            <method name="testLogGamma" type="void" line="18">
                <params>
                    <param name="expected" type="double"/>
                    <param name="x" type="double"/>
                </params>
                <declaration name="actual" type="double" line="19"/>
            </method>
            <method name="testRegularizedGammaNanPositive" type="void" line="22"/>
            <method name="testRegularizedGammaPositiveNan" type="void" line="25"/>
            <method name="testRegularizedGammaNegativePositive" type="void" line="28"/>
            <method name="testRegularizedGammaPositiveNegative" type="void" line="31"/>
            <method name="testRegularizedGammaZeroPositive" type="void" line="34"/>
            <method name="testRegularizedGammaPositiveZero" type="void" line="37"/>
            <method name="testRegularizedGammaPositivePositive" type="void" line="40"/>
            <method name="testLogGammaNan" type="void" line="43"/>
            <method name="testLogGammaNegative" type="void" line="46"/>
            <method name="testLogGammaZero" type="void" line="49"/>
            <method name="testLogGammaPositive" type="void" line="52"/>
            <method name="testDigammaLargeArgs" type="void" line="55">
                <declaration name="eps" type="double" line="56"/>
            </method>
            <method name="testDigammaSmallArgs" type="void" line="69">
                <declaration name="expected" type="double[]" line="70"/>
                <scope line="71"/>
            </method>
            <method name="testTrigamma" type="void" line="75">
                <declaration name="eps" type="double" line="76"/>
                <declaration name="data" type="double[]" line="77"/>
                <scope line="78"/>
            </method>
            <declaration name="LOG_GAMMA_REF" type="double[][]" line="82"/>
            <javadoc line="82">
                Reference data for the {@link Gamma#logGamma(double)} function. This data
                  was generated with the following &lt;a
                  href=&quot;http://maxima.sourceforge.net/&quot;&gt;Maxima&lt;/a&gt; script.
                  &lt;pre&gt;
                  kill(all);
                  fpprec : 64;
                  gamln(x) := log(gamma(x));
                  x : append(makelist(bfloat(i / 8), i, 1, 80),
                  [0.8b0, 1b2, 1b3, 1b4, 1b5, 1b6, 1b7, 1b8, 1b9, 1b10]);
                  for i : 1 while i &lt;= length(x) do
                  print(&quot;{&quot;, float(x[i]), &quot;,&quot;, float(gamln(x[i])), &quot;},&quot;);
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testLogGamma" type="void" line="97">
                <declaration name="ulps" type="int" line="98"/>
                <scope line="99">
                    <declaration name="data" type="double[]" line="100"/>
                    <declaration name="x" type="double" line="101"/>
                    <declaration name="expected" type="double" line="102"/>
                    <declaration name="actual" type="double" line="103"/>
                    <declaration name="tol" type="double" line="104"/>
                    <scope line="105"/>
                    <scope line="108"/>
                </scope>
            </method>
            <method name="testLogGammaPrecondition1" type="void" line="114"/>
            <method name="testLogGammaPrecondition2" type="void" line="117"/>
            <declaration name="INV_GAMMA1P_M1_REF" type="double[][]" line="120"/>
            <javadoc line="120">
                &lt;p&gt;
                  Reference values for the {@link Gamma#invGamma1pm1(double)} method.
                  These values were generated with the following &lt;a
                  href=&quot;http://maxima.sourceforge.net/&quot;&gt;Maxima&lt;/a&gt; script
                  &lt;/p&gt;
                  &lt;pre&gt;
                  kill(all);
                  fpprec : 64;
                  gam1(x) := 1 / gamma(1 + x) - 1;
                  x : makelist(bfloat(i / 8), i, -4, 12);
                  for i : 1 while i &lt;= length(x) do print(&quot;{&quot;,
                  float(x[i]),
                  &quot;,&quot;,
                  float(gam1(x[i])),
                  &quot;},&quot;);
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testInvGamma1pm1" type="void" line="139">
                <declaration name="ulps" type="int" line="140"/>
                <scope line="141">
                    <declaration name="ref" type="double[]" line="142"/>
                    <declaration name="x" type="double" line="143"/>
                    <declaration name="expected" type="double" line="144"/>
                    <declaration name="actual" type="double" line="145"/>
                    <declaration name="tol" type="double" line="146"/>
                </scope>
            </method>
            <method name="testInvGamma1pm1Precondition1" type="void" line="150"/>
            <method name="testInvGamma1pm1Precondition2" type="void" line="153"/>
            <declaration name="LOG_GAMMA1P_REF" type="double[][]" line="156"/>
            <method name="testLogGamma1p" type="void" line="157">
                <declaration name="ulps" type="int" line="158"/>
                <scope line="159">
                    <declaration name="ref" type="double[]" line="160"/>
                    <declaration name="x" type="double" line="161"/>
                    <declaration name="expected" type="double" line="162"/>
                    <declaration name="actual" type="double" line="163"/>
                    <declaration name="tol" type="double" line="164"/>
                </scope>
            </method>
            <method name="testLogGamma1pPrecondition1" type="void" line="168"/>
            <method name="testLogGamma1pPrecondition2" type="void" line="171"/>
            <declaration name="GAMMA_REF" type="double[][]" line="174"/>
            <javadoc line="174">
                Reference data for the {@link Gamma#gamma(double)} function. This
                  data was generated with the following &lt;a
                  href=&quot;http://maxima.sourceforge.net/&quot;&gt;Maxima&lt;/a&gt; script.
                  &lt;pre&gt;
                  kill(all);
                  fpprec : 64;
                  EPSILON : 10(-fpprec + 1);
                  isInteger(x) := abs(x - floor(x)) &lt;= EPSILON  abs(x);
                  x : makelist(bfloat(i / 8), i, -160, 160);
                  x : append(x, makelist(bfloat(i / 2), i, 41, 200));
                  for i : 1 while i &lt;= length(x) do if not(isInteger(x[i])) then
                  print(&quot;{&quot;, float(x[i]), &quot;,&quot;, float(gamma(x[i])), &quot;},&quot;);
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testGamma" type="void" line="190">
                <scope line="191">
                    <declaration name="ref" type="double[]" line="192"/>
                    <declaration name="x" type="double" line="193"/>
                    <declaration name="expected" type="double" line="194"/>
                    <declaration name="actual" type="double" line="195"/>
                    <declaration name="absX" type="double" line="196"/>
                    <declaration name="ulps" type="int" line="197"/>
                    <scope line="198"/>
                    <scope line="201"/>
                    <scope line="204"/>
                    <scope line="207"/>
                    <scope line="210"/>
                    <declaration name="tol" type="double" line="213"/>
                </scope>
            </method>
            <method name="testGammaNegativeInteger" type="void" line="217">
                <scope line="218"/>
            </method>
            <method name="checkRelativeError" type="void" line="222">
                <params>
                    <param name="msg" type="String"/>
                    <param name="expected" type="double"/>
                    <param name="actual" type="double"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
        </class>
    </source>