<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.general">
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="org.apache.commons.math3.optimization.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.stat.descriptive.StatisticalSummary"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <class name="AbstractLeastSquaresOptimizerTestValidation" line="27">
            <javadoc line="27">
                This class demonstrates the main functionality of the{@link AbstractLeastSquaresOptimizer}, common to the
                  optimizer implementations in package{@link org.apache.commons.math3.optimization.general}.
                  &lt;br/&gt;
                  Not enabled by default, as the class name does not end with &quot;Test&quot;.
                  &lt;br/&gt;
                  Invoke by running
                  &lt;pre&gt;&lt;code&gt;
                  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation
                  &lt;/code&gt;&lt;/pre&gt;
                  or by running
                  &lt;pre&gt;&lt;code&gt;
                  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation -DargLine=&quot;-DmcRuns=1234 -server&quot;
                  &lt;/code&gt;&lt;/pre&gt;                
            </javadoc>
            <declaration name="MONTE_CARLO_RUNS" type="int" line="45"/>
            <javadoc line="48">
                Using a Monte-Carlo procedure, this test checks the error estimations
                  as provided by the square-root of the diagonal elements of the
                  covariance matrix.
                  &lt;br/&gt;
                  The test generates sets of observations, each sampled from
                  a Gaussian distribution.
                  &lt;br/&gt;
                  The optimization problem solved is defined in class{@link StraightLineProblem}.
                  &lt;br/&gt;
                  The output (on stdout) will be a table summarizing the distribution
                  of parameters generated by the Monte-Carlo process and by the direct
                  estimation provided by the diagonal elements of the covariance matrix.                
            </javadoc>
            <method name="testParametersErrorMonteCarloObservations" type="void" line="64">
                <comment line="66">
                    Error on the observations.                    
                </comment>
                <comment line="69">
                    True values of the parameters.                    
                </comment>
                <comment line="73">
                    Samples generator.                    
                </comment>
                <comment line="80">
                    Number of observations.                    
                </comment>
                <comment line="81">
                    XXX Should be a command-line option.                    
                </comment>
                <comment line="82">
                    number of parameters.                    
                </comment>
                <comment line="85">
                    Parameters found for each of Monte-Carlo run.                    
                </comment>
                <comment line="87">
                    Sigma estimations (square-root of the diagonal elements of the
                     covariance matrix), for each Monte-Carlo run.                    
                </comment>
                <comment line="91">
                    Initialize statistics accumulators.                    
                </comment>
                <comment line="97">
                    Dummy optimizer (to compute the covariance matrix).                    
                </comment>
                <comment line="101">
                    Monte-Carlo (generates many sets of observations).                    
                </comment>
                <comment line="105">
                    Observations.                    
                </comment>
                <comment line="114">
                    Direct solution (using simple regression).                    
                </comment>
                <comment line="117">
                    Estimation of the standard deviation (diagonal elements of the
                     covariance matrix).                    
                </comment>
                <comment line="123">
                    Accumulate statistics.                    
                </comment>
                <comment line="129">
                    Next Monte-Carlo.                    
                </comment>
                <comment line="133">
                    Print statistics.                    
                </comment>
                <comment line="153">
                    Check the error estimation.                    
                </comment>
                <declaration name="yError" type="double" line="66"/>
                <declaration name="slope" type="double" line="69"/>
                <declaration name="offset" type="double" line="70"/>
                <declaration name="lineGenerator" type="RandomStraightLinePointGenerator" line="73"/>
                <declaration name="numObs" type="int" line="80"/>
                <declaration name="numParams" type="int" line="82"/>
                <declaration name="paramsFoundByDirectSolution" type="SummaryStatistics[]" line="85"/>
                <declaration name="sigmaEstimate" type="SummaryStatistics[]" line="88"/>
                <scope line="91"/>
                <declaration name="optim" type="AbstractLeastSquaresOptimizer" line="97"/>
                <declaration name="init" type="double[]" line="98"/>
                <declaration name="mcRepeat" type="int" line="101"/>
                <declaration name="mcCount" type="int" line="102"/>
                <scope line="103">
                    <declaration name="obs" type="Point2D.Double[]" line="105"/>
                    <declaration name="problem" type="StraightLineProblem" line="107"/>
                    <scope line="108">
                        <declaration name="p" type="Point2D.Double" line="109"/>
                    </scope>
                    <declaration name="regress" type="double[]" line="114"/>
                    <declaration name="optimum" type="PointVectorValuePair" line="118"/>
                    <declaration name="sigma" type="double[]" line="120"/>
                    <scope line="123"/>
                </scope>
                <declaration name="line" type="String" line="133"/>
                <scope line="135">
                    <declaration name="s" type="StatisticalSummary" line="139"/>
                </scope>
                <scope line="153"/>
            </method>
            <javadoc line="160">
                In this test, the set of observations is fixed.
                  Using a Monte-Carlo procedure, it generates sets of parameters,
                  and determine the parameter change that will result in the
                  normalized chi-square becoming larger by one than the value from
                  the best fit solution.
                  &lt;br/&gt;
                  The optimization problem solved is defined in class{@link StraightLineProblem}.
                  &lt;br/&gt;
                  The output (on stdout) will be a list of lines containing:
                  &lt;ul&gt;
                  &lt;li&gt;slope of the straight line,&lt;/li&gt;
                  &lt;li&gt;intercept of the straight line,&lt;/li&gt;
                  &lt;li&gt;chi-square of the solution defined by the above two values.&lt;/li&gt;
                  &lt;/ul&gt;
                  The output is separated into two blocks (with a blank line between
                  them); the first block will contain all parameter sets for which{@code chi2 &lt; chi2_b + 1}and the second block, all sets for which{@code chi2 &gt;= chi2_b + 1}where {@code chi2_b} is the lowest chi-square (corresponding to the
                  best solution).                
            </javadoc>
            <method name="testParametersErrorMonteCarloParameters" type="void" line="185">
                <comment line="187">
                    Error on the observations.                    
                </comment>
                <comment line="190">
                    True values of the parameters.                    
                </comment>
                <comment line="194">
                    Samples generator.                    
                </comment>
                <comment line="201">
                    Number of observations.                    
                </comment>
                <comment line="203">
                    number of parameters.                    
                </comment>
                <comment line="206">
                    Create a single set of observations.                    
                </comment>
                <comment line="215">
                    Direct solution (using simple regression).                    
                </comment>
                <comment line="218">
                    Dummy optimizer (to compute the chi-square).                    
                </comment>
                <comment line="221">
                    Get chi-square of the best parameters set for the given set of
                     observations.                    
                </comment>
                <comment line="226">
                    Monte-Carlo (generates a grid of parameters).                    
                </comment>
                <comment line="230">
                    Parameters found for each of Monte-Carlo run.
                     Index 0 = slope
                     Index 1 = offset
                     Index 2 = normalized chi2                    
                </comment>
                <comment line="252">
                    Output (for use with &quot;gnuplot&quot;).                    
                </comment>
                <comment line="254">
                    Some info.                    
                </comment>
                <comment line="256">
                    For plotting separately sets of parameters that have a large chi2.                    
                </comment>
                <comment line="262">
                    Point with smallest chi-square.                    
                </comment>
                <comment line="264">
                    Empty line.                    
                </comment>
                <comment line="266">
                    Points within the confidence interval.                    
                </comment>
                <comment line="272">
                    Empty line.                    
                </comment>
                <comment line="274">
                    Points outside the confidence interval.                    
                </comment>
                <comment line="281">
                    Empty line.                    
                </comment>
                <declaration name="yError" type="double" line="187"/>
                <declaration name="slope" type="double" line="190"/>
                <declaration name="offset" type="double" line="191"/>
                <declaration name="lineGenerator" type="RandomStraightLinePointGenerator" line="194"/>
                <declaration name="numObs" type="int" line="201"/>
                <declaration name="numParams" type="int" line="203"/>
                <declaration name="obs" type="Point2D.Double[]" line="206"/>
                <declaration name="problem" type="StraightLineProblem" line="208"/>
                <scope line="209">
                    <declaration name="p" type="Point2D.Double" line="210"/>
                </scope>
                <declaration name="regress" type="double[]" line="215"/>
                <declaration name="optim" type="AbstractLeastSquaresOptimizer" line="218"/>
                <declaration name="init" type="double[]" line="219"/>
                <declaration name="bestChi2N" type="double" line="222"/>
                <declaration name="sigma" type="double[]" line="223"/>
                <declaration name="mcRepeat" type="int" line="226"/>
                <declaration name="gridSize" type="int" line="227"/>
                <declaration name="paramsAndChi2" type="List&lt;double[]&gt;" line="233"/>
                <declaration name="slopeRange" type="double" line="235"/>
                <declaration name="offsetRange" type="double" line="236"/>
                <declaration name="minSlope" type="double" line="237"/>
                <declaration name="minOffset" type="double" line="238"/>
                <declaration name="deltaSlope" type="double" line="239"/>
                <declaration name="deltaOffset" type="double" line="240"/>
                <scope line="241">
                    <declaration name="s" type="double" line="242"/>
                    <scope line="243">
                        <declaration name="o" type="double" line="244"/>
                        <declaration name="chi2N" type="double" line="245"/>
                    </scope>
                </scope>
                <declaration name="chi2NPlusOne" type="double" line="256"/>
                <declaration name="numLarger" type="int" line="257"/>
                <declaration name="lineFmt" type="String" line="259"/>
                <scope line="266">
                    <scope line="267"/>
                </scope>
                <scope line="274">
                    <scope line="275"/>
                </scope>
            </method>
            <javadoc line="286">
                @return the normalized chi-square.                
            </javadoc>
            <method name="getChi2N" type="double" line="291">
                <params>
                    <param name="optim" type="AbstractLeastSquaresOptimizer"/>
                    <param name="problem" type="StraightLineProblem"/>
                    <param name="params" type="double[]"/>
                </params>
                <declaration name="t" type="double[]" line="292"/>
                <declaration name="w" type="double[]" line="293"/>
            </method>
        </class>
        <class name="DummyOptimizer" line="301">
            <extends class="AbstractLeastSquaresOptimizer"/>
            <javadoc line="301">
                A dummy optimizer.
                  Used for computing the covariance matrix.                
            </javadoc>
            <method name="DummyOptimizer" type="constructor" line="306"/>
            <javadoc line="310">
                This method does nothing and returns a dummy value.                
            </javadoc>
            <method name="doOptimize" type="PointVectorValuePair" line="314">
                <declaration name="params" type="double[]" line="315"/>
                <declaration name="res" type="double[]" line="316"/>
            </method>
        </class>
    </source>