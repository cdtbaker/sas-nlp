<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.text.DecimalFormat"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.Retry"/>
        <import package="org.apache.commons.math3.RetryRunner"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.distribution.BetaDistribution"/>
        <import package="org.apache.commons.math3.distribution.BinomialDistribution"/>
        <import package="org.apache.commons.math3.distribution.BinomialDistributionTest"/>
        <import package="org.apache.commons.math3.distribution.CauchyDistribution"/>
        <import package="org.apache.commons.math3.distribution.ChiSquaredDistribution"/>
        <import package="org.apache.commons.math3.distribution.ExponentialDistribution"/>
        <import package="org.apache.commons.math3.distribution.FDistribution"/>
        <import package="org.apache.commons.math3.distribution.GammaDistribution"/>
        <import package="org.apache.commons.math3.distribution.HypergeometricDistribution"/>
        <import package="org.apache.commons.math3.distribution.HypergeometricDistributionTest"/>
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.distribution.PascalDistribution"/>
        <import package="org.apache.commons.math3.distribution.PascalDistributionTest"/>
        <import package="org.apache.commons.math3.distribution.PoissonDistribution"/>
        <import package="org.apache.commons.math3.distribution.TDistribution"/>
        <import package="org.apache.commons.math3.distribution.WeibullDistribution"/>
        <import package="org.apache.commons.math3.distribution.ZipfDistribution"/>
        <import package="org.apache.commons.math3.distribution.ZipfDistributionTest"/>
        <import package="org.apache.commons.math3.stat.Frequency"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.stat.inference.ChiSquareTest"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.runner.RunWith"/>
        <class name="RandomDataGeneratorTest" line="35">
            <javadoc line="35">
                Test cases for the RandomDataGenerator class.                
                <version>
                    $Id: RandomDataGeneratorTest.java 1457491 2013-03-17 17:15:31Z psteitz $                    
                </version>
            </javadoc>
            <method name="RandomDataGeneratorTest" type="constructor" line="40"/>
            <declaration name="smallSampleSize" type="long" line="44"/>
            <declaration name="expected" type="double[]" line="45"/>
            <declaration name="largeSampleSize" type="int" line="46"/>
            <declaration name="hex" type="String[]" line="47"/>
            <declaration name="randomData" type="RandomDataGenerator" line="48"/>
            <declaration name="testStatistic" type="ChiSquareTest" line="49"/>
            <method name="testNextIntExtremeValues" type="void" line="50">
                <declaration name="x" type="int" line="51"/>
                <declaration name="y" type="int" line="52"/>
            </method>
            <method name="testNextLongExtremeValues" type="void" line="55">
                <declaration name="x" type="long" line="56"/>
                <declaration name="y" type="long" line="57"/>
            </method>
            <method name="testNextUniformExtremeValues" type="void" line="60">
                <declaration name="x" type="double" line="61"/>
                <declaration name="y" type="double" line="62"/>
            </method>
            <method name="testNextIntIAE" type="void" line="69">
                <scope line="70"/>
                <scope line="74"/>
            </method>
            <method name="testNextIntNegativeToPositiveRange" type="void" line="77">
                <scope line="78"/>
            </method>
            <method name="testNextIntNegativeRange" type="void" line="83">
                <scope line="84"/>
            </method>
            <method name="testNextIntPositiveRange" type="void" line="90">
                <scope line="91"/>
            </method>
            <method name="checkNextIntUniform" type="void" line="98">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="freq" type="Frequency" line="99"/>
                <scope line="100">
                    <declaration name="value" type="int" line="101"/>
                </scope>
                <declaration name="len" type="int" line="105"/>
                <declaration name="observed" type="long[]" line="106"/>
                <scope line="107"/>
                <declaration name="expected" type="double[]" line="110"/>
                <scope line="111"/>
            </method>
            <method name="testNextIntWideRange" type="void" line="116">
                <declaration name="lower" type="int" line="117"/>
                <declaration name="upper" type="int" line="118"/>
                <declaration name="max" type="int" line="119"/>
                <declaration name="min" type="int" line="120"/>
                <scope line="121">
                    <declaration name="r" type="int" line="122"/>
                </scope>
                <declaration name="ratio" type="double" line="128"/>
            </method>
            <method name="testNextLongIAE" type="void" line="131">
                <scope line="132"/>
                <scope line="136"/>
            </method>
            <method name="testNextLongNegativeToPositiveRange" type="void" line="139">
                <scope line="140"/>
            </method>
            <method name="testNextLongNegativeRange" type="void" line="145">
                <scope line="146"/>
            </method>
            <method name="testNextLongPositiveRange" type="void" line="152">
                <scope line="153"/>
            </method>
            <method name="checkNextLongUniform" type="void" line="159">
                <params>
                    <param name="min" type="long"/>
                    <param name="max" type="long"/>
                </params>
                <declaration name="freq" type="Frequency" line="160"/>
                <scope line="161">
                    <declaration name="value" type="long" line="162"/>
                </scope>
                <declaration name="len" type="int" line="166"/>
                <declaration name="observed" type="long[]" line="167"/>
                <scope line="168"/>
                <declaration name="expected" type="double[]" line="171"/>
                <scope line="172"/>
            </method>
            <method name="testNextLongWideRange" type="void" line="177">
                <declaration name="lower" type="long" line="178"/>
                <declaration name="upper" type="long" line="179"/>
                <declaration name="max" type="long" line="180"/>
                <declaration name="min" type="long" line="181"/>
                <scope line="182">
                    <declaration name="r" type="long" line="183"/>
                </scope>
                <declaration name="ratio" type="double" line="189"/>
            </method>
            <method name="testNextSecureLongIAE" type="void" line="192">
                <scope line="193"/>
                <scope line="197"/>
            </method>
            <method name="testNextSecureLongNegativeToPositiveRange" type="void" line="200">
                <scope line="201"/>
            </method>
            <method name="testNextSecureLongNegativeRange" type="void" line="206">
                <scope line="207"/>
            </method>
            <method name="testNextSecureLongPositiveRange" type="void" line="212">
                <scope line="213"/>
            </method>
            <method name="checkNextSecureLongUniform" type="void" line="218">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="freq" type="Frequency" line="219"/>
                <scope line="220">
                    <declaration name="value" type="long" line="221"/>
                </scope>
                <declaration name="len" type="int" line="225"/>
                <declaration name="observed" type="long[]" line="226"/>
                <scope line="227"/>
                <declaration name="expected" type="double[]" line="230"/>
                <scope line="231"/>
            </method>
            <method name="testNextSecureIntIAE" type="void" line="236">
                <scope line="237"/>
                <scope line="241"/>
            </method>
            <method name="testNextSecureIntNegativeToPositiveRange" type="void" line="244">
                <scope line="245"/>
            </method>
            <method name="testNextSecureIntNegativeRange" type="void" line="250">
                <scope line="251"/>
            </method>
            <method name="testNextSecureIntPositiveRange" type="void" line="256">
                <scope line="257"/>
            </method>
            <method name="checkNextSecureIntUniform" type="void" line="262">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="freq" type="Frequency" line="263"/>
                <scope line="264">
                    <declaration name="value" type="int" line="265"/>
                </scope>
                <declaration name="len" type="int" line="269"/>
                <declaration name="observed" type="long[]" line="270"/>
                <scope line="271"/>
                <declaration name="expected" type="double[]" line="274"/>
                <scope line="275"/>
            </method>
            <javadoc line="280">
                Make sure that empirical distribution of random Poisson(4)&apos;s has P(X &lt;=
                  5) close to actual cumulative Poisson probability and that nextPoisson
                  fails when mean is non-positive.                
            </javadoc>
            <method name="testNextPoisson" type="void" line="285">
                <scope line="286"/>
                <scope line="290"/>
                <scope line="292"/>
                <scope line="296"/>
                <scope line="298"/>
                <scope line="302"/>
                <declaration name="mean" type="double" line="304"/>
                <declaration name="len" type="int" line="305"/>
                <declaration name="poissonDistribution" type="PoissonDistribution" line="306"/>
                <declaration name="f" type="Frequency" line="307"/>
                <scope line="309"/>
                <declaration name="observed" type="long[]" line="312"/>
                <scope line="313"/>
                <declaration name="expected" type="double[]" line="316"/>
                <scope line="317"/>
            </method>
            <method name="testNextPoissonConsistency" type="void" line="322">
                <scope line="323"/>
                <scope line="326"/>
                <scope line="329"/>
            </method>
            <javadoc line="333">
                Verifies that nextPoisson(mean) generates an empirical distribution of values
                  consistent with PoissonDistributionImpl by generating 1000 values, computing a
                  grouped frequency distribution of the observed values and comparing this distribution
                  to the corresponding expected distribution computed using PoissonDistributionImpl.
                  Uses ChiSquare test of goodness of fit to evaluate the null hypothesis that the
                  distributions are the same. If the null hypothesis can be rejected with confidence
                  1 - alpha, the check fails.                
            </javadoc>
            <method name="checkNextPoissonConsistency" type="void" line="342">
                <params>
                    <param name="mean" type="double"/>
                </params>
                <declaration name="sampleSize" type="int" line="343"/>
                <declaration name="minExpectedCount" type="int" line="344"/>
                <declaration name="maxObservedValue" type="long" line="345"/>
                <declaration name="alpha" type="double" line="346"/>
                <declaration name="frequency" type="Frequency" line="347"/>
                <scope line="348">
                    <declaration name="value" type="long" line="349"/>
                    <scope line="350"/>
                </scope>
                <declaration name="poissonDistribution" type="PoissonDistribution" line="355"/>
                <declaration name="lower" type="int" line="356"/>
                <scope line="357"/>
                <declaration name="upper" type="int" line="360"/>
                <scope line="361"/>
                <declaration name="binWidth" type="int" line="364"/>
                <declaration name="widthSufficient" type="boolean" line="365"/>
                <declaration name="lowerBinMass" type="double" line="366"/>
                <declaration name="upperBinMass" type="double" line="367"/>
                <scope line="368"/>
                <declaration name="binBounds" type="List&lt;Integer&gt;" line="374"/>
                <declaration name="bound" type="int" line="376"/>
                <scope line="377"/>
                <declaration name="binCount" type="int" line="382"/>
                <declaration name="observed" type="long[]" line="383"/>
                <declaration name="expected" type="double[]" line="384"/>
                <scope line="386"/>
                <scope line="391"/>
                <scope line="395">
                    <scope line="397"/>
                </scope>
                <declaration name="chiSquareTest" type="ChiSquareTest" line="402"/>
                <scope line="403">
                    <declaration name="msgBuffer" type="StringBuilder" line="404"/>
                    <declaration name="df" type="DecimalFormat" line="405"/>
                    <scope line="414"/>
                </scope>
            </method>
            <javadoc line="432">
                test dispersion and failure modes for nextHex()                
            </javadoc>
            <method name="testNextHex" type="void" line="435">
                <scope line="436"/>
                <scope line="440"/>
                <scope line="442"/>
                <scope line="446"/>
                <declaration name="hexString" type="String" line="448"/>
                <scope line="449"/>
                <scope line="453"/>
                <scope line="456"/>
                <scope line="460"/>
                <declaration name="f" type="Frequency" line="462"/>
                <scope line="463">
                    <scope line="465"/>
                    <scope line="468"/>
                </scope>
                <declaration name="expected" type="double[]" line="472"/>
                <declaration name="observed" type="long[]" line="473"/>
                <scope line="474"/>
            </method>
            <javadoc line="480">
                test dispersion and failure modes for nextHex()                
            </javadoc>
            <method name="testNextSecureHex" type="void" line="483">
                <scope line="484"/>
                <scope line="488"/>
                <scope line="490"/>
                <scope line="494"/>
                <declaration name="hexString" type="String" line="496"/>
                <scope line="497"/>
                <scope line="501"/>
                <scope line="504"/>
                <scope line="508"/>
                <declaration name="f" type="Frequency" line="510"/>
                <scope line="511">
                    <scope line="513"/>
                    <scope line="516"/>
                </scope>
                <declaration name="expected" type="double[]" line="520"/>
                <declaration name="observed" type="long[]" line="521"/>
                <scope line="522"/>
            </method>
            <method name="testNextUniformIAE" type="void" line="528">
                <scope line="529"/>
                <scope line="533"/>
                <scope line="535"/>
                <scope line="539"/>
                <scope line="541"/>
                <scope line="545"/>
                <scope line="547"/>
                <scope line="551"/>
                <scope line="553"/>
                <scope line="557"/>
            </method>
            <method name="testNextUniformUniformPositiveBounds" type="void" line="560">
                <scope line="561"/>
            </method>
            <method name="testNextUniformUniformNegativeToPositiveBounds" type="void" line="565">
                <scope line="566"/>
            </method>
            <method name="testNextUniformUniformNegaiveBounds" type="void" line="570">
                <scope line="571"/>
            </method>
            <method name="testNextUniformUniformMaximalInterval" type="void" line="575">
                <scope line="576"/>
            </method>
            <method name="checkNextUniformUniform" type="void" line="580">
                <params>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
                <declaration name="binCount" type="int" line="581"/>
                <declaration name="binSize" type="double" line="582"/>
                <declaration name="binBounds" type="double[]" line="583"/>
                <scope line="585"/>
                <declaration name="freq" type="Frequency" line="588"/>
                <scope line="589">
                    <declaration name="value" type="double" line="590"/>
                    <declaration name="j" type="int" line="592"/>
                    <scope line="593"/>
                </scope>
                <declaration name="observed" type="long[]" line="598"/>
                <scope line="599"/>
                <declaration name="expected" type="double[]" line="602"/>
                <scope line="603"/>
            </method>
            <javadoc line="608">
                test exclusive endpoints of nextUniform                
            </javadoc>
            <method name="testNextUniformExclusiveEndpoints" type="void" line="611">
                <scope line="612">
                    <declaration name="u" type="double" line="613"/>
                </scope>
            </method>
            <javadoc line="617">
                test failure modes and distribution of nextGaussian()                
            </javadoc>
            <method name="testNextGaussian" type="void" line="620">
                <scope line="621"/>
                <scope line="625"/>
                <declaration name="quartiles" type="double[]" line="627"/>
                <declaration name="counts" type="long[]" line="628"/>
                <scope line="630">
                    <declaration name="value" type="double" line="631"/>
                </scope>
            </method>
            <javadoc line="636">
                test failure modes and distribution of nextExponential()                
            </javadoc>
            <method name="testNextExponential" type="void" line="639">
                <scope line="640"/>
                <scope line="644"/>
                <scope line="646"/>
                <scope line="650"/>
                <declaration name="quartiles" type="double[]" line="652"/>
                <declaration name="counts" type="long[]" line="653"/>
                <scope line="657">
                    <declaration name="value" type="double" line="658"/>
                </scope>
                <scope line="665">
                    <declaration name="value" type="double" line="666"/>
                </scope>
            </method>
            <javadoc line="671">
                test reseeding, algorithm/provider games                
            </javadoc>
            <method name="testConfig" type="void" line="674">
                <declaration name="v" type="double" line="676"/>
                <declaration name="hex" type="String" line="682"/>
                <declaration name="rd" type="RandomDataGenerator" line="687"/>
                <declaration name="rd2" type="RandomDataGenerator" line="690"/>
            </method>
            <javadoc line="700">
                tests for nextSample() sampling from Collection                
            </javadoc>
            <method name="testNextSample" type="void" line="703">
                <declaration name="c" type="Object[][]" line="704"/>
                <declaration name="observed" type="long[]" line="705"/>
                <declaration name="expected" type="double[]" line="706"/>
                <declaration name="cPop" type="HashSet&lt;Object&gt;" line="707"/>
                <scope line="708"/>
                <declaration name="sets" type="Object[]" line="711"/>
                <scope line="712">
                    <declaration name="hs" type="HashSet&lt;Object&gt;" line="713"/>
                </scope>
                <scope line="718">
                    <declaration name="cSamp" type="Object[]" line="719"/>
                </scope>
                <declaration name="hs" type="HashSet&lt;Object&gt;" line="723"/>
                <declaration name="one" type="Object[]" line="725"/>
                <declaration name="oneString" type="String" line="726"/>
                <scope line="727"/>
                <scope line="730"/>
                <scope line="734"/>
                <scope line="736"/>
                <scope line="741"/>
            </method>
            <method name="findSample" type="int" line="744">
                <params>
                    <param name="u" type="Object[]"/>
                    <param name="samp" type="Object[]"/>
                </params>
                <scope line="745">
                    <declaration name="set" type="HashSet&lt;Object&gt;" line="746"/>
                    <declaration name="sampSet" type="HashSet&lt;Object&gt;" line="747"/>
                    <scope line="748"/>
                    <scope line="751"/>
                </scope>
            </method>
            <javadoc line="758">
                tests for nextPermutation                
            </javadoc>
            <method name="testNextPermutation" type="void" line="761">
                <declaration name="p" type="int[][]" line="762"/>
                <declaration name="observed" type="long[]" line="763"/>
                <declaration name="expected" type="double[]" line="764"/>
                <scope line="765">
                    <declaration name="perm" type="int[]" line="766"/>
                </scope>
                <declaration name="labels" type="String[]" line="769"/>
                <declaration name="perm" type="int[]" line="771"/>
                <scope line="772">
                    <scope line="774"/>
                    <scope line="778"/>
                    <scope line="780"/>
                    <scope line="784"/>
                    <scope line="786"/>
                    <scope line="790"/>
                </scope>
            </method>
            <method name="findPerm" type="int" line="794">
                <params>
                    <param name="p" type="int[][]"/>
                    <param name="samp" type="int[]"/>
                </params>
                <scope line="795">
                    <declaration name="good" type="boolean" line="796"/>
                    <scope line="797">
                        <scope line="798"/>
                    </scope>
                    <scope line="802"/>
                </scope>
            </method>
            <method name="testNextInversionDeviate" type="void" line="809">
                <declaration name="rg" type="RandomGenerator" line="810"/>
                <declaration name="rdg" type="RandomDataGenerator" line="811"/>
                <declaration name="quantiles" type="double[]" line="812"/>
                <scope line="813"/>
                <declaration name="betaDistribution" type="BetaDistribution" line="817"/>
                <scope line="818">
                    <declaration name="value" type="double" line="819"/>
                </scope>
            </method>
            <method name="testNextBeta" type="void" line="823">
                <declaration name="quartiles" type="double[]" line="824"/>
                <declaration name="counts" type="long[]" line="825"/>
                <scope line="827">
                    <declaration name="value" type="double" line="828"/>
                </scope>
            </method>
            <method name="testNextCauchy" type="void" line="833">
                <declaration name="quartiles" type="double[]" line="834"/>
                <declaration name="counts" type="long[]" line="835"/>
                <scope line="837">
                    <declaration name="value" type="double" line="838"/>
                </scope>
            </method>
            <method name="testNextChiSquare" type="void" line="843">
                <declaration name="quartiles" type="double[]" line="844"/>
                <declaration name="counts" type="long[]" line="845"/>
                <scope line="847">
                    <declaration name="value" type="double" line="848"/>
                </scope>
            </method>
            <method name="testNextF" type="void" line="853">
                <declaration name="quartiles" type="double[]" line="854"/>
                <declaration name="counts" type="long[]" line="855"/>
                <scope line="857">
                    <declaration name="value" type="double" line="858"/>
                </scope>
            </method>
            <method name="testNextGamma" type="void" line="863">
                <declaration name="quartiles" type="double[]" line="864"/>
                <declaration name="counts" type="long[]" line="865"/>
                <scope line="869">
                    <declaration name="value" type="double" line="870"/>
                </scope>
                <scope line="877">
                    <declaration name="value" type="double" line="878"/>
                </scope>
            </method>
            <method name="testNextT" type="void" line="883">
                <declaration name="quartiles" type="double[]" line="884"/>
                <declaration name="counts" type="long[]" line="885"/>
                <scope line="887">
                    <declaration name="value" type="double" line="888"/>
                </scope>
            </method>
            <method name="testNextWeibull" type="void" line="893">
                <declaration name="quartiles" type="double[]" line="894"/>
                <declaration name="counts" type="long[]" line="895"/>
                <scope line="897">
                    <declaration name="value" type="double" line="898"/>
                </scope>
            </method>
            <method name="testNextBinomial" type="void" line="903">
                <declaration name="testInstance" type="BinomialDistributionTest" line="904"/>
                <declaration name="densityPoints" type="int[]" line="905"/>
                <declaration name="densityValues" type="double[]" line="906"/>
                <declaration name="sampleSize" type="int" line="907"/>
                <declaration name="length" type="int" line="908"/>
                <declaration name="distribution" type="BinomialDistribution" line="909"/>
                <declaration name="expectedCounts" type="double[]" line="910"/>
                <declaration name="observedCounts" type="long[]" line="911"/>
                <scope line="912"/>
                <scope line="916">
                    <declaration name="value" type="int" line="917"/>
                    <scope line="918">
                        <scope line="919"/>
                    </scope>
                </scope>
            </method>
            <method name="testNextHypergeometric" type="void" line="926">
                <declaration name="testInstance" type="HypergeometricDistributionTest" line="927"/>
                <declaration name="densityPoints" type="int[]" line="928"/>
                <declaration name="densityValues" type="double[]" line="929"/>
                <declaration name="sampleSize" type="int" line="930"/>
                <declaration name="length" type="int" line="931"/>
                <declaration name="distribution" type="HypergeometricDistribution" line="932"/>
                <declaration name="expectedCounts" type="double[]" line="933"/>
                <declaration name="observedCounts" type="long[]" line="934"/>
                <scope line="935"/>
                <scope line="939">
                    <declaration name="value" type="int" line="940"/>
                    <scope line="941">
                        <scope line="942"/>
                    </scope>
                </scope>
            </method>
            <method name="testNextPascal" type="void" line="949">
                <declaration name="testInstance" type="PascalDistributionTest" line="950"/>
                <declaration name="densityPoints" type="int[]" line="951"/>
                <declaration name="densityValues" type="double[]" line="952"/>
                <declaration name="sampleSize" type="int" line="953"/>
                <declaration name="length" type="int" line="954"/>
                <declaration name="distribution" type="PascalDistribution" line="955"/>
                <declaration name="expectedCounts" type="double[]" line="956"/>
                <declaration name="observedCounts" type="long[]" line="957"/>
                <scope line="958"/>
                <scope line="962">
                    <declaration name="value" type="int" line="963"/>
                    <scope line="964">
                        <scope line="965"/>
                    </scope>
                </scope>
            </method>
            <method name="testNextZipf" type="void" line="972">
                <declaration name="testInstance" type="ZipfDistributionTest" line="973"/>
                <declaration name="densityPoints" type="int[]" line="974"/>
                <declaration name="densityValues" type="double[]" line="975"/>
                <declaration name="sampleSize" type="int" line="976"/>
                <declaration name="length" type="int" line="977"/>
                <declaration name="distribution" type="ZipfDistribution" line="978"/>
                <declaration name="expectedCounts" type="double[]" line="979"/>
                <declaration name="observedCounts" type="long[]" line="980"/>
                <scope line="981"/>
                <scope line="985">
                    <declaration name="value" type="int" line="986"/>
                    <scope line="987">
                        <scope line="988"/>
                    </scope>
                </scope>
            </method>
            <method name="testReseed" type="void" line="995">
                <declaration name="x" type="PoissonDistribution" line="996"/>
                <declaration name="u" type="double" line="998"/>
                <declaration name="y" type="PoissonDistribution" line="999"/>
            </method>
        </class>
    </source>