<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting">
        <import package="org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer"/>
        <import package="org.apache.commons.math3.analysis.ParametricUnivariateFunction"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="CurveFitterTest" line="7">
            <method name="testMath303" type="void" line="8">
                <declaration name="optimizer" type="LevenbergMarquardtOptimizer" line="9"/>
                <declaration name="fitter" type="CurveFitter&lt;ParametricUnivariateFunction&gt;" line="10"/>
                <declaration name="sif" type="ParametricUnivariateFunction" line="15"/>
                <declaration name="initialguess1" type="double[]" line="16"/>
                <declaration name="initialguess2" type="double[]" line="19"/>
            </method>
            <method name="testMath304" type="void" line="24">
                <declaration name="optimizer" type="LevenbergMarquardtOptimizer" line="25"/>
                <declaration name="fitter" type="CurveFitter&lt;ParametricUnivariateFunction&gt;" line="26"/>
                <declaration name="sif" type="ParametricUnivariateFunction" line="31"/>
                <declaration name="initialguess1" type="double[]" line="32"/>
                <declaration name="initialguess2" type="double[]" line="35"/>
            </method>
            <method name="testMath372" type="void" line="39">
                <declaration name="optimizer" type="LevenbergMarquardtOptimizer" line="40"/>
                <declaration name="curveFitter" type="CurveFitter&lt;ParametricUnivariateFunction&gt;" line="41"/>
                <anonymous_class line="48">
                    <method name="value" type="double" line="49">
                        <params>
                            <param name="x" type="double"/>
                            <param name="parameters" type="double"/>
                        </params>
                        <declaration name="a" type="double" line="50"/>
                        <declaration name="b" type="double" line="51"/>
                        <declaration name="c" type="double" line="52"/>
                        <declaration name="d" type="double" line="53"/>
                    </method>
                    <method name="gradient" type="double[]" line="56">
                        <params>
                            <param name="x" type="double"/>
                            <param name="parameters" type="double"/>
                        </params>
                        <declaration name="a" type="double" line="57"/>
                        <declaration name="b" type="double" line="58"/>
                        <declaration name="c" type="double" line="59"/>
                        <declaration name="d" type="double" line="60"/>
                        <declaration name="gradients" type="double[]" line="61"/>
                        <declaration name="den" type="double" line="62"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="ParametricUnivariateFunction" line="48"/>
                <declaration name="initialGuess" type="double[]" line="71"/>
                <declaration name="estimatedParameters" type="double[]" line="72"/>
            </method>
            <class name="SimpleInverseFunction" line="79">
                <implements interface="ParametricUnivariateFunction"/>
                <method name="value" type="double" line="80">
                    <params>
                        <param name="x" type="double"/>
                        <param name="parameters" type="double"/>
                    </params>
                </method>
                <method name="gradient" type="double[]" line="83">
                    <params>
                        <param name="x" type="double"/>
                        <param name="doubles" type="double"/>
                    </params>
                    <declaration name="gradientVector" type="double[]" line="84"/>
                    <scope line="86"/>
                </method>
            </class>
        </class>
    </source>