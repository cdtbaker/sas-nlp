<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.analysis.function.Sinc"/>
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="FastFourierTransformerTest" line="13">
            <javadoc line="13">
                Test case for fast Fourier transformer.
                  &lt;p&gt;
                  FFT algorithm is exact, the small tolerance number is used only
                  to account for round-off errors.                
                <version>
                    $Id: FastFourierTransformerTest.java 1374632 2012-08-18 18:11:11Z luc $                    
                </version>
            </javadoc>
            <declaration name="SEED" type="long" line="21"/>
            <javadoc line="21">
                The common seed of all random number generators used in this test.                
            </javadoc>
            <method name="testTransformComplexSizeNotAPowerOfTwo" type="void" line="25">
                <declaration name="n" type="int" line="26"/>
                <declaration name="x" type="Complex[]" line="27"/>
                <declaration name="norm" type="DftNormalization[]" line="28"/>
                <declaration name="type" type="TransformType[]" line="30"/>
                <scope line="32">
                    <scope line="33">
                        <declaration name="fft" type="FastFourierTransformer" line="34"/>
                        <scope line="36"/>
                        <scope line="40"/>
                    </scope>
                </scope>
            </method>
            <method name="testTransformRealSizeNotAPowerOfTwo" type="void" line="45">
                <declaration name="n" type="int" line="46"/>
                <declaration name="x" type="double[]" line="47"/>
                <declaration name="norm" type="DftNormalization[]" line="48"/>
                <declaration name="type" type="TransformType[]" line="50"/>
                <scope line="52">
                    <scope line="53">
                        <declaration name="fft" type="FastFourierTransformer" line="54"/>
                        <scope line="56"/>
                        <scope line="60"/>
                    </scope>
                </scope>
            </method>
            <method name="testTransformFunctionSizeNotAPowerOfTwo" type="void" line="65">
                <declaration name="n" type="int" line="66"/>
                <declaration name="f" type="UnivariateFunction" line="67"/>
                <declaration name="norm" type="DftNormalization[]" line="68"/>
                <declaration name="type" type="TransformType[]" line="70"/>
                <scope line="72">
                    <scope line="73">
                        <declaration name="fft" type="FastFourierTransformer" line="74"/>
                        <scope line="76"/>
                        <scope line="80"/>
                    </scope>
                </scope>
            </method>
            <method name="testTransformFunctionNotStrictlyPositiveNumberOfSamples" type="void" line="85">
                <declaration name="n" type="int" line="86"/>
                <declaration name="f" type="UnivariateFunction" line="87"/>
                <declaration name="norm" type="DftNormalization[]" line="88"/>
                <declaration name="type" type="TransformType[]" line="90"/>
                <scope line="92">
                    <scope line="93">
                        <declaration name="fft" type="FastFourierTransformer" line="94"/>
                        <scope line="96"/>
                        <scope line="101"/>
                    </scope>
                </scope>
            </method>
            <method name="testTransformFunctionInvalidBounds" type="void" line="106">
                <declaration name="n" type="int" line="107"/>
                <declaration name="f" type="UnivariateFunction" line="108"/>
                <declaration name="norm" type="DftNormalization[]" line="109"/>
                <declaration name="type" type="TransformType[]" line="111"/>
                <scope line="113">
                    <scope line="114">
                        <declaration name="fft" type="FastFourierTransformer" line="115"/>
                        <scope line="117"/>
                        <scope line="121"/>
                    </scope>
                </scope>
            </method>
            <method name="createComplexData" type="Complex[]" line="126">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="random" type="Random" line="127"/>
                <declaration name="data" type="Complex[]" line="128"/>
                <scope line="129">
                    <declaration name="re" type="double" line="130"/>
                    <declaration name="im" type="double" line="131"/>
                </scope>
            </method>
            <method name="createRealData" type="double[]" line="136">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="random" type="Random" line="137"/>
                <declaration name="data" type="double[]" line="138"/>
                <scope line="139"/>
            </method>
            <javadoc line="144">
                Naive implementation of DFT, for reference.                
            </javadoc>
            <method name="dft" type="Complex[]" line="147">
                <params>
                    <param name="x" type="Complex[]"/>
                    <param name="sgn" type="int"/>
                </params>
                <declaration name="n" type="int" line="148"/>
                <declaration name="cos" type="double[]" line="149"/>
                <declaration name="sin" type="double[]" line="150"/>
                <declaration name="y" type="Complex[]" line="151"/>
                <scope line="152">
                    <declaration name="arg" type="double" line="153"/>
                </scope>
                <scope line="157">
                    <declaration name="yr" type="double" line="158"/>
                    <declaration name="yi" type="double" line="159"/>
                    <scope line="160">
                        <declaration name="index" type="int" line="161"/>
                        <declaration name="c" type="double" line="162"/>
                        <declaration name="s" type="double" line="163"/>
                        <declaration name="xr" type="double" line="164"/>
                        <declaration name="xi" type="double" line="165"/>
                    </scope>
                </scope>
            </method>
            <method name="doTestTransformComplex" type="void" line="173">
                <params>
                    <param name="n" type="int"/>
                    <param name="tol" type="double"/>
                    <param name="normalization" type="DftNormalization"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="fft" type="FastFourierTransformer" line="174"/>
                <declaration name="x" type="Complex[]" line="176"/>
                <declaration name="expected" type="Complex[]" line="177"/>
                <declaration name="s" type="double" line="178"/>
                <scope line="179">
                    <scope line="181"/>
                    <scope line="184"/>
                </scope>
                <scope line="188">
                    <scope line="190"/>
                    <scope line="193"/>
                </scope>
                <declaration name="actual" type="Complex[]" line="197"/>
                <scope line="198">
                    <declaration name="msg" type="String" line="199"/>
                    <declaration name="re" type="double" line="201"/>
                    <declaration name="im" type="double" line="203"/>
                </scope>
            </method>
            <method name="doTestTransformReal" type="void" line="207">
                <params>
                    <param name="n" type="int"/>
                    <param name="tol" type="double"/>
                    <param name="normalization" type="DftNormalization"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="fft" type="FastFourierTransformer" line="208"/>
                <declaration name="x" type="double[]" line="210"/>
                <declaration name="xc" type="Complex[]" line="211"/>
                <scope line="212"/>
                <declaration name="expected" type="Complex[]" line="215"/>
                <declaration name="s" type="double" line="216"/>
                <scope line="217">
                    <scope line="219"/>
                    <scope line="222"/>
                </scope>
                <scope line="226">
                    <scope line="228"/>
                    <scope line="231"/>
                </scope>
                <declaration name="actual" type="Complex[]" line="235"/>
                <scope line="236">
                    <declaration name="msg" type="String" line="237"/>
                    <declaration name="re" type="double" line="239"/>
                    <declaration name="im" type="double" line="241"/>
                </scope>
            </method>
            <method name="doTestTransformFunction" type="void" line="245">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="n" type="int"/>
                    <param name="tol" type="double"/>
                    <param name="normalization" type="DftNormalization"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="fft" type="FastFourierTransformer" line="246"/>
                <declaration name="x" type="Complex[]" line="248"/>
                <scope line="249">
                    <declaration name="t" type="double" line="250"/>
                </scope>
                <declaration name="expected" type="Complex[]" line="253"/>
                <declaration name="s" type="double" line="254"/>
                <scope line="255">
                    <scope line="257"/>
                    <scope line="260"/>
                </scope>
                <scope line="264">
                    <scope line="266"/>
                    <scope line="269"/>
                </scope>
                <declaration name="actual" type="Complex[]" line="273"/>
                <scope line="274">
                    <declaration name="msg" type="String" line="275"/>
                    <declaration name="re" type="double" line="276"/>
                    <declaration name="im" type="double" line="278"/>
                </scope>
            </method>
            <method name="testTransformComplex" type="void" line="282">
                <declaration name="norm" type="DftNormalization[]" line="283"/>
                <declaration name="type" type="TransformType[]" line="285"/>
                <scope line="287">
                    <scope line="288"/>
                </scope>
            </method>
            <method name="testStandardTransformReal" type="void" line="299">
                <declaration name="norm" type="DftNormalization[]" line="300"/>
                <declaration name="type" type="TransformType[]" line="302"/>
                <scope line="304">
                    <scope line="305"/>
                </scope>
            </method>
            <method name="testStandardTransformFunction" type="void" line="316">
                <declaration name="f" type="UnivariateFunction" line="317"/>
                <declaration name="min" type="double" line="318"/>
                <declaration name="max" type="double" line="319"/>
                <declaration name="norm" type="DftNormalization[]" line="320"/>
                <declaration name="type" type="TransformType[]" line="322"/>
                <scope line="324">
                    <scope line="325"/>
                </scope>
            </method>
            <javadoc line="336">
                Test of transformer for the ad hoc data taken from Mathematica.                
            </javadoc>
            <method name="testAdHocData" type="void" line="339">
                <declaration name="transformer" type="FastFourierTransformer" line="340"/>
                <declaration name="result" type="Complex" line="342"/>
                <declaration name="tolerance" type="double" line="343"/>
                <declaration name="x" type="double" line="344"/>
                <declaration name="y" type="Complex" line="345"/>
                <scope line="347"/>
                <scope line="352"/>
                <declaration name="x2" type="double" line="356"/>
                <declaration name="y2" type="Complex" line="358"/>
                <scope line="361"/>
                <scope line="366"/>
            </method>
            <javadoc line="371">
                Test of transformer for the sine function.                
            </javadoc>
            <method name="testSinFunction" type="void" line="374">
                <declaration name="f" type="UnivariateFunction" line="375"/>
                <declaration name="transformer" type="FastFourierTransformer" line="376"/>
                <declaration name="result" type="Complex" line="378"/>
                <declaration name="N" type="int" line="379"/>
                <declaration name="min" type="double" line="380"/>
                <scope line="388"/>
                <scope line="399"/>
            </method>
            <method name="test2DData" type="void" line="404">
                <declaration name="transformer" type="FastFourierTransformer" line="405"/>
                <declaration name="tolerance" type="double" line="407"/>
                <declaration name="input" type="Complex[][]" line="408"/>
                <declaration name="goodOutput" type="Complex[][]" line="409"/>
                <scope line="410"/>
                <declaration name="output" type="Complex[][]" line="413"/>
                <declaration name="output2" type="Complex[][]" line="414"/>
                <scope line="421">
                    <scope line="422"/>
                </scope>
            </method>
            <method name="test2DDataUnitary" type="void" line="430">
                <declaration name="transformer" type="FastFourierTransformer" line="431"/>
                <declaration name="tolerance" type="double" line="433"/>
                <declaration name="input" type="Complex[][]" line="434"/>
                <declaration name="goodOutput" type="Complex[][]" line="435"/>
                <declaration name="output" type="Complex[][]" line="436"/>
                <declaration name="output2" type="Complex[][]" line="437"/>
                <scope line="444">
                    <scope line="445"/>
                </scope>
            </method>
        </class>
    </source>