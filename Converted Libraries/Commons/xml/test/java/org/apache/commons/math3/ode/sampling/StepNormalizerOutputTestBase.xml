<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.sampling">
        <import package="org.junit.Assert.assertArrayEquals"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.ode.FirstOrderDifferentialEquations"/>
        <import package="org.apache.commons.math3.ode.FirstOrderIntegrator"/>
        <import package="org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator"/>
        <import package="org.junit.Test"/>
        <class name="StepNormalizerOutputTestBase" line="13">
            <implements interface="FirstOrderDifferentialEquations"/>
            <implements interface="FixedStepHandler"/>
            <javadoc line="13">
                Base class for step normalizer output tests.                
            </javadoc>
            <declaration name="output" type="List&lt;Double&gt;" line="17"/>
            <javadoc line="17">
                The normalized output time values.                
            </javadoc>
            <method name="getStart" type="double" line="21"/>
            <javadoc line="21">
                Returns the start time.                
                <return>
                    the start time                    
                </return>
            </javadoc>
            <method name="getEnd" type="double" line="26"/>
            <javadoc line="26">
                Returns the end time.                
                <return>
                    the end time                    
                </return>
            </javadoc>
            <method name="getExpInc" type="double[]" line="31"/>
            <javadoc line="31">
                Returns the expected normalized output time values for increment mode.                
                <return>
                    the expected normalized output time values for increment mode                    
                </return>
            </javadoc>
            <method name="getExpIncRev" type="double[]" line="36"/>
            <javadoc line="36">
                Returns the expected reversed normalized output time values for
                  increment mode.                
                <return>
                    the expected reversed normalized output time values for
                      increment mode                    
                </return>
            </javadoc>
            <method name="getExpMul" type="double[]" line="43"/>
            <javadoc line="43">
                Returns the expected normalized output time values for multiples mode.                
                <return>
                    the expected normalized output time values for multiples mode                    
                </return>
            </javadoc>
            <method name="getExpMulRev" type="double[]" line="48"/>
            <javadoc line="48">
                Returns the expected reversed normalized output time values for
                  multiples mode.                
                <return>
                    the expected reversed normalized output time values for
                      multiples mode                    
                </return>
            </javadoc>
            <method name="getO" type="int[][]" line="55"/>
            <javadoc line="55">
                Returns the offsets for the unit tests below, in the order they are
                  given below. For each test, the left and right offsets are returned.                
                <return>
                    the offsets for the unit tests below, in the order they are
                      given below                    
                </return>
            </javadoc>
            <javadoc line="62">
                Get the array, given left and right offsets.                
                <param>
                    a the input array                    
                </param>
                <param>
                    offsetL the left side offset                    
                </param>
                <param>
                    offsetR the right side offset                    
                </param>
                <return>
                    the modified array                    
                </return>
            </javadoc>
            <method name="getArray" type="double[]" line="69">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="offsetL" type="int"/>
                    <param name="offsetR" type="int"/>
                </params>
                <declaration name="copy" type="double[]" line="70"/>
            </method>
            <method name="testIncNeither" type="void" line="74">
                <declaration name="exp" type="double[]" line="75"/>
            </method>
            <method name="testIncNeitherRev" type="void" line="78">
                <declaration name="exp" type="double[]" line="79"/>
            </method>
            <method name="testIncFirst" type="void" line="82">
                <declaration name="exp" type="double[]" line="83"/>
            </method>
            <method name="testIncFirstRev" type="void" line="86">
                <declaration name="exp" type="double[]" line="87"/>
            </method>
            <method name="testIncLast" type="void" line="90">
                <declaration name="exp" type="double[]" line="91"/>
            </method>
            <method name="testIncLastRev" type="void" line="94">
                <declaration name="exp" type="double[]" line="95"/>
            </method>
            <method name="testIncBoth" type="void" line="98">
                <declaration name="exp" type="double[]" line="99"/>
            </method>
            <method name="testIncBothRev" type="void" line="102">
                <declaration name="exp" type="double[]" line="103"/>
            </method>
            <method name="testMulNeither" type="void" line="106">
                <declaration name="exp" type="double[]" line="107"/>
            </method>
            <method name="testMulNeitherRev" type="void" line="110">
                <declaration name="exp" type="double[]" line="111"/>
            </method>
            <method name="testMulFirst" type="void" line="114">
                <declaration name="exp" type="double[]" line="115"/>
            </method>
            <method name="testMulFirstRev" type="void" line="118">
                <declaration name="exp" type="double[]" line="119"/>
            </method>
            <method name="testMulLast" type="void" line="122">
                <declaration name="exp" type="double[]" line="123"/>
            </method>
            <method name="testMulLastRev" type="void" line="126">
                <declaration name="exp" type="double[]" line="127"/>
            </method>
            <method name="testMulBoth" type="void" line="130">
                <declaration name="exp" type="double[]" line="131"/>
            </method>
            <method name="testMulBothRev" type="void" line="134">
                <declaration name="exp" type="double[]" line="135"/>
            </method>
            <javadoc line="138">
                The actual step normalizer output test code, shared by all the unit
                  tests.                
                <param>
                    mode the step normalizer mode to use                    
                </param>
                <param>
                    bounds the step normalizer bounds setting to use                    
                </param>
                <param>
                    expected the expected output (normalized time points)                    
                </param>
                <param>
                    reverse whether to reverse the integration direction                    
                </param>
                <throws>
                    NoBracketingException                    
                </throws>
                <throws>
                    MaxCountExceededException                    
                </throws>
                <throws>
                    NumberIsTooSmallException                    
                </throws>
                <throws>
                    DimensionMismatchException                    
                </throws>
            </javadoc>
            <method name="doTest" type="void" line="150">
                <params>
                    <param name="mode" type="StepNormalizerMode"/>
                    <param name="bounds" type="StepNormalizerBounds"/>
                    <param name="expected" type="double[]"/>
                    <param name="reverse" type="boolean"/>
                </params>
                <declaration name="integ" type="FirstOrderIntegrator" line="151"/>
                <declaration name="y" type="double[]" line="153"/>
                <declaration name="start" type="double" line="154"/>
                <declaration name="end" type="double" line="155"/>
                <declaration name="actual" type="double[]" line="158"/>
                <scope line="159"/>
            </method>
            <javadoc line="164">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="167"/>
            <javadoc line="170">
                {@inheritDoc}                
            </javadoc>
            <method name="computeDerivatives" type="void" line="173">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                    <param name="yDot" type="double[]"/>
                </params>
            </method>
            <javadoc line="176">
                {@inheritDoc}                
            </javadoc>
            <method name="init" type="void" line="179">
                <params>
                    <param name="t0" type="double"/>
                    <param name="y0" type="double[]"/>
                    <param name="t" type="double"/>
                </params>
            </method>
            <javadoc line="181">
                {@inheritDoc}                
            </javadoc>
            <method name="handleStep" type="void" line="184">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                    <param name="yDot" type="double[]"/>
                    <param name="isLast" type="boolean"/>
                </params>
            </method>
        </class>
    </source>