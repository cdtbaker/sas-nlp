<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.CombinatoricsUtils"/>
        <class name="InverseHilbertMatrix" line="23">
            <extends class="RealLinearOperator"/>
            <javadoc line="23">
                This class implements inverses of Hilbert Matrices as{@link RealLinearOperator}.                
            </javadoc>
            <declaration name="n" type="int" line="30"/>
            <javadoc line="30">
                The size of the matrix.                
            </javadoc>
            <javadoc line="33">
                Creates a new instance of this class.                
                <param>
                    n Size of the matrix to be created.                    
                </param>
            </javadoc>
            <method name="InverseHilbertMatrix" type="constructor" line="38">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="42">
                {@inheritDoc}                
            </javadoc>
            <method name="getColumnDimension" type="int" line="44"/>
            <javadoc line="48">
                Returns the {@code (i, j)} entry of the inverse Hilbert matrix. Exact
                  arithmetic is used; in case of overflow, an exception is thrown.                
                <param>
                    i Row index (starts at 0).                    
                </param>
                <param>
                    j Column index (starts at 0).                    
                </param>
                <return>
                    The coefficient of the inverse Hilbert matrix.                    
                </return>
            </javadoc>
            <method name="getEntry" type="long" line="56">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <declaration name="val" type="long" line="57"/>
                <declaration name="aux" type="long" line="58"/>
            </method>
            <javadoc line="68">
                {@inheritDoc}                
            </javadoc>
            <method name="getRowDimension" type="int" line="70"/>
            <javadoc line="74">
                {@inheritDoc}                
            </javadoc>
            <method name="operate" type="RealVector" line="76">
                <params>
                    <param name="x" type="RealVector"/>
                </params>
                <comment line="89">
                    Positive and negative values are sorted out in order to limit
                     catastrophic cancellations (do not forget that Hilbert
                     matrices are *very* ill-conditioned!                    
                </comment>
                <scope line="77"/>
                <declaration name="y" type="double[]" line="80"/>
                <scope line="81">
                    <declaration name="pos" type="double" line="82"/>
                    <declaration name="neg" type="double" line="83"/>
                    <scope line="84">
                        <declaration name="xj" type="double" line="85"/>
                        <declaration name="coeff" type="long" line="86"/>
                        <declaration name="daux" type="double" line="87"/>
                        <scope line="91"/>
                        <scope line="93"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>