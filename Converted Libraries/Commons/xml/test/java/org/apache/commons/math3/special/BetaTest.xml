<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.special">
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="BetaTest" line="30">
            <comment line="36">
                Use reflection to test private methods.                
            </comment>
            <javadoc line="30">
                @version $Id: BetaTest.java 1546350 2013-11-28 11:41:12Z erans $                
            </javadoc>
            <declaration name="LOG_GAMMA_SUM_METHOD" type="Method" line="38"/>
            <declaration name="LOG_GAMMA_MINUS_LOG_GAMMA_SUM_METHOD" type="Method" line="40"/>
            <declaration name="SUM_DELTA_MINUS_DELTA_SUM_METHOD" type="Method" line="42"/>
            <scope line="44">
                <declaration name="b" type="Class&amp;lt;Beta&amp;gt;" line="45"/>
                <declaration name="d" type="Class&amp;lt;Double&amp;gt;" line="46"/>
                <declaration name="m" type="Method" line="48"/>
                <scope line="49"/>
                <scope line="51"/>
                <scope line="58"/>
                <scope line="60"/>
                <scope line="67"/>
                <scope line="69"/>
            </scope>
            <method name="testRegularizedBeta" type="void" line="77">
                <params>
                    <param name="expected" type="double"/>
                    <param name="x" type="double"/>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <declaration name="actual" type="double" line="78"/>
            </method>
            <method name="testLogBeta" type="void" line="82">
                <params>
                    <param name="expected" type="double"/>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <declaration name="actual" type="double" line="83"/>
            </method>
            <method name="testRegularizedBetaNanPositivePositive" type="void" line="88"/>
            <method name="testRegularizedBetaPositiveNanPositive" type="void" line="93"/>
            <method name="testRegularizedBetaPositivePositiveNan" type="void" line="98"/>
            <method name="testRegularizedBetaNegativePositivePositive" type="void" line="103"/>
            <method name="testRegularizedBetaPositiveNegativePositive" type="void" line="108"/>
            <method name="testRegularizedBetaPositivePositiveNegative" type="void" line="113"/>
            <method name="testRegularizedBetaZeroPositivePositive" type="void" line="118"/>
            <method name="testRegularizedBetaPositiveZeroPositive" type="void" line="123"/>
            <method name="testRegularizedBetaPositivePositiveZero" type="void" line="128"/>
            <method name="testRegularizedBetaPositivePositivePositive" type="void" line="133"/>
            <method name="testRegularizedBetaTinyArgument" type="void" line="138">
                <comment line="141">
                    This value is from R: pbeta(1e-17,1,1e12)                    
                </comment>
                <declaration name="actual" type="double" line="139"/>
            </method>
            <method name="testMath1067" type="void" line="145">
                <declaration name="x" type="double" line="146"/>
                <declaration name="a" type="double" line="147"/>
                <declaration name="b" type="double" line="148"/>
                <scope line="150">
                    <declaration name="r" type="double" line="151"/>
                </scope>
                <scope line="152"/>
            </method>
            <method name="testLogBetaNanPositive" type="void" line="158"/>
            <method name="testLogBetaPositiveNan" type="void" line="163"/>
            <method name="testLogBetaNegativePositive" type="void" line="168"/>
            <method name="testLogBetaPositiveNegative" type="void" line="173"/>
            <method name="testLogBetaZeroPositive" type="void" line="178"/>
            <method name="testLogBetaPositiveZero" type="void" line="183"/>
            <method name="testLogBetaPositivePositive" type="void" line="188"/>
            <declaration name="LOG_GAMMA_SUM_REF" type="double[][]" line="192"/>
            <javadoc line="192">
                Reference data for the {@link #logGammaSum(double,double)}function. This data was generated with the following
                  &lt;a href=&quot;http://maxima.sourceforge.net/&quot;&gt;Maxima&lt;/a&gt; script.
                  &lt;pre&gt;
                  kill(all);
                  fpprec : 64;
                  gsumln(a, b) := log(gamma(a + b));
                  x : [1.0b0, 1.125b0, 1.25b0, 1.375b0, 1.5b0, 1.625b0, 1.75b0, 1.875b0, 2.0b0];
                  for i : 1 while i &lt;= length(x) do
                  for j : 1 while j &lt;= length(x) do block(
                  a : x[i],
                  b : x[j],
                  print(&quot;{&quot;, float(a), &quot;,&quot;, float(b), &quot;,&quot;, float(gsumln(a, b)), &quot;},&quot;)
                  );
                  &lt;/pre&gt;                
            </javadoc>
            <method name="logGammaSum" type="double" line="297">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <comment line="300">
                    Use reflection to access private method.                    
                </comment>
                <scope line="302"/>
                <scope line="304"/>
                <scope line="306"/>
                <scope line="308">
                    <declaration name="te" type="Throwable" line="309"/>
                    <scope line="310"/>
                </scope>
            </method>
            <method name="testLogGammaSum" type="void" line="319">
                <declaration name="ulps" type="int" line="320"/>
                <scope line="321">
                    <declaration name="ref" type="double[]" line="322"/>
                    <declaration name="a" type="double" line="323"/>
                    <declaration name="b" type="double" line="324"/>
                    <declaration name="expected" type="double" line="325"/>
                    <declaration name="actual" type="double" line="326"/>
                    <declaration name="tol" type="double" line="327"/>
                    <declaration name="builder" type="StringBuilder" line="328"/>
                </scope>
            </method>
            <method name="testLogGammaSumPrecondition1" type="void" line="335"/>
            <method name="testLogGammaSumPrecondition2" type="void" line="341"/>
            <method name="testLogGammaSumPrecondition3" type="void" line="347"/>
            <method name="testLogGammaSumPrecondition4" type="void" line="353"/>
            <declaration name="LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF" type="double[][]" line="358"/>
            <method name="logGammaMinusLogGammaSum" type="double" line="482">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <comment line="485">
                    Use reflection to access private method.                    
                </comment>
                <scope line="487">
                    <declaration name="m" type="Method" line="488"/>
                </scope>
                <scope line="490"/>
                <scope line="492"/>
                <scope line="494">
                    <declaration name="te" type="Throwable" line="495"/>
                    <scope line="496"/>
                </scope>
            </method>
            <method name="testLogGammaMinusLogGammaSum" type="void" line="505">
                <declaration name="ulps" type="int" line="506"/>
                <scope line="507">
                    <declaration name="ref" type="double[]" line="508"/>
                    <declaration name="a" type="double" line="509"/>
                    <declaration name="b" type="double" line="510"/>
                    <declaration name="expected" type="double" line="511"/>
                    <declaration name="actual" type="double" line="512"/>
                    <declaration name="tol" type="double" line="513"/>
                    <declaration name="builder" type="StringBuilder" line="514"/>
                </scope>
            </method>
            <method name="testLogGammaMinusLogGammaSumPrecondition1" type="void" line="521"/>
            <method name="testLogGammaMinusLogGammaSumPrecondition2" type="void" line="526"/>
            <declaration name="SUM_DELTA_MINUS_DELTA_SUM_REF" type="double[][]" line="530"/>
            <method name="sumDeltaMinusDeltaSum" type="double" line="655">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <comment line="658">
                    Use reflection to access private method.                    
                </comment>
                <scope line="660">
                    <declaration name="m" type="Method" line="661"/>
                </scope>
                <scope line="663"/>
                <scope line="665"/>
                <scope line="667">
                    <declaration name="te" type="Throwable" line="668"/>
                    <scope line="669"/>
                </scope>
            </method>
            <method name="testSumDeltaMinusDeltaSum" type="void" line="678">
                <declaration name="ulps" type="int" line="680"/>
                <scope line="681">
                    <declaration name="ref" type="double[]" line="682"/>
                    <declaration name="a" type="double" line="683"/>
                    <declaration name="b" type="double" line="684"/>
                    <declaration name="expected" type="double" line="685"/>
                    <declaration name="actual" type="double" line="686"/>
                    <declaration name="tol" type="double" line="687"/>
                    <declaration name="builder" type="StringBuilder" line="688"/>
                </scope>
            </method>
            <method name="testSumDeltaMinusDeltaSumPrecondition1" type="void" line="695"/>
            <method name="testSumDeltaMinusDeltaSumPrecondition2" type="void" line="701"/>
            <declaration name="LOG_BETA_REF" type="double[][]" line="706"/>
            <method name="testLogBeta" type="void" line="966">
                <declaration name="ulps" type="int" line="967"/>
                <scope line="968">
                    <declaration name="ref" type="double[]" line="969"/>
                    <declaration name="a" type="double" line="970"/>
                    <declaration name="b" type="double" line="971"/>
                    <declaration name="expected" type="double" line="972"/>
                    <declaration name="actual" type="double" line="973"/>
                    <declaration name="tol" type="double" line="974"/>
                    <declaration name="builder" type="StringBuilder" line="975"/>
                </scope>
            </method>
        </class>
    </source>