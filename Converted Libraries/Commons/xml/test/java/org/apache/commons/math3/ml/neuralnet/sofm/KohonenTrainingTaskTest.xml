<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet.sofm">
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.concurrent.Executors"/>
        <import package="java.util.concurrent.ExecutorService"/>
        <import package="java.util.concurrent.Future"/>
        <import package="java.util.concurrent.ExecutionException"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.runner.RunWith"/>
        <import package="org.apache.commons.math3.RetryRunner"/>
        <import package="org.apache.commons.math3.Retry"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Vector3D"/>
        <class name="KohonenTrainingTaskTest" line="41">
            <comment line="81">
                Test can sometimes fail: Run several times.                
            </comment>
            <javadoc line="41">
                Tests for {@link KohonenTrainingTask}                
            </javadoc>
            <method name="testTravellerSalesmanSquareTourSequentialSolver" type="void" line="47">
                <comment line="49">
                    Cities (in optimal travel order).                    
                </comment>
                <comment line="67">
                    Seed that allows the unit test to always succeed.                    
                </comment>
                <comment line="71">
                    printSummary(&quot;before.travel.seq.dat&quot;, solver);                    
                </comment>
                <comment line="73">
                    printSummary(&quot;after.travel.seq.dat&quot;, solver);                    
                </comment>
                <comment line="78">
                    We do not require the optimal travel.                    
                </comment>
                <declaration name="squareOfCities" type="City[]" line="49"/>
                <declaration name="seed" type="long" line="67"/>
                <declaration name="solver" type="TravellingSalesmanSolver" line="69"/>
                <declaration name="result" type="City[]" line="73"/>
                <declaration name="ratio" type="double" line="76"/>
            </method>
            <method name="testTravellerSalesmanSquareTourParallelSolver" type="void" line="83">
                <comment line="85">
                    Cities (in optimal travel order).                    
                </comment>
                <comment line="104">
                    printSummary(&quot;before.travel.par.dat&quot;, solver);                    
                </comment>
                <comment line="106">
                    Parallel execution.                    
                </comment>
                <comment line="110">
                    Run tasks.                    
                </comment>
                <comment line="114">
                    Wait for completion (ignoring return value).                    
                </comment>
                <comment line="120">
                    Terminate all threads.                    
                </comment>
                <comment line="123">
                    printSummary(&quot;after.travel.par.dat&quot;, solver);                    
                </comment>
                <comment line="128">
                    We do not require the optimal travel.                    
                </comment>
                <declaration name="squareOfCities" type="City[]" line="85"/>
                <declaration name="solver" type="TravellingSalesmanSolver" line="102"/>
                <declaration name="service" type="ExecutorService" line="106"/>
                <declaration name="tasks" type="Runnable[]" line="107"/>
                <declaration name="execOutput" type="List&amp;lt;Future&amp;lt;?&amp;gt;&amp;gt;" line="108"/>
                <scope line="110"/>
                <scope line="114">
                    <scope line="115"/>
                </scope>
                <scope line="118"/>
                <declaration name="result" type="City[]" line="123"/>
                <declaration name="ratio" type="double" line="126"/>
            </method>
            <javadoc line="130">
                Creates a map of the travel suggested by the solver.                
                <param>
                    solver Solver.                    
                </param>
                <return>
                    a 4-columns table: {@code &lt;x (neuron)&gt; &lt;y (neuron)&gt; &lt;x (city)&gt; &lt;y (city)&gt;}.                    
                </return>
            </javadoc>
            <method name="travelCoordinatesTable" type="String" line="136">
                <params>
                    <param name="solver" type="TravellingSalesmanSolver"/>
                </params>
                <declaration name="s" type="StringBuilder" line="137"/>
                <scope line="138">
                    <declaration name="city" type="City" line="140"/>
                    <declaration name="cityCoord" type="double[]" line="141"/>
                </scope>
            </method>
            <javadoc line="148">
                Compute the distance covered by the salesman, including
                  the trip back (from the last to first city).                
                <param>
                    cityList List of cities visited during the travel.                    
                </param>
                <return>
                    the total distance.                    
                </return>
            </javadoc>
            <method name="uniqueCities" type="Collection&lt;City&gt;" line="155">
                <params>
                    <param name="cityList" type="City[]"/>
                </params>
                <declaration name="unique" type="Set&amp;lt;City&amp;gt;" line="156"/>
                <scope line="157"/>
            </method>
            <javadoc line="163">
                Compute the distance covered by the salesman, including
                  the trip back (from the last to first city).                
                <param>
                    cityList List of cities visited during the travel.                    
                </param>
                <return>
                    the total distance.                    
                </return>
            </javadoc>
            <method name="computeTravelDistance" type="double" line="170">
                <params>
                    <param name="cityList" type="City[]"/>
                </params>
                <declaration name="dist" type="double" line="171"/>
                <scope line="172">
                    <declaration name="currentCoord" type="double[]" line="173"/>
                    <declaration name="nextCoord" type="double[]" line="174"/>
                    <declaration name="xDiff" type="double" line="176"/>
                    <declaration name="yDiff" type="double" line="177"/>
                </scope>
            </method>
            <javadoc line="185">
                Prints a summary of the current state of the solver to the
                  given filename.                
                <param>
                    filename File.                    
                </param>
                <param>
                    solver Solver.                    
                </param>
            </javadoc>
            <method name="printSummary" type="void" line="193">
                <params>
                    <param name="filename" type="String"/>
                    <param name="solver" type="TravellingSalesmanSolver"/>
                </params>
                <comment line="204">
                    Do nothing.                    
                </comment>
                <declaration name="out" type="PrintWriter" line="194"/>
                <scope line="195">
                    <declaration name="result" type="City[]" line="199"/>
                </scope>
                <scope line="202"/>
                <scope line="204">
                    <scope line="205"/>
                </scope>
            </method>
        </class>
    </source>