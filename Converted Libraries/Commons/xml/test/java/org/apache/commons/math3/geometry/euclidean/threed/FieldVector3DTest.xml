<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.text.DecimalFormat"/>
        <import package="java.text.DecimalFormatSymbols"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.util.Locale"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.random.Well1024a"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="FieldVector3DTest" line="34">
            <method name="testConstructors" type="void" line="37">
                <declaration name="cosAlpha" type="double" line="38"/>
                <declaration name="sinAlpha" type="double" line="39"/>
                <declaration name="cosDelta" type="double" line="40"/>
                <declaration name="sinDelta" type="double" line="41"/>
                <declaration name="u" type="FieldVector3D&lt;DerivativeStructure&gt;" line="42"/>
            </method>
            <method name="testEquals" type="void" line="129">
                <declaration name="u1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="130"/>
                <declaration name="v" type="FieldVector3D&lt;DerivativeStructure&gt;" line="131"/>
            </method>
            <method name="testHash" type="void" line="151">
                <declaration name="u" type="FieldVector3D&lt;DerivativeStructure&gt;" line="153"/>
                <declaration name="v" type="FieldVector3D&lt;DerivativeStructure&gt;" line="154"/>
            </method>
            <method name="testInfinite" type="void" line="159"/>
            <method name="testNaN" type="void" line="168"/>
            <method name="testToString" type="void" line="177">
                <declaration name="format" type="NumberFormat" line="179"/>
            </method>
            <method name="testWrongDimension" type="void" line="184"/>
            <method name="testCoordinates" type="void" line="192">
                <declaration name="v" type="FieldVector3D&lt;DerivativeStructure&gt;" line="193"/>
                <declaration name="coordinates" type="DerivativeStructure[]" line="197"/>
            </method>
            <method name="testNorm1" type="void" line="204"/>
            <method name="testNorm" type="void" line="213">
                <declaration name="r" type="double" line="214"/>
            </method>
            <method name="testNormSq" type="void" line="223"/>
            <method name="testNormInf" type="void" line="232"/>
            <method name="testDistance1" type="void" line="261">
                <declaration name="v1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="262"/>
                <declaration name="v2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="263"/>
                <declaration name="distance" type="DerivativeStructure" line="265"/>
            </method>
            <method name="testDistance" type="void" line="283">
                <declaration name="v1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="284"/>
                <declaration name="v2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="285"/>
                <declaration name="distance" type="DerivativeStructure" line="287"/>
            </method>
            <method name="testDistanceSq" type="void" line="305">
                <declaration name="v1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="306"/>
                <declaration name="v2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="307"/>
                <declaration name="distanceSq" type="DerivativeStructure" line="309"/>
            </method>
            <method name="testDistanceInf" type="void" line="327">
                <declaration name="v1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="328"/>
                <declaration name="v2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="329"/>
                <declaration name="distance" type="DerivativeStructure" line="331"/>
            </method>
            <method name="testSubtract" type="void" line="389">
                <declaration name="v1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="390"/>
                <declaration name="v2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="391"/>
            </method>
            <method name="testAdd" type="void" line="412">
                <declaration name="v1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="413"/>
                <declaration name="v2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="414"/>
            </method>
            <method name="testScalarProduct" type="void" line="435">
                <declaration name="v" type="FieldVector3D&lt;DerivativeStructure&gt;" line="436"/>
            </method>
            <method name="testVectorialProducts" type="void" line="444">
                <declaration name="v1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="445"/>
                <declaration name="v2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="446"/>
                <declaration name="v3" type="FieldVector3D&lt;DerivativeStructure&gt;" line="452"/>
            </method>
            <method name="testCrossProductCancellation" type="void" line="470">
                <declaration name="v1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="471"/>
                <declaration name="v2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="472"/>
                <declaration name="scale" type="double" line="475"/>
                <declaration name="big1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="476"/>
                <declaration name="small2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="477"/>
            </method>
            <method name="testAngular" type="void" line="483">
                <declaration name="u" type="FieldVector3D&lt;DerivativeStructure&gt;" line="490"/>
            </method>
            <method name="testAngularSeparation" type="void" line="496">
                <comment line="511">
                    expected                    
                </comment>
                <declaration name="v1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="497"/>
                <declaration name="k" type="FieldVector3D&lt;DerivativeStructure&gt;" line="499"/>
                <declaration name="i" type="FieldVector3D&lt;DerivativeStructure&gt;" line="500"/>
                <declaration name="v2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="501"/>
                <scope line="507"/>
                <scope line="510"/>
            </method>
            <method name="testNormalize" type="void" line="519">
                <comment line="525">
                    expected behavior                    
                </comment>
                <scope line="521"/>
                <scope line="524"/>
            </method>
            <method name="testNegate" type="void" line="530"/>
            <method name="testOrthogonal" type="void" line="536">
                <comment line="549">
                    expected behavior                    
                </comment>
                <declaration name="v1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="537"/>
                <declaration name="v2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="539"/>
                <declaration name="v3" type="FieldVector3D&lt;DerivativeStructure&gt;" line="541"/>
                <declaration name="v4" type="FieldVector3D&lt;DerivativeStructure&gt;" line="543"/>
                <scope line="545"/>
                <scope line="548"/>
            </method>
            <method name="testAngle" type="void" line="554">
                <comment line="568">
                    expected behavior                    
                </comment>
                <scope line="564"/>
                <scope line="567"/>
            </method>
            <method name="testAccurateDotProduct" type="void" line="573">
                <comment line="574">
                    the following two vectors are nearly but not exactly orthogonal                    
                </comment>
                <comment line="575">
                    naive dot product (i.e. computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z                    
                </comment>
                <comment line="576">
                    leads to a result of 0.0, instead of the correct -1.855129...                    
                </comment>
                <declaration name="u1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="577"/>
                <declaration name="u2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="580"/>
                <declaration name="sNaive" type="DerivativeStructure" line="583"/>
                <declaration name="sAccurate" type="DerivativeStructure" line="584"/>
            </method>
            <method name="testDotProduct" type="void" line="590">
                <comment line="591">
                    we compare accurate versus naive dot product implementations                    
                </comment>
                <comment line="592">
                    on regular vectors (i.e. not extreme cases like in the previous test)                    
                </comment>
                <declaration name="random" type="Well1024a" line="593"/>
                <scope line="594">
                    <declaration name="ux" type="double" line="595"/>
                    <declaration name="uy" type="double" line="596"/>
                    <declaration name="uz" type="double" line="597"/>
                    <declaration name="vx" type="double" line="598"/>
                    <declaration name="vy" type="double" line="599"/>
                    <declaration name="vz" type="double" line="600"/>
                    <declaration name="sNaive" type="double" line="601"/>
                    <declaration name="uds" type="FieldVector3D&lt;DerivativeStructure&gt;" line="603"/>
                    <declaration name="vds" type="FieldVector3D&lt;DerivativeStructure&gt;" line="604"/>
                    <declaration name="v" type="Vector3D" line="605"/>
                    <declaration name="sAccurate" type="DerivativeStructure" line="607"/>
                </scope>
            </method>
            <method name="testAccurateCrossProduct" type="void" line="623">
                <comment line="624">
                    the vectors u1 and u2 are nearly but not exactly anti-parallel                    
                </comment>
                <comment line="625">
                    (7.31e-16 degrees from 180 degrees) naive cross product (i.e.                    
                </comment>
                <comment line="626">
                    computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z                    
                </comment>
                <comment line="627">
                    leads to a result of   [0.0009765, -0.0001220, -0.0039062],                    
                </comment>
                <comment line="628">
                    instead of the correct [0.0006913, -0.0001254, -0.0007909]                    
                </comment>
                <declaration name="u1" type="FieldVector3D&lt;DerivativeStructure&gt;" line="629"/>
                <declaration name="u2" type="FieldVector3D&lt;DerivativeStructure&gt;" line="632"/>
                <declaration name="u3" type="FieldVector3D&lt;DerivativeStructure&gt;" line="635"/>
                <declaration name="cNaive" type="FieldVector3D&lt;DerivativeStructure&gt;" line="638"/>
                <declaration name="cAccurate" type="FieldVector3D&lt;DerivativeStructure&gt;" line="641"/>
            </method>
            <method name="testCrossProduct" type="void" line="647">
                <comment line="648">
                    we compare accurate versus naive cross product implementations                    
                </comment>
                <comment line="649">
                    on regular vectors (i.e. not extreme cases like in the previous test)                    
                </comment>
                <declaration name="random" type="Well1024a" line="650"/>
                <scope line="651">
                    <declaration name="ux" type="double" line="652"/>
                    <declaration name="uy" type="double" line="653"/>
                    <declaration name="uz" type="double" line="654"/>
                    <declaration name="vx" type="double" line="655"/>
                    <declaration name="vy" type="double" line="656"/>
                    <declaration name="vz" type="double" line="657"/>
                    <declaration name="cNaive" type="Vector3D" line="658"/>
                    <declaration name="uds" type="FieldVector3D&lt;DerivativeStructure&gt;" line="660"/>
                    <declaration name="vds" type="FieldVector3D&lt;DerivativeStructure&gt;" line="661"/>
                    <declaration name="v" type="Vector3D" line="662"/>
                </scope>
            </method>
            <method name="createVector" type="FieldVector3D<DerivativeStructure>" line="679">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                    <param name="params" type="int"/>
                </params>
            </method>
            <method name="checkVector" type="void" line="685">
                <params>
                    <param name="v" type="FieldVector3D<DerivativeStructure>"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
            </method>
            <method name="checkVector" type="void" line="694">
                <params>
                    <param name="v" type="FieldVector3D<DerivativeStructure>"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                    <param name="dxdx" type="double"/>
                    <param name="dxdy" type="double"/>
                    <param name="dxdz" type="double"/>
                    <param name="dydx" type="double"/>
                    <param name="dydy" type="double"/>
                    <param name="dydz" type="double"/>
                    <param name="dzdx" type="double"/>
                    <param name="dzdy" type="double"/>
                    <param name="dzdz" type="double"/>
                </params>
            </method>
            <method name="checkVector" type="void" line="712">
                <params>
                    <param name="v" type="FieldVector3D<DerivativeStructure>"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                    <param name="dxdx" type="double"/>
                    <param name="dxdy" type="double"/>
                    <param name="dxdz" type="double"/>
                    <param name="dxdt" type="double"/>
                    <param name="dydx" type="double"/>
                    <param name="dydy" type="double"/>
                    <param name="dydz" type="double"/>
                    <param name="dydt" type="double"/>
                    <param name="dzdx" type="double"/>
                    <param name="dzdy" type="double"/>
                    <param name="dzdz" type="double"/>
                    <param name="dzdt" type="double"/>
                </params>
            </method>
        </class>
    </source>