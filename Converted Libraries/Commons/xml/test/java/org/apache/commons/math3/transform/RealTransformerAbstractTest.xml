<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="RealTransformerAbstractTest" line="10">
            <javadoc line="10">
                Abstract test for classes implementing the {@link RealTransformer} interface.
                  This abstract test handles the automatic generation of random data of various
                  sizes. For each generated data array, actual values (returned by the
                  transformer to be tested) are compared to expected values, returned by the{@link #transform(double[],TransformType)} (to be implemented by the user:
                  a naive method may be used). Methods are also provided to test that invalid
                  parameters throw the expected exceptions.                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: RealTransformerAbstractTest.java 1244375 2012-02-15 06:30:05Z celestin $                    
                </version>
            </javadoc>
            <declaration name="SEED" type="long" line="21"/>
            <javadoc line="21">
                The common seed of all random number generators used in this test.                
            </javadoc>
            <method name="createRealTransformer" type="RealTransformer" line="25"/>
            <javadoc line="25">
                Returns a new instance of the {@link RealTransformer} to be tested.                
                <return>
                    a the transformer to be tested                    
                </return>
            </javadoc>
            <method name="getInvalidDataSize" type="int" line="30"/>
            <javadoc line="30">
                Returns an invalid data size. Transforms with this data size should
                  trigger a {@link MathIllegalArgumentException}.                
                <param>
                    i the index of the invalid data size ({@code 0 <= i <}{@link #getNumberOfInvalidDataSizes()}                    
                </param>
                <return>
                    an invalid data size                    
                </return>
            </javadoc>
            <method name="getNumberOfInvalidDataSizes" type="int" line="37"/>
            <javadoc line="37">
                Returns the total number of invalid data sizes to be tested. If data
                  array of any
                  size can be handled by the {@link RealTransformer} to be tested, this
                  method should return {@code 0}.                
                <return>
                    the total number of invalid data sizes                    
                </return>
            </javadoc>
            <method name="getNumberOfValidDataSizes" type="int" line="45"/>
            <javadoc line="45">
                Returns the total number of valid data sizes to be tested.                
                <return>
                    the total number of valid data sizes                    
                </return>
            </javadoc>
            <method name="getRelativeTolerance" type="double" line="50"/>
            <javadoc line="50">
                Returns the expected relative accuracy for data arrays of size{@code getValidDataSize(i)}.                
                <param>
                    i the index of the valid data size                    
                </param>
                <return>
                    the expected relative accuracy                    
                </return>
            </javadoc>
            <method name="getValidDataSize" type="int" line="56"/>
            <javadoc line="56">
                Returns a valid data size. This method allows for data arrays of various
                  sizes to be automatically tested (by allowing multiple values of the
                  specified index).                
                <param>
                    i the index of the valid data size ({@code 0 <= i <}{@link #getNumberOfValidDataSizes()}                    
                </param>
                <return>
                    a valid data size                    
                </return>
            </javadoc>
            <method name="getValidFunction" type="UnivariateFunction" line="64"/>
            <javadoc line="64">
                Returns a function for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
                  This function should be valid. In other words, none of the above methods
                  should throw an exception when passed this function.                
                <return>
                    a valid function                    
                </return>
            </javadoc>
            <method name="getValidLowerBound" type="double" line="71"/>
            <javadoc line="71">
                Returns a sampling lower bound for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
                  This lower bound should be valid. In other words, none of the above
                  methods should throw an exception when passed this bound.                
                <return>
                    a valid lower bound                    
                </return>
            </javadoc>
            <method name="getValidUpperBound" type="double" line="78"/>
            <javadoc line="78">
                Returns a sampling upper bound for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
                  This upper bound should be valid. In other words, none of the above
                  methods should throw an exception when passed this bound.                
                <return>
                    a valid bound                    
                </return>
            </javadoc>
            <method name="transform" type="double[]" line="85"/>
            <javadoc line="85">
                Returns the expected transform of the specified real data array.                
                <param>
                    x the real data array to be transformed                    
                </param>
                <param>
                    type the type of transform (forward, inverse) to be performed                    
                </param>
                <return>
                    the expected transform                    
                </return>
            </javadoc>
            <javadoc line="92">
                {@link RealTransformer#transform(double[],TransformType)} should throw a{@link MathIllegalArgumentException} if data size is invalid.                
            </javadoc>
            <method name="testTransformRealInvalidDataSize" type="void" line="95">
                <declaration name="type" type="TransformType[]" line="96"/>
                <declaration name="transformer" type="RealTransformer" line="97"/>
                <scope line="98">
                    <declaration name="n" type="int" line="99"/>
                    <scope line="100">
                        <scope line="101"/>
                        <scope line="105"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="110">
                {@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link MathIllegalArgumentException} if number of samples
                  is invalid.                
            </javadoc>
            <method name="testTransformFunctionInvalidDataSize" type="void" line="114">
                <declaration name="type" type="TransformType[]" line="115"/>
                <declaration name="transformer" type="RealTransformer" line="116"/>
                <declaration name="f" type="UnivariateFunction" line="117"/>
                <declaration name="a" type="double" line="118"/>
                <declaration name="b" type="double" line="119"/>
                <scope line="120">
                    <declaration name="n" type="int" line="121"/>
                    <scope line="122">
                        <scope line="123"/>
                        <scope line="127"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="132">
                {@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link NotStrictlyPositiveException} if number of samples
                  is not strictly positive.                
            </javadoc>
            <method name="testTransformFunctionNotStrictlyPositiveNumberOfSamples" type="void" line="136">
                <declaration name="type" type="TransformType[]" line="137"/>
                <declaration name="transformer" type="RealTransformer" line="138"/>
                <declaration name="f" type="UnivariateFunction" line="139"/>
                <declaration name="a" type="double" line="140"/>
                <declaration name="b" type="double" line="141"/>
                <scope line="142">
                    <declaration name="n" type="int" line="143"/>
                    <scope line="144">
                        <scope line="145"/>
                        <scope line="149"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="154">
                {@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link NumberIsTooLargeException} if sampling bounds are
                  not correctly ordered.                
            </javadoc>
            <method name="testTransformFunctionInvalidBounds" type="void" line="158">
                <declaration name="type" type="TransformType[]" line="159"/>
                <declaration name="transformer" type="RealTransformer" line="160"/>
                <declaration name="f" type="UnivariateFunction" line="161"/>
                <declaration name="a" type="double" line="162"/>
                <declaration name="b" type="double" line="163"/>
                <scope line="164">
                    <declaration name="n" type="int" line="165"/>
                    <scope line="166">
                        <scope line="167"/>
                        <scope line="171"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="176">
                Accuracy check of {@link RealTransformer#transform(double[],TransformType)}.
                  For each valid data size returned by{@link #getValidDataSize(int) getValidDataSize(i)},
                  a random data array is generated with{@link #createRealData(int) createRealData(i)}. The actual
                  transform is computed and compared to the expected transform, return by{@link #transform(double[],TransformType)}. Actual and expected values
                  should be equal to within the relative error returned by{@link #getRelativeTolerance(int) getRelativeTolerance(i)}.                
            </javadoc>
            <method name="testTransformReal" type="void" line="183">
                <declaration name="type" type="TransformType[]" line="184"/>
                <scope line="185">
                    <declaration name="n" type="int" line="186"/>
                    <declaration name="tol" type="double" line="187"/>
                    <scope line="188"/>
                </scope>
            </method>
            <javadoc line="193">
                Accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}.
                  For each valid data size returned by{@link #getValidDataSize(int) getValidDataSize(i)},
                  the {@link UnivariateFunction} returned by {@link #getValidFunction()} is
                  sampled. The actual transform is computed and compared to the expected
                  transform, return by {@link #transform(double[],TransformType)}. Actual
                  and expected values should be equal to within the relative error returned
                  by {@link #getRelativeTolerance(int) getRelativeTolerance(i)}.                
            </javadoc>
            <method name="testTransformFunction" type="void" line="202">
                <declaration name="type" type="TransformType[]" line="203"/>
                <scope line="204">
                    <declaration name="n" type="int" line="205"/>
                    <declaration name="tol" type="double" line="206"/>
                    <scope line="207"/>
                </scope>
            </method>
            <javadoc line="212">
                Returns a random array of doubles. Random generator always uses the same
                  seed.                
                <param>
                    n the size of the array to be returned                    
                </param>
                <return>
                    a random array of specified size                    
                </return>
            </javadoc>
            <method name="createRealData" type="double[]" line="218">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="random" type="Random" line="219"/>
                <declaration name="data" type="double[]" line="220"/>
                <scope line="221"/>
            </method>
            <method name="doTestTransformReal" type="void" line="226">
                <params>
                    <param name="n" type="int"/>
                    <param name="tol" type="double"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="transformer" type="RealTransformer" line="227"/>
                <declaration name="x" type="double[]" line="228"/>
                <declaration name="expected" type="double[]" line="229"/>
                <declaration name="actual" type="double[]" line="230"/>
                <scope line="231">
                    <declaration name="msg" type="String" line="232"/>
                    <declaration name="delta" type="double" line="233"/>
                </scope>
            </method>
            <method name="doTestTransformFunction" type="void" line="237">
                <params>
                    <param name="n" type="int"/>
                    <param name="tol" type="double"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="transformer" type="RealTransformer" line="238"/>
                <declaration name="f" type="UnivariateFunction" line="239"/>
                <declaration name="a" type="double" line="240"/>
                <declaration name="b" type="double" line="241"/>
                <declaration name="x" type="double[]" line="242"/>
                <scope line="243">
                    <declaration name="t" type="double" line="244"/>
                </scope>
                <declaration name="expected" type="double[]" line="247"/>
                <declaration name="actual" type="double[]" line="248"/>
                <scope line="249">
                    <declaration name="msg" type="String" line="250"/>
                    <declaration name="delta" type="double" line="251"/>
                </scope>
            </method>
        </class>
    </source>