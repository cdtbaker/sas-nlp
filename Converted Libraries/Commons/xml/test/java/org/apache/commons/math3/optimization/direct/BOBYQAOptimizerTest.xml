<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.InitialGuess"/>
        <import package="org.apache.commons.math3.optimization.SimpleBounds"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.Test"/>
        <class name="BOBYQAOptimizerTest" line="35">
            <comment line="238">
                See MATH-728                
            </comment>
            <comment line="239">
                TODO: this test is temporarily disabled for 3.2 release as a bug in Cobertura                
            </comment>
            <comment line="240">
                makes it run for several hours before completing                
            </comment>
            <javadoc line="35">
                Test for {@link BOBYQAOptimizer}.                
            </javadoc>
            <declaration name="DIM" type="int" line="40"/>
            <method name="testInitOutOfBounds" type="void" line="43">
                <declaration name="startPoint" type="double[]" line="44"/>
                <declaration name="boundaries" type="double[][]" line="45"/>
            </method>
            <method name="testBoundariesDimensionMismatch" type="void" line="52">
                <declaration name="startPoint" type="double[]" line="53"/>
                <declaration name="boundaries" type="double[][]" line="54"/>
            </method>
            <method name="testProblemDimensionTooSmall" type="void" line="61">
                <declaration name="startPoint" type="double[]" line="62"/>
            </method>
            <method name="testMaxEvaluations" type="void" line="69">
                <declaration name="lowMaxEval" type="int" line="70"/>
                <declaration name="startPoint" type="double[]" line="71"/>
                <declaration name="boundaries" type="double[][]" line="72"/>
            </method>
            <method name="testRosen" type="void" line="79">
                <declaration name="startPoint" type="double[]" line="80"/>
                <declaration name="boundaries" type="double[][]" line="81"/>
                <declaration name="expected" type="PointValuePair" line="82"/>
            </method>
            <method name="testMaximize" type="void" line="89">
                <declaration name="startPoint" type="double[]" line="90"/>
                <declaration name="boundaries" type="double[][]" line="91"/>
                <declaration name="expected" type="PointValuePair" line="92"/>
            </method>
            <method name="testEllipse" type="void" line="104">
                <declaration name="startPoint" type="double[]" line="105"/>
                <declaration name="boundaries" type="double[][]" line="106"/>
                <declaration name="expected" type="PointValuePair" line="107"/>
            </method>
            <method name="testElliRotated" type="void" line="115">
                <declaration name="startPoint" type="double[]" line="116"/>
                <declaration name="boundaries" type="double[][]" line="117"/>
                <declaration name="expected" type="PointValuePair" line="118"/>
            </method>
            <method name="testCigar" type="void" line="126">
                <declaration name="startPoint" type="double[]" line="127"/>
                <declaration name="boundaries" type="double[][]" line="128"/>
                <declaration name="expected" type="PointValuePair" line="129"/>
            </method>
            <method name="testTwoAxes" type="void" line="137">
                <declaration name="startPoint" type="double[]" line="138"/>
                <declaration name="boundaries" type="double[][]" line="139"/>
                <declaration name="expected" type="PointValuePair" line="140"/>
            </method>
            <method name="testCigTab" type="void" line="148">
                <declaration name="startPoint" type="double[]" line="149"/>
                <declaration name="boundaries" type="double[][]" line="150"/>
                <declaration name="expected" type="PointValuePair" line="151"/>
            </method>
            <method name="testSphere" type="void" line="159">
                <declaration name="startPoint" type="double[]" line="160"/>
                <declaration name="boundaries" type="double[][]" line="161"/>
                <declaration name="expected" type="PointValuePair" line="162"/>
            </method>
            <method name="testTablet" type="void" line="170">
                <declaration name="startPoint" type="double[]" line="171"/>
                <declaration name="boundaries" type="double[][]" line="172"/>
                <declaration name="expected" type="PointValuePair" line="173"/>
            </method>
            <method name="testDiffPow" type="void" line="181">
                <declaration name="startPoint" type="double[]" line="182"/>
                <declaration name="boundaries" type="double[][]" line="183"/>
                <declaration name="expected" type="PointValuePair" line="184"/>
            </method>
            <method name="testSsDiffPow" type="void" line="192">
                <declaration name="startPoint" type="double[]" line="193"/>
                <declaration name="boundaries" type="double[][]" line="194"/>
                <declaration name="expected" type="PointValuePair" line="195"/>
            </method>
            <method name="testAckley" type="void" line="203">
                <declaration name="startPoint" type="double[]" line="204"/>
                <declaration name="boundaries" type="double[][]" line="205"/>
                <declaration name="expected" type="PointValuePair" line="206"/>
            </method>
            <method name="testRastrigin" type="void" line="214">
                <declaration name="startPoint" type="double[]" line="215"/>
                <declaration name="boundaries" type="double[][]" line="217"/>
                <declaration name="expected" type="PointValuePair" line="218"/>
            </method>
            <method name="testConstrainedRosen" type="void" line="226">
                <declaration name="startPoint" type="double[]" line="227"/>
                <declaration name="boundaries" type="double[][]" line="229"/>
                <declaration name="expected" type="PointValuePair" line="230"/>
            </method>
            <method name="testConstrainedRosenWithMoreInterpolationPoints" type="void" line="241">
                <comment line="246">
                    This should have been 78 because in the code the hard limit is                    
                </comment>
                <comment line="247">
                    said to be                    
                </comment>
                <comment line="248">
                    ((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)                    
                </comment>
                <comment line="249">
                    i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64,                    
                </comment>
                <comment line="250">
                    65, 66, ...                    
                </comment>
                <declaration name="startPoint" type="double[]" line="242"/>
                <declaration name="boundaries" type="double[][]" line="243"/>
                <declaration name="expected" type="PointValuePair" line="244"/>
                <declaration name="maxAdditionalPoints" type="int" line="251"/>
                <scope line="253"/>
            </method>
            <javadoc line="263">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="280">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                </params>
            </method>
            <javadoc line="293">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    additionalInterpolationPoints Number of interpolation to used
                      in addition to the default (2  dim + 1).                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="314">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="additionalInterpolationPoints" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                    <param name="assertMsg" type="String"/>
                </params>
                <comment line="316">
                    System.out.println(func.getClass().getName() + &quot; BEGIN&quot;); // XXX                    
                </comment>
                <comment line="319">
                    MultivariateOptimizer optim =                    
                </comment>
                <comment line="320">
                    new PowellOptimizer(1e-13, Math.ulp(1d));                    
                </comment>
                <comment line="321">
                    PointValuePair result = optim.optimize(100000, func, goal, startPoint);                    
                </comment>
                <comment line="332">
                    System.out.println(func.getClass().getName() + &quot; = &quot;                    
                </comment>
                <comment line="333">
                    + optim.getEvaluations() + &quot; f(&quot;);                    
                </comment>
                <comment line="334">
                    for (double x: result.getPoint())  System.out.print(x + &quot; &quot;);                    
                </comment>
                <comment line="335">
                    System.out.println(&quot;) = &quot; +  result.getValue());                    
                </comment>
                <comment line="342">
                    System.out.println(func.getClass().getName() + &quot; END&quot;); // XXX                    
                </comment>
                <declaration name="dim" type="int" line="318"/>
                <declaration name="lB" type="double[]" line="322"/>
                <declaration name="uB" type="double[]" line="323"/>
                <declaration name="numIterpolationPoints" type="int" line="324"/>
                <declaration name="optim" type="BOBYQAOptimizer" line="325"/>
                <declaration name="result" type="PointValuePair" line="326"/>
                <scope line="337"/>
            </method>
            <method name="point" type="double[]" line="345">
                <params>
                    <param name="n" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="ds" type="double[]" line="346"/>
            </method>
            <method name="boundaries" type="double[][]" line="352">
                <params>
                    <param name="dim" type="int"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <declaration name="boundaries" type="double[][]" line="353"/>
            </method>
            <class name="Sphere" line="361">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="363">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="364"/>
                </method>
            </class>
            <class name="Cigar" line="371">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="372"/>
                <method name="Cigar" type="constructor" line="374"/>
                <method name="Cigar" type="constructor" line="378">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="382">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="383"/>
                </method>
            </class>
            <class name="Tablet" line="390">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="391"/>
                <method name="Tablet" type="constructor" line="393"/>
                <method name="Tablet" type="constructor" line="397">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="401">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="402"/>
                </method>
            </class>
            <class name="CigTab" line="409">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="410"/>
                <method name="CigTab" type="constructor" line="412"/>
                <method name="CigTab" type="constructor" line="416">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="420">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="end" type="int" line="421"/>
                    <declaration name="f" type="double" line="422"/>
                </method>
            </class>
            <class name="TwoAxes" line="429">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="431"/>
                <method name="TwoAxes" type="constructor" line="433"/>
                <method name="TwoAxes" type="constructor" line="437">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="441">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="442"/>
                </method>
            </class>
            <class name="ElliRotated" line="449">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="B" type="Basis" line="450"/>
                <declaration name="factor" type="double" line="451"/>
                <method name="ElliRotated" type="constructor" line="453"/>
                <method name="ElliRotated" type="constructor" line="457">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="461">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="462"/>
                </method>
            </class>
            <class name="Elli" line="470">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="472"/>
                <method name="Elli" type="constructor" line="474"/>
                <method name="Elli" type="constructor" line="478">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="482">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="483"/>
                </method>
            </class>
            <class name="MinusElli" line="490">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="elli" type="Elli" line="491"/>
                <method name="value" type="double" line="492">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                </method>
            </class>
            <class name="DiffPow" line="497">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="499">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <comment line="504">
                        System.out.print(&quot;&quot; + (fcount++) + &quot;) &quot;);                        
                    </comment>
                    <comment line="505">
                        for (int i = 0; i &lt; x.length; i++)                        
                    </comment>
                    <comment line="506">
                        System.out.print(x[i] +  &quot; &quot;);                        
                    </comment>
                    <comment line="507">
                        System.out.println(&quot; = &quot; + f);                        
                    </comment>
                    <declaration name="f" type="double" line="500"/>
                </method>
            </class>
            <class name="SsDiffPow" line="512">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="514">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="515"/>
                </method>
            </class>
            <class name="Rosen" line="520">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="522">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="523"/>
                </method>
            </class>
            <class name="Ackley" line="531">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="532"/>
                <method name="Ackley" type="constructor" line="534">
                    <params>
                        <param name="axra" type="double"/>
                    </params>
                </method>
                <method name="Ackley" type="constructor" line="538"/>
                <method name="value" type="double" line="542">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="543"/>
                    <declaration name="res2" type="double" line="544"/>
                    <declaration name="fac" type="double" line="545"/>
                    <scope line="546"/>
                </method>
            </class>
            <class name="Rastrigin" line="557">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="559"/>
                <declaration name="amplitude" type="double" line="560"/>
                <method name="Rastrigin" type="constructor" line="562"/>
                <method name="Rastrigin" type="constructor" line="566">
                    <params>
                        <param name="axisratio" type="double"/>
                        <param name="amplitude" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="571">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="572"/>
                    <declaration name="fac" type="double" line="573"/>
                    <scope line="574"/>
                </method>
            </class>
            <class name="Basis" line="585">
                <comment line="499">
                    private int fcount = 0;                    
                </comment>
                <comment line="588">
                    use not always the same basis                    
                </comment>
                <declaration name="basis" type="double[][]" line="586"/>
                <declaration name="rand" type="Random" line="587"/>
                <method name="Rotate" type="double[]" line="589">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="y" type="double[]" line="591"/>
                    <scope line="592"/>
                </method>
                <method name="GenBasis" type="void" line="600">
                    <params>
                        <param name="DIM" type="int"/>
                    </params>
                    <comment line="607">
                                                
                    </comment>
                    <comment line="610">
                                                
                    </comment>
                    <comment line="613">
                                                
                    </comment>
                    <comment line="616">
                                                
                    </comment>
                    <comment line="618">
                                                
                    </comment>
                    <comment line="620">
                                                
                    </comment>
                    <comment line="622">
                                                
                    </comment>
                    <declaration name="sp" type="double" line="604"/>
                    <declaration name="i" type="int" line="605"/>
                    <scope line="609">
                        <scope line="614"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>