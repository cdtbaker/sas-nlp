<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting">
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.distribution.UniformRealDistribution"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <class name="PolynomialCurveFitterTest" line="30">
            <javadoc line="30">
                Test for class {@link PolynomialCurveFitter}.                
            </javadoc>
            <method name="testFit" type="void" line="35">
                <comment line="40">
                    12.9 - 3.4 x + 2.1 x^2                    
                </comment>
                <comment line="43">
                    Collect data from a known polynomial.                    
                </comment>
                <comment line="50">
                    Start fit from initial guesses that are far from the optimal values.                    
                </comment>
                <declaration name="rng" type="RealDistribution" line="36"/>
                <declaration name="coeff" type="double[]" line="39"/>
                <declaration name="f" type="PolynomialFunction" line="40"/>
                <declaration name="obs" type="WeightedObservedPoints" line="43"/>
                <scope line="44">
                    <declaration name="x" type="double" line="45"/>
                </scope>
                <declaration name="fitter" type="PolynomialCurveFitter" line="50"/>
                <declaration name="best" type="double[]" line="52"/>
            </method>
            <method name="testNoError" type="void" line="58">
                <declaration name="randomizer" type="Random" line="59"/>
                <scope line="60">
                    <declaration name="p" type="PolynomialFunction" line="61"/>
                    <declaration name="fitter" type="PolynomialCurveFitter" line="62"/>
                    <declaration name="obs" type="WeightedObservedPoints" line="64"/>
                    <scope line="65"/>
                    <declaration name="fitted" type="PolynomialFunction" line="69"/>
                    <scope line="71">
                        <declaration name="error" type="double" line="72"/>
                    </scope>
                </scope>
            </method>
            <method name="testSmallError" type="void" line="80">
                <declaration name="randomizer" type="Random" line="81"/>
                <declaration name="maxError" type="double" line="82"/>
                <scope line="83">
                    <declaration name="p" type="PolynomialFunction" line="84"/>
                    <declaration name="fitter" type="PolynomialCurveFitter" line="85"/>
                    <declaration name="obs" type="WeightedObservedPoints" line="87"/>
                    <scope line="88"/>
                    <declaration name="fitted" type="PolynomialFunction" line="92"/>
                    <scope line="94">
                        <declaration name="error" type="double" line="95"/>
                    </scope>
                </scope>
            </method>
            <method name="testRedundantSolvable" type="void" line="105">
                <comment line="107">
                    Levenberg-Marquardt should handle redundant information gracefully                    
                </comment>
            </method>
            <method name="testLargeSample" type="void" line="111">
                <declaration name="randomizer" type="Random" line="112"/>
                <declaration name="maxError" type="double" line="113"/>
                <scope line="114">
                    <declaration name="p" type="PolynomialFunction" line="115"/>
                    <declaration name="fitter" type="PolynomialCurveFitter" line="116"/>
                    <declaration name="obs" type="WeightedObservedPoints" line="118"/>
                    <scope line="119">
                        <declaration name="x" type="double" line="120"/>
                    </scope>
                    <declaration name="fitted" type="PolynomialFunction" line="124"/>
                    <scope line="125">
                        <declaration name="error" type="double" line="126"/>
                    </scope>
                </scope>
            </method>
            <method name="checkUnsolvableProblem" type="void" line="135">
                <params>
                    <param name="solvable" type="boolean"/>
                </params>
                <comment line="143">
                    reusing the same point over and over again does not bring
                     information, the problem cannot be solved in this case for
                     degrees greater than 1 (but one point is sufficient for
                     degree 0)                    
                </comment>
                <declaration name="randomizer" type="Random" line="136"/>
                <scope line="138">
                    <declaration name="p" type="PolynomialFunction" line="139"/>
                    <declaration name="fitter" type="PolynomialCurveFitter" line="140"/>
                    <declaration name="obs" type="WeightedObservedPoints" line="141"/>
                    <scope line="146"/>
                    <scope line="150"/>
                    <scope line="153"/>
                </scope>
            </method>
            <method name="buildRandomPolynomial" type="PolynomialFunction" line="159">
                <params>
                    <param name="degree" type="int"/>
                    <param name="randomizer" type="Random"/>
                </params>
                <declaration name="coefficients" type="double[]" line="160"/>
                <scope line="161"/>
            </method>
        </class>
    </source>