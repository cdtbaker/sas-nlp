<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.sampling">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="org.apache.commons.math3.ode.EquationsMapper"/>
        <class name="DummyStepInterpolator" line="26">
            <extends class="AbstractStepInterpolator"/>
            <javadoc line="26">
                This class is a step interpolator that does nothing.
                  &lt;p&gt;This class is used when the {@link StepHandler &quot;step handler&quot;}set up by the user does not need step interpolation. It does not
                  recompute the state when {@link AbstractStepInterpolator#setInterpolatedTimesetInterpolatedTime} is called. This implies the interpolated state
                  is always the state at the end of the current step.&lt;/p&gt;                
                <see>
                    StepHandler                    
                </see>
                <version>
                    $Id: DummyStepInterpolator.java 1302386 2012-03-19 11:59:25Z sebb $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="43">
                Serializable version identifier.                
            </javadoc>
            <declaration name="currentDerivative" type="double[]" line="46"/>
            <javadoc line="46">
                Current derivative.                
            </javadoc>
            <javadoc line="49">
                Simple constructor.
                  This constructor builds an instance that is not usable yet, the
                  &lt;code&gt;AbstractStepInterpolator.reinitialize&lt;/code&gt; protected method
                  should be called before using the instance in order to initialize
                  the internal arrays. This constructor is used only in order to delay
                  the initialization in some cases. As an example, the {@link org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator} uses
                  the prototyping design pattern to create the step interpolators by
                  cloning an uninitialized model and latter initializing the copy.                
            </javadoc>
            <method name="DummyStepInterpolator" type="constructor" line="59"/>
            <javadoc line="64">
                Simple constructor.                
                <param>
                    y reference to the integrator array holding the state at
                      the end of the step                    
                </param>
                <param>
                    yDot reference to the integrator array holding the state
                      derivative at some arbitrary point within the step                    
                </param>
                <param>
                    forward integration direction indicator                    
                </param>
            </javadoc>
            <method name="DummyStepInterpolator" type="constructor" line="71">
                <params>
                    <param name="y" type="double[]"/>
                    <param name="yDot" type="double[]"/>
                    <param name="forward" type="boolean"/>
                </params>
            </method>
            <javadoc line="76">
                Copy constructor.                
                <param>
                    interpolator interpolator to copy from. The copy is a deep
                      copy: its arrays are separated from the original arrays of the
                      instance                    
                </param>
            </javadoc>
            <method name="DummyStepInterpolator" type="constructor" line="81">
                <params>
                    <param name="interpolator" type="DummyStepInterpolator"/>
                </params>
            </method>
            <javadoc line="86">
                Really copy the finalized instance.                
                <return>
                    a copy of the finalized instance                    
                </return>
            </javadoc>
            <method name="doCopy" type="StepInterpolator" line="90"/>
            <javadoc line="94">
                Compute the state at the interpolated time.
                  In this class, this method does nothing: the interpolated state
                  is always the state at the end of the current step.                
                <param>
                    theta normalized interpolation abscissa within the step
                      (theta is zero at the previous time step and one at the current time step)                    
                </param>
                <param>
                    oneMinusThetaH time gap between the interpolated time and
                      the current time                    
                </param>
            </javadoc>
            <method name="computeInterpolatedStateAndDerivatives" type="void" line="103">
                <params>
                    <param name="theta" type="double"/>
                    <param name="oneMinusThetaH" type="double"/>
                </params>
            </method>
            <javadoc line="108">
                Write the instance to an output channel.                
                <param>
                    out output channel                    
                </param>
                <exception>
                    IOException if the instance cannot be written                    
                </exception>
            </javadoc>
            <method name="writeExternal" type="void" line="114">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
                <comment line="117">
                    save the state of the base class                    
                </comment>
                <scope line="119">
                    <scope line="120"/>
                </scope>
            </method>
            <javadoc line="127">
                Read the instance from an input channel.                
                <param>
                    in input channel                    
                </param>
                <exception>
                    IOException if the instance cannot be read                    
                </exception>
            </javadoc>
            <method name="readExternal" type="void" line="133">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
                <comment line="136">
                    read the base class                    
                </comment>
                <comment line="148">
                    we can now set the interpolated time and state                    
                </comment>
                <declaration name="t" type="double" line="136"/>
                <scope line="138"/>
                <scope line="140">
                    <scope line="142"/>
                </scope>
            </method>
        </class>
    </source>