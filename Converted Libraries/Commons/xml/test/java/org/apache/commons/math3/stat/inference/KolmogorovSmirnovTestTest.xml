<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.inference">
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.distribution.UniformRealDistribution"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="KolmogorovSmirnovTestTest" line="27">
            <comment line="38">
                Random N(0,1) values generated using R rnorm                
            </comment>
            <comment line="54">
                Random N(0, 1.6) values generated using R rnorm                
            </comment>
            <comment line="78">
                Random uniform (0, 1) generated using R runif                
            </comment>
            <javadoc line="27">
                Test cases for {@link KolmogorovSmirnovTest}.                
                <version>
                    $Id: KolmogorovSmirnovTestTest.java 1592430 2014-05-04 23:19:43Z psteitz $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="TOLERANCE" type="double" line="35"/>
            <declaration name="gaussian" type="double[]" line="38"/>
            <declaration name="gaussian2" type="double[]" line="54"/>
            <declaration name="uniform" type="double[]" line="78"/>
            <method name="testCumulativeDensityFunction" type="void" line="94">
                <comment line="99">
                    The code below is generated using the R-script located in
                     srctestRKolmogorovSmirnovDistributionTestCases.R R version 2.11.1 (2010-05-31)                    
                </comment>
                <comment line="104">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.005), n = as.integer(200), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 4.907829957616471622388047046469198862537e-86                    
                </comment>
                <comment line="111">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.02), n = as.integer(200), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 5.151982014280041957199687829849210629618e-06                    
                </comment>
                <comment line="117">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.031111), n = as.integer(200), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 0.01291614648162886340443389343590752105229                    
                </comment>
                <comment line="123">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.04), n = as.integer(200), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 0.1067137011362679355208626930107129737735                    
                </comment>
                <comment line="129">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.005), n = as.integer(341), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 1.914734701559404553985102395145063418825e-53                    
                </comment>
                <comment line="135">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.02), n = as.integer(341), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 0.001171328985781981343872182321774744195864                    
                </comment>
                <comment line="141">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.031111), n = as.integer(341), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 0.1142955196267499418105728636874118819833                    
                </comment>
                <comment line="147">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.04), n = as.integer(341), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 0.3685529520496805266915885113121476024389                    
                </comment>
                <comment line="153">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.005), n = as.integer(389), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 1.810657144595055888918455512707637574637e-47                    
                </comment>
                <comment line="159">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.02), n = as.integer(389), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 0.003068542559702356568168690742481885536108                    
                </comment>
                <comment line="165">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.031111), n = as.integer(389), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 0.1658291700122746237244797384846606291831                    
                </comment>
                <comment line="171">
                    formatC(.C(&quot;pkolmogorov2x&quot;, p = as.double(0.04), n = as.integer(389), PACKAGE =
                     &quot;stats&quot;)$p, 40) gives 0.4513143712128902529379104180407011881471                    
                </comment>
                <declaration name="test" type="KolmogorovSmirnovTest" line="96"/>
            </method>
            <javadoc line="177">
                Unit normal distribution, unit normal data                
            </javadoc>
            <method name="testOneSampleGaussianGaussian" type="void" line="179">
                <comment line="183">
                    Uncomment to run exact test - takes about a minute. Same value is used in R tests and for
                     approx.
                     Assert.assertEquals(0.3172069207622391, test.kolmogorovSmirnovTest(unitNormal, gaussian,
                     true), TOLERANCE);                    
                </comment>
                <declaration name="test" type="KolmogorovSmirnovTest" line="180"/>
                <declaration name="unitNormal" type="NormalDistribution" line="181"/>
            </method>
            <javadoc line="191">
                Unit normal distribution, unit normal data, small dataset                
            </javadoc>
            <method name="testOneSampleGaussianGaussianSmallSample" type="void" line="193">
                <declaration name="test" type="KolmogorovSmirnovTest" line="194"/>
                <declaration name="unitNormal" type="NormalDistribution" line="195"/>
                <declaration name="shortGaussian" type="double[]" line="196"/>
            </method>
            <javadoc line="203">
                Unit normal distribution, uniform data                
            </javadoc>
            <method name="testOneSampleGaussianUniform" type="void" line="205">
                <comment line="209">
                    Uncomment to run exact test - takes a long time. Same value is used in R tests and for
                     approx.
                     Assert.assertEquals(0.3172069207622391, test.kolmogorovSmirnovTest(unitNormal, uniform,
                     true), TOLERANCE);                    
                </comment>
                <declaration name="test" type="KolmogorovSmirnovTest" line="206"/>
                <declaration name="unitNormal" type="NormalDistribution" line="207"/>
            </method>
            <javadoc line="217">
                Uniform distribution, uniform data                
            </javadoc>
            <method name="testOneSampleUniformUniform" type="void" line="219">
                <comment line="219">
                    @Test - takes about 6 seconds, uncomment for                    
                </comment>
                <declaration name="test" type="KolmogorovSmirnovTest" line="220"/>
                <declaration name="unif" type="UniformRealDistribution" line="221"/>
            </method>
            <javadoc line="227">
                Uniform distribution, uniform data, small dataset                
            </javadoc>
            <method name="testOneSampleUniformUniformSmallSample" type="void" line="229">
                <declaration name="test" type="KolmogorovSmirnovTest" line="230"/>
                <declaration name="unif" type="UniformRealDistribution" line="231"/>
                <declaration name="shortUniform" type="double[]" line="232"/>
            </method>
            <javadoc line="239">
                Uniform distribution, unit normal dataset                
            </javadoc>
            <method name="testOneSampleUniformGaussian" type="void" line="241">
                <comment line="245">
                    Value was obtained via exact test, validated against R. Running exact test takes a long
                     time.                    
                </comment>
                <declaration name="test" type="KolmogorovSmirnovTest" line="242"/>
                <declaration name="unif" type="UniformRealDistribution" line="243"/>
            </method>
            <javadoc line="251">
                Small samples - exact p-value, checked against R                
            </javadoc>
            <method name="testTwoSampleSmallSampleExact" type="void" line="253">
                <comment line="262">
                    Reference values from R, version 2.15.3 - R uses non-strict inequality in null hypothesis                    
                </comment>
                <declaration name="test" type="KolmogorovSmirnovTest" line="254"/>
                <declaration name="smallSample1" type="double[]" line="255"/>
                <declaration name="smallSample2" type="double[]" line="258"/>
            </method>
            <javadoc line="267">
                Checks exact p-value computations using critical values from Table 9 in V.K Rohatgi, An
                  Introduction to Probability and Mathematical Statistics, Wiley, 1976, ISBN 0-471-73135-8.                
            </javadoc>
            <method name="testTwoSampleExactP" type="void" line="272"/>
            <method name="testTwoSampleApproximateCritialValues" type="void" line="283">
                <comment line="289">
                    From Wikipedia KS article - TODO: get (and test) more precise values                    
                </comment>
                <declaration name="tol" type="double" line="284"/>
                <declaration name="alpha" type="double[]" line="285"/>
                <declaration name="c" type="double[]" line="289"/>
                <declaration name="k" type="int" line="292"/>
                <declaration name="n" type="double" line="295"/>
                <declaration name="m" type="double" line="296"/>
                <scope line="297">
                    <scope line="298">
                        <scope line="301">
                            <declaration name="dCrit" type="double" line="302"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="309">
                Verifies large sample approximate p values against R                
            </javadoc>
            <method name="testTwoSampleApproximateP" type="void" line="311">
                <comment line="314">
                    Reference values from R, version 2.15.3                    
                </comment>
                <declaration name="test" type="KolmogorovSmirnovTest" line="312"/>
            </method>
            <javadoc line="318">
                Verifies that Monte Carlo simulation gives results close to exact p values. This test is a
                  little long-running (more than two minutes on a fast machine), so is disabled by default.                
            </javadoc>
            <method name="testTwoSampleMonteCarlo" type="void" line="323">
                <comment line="323">
                    @Test                    
                </comment>
                <declaration name="test" type="KolmogorovSmirnovTest" line="324"/>
                <declaration name="sampleSize" type="int" line="325"/>
                <declaration name="tol" type="double" line="326"/>
                <declaration name="shortUniform" type="double[]" line="327"/>
                <declaration name="shortGaussian" type="double[]" line="329"/>
                <declaration name="shortGaussian2" type="double[]" line="330"/>
                <declaration name="d" type="double[]" line="333"/>
                <scope line="337">
                    <declaration name="exactPStrict" type="double" line="338"/>
                    <declaration name="exactPNonStrict" type="double" line="339"/>
                    <declaration name="montePStrict" type="double" line="340"/>
                    <declaration name="montePNonStrict" type="double" line="342"/>
                </scope>
            </method>
            <javadoc line="349">
                Verifies the inequality exactP(criticalValue, n, m, true) &lt; alpha &lt; exactP(criticalValue, n,
                  m, false).
                  Note that the validity of this check depends on the fact that alpha lies strictly between two
                  attained values of the distribution and that criticalValue is one of the attained values. The
                  critical value table (reference below) uses attained values. This test therefore also
                  verifies that criticalValue is attained.                
                <param>
                    n first sample size                    
                </param>
                <param>
                    m second sample size                    
                </param>
                <param>
                    criticalValue critical value                    
                </param>
                <param>
                    alpha significance level                    
                </param>
            </javadoc>
            <method name="checkExactTable" type="void" line="363">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                    <param name="criticalValue" type="double"/>
                    <param name="alpha" type="double"/>
                </params>
                <declaration name="test" type="KolmogorovSmirnovTest" line="364"/>
            </method>
            <javadoc line="369">
                Verifies that approximateP(criticalValue, n, m) is within epsilon of alpha.                
                <param>
                    n first sample size                    
                </param>
                <param>
                    m second sample size                    
                </param>
                <param>
                    criticalValue critical value (from table)                    
                </param>
                <param>
                    alpha significance level                    
                </param>
                <param>
                    epsilon tolerance                    
                </param>
            </javadoc>
            <method name="checkApproximateTable" type="void" line="378">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                    <param name="criticalValue" type="double"/>
                    <param name="alpha" type="double"/>
                    <param name="epsilon" type="double"/>
                </params>
                <declaration name="test" type="KolmogorovSmirnovTest" line="379"/>
            </method>
        </class>
    </source>