<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="MultivariateFunctionMappingAdapterTest" line="27">
            <method name="testStartSimplexInsideRange" type="void" line="30">
                <declaration name="biQuadratic" type="BiQuadratic" line="32"/>
                <declaration name="wrapped" type="MultivariateFunctionMappingAdapter" line="33"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="38"/>
                <declaration name="optimum" type="PointValuePair" line="45"/>
                <declaration name="bounded" type="double[]" line="48"/>
            </method>
            <method name="testOptimumOutsideRange" type="void" line="56">
                <declaration name="biQuadratic" type="BiQuadratic" line="58"/>
                <declaration name="wrapped" type="MultivariateFunctionMappingAdapter" line="59"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="64"/>
                <declaration name="optimum" type="PointValuePair" line="71"/>
                <declaration name="bounded" type="double[]" line="74"/>
            </method>
            <method name="testUnbounded" type="void" line="82">
                <declaration name="biQuadratic" type="BiQuadratic" line="84"/>
                <declaration name="wrapped" type="MultivariateFunctionMappingAdapter" line="87"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="92"/>
                <declaration name="optimum" type="PointValuePair" line="99"/>
                <declaration name="bounded" type="double[]" line="102"/>
            </method>
            <method name="testHalfBounded" type="void" line="110">
                <declaration name="biQuadratic" type="BiQuadratic" line="112"/>
                <declaration name="wrapped" type="MultivariateFunctionMappingAdapter" line="115"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="120"/>
                <declaration name="optimum" type="PointValuePair" line="127"/>
                <declaration name="bounded" type="double[]" line="130"/>
            </method>
            <class name="BiQuadratic" line="137">
                <implements interface="MultivariateFunction"/>
                <declaration name="xOptimum" type="double" line="139"/>
                <declaration name="yOptimum" type="double" line="140"/>
                <declaration name="xMin" type="double" line="142"/>
                <declaration name="xMax" type="double" line="143"/>
                <declaration name="yMin" type="double" line="144"/>
                <declaration name="yMax" type="double" line="145"/>
                <method name="BiQuadratic" type="constructor" line="149">
                    <params>
                        <param name="xOptimum" type="double"/>
                        <param name="yOptimum" type="double"/>
                        <param name="xMin" type="double"/>
                        <param name="xMax" type="double"/>
                        <param name="yMin" type="double"/>
                        <param name="yMax" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="158">
                    <params>
                        <param name="point" type="double[]"/>
                    </params>
                    <comment line="160">
                        the function should never be called with out of range points                        
                    </comment>
                    <declaration name="dx" type="double" line="166"/>
                    <declaration name="dy" type="double" line="167"/>
                </method>
                <method name="getLower" type="double[]" line="172"/>
                <method name="getUpper" type="double[]" line="176"/>
                <method name="getBoundedXOptimum" type="double" line="180"/>
                <method name="getBoundedYOptimum" type="double" line="184"/>
            </class>
        </class>
    </source>