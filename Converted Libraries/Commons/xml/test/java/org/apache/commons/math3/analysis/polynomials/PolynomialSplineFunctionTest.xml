<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="PolynomialSplineFunctionTest" line="9">
            <javadoc line="9">
                Tests the PolynomialSplineFunction implementation.                
                <version>
                    $Id: PolynomialSplineFunctionTest.java 1364030 2012-07-21 01:10:04Z erans $                    
                </version>
            </javadoc>
            <declaration name="tolerance" type="double" line="14"/>
            <javadoc line="14">
                Error tolerance for tests                
            </javadoc>
            <declaration name="polynomials" type="PolynomialFunction[]" line="18"/>
            <javadoc line="18">
                Quadratic polynomials used in tests:
                  x^2 + x            [-1, 0)
                  x^2 + x + 2        [0, 1)
                  x^2 + x + 4        [1, 2)
                  Defined so that evaluation using PolynomialSplineFunction evaluation
                  algorithm agrees at knot point boundaries.                
            </javadoc>
            <declaration name="knots" type="double[]" line="27"/>
            <javadoc line="27">
                Knot points                
            </javadoc>
            <declaration name="dp" type="PolynomialFunction" line="31"/>
            <javadoc line="31">
                Derivative of test polynomials -- 2x + 1                
            </javadoc>
            <method name="testConstructor" type="void" line="35">
                <declaration name="spline" type="PolynomialSplineFunction" line="36"/>
                <scope line="40"/>
                <scope line="44"/>
                <scope line="46"/>
                <scope line="50"/>
                <scope line="52"/>
                <scope line="56"/>
            </method>
            <method name="testValues" type="void" line="59">
                <declaration name="spline" type="PolynomialSplineFunction" line="60"/>
                <declaration name="dSpline" type="UnivariateFunction" line="61"/>
                <declaration name="x" type="double" line="62"/>
                <declaration name="index" type="int" line="63"/>
                <scope line="64"/>
                <scope line="70"/>
                <scope line="74"/>
                <scope line="78"/>
                <scope line="80"/>
                <scope line="84"/>
            </method>
            <javadoc line="87">
                Do linear search to find largest knot point less than or equal to x.
                  Implementation does binary search.                
            </javadoc>
            <method name="findKnot" type="int" line="91">
                <params>
                    <param name="knots" type="double[]"/>
                    <param name="x" type="double"/>
                </params>
                <scope line="92"/>
                <scope line="95">
                    <scope line="96"/>
                </scope>
            </method>
        </class>
    </source>