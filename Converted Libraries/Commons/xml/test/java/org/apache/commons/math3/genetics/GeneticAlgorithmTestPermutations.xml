<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.genetics">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="GeneticAlgorithmTestPermutations" line="27">
            <comment line="36">
                parameters for the GA                
            </comment>
            <comment line="45">
                numbers from 0 to N-1                
            </comment>
            <javadoc line="27">
                This is also an example of usage.
                  This algorithm does &quot;stochastic sorting&quot; of a sequence 0,...,N.                
            </javadoc>
            <declaration name="DIMENSION" type="int" line="36"/>
            <declaration name="POPULATION_SIZE" type="int" line="37"/>
            <declaration name="NUM_GENERATIONS" type="int" line="38"/>
            <declaration name="ELITISM_RATE" type="double" line="39"/>
            <declaration name="CROSSOVER_RATE" type="double" line="40"/>
            <declaration name="MUTATION_RATE" type="double" line="41"/>
            <declaration name="TOURNAMENT_ARITY" type="int" line="42"/>
            <declaration name="sequence" type="List&lt;Integer&gt;" line="45"/>
            <scope line="46">
                <scope line="47"/>
            </scope>
            <method name="test" type="void" line="53">
                <comment line="54">
                    to test a stochastic algorithm is hard, so this will rather be an usage example                    
                </comment>
                <comment line="56">
                    initialize a new genetic algorithm                    
                </comment>
                <comment line="65">
                    initial population                    
                </comment>
                <comment line="67">
                    stopping conditions                    
                </comment>
                <comment line="70">
                    best initial chromosome                    
                </comment>
                <comment line="73">
                    run the algorithm                    
                </comment>
                <comment line="76">
                    best chromosome from the final population                    
                </comment>
                <comment line="79">
                    the only thing we can test is whether the final solution is not worse than the initial one                    
                </comment>
                <comment line="80">
                    however, for some implementations of GA, this need not be true :)                    
                </comment>
                <comment line="84">
                    System.out.println(bestInitial);                    
                </comment>
                <comment line="85">
                    System.out.println(bestFinal);                    
                </comment>
                <declaration name="ga" type="GeneticAlgorithm" line="57"/>
                <declaration name="initial" type="Population" line="66"/>
                <declaration name="stopCond" type="StoppingCondition" line="68"/>
                <declaration name="bestInitial" type="Chromosome" line="71"/>
                <declaration name="finalPopulation" type="Population" line="74"/>
                <declaration name="bestFinal" type="Chromosome" line="77"/>
            </method>
            <javadoc line="89">
                Initializes a random population                
            </javadoc>
            <method name="randomPopulation" type="ElitisticListPopulation" line="92">
                <declaration name="popList" type="List&lt;Chromosome&gt;" line="93"/>
                <scope line="94">
                    <declaration name="randChrom" type="Chromosome" line="95"/>
                </scope>
            </method>
            <class name="MinPermutations" line="101">
                <extends class="RandomKey">
                    <type_params>
                        <type_param name="Integer"/>
                    </type_params>
                </extends>
                <javadoc line="101">
                    Chromosomes representing a permutation of (0,1,2,...,DIMENSION-1).
                      The goal is to sort the sequence.                    
                </javadoc>
                <method name="MinPermutations" type="constructor" line="108">
                    <params>
                        <param name="representation" type="List<Double>"/>
                    </params>
                </method>
                <method name="fitness" type="double" line="112">
                    <comment line="118">
                        bad position found                        
                    </comment>
                    <comment line="122">
                        the most fitted chromosome is the one with minimal error                        
                    </comment>
                    <comment line="123">
                        therefore we must return negative value                        
                    </comment>
                    <declaration name="res" type="int" line="113"/>
                    <declaration name="decoded" type="List&lt;Integer&gt;" line="114"/>
                    <scope line="115">
                        <declaration name="value" type="int" line="116"/>
                        <scope line="117"/>
                    </scope>
                </method>
                <method name="newFixedLengthChromosome" type="AbstractListChromosome<Double>" line="128">
                    <params>
                        <param name="chromosomeRepresentation" type="List<Double>"/>
                    </params>
                </method>
            </class>
        </class>
    </source>