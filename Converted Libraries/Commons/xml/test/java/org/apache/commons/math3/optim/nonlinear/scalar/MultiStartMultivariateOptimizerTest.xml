<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.SimpleValueChecker"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer"/>
        <import package="org.apache.commons.math3.random.GaussianRandomGenerator"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomVectorGenerator"/>
        <import package="org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="MultiStartMultivariateOptimizerTest" line="36">
            <method name="testCircleFitting" type="void" line="38">
                <comment line="46">
                    TODO: the wrapper around NonLinearConjugateGradientOptimizer is a temporary hack for
                     version 3.1 of the library. It should be removed when NonLinearConjugateGradientOptimizer
                     will officially be declared as implementing MultivariateDifferentiableOptimizer                    
                </comment>
                <declaration name="circle" type="CircleScalar" line="39"/>
                <declaration name="underlying" type="GradientMultivariateOptimizer" line="48"/>
                <declaration name="g" type="JDKRandomGenerator" line="51"/>
                <declaration name="generator" type="RandomVectorGenerator" line="53"/>
                <declaration name="optimizer" type="MultiStartMultivariateOptimizer" line="57"/>
                <declaration name="optimum" type="PointValuePair" line="59"/>
                <declaration name="optima" type="PointValuePair[]" line="66"/>
                <scope line="67">
                    <declaration name="center" type="Vector2D" line="68"/>
                </scope>
            </method>
            <method name="testRosenbrock" type="void" line="79">
                <declaration name="rosenbrock" type="Rosenbrock" line="80"/>
                <declaration name="underlying" type="SimplexOptimizer" line="81"/>
                <declaration name="simplex" type="NelderMeadSimplex" line="83"/>
                <declaration name="g" type="JDKRandomGenerator" line="88"/>
                <declaration name="generator" type="RandomVectorGenerator" line="90"/>
                <declaration name="optimizer" type="MultiStartMultivariateOptimizer" line="92"/>
                <declaration name="optimum" type="PointValuePair" line="94"/>
            </method>
            <class name="Rosenbrock" line="107">
                <implements interface="MultivariateFunction"/>
                <declaration name="count" type="int" line="108"/>
                <method name="Rosenbrock" type="constructor" line="110"/>
                <method name="value" type="double" line="114">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="a" type="double" line="116"/>
                    <declaration name="b" type="double" line="117"/>
                </method>
                <method name="getCount" type="int" line="121"/>
            </class>
        </class>
    </source>