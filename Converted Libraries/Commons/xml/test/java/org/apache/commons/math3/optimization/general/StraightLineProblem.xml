<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.general">
        <import package="java.util.ArrayList"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.stat.regression.SimpleRegression"/>
        <class name="StraightLineProblem" line="7">
            <implements interface="MultivariateDifferentiableVectorFunction"/>
            <javadoc line="7">
                Class that models a straight line defined as {@code y = a x + b}.
                  The parameters of problem are:
                  &lt;ul&gt;
                  &lt;li&gt;{@code a}&lt;/li&gt;
                  &lt;li&gt;{@code b}&lt;/li&gt;
                  &lt;/ul&gt;
                  The model functions are:
                  &lt;ul&gt;
                  &lt;li&gt;for each pair (a, b), the y-coordinate of the line.&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <declaration name="points" type="ArrayList&lt;double[]&gt;" line="20"/>
            <javadoc line="20">
                Cloud of points assumed to be fitted by a straight line.                
            </javadoc>
            <declaration name="sigma" type="double" line="24"/>
            <javadoc line="24">
                Error (on the y-coordinate of the points).                
            </javadoc>
            <javadoc line="28">
                @param error Assumed error for the y-coordinate.                
            </javadoc>
            <method name="StraightLineProblem" type="constructor" line="31">
                <params>
                    <param name="error" type="double"/>
                </params>
            </method>
            <method name="addPoint" type="void" line="35">
                <params>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
            </method>
            <javadoc line="38">
                @return the list of x-coordinates.                
            </javadoc>
            <method name="x" type="double[]" line="41">
                <declaration name="v" type="double[]" line="42"/>
                <scope line="43">
                    <declaration name="p" type="double[]" line="44"/>
                </scope>
            </method>
            <javadoc line="49">
                @return the list of y-coordinates.                
            </javadoc>
            <method name="y" type="double[]" line="52">
                <declaration name="v" type="double[]" line="53"/>
                <scope line="54">
                    <declaration name="p" type="double[]" line="55"/>
                </scope>
            </method>
            <method name="target" type="double[]" line="60"/>
            <method name="weight" type="double[]" line="63">
                <declaration name="weight" type="double" line="64"/>
                <declaration name="w" type="double[]" line="65"/>
                <scope line="66"/>
            </method>
            <method name="value" type="double[]" line="71">
                <params>
                    <param name="params" type="double[]"/>
                </params>
                <declaration name="line" type="Model" line="72"/>
                <declaration name="model" type="double[]" line="73"/>
                <scope line="74">
                    <declaration name="p" type="double[]" line="75"/>
                </scope>
            </method>
            <method name="value" type="DerivativeStructure[]" line="80">
                <params>
                    <param name="params" type="DerivativeStructure[]"/>
                </params>
                <declaration name="line" type="Model" line="81"/>
                <declaration name="model" type="DerivativeStructure[]" line="82"/>
                <scope line="83">
                    <declaration name="p0" type="DerivativeStructure" line="84"/>
                </scope>
            </method>
            <javadoc line="89">
                Directly solve the linear problem, using the {@link SimpleRegression}class.                
            </javadoc>
            <method name="solve" type="double[]" line="92">
                <declaration name="regress" type="SimpleRegression" line="93"/>
                <scope line="94"/>
                <declaration name="result" type="double[]" line="97"/>
            </method>
            <class name="Model" line="100">
                <implements interface="UnivariateDifferentiableFunction"/>
                <javadoc line="100">
                    Linear function.                    
                </javadoc>
                <declaration name="a" type="DerivativeStructure" line="104"/>
                <declaration name="b" type="DerivativeStructure" line="105"/>
                <method name="Model" type="constructor" line="106">
                    <params>
                        <param name="a" type="DerivativeStructure"/>
                        <param name="b" type="DerivativeStructure"/>
                    </params>
                </method>
                <method name="value" type="double" line="110">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="value" type="DerivativeStructure" line="113">
                    <params>
                        <param name="x" type="DerivativeStructure"/>
                    </params>
                </method>
            </class>
        </class>
    </source>