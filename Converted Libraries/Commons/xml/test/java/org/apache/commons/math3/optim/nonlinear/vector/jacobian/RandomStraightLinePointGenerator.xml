<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector.jacobian">
        <import package="java.awt.geom.Point2D"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well44497b"/>
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.distribution.UniformRealDistribution"/>
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <class name="RandomStraightLinePointGenerator" line="8">
            <javadoc line="8">
                Factory for generating a cloud of points that approximate a straight line.                
            </javadoc>
            <declaration name="slope" type="double" line="12"/>
            <javadoc line="12">
                Slope.                
            </javadoc>
            <declaration name="intercept" type="double" line="16"/>
            <javadoc line="16">
                Intercept.                
            </javadoc>
            <declaration name="x" type="RealDistribution" line="20"/>
            <javadoc line="20">
                RNG for the x-coordinate.                
            </javadoc>
            <declaration name="error" type="RealDistribution" line="24"/>
            <javadoc line="24">
                RNG for the error on the y-coordinate.                
            </javadoc>
            <javadoc line="28">
                The generator will create a cloud of points whose x-coordinates
                  will be randomly sampled between {@code xLo} and {@code xHi}, and
                  the corresponding y-coordinates will be computed as
                  &lt;pre&gt;&lt;code&gt;
                  y = a x + b + N(0, error)
                  &lt;/code&gt;&lt;/pre&gt;
                  where {@code N(mean, sigma)} is a Gaussian distribution with the
                  given mean and standard deviation.                
                <param>
                    a Slope.                    
                </param>
                <param>
                    b Intercept.                    
                </param>
                <param>
                    sigma Standard deviation on the y-coordinate of the point.                    
                </param>
                <param>
                    lo Lowest value of the x-coordinate.                    
                </param>
                <param>
                    hi Highest value of the x-coordinate.                    
                </param>
                <param>
                    seed RNG seed.                    
                </param>
            </javadoc>
            <method name="RandomStraightLinePointGenerator" type="constructor" line="44">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="sigma" type="double"/>
                    <param name="lo" type="double"/>
                    <param name="hi" type="double"/>
                    <param name="seed" type="long"/>
                </params>
                <declaration name="rng" type="RandomGenerator" line="45"/>
            </method>
            <javadoc line="51">
                Point generator.                
                <param>
                    n Number of points to create.                    
                </param>
                <return>
                    the cloud of {@code n} points.                    
                </return>
            </javadoc>
            <method name="generate" type="Point2D.Double[]" line="56">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="cloud" type="Point2D.Double[]" line="57"/>
                <scope line="58"/>
            </method>
            <javadoc line="63">
                Create one point.                
                <return>
                    a point.                    
                </return>
            </javadoc>
            <method name="create" type="Point2D.Double" line="67">
                <declaration name="abscissa" type="double" line="68"/>
                <declaration name="yModel" type="double" line="69"/>
                <declaration name="ordinate" type="double" line="70"/>
            </method>
        </class>
    </source>