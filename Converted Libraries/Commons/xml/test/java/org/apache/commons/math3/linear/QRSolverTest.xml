<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <class name="QRSolverTest" line="27">
            <declaration name="testData3x3NonSingular" type="double[][]" line="28"/>
            <declaration name="testData3x3Singular" type="double[][]" line="34"/>
            <declaration name="testData3x4" type="double[][]" line="40"/>
            <declaration name="testData4x3" type="double[][]" line="46"/>
            <javadoc line="53">
                test rank                
            </javadoc>
            <method name="testRank" type="void" line="55">
                <declaration name="solver" type="DecompositionSolver" line="56"/>
            </method>
            <javadoc line="71">
                test solve dimension errors                
            </javadoc>
            <method name="testSolveDimensionErrors" type="void" line="73">
                <comment line="81">
                    expected behavior                    
                </comment>
                <comment line="87">
                    expected behavior                    
                </comment>
                <declaration name="solver" type="DecompositionSolver" line="74"/>
                <declaration name="b" type="RealMatrix" line="76"/>
                <scope line="77"/>
                <scope line="80"/>
                <scope line="83"/>
                <scope line="86"/>
            </method>
            <javadoc line="91">
                test solve rank errors                
            </javadoc>
            <method name="testSolveRankErrors" type="void" line="93">
                <comment line="101">
                    expected behavior                    
                </comment>
                <comment line="107">
                    expected behavior                    
                </comment>
                <declaration name="solver" type="DecompositionSolver" line="94"/>
                <declaration name="b" type="RealMatrix" line="96"/>
                <scope line="97"/>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="106"/>
            </method>
            <javadoc line="111">
                test solve                
            </javadoc>
            <method name="testSolve" type="void" line="113">
                <comment line="124">
                    using RealMatrix                    
                </comment>
                <comment line="127">
                    using ArrayRealVector                    
                </comment>
                <comment line="134">
                    using RealVector with an alternate implementation                    
                </comment>
                <declaration name="decomposition" type="QRDecomposition" line="114"/>
                <declaration name="solver" type="DecompositionSolver" line="116"/>
                <declaration name="b" type="RealMatrix" line="117"/>
                <declaration name="xRef" type="RealMatrix" line="120"/>
                <scope line="128">
                    <declaration name="x" type="RealVector" line="129"/>
                    <declaration name="error" type="double" line="130"/>
                </scope>
                <scope line="135">
                    <declaration name="v" type="ArrayRealVectorTest.RealVectorTestImpl" line="136"/>
                    <declaration name="x" type="RealVector" line="138"/>
                    <declaration name="error" type="double" line="139"/>
                </scope>
            </method>
            <method name="testOverdetermined" type="void" line="146">
                <comment line="153">
                    build a perturbed system: A.X + noise = B                    
                </comment>
                <comment line="163">
                    despite perturbation, the least square solution should be pretty good                    
                </comment>
                <declaration name="r" type="Random" line="147"/>
                <declaration name="p" type="int" line="148"/>
                <declaration name="q" type="int" line="149"/>
                <declaration name="a" type="RealMatrix" line="150"/>
                <declaration name="xRef" type="RealMatrix" line="151"/>
                <declaration name="b" type="RealMatrix" line="154"/>
                <declaration name="noise" type="double" line="155"/>
                <anonymous_class line="156">
                    <method name="visit" type="double" line="158">
                        <params>
                            <param name="row" type="int"/>
                            <param name="column" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="x" type="RealMatrix" line="164"/>
            </method>
            <method name="testUnderdetermined" type="void" line="170">
                <comment line="179">
                    too many equations, the system cannot be solved at all                    
                </comment>
                <comment line="182">
                    the last unknown should have been set to 0                    
                </comment>
                <declaration name="r" type="Random" line="171"/>
                <declaration name="p" type="int" line="172"/>
                <declaration name="q" type="int" line="173"/>
                <declaration name="a" type="RealMatrix" line="174"/>
                <declaration name="xRef" type="RealMatrix" line="175"/>
                <declaration name="b" type="RealMatrix" line="176"/>
                <declaration name="x" type="RealMatrix" line="177"/>
            </method>
            <method name="createTestMatrix" type="RealMatrix" line="186">
                <params>
                    <param name="r" type="Random"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="m" type="RealMatrix" line="187"/>
                <anonymous_class line="188">
                    <method name="visit" type="double" line="190">
                        <params>
                            <param name="row" type="int"/>
                            <param name="column" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>