<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.events">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.analysis.solvers.BaseSecantSolver"/>
        <import package="org.apache.commons.math3.analysis.solvers.PegasusSolver"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.ode.FirstOrderDifferentialEquations"/>
        <import package="org.apache.commons.math3.ode.FirstOrderIntegrator"/>
        <import package="org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="OverlappingEventsTest" line="15">
            <implements interface="FirstOrderDifferentialEquations"/>
            <javadoc line="15">
                Tests for overlapping state events. Also tests an event function that does
                  not converge to zero, but does have values of opposite sign around its root.                
            </javadoc>
            <declaration name="EVENT_TIMES1" type="double[]" line="20"/>
            <javadoc line="20">
                Expected event times for first event.                
            </javadoc>
            <declaration name="EVENT_TIMES2" type="double[]" line="24"/>
            <javadoc line="24">
                Expected event times for second event.                
            </javadoc>
            <javadoc line="28">
                Test for events that occur at the exact same time, but due to numerical
                  calculations occur very close together instead. Uses event type 0. See{@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double, double[])}.                
            </javadoc>
            <method name="testOverlappingEvents0" type="void" line="32"/>
            <javadoc line="35">
                Test for events that occur at the exact same time, but due to numerical
                  calculations occur very close together instead. Uses event type 1. See{@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double, double[])}.                
            </javadoc>
            <method name="testOverlappingEvents1" type="void" line="39"/>
            <javadoc line="42">
                Test for events that occur at the exact same time, but due to numerical
                  calculations occur very close together instead.                
                <param>
                    eventType the type of events to use. See{@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double, double[])}.                    
                </param>
            </javadoc>
            <method name="test" type="void" line="47">
                <params>
                    <param name="eventType" type="int"/>
                </params>
                <declaration name="e" type="double" line="48"/>
                <declaration name="integrator" type="FirstOrderIntegrator" line="49"/>
                <declaration name="rootSolver" type="BaseSecantSolver" line="50"/>
                <declaration name="evt1" type="EventHandler" line="51"/>
                <declaration name="evt2" type="EventHandler" line="52"/>
                <declaration name="t" type="double" line="55"/>
                <declaration name="tEnd" type="double" line="56"/>
                <declaration name="y" type="double[]" line="57"/>
                <declaration name="events1" type="List&lt;Double&gt;" line="58"/>
                <declaration name="events2" type="List&lt;Double&gt;" line="59"/>
                <scope line="60">
                    <scope line="62"/>
                    <scope line="66"/>
                </scope>
                <scope line="73"/>
                <scope line="76"/>
            </method>
            <javadoc line="80">
                {@inheritDoc}                
            </javadoc>
            <method name="getDimension" type="int" line="83"/>
            <javadoc line="86">
                {@inheritDoc}                
            </javadoc>
            <method name="computeDerivatives" type="void" line="89">
                <params>
                    <param name="t" type="double"/>
                    <param name="y" type="double[]"/>
                    <param name="yDot" type="double[]"/>
                </params>
            </method>
            <class name="Event" line="93">
                <implements interface="EventHandler"/>
                <javadoc line="93">
                    State events for this unit test.                    
                </javadoc>
                <declaration name="idx" type="int" line="97"/>
                <javadoc line="97">
                    The index of the continuous variable to use.                    
                </javadoc>
                <declaration name="eventType" type="int" line="101"/>
                <javadoc line="101">
                    The event type to use. See {@link #g}.                    
                </javadoc>
                <javadoc line="105">
                    Constructor for the {@link Event} class.                    
                    <param>
                        idx the index of the continuous variable to use                        
                    </param>
                    <param>
                        eventType the type of event to use. See {@link #g}                        
                    </param>
                </javadoc>
                <method name="Event" type="constructor" line="110">
                    <params>
                        <param name="idx" type="int"/>
                        <param name="eventType" type="int"/>
                    </params>
                </method>
                <javadoc line="114">
                    {@inheritDoc}                    
                </javadoc>
                <method name="init" type="void" line="117">
                    <params>
                        <param name="t0" type="double"/>
                        <param name="y0" type="double[]"/>
                        <param name="t" type="double"/>
                    </params>
                </method>
                <javadoc line="119">
                    {@inheritDoc}                    
                </javadoc>
                <method name="g" type="double" line="122">
                    <params>
                        <param name="t" type="double"/>
                        <param name="y" type="double[]"/>
                    </params>
                </method>
                <javadoc line="125">
                    {@inheritDoc}                    
                </javadoc>
                <method name="eventOccurred" type="Action" line="128">
                    <params>
                        <param name="t" type="double"/>
                        <param name="y" type="double[]"/>
                        <param name="increasing" type="boolean"/>
                    </params>
                </method>
                <javadoc line="131">
                    {@inheritDoc}                    
                </javadoc>
                <method name="resetState" type="void" line="134">
                    <params>
                        <param name="t" type="double"/>
                        <param name="y" type="double[]"/>
                    </params>
                </method>
            </class>
        </class>
    </source>