<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.net.URL"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator"/>
        <import package="org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator"/>
        <import package="org.apache.commons.math3.distribution.AbstractRealDistribution"/>
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.distribution.RealDistributionAbstractTest"/>
        <import package="org.apache.commons.math3.distribution.UniformRealDistribution"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Test"/>
        <class name="EmpiricalDistributionTest" line="44">
            <extends class="RealDistributionAbstractTest"/>
            <comment line="310">
                Setup for distribution tests                
            </comment>
            <javadoc line="44">
                Test cases for the EmpiricalDistribution class                
                <version>
                    $Id: EmpiricalDistributionTest.java 1547633 2013-12-03 23:03:06Z tn $                    
                </version>
            </javadoc>
            <declaration name="empiricalDistribution" type="EmpiricalDistribution" line="52"/>
            <declaration name="empiricalDistribution2" type="EmpiricalDistribution" line="53"/>
            <declaration name="file" type="File" line="54"/>
            <declaration name="url" type="URL" line="55"/>
            <declaration name="dataArray" type="double[]" line="56"/>
            <declaration name="n" type="int" line="57"/>
            <method name="setUp" type="void" line="61">
                <comment line="65">
                    empiricalDistribution = new EmpiricalDistribution(100, new RandomDataImpl()); // XXX Deprecated API                    
                </comment>
                <comment line="70">
                    empiricalDistribution2 = new EmpiricalDistribution(100, new RandomDataImpl()); // XXX Deprecated API                    
                </comment>
                <declaration name="list" type="ArrayList&amp;lt;Double&amp;gt;" line="66"/>
                <scope line="67">
                    <declaration name="in" type="BufferedReader" line="70"/>
                    <declaration name="str" type="String" line="73"/>
                    <scope line="74"/>
                </scope>
                <scope line="79"/>
                <declaration name="i" type="int" line="84"/>
                <scope line="85"/>
            </method>
            <javadoc line="91">
                Test EmpiricalDistrbution.load() using sample data file.&lt;br&gt;
                  Check that the sampleCount, mu and sigma match data in
                  the sample data file. Also verify that load is idempotent.                
            </javadoc>
            <method name="testLoad" type="void" line="97">
                <comment line="99">
                    Load from a URL                    
                </comment>
                <comment line="103">
                    Load again from a file (also verifies idempotency of load)                    
                </comment>
                <declaration name="file" type="File" line="103"/>
            </method>
            <method name="checkDistribution" type="void" line="108">
                <comment line="110">
                    testData File has 10000 values, with mean ~ 5.0, std dev ~ 1
                     Make sure that loaded distribution matches this                    
                </comment>
                <comment line="113">
                    TODO: replace with statistical tests                    
                </comment>
            </method>
            <javadoc line="119">
                Test EmpiricalDistrbution.load(double[]) using data taken from
                  sample data file.&lt;br&gt;
                  Check that the sampleCount, mu and sigma match data in
                  the sample data file.                
            </javadoc>
            <method name="testDoubleLoad" type="void" line="126">
                <comment line="129">
                    testData File has 10000 values, with mean ~ 5.0, std dev ~ 1
                     Make sure that loaded distribution matches this                    
                </comment>
                <comment line="132">
                    TODO: replace with statistical tests                    
                </comment>
                <declaration name="bounds" type="double[]" line="137"/>
            </method>
            <javadoc line="143">
                Generate 1000 random values and make sure they look OK.&lt;br&gt;
                  Note that there is a non-zero (but very small) probability that
                  these tests will fail even if the code is working as designed.                
            </javadoc>
            <method name="testNext" type="void" line="149"/>
            <javadoc line="154">
                Make sure exception thrown if digest getNext is attempted
                  before loading empiricalDistribution.                
            </javadoc>
            <method name="testNexFail" type="void" line="159">
                <comment line="166">
                    expected                    
                </comment>
                <scope line="160"/>
                <scope line="164"/>
            </method>
            <javadoc line="169">
                Make sure we can handle a grid size that is too fine                
            </javadoc>
            <method name="testGridTooFine" type="void" line="173"/>
            <javadoc line="180">
                How about too fat?                
            </javadoc>
            <method name="testGridTooFat" type="void" line="184">
                <comment line="187">
                    ridiculous tolerance; but ridiculous grid size
                     really just checking to make sure we do not bomb                    
                </comment>
            </method>
            <javadoc line="192">
                Test bin index overflow problem (BZ 36450)                
            </javadoc>
            <method name="testBinIndexOverflow" type="void" line="196">
                <declaration name="x" type="double[]" line="197"/>
            </method>
            <method name="testSerialization" type="void" line="202">
                <comment line="204">
                    Empty                    
                </comment>
                <comment line="209">
                    Loaded                    
                </comment>
                <declaration name="dist" type="EmpiricalDistribution" line="204"/>
                <declaration name="dist2" type="EmpiricalDistribution" line="205"/>
            </method>
            <method name="testLoadNullDoubleArray" type="void" line="215"/>
            <method name="testLoadNullURL" type="void" line="220"/>
            <method name="testLoadNullFile" type="void" line="225"/>
            <javadoc line="229">
                MATH-298                
            </javadoc>
            <method name="testGetBinUpperBounds" type="void" line="233">
                <declaration name="testData" type="double[]" line="234"/>
                <declaration name="dist" type="EmpiricalDistribution" line="235"/>
                <declaration name="expectedBinUpperBounds" type="double[]" line="237"/>
                <declaration name="expectedGeneratorUpperBounds" type="double[]" line="238"/>
                <declaration name="tol" type="double" line="239"/>
            </method>
            <method name="testGeneratorConfig" type="void" line="245">
                <comment line="256">
                    Verify no NPE with null generator argument                    
                </comment>
                <declaration name="testData" type="double[]" line="246"/>
                <declaration name="generator" type="RandomGenerator" line="247"/>
                <declaration name="dist" type="EmpiricalDistribution" line="249"/>
                <scope line="251"/>
            </method>
            <method name="testReSeed" type="void" line="262">
                <declaration name="values" type="double[]" line="265"/>
                <scope line="266"/>
                <scope line="270"/>
            </method>
            <method name="verifySame" type="void" line="275">
                <params>
                    <param name="d1" type="EmpiricalDistribution"/>
                    <param name="d2" type="EmpiricalDistribution"/>
                </params>
                <scope line="279">
                    <scope line="280"/>
                </scope>
            </method>
            <method name="tstGen" type="void" line="287">
                <params>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="stats" type="SummaryStatistics" line="290"/>
                <scope line="291"/>
            </method>
            <method name="tstDoubleGen" type="void" line="298">
                <params>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="stats" type="SummaryStatistics" line="301"/>
                <scope line="302"/>
            </method>
            <method name="makeDistribution" type="RealDistribution" line="312">
                <comment line="314">
                    Create a uniform distribution on [0, 10,000]                    
                </comment>
                <declaration name="sourceData" type="double[]" line="314"/>
                <scope line="315"/>
                <declaration name="dist" type="EmpiricalDistribution" line="318"/>
            </method>
            <declaration name="binMass" type="double" line="323"/>
            <javadoc line="323">
                Uniform bin mass = 10/10001 == mass of all but the first bin                
            </javadoc>
            <declaration name="firstBinMass" type="double" line="326"/>
            <javadoc line="326">
                Mass of first bin = 11/10001                
            </javadoc>
            <method name="makeCumulativeTestPoints" type="double[]" line="330">
                <declaration name="testPoints" type="double[]" line="331"/>
            </method>
            <method name="makeCumulativeTestValues" type="double[]" line="337">
                <comment line="339">
                    Bins should be [0, 10], (10, 20], ..., (9990, 10000]
                     Kernels should be N(4.5, 3.02765), N(14.5, 3.02765)...
                     Each bin should have mass 1010000 = .001                    
                </comment>
                <comment line="353">
                    Compute bMinus = sum or mass of bins below the bin containing the point
                     First bin has mass 11 / 10000, the rest have mass 10 / 10000.                    
                </comment>
                <declaration name="testPoints" type="double[]" line="343"/>
                <declaration name="cumValues" type="double[]" line="344"/>
                <declaration name="empiricalDistribution" type="EmpiricalDistribution" line="345"/>
                <declaration name="binBounds" type="double[]" line="346"/>
                <scope line="347">
                    <declaration name="bin" type="int" line="348"/>
                    <declaration name="lower" type="double" line="349"/>
                    <declaration name="upper" type="double" line="351"/>
                    <declaration name="bMinus" type="double" line="354"/>
                    <declaration name="kernel" type="RealDistribution" line="355"/>
                    <declaration name="withinBinKernelMass" type="double" line="356"/>
                    <declaration name="kernelCum" type="double" line="357"/>
                </scope>
            </method>
            <method name="makeDensityTestValues" type="double[]" line="364">
                <declaration name="testPoints" type="double[]" line="365"/>
                <declaration name="densityValues" type="double[]" line="366"/>
                <declaration name="empiricalDistribution" type="EmpiricalDistribution" line="367"/>
                <declaration name="binBounds" type="double[]" line="368"/>
                <scope line="369">
                    <declaration name="bin" type="int" line="370"/>
                    <declaration name="lower" type="double" line="371"/>
                    <declaration name="upper" type="double" line="373"/>
                    <declaration name="kernel" type="RealDistribution" line="374"/>
                    <declaration name="withinBinKernelMass" type="double" line="375"/>
                    <declaration name="density" type="double" line="376"/>
                </scope>
            </method>
            <javadoc line="382">
                Modify test integration bounds from the default. Because the distribution
                  has discontinuities at bin boundaries, integrals spanning multiple bins
                  will face convergence problems.  Only test within-bin integrals and spans
                  across no more than 3 bin boundaries.                
            </javadoc>
            <method name="testDensityIntegrals" type="void" line="390">
                <comment line="408">
                    Triangle integrals are very slow to converge                    
                </comment>
                <declaration name="distribution" type="RealDistribution" line="391"/>
                <declaration name="tol" type="double" line="392"/>
                <declaration name="integrator" type="BaseAbstractUnivariateIntegrator" line="393"/>
                <anonymous_class line="395">
                    <method name="value" type="double" line="396">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="d" type="UnivariateFunction" line="395"/>
                <declaration name="lower" type="double[]" line="400"/>
                <declaration name="upper" type="double[]" line="401"/>
                <scope line="402"/>
            </method>
            <javadoc line="412">
                Find the bin that x belongs (relative to {@link #makeDistribution()}).                
            </javadoc>
            <method name="findBin" type="int" line="415">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="417">
                    Number of bins below x should be trunc(x/10)                    
                </comment>
                <comment line="420">
                    If x falls on a bin boundary, it is in the lower bin                    
                </comment>
                <declaration name="nMinus" type="double" line="417"/>
                <declaration name="bin" type="int" line="418"/>
            </method>
            <javadoc line="423">
                Find the within-bin kernel for the bin with lower bound lower
                  and upper bound upper. All bins other than the first contain 10 points
                  exclusive of the lower bound and are centered at (lower + upper + 1) / 2.
                  The first bin includes its lower bound, 0, so has different mean and
                  standard deviation.                
            </javadoc>
            <method name="findKernel" type="RealDistribution" line="430">
                <params>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <scope line="431"/>
                <scope line="433"/>
            </method>
            <method name="testKernelOverrideConstant" type="void" line="439">
                <comment line="444">
                    Bin masses concentrated on 2, 5, 8, 11, 14 &lt;- effectively discrete uniform distribution over these                    
                </comment>
                <declaration name="dist" type="EmpiricalDistribution" line="440"/>
                <declaration name="data" type="double[]" line="441"/>
                <declaration name="values" type="double[]" line="444"/>
                <scope line="445"/>
                <declaration name="tol" type="double" line="448"/>
            </method>
            <method name="testKernelOverrideUniform" type="void" line="465">
                <comment line="470">
                    Kernels are uniform distributions on [1,3], [4,6], [7,9], [10,12], [13,15]                    
                </comment>
                <comment line="475">
                    Make sure v is not in the excluded range between bins - that is (bounds[i], bounds[i] + 1)                    
                </comment>
                <declaration name="dist" type="EmpiricalDistribution" line="466"/>
                <declaration name="data" type="double[]" line="467"/>
                <declaration name="bounds" type="double" line="470"/>
                <declaration name="tol" type="double" line="471"/>
                <scope line="472">
                    <declaration name="v" type="double" line="473"/>
                    <scope line="475"/>
                </scope>
            </method>
            <class name="ConstantKernelEmpiricalDistribution" line="495">
                <extends class="EmpiricalDistribution"/>
                <comment line="504">
                    Use constant distribution equal to bin mean within bin                    
                </comment>
                <javadoc line="495">
                    Empirical distribution using a constant smoothing kernel.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="499"/>
                <method name="ConstantKernelEmpiricalDistribution" type="constructor" line="500">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="getKernel" type="RealDistribution" line="505">
                    <params>
                        <param name="bStats" type="SummaryStatistics"/>
                    </params>
                </method>
            </class>
            <class name="UniformKernelEmpiricalDistribution" line="510">
                <extends class="EmpiricalDistribution"/>
                <comment line="504">
                    Use constant distribution equal to bin mean within bin                    
                </comment>
                <javadoc line="510">
                    Empirical distribution using a uniform smoothing kernel.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="514"/>
                <method name="UniformKernelEmpiricalDistribution" type="constructor" line="515">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="getKernel" type="RealDistribution" line="519">
                    <params>
                        <param name="bStats" type="SummaryStatistics"/>
                    </params>
                </method>
            </class>
            <class name="ConstantDistribution" line="525">
                <extends class="AbstractRealDistribution"/>
                <comment line="504">
                    Use constant distribution equal to bin mean within bin                    
                </comment>
                <javadoc line="525">
                    Distribution that takes just one value.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="529"/>
                <declaration name="c" type="double" line="531"/>
                <javadoc line="531">
                    Singleton value in the sample space                    
                </javadoc>
                <method name="ConstantDistribution" type="constructor" line="534">
                    <params>
                        <param name="c" type="double"/>
                    </params>
                </method>
                <method name="density" type="double" line="538">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="cumulativeProbability" type="double" line="542">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="inverseCumulativeProbability" type="double" line="547">
                    <params>
                        <param name="p" type="double"/>
                    </params>
                    <scope line="548"/>
                </method>
                <method name="getNumericalMean" type="double" line="554"/>
                <method name="getNumericalVariance" type="double" line="558"/>
                <method name="getSupportLowerBound" type="double" line="562"/>
                <method name="getSupportUpperBound" type="double" line="566"/>
                <method name="isSupportLowerBoundInclusive" type="boolean" line="570"/>
                <method name="isSupportUpperBoundInclusive" type="boolean" line="574"/>
                <method name="isSupportConnected" type="boolean" line="578"/>
                <method name="sample" type="double" line="583"/>
            </class>
        </class>
    </source>