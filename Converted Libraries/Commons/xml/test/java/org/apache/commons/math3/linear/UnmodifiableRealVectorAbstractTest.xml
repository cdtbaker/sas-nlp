<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.linear.RealVector.Entry"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="UnmodifiableRealVectorAbstractTest" line="14">
            <javadoc line="14">
                This is an abstract test of the {@link RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}implementation. These unmodifiable vectors decorate a (modifiable){@link RealVector}; therefore, a new implementation of this abstract
                  test should be considered for each implementation of{@link RealVector}.                
                <version>
                    $Id$                    
                </version>
            </javadoc>
            <declaration name="DIM" type="int" line="20"/>
            <javadoc line="20">
                The dimension of the randomly generated vectors.                
            </javadoc>
            <declaration name="EPS" type="double" line="24"/>
            <javadoc line="24">
                Absolute tolerance.                
            </javadoc>
            <declaration name="EXCLUDE" type="Set&lt;String&gt;" line="28"/>
            <javadoc line="28">
                The list of methods which are excluded from the general test{@link #testAllButExcluded()}.                
            </javadoc>
            <declaration name="RANDOM" type="Random" line="32"/>
            <javadoc line="32">
                The random number generator (always initialized with the same seed.                
            </javadoc>
            <scope line="36">
                <scope line="48"/>
            </scope>
            <javadoc line="53">
                Returns {@code true} if the specified {@code double} are equal (within a
                  given tolerance).                
                <param>
                    x First {@code double}.                    
                </param>
                <param>
                    y Second {@code double}.                    
                </param>
                <return>
                    {@code true} if {@code x} and {@code y} are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="60">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="61"/>
                <scope line="64"/>
                <scope line="67"/>
                <scope line="70"/>
            </method>
            <javadoc line="74">
                Returns {@code true} if the specified {@code double} arrays are equal
                  (within a given tolerance).                
                <param>
                    x First array.                    
                </param>
                <param>
                    y Second array.                    
                </param>
                <return>
                    {@code true} if {@code x} and {@code y} are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="81">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="82"/>
                <declaration name="n" type="int" line="85"/>
                <scope line="86">
                    <scope line="87"/>
                </scope>
            </method>
            <javadoc line="93">
                Returns {@code true} if the specified {@code RealVector} are equal
                  (within a given tolerance).                
                <param>
                    x First vector.                    
                </param>
                <param>
                    y Second vector.                    
                </param>
                <return>
                    {@code true} if {@code x} and {@code y} are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="100">
                <params>
                    <param name="x" type="RealVector"/>
                    <param name="y" type="RealVector"/>
                </params>
                <scope line="101"/>
                <declaration name="n" type="int" line="104"/>
                <scope line="105">
                    <scope line="106"/>
                </scope>
            </method>
            <javadoc line="112">
                Returns {@code true} if the specified {@code RealVector} is equal to the
                  specified {@code double} array (within a given tolerance).                
                <param>
                    x Vector.                    
                </param>
                <param>
                    y Array.                    
                </param>
                <return>
                    {@code true} if {@code x} and {@code y} are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="119">
                <params>
                    <param name="x" type="RealVector"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="120"/>
                <declaration name="n" type="int" line="123"/>
                <scope line="124">
                    <scope line="125"/>
                </scope>
            </method>
            <javadoc line="131">
                Returns {@code true} if the specified {@code RealMatrix} are equal
                  (within a given tolerance).                
                <param>
                    x First matrix.                    
                </param>
                <param>
                    y Second matrix.                    
                </param>
                <return>
                    {@code true} if {@code x} and {@code y} are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="138">
                <params>
                    <param name="x" type="RealMatrix"/>
                    <param name="y" type="RealMatrix"/>
                </params>
                <scope line="139"/>
                <scope line="142"/>
                <declaration name="rows" type="int" line="145"/>
                <declaration name="cols" type="int" line="146"/>
                <scope line="147">
                    <scope line="148">
                        <scope line="149"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="156">
                Returns {@code true} if the specified {@code Object} are equal.                
                <param>
                    x First object.                    
                </param>
                <param>
                    y Second object.                    
                </param>
                <return>
                    {@code true} if {@code x} and {@code y} are equal.                    
                </return>
                <throws>
                    IllegalArgumentException if {@code x} and {@code y} could
                      not be compared.                    
                </throws>
            </javadoc>
            <method name="equals" type="boolean" line="164">
                <params>
                    <param name="x" type="Object"/>
                    <param name="y" type="Object"/>
                </params>
                <scope line="165">
                    <scope line="166"/>
                    <scope line="169"/>
                </scope>
                <scope line="173">
                    <scope line="174"/>
                    <scope line="177"/>
                </scope>
                <scope line="181">
                    <scope line="182"/>
                    <scope line="185"/>
                </scope>
                <scope line="189">
                    <scope line="190"/>
                    <scope line="193"/>
                    <scope line="196"/>
                </scope>
                <scope line="200">
                    <scope line="201"/>
                    <scope line="204"/>
                    <scope line="207"/>
                </scope>
                <scope line="211">
                    <scope line="212"/>
                    <scope line="215"/>
                </scope>
                <scope line="219"/>
            </method>
            <method name="createVector" type="RealVector" line="223"/>
            <javadoc line="223">
                Creates a new random vector of a specified type. This vector is then to
                  be wrapped in an unmodifiable vector.                
                <return>
                    a new random vector.                    
                </return>
            </javadoc>
            <javadoc line="229">
                Creates a new random object of the specified type.                
                <param>
                    c Class of the object to be created.                    
                </param>
                <return>
                    a new random object.                    
                </return>
                <throws>
                    IllegalArgumentException if the specified class is not
                      recognized by this method.                    
                </throws>
            </javadoc>
            <method name="createParameter" type="Object" line="236">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
                <scope line="237"/>
                <scope line="240"/>
                <scope line="243">
                    <declaration name="v" type="double[]" line="244"/>
                    <scope line="245"/>
                </scope>
                <scope line="250"/>
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <javadoc line="260">
                This is the general test of most methods in the{@link RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}.
                  It works as follows.
                  First, an unmodifiable view of a copy of the specified random vector{@code u} is created: this defines {@code v}. Then the &lt;em&gt;same&lt;/em&gt;
                  method {@code m} is invoked on {@code u} and {@code v}, with randomly
                  generated parameters {@code args}.
                  If it turns out that {@code u} has changed after the call of method{@code m}, then this test checks that the call of this method on{@code v} resulted in a {@link MathUnsupportedOperationException}. If{@code u} was not modified, then this test checks that the results
                  returned by the call of method {@code m} on {@code u} and {@code v}returned the same result.                
                <param>
                    m Method to be tested.                    
                </param>
                <param>
                    u Random vector from which the unmodifiable view is to be
                      constructed.                    
                </param>
                <param>
                    args Arguments to be passed to method {@code m}.                    
                </param>
            </javadoc>
            <method name="callMethod" type="void" line="273">
                <params>
                    <param name="m" type="Method"/>
                    <param name="u" type="RealVector"/>
                    <param name="args" type="Object"/>
                </params>
                <declaration name="uu" type="RealVector" line="274"/>
                <declaration name="v" type="RealVector" line="275"/>
                <declaration name="exp" type="Object" line="276"/>
                <scope line="277">
                    <declaration name="act" type="Object" line="278"/>
                </scope>
                <scope line="282">
                    <declaration name="flag" type="boolean" line="283"/>
                    <scope line="284"/>
                    <scope line="287">
                        <scope line="288"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="295">
                This test calls {@link #callMethod(Method,RealVector,Object)} on
                  every method defined in interface {@link RealVector}. It generates the
                  appropriate random arguments. Some methods are manually excluded (see{@link #EXCLUDE}), they must be handled by separate tests.                
            </javadoc>
            <method name="testAllButExcluded" type="void" line="300">
                <declaration name="method" type="Method[]" line="301"/>
                <scope line="302">
                    <declaration name="m" type="Method" line="303"/>
                    <scope line="304">
                        <declaration name="u" type="RealVector" line="305"/>
                        <declaration name="paramType" type="Class&lt;?&gt;[]" line="306"/>
                        <declaration name="param" type="Object[]" line="307"/>
                        <scope line="308"/>
                    </scope>
                </scope>
            </method>
            <method name="testGetEntry" type="void" line="315">
                <declaration name="u" type="RealVector" line="316"/>
                <declaration name="v" type="RealVector" line="317"/>
                <scope line="318"/>
            </method>
            <method name="testSetEntry" type="void" line="322">
                <declaration name="u" type="RealVector" line="323"/>
                <declaration name="v" type="RealVector" line="324"/>
                <scope line="325"/>
            </method>
            <method name="testAddToEntry" type="void" line="329">
                <declaration name="u" type="RealVector" line="330"/>
                <declaration name="v" type="RealVector" line="331"/>
                <scope line="332"/>
            </method>
            <method name="testGetSubVector" type="void" line="336">
                <declaration name="u" type="RealVector" line="337"/>
                <declaration name="v" type="RealVector" line="338"/>
                <scope line="339">
                    <scope line="340">
                        <declaration name="exp" type="RealVector" line="341"/>
                        <declaration name="act" type="RealVector" line="342"/>
                    </scope>
                </scope>
            </method>
            <method name="testSetSubVector" type="void" line="347">
                <declaration name="u" type="RealVector" line="348"/>
                <declaration name="v" type="RealVector" line="349"/>
            </method>
            <method name="testIterator" type="void" line="352">
                <declaration name="u" type="RealVector" line="353"/>
                <declaration name="i" type="Iterator&lt;Entry&gt;" line="354"/>
                <declaration name="v" type="RealVector" line="355"/>
                <declaration name="j" type="Iterator&lt;Entry&gt;" line="356"/>
                <declaration name="flag" type="boolean" line="357"/>
                <scope line="358">
                    <declaration name="exp" type="Entry" line="360"/>
                    <declaration name="act" type="Entry" line="361"/>
                    <scope line="367"/>
                    <scope line="370"/>
                </scope>
            </method>
            <method name="testSparseIterator" type="void" line="377">
                <declaration name="u" type="RealVector" line="378"/>
                <declaration name="i" type="Iterator&lt;Entry&gt;" line="379"/>
                <declaration name="v" type="RealVector" line="380"/>
                <declaration name="j" type="Iterator&lt;Entry&gt;" line="381"/>
                <declaration name="flag" type="boolean" line="382"/>
                <scope line="383">
                    <declaration name="exp" type="Entry" line="385"/>
                    <declaration name="act" type="Entry" line="386"/>
                    <scope line="392"/>
                    <scope line="395"/>
                </scope>
            </method>
        </class>
    </source>