<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.ConcurrentModificationException"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Map"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Random"/>
        <import package="java.util.Set"/>
        <import package="java.util.Map.Entry"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.fraction.Fraction"/>
        <import package="org.apache.commons.math3.fraction.FractionConversionException"/>
        <import package="org.apache.commons.math3.fraction.FractionField"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Test"/>
        <class name="OpenIntToFieldTest" line="37">
            <comment line="172">
                                
            </comment>
            <declaration name="javaMap" type="Map&lt;Integer,Fraction&gt;" line="39"/>
            <declaration name="field" type="FractionField" line="40"/>
            <method name="setUp" type="void" line="43">
                <comment line="58">
                                        
                </comment>
            </method>
            <method name="generate" type="Map<Integer,Fraction>" line="62">
                <declaration name="map" type="Map&lt;Integer,Fraction&gt;" line="63"/>
                <declaration name="r" type="Random" line="64"/>
                <declaration name="dd" type="double" line="65"/>
                <scope line="68"/>
                <scope line="70"/>
            </method>
            <method name="createFromJavaMap" type="OpenIntToFieldHashMap<Fraction>" line="76">
                <params>
                    <param name="field" type="Field<Fraction>"/>
                </params>
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="77"/>
                <scope line="78"/>
            </method>
            <method name="testPutAndGetWith0ExpectedSize" type="void" line="85">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="86"/>
            </method>
            <method name="testPutAndGetWithExpectedSize" type="void" line="91">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="92"/>
            </method>
            <method name="testPutAndGet" type="void" line="97">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="98"/>
            </method>
            <method name="assertPutAndGet" type="void" line="102">
                <params>
                    <param name="map" type="OpenIntToFieldHashMap<Fraction>"/>
                </params>
            </method>
            <method name="assertPutAndGet" type="void" line="107">
                <params>
                    <param name="map" type="OpenIntToFieldHashMap<Fraction>"/>
                    <param name="mapSize" type="int"/>
                    <param name="keysInMap" type="Set<Integer>"/>
                </params>
                <scope line="109"/>
            </method>
            <method name="testPutAbsentOnExisting" type="void" line="119">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="120"/>
                <declaration name="size" type="int" line="121"/>
                <scope line="122"/>
            </method>
            <method name="testPutOnExisting" type="void" line="130">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="131"/>
                <scope line="132"/>
            </method>
            <method name="testGetAbsent" type="void" line="140">
                <declaration name="generated" type="Map&lt;Integer,Fraction&gt;" line="141"/>
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="142"/>
            </method>
            <method name="testGetFromEmpty" type="void" line="149">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="150"/>
            </method>
            <method name="testRemove" type="void" line="157">
                <comment line="168">
                                        
                </comment>
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="158"/>
                <declaration name="mapSize" type="int" line="159"/>
                <scope line="161"/>
            </method>
            <method name="testRemove2" type="void" line="173">
                <comment line="188">
                                        
                </comment>
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="174"/>
                <declaration name="mapSize" type="int" line="175"/>
                <declaration name="count" type="int" line="176"/>
                <declaration name="keysInMap" type="Set&lt;Integer&gt;" line="177"/>
                <scope line="178"/>
            </method>
            <method name="testRemoveFromEmpty" type="void" line="192">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="193"/>
            </method>
            <method name="testRemoveAbsent" type="void" line="198">
                <declaration name="generated" type="Map&lt;Integer,Fraction&gt;" line="199"/>
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="201"/>
                <declaration name="mapSize" type="int" line="202"/>
                <scope line="204"/>
            </method>
            <javadoc line="211">
                Returns a map with at least 100 elements where each element is absent from javaMap.                
            </javadoc>
            <method name="generateAbsent" type="Map<Integer,Fraction>" line="214">
                <declaration name="generated" type="Map&lt;Integer,Fraction&gt;" line="215"/>
                <scope line="216"/>
            </method>
            <method name="testCopy" type="void" line="225">
                <declaration name="copy" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="226"/>
            </method>
            <method name="testContainsKey" type="void" line="235">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="236"/>
                <scope line="237"/>
                <scope line="240"/>
                <scope line="243">
                    <declaration name="key" type="int" line="244"/>
                </scope>
            </method>
            <method name="testIterator" type="void" line="252">
                <comment line="270">
                    expected                    
                </comment>
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="253"/>
                <declaration name="iterator" type="OpenIntToFieldHashMap&lt;Fraction&gt;.Iterator" line="254"/>
                <scope line="255">
                    <declaration name="key" type="int" line="258"/>
                </scope>
                <scope line="265"/>
                <scope line="268"/>
            </method>
            <method name="testConcurrentModification" type="void" line="274">
                <comment line="283">
                    expected                    
                </comment>
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="275"/>
                <declaration name="iterator" type="OpenIntToFieldHashMap&lt;Fraction&gt;.Iterator" line="276"/>
                <scope line="278"/>
                <scope line="281"/>
            </method>
            <javadoc line="286">
                Regression test for a bug in findInsertionIndex where the hashing in the second probing
                  loop was inconsistent with the first causing duplicate keys after the right sequence
                  of puts and removes.                
            </javadoc>
            <method name="testPutKeysWithCollisions" type="void" line="292">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="293"/>
                <declaration name="key1" type="int" line="294"/>
                <declaration name="value1" type="Fraction" line="295"/>
                <declaration name="key2" type="int" line="297"/>
                <declaration name="key3" type="int" line="299"/>
                <declaration name="value2" type="Fraction" line="305"/>
            </method>
            <javadoc line="311">
                Similar to testPutKeysWithCollisions() but exercises the codepaths in a slightly
                  different manner.                
            </javadoc>
            <method name="testPutKeysWithCollision2" type="void" line="316">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="317"/>
                <declaration name="key1" type="int" line="318"/>
                <declaration name="value1" type="Fraction" line="319"/>
                <declaration name="key2" type="int" line="321"/>
                <declaration name="value2" type="Fraction" line="327"/>
            </method>
        </class>
    </source>