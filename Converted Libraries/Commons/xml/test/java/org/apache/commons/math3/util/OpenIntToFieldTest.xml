<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.ConcurrentModificationException"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Map"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Random"/>
        <import package="java.util.Set"/>
        <import package="java.util.Map.Entry"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.fraction.Fraction"/>
        <import package="org.apache.commons.math3.fraction.FractionConversionException"/>
        <import package="org.apache.commons.math3.fraction.FractionField"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Test"/>
        <class name="OpenIntToFieldTest" line="17">
            <declaration name="javaMap" type="Map&lt;Integer,Fraction&gt;" line="18"/>
            <declaration name="field" type="FractionField" line="19"/>
            <method name="setUp" type="void" line="20"/>
            <method name="generate" type="Map<Integer,Fraction>" line="35">
                <declaration name="map" type="Map&lt;Integer,Fraction&gt;" line="36"/>
                <declaration name="r" type="Random" line="37"/>
                <declaration name="dd" type="double" line="38"/>
                <scope line="40"/>
                <scope line="43"/>
            </method>
            <method name="createFromJavaMap" type="OpenIntToFieldHashMap<Fraction>" line="48">
                <params>
                    <param name="field" type="Field<Fraction>"/>
                </params>
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="49"/>
                <scope line="50"/>
            </method>
            <method name="testPutAndGetWith0ExpectedSize" type="void" line="55">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="56"/>
            </method>
            <method name="testPutAndGetWithExpectedSize" type="void" line="59">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="60"/>
            </method>
            <method name="testPutAndGet" type="void" line="63">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="64"/>
            </method>
            <method name="assertPutAndGet" type="void" line="67">
                <params>
                    <param name="map" type="OpenIntToFieldHashMap<Fraction>"/>
                </params>
            </method>
            <method name="assertPutAndGet" type="void" line="70">
                <params>
                    <param name="map" type="OpenIntToFieldHashMap<Fraction>"/>
                    <param name="mapSize" type="int"/>
                    <param name="keysInMap" type="Set<Integer>"/>
                </params>
                <scope line="72"/>
            </method>
            <method name="testPutAbsentOnExisting" type="void" line="79">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="80"/>
                <declaration name="size" type="int" line="81"/>
                <scope line="82"/>
            </method>
            <method name="testPutOnExisting" type="void" line="88">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="89"/>
                <scope line="90"/>
            </method>
            <method name="testGetAbsent" type="void" line="96">
                <declaration name="generated" type="Map&lt;Integer,Fraction&gt;" line="97"/>
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="98"/>
            </method>
            <method name="testGetFromEmpty" type="void" line="101">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="102"/>
            </method>
            <method name="testRemove" type="void" line="107">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="108"/>
                <declaration name="mapSize" type="int" line="109"/>
                <scope line="111"/>
            </method>
            <method name="testRemove2" type="void" line="118">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="119"/>
                <declaration name="mapSize" type="int" line="120"/>
                <declaration name="count" type="int" line="121"/>
                <declaration name="keysInMap" type="Set&lt;Integer&gt;" line="122"/>
                <scope line="123"/>
            </method>
            <method name="testRemoveFromEmpty" type="void" line="132">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="133"/>
            </method>
            <method name="testRemoveAbsent" type="void" line="136">
                <declaration name="generated" type="Map&lt;Integer,Fraction&gt;" line="137"/>
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="138"/>
                <declaration name="mapSize" type="int" line="139"/>
                <scope line="140"/>
            </method>
            <javadoc line="146">
                Returns a map with at least 100 elements where each element is absent from javaMap.                
            </javadoc>
            <method name="generateAbsent" type="Map<Integer,Fraction>" line="149">
                <declaration name="generated" type="Map&lt;Integer,Fraction&gt;" line="150"/>
                <scope line="151"/>
            </method>
            <method name="testCopy" type="void" line="158">
                <declaration name="copy" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="159"/>
            </method>
            <method name="testContainsKey" type="void" line="163">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="164"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171">
                    <declaration name="key" type="int" line="172"/>
                </scope>
            </method>
            <method name="testIterator" type="void" line="178">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="179"/>
                <declaration name="iterator" type="OpenIntToFieldHashMap&lt;Fraction&gt;.Iterator" line="180"/>
                <scope line="181">
                    <declaration name="key" type="int" line="184"/>
                </scope>
                <scope line="191"/>
                <scope line="195"/>
            </method>
            <method name="testConcurrentModification" type="void" line="198">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="199"/>
                <declaration name="iterator" type="OpenIntToFieldHashMap&lt;Fraction&gt;.Iterator" line="200"/>
                <scope line="202"/>
                <scope line="206"/>
            </method>
            <javadoc line="209">
                Regression test for a bug in findInsertionIndex where the hashing in the second probing
                  loop was inconsistent with the first causing duplicate keys after the right sequence
                  of puts and removes.                
            </javadoc>
            <method name="testPutKeysWithCollisions" type="void" line="214">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="215"/>
                <declaration name="key1" type="int" line="216"/>
                <declaration name="value1" type="Fraction" line="217"/>
                <declaration name="key2" type="int" line="219"/>
                <declaration name="key3" type="int" line="221"/>
                <declaration name="value2" type="Fraction" line="226"/>
            </method>
            <javadoc line="231">
                Similar to testPutKeysWithCollisions() but exercises the codepaths in a slightly
                  different manner.                
            </javadoc>
            <method name="testPutKeysWithCollision2" type="void" line="235">
                <declaration name="map" type="OpenIntToFieldHashMap&lt;Fraction&gt;" line="236"/>
                <declaration name="key1" type="int" line="237"/>
                <declaration name="value1" type="Fraction" line="238"/>
                <declaration name="key2" type="int" line="240"/>
                <declaration name="value2" type="Fraction" line="245"/>
            </method>
        </class>
    </source>