<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.general">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="StatisticalReferenceDataset" line="8">
            <javadoc line="8">
                This class gives access to the statistical reference datasets provided by the
                  NIST (available
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/strd/general/dataarchive.html&quot;&gt;here&lt;/a&gt;).
                  Instances of this class can be created by invocation of the{@link StatisticalReferenceDatasetFactory}.                
            </javadoc>
            <declaration name="name" type="String" line="15"/>
            <javadoc line="15">
                The name of this dataset.                
            </javadoc>
            <declaration name="numObservations" type="int" line="19"/>
            <javadoc line="19">
                The total number of observations (data points).                
            </javadoc>
            <declaration name="numParameters" type="int" line="23"/>
            <javadoc line="23">
                The total number of parameters.                
            </javadoc>
            <declaration name="numStartingPoints" type="int" line="27"/>
            <javadoc line="27">
                The total number of starting points for the optimizations.                
            </javadoc>
            <declaration name="x" type="double[]" line="31"/>
            <javadoc line="31">
                The values of the predictor.                
            </javadoc>
            <declaration name="y" type="double[]" line="35"/>
            <javadoc line="35">
                The values of the response.                
            </javadoc>
            <declaration name="startingValues" type="double[][]" line="39"/>
            <javadoc line="39">
                The starting values. {@code startingValues[j][i]} is the value of the{@code i}-th parameter in the {@code j}-th set of starting values.                
            </javadoc>
            <declaration name="a" type="double[]" line="43"/>
            <javadoc line="43">
                The certified values of the parameters.                
            </javadoc>
            <declaration name="sigA" type="double[]" line="47"/>
            <javadoc line="47">
                The certified values of the standard deviation of the parameters.                
            </javadoc>
            <declaration name="residualSumOfSquares" type="double" line="51"/>
            <javadoc line="51">
                The certified value of the residual sum of squares.                
            </javadoc>
            <declaration name="problem" type="MultivariateDifferentiableVectorFunction" line="55"/>
            <javadoc line="55">
                The least-squares problem.                
            </javadoc>
            <javadoc line="59">
                Creates a new instance of this class from the specified data file. The
                  file must follow the StRD format.                
                <param>
                    in the data file                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="StatisticalReferenceDataset" type="constructor" line="65">
                <params>
                    <param name="in" type="BufferedReader"/>
                </params>
                <declaration name="lines" type="ArrayList&lt;String&gt;" line="66"/>
                <scope line="67"/>
                <declaration name="index" type="int[]" line="70"/>
                <scope line="71"/>
                <scope line="77">
                    <declaration name="line" type="String" line="78"/>
                    <declaration name="tokens" type="String[]" line="79"/>
                </scope>
                <scope line="84"/>
                <declaration name="start" type="double[][]" line="88"/>
                <scope line="91">
                    <declaration name="line" type="String" line="92"/>
                    <declaration name="tokens" type="String[]" line="93"/>
                    <scope line="94"/>
                    <scope line="97"/>
                </scope>
                <scope line="103"/>
                <declaration name="dummyDouble" type="double" line="108"/>
                <declaration name="dummyString" type="String" line="109"/>
                <scope line="110">
                    <scope line="111"/>
                    <scope line="114">
                        <declaration name="tokens" type="String[]" line="115"/>
                    </scope>
                </scope>
                <scope line="119"/>
                <scope line="123"/>
                <anonymous_class line="127">
                    <method name="value" type="double[]" line="128">
                        <params>
                            <param name="a" type="double[]"/>
                        </params>
                        <declaration name="dsA" type="DerivativeStructure[]" line="129"/>
                        <scope line="130"/>
                        <declaration name="n" type="int" line="133"/>
                        <declaration name="yhat" type="double[]" line="134"/>
                        <scope line="135"/>
                    </method>
                    <method name="value" type="DerivativeStructure[]" line="140">
                        <params>
                            <param name="a" type="DerivativeStructure[]"/>
                        </params>
                        <declaration name="n" type="int" line="141"/>
                        <declaration name="yhat" type="DerivativeStructure[]" line="142"/>
                        <scope line="143"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="151">
                Returns the name of this dataset.                
                <return>
                    the name of the dataset                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="155"/>
            <javadoc line="158">
                Returns the total number of observations (data points).                
                <return>
                    the number of observations                    
                </return>
            </javadoc>
            <method name="getNumObservations" type="int" line="162"/>
            <javadoc line="165">
                Returns a copy of the data arrays. The data is laid out as follows &lt;li&gt;{@code data[0][i] = x[i]},&lt;/li&gt; &lt;li&gt;{@code data[1][i] = y[i]},&lt;/li&gt;                
                <return>
                    the array of data points.                    
                </return>
            </javadoc>
            <method name="getData" type="double[][]" line="169"/>
            <javadoc line="172">
                Returns the x-value of the {@code i}-th data point.                
                <param>
                    i the index of the data point                    
                </param>
                <return>
                    the x-value                    
                </return>
            </javadoc>
            <method name="getX" type="double" line="177">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="180">
                Returns the y-value of the {@code i}-th data point.                
                <param>
                    i the index of the data point                    
                </param>
                <return>
                    the y-value                    
                </return>
            </javadoc>
            <method name="getY" type="double" line="185">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="188">
                Returns the total number of parameters.                
                <return>
                    the number of parameters                    
                </return>
            </javadoc>
            <method name="getNumParameters" type="int" line="192"/>
            <javadoc line="195">
                Returns the certified values of the paramters.                
                <return>
                    the values of the parameters                    
                </return>
            </javadoc>
            <method name="getParameters" type="double[]" line="199"/>
            <javadoc line="202">
                Returns the certified value of the {@code i}-th parameter.                
                <param>
                    i the index of the parameter                    
                </param>
                <return>
                    the value of the parameter                    
                </return>
            </javadoc>
            <method name="getParameter" type="double" line="207">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="210">
                Reurns the certified values of the standard deviations of the parameters.                
                <return>
                    the standard deviations of the parameters                    
                </return>
            </javadoc>
            <method name="getParametersStandardDeviations" type="double[]" line="214"/>
            <javadoc line="217">
                Returns the certified value of the standard deviation of the {@code i}-th
                  parameter.                
                <param>
                    i the index of the parameter                    
                </param>
                <return>
                    the standard deviation of the parameter                    
                </return>
            </javadoc>
            <method name="getParameterStandardDeviation" type="double" line="223">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="226">
                Returns the certified value of the residual sum of squares.                
                <return>
                    the residual sum of squares                    
                </return>
            </javadoc>
            <method name="getResidualSumOfSquares" type="double" line="230"/>
            <javadoc line="233">
                Returns the total number of starting points (initial guesses for the
                  optimization process).                
                <return>
                    the number of starting points                    
                </return>
            </javadoc>
            <method name="getNumStartingPoints" type="int" line="238"/>
            <javadoc line="241">
                Returns the {@code i}-th set of initial values of the parameters.                
                <param>
                    i the index of the starting point                    
                </param>
                <return>
                    the starting point                    
                </return>
            </javadoc>
            <method name="getStartingPoint" type="double[]" line="246">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="249">
                Returns the least-squares problem corresponding to fitting the model to
                  the specified data.                
                <return>
                    the least-squares problem                    
                </return>
            </javadoc>
            <method name="getLeastSquaresProblem" type="MultivariateDifferentiableVectorFunction" line="254"/>
            <method name="getModelValue" type="DerivativeStructure" line="257"/>
            <javadoc line="257">
                Returns the value of the model for the specified values of the predictor
                  variable and the parameters.                
                <param>
                    x the predictor variable                    
                </param>
                <param>
                    a the parameters                    
                </param>
                <return>
                    the value of the model                    
                </return>
            </javadoc>
            <javadoc line="265">
                &lt;p&gt;
                  Parses the specified text lines, and extracts the indices of the first
                  and last lines of the data defined by the specified {@code key}. This key
                  must be one of
                  &lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@code &quot;Starting Values&quot;},&lt;/li&gt;
                  &lt;li&gt;{@code &quot;Certified Values&quot;},&lt;/li&gt;
                  &lt;li&gt;{@code &quot;Data&quot;}.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  In the NIST data files, the line indices are separated by the keywords{@code &quot;lines&quot;} and {@code &quot;to&quot;}.
                  &lt;/p&gt;                
                <param>
                    lines the line of text to be parsed                    
                </param>
                <return>
                    an array of two {@code int}s. First value is the index of the
                      first line, second value is the index of the last line.{@code null} if the line could not be parsed.                    
                </return>
            </javadoc>
            <method name="findLineNumbers" type="int[]" line="283">
                <params>
                    <param name="key" type="String"/>
                    <param name="lines" type="Iterable<String>"/>
                </params>
                <scope line="284">
                    <declaration name="flag" type="boolean" line="285"/>
                    <scope line="286">
                        <declaration name="numbers" type="int[]" line="287"/>
                        <declaration name="from" type="String" line="288"/>
                        <declaration name="to" type="String" line="290"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>