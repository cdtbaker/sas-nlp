<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.Retry"/>
        <import package="org.apache.commons.math3.RetryRunner"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.SimpleBounds"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.random.MersenneTwister"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.runner.RunWith"/>
        <class name="CMAESOptimizerTest" line="26">
            <javadoc line="26">
                Test for {@link CMAESOptimizer}.                
            </javadoc>
            <declaration name="DIM" type="int" line="30"/>
            <declaration name="LAMBDA" type="int" line="31"/>
            <method name="testInitOutofbounds1" type="void" line="32">
                <declaration name="startPoint" type="double[]" line="33"/>
                <declaration name="insigma" type="double[]" line="34"/>
                <declaration name="boundaries" type="double[][]" line="35"/>
                <declaration name="expected" type="PointValuePair" line="36"/>
            </method>
            <method name="testInitOutofbounds2" type="void" line="39">
                <declaration name="startPoint" type="double[]" line="40"/>
                <declaration name="insigma" type="double[]" line="41"/>
                <declaration name="boundaries" type="double[][]" line="42"/>
                <declaration name="expected" type="PointValuePair" line="43"/>
            </method>
            <method name="testBoundariesDimensionMismatch" type="void" line="46">
                <declaration name="startPoint" type="double[]" line="47"/>
                <declaration name="insigma" type="double[]" line="48"/>
                <declaration name="boundaries" type="double[][]" line="49"/>
                <declaration name="expected" type="PointValuePair" line="50"/>
            </method>
            <method name="testInputSigmaNegative" type="void" line="53">
                <declaration name="startPoint" type="double[]" line="54"/>
                <declaration name="insigma" type="double[]" line="55"/>
                <declaration name="boundaries" type="double[][]" line="56"/>
                <declaration name="expected" type="PointValuePair" line="57"/>
            </method>
            <method name="testInputSigmaOutOfRange" type="void" line="60">
                <declaration name="startPoint" type="double[]" line="61"/>
                <declaration name="insigma" type="double[]" line="62"/>
                <declaration name="boundaries" type="double[][]" line="63"/>
                <declaration name="expected" type="PointValuePair" line="64"/>
            </method>
            <method name="testInputSigmaDimensionMismatch" type="void" line="67">
                <declaration name="startPoint" type="double[]" line="68"/>
                <declaration name="insigma" type="double[]" line="69"/>
                <declaration name="boundaries" type="double[][]" line="70"/>
                <declaration name="expected" type="PointValuePair" line="71"/>
            </method>
            <method name="testRosen" type="void" line="74">
                <declaration name="startPoint" type="double[]" line="75"/>
                <declaration name="insigma" type="double[]" line="76"/>
                <declaration name="boundaries" type="double[][]" line="77"/>
                <declaration name="expected" type="PointValuePair" line="78"/>
            </method>
            <method name="testMaximize" type="void" line="82">
                <declaration name="startPoint" type="double[]" line="83"/>
                <declaration name="insigma" type="double[]" line="84"/>
                <declaration name="boundaries" type="double[][]" line="85"/>
                <declaration name="expected" type="PointValuePair" line="86"/>
            </method>
            <method name="testEllipse" type="void" line="93">
                <declaration name="startPoint" type="double[]" line="94"/>
                <declaration name="insigma" type="double[]" line="95"/>
                <declaration name="boundaries" type="double[][]" line="96"/>
                <declaration name="expected" type="PointValuePair" line="97"/>
            </method>
            <method name="testElliRotated" type="void" line="101">
                <declaration name="startPoint" type="double[]" line="102"/>
                <declaration name="insigma" type="double[]" line="103"/>
                <declaration name="boundaries" type="double[][]" line="104"/>
                <declaration name="expected" type="PointValuePair" line="105"/>
            </method>
            <method name="testCigar" type="void" line="109">
                <declaration name="startPoint" type="double[]" line="110"/>
                <declaration name="insigma" type="double[]" line="111"/>
                <declaration name="boundaries" type="double[][]" line="112"/>
                <declaration name="expected" type="PointValuePair" line="113"/>
            </method>
            <method name="testCigarWithBoundaries" type="void" line="117">
                <declaration name="startPoint" type="double[]" line="118"/>
                <declaration name="insigma" type="double[]" line="119"/>
                <declaration name="boundaries" type="double[][]" line="120"/>
                <declaration name="expected" type="PointValuePair" line="121"/>
            </method>
            <method name="testTwoAxes" type="void" line="125">
                <declaration name="startPoint" type="double[]" line="126"/>
                <declaration name="insigma" type="double[]" line="127"/>
                <declaration name="boundaries" type="double[][]" line="128"/>
                <declaration name="expected" type="PointValuePair" line="129"/>
            </method>
            <method name="testCigTab" type="void" line="133">
                <declaration name="startPoint" type="double[]" line="134"/>
                <declaration name="insigma" type="double[]" line="135"/>
                <declaration name="boundaries" type="double[][]" line="136"/>
                <declaration name="expected" type="PointValuePair" line="137"/>
            </method>
            <method name="testSphere" type="void" line="141">
                <declaration name="startPoint" type="double[]" line="142"/>
                <declaration name="insigma" type="double[]" line="143"/>
                <declaration name="boundaries" type="double[][]" line="144"/>
                <declaration name="expected" type="PointValuePair" line="145"/>
            </method>
            <method name="testTablet" type="void" line="149">
                <declaration name="startPoint" type="double[]" line="150"/>
                <declaration name="insigma" type="double[]" line="151"/>
                <declaration name="boundaries" type="double[][]" line="152"/>
                <declaration name="expected" type="PointValuePair" line="153"/>
            </method>
            <method name="testDiffPow" type="void" line="157">
                <declaration name="startPoint" type="double[]" line="158"/>
                <declaration name="insigma" type="double[]" line="159"/>
                <declaration name="boundaries" type="double[][]" line="160"/>
                <declaration name="expected" type="PointValuePair" line="161"/>
            </method>
            <method name="testSsDiffPow" type="void" line="165">
                <declaration name="startPoint" type="double[]" line="166"/>
                <declaration name="insigma" type="double[]" line="167"/>
                <declaration name="boundaries" type="double[][]" line="168"/>
                <declaration name="expected" type="PointValuePair" line="169"/>
            </method>
            <method name="testAckley" type="void" line="173">
                <declaration name="startPoint" type="double[]" line="174"/>
                <declaration name="insigma" type="double[]" line="175"/>
                <declaration name="boundaries" type="double[][]" line="176"/>
                <declaration name="expected" type="PointValuePair" line="177"/>
            </method>
            <method name="testRastrigin" type="void" line="181">
                <declaration name="startPoint" type="double[]" line="182"/>
                <declaration name="insigma" type="double[]" line="183"/>
                <declaration name="boundaries" type="double[][]" line="184"/>
                <declaration name="expected" type="PointValuePair" line="185"/>
            </method>
            <method name="testConstrainedRosen" type="void" line="189">
                <declaration name="startPoint" type="double[]" line="190"/>
                <declaration name="insigma" type="double[]" line="191"/>
                <declaration name="boundaries" type="double[][]" line="192"/>
                <declaration name="expected" type="PointValuePair" line="193"/>
            </method>
            <method name="testDiagonalRosen" type="void" line="197">
                <declaration name="startPoint" type="double[]" line="198"/>
                <declaration name="insigma" type="double[]" line="199"/>
                <declaration name="boundaries" type="double[][]" line="200"/>
                <declaration name="expected" type="PointValuePair" line="201"/>
            </method>
            <method name="testMath864" type="void" line="204">
                <declaration name="optimizer" type="CMAESOptimizer" line="205"/>
                <anonymous_class line="206">
                    <method name="value" type="double" line="207">
                        <params>
                            <param name="parameters" type="double[]"/>
                        </params>
                        <declaration name="target" type="double" line="208"/>
                        <declaration name="error" type="double" line="209"/>
                    </method>
                </anonymous_class>
                <declaration name="fitnessFunction" type="MultivariateFunction" line="206"/>
                <declaration name="start" type="double[]" line="214"/>
                <declaration name="lower" type="double[]" line="215"/>
                <declaration name="upper" type="double[]" line="216"/>
                <declaration name="sigma" type="double[]" line="217"/>
                <declaration name="result" type="double[]" line="218"/>
            </method>
            <javadoc line="221">
                Cf. MATH-867                
            </javadoc>
            <method name="testFitAccuracyDependsOnBoundary" type="void" line="224">
                <declaration name="optimizer" type="CMAESOptimizer" line="225"/>
                <anonymous_class line="226">
                    <method name="value" type="double" line="227">
                        <params>
                            <param name="parameters" type="double[]"/>
                        </params>
                        <declaration name="target" type="double" line="228"/>
                        <declaration name="error" type="double" line="229"/>
                    </method>
                </anonymous_class>
                <declaration name="fitnessFunction" type="MultivariateFunction" line="226"/>
                <declaration name="start" type="double[]" line="234"/>
                <declaration name="result" type="PointValuePair" line="235"/>
                <declaration name="resNoBound" type="double" line="236"/>
                <declaration name="lower" type="double[]" line="237"/>
                <declaration name="upper" type="double[]" line="238"/>
                <declaration name="sigma" type="double[]" line="239"/>
                <declaration name="resNearLo" type="double" line="241"/>
                <declaration name="resNearHi" type="double" line="245"/>
            </method>
            <javadoc line="249">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    inSigma Individual input sigma.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    lambda Population size used for offspring.                    
                </param>
                <param>
                    isActive Covariance update mechanism.                    
                </param>
                <param>
                    diagonalOnly Simplified covariance update.                    
                </param>
                <param>
                    stopValue Termination criteria for optimization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="264">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="inSigma" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="lambda" type="int"/>
                    <param name="isActive" type="boolean"/>
                    <param name="diagonalOnly" type="int"/>
                    <param name="stopValue" type="double"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                </params>
                <declaration name="dim" type="int" line="265"/>
                <declaration name="optim" type="CMAESOptimizer" line="266"/>
                <declaration name="result" type="PointValuePair" line="267"/>
                <scope line="269"/>
            </method>
            <method name="point" type="double[]" line="274">
                <params>
                    <param name="n" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="ds" type="double[]" line="275"/>
            </method>
            <method name="boundaries" type="double[][]" line="279">
                <params>
                    <param name="dim" type="int"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <declaration name="boundaries" type="double[][]" line="280"/>
            </method>
            <class name="Sphere" line="285">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="286">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="287"/>
                </method>
            </class>
            <class name="Cigar" line="292">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="293"/>
                <method name="Cigar" type="constructor" line="294"/>
                <method name="Cigar" type="constructor" line="297">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="300">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="301"/>
                </method>
            </class>
            <class name="Tablet" line="306">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="307"/>
                <method name="Tablet" type="constructor" line="308"/>
                <method name="Tablet" type="constructor" line="311">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="314">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="315"/>
                </method>
            </class>
            <class name="CigTab" line="320">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="321"/>
                <method name="CigTab" type="constructor" line="322"/>
                <method name="CigTab" type="constructor" line="325">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="328">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="end" type="int" line="329"/>
                    <declaration name="f" type="double" line="330"/>
                </method>
            </class>
            <class name="TwoAxes" line="335">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="336"/>
                <method name="TwoAxes" type="constructor" line="337"/>
                <method name="TwoAxes" type="constructor" line="340">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="343">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="344"/>
                </method>
            </class>
            <class name="ElliRotated" line="349">
                <implements interface="MultivariateFunction"/>
                <declaration name="B" type="Basis" line="350"/>
                <declaration name="factor" type="double" line="351"/>
                <method name="ElliRotated" type="constructor" line="352"/>
                <method name="ElliRotated" type="constructor" line="355">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="358">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="359"/>
                </method>
            </class>
            <class name="Elli" line="365">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="366"/>
                <method name="Elli" type="constructor" line="367"/>
                <method name="Elli" type="constructor" line="370">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="373">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="374"/>
                </method>
            </class>
            <class name="MinusElli" line="379">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="380">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                </method>
            </class>
            <class name="DiffPow" line="384">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="385">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="386"/>
                </method>
            </class>
            <class name="SsDiffPow" line="391">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="392">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="393"/>
                </method>
            </class>
            <class name="Rosen" line="397">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="398">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="399"/>
                </method>
            </class>
            <class name="Ackley" line="404">
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="405"/>
                <method name="Ackley" type="constructor" line="406">
                    <params>
                        <param name="axra" type="double"/>
                    </params>
                </method>
                <method name="Ackley" type="constructor" line="409"/>
                <method name="value" type="double" line="412">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="413"/>
                    <declaration name="res2" type="double" line="414"/>
                    <declaration name="fac" type="double" line="415"/>
                    <scope line="416"/>
                </method>
            </class>
            <class name="Rastrigin" line="425">
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="426"/>
                <declaration name="amplitude" type="double" line="427"/>
                <method name="Rastrigin" type="constructor" line="428"/>
                <method name="Rastrigin" type="constructor" line="431">
                    <params>
                        <param name="axisratio" type="double"/>
                        <param name="amplitude" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="435">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="436"/>
                    <declaration name="fac" type="double" line="437"/>
                    <scope line="438"/>
                </method>
            </class>
            <class name="Basis" line="446">
                <declaration name="basis" type="double[][]" line="447"/>
                <declaration name="rand" type="Random" line="448"/>
                <method name="Rotate" type="double[]" line="449">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="y" type="double[]" line="451"/>
                    <scope line="452"/>
                </method>
                <method name="GenBasis" type="void" line="458">
                    <params>
                        <param name="DIM" type="int"/>
                    </params>
                    <declaration name="sp" type="double" line="460"/>
                    <declaration name="i" type="int" line="461"/>
                    <scope line="463">
                        <scope line="465"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>