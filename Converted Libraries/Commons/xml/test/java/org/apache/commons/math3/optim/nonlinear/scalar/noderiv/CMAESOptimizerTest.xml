<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.Retry"/>
        <import package="org.apache.commons.math3.RetryRunner"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.SimpleBounds"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.random.MersenneTwister"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.runner.RunWith"/>
        <class name="CMAESOptimizerTest" line="42">
            <javadoc line="42">
                Test for {@link CMAESOptimizer}.                
            </javadoc>
            <declaration name="DIM" type="int" line="48"/>
            <declaration name="LAMBDA" type="int" line="49"/>
            <method name="testInitOutofbounds1" type="void" line="52">
                <declaration name="startPoint" type="double[]" line="53"/>
                <declaration name="insigma" type="double[]" line="54"/>
                <declaration name="boundaries" type="double[][]" line="55"/>
                <declaration name="expected" type="PointValuePair" line="56"/>
            </method>
            <method name="testInitOutofbounds2" type="void" line="63">
                <declaration name="startPoint" type="double[]" line="64"/>
                <declaration name="insigma" type="double[]" line="65"/>
                <declaration name="boundaries" type="double[][]" line="66"/>
                <declaration name="expected" type="PointValuePair" line="67"/>
            </method>
            <method name="testBoundariesDimensionMismatch" type="void" line="75">
                <declaration name="startPoint" type="double[]" line="76"/>
                <declaration name="insigma" type="double[]" line="77"/>
                <declaration name="boundaries" type="double[][]" line="78"/>
                <declaration name="expected" type="PointValuePair" line="79"/>
            </method>
            <method name="testInputSigmaNegative" type="void" line="87">
                <declaration name="startPoint" type="double[]" line="88"/>
                <declaration name="insigma" type="double[]" line="89"/>
                <declaration name="boundaries" type="double[][]" line="90"/>
                <declaration name="expected" type="PointValuePair" line="91"/>
            </method>
            <method name="testInputSigmaOutOfRange" type="void" line="99">
                <declaration name="startPoint" type="double[]" line="100"/>
                <declaration name="insigma" type="double[]" line="101"/>
                <declaration name="boundaries" type="double[][]" line="102"/>
                <declaration name="expected" type="PointValuePair" line="103"/>
            </method>
            <method name="testInputSigmaDimensionMismatch" type="void" line="111">
                <declaration name="startPoint" type="double[]" line="112"/>
                <declaration name="insigma" type="double[]" line="113"/>
                <declaration name="boundaries" type="double[][]" line="114"/>
                <declaration name="expected" type="PointValuePair" line="115"/>
            </method>
            <method name="testRosen" type="void" line="124">
                <declaration name="startPoint" type="double[]" line="125"/>
                <declaration name="insigma" type="double[]" line="126"/>
                <declaration name="boundaries" type="double[][]" line="127"/>
                <declaration name="expected" type="PointValuePair" line="128"/>
            </method>
            <method name="testMaximize" type="void" line="140">
                <declaration name="startPoint" type="double[]" line="141"/>
                <declaration name="insigma" type="double[]" line="142"/>
                <declaration name="boundaries" type="double[][]" line="143"/>
                <declaration name="expected" type="PointValuePair" line="144"/>
            </method>
            <method name="testEllipse" type="void" line="160">
                <declaration name="startPoint" type="double[]" line="161"/>
                <declaration name="insigma" type="double[]" line="162"/>
                <declaration name="boundaries" type="double[][]" line="163"/>
                <declaration name="expected" type="PointValuePair" line="164"/>
            </method>
            <method name="testElliRotated" type="void" line="175">
                <declaration name="startPoint" type="double[]" line="176"/>
                <declaration name="insigma" type="double[]" line="177"/>
                <declaration name="boundaries" type="double[][]" line="178"/>
                <declaration name="expected" type="PointValuePair" line="179"/>
            </method>
            <method name="testCigar" type="void" line="190">
                <declaration name="startPoint" type="double[]" line="191"/>
                <declaration name="insigma" type="double[]" line="192"/>
                <declaration name="boundaries" type="double[][]" line="193"/>
                <declaration name="expected" type="PointValuePair" line="194"/>
            </method>
            <method name="testCigarWithBoundaries" type="void" line="205">
                <declaration name="startPoint" type="double[]" line="206"/>
                <declaration name="insigma" type="double[]" line="207"/>
                <declaration name="boundaries" type="double[][]" line="208"/>
                <declaration name="expected" type="PointValuePair" line="209"/>
            </method>
            <method name="testTwoAxes" type="void" line="220">
                <declaration name="startPoint" type="double[]" line="221"/>
                <declaration name="insigma" type="double[]" line="222"/>
                <declaration name="boundaries" type="double[][]" line="223"/>
                <declaration name="expected" type="PointValuePair" line="224"/>
            </method>
            <method name="testCigTab" type="void" line="235">
                <declaration name="startPoint" type="double[]" line="236"/>
                <declaration name="insigma" type="double[]" line="237"/>
                <declaration name="boundaries" type="double[][]" line="238"/>
                <declaration name="expected" type="PointValuePair" line="239"/>
            </method>
            <method name="testSphere" type="void" line="250">
                <declaration name="startPoint" type="double[]" line="251"/>
                <declaration name="insigma" type="double[]" line="252"/>
                <declaration name="boundaries" type="double[][]" line="253"/>
                <declaration name="expected" type="PointValuePair" line="254"/>
            </method>
            <method name="testTablet" type="void" line="265">
                <declaration name="startPoint" type="double[]" line="266"/>
                <declaration name="insigma" type="double[]" line="267"/>
                <declaration name="boundaries" type="double[][]" line="268"/>
                <declaration name="expected" type="PointValuePair" line="269"/>
            </method>
            <method name="testDiffPow" type="void" line="280">
                <declaration name="startPoint" type="double[]" line="281"/>
                <declaration name="insigma" type="double[]" line="282"/>
                <declaration name="boundaries" type="double[][]" line="283"/>
                <declaration name="expected" type="PointValuePair" line="284"/>
            </method>
            <method name="testSsDiffPow" type="void" line="295">
                <declaration name="startPoint" type="double[]" line="296"/>
                <declaration name="insigma" type="double[]" line="297"/>
                <declaration name="boundaries" type="double[][]" line="298"/>
                <declaration name="expected" type="PointValuePair" line="299"/>
            </method>
            <method name="testAckley" type="void" line="310">
                <declaration name="startPoint" type="double[]" line="311"/>
                <declaration name="insigma" type="double[]" line="312"/>
                <declaration name="boundaries" type="double[][]" line="313"/>
                <declaration name="expected" type="PointValuePair" line="314"/>
            </method>
            <method name="testRastrigin" type="void" line="325">
                <declaration name="startPoint" type="double[]" line="326"/>
                <declaration name="insigma" type="double[]" line="327"/>
                <declaration name="boundaries" type="double[][]" line="328"/>
                <declaration name="expected" type="PointValuePair" line="329"/>
            </method>
            <method name="testConstrainedRosen" type="void" line="340">
                <declaration name="startPoint" type="double[]" line="341"/>
                <declaration name="insigma" type="double[]" line="342"/>
                <declaration name="boundaries" type="double[][]" line="343"/>
                <declaration name="expected" type="PointValuePair" line="344"/>
            </method>
            <method name="testDiagonalRosen" type="void" line="355">
                <declaration name="startPoint" type="double[]" line="356"/>
                <declaration name="insigma" type="double[]" line="357"/>
                <declaration name="boundaries" type="double[][]" line="358"/>
                <declaration name="expected" type="PointValuePair" line="359"/>
            </method>
            <method name="testMath864" type="void" line="367">
                <declaration name="optimizer" type="CMAESOptimizer" line="368"/>
                <anonymous_class line="371">
                    <method name="value" type="double" line="372">
                        <params>
                            <param name="parameters" type="double[]"/>
                        </params>
                        <declaration name="target" type="double" line="373"/>
                        <declaration name="error" type="double" line="374"/>
                    </method>
                </anonymous_class>
                <declaration name="fitnessFunction" type="MultivariateFunction" line="371"/>
                <declaration name="start" type="double[]" line="379"/>
                <declaration name="lower" type="double[]" line="380"/>
                <declaration name="upper" type="double[]" line="381"/>
                <declaration name="sigma" type="double[]" line="382"/>
                <declaration name="result" type="double[]" line="383"/>
            </method>
            <javadoc line="394">
                Cf. MATH-867                
            </javadoc>
            <method name="testFitAccuracyDependsOnBoundary" type="void" line="398">
                <comment line="413">
                    No bounds.                    
                </comment>
                <comment line="423">
                    Optimum is near the lower bound.                    
                </comment>
                <comment line="436">
                    Optimum is near the upper bound.                    
                </comment>
                <comment line="448">
                    System.out.println(&quot;resNoBound=&quot; + resNoBound +
                                        &quot; resNearLo=&quot; + resNearLo +
                                        &quot; resNearHi=&quot; + resNearHi);                    
                </comment>
                <comment line="452">
                    The two values currently differ by a substantial amount, indicating that
                     the bounds definition can prevent reaching the optimum.                    
                </comment>
                <declaration name="optimizer" type="CMAESOptimizer" line="399"/>
                <anonymous_class line="402">
                    <method name="value" type="double" line="403">
                        <params>
                            <param name="parameters" type="double[]"/>
                        </params>
                        <declaration name="target" type="double" line="404"/>
                        <declaration name="error" type="double" line="405"/>
                    </method>
                </anonymous_class>
                <declaration name="fitnessFunction" type="MultivariateFunction" line="402"/>
                <declaration name="start" type="double[]" line="410"/>
                <declaration name="result" type="PointValuePair" line="413"/>
                <declaration name="resNoBound" type="double" line="420"/>
                <declaration name="lower" type="double[]" line="423"/>
                <declaration name="upper" type="double[]" line="424"/>
                <declaration name="sigma" type="double[]" line="425"/>
                <declaration name="resNearLo" type="double" line="433"/>
                <declaration name="resNearHi" type="double" line="445"/>
            </method>
            <javadoc line="457">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    inSigma Individual input sigma.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    lambda Population size used for offspring.                    
                </param>
                <param>
                    isActive Covariance update mechanism.                    
                </param>
                <param>
                    diagonalOnly Simplified covariance update.                    
                </param>
                <param>
                    stopValue Termination criteria for optimization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="484">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="inSigma" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="lambda" type="int"/>
                    <param name="isActive" type="boolean"/>
                    <param name="diagonalOnly" type="int"/>
                    <param name="stopValue" type="double"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                </params>
                <comment line="487">
                    test diagonalOnly = 0 - slow but normally fewer feval#                    
                </comment>
                <comment line="507">
                    System.out.println(&quot;sol=&quot; + Arrays.toString(result.getPoint()));                    
                </comment>
                <declaration name="dim" type="int" line="485"/>
                <declaration name="optim" type="CMAESOptimizer" line="487"/>
                <declaration name="result" type="PointValuePair" line="489"/>
                <scope line="508"/>
            </method>
            <method name="point" type="double[]" line="515">
                <params>
                    <param name="n" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="ds" type="double[]" line="516"/>
            </method>
            <method name="boundaries" type="double[][]" line="522">
                <params>
                    <param name="dim" type="int"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <declaration name="boundaries" type="double[][]" line="523"/>
            </method>
            <class name="Sphere" line="531">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="533">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="534"/>
                </method>
            </class>
            <class name="Cigar" line="541">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="542"/>
                <method name="Cigar" type="constructor" line="544"/>
                <method name="Cigar" type="constructor" line="548">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="552">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="553"/>
                </method>
            </class>
            <class name="Tablet" line="560">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="561"/>
                <method name="Tablet" type="constructor" line="563"/>
                <method name="Tablet" type="constructor" line="567">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="571">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="572"/>
                </method>
            </class>
            <class name="CigTab" line="579">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="580"/>
                <method name="CigTab" type="constructor" line="582"/>
                <method name="CigTab" type="constructor" line="586">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="590">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="end" type="int" line="591"/>
                    <declaration name="f" type="double" line="592"/>
                </method>
            </class>
            <class name="TwoAxes" line="599">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="601"/>
                <method name="TwoAxes" type="constructor" line="603"/>
                <method name="TwoAxes" type="constructor" line="607">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="611">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="612"/>
                </method>
            </class>
            <class name="ElliRotated" line="619">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="B" type="Basis" line="620"/>
                <declaration name="factor" type="double" line="621"/>
                <method name="ElliRotated" type="constructor" line="623"/>
                <method name="ElliRotated" type="constructor" line="627">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="631">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="632"/>
                </method>
            </class>
            <class name="Elli" line="640">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="642"/>
                <method name="Elli" type="constructor" line="644"/>
                <method name="Elli" type="constructor" line="648">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="652">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="653"/>
                </method>
            </class>
            <class name="MinusElli" line="660">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="662">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                </method>
            </class>
            <class name="DiffPow" line="667">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="669">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="670"/>
                </method>
            </class>
            <class name="SsDiffPow" line="678">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="680">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="681"/>
                </method>
            </class>
            <class name="Rosen" line="686">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="688">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="689"/>
                </method>
            </class>
            <class name="Ackley" line="697">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="698"/>
                <method name="Ackley" type="constructor" line="700">
                    <params>
                        <param name="axra" type="double"/>
                    </params>
                </method>
                <method name="Ackley" type="constructor" line="704"/>
                <method name="value" type="double" line="708">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="709"/>
                    <declaration name="res2" type="double" line="710"/>
                    <declaration name="fac" type="double" line="711"/>
                    <scope line="712"/>
                </method>
            </class>
            <class name="Rastrigin" line="723">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="725"/>
                <declaration name="amplitude" type="double" line="726"/>
                <method name="Rastrigin" type="constructor" line="728"/>
                <method name="Rastrigin" type="constructor" line="732">
                    <params>
                        <param name="axisratio" type="double"/>
                        <param name="amplitude" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="737">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="738"/>
                    <declaration name="fac" type="double" line="739"/>
                    <scope line="740"/>
                </method>
            </class>
            <class name="Basis" line="751">
                <comment line="754">
                    use not always the same basis                    
                </comment>
                <declaration name="basis" type="double[][]" line="752"/>
                <declaration name="rand" type="Random" line="753"/>
                <method name="Rotate" type="double[]" line="755">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="y" type="double[]" line="757"/>
                    <scope line="758"/>
                </method>
                <method name="GenBasis" type="void" line="766">
                    <params>
                        <param name="DIM" type="int"/>
                    </params>
                    <comment line="774">
                                                
                    </comment>
                    <comment line="777">
                                                
                    </comment>
                    <comment line="780">
                                                
                    </comment>
                    <comment line="783">
                                                
                    </comment>
                    <comment line="785">
                                                
                    </comment>
                    <comment line="787">
                                                
                    </comment>
                    <comment line="789">
                                                
                    </comment>
                    <declaration name="sp" type="double" line="770"/>
                    <declaration name="i" type="int" line="771"/>
                    <scope line="775">
                        <scope line="780"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>