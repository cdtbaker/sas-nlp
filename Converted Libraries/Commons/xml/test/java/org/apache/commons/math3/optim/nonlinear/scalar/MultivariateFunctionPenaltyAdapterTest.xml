<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.SimplePointChecker"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="MultivariateFunctionPenaltyAdapterTest" line="12">
            <method name="testStartSimplexInsideRange" type="void" line="13">
                <declaration name="biQuadratic" type="BiQuadratic" line="14"/>
                <declaration name="wrapped" type="MultivariateFunctionPenaltyAdapter" line="15"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="16"/>
                <declaration name="simplex" type="AbstractSimplex" line="17"/>
                <declaration name="optimum" type="PointValuePair" line="18"/>
            </method>
            <method name="testStartSimplexOutsideRange" type="void" line="22">
                <declaration name="biQuadratic" type="BiQuadratic" line="23"/>
                <declaration name="wrapped" type="MultivariateFunctionPenaltyAdapter" line="24"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="25"/>
                <declaration name="simplex" type="AbstractSimplex" line="26"/>
                <declaration name="optimum" type="PointValuePair" line="27"/>
            </method>
            <method name="testOptimumOutsideRange" type="void" line="31">
                <declaration name="biQuadratic" type="BiQuadratic" line="32"/>
                <declaration name="wrapped" type="MultivariateFunctionPenaltyAdapter" line="33"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="34"/>
                <declaration name="simplex" type="AbstractSimplex" line="35"/>
                <declaration name="optimum" type="PointValuePair" line="36"/>
            </method>
            <method name="testUnbounded" type="void" line="40">
                <declaration name="biQuadratic" type="BiQuadratic" line="41"/>
                <declaration name="wrapped" type="MultivariateFunctionPenaltyAdapter" line="42"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="43"/>
                <declaration name="simplex" type="AbstractSimplex" line="44"/>
                <declaration name="optimum" type="PointValuePair" line="45"/>
            </method>
            <method name="testHalfBounded" type="void" line="49">
                <declaration name="biQuadratic" type="BiQuadratic" line="50"/>
                <declaration name="wrapped" type="MultivariateFunctionPenaltyAdapter" line="51"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="52"/>
                <declaration name="simplex" type="AbstractSimplex" line="53"/>
                <declaration name="optimum" type="PointValuePair" line="54"/>
            </method>
            <class name="BiQuadratic" line="58">
                <implements interface="MultivariateFunction"/>
                <declaration name="xOptimum" type="double" line="59"/>
                <declaration name="yOptimum" type="double" line="60"/>
                <declaration name="xMin" type="double" line="61"/>
                <declaration name="xMax" type="double" line="62"/>
                <declaration name="yMin" type="double" line="63"/>
                <declaration name="yMax" type="double" line="64"/>
                <method name="BiQuadratic" type="constructor" line="65">
                    <params>
                        <param name="xOptimum" type="double"/>
                        <param name="yOptimum" type="double"/>
                        <param name="xMin" type="double"/>
                        <param name="xMax" type="double"/>
                        <param name="yMin" type="double"/>
                        <param name="yMax" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="73">
                    <params>
                        <param name="point" type="double[]"/>
                    </params>
                    <declaration name="dx" type="double" line="78"/>
                    <declaration name="dy" type="double" line="79"/>
                </method>
                <method name="getLower" type="double[]" line="82"/>
                <method name="getUpper" type="double[]" line="85"/>
                <method name="getBoundedXOptimum" type="double" line="88"/>
                <method name="getBoundedYOptimum" type="double" line="91"/>
            </class>
        </class>
    </source>