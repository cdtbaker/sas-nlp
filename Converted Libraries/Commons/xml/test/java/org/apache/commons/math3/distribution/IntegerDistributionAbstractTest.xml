<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.After"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Test"/>
        <class name="IntegerDistributionAbstractTest" line="27">
            <comment line="52">
                -------------------- Private test instance data -------------------------                
            </comment>
            <comment line="80">
                -------------------- Abstract methods -----------------------------------                
            </comment>
            <comment line="119">
                -------------------- Setup / tear down ----------------------------------                
            </comment>
            <comment line="151">
                -------------------- Verification methods -------------------------------                
            </comment>
            <comment line="203">
                ------------------------ Default test cases -----------------------------                
            </comment>
            <comment line="311">
                ------------------ Getters / Setters for test instance data -----------                
            </comment>
            <javadoc line="27">
                Abstract base class for {@link IntegerDistribution} tests.
                  &lt;p&gt;
                  To create a concrete test class for an integer distribution implementation,
                  implement makeDistribution() to return a distribution instance to use in
                  tests and each of the test data generation methods below.  In each case, the
                  test points and test values arrays returned represent parallel arrays of
                  inputs and expected values for the distribution returned by makeDistribution().
                  &lt;p&gt;
                  makeDensityTestPoints() -- arguments used to test probability density calculation
                  makeDensityTestValues() -- expected probability densities
                  makeCumulativeTestPoints() -- arguments used to test cumulative probabilities
                  makeCumulativeTestValues() -- expected cumulative probabilites
                  makeInverseCumulativeTestPoints() -- arguments used to test inverse cdf evaluation
                  makeInverseCumulativeTestValues() -- expected inverse cdf values
                  &lt;p&gt;
                  To implement additional test cases with different distribution instances and test data,
                  use the setXxx methods for the instance data in test cases and call the verifyXxx methods
                  to verify results.                
                <version>
                    $Id: IntegerDistributionAbstractTest.java 1533974 2013-10-20 20:42:41Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="distribution" type="IntegerDistribution" line="52"/>
            <javadoc line="52">
                Discrete distribution instance used to perform tests                
            </javadoc>
            <declaration name="tolerance" type="double" line="55"/>
            <javadoc line="55">
                Tolerance used in comparing expected and returned values                
            </javadoc>
            <declaration name="densityTestPoints" type="int[]" line="58"/>
            <javadoc line="58">
                Arguments used to test probability density calculations                
            </javadoc>
            <declaration name="densityTestValues" type="double[]" line="61"/>
            <javadoc line="61">
                Values used to test probability density calculations                
            </javadoc>
            <declaration name="logDensityTestValues" type="double[]" line="64"/>
            <javadoc line="64">
                Values used to test logarithmic probability density calculations                
            </javadoc>
            <declaration name="cumulativeTestPoints" type="int[]" line="67"/>
            <javadoc line="67">
                Arguments used to test cumulative probability density calculations                
            </javadoc>
            <declaration name="cumulativeTestValues" type="double[]" line="70"/>
            <javadoc line="70">
                Values used to test cumulative probability density calculations                
            </javadoc>
            <declaration name="inverseCumulativeTestPoints" type="double[]" line="73"/>
            <javadoc line="73">
                Arguments used to test inverse cumulative probability density calculations                
            </javadoc>
            <declaration name="inverseCumulativeTestValues" type="int[]" line="76"/>
            <javadoc line="76">
                Values used to test inverse cumulative probability density calculations                
            </javadoc>
            <method name="makeDistribution" type="IntegerDistribution" line="81"/>
            <javadoc line="81">
                Creates the default discrete distribution instance to use in tests.                
            </javadoc>
            <method name="makeDensityTestPoints" type="int[]" line="84"/>
            <javadoc line="84">
                Creates the default probability density test input values                
            </javadoc>
            <method name="makeDensityTestValues" type="double[]" line="87"/>
            <javadoc line="87">
                Creates the default probability density test expected values                
            </javadoc>
            <javadoc line="90">
                Creates the default logarithmic probability density test expected values.
                  The default implementation simply computes the logarithm of all the values in{@link #makeDensityTestValues()}.                
                <return>
                    double[] the default logarithmic probability density test expected values.                    
                </return>
            </javadoc>
            <method name="makeLogDensityTestValues" type="double[]" line="97">
                <declaration name="densityTestValues" type="double[]" line="98"/>
                <declaration name="logDensityTestValues" type="double[]" line="99"/>
                <scope line="100"/>
            </method>
            <method name="makeCumulativeTestPoints" type="int[]" line="106"/>
            <javadoc line="106">
                Creates the default cumulative probability density test input values                
            </javadoc>
            <method name="makeCumulativeTestValues" type="double[]" line="109"/>
            <javadoc line="109">
                Creates the default cumulative probability density test expected values                
            </javadoc>
            <method name="makeInverseCumulativeTestPoints" type="double[]" line="112"/>
            <javadoc line="112">
                Creates the default inverse cumulative probability test input values                
            </javadoc>
            <method name="makeInverseCumulativeTestValues" type="int[]" line="115"/>
            <javadoc line="115">
                Creates the default inverse cumulative probability density test expected values                
            </javadoc>
            <javadoc line="120">
                Setup sets all test instance data to default values                
            </javadoc>
            <method name="setUp" type="void" line="124"/>
            <javadoc line="135">
                Cleans up test instance data                
            </javadoc>
            <method name="tearDown" type="void" line="139"/>
            <javadoc line="152">
                Verifies that probability density calculations match expected values
                  using current test instance data                
            </javadoc>
            <method name="verifyDensities" type="void" line="156">
                <scope line="157"/>
            </method>
            <javadoc line="164">
                Verifies that logarithmic probability density calculations match expected values
                  using current test instance data.                
            </javadoc>
            <method name="verifyLogDensities" type="void" line="168">
                <comment line="171">
                    FIXME: when logProbability methods are added to IntegerDistribution in 4.0, remove cast below                    
                </comment>
                <scope line="169"/>
            </method>
            <javadoc line="177">
                Verifies that cumulative probability density calculations match expected values
                  using current test instance data                
            </javadoc>
            <method name="verifyCumulativeProbabilities" type="void" line="181">
                <scope line="182"/>
            </method>
            <javadoc line="190">
                Verifies that inverse cumulative probability density calculations match expected values
                  using current test instance data                
            </javadoc>
            <method name="verifyInverseCumulativeProbabilities" type="void" line="194">
                <scope line="195"/>
            </method>
            <javadoc line="204">
                Verifies that probability density calculations match expected values
                  using default test instance data                
            </javadoc>
            <method name="testDensities" type="void" line="209"/>
            <javadoc line="213">
                Verifies that logarithmic probability density calculations match expected values
                  using default test instance data                
            </javadoc>
            <method name="testLogDensities" type="void" line="218"/>
            <javadoc line="222">
                Verifies that cumulative probability density calculations match expected values
                  using default test instance data                
            </javadoc>
            <method name="testCumulativeProbabilities" type="void" line="227"/>
            <javadoc line="231">
                Verifies that inverse cumulative probability density calculations match expected values
                  using default test instance data                
            </javadoc>
            <method name="testInverseCumulativeProbabilities" type="void" line="236"/>
            <method name="testConsistencyAtSupportBounds" type="void" line="241">
                <declaration name="lower" type="int" line="242"/>
                <declaration name="upper" type="int" line="250"/>
            </method>
            <javadoc line="258">
                Verifies that illegal arguments are correctly handled                
            </javadoc>
            <method name="testIllegalArguments" type="void" line="262">
                <comment line="268">
                    expected                    
                </comment>
                <comment line="274">
                    expected                    
                </comment>
                <comment line="280">
                    expected                    
                </comment>
                <scope line="263"/>
                <scope line="266"/>
                <scope line="269"/>
                <scope line="272"/>
                <scope line="275"/>
                <scope line="278"/>
            </method>
            <javadoc line="283">
                Test sampling                
            </javadoc>
            <method name="testSampling" type="void" line="287">
                <comment line="299">
                    Use fixed seed                    
                </comment>
                <declaration name="densityPoints" type="int[]" line="288"/>
                <declaration name="densityValues" type="double[]" line="289"/>
                <declaration name="sampleSize" type="int" line="290"/>
                <declaration name="length" type="int" line="291"/>
                <declaration name="distribution" type="AbstractIntegerDistribution" line="292"/>
                <declaration name="expectedCounts" type="double[]" line="293"/>
                <declaration name="observedCounts" type="long[]" line="294"/>
                <scope line="295"/>
                <declaration name="sample" type="int[]" line="299"/>
                <scope line="300">
                    <scope line="301">
                        <scope line="302"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="311">
                @return Returns the cumulativeTestPoints.                
            </javadoc>
            <method name="getCumulativeTestPoints" type="int[]" line="314"/>
            <javadoc line="318">
                @param cumulativeTestPoints The cumulativeTestPoints to set.                
            </javadoc>
            <method name="setCumulativeTestPoints" type="void" line="321">
                <params>
                    <param name="cumulativeTestPoints" type="int[]"/>
                </params>
            </method>
            <javadoc line="325">
                @return Returns the cumulativeTestValues.                
            </javadoc>
            <method name="getCumulativeTestValues" type="double[]" line="328"/>
            <javadoc line="332">
                @param cumulativeTestValues The cumulativeTestValues to set.                
            </javadoc>
            <method name="setCumulativeTestValues" type="void" line="335">
                <params>
                    <param name="cumulativeTestValues" type="double[]"/>
                </params>
            </method>
            <javadoc line="339">
                @return Returns the densityTestPoints.                
            </javadoc>
            <method name="getDensityTestPoints" type="int[]" line="342"/>
            <javadoc line="346">
                @param densityTestPoints The densityTestPoints to set.                
            </javadoc>
            <method name="setDensityTestPoints" type="void" line="349">
                <params>
                    <param name="densityTestPoints" type="int[]"/>
                </params>
            </method>
            <javadoc line="353">
                @return Returns the densityTestValues.                
            </javadoc>
            <method name="getDensityTestValues" type="double[]" line="356"/>
            <javadoc line="360">
                @param densityTestValues The densityTestValues to set.                
            </javadoc>
            <method name="setDensityTestValues" type="void" line="363">
                <params>
                    <param name="densityTestValues" type="double[]"/>
                </params>
            </method>
            <javadoc line="367">
                @return Returns the distribution.                
            </javadoc>
            <method name="getDistribution" type="IntegerDistribution" line="370"/>
            <javadoc line="374">
                @param distribution The distribution to set.                
            </javadoc>
            <method name="setDistribution" type="void" line="377">
                <params>
                    <param name="distribution" type="IntegerDistribution"/>
                </params>
            </method>
            <javadoc line="381">
                @return Returns the inverseCumulativeTestPoints.                
            </javadoc>
            <method name="getInverseCumulativeTestPoints" type="double[]" line="384"/>
            <javadoc line="388">
                @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.                
            </javadoc>
            <method name="setInverseCumulativeTestPoints" type="void" line="391">
                <params>
                    <param name="inverseCumulativeTestPoints" type="double[]"/>
                </params>
            </method>
            <javadoc line="395">
                @return Returns the inverseCumulativeTestValues.                
            </javadoc>
            <method name="getInverseCumulativeTestValues" type="int[]" line="398"/>
            <javadoc line="402">
                @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.                
            </javadoc>
            <method name="setInverseCumulativeTestValues" type="void" line="405">
                <params>
                    <param name="inverseCumulativeTestValues" type="int[]"/>
                </params>
            </method>
            <javadoc line="409">
                @return Returns the tolerance.                
            </javadoc>
            <method name="getTolerance" type="double" line="412"/>
            <javadoc line="416">
                @param tolerance The tolerance to set.                
            </javadoc>
            <method name="setTolerance" type="void" line="419">
                <params>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
        </class>
    </source>