<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.univariate">
        <import package="org.apache.commons.math3.analysis.QuinticFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.analysis.function.StepFunction"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.stat.descriptive.DescriptiveStatistics"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="BrentOptimizerTest" line="17">
            <javadoc line="17">
                @version $Id$                
            </javadoc>
            <method name="testSinMin" type="void" line="21">
                <declaration name="f" type="UnivariateFunction" line="22"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="23"/>
                <scope line="30"/>
                <scope line="34"/>
            </method>
            <method name="testSinMinWithValueChecker" type="void" line="37">
                <declaration name="f" type="UnivariateFunction" line="38"/>
                <declaration name="checker" type="ConvergenceChecker&lt;UnivariatePointValuePair&gt;" line="39"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="40"/>
                <declaration name="result" type="UnivariatePointValuePair" line="41"/>
            </method>
            <method name="testBoundaries" type="void" line="44">
                <declaration name="lower" type="double" line="45"/>
                <declaration name="upper" type="double" line="46"/>
                <anonymous_class line="47">
                    <method name="value" type="double" line="48">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <scope line="49"/>
                        <scope line="52"/>
                        <scope line="55"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="47"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="61"/>
            </method>
            <method name="testQuinticMin" type="void" line="65">
                <declaration name="f" type="UnivariateFunction" line="66"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="67"/>
            </method>
            <method name="testQuinticMinStatistics" type="void" line="74">
                <declaration name="f" type="UnivariateFunction" line="75"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="76"/>
                <declaration name="stat" type="DescriptiveStatistics[]" line="77"/>
                <scope line="78"/>
                <declaration name="min" type="double" line="81"/>
                <declaration name="max" type="double" line="82"/>
                <declaration name="nSamples" type="int" line="83"/>
                <declaration name="delta" type="double" line="84"/>
                <scope line="85">
                    <declaration name="start" type="double" line="86"/>
                </scope>
                <declaration name="meanOptValue" type="double" line="90"/>
                <declaration name="medianEval" type="double" line="91"/>
            </method>
            <method name="testQuinticMax" type="void" line="96">
                <declaration name="f" type="UnivariateFunction" line="97"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="98"/>
                <scope line="100"/>
                <scope line="104"/>
            </method>
            <method name="testMinEndpoints" type="void" line="107">
                <declaration name="f" type="UnivariateFunction" line="108"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="109"/>
                <declaration name="result" type="double" line="110"/>
            </method>
            <method name="testMath832" type="void" line="115">
                <anonymous_class line="116">
                    <method name="value" type="double" line="117">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <declaration name="sqrtX" type="double" line="118"/>
                        <declaration name="a" type="double" line="119"/>
                        <declaration name="b" type="double" line="120"/>
                        <declaration name="c" type="double" line="121"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="116"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="126"/>
                <declaration name="result" type="double" line="127"/>
            </method>
            <javadoc line="130">
                Contrived example showing that prior to the resolution of MATH-855
                  (second revision), the algorithm would not return the best point if
                  it happened to be the initial guess.                
            </javadoc>
            <method name="testKeepInitIfBest" type="void" line="135">
                <declaration name="minSin" type="double" line="136"/>
                <declaration name="offset" type="double" line="137"/>
                <declaration name="delta" type="double" line="138"/>
                <declaration name="f1" type="UnivariateFunction" line="139"/>
                <declaration name="f2" type="UnivariateFunction" line="140"/>
                <declaration name="f" type="UnivariateFunction" line="141"/>
                <declaration name="relTol" type="double" line="142"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="143"/>
                <declaration name="init" type="double" line="144"/>
                <declaration name="result" type="UnivariatePointValuePair" line="145"/>
                <declaration name="numEval" type="int" line="146"/>
                <declaration name="sol" type="double" line="147"/>
                <declaration name="expected" type="double" line="148"/>
            </method>
            <javadoc line="151">
                Contrived example showing that prior to the resolution of MATH-855,
                  the algorithm, by always returning the last evaluated point, would
                  sometimes not report the best point it had found.                
            </javadoc>
            <method name="testMath855" type="void" line="156">
                <declaration name="minSin" type="double" line="157"/>
                <declaration name="offset" type="double" line="158"/>
                <declaration name="delta" type="double" line="159"/>
                <declaration name="f1" type="UnivariateFunction" line="160"/>
                <declaration name="f2" type="UnivariateFunction" line="161"/>
                <declaration name="f" type="UnivariateFunction" line="162"/>
                <declaration name="optimizer" type="UnivariateOptimizer" line="163"/>
                <declaration name="result" type="UnivariatePointValuePair" line="164"/>
                <declaration name="numEval" type="int" line="165"/>
                <declaration name="sol" type="double" line="166"/>
                <declaration name="expected" type="double" line="167"/>
            </method>
        </class>
    </source>