<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.filter">
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="KalmanFilterTest" line="32">
            <javadoc line="32">
                Tests for {@link KalmanFilter}.                
                <version>
                    $Id: KalmanFilterTest.java 1540167 2013-11-08 20:00:08Z tn $                    
                </version>
            </javadoc>
            <method name="testTransitionMeasurementMatrixMismatch" type="void" line="40">
                <comment line="43">
                    A and H matrix do not match in dimensions                    
                </comment>
                <comment line="45">
                    A = [ 1 ]                    
                </comment>
                <comment line="47">
                    no control input                    
                </comment>
                <comment line="49">
                    H = [ 1 1 ]                    
                </comment>
                <comment line="51">
                    Q = [ 0 ]                    
                </comment>
                <comment line="53">
                    R = [ 0 ]                    
                </comment>
                <declaration name="A" type="RealMatrix" line="45"/>
                <declaration name="B" type="RealMatrix" line="47"/>
                <declaration name="H" type="RealMatrix" line="49"/>
                <declaration name="Q" type="RealMatrix" line="51"/>
                <declaration name="R" type="RealMatrix" line="53"/>
                <declaration name="pm" type="ProcessModel" line="55"/>
                <declaration name="mm" type="MeasurementModel" line="58"/>
            </method>
            <method name="testTransitionControlMatrixMismatch" type="void" line="64">
                <comment line="67">
                    A and B matrix do not match in dimensions                    
                </comment>
                <comment line="69">
                    A = [ 1 ]                    
                </comment>
                <comment line="71">
                    B = [ 1 1 ]                    
                </comment>
                <comment line="73">
                    H = [ 1 ]                    
                </comment>
                <comment line="75">
                    Q = [ 0 ]                    
                </comment>
                <comment line="77">
                    R = [ 0 ]                    
                </comment>
                <declaration name="A" type="RealMatrix" line="69"/>
                <declaration name="B" type="RealMatrix" line="71"/>
                <declaration name="H" type="RealMatrix" line="73"/>
                <declaration name="Q" type="RealMatrix" line="75"/>
                <declaration name="R" type="RealMatrix" line="77"/>
                <declaration name="pm" type="ProcessModel" line="79"/>
                <declaration name="mm" type="MeasurementModel" line="82"/>
            </method>
            <method name="testConstant" type="void" line="88">
                <comment line="90">
                    simulates a simple process with a constant state and no control input                    
                </comment>
                <comment line="96">
                    A = [ 1 ]                    
                </comment>
                <comment line="98">
                    no control input                    
                </comment>
                <comment line="100">
                    H = [ 1 ]                    
                </comment>
                <comment line="102">
                    x = [ 10 ]                    
                </comment>
                <comment line="104">
                    Q = [ 1e-5 ]                    
                </comment>
                <comment line="106">
                    R = [ 0.1 ]                    
                </comment>
                <comment line="120">
                    check the initial state                    
                </comment>
                <comment line="128">
                    iterate 60 steps                    
                </comment>
                <comment line="132">
                    Simulate the process                    
                </comment>
                <comment line="135">
                    x = A * x + p_noise                    
                </comment>
                <comment line="138">
                    Simulate the measurement                    
                </comment>
                <comment line="141">
                    z = H * x + m_noise                    
                </comment>
                <comment line="146">
                    state estimate shouldn&apos;t be larger than measurement noise                    
                </comment>
                <comment line="148">
                    System.out.println(diff);                    
                </comment>
                <comment line="152">
                    error covariance should be already very low (&lt; 0.02)                    
                </comment>
                <declaration name="constantValue" type="double" line="91"/>
                <declaration name="measurementNoise" type="double" line="92"/>
                <declaration name="processNoise" type="double" line="93"/>
                <declaration name="A" type="RealMatrix" line="96"/>
                <declaration name="B" type="RealMatrix" line="98"/>
                <declaration name="H" type="RealMatrix" line="100"/>
                <declaration name="x" type="RealVector" line="102"/>
                <declaration name="Q" type="RealMatrix" line="104"/>
                <declaration name="R" type="RealMatrix" line="106"/>
                <declaration name="pm" type="ProcessModel" line="108"/>
                <declaration name="mm" type="MeasurementModel" line="111"/>
                <declaration name="filter" type="KalmanFilter" line="112"/>
                <declaration name="expectedInitialState" type="double[]" line="120"/>
                <declaration name="pNoise" type="RealVector" line="123"/>
                <declaration name="mNoise" type="RealVector" line="124"/>
                <declaration name="rand" type="RandomGenerator" line="126"/>
                <scope line="128">
                    <declaration name="z" type="RealVector" line="141"/>
                    <declaration name="diff" type="double" line="146"/>
                </scope>
            </method>
            <method name="testConstantAcceleration" type="void" line="157">
                <comment line="159">
                    simulates a vehicle, accelerating at a constant rate (0.1 m/s)                    
                </comment>
                <comment line="161">
                    discrete time interval                    
                </comment>
                <comment line="163">
                    position measurement noise (meter)                    
                </comment>
                <comment line="165">
                    acceleration noise (meter/sec^2)                    
                </comment>
                <comment line="168">
                    A = [ 1 dt ]
                         [ 0  1 ]                    
                </comment>
                <comment line="172">
                    B = [ dt^2/2 ]
                         [ dt     ]                    
                </comment>
                <comment line="177">
                    H = [ 1 0 ]                    
                </comment>
                <comment line="180">
                    x = [ 0 0 ]                    
                </comment>
                <comment line="187">
                    Q = [ dt^4/4 dt^3/2 ]
                         [ dt^3/2 dt^2   ]                    
                </comment>
                <comment line="191">
                    P0 = [ 1 1 ]
                          [ 1 1 ]                    
                </comment>
                <comment line="195">
                    R = [ measurementNoise^2 ]                    
                </comment>
                <comment line="199">
                    constant control input, increase velocity by 0.1 m/s per cycle                    
                </comment>
                <comment line="211">
                    check the initial state                    
                </comment>
                <comment line="220">
                    iterate 60 steps                    
                </comment>
                <comment line="224">
                    Simulate the process                    
                </comment>
                <comment line="227">
                    x = A * x + B * u + pNoise                    
                </comment>
                <comment line="230">
                    Simulate the measurement                    
                </comment>
                <comment line="233">
                    z = H * x + m_noise                    
                </comment>
                <comment line="238">
                    state estimate shouldn&apos;t be larger than the measurement noise                    
                </comment>
                <comment line="243">
                    error covariance of the velocity should be already very low (&lt; 0.1)                    
                </comment>
                <declaration name="dt" type="double" line="161"/>
                <declaration name="measurementNoise" type="double" line="163"/>
                <declaration name="accelNoise" type="double" line="165"/>
                <declaration name="A" type="RealMatrix" line="169"/>
                <declaration name="B" type="RealMatrix" line="173"/>
                <declaration name="H" type="RealMatrix" line="177"/>
                <declaration name="x" type="RealVector" line="180"/>
                <declaration name="tmp" type="RealMatrix" line="182"/>
                <declaration name="Q" type="RealMatrix" line="188"/>
                <declaration name="P0" type="RealMatrix" line="192"/>
                <declaration name="R" type="RealMatrix" line="195"/>
                <declaration name="u" type="RealVector" line="199"/>
                <declaration name="pm" type="ProcessModel" line="201"/>
                <declaration name="mm" type="MeasurementModel" line="202"/>
                <declaration name="filter" type="KalmanFilter" line="203"/>
                <declaration name="expectedInitialState" type="double[]" line="211"/>
                <declaration name="rand" type="RandomGenerator" line="214"/>
                <declaration name="tmpPNoise" type="RealVector" line="216"/>
                <scope line="220">
                    <declaration name="pNoise" type="RealVector" line="224"/>
                    <declaration name="mNoise" type="double" line="230"/>
                    <declaration name="z" type="RealVector" line="233"/>
                    <declaration name="diff" type="double" line="238"/>
                </scope>
            </method>
            <class name="Cannonball" line="247">
                <javadoc line="247">
                    Represents an idealized Cannonball only taking into account gravity.                    
                </javadoc>
                <declaration name="gravity" type="double[]" line="252"/>
                <declaration name="velocity" type="double[]" line="254"/>
                <declaration name="location" type="double[]" line="255"/>
                <declaration name="timeslice" type="double" line="257"/>
                <method name="Cannonball" type="constructor" line="259">
                    <params>
                        <param name="timeslice" type="double"/>
                        <param name="angle" type="double"/>
                        <param name="initialVelocity" type="double"/>
                    </params>
                    <declaration name="angleInRadians" type="double" line="262"/>
                </method>
                <method name="getX" type="double" line="271"/>
                <method name="getY" type="double" line="275"/>
                <method name="getXVelocity" type="double" line="279"/>
                <method name="getYVelocity" type="double" line="283"/>
                <method name="step" type="void" line="287">
                    <comment line="289">
                        break gravitational force into a smaller time slice.                        
                    </comment>
                    <comment line="295">
                        apply the acceleration to velocity.                        
                    </comment>
                    <comment line="303">
                        cannonballs shouldn&apos;t go into the ground.                        
                    </comment>
                    <declaration name="slicedGravity" type="double[]" line="289"/>
                    <scope line="290"/>
                    <declaration name="slicedVelocity" type="double[]" line="295"/>
                    <scope line="296"/>
                    <scope line="303"/>
                </method>
            </class>
            <method name="testCannonball" type="void" line="310">
                <comment line="312">
                    simulates the flight of a cannonball (only taking gravity and initial thrust into account)                    
                </comment>
                <comment line="314">
                    number of iterations                    
                </comment>
                <comment line="316">
                    discrete time interval                    
                </comment>
                <comment line="318">
                    position measurement noise (meter)                    
                </comment>
                <comment line="320">
                    the initial velocity of the cannonball                    
                </comment>
                <comment line="322">
                    shooting angle                    
                </comment>
                <comment line="330">
                    A = [ 1, dt, 0,  0 ]  =&gt;  x(n+1) = x(n) + vx(n)
                         [ 0,  1, 0,  0 ]  =&gt; vx(n+1) =        vx(n)
                         [ 0,  0, 1, dt ]  =&gt;  y(n+1) =              y(n) + vy(n)
                         [ 0,  0, 0,  1 ]  =&gt; vy(n+1) =                     vy(n)                    
                </comment>
                <comment line="341">
                    The control vector, which adds acceleration to the kinematic equations.
                     0          =&gt;  x(n+1) =  x(n+1)
                     0          =&gt; vx(n+1) = vx(n+1)
                     -9.81*dt^2 =&gt;  y(n+1) =  y(n+1) - 1/2 * 9.81 * dt^2
                     -9.81*dt   =&gt; vy(n+1) = vy(n+1) - 9.81 * dt                    
                </comment>
                <comment line="349">
                    The control matrix B only expects y and vy, see control vector                    
                </comment>
                <comment line="357">
                    We only observe the x/y position of the cannonball                    
                </comment>
                <comment line="365">
                    our guess of the initial state.                    
                </comment>
                <comment line="368">
                    the initial error covariance matrix, the variance = noise^2                    
                </comment>
                <comment line="377">
                    we assume no process noise -&gt; zero matrix                    
                </comment>
                <comment line="380">
                    the measurement covariance matrix                    
                </comment>
                <comment line="396">
                    get the &quot;real&quot; cannonball position                    
                </comment>
                <comment line="400">
                    apply measurement noise to current cannonball position                    
                </comment>
                <comment line="407">
                    correct the filter with our measurements                    
                </comment>
                <comment line="410">
                    state estimate shouldn&apos;t be larger than the measurement noise                    
                </comment>
                <comment line="415">
                    error covariance of the x/y-position should be already very low (&lt; 3m std dev = 9 variance)                    
                </comment>
                <declaration name="iterations" type="int" line="314"/>
                <declaration name="dt" type="double" line="316"/>
                <declaration name="measurementNoise" type="double" line="318"/>
                <declaration name="initialVelocity" type="double" line="320"/>
                <declaration name="angle" type="double" line="322"/>
                <declaration name="cannonball" type="Cannonball" line="324"/>
                <declaration name="speedX" type="double" line="326"/>
                <declaration name="speedY" type="double" line="327"/>
                <declaration name="A" type="RealMatrix" line="333"/>
                <declaration name="controlVector" type="RealVector" line="345"/>
                <declaration name="B" type="RealMatrix" line="349"/>
                <declaration name="H" type="RealMatrix" line="357"/>
                <declaration name="initialState" type="RealVector" line="365"/>
                <declaration name="var" type="double" line="368"/>
                <declaration name="initialErrorCovariance" type="RealMatrix" line="369"/>
                <declaration name="Q" type="RealMatrix" line="377"/>
                <declaration name="R" type="RealMatrix" line="380"/>
                <declaration name="pm" type="ProcessModel" line="387"/>
                <declaration name="mm" type="MeasurementModel" line="388"/>
                <declaration name="filter" type="KalmanFilter" line="389"/>
                <declaration name="rng" type="RandomGenerator" line="391"/>
                <declaration name="dist" type="NormalDistribution" line="392"/>
                <scope line="394">
                    <declaration name="x" type="double" line="396"/>
                    <declaration name="y" type="double" line="397"/>
                    <declaration name="nx" type="double" line="400"/>
                    <declaration name="ny" type="double" line="401"/>
                    <declaration name="diff" type="double" line="410"/>
                </scope>
            </method>
            <method name="assertVectorEquals" type="void" line="423">
                <params>
                    <param name="expected" type="double[]"/>
                    <param name="result" type="double[]"/>
                </params>
                <scope line="426"/>
            </method>
            <method name="assertMatrixEquals" type="void" line="432">
                <params>
                    <param name="expected" type="double[][]"/>
                    <param name="result" type="double[][]"/>
                </params>
                <scope line="435">
                    <scope line="438"/>
                </scope>
            </method>
        </class>
    </source>