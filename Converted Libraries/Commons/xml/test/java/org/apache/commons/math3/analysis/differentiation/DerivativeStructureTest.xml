<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.differentiation">
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.ExtendedFieldElementAbstractTest"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.random.Well1024a"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.CombinatoricsUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="DerivativeStructureTest" line="35">
            <extends class="ExtendedFieldElementAbstractTest">
                <type_params>
                    <type_param name="DerivativeStructure"/>
                </type_params>
            </extends>
            <javadoc line="35">
                Test for class {@link DerivativeStructure}.                
            </javadoc>
            <method name="build" type="DerivativeStructure" line="41">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="testWrongVariableIndex" type="void" line="46"/>
            <method name="testMissingOrders" type="void" line="51"/>
            <method name="testTooLargeOrder" type="void" line="56"/>
            <method name="testVariableWithoutDerivative0" type="void" line="61">
                <declaration name="v" type="DerivativeStructure" line="62"/>
            </method>
            <method name="testVariableWithoutDerivative1" type="void" line="67">
                <declaration name="v" type="DerivativeStructure" line="68"/>
            </method>
            <method name="testVariable" type="void" line="73">
                <scope line="74"/>
            </method>
            <method name="testConstant" type="void" line="85">
                <scope line="86"/>
            </method>
            <method name="testCreateConstant" type="void" line="93">
                <declaration name="a" type="DerivativeStructure" line="94"/>
                <declaration name="b" type="DerivativeStructure" line="95"/>
            </method>
            <method name="testPrimitiveAdd" type="void" line="102">
                <scope line="103"/>
            </method>
            <method name="testAdd" type="void" line="111">
                <scope line="112">
                    <declaration name="x" type="DerivativeStructure" line="113"/>
                    <declaration name="y" type="DerivativeStructure" line="114"/>
                    <declaration name="z" type="DerivativeStructure" line="115"/>
                    <declaration name="xyz" type="DerivativeStructure" line="116"/>
                </scope>
            </method>
            <method name="testPrimitiveSubtract" type="void" line="122">
                <scope line="123"/>
            </method>
            <method name="testSubtract" type="void" line="131">
                <scope line="132">
                    <declaration name="x" type="DerivativeStructure" line="133"/>
                    <declaration name="y" type="DerivativeStructure" line="134"/>
                    <declaration name="z" type="DerivativeStructure" line="135"/>
                    <declaration name="xyz" type="DerivativeStructure" line="136"/>
                </scope>
            </method>
            <method name="testPrimitiveMultiply" type="void" line="142">
                <scope line="143"/>
            </method>
            <method name="testMultiply" type="void" line="151">
                <scope line="152">
                    <declaration name="x" type="DerivativeStructure" line="153"/>
                    <declaration name="y" type="DerivativeStructure" line="154"/>
                    <declaration name="z" type="DerivativeStructure" line="155"/>
                    <declaration name="xyz" type="DerivativeStructure" line="156"/>
                    <scope line="157">
                        <scope line="158">
                            <scope line="159">
                                <scope line="160"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testNegate" type="void" line="174">
                <scope line="175"/>
            </method>
            <method name="testReciprocal" type="void" line="183">
                <scope line="184">
                    <declaration name="r" type="DerivativeStructure" line="185"/>
                    <scope line="187">
                        <declaration name="expected" type="double" line="188"/>
                    </scope>
                </scope>
            </method>
            <method name="testPow" type="void" line="196">
                <scope line="197">
                    <scope line="198">
                        <declaration name="x" type="DerivativeStructure" line="200"/>
                        <declaration name="y" type="DerivativeStructure" line="201"/>
                        <declaration name="z" type="DerivativeStructure" line="202"/>
                        <declaration name="list" type="List&amp;lt;DerivativeStructure&amp;gt;" line="203"/>
                        <scope line="207">
                            <scope line="208"/>
                        </scope>
                        <scope line="211">
                            <scope line="212"/>
                        </scope>
                        <scope line="215">
                            <scope line="216">
                                <declaration name="p" type="DerivativeStructure" line="217"/>
                                <scope line="218"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testPowDoubleDS" type="void" line="229">
                <comment line="241">
                    the special case a = 0 is included here                    
                </comment>
                <comment line="252">
                    negative base: -1^x can be evaluated for integers only, so value is sometimes OK, derivatives are always NaN                    
                </comment>
                <comment line="270">
                    very special case: a = 0 and power = 0                    
                </comment>
                <comment line="273">
                    this should be OK for simple first derivative with one variable only ...                    
                </comment>
                <comment line="277">
                    the following checks show a LIMITATION of the current implementation
                     we have no way to tell x is a pure linear variable x = 0
                     we only say: &quot;x is a structure with value = 0.0,
                     first derivative with respect to x = 1.0, and all other derivatives
                     (first order with respect to y and z and higher derivatives) all 0.0.
                     We have function f(x) = a^x and x = 0 so we compute:
                     f(0) = 1, f&apos;(0) = ln(a), f&apos;&apos;(0) = ln(a)^2. The limit of these values
                     when a converges to 0 implies all derivatives keep switching between
                     +infinity and -infinity.
                    
                     Function composition rule for first derivatives is:
                     d[f(g(x,y,z))]/dy = f&apos;(g(x,y,z)) * dg(x,y,z)/dy
                     so given that in our case x represents g and does not depend
                     on y or z, we have dg(x,y,z)/dy = 0
                     applying the composition rules gives:
                     d[f(g(x,y,z))]/dy = f&apos;(g(x,y,z)) * dg(x,y,z)/dy
                                     = -infinity * 0
                                     = NaN
                     if we knew x is really the x variable and not the identity
                     function applied to x, we would not have computed f&apos;(g(x,y,z)) * dg(x,y,z)/dy
                     and we would have found that the result was 0 and not NaN                    
                </comment>
                <comment line="301">
                    Function composition rule for second derivatives is:
                     d2[f(g(x))]/dx2 = f&apos;&apos;(g(x)) * [g&apos;(x)]^2 + f&apos;(g(x)) * g&apos;&apos;(x)
                     when function f is the a^x root and x = 0 we have:
                     f(0) = 1, f&apos;(0) = ln(a), f&apos;&apos;(0) = ln(a)^2 which for a = 0 implies
                     all derivatives keep switching between +infinity and -infinity
                     so given that in our case x represents g, we have g(x) = 0,
                     g&apos;(x) = 1 and g&apos;&apos;(x) = 0
                     applying the composition rules gives:
                     d2[f(g(x))]/dx2 = f&apos;&apos;(g(x)) * [g&apos;(x)]^2 + f&apos;(g(x)) * g&apos;&apos;(x)
                                     = +infinity * 1^2 + -infinity * 0
                                     = +infinity + NaN
                                     = NaN
                     if we knew x is really the x variable and not the identity
                     function applied to x, we would not have computed f&apos;(g(x)) * g&apos;&apos;(x)
                     and we would have found that the result was +infinity and not NaN                    
                </comment>
                <scope line="230">
                    <declaration name="x" type="DerivativeStructure" line="232"/>
                    <declaration name="y" type="DerivativeStructure" line="233"/>
                    <declaration name="z" type="DerivativeStructure" line="234"/>
                    <declaration name="list" type="List&amp;lt;DerivativeStructure&amp;gt;" line="235"/>
                    <scope line="239">
                        <scope line="241">
                            <declaration name="reference" type="DerivativeStructure" line="242"/>
                            <declaration name="result" type="DerivativeStructure" line="245"/>
                        </scope>
                    </scope>
                    <declaration name="negEvenInteger" type="DerivativeStructure" line="252"/>
                    <declaration name="negOddInteger" type="DerivativeStructure" line="255"/>
                    <declaration name="negNonInteger" type="DerivativeStructure" line="258"/>
                    <declaration name="zeroNeg" type="DerivativeStructure" line="262"/>
                    <declaration name="posNeg" type="DerivativeStructure" line="265"/>
                    <declaration name="zeroZero" type="DerivativeStructure" line="270"/>
                    <scope line="315"/>
                </scope>
            </method>
            <method name="testExpression" type="void" line="329">
                <comment line="339">
                    f(x, y, z) = x + 5 x y - 2 z + (8 z x - y)^3                    
                </comment>
                <comment line="357">
                    df/dx = 1 + 5 y + 24 (8 z x - y)^2 z                    
                </comment>
                <comment line="364">
                    df/dxdy = 5 + 48 z*(y - 8 z x)                    
                </comment>
                <comment line="371">
                    df/dxdydz = 48 (y - 16 z x)                    
                </comment>
                <declaration name="epsilon" type="double" line="330"/>
                <scope line="331">
                    <declaration name="dsX" type="DerivativeStructure" line="332"/>
                    <scope line="333">
                        <declaration name="dsY" type="DerivativeStructure" line="334"/>
                        <scope line="335">
                            <declaration name="dsZ" type="DerivativeStructure" line="336"/>
                            <declaration name="ds" type="DerivativeStructure" line="339"/>
                            <declaration name="dsOther" type="DerivativeStructure" line="345"/>
                            <declaration name="f" type="double" line="350"/>
                            <declaration name="dfdx" type="double" line="357"/>
                            <declaration name="dfdxdy" type="double" line="364"/>
                            <declaration name="dfdxdydz" type="double" line="371"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testCompositionOneVariableX" type="void" line="384">
                <declaration name="epsilon" type="double" line="385"/>
                <scope line="386">
                    <scope line="387">
                        <declaration name="dsX" type="DerivativeStructure" line="388"/>
                        <scope line="389">
                            <declaration name="dsY" type="DerivativeStructure" line="390"/>
                            <declaration name="f" type="DerivativeStructure" line="391"/>
                            <declaration name="f0" type="double" line="392"/>
                            <scope line="394">
                                <declaration name="f1" type="double" line="395"/>
                                <scope line="397">
                                    <declaration name="f2" type="double" line="398"/>
                                    <scope line="400">
                                        <declaration name="f3" type="double" line="401"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testTrigo" type="void" line="412">
                <declaration name="epsilon" type="double" line="413"/>
                <scope line="414">
                    <scope line="415">
                        <declaration name="dsX" type="DerivativeStructure" line="416"/>
                        <scope line="417">
                            <declaration name="dsY" type="DerivativeStructure" line="418"/>
                            <scope line="419">
                                <declaration name="dsZ" type="DerivativeStructure" line="420"/>
                                <declaration name="f" type="DerivativeStructure" line="421"/>
                                <declaration name="a" type="double" line="422"/>
                                <declaration name="f0" type="double" line="423"/>
                                <scope line="425">
                                    <declaration name="dfdx" type="double" line="426"/>
                                    <declaration name="dfdy" type="double" line="428"/>
                                    <declaration name="cz" type="double" line="430"/>
                                    <declaration name="cz2" type="double" line="431"/>
                                    <declaration name="dfdz" type="double" line="432"/>
                                    <scope line="434">
                                        <declaration name="df2dx2" type="double" line="435"/>
                                        <declaration name="df2dy2" type="double" line="437"/>
                                        <declaration name="c4" type="double" line="441"/>
                                        <declaration name="df2dz2" type="double" line="442"/>
                                        <declaration name="df2dxdy" type="double" line="444"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testSqrtDefinition" type="void" line="455">
                <declaration name="epsilon" type="double[]" line="456"/>
                <scope line="457">
                    <scope line="458">
                        <declaration name="dsX" type="DerivativeStructure" line="459"/>
                        <declaration name="sqrt1" type="DerivativeStructure" line="460"/>
                        <declaration name="sqrt2" type="DerivativeStructure" line="461"/>
                        <declaration name="zero" type="DerivativeStructure" line="462"/>
                        <scope line="463"/>
                    </scope>
                </scope>
            </method>
            <method name="testRootNSingularity" type="void" line="471">
                <comment line="482">
                    the following checks shows a LIMITATION of the current implementation
                     we have no way to tell dsZero is a pure linear variable x = 0
                     we only say: &quot;dsZero is a structure with value = 0.0,
                     first derivative = 1.0, second and higher derivatives = 0.0&quot;.
                     Function composition rule for second derivatives is:
                     d2[f(g(x))]/dx2 = f&apos;&apos;(g(x)) * [g&apos;(x)]^2 + f&apos;(g(x)) * g&apos;&apos;(x)
                     when function f is the nth root and x = 0 we have:
                     f(0) = 0, f&apos;(0) = +infinity, f&apos;&apos;(0) = -infinity (and higher
                     derivatives keep switching between +infinity and -infinity)
                     so given that in our case dsZero represents g, we have g(x) = 0,
                     g&apos;(x) = 1 and g&apos;&apos;(x) = 0
                     applying the composition rules gives:
                     d2[f(g(x))]/dx2 = f&apos;&apos;(g(x)) * [g&apos;(x)]^2 + f&apos;(g(x)) * g&apos;&apos;(x)
                                     = -infinity * 1^2 + +infinity * 0
                                     = -infinity + NaN
                                     = NaN
                     if we knew dsZero is really the x variable and not the identity
                     function applied to x, we would not have computed f&apos;(g(x)) * g&apos;&apos;(x)
                     and we would have found that the result was -infinity and not NaN                    
                </comment>
                <comment line="505">
                    the following shows that the limitation explained above is NOT a bug...
                     if we set up the higher order derivatives for g appropriately, we do
                     compute the higher order derivatives of the composition correctly                    
                </comment>
                <scope line="472">
                    <scope line="473">
                        <declaration name="dsZero" type="DerivativeStructure" line="474"/>
                        <declaration name="rootN" type="DerivativeStructure" line="475"/>
                        <scope line="477">
                            <scope line="480"/>
                        </scope>
                        <declaration name="gDerivatives" type="double[]" line="507"/>
                        <scope line="509"/>
                        <declaration name="correctRoot" type="DerivativeStructure" line="512"/>
                        <scope line="514">
                            <scope line="517">
                                <scope line="519"/>
                                <scope line="521"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testSqrtPow2" type="void" line="534">
                <declaration name="epsilon" type="double[]" line="535"/>
                <scope line="536">
                    <scope line="537">
                        <declaration name="dsX" type="DerivativeStructure" line="538"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="539"/>
                        <declaration name="zero" type="DerivativeStructure" line="540"/>
                        <scope line="541"/>
                    </scope>
                </scope>
            </method>
            <method name="testCbrtDefinition" type="void" line="549">
                <declaration name="epsilon" type="double[]" line="550"/>
                <scope line="551">
                    <scope line="552">
                        <declaration name="dsX" type="DerivativeStructure" line="553"/>
                        <declaration name="cbrt1" type="DerivativeStructure" line="554"/>
                        <declaration name="cbrt2" type="DerivativeStructure" line="555"/>
                        <declaration name="zero" type="DerivativeStructure" line="556"/>
                        <scope line="557"/>
                    </scope>
                </scope>
            </method>
            <method name="testCbrtPow3" type="void" line="565">
                <declaration name="epsilon" type="double[]" line="566"/>
                <scope line="567">
                    <scope line="568">
                        <declaration name="dsX" type="DerivativeStructure" line="569"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="570"/>
                        <declaration name="zero" type="DerivativeStructure" line="571"/>
                        <scope line="572"/>
                    </scope>
                </scope>
            </method>
            <method name="testPowReciprocalPow" type="void" line="580">
                <declaration name="epsilon" type="double[]" line="581"/>
                <scope line="582">
                    <scope line="583">
                        <declaration name="dsX" type="DerivativeStructure" line="584"/>
                        <scope line="585">
                            <declaration name="dsY" type="DerivativeStructure" line="586"/>
                            <declaration name="rebuiltX" type="DerivativeStructure" line="587"/>
                            <declaration name="zero" type="DerivativeStructure" line="588"/>
                            <scope line="589">
                                <scope line="590">
                                    <scope line="591"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testHypotDefinition" type="void" line="602">
                <declaration name="epsilon" type="double" line="603"/>
                <scope line="604">
                    <scope line="605">
                        <declaration name="dsX" type="DerivativeStructure" line="606"/>
                        <scope line="607">
                            <declaration name="dsY" type="DerivativeStructure" line="608"/>
                            <declaration name="hypot" type="DerivativeStructure" line="609"/>
                            <declaration name="ref" type="DerivativeStructure" line="610"/>
                            <declaration name="zero" type="DerivativeStructure" line="611"/>
                            <scope line="612">
                                <scope line="613">
                                    <scope line="614"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testHypotNoOverflow" type="void" line="625">
                <declaration name="dsX" type="DerivativeStructure" line="627"/>
                <declaration name="dsY" type="DerivativeStructure" line="628"/>
                <declaration name="hypot" type="DerivativeStructure" line="629"/>
                <declaration name="sqrt" type="DerivativeStructure" line="634"/>
            </method>
            <method name="testHypotNeglectible" type="void" line="640">
                <declaration name="dsSmall" type="DerivativeStructure" line="642"/>
                <declaration name="dsLarge" type="DerivativeStructure" line="643"/>
            </method>
            <method name="testHypotSpecial" type="void" line="668"/>
            <method name="testPrimitiveRemainder" type="void" line="680">
                <declaration name="epsilon" type="double" line="681"/>
                <scope line="682">
                    <scope line="683">
                        <declaration name="dsX" type="DerivativeStructure" line="684"/>
                        <scope line="685">
                            <declaration name="remainder" type="DerivativeStructure" line="686"/>
                            <declaration name="ref" type="DerivativeStructure" line="687"/>
                            <declaration name="zero" type="DerivativeStructure" line="688"/>
                            <scope line="689">
                                <scope line="690">
                                    <scope line="691"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testRemainder" type="void" line="702">
                <declaration name="epsilon" type="double" line="703"/>
                <scope line="704">
                    <scope line="705">
                        <declaration name="dsX" type="DerivativeStructure" line="706"/>
                        <scope line="707">
                            <declaration name="dsY" type="DerivativeStructure" line="708"/>
                            <declaration name="remainder" type="DerivativeStructure" line="709"/>
                            <declaration name="ref" type="DerivativeStructure" line="710"/>
                            <declaration name="zero" type="DerivativeStructure" line="711"/>
                            <scope line="712">
                                <scope line="713">
                                    <scope line="714"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testExp" type="void" line="726">
                <declaration name="epsilon" type="double[]" line="727"/>
                <scope line="728">
                    <scope line="729">
                        <declaration name="refExp" type="double" line="730"/>
                        <declaration name="exp" type="DerivativeStructure" line="731"/>
                        <scope line="732"/>
                    </scope>
                </scope>
            </method>
            <method name="testExpm1Definition" type="void" line="740">
                <declaration name="epsilon" type="double" line="741"/>
                <scope line="742">
                    <scope line="743">
                        <declaration name="dsX" type="DerivativeStructure" line="744"/>
                        <declaration name="expm11" type="DerivativeStructure" line="745"/>
                        <declaration name="expm12" type="DerivativeStructure" line="746"/>
                        <declaration name="zero" type="DerivativeStructure" line="747"/>
                        <scope line="748"/>
                    </scope>
                </scope>
            </method>
            <method name="testLog" type="void" line="757">
                <declaration name="epsilon" type="double[]" line="758"/>
                <scope line="759">
                    <scope line="760">
                        <declaration name="log" type="DerivativeStructure" line="761"/>
                        <scope line="763">
                            <declaration name="refDer" type="double" line="764"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testLog1pDefinition" type="void" line="772">
                <declaration name="epsilon" type="double" line="773"/>
                <scope line="774">
                    <scope line="775">
                        <declaration name="dsX" type="DerivativeStructure" line="776"/>
                        <declaration name="log1p1" type="DerivativeStructure" line="777"/>
                        <declaration name="log1p2" type="DerivativeStructure" line="778"/>
                        <declaration name="zero" type="DerivativeStructure" line="779"/>
                        <scope line="780"/>
                    </scope>
                </scope>
            </method>
            <method name="testLog10Definition" type="void" line="788">
                <declaration name="epsilon" type="double[]" line="789"/>
                <scope line="790">
                    <scope line="791">
                        <declaration name="dsX" type="DerivativeStructure" line="792"/>
                        <declaration name="log101" type="DerivativeStructure" line="793"/>
                        <declaration name="log102" type="DerivativeStructure" line="794"/>
                        <declaration name="zero" type="DerivativeStructure" line="795"/>
                        <scope line="796"/>
                    </scope>
                </scope>
            </method>
            <method name="testLogExp" type="void" line="804">
                <declaration name="epsilon" type="double[]" line="805"/>
                <scope line="806">
                    <scope line="807">
                        <declaration name="dsX" type="DerivativeStructure" line="808"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="809"/>
                        <declaration name="zero" type="DerivativeStructure" line="810"/>
                        <scope line="811"/>
                    </scope>
                </scope>
            </method>
            <method name="testLog1pExpm1" type="void" line="819">
                <declaration name="epsilon" type="double[]" line="820"/>
                <scope line="821">
                    <scope line="822">
                        <declaration name="dsX" type="DerivativeStructure" line="823"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="824"/>
                        <declaration name="zero" type="DerivativeStructure" line="825"/>
                        <scope line="826"/>
                    </scope>
                </scope>
            </method>
            <method name="testLog10Power" type="void" line="834">
                <declaration name="epsilon" type="double[]" line="835"/>
                <scope line="836">
                    <scope line="837">
                        <declaration name="dsX" type="DerivativeStructure" line="838"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="839"/>
                        <declaration name="zero" type="DerivativeStructure" line="840"/>
                        <scope line="841"/>
                    </scope>
                </scope>
            </method>
            <method name="testSinCos" type="void" line="849">
                <declaration name="epsilon" type="double" line="850"/>
                <scope line="851">
                    <scope line="852">
                        <declaration name="dsX" type="DerivativeStructure" line="853"/>
                        <declaration name="sin" type="DerivativeStructure" line="854"/>
                        <declaration name="cos" type="DerivativeStructure" line="855"/>
                        <declaration name="s" type="double" line="856"/>
                        <declaration name="c" type="double" line="857"/>
                        <scope line="858"/>
                    </scope>
                </scope>
            </method>
            <method name="testSinAsin" type="void" line="883">
                <declaration name="epsilon" type="double[]" line="884"/>
                <scope line="885">
                    <scope line="886">
                        <declaration name="dsX" type="DerivativeStructure" line="887"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="888"/>
                        <declaration name="zero" type="DerivativeStructure" line="889"/>
                        <scope line="890"/>
                    </scope>
                </scope>
            </method>
            <method name="testCosAcos" type="void" line="898">
                <declaration name="epsilon" type="double[]" line="899"/>
                <scope line="900">
                    <scope line="901">
                        <declaration name="dsX" type="DerivativeStructure" line="902"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="903"/>
                        <declaration name="zero" type="DerivativeStructure" line="904"/>
                        <scope line="905"/>
                    </scope>
                </scope>
            </method>
            <method name="testTanAtan" type="void" line="913">
                <declaration name="epsilon" type="double[]" line="914"/>
                <scope line="915">
                    <scope line="916">
                        <declaration name="dsX" type="DerivativeStructure" line="917"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="918"/>
                        <declaration name="zero" type="DerivativeStructure" line="919"/>
                        <scope line="920"/>
                    </scope>
                </scope>
            </method>
            <method name="testTangentDefinition" type="void" line="928">
                <declaration name="epsilon" type="double[]" line="929"/>
                <scope line="930">
                    <scope line="931">
                        <declaration name="dsX" type="DerivativeStructure" line="932"/>
                        <declaration name="tan1" type="DerivativeStructure" line="933"/>
                        <declaration name="tan2" type="DerivativeStructure" line="934"/>
                        <declaration name="zero" type="DerivativeStructure" line="935"/>
                        <scope line="936"/>
                    </scope>
                </scope>
            </method>
            <method name="testAtan2" type="void" line="945">
                <declaration name="epsilon" type="double[]" line="946"/>
                <scope line="947">
                    <scope line="948">
                        <declaration name="dsX" type="DerivativeStructure" line="949"/>
                        <scope line="950">
                            <declaration name="dsY" type="DerivativeStructure" line="951"/>
                            <declaration name="atan2" type="DerivativeStructure" line="952"/>
                            <declaration name="ref" type="DerivativeStructure" line="953"/>
                            <scope line="954"/>
                            <declaration name="zero" type="DerivativeStructure" line="957"/>
                            <scope line="958">
                                <scope line="959">
                                    <scope line="960"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testAtan2SpecialCases" type="void" line="971">
                <declaration name="pp" type="DerivativeStructure" line="973"/>
                <declaration name="pn" type="DerivativeStructure" line="979"/>
                <declaration name="np" type="DerivativeStructure" line="984"/>
                <declaration name="nn" type="DerivativeStructure" line="990"/>
            </method>
            <method name="testSinhDefinition" type="void" line="998">
                <declaration name="epsilon" type="double[]" line="999"/>
                <scope line="1000">
                    <scope line="1001">
                        <declaration name="dsX" type="DerivativeStructure" line="1002"/>
                        <declaration name="sinh1" type="DerivativeStructure" line="1003"/>
                        <declaration name="sinh2" type="DerivativeStructure" line="1004"/>
                        <declaration name="zero" type="DerivativeStructure" line="1005"/>
                        <scope line="1006"/>
                    </scope>
                </scope>
            </method>
            <method name="testCoshDefinition" type="void" line="1014">
                <declaration name="epsilon" type="double[]" line="1015"/>
                <scope line="1016">
                    <scope line="1017">
                        <declaration name="dsX" type="DerivativeStructure" line="1018"/>
                        <declaration name="cosh1" type="DerivativeStructure" line="1019"/>
                        <declaration name="cosh2" type="DerivativeStructure" line="1020"/>
                        <declaration name="zero" type="DerivativeStructure" line="1021"/>
                        <scope line="1022"/>
                    </scope>
                </scope>
            </method>
            <method name="testTanhDefinition" type="void" line="1030">
                <declaration name="epsilon" type="double[]" line="1031"/>
                <scope line="1032">
                    <scope line="1033">
                        <declaration name="dsX" type="DerivativeStructure" line="1034"/>
                        <declaration name="tanh1" type="DerivativeStructure" line="1035"/>
                        <declaration name="tanh2" type="DerivativeStructure" line="1036"/>
                        <declaration name="zero" type="DerivativeStructure" line="1037"/>
                        <scope line="1038"/>
                    </scope>
                </scope>
            </method>
            <method name="testSinhAsinh" type="void" line="1046">
                <declaration name="epsilon" type="double[]" line="1047"/>
                <scope line="1048">
                    <scope line="1049">
                        <declaration name="dsX" type="DerivativeStructure" line="1050"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="1051"/>
                        <declaration name="zero" type="DerivativeStructure" line="1052"/>
                        <scope line="1053"/>
                    </scope>
                </scope>
            </method>
            <method name="testCoshAcosh" type="void" line="1061">
                <declaration name="epsilon" type="double[]" line="1062"/>
                <scope line="1063">
                    <scope line="1064">
                        <declaration name="dsX" type="DerivativeStructure" line="1065"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="1066"/>
                        <declaration name="zero" type="DerivativeStructure" line="1067"/>
                        <scope line="1068"/>
                    </scope>
                </scope>
            </method>
            <method name="testTanhAtanh" type="void" line="1076">
                <declaration name="epsilon" type="double[]" line="1077"/>
                <scope line="1078">
                    <scope line="1079">
                        <declaration name="dsX" type="DerivativeStructure" line="1080"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="1081"/>
                        <declaration name="zero" type="DerivativeStructure" line="1082"/>
                        <scope line="1083"/>
                    </scope>
                </scope>
            </method>
            <method name="testCompositionOneVariableY" type="void" line="1091">
                <declaration name="epsilon" type="double" line="1092"/>
                <scope line="1093">
                    <scope line="1094">
                        <declaration name="dsX" type="DerivativeStructure" line="1095"/>
                        <scope line="1096">
                            <declaration name="dsY" type="DerivativeStructure" line="1097"/>
                            <declaration name="f" type="DerivativeStructure" line="1098"/>
                            <declaration name="f0" type="double" line="1099"/>
                            <scope line="1101">
                                <declaration name="f1" type="double" line="1102"/>
                                <scope line="1104">
                                    <declaration name="f2" type="double" line="1105"/>
                                    <scope line="1107">
                                        <declaration name="f3" type="double" line="1108"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testTaylorPolynomial" type="void" line="1119">
                <scope line="1120">
                    <declaration name="dsX" type="DerivativeStructure" line="1121"/>
                    <scope line="1122">
                        <declaration name="dsY" type="DerivativeStructure" line="1123"/>
                        <scope line="1124">
                            <declaration name="dsZ" type="DerivativeStructure" line="1125"/>
                            <declaration name="f" type="DerivativeStructure" line="1126"/>
                            <scope line="1127">
                                <scope line="1128">
                                    <scope line="1129">
                                        <declaration name="ref" type="double" line="1130"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testTaylorAtan2" type="void" line="1141">
                <declaration name="expected" type="double[]" line="1142"/>
                <declaration name="x0" type="double" line="1143"/>
                <declaration name="y0" type="double" line="1144"/>
                <scope line="1145">
                    <declaration name="dsX" type="DerivativeStructure" line="1146"/>
                    <declaration name="dsY" type="DerivativeStructure" line="1147"/>
                    <declaration name="atan2" type="DerivativeStructure" line="1148"/>
                    <declaration name="maxError" type="double" line="1149"/>
                    <scope line="1150">
                        <scope line="1151">
                            <declaration name="ref" type="double" line="1152"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testAbs" type="void" line="1162">
                <declaration name="minusOne" type="DerivativeStructure" line="1164"/>
                <declaration name="plusOne" type="DerivativeStructure" line="1168"/>
                <declaration name="minusZero" type="DerivativeStructure" line="1172"/>
                <declaration name="plusZero" type="DerivativeStructure" line="1176"/>
            </method>
            <method name="testSignum" type="void" line="1184">
                <declaration name="minusOne" type="DerivativeStructure" line="1186"/>
                <declaration name="plusOne" type="DerivativeStructure" line="1190"/>
                <declaration name="minusZero" type="DerivativeStructure" line="1194"/>
                <declaration name="plusZero" type="DerivativeStructure" line="1199"/>
            </method>
            <method name="testCeilFloorRintLong" type="void" line="1207">
                <declaration name="x" type="DerivativeStructure" line="1209"/>
            </method>
            <method name="testCopySign" type="void" line="1224">
                <declaration name="minusOne" type="DerivativeStructure" line="1226"/>
                <declaration name="plusOne" type="DerivativeStructure" line="1238"/>
            </method>
            <method name="testToDegreesDefinition" type="void" line="1253">
                <declaration name="epsilon" type="double" line="1254"/>
                <scope line="1255">
                    <scope line="1256">
                        <declaration name="dsX" type="DerivativeStructure" line="1257"/>
                        <scope line="1259">
                            <scope line="1260"/>
                            <scope line="1262"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testToRadiansDefinition" type="void" line="1271">
                <declaration name="epsilon" type="double" line="1272"/>
                <scope line="1273">
                    <scope line="1274">
                        <declaration name="dsX" type="DerivativeStructure" line="1275"/>
                        <scope line="1277">
                            <scope line="1278"/>
                            <scope line="1280"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testDegRad" type="void" line="1289">
                <declaration name="epsilon" type="double" line="1290"/>
                <scope line="1291">
                    <scope line="1292">
                        <declaration name="dsX" type="DerivativeStructure" line="1293"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="1294"/>
                        <declaration name="zero" type="DerivativeStructure" line="1295"/>
                        <scope line="1296"/>
                    </scope>
                </scope>
            </method>
            <method name="testComposeMismatchedDimensions" type="void" line="1304"/>
            <method name="testCompose" type="void" line="1309">
                <declaration name="epsilon" type="double[]" line="1310"/>
                <declaration name="poly" type="PolynomialFunction" line="1311"/>
                <scope line="1313">
                    <declaration name="p" type="PolynomialFunction[]" line="1314"/>
                    <scope line="1316"/>
                    <scope line="1319">
                        <declaration name="dsX" type="DerivativeStructure" line="1320"/>
                        <declaration name="dsY1" type="DerivativeStructure" line="1321"/>
                        <scope line="1322"/>
                        <declaration name="f" type="double[]" line="1325"/>
                        <scope line="1326"/>
                        <declaration name="dsY2" type="DerivativeStructure" line="1329"/>
                        <declaration name="zero" type="DerivativeStructure" line="1330"/>
                        <scope line="1331"/>
                    </scope>
                </scope>
            </method>
            <method name="testField" type="void" line="1339">
                <scope line="1340">
                    <declaration name="x" type="DerivativeStructure" line="1341"/>
                </scope>
            </method>
            <method name="testOneParameterConstructor" type="void" line="1351">
                <comment line="1361">
                    expected                    
                </comment>
                <declaration name="x" type="double" line="1352"/>
                <declaration name="cos" type="double" line="1353"/>
                <declaration name="sin" type="double" line="1354"/>
                <declaration name="yRef" type="DerivativeStructure" line="1355"/>
                <scope line="1356"/>
                <scope line="1359"/>
                <scope line="1361"/>
                <declaration name="derivatives" type="double[]" line="1364"/>
                <declaration name="y" type="DerivativeStructure" line="1365"/>
            </method>
            <method name="testOneOrderConstructor" type="void" line="1371">
                <comment line="1383">
                    expected                    
                </comment>
                <declaration name="x" type="double" line="1372"/>
                <declaration name="y" type="double" line="1373"/>
                <declaration name="z" type="double" line="1374"/>
                <declaration name="xRef" type="DerivativeStructure" line="1375"/>
                <declaration name="yRef" type="DerivativeStructure" line="1376"/>
                <declaration name="zRef" type="DerivativeStructure" line="1377"/>
                <scope line="1378"/>
                <scope line="1381"/>
                <scope line="1383"/>
                <declaration name="derivatives" type="double[]" line="1386"/>
                <declaration name="t" type="DerivativeStructure" line="1387"/>
            </method>
            <method name="testLinearCombination1DSDS" type="void" line="1393">
                <declaration name="a" type="DerivativeStructure[]" line="1394"/>
                <declaration name="b" type="DerivativeStructure[]" line="1399"/>
                <declaration name="abSumInline" type="DerivativeStructure" line="1405"/>
                <declaration name="abSumArray" type="DerivativeStructure" line="1406"/>
            </method>
            <method name="testLinearCombination1DoubleDS" type="void" line="1420">
                <declaration name="a" type="double[]" line="1421"/>
                <declaration name="b" type="DerivativeStructure[]" line="1426"/>
                <declaration name="abSumInline" type="DerivativeStructure" line="1432"/>
                <declaration name="abSumArray" type="DerivativeStructure" line="1435"/>
            </method>
            <method name="testLinearCombination2DSDS" type="void" line="1446">
                <comment line="1448">
                    we compare accurate versus naive dot product implementations
                     on regular vectors (i.e. not extreme cases like in the previous test)                    
                </comment>
                <declaration name="random" type="Well1024a" line="1449"/>
                <scope line="1451">
                    <declaration name="u" type="DerivativeStructure[]" line="1452"/>
                    <declaration name="v" type="DerivativeStructure[]" line="1453"/>
                    <scope line="1454"/>
                    <declaration name="lin" type="DerivativeStructure" line="1459"/>
                    <declaration name="ref" type="double" line="1460"/>
                </scope>
            </method>
            <method name="testLinearCombination2DoubleDS" type="void" line="1490">
                <comment line="1492">
                    we compare accurate versus naive dot product implementations
                     on regular vectors (i.e. not extreme cases like in the previous test)                    
                </comment>
                <declaration name="random" type="Well1024a" line="1493"/>
                <scope line="1495">
                    <declaration name="u" type="double[]" line="1496"/>
                    <declaration name="v" type="DerivativeStructure[]" line="1497"/>
                    <scope line="1498"/>
                    <declaration name="lin" type="DerivativeStructure" line="1503"/>
                    <declaration name="ref" type="double" line="1504"/>
                </scope>
            </method>
            <method name="testSerialization" type="void" line="1534">
                <declaration name="a" type="DerivativeStructure" line="1535"/>
                <declaration name="b" type="DerivativeStructure" line="1536"/>
            </method>
            <method name="checkF0F1" type="void" line="1542">
                <params>
                    <param name="ds" type="DerivativeStructure"/>
                    <param name="value" type="double"/>
                    <param name="derivatives" type="double"/>
                </params>
                <comment line="1545">
                    check dimension                    
                </comment>
                <comment line="1548">
                    check value, directly and also as 0th order derivative                    
                </comment>
                <comment line="1552">
                    check first order derivatives                    
                </comment>
                <scope line="1552">
                    <declaration name="orders" type="int[]" line="1553"/>
                </scope>
            </method>
            <method name="checkEquals" type="void" line="1560">
                <params>
                    <param name="ds1" type="DerivativeStructure"/>
                    <param name="ds2" type="DerivativeStructure"/>
                    <param name="epsilon" type="double"/>
                </params>
                <comment line="1563">
                    check dimension                    
                </comment>
                <declaration name="derivatives" type="int[]" line="1566"/>
                <declaration name="sum" type="int" line="1567"/>
                <scope line="1568">
                    <scope line="1570"/>
                    <declaration name="increment" type="boolean" line="1576"/>
                    <scope line="1578">
                        <scope line="1579">
                            <scope line="1580"/>
                            <scope line="1582"/>
                        </scope>
                    </scope>
                    <scope line="1589"/>
                </scope>
            </method>
        </class>
    </source>