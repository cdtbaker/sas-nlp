<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.differentiation">
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.ExtendedFieldElementAbstractTest"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.random.Well1024a"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="DerivativeStructureTest" line="34">
            <extends class="ExtendedFieldElementAbstractTest">
                <type_params>
                    <type_param name="DerivativeStructure"/>
                </type_params>
            </extends>
            <javadoc line="34">
                Test for class {@link DerivativeStructure}.                
            </javadoc>
            <method name="build" type="DerivativeStructure" line="39">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="testWrongVariableIndex" type="void" line="44"/>
            <method name="testMissingOrders" type="void" line="49"/>
            <method name="testTooLargeOrder" type="void" line="54"/>
            <method name="testVariableWithoutDerivative0" type="void" line="59">
                <declaration name="v" type="DerivativeStructure" line="60"/>
            </method>
            <method name="testVariableWithoutDerivative1" type="void" line="65">
                <declaration name="v" type="DerivativeStructure" line="66"/>
            </method>
            <method name="testVariable" type="void" line="71">
                <scope line="72"/>
            </method>
            <method name="testConstant" type="void" line="83">
                <scope line="84"/>
            </method>
            <method name="testPrimitiveAdd" type="void" line="91">
                <scope line="92"/>
            </method>
            <method name="testAdd" type="void" line="100">
                <scope line="101">
                    <declaration name="x" type="DerivativeStructure" line="102"/>
                    <declaration name="y" type="DerivativeStructure" line="103"/>
                    <declaration name="z" type="DerivativeStructure" line="104"/>
                    <declaration name="xyz" type="DerivativeStructure" line="105"/>
                </scope>
            </method>
            <method name="testPrimitiveSubtract" type="void" line="111">
                <scope line="112"/>
            </method>
            <method name="testSubtract" type="void" line="120">
                <scope line="121">
                    <declaration name="x" type="DerivativeStructure" line="122"/>
                    <declaration name="y" type="DerivativeStructure" line="123"/>
                    <declaration name="z" type="DerivativeStructure" line="124"/>
                    <declaration name="xyz" type="DerivativeStructure" line="125"/>
                </scope>
            </method>
            <method name="testPrimitiveMultiply" type="void" line="131">
                <scope line="132"/>
            </method>
            <method name="testMultiply" type="void" line="140">
                <scope line="141">
                    <declaration name="x" type="DerivativeStructure" line="142"/>
                    <declaration name="y" type="DerivativeStructure" line="143"/>
                    <declaration name="z" type="DerivativeStructure" line="144"/>
                    <declaration name="xyz" type="DerivativeStructure" line="145"/>
                    <scope line="146">
                        <scope line="147">
                            <scope line="148">
                                <scope line="149"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testNegate" type="void" line="163">
                <scope line="164"/>
            </method>
            <method name="testReciprocal" type="void" line="172">
                <scope line="173">
                    <declaration name="r" type="DerivativeStructure" line="174"/>
                    <scope line="176">
                        <declaration name="expected" type="double" line="177"/>
                    </scope>
                </scope>
            </method>
            <method name="testPow" type="void" line="185">
                <scope line="186">
                    <scope line="187">
                        <declaration name="x" type="DerivativeStructure" line="189"/>
                        <declaration name="y" type="DerivativeStructure" line="190"/>
                        <declaration name="z" type="DerivativeStructure" line="191"/>
                        <declaration name="list" type="List&lt;DerivativeStructure&gt;" line="192"/>
                        <scope line="196">
                            <scope line="197"/>
                        </scope>
                        <scope line="200">
                            <scope line="201"/>
                        </scope>
                        <scope line="204">
                            <scope line="205">
                                <declaration name="p" type="DerivativeStructure" line="206"/>
                                <scope line="207"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testExpression" type="void" line="218">
                <comment line="228">
                    f(x, y, z) = x + 5 x y - 2 z + (8 z x - y)^3                    
                </comment>
                <comment line="246">
                    df/dx = 1 + 5 y + 24 (8 z x - y)^2 z                    
                </comment>
                <comment line="253">
                    df/dxdy = 5 + 48 z*(y - 8 z x)                    
                </comment>
                <comment line="260">
                    df/dxdydz = 48 (y - 16 z x)                    
                </comment>
                <declaration name="epsilon" type="double" line="219"/>
                <scope line="220">
                    <declaration name="dsX" type="DerivativeStructure" line="221"/>
                    <scope line="222">
                        <declaration name="dsY" type="DerivativeStructure" line="223"/>
                        <scope line="224">
                            <declaration name="dsZ" type="DerivativeStructure" line="225"/>
                            <declaration name="ds" type="DerivativeStructure" line="228"/>
                            <declaration name="dsOther" type="DerivativeStructure" line="234"/>
                            <declaration name="f" type="double" line="239"/>
                            <declaration name="dfdx" type="double" line="246"/>
                            <declaration name="dfdxdy" type="double" line="253"/>
                            <declaration name="dfdxdydz" type="double" line="260"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testCompositionOneVariableX" type="void" line="273">
                <declaration name="epsilon" type="double" line="274"/>
                <scope line="275">
                    <scope line="276">
                        <declaration name="dsX" type="DerivativeStructure" line="277"/>
                        <scope line="278">
                            <declaration name="dsY" type="DerivativeStructure" line="279"/>
                            <declaration name="f" type="DerivativeStructure" line="280"/>
                            <declaration name="f0" type="double" line="281"/>
                            <scope line="283">
                                <declaration name="f1" type="double" line="284"/>
                                <scope line="286">
                                    <declaration name="f2" type="double" line="287"/>
                                    <scope line="289">
                                        <declaration name="f3" type="double" line="290"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testTrigo" type="void" line="301">
                <declaration name="epsilon" type="double" line="302"/>
                <scope line="303">
                    <scope line="304">
                        <declaration name="dsX" type="DerivativeStructure" line="305"/>
                        <scope line="306">
                            <declaration name="dsY" type="DerivativeStructure" line="307"/>
                            <scope line="308">
                                <declaration name="dsZ" type="DerivativeStructure" line="309"/>
                                <declaration name="f" type="DerivativeStructure" line="310"/>
                                <declaration name="a" type="double" line="311"/>
                                <declaration name="f0" type="double" line="312"/>
                                <scope line="314">
                                    <declaration name="dfdx" type="double" line="315"/>
                                    <declaration name="dfdy" type="double" line="317"/>
                                    <declaration name="cz" type="double" line="319"/>
                                    <declaration name="cz2" type="double" line="320"/>
                                    <declaration name="dfdz" type="double" line="321"/>
                                    <scope line="323">
                                        <declaration name="df2dx2" type="double" line="324"/>
                                        <declaration name="df2dy2" type="double" line="326"/>
                                        <declaration name="c4" type="double" line="330"/>
                                        <declaration name="df2dz2" type="double" line="331"/>
                                        <declaration name="df2dxdy" type="double" line="333"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testSqrtDefinition" type="void" line="344">
                <declaration name="epsilon" type="double[]" line="345"/>
                <scope line="346">
                    <scope line="347">
                        <declaration name="dsX" type="DerivativeStructure" line="348"/>
                        <declaration name="sqrt1" type="DerivativeStructure" line="349"/>
                        <declaration name="sqrt2" type="DerivativeStructure" line="350"/>
                        <declaration name="zero" type="DerivativeStructure" line="351"/>
                        <scope line="352"/>
                    </scope>
                </scope>
            </method>
            <method name="testRootNSingularity" type="void" line="360">
                <comment line="371">
                    the following checks shows a LIMITATION of the current implementation
                     we have no way to tell dsZero is a pure linear variable x = 0
                     we only say: &quot;dsZero is a structure with value = 0.0,
                     first derivative = 1.0, second and higher derivatives = 0.0&quot;.
                     Function composition rule for second derivatives is:
                     d2[f(g(x))]/dx2 = f&apos;&apos;(g(x)) * [g&apos;(x)]^2 + f&apos;(g(x)) * g&apos;&apos;(x)
                     when function f is the nth root and x = 0 we have:
                     f(0) = 0, f&apos;(0) = +infinity, f&apos;&apos;(0) = -infinity (and higher
                     derivatives keep switching between +infinity and -infinity)
                     so given that in our case dsZero represents g, we have g(x) = 0,
                     g&apos;(x) = 1 and g&apos;&apos;(x) = 0
                     applying the composition rules gives:
                     d2[f(g(x))]/dx2 = f&apos;&apos;(g(x)) * [g&apos;(x)]^2 + f&apos;(g(x)) * g&apos;&apos;(x)
                                     = -infinity * 1^2 + +infinity * 0
                                     = -infinity + NaN
                                     = NaN
                     if we knew dsZero is really the x variable and not the identity
                     function applied to x, we would not have computed f&apos;(g(x)) * g&apos;&apos;(x)
                     and we would have found that the result was -infinity and not NaN                    
                </comment>
                <comment line="394">
                    the following shows that the limitation explained above is NOT a bug...
                     if we set up the higher order derivatives for g appropriately, we do
                     compute the higher order derivatives of the composition correctly                    
                </comment>
                <scope line="361">
                    <scope line="362">
                        <declaration name="dsZero" type="DerivativeStructure" line="363"/>
                        <declaration name="rootN" type="DerivativeStructure" line="364"/>
                        <scope line="366">
                            <scope line="369"/>
                        </scope>
                        <declaration name="gDerivatives" type="double[]" line="396"/>
                        <scope line="398"/>
                        <declaration name="correctRoot" type="DerivativeStructure" line="401"/>
                        <scope line="403">
                            <scope line="406">
                                <scope line="408"/>
                                <scope line="410"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testSqrtPow2" type="void" line="423">
                <declaration name="epsilon" type="double[]" line="424"/>
                <scope line="425">
                    <scope line="426">
                        <declaration name="dsX" type="DerivativeStructure" line="427"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="428"/>
                        <declaration name="zero" type="DerivativeStructure" line="429"/>
                        <scope line="430"/>
                    </scope>
                </scope>
            </method>
            <method name="testCbrtDefinition" type="void" line="438">
                <declaration name="epsilon" type="double[]" line="439"/>
                <scope line="440">
                    <scope line="441">
                        <declaration name="dsX" type="DerivativeStructure" line="442"/>
                        <declaration name="cbrt1" type="DerivativeStructure" line="443"/>
                        <declaration name="cbrt2" type="DerivativeStructure" line="444"/>
                        <declaration name="zero" type="DerivativeStructure" line="445"/>
                        <scope line="446"/>
                    </scope>
                </scope>
            </method>
            <method name="testCbrtPow3" type="void" line="454">
                <declaration name="epsilon" type="double[]" line="455"/>
                <scope line="456">
                    <scope line="457">
                        <declaration name="dsX" type="DerivativeStructure" line="458"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="459"/>
                        <declaration name="zero" type="DerivativeStructure" line="460"/>
                        <scope line="461"/>
                    </scope>
                </scope>
            </method>
            <method name="testPowReciprocalPow" type="void" line="469">
                <declaration name="epsilon" type="double[]" line="470"/>
                <scope line="471">
                    <scope line="472">
                        <declaration name="dsX" type="DerivativeStructure" line="473"/>
                        <scope line="474">
                            <declaration name="dsY" type="DerivativeStructure" line="475"/>
                            <declaration name="rebuiltX" type="DerivativeStructure" line="476"/>
                            <declaration name="zero" type="DerivativeStructure" line="477"/>
                            <scope line="478">
                                <scope line="479">
                                    <scope line="480"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testHypotDefinition" type="void" line="491">
                <declaration name="epsilon" type="double" line="492"/>
                <scope line="493">
                    <scope line="494">
                        <declaration name="dsX" type="DerivativeStructure" line="495"/>
                        <scope line="496">
                            <declaration name="dsY" type="DerivativeStructure" line="497"/>
                            <declaration name="hypot" type="DerivativeStructure" line="498"/>
                            <declaration name="ref" type="DerivativeStructure" line="499"/>
                            <declaration name="zero" type="DerivativeStructure" line="500"/>
                            <scope line="501">
                                <scope line="502">
                                    <scope line="503"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testHypotNoOverflow" type="void" line="514">
                <declaration name="dsX" type="DerivativeStructure" line="516"/>
                <declaration name="dsY" type="DerivativeStructure" line="517"/>
                <declaration name="hypot" type="DerivativeStructure" line="518"/>
                <declaration name="sqrt" type="DerivativeStructure" line="523"/>
            </method>
            <method name="testHypotNeglectible" type="void" line="529">
                <declaration name="dsSmall" type="DerivativeStructure" line="531"/>
                <declaration name="dsLarge" type="DerivativeStructure" line="532"/>
            </method>
            <method name="testHypotSpecial" type="void" line="557"/>
            <method name="testPrimitiveRemainder" type="void" line="569">
                <declaration name="epsilon" type="double" line="570"/>
                <scope line="571">
                    <scope line="572">
                        <declaration name="dsX" type="DerivativeStructure" line="573"/>
                        <scope line="574">
                            <declaration name="remainder" type="DerivativeStructure" line="575"/>
                            <declaration name="ref" type="DerivativeStructure" line="576"/>
                            <declaration name="zero" type="DerivativeStructure" line="577"/>
                            <scope line="578">
                                <scope line="579">
                                    <scope line="580"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testRemainder" type="void" line="591">
                <declaration name="epsilon" type="double" line="592"/>
                <scope line="593">
                    <scope line="594">
                        <declaration name="dsX" type="DerivativeStructure" line="595"/>
                        <scope line="596">
                            <declaration name="dsY" type="DerivativeStructure" line="597"/>
                            <declaration name="remainder" type="DerivativeStructure" line="598"/>
                            <declaration name="ref" type="DerivativeStructure" line="599"/>
                            <declaration name="zero" type="DerivativeStructure" line="600"/>
                            <scope line="601">
                                <scope line="602">
                                    <scope line="603"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testExp" type="void" line="614">
                <declaration name="epsilon" type="double[]" line="615"/>
                <scope line="616">
                    <scope line="617">
                        <declaration name="refExp" type="double" line="618"/>
                        <declaration name="exp" type="DerivativeStructure" line="619"/>
                        <scope line="620"/>
                    </scope>
                </scope>
            </method>
            <method name="testExpm1Definition" type="void" line="628">
                <declaration name="epsilon" type="double" line="629"/>
                <scope line="630">
                    <scope line="631">
                        <declaration name="dsX" type="DerivativeStructure" line="632"/>
                        <declaration name="expm11" type="DerivativeStructure" line="633"/>
                        <declaration name="expm12" type="DerivativeStructure" line="634"/>
                        <declaration name="zero" type="DerivativeStructure" line="635"/>
                        <scope line="636"/>
                    </scope>
                </scope>
            </method>
            <method name="testLog" type="void" line="644">
                <declaration name="epsilon" type="double[]" line="645"/>
                <scope line="646">
                    <scope line="647">
                        <declaration name="log" type="DerivativeStructure" line="648"/>
                        <scope line="650">
                            <declaration name="refDer" type="double" line="651"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testLog1pDefinition" type="void" line="659">
                <declaration name="epsilon" type="double" line="660"/>
                <scope line="661">
                    <scope line="662">
                        <declaration name="dsX" type="DerivativeStructure" line="663"/>
                        <declaration name="log1p1" type="DerivativeStructure" line="664"/>
                        <declaration name="log1p2" type="DerivativeStructure" line="665"/>
                        <declaration name="zero" type="DerivativeStructure" line="666"/>
                        <scope line="667"/>
                    </scope>
                </scope>
            </method>
            <method name="testLog10Definition" type="void" line="675">
                <declaration name="epsilon" type="double[]" line="676"/>
                <scope line="677">
                    <scope line="678">
                        <declaration name="dsX" type="DerivativeStructure" line="679"/>
                        <declaration name="log101" type="DerivativeStructure" line="680"/>
                        <declaration name="log102" type="DerivativeStructure" line="681"/>
                        <declaration name="zero" type="DerivativeStructure" line="682"/>
                        <scope line="683"/>
                    </scope>
                </scope>
            </method>
            <method name="testLogExp" type="void" line="691">
                <declaration name="epsilon" type="double[]" line="692"/>
                <scope line="693">
                    <scope line="694">
                        <declaration name="dsX" type="DerivativeStructure" line="695"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="696"/>
                        <declaration name="zero" type="DerivativeStructure" line="697"/>
                        <scope line="698"/>
                    </scope>
                </scope>
            </method>
            <method name="testLog1pExpm1" type="void" line="706">
                <declaration name="epsilon" type="double[]" line="707"/>
                <scope line="708">
                    <scope line="709">
                        <declaration name="dsX" type="DerivativeStructure" line="710"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="711"/>
                        <declaration name="zero" type="DerivativeStructure" line="712"/>
                        <scope line="713"/>
                    </scope>
                </scope>
            </method>
            <method name="testLog10Power" type="void" line="721">
                <declaration name="epsilon" type="double[]" line="722"/>
                <scope line="723">
                    <scope line="724">
                        <declaration name="dsX" type="DerivativeStructure" line="725"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="726"/>
                        <declaration name="zero" type="DerivativeStructure" line="727"/>
                        <scope line="728"/>
                    </scope>
                </scope>
            </method>
            <method name="testSinCos" type="void" line="736">
                <declaration name="epsilon" type="double" line="737"/>
                <scope line="738">
                    <scope line="739">
                        <declaration name="dsX" type="DerivativeStructure" line="740"/>
                        <declaration name="sin" type="DerivativeStructure" line="741"/>
                        <declaration name="cos" type="DerivativeStructure" line="742"/>
                        <declaration name="s" type="double" line="743"/>
                        <declaration name="c" type="double" line="744"/>
                        <scope line="745"/>
                    </scope>
                </scope>
            </method>
            <method name="testSinAsin" type="void" line="770">
                <declaration name="epsilon" type="double[]" line="771"/>
                <scope line="772">
                    <scope line="773">
                        <declaration name="dsX" type="DerivativeStructure" line="774"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="775"/>
                        <declaration name="zero" type="DerivativeStructure" line="776"/>
                        <scope line="777"/>
                    </scope>
                </scope>
            </method>
            <method name="testCosAcos" type="void" line="785">
                <declaration name="epsilon" type="double[]" line="786"/>
                <scope line="787">
                    <scope line="788">
                        <declaration name="dsX" type="DerivativeStructure" line="789"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="790"/>
                        <declaration name="zero" type="DerivativeStructure" line="791"/>
                        <scope line="792"/>
                    </scope>
                </scope>
            </method>
            <method name="testTanAtan" type="void" line="800">
                <declaration name="epsilon" type="double[]" line="801"/>
                <scope line="802">
                    <scope line="803">
                        <declaration name="dsX" type="DerivativeStructure" line="804"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="805"/>
                        <declaration name="zero" type="DerivativeStructure" line="806"/>
                        <scope line="807"/>
                    </scope>
                </scope>
            </method>
            <method name="testTangentDefinition" type="void" line="815">
                <declaration name="epsilon" type="double[]" line="816"/>
                <scope line="817">
                    <scope line="818">
                        <declaration name="dsX" type="DerivativeStructure" line="819"/>
                        <declaration name="tan1" type="DerivativeStructure" line="820"/>
                        <declaration name="tan2" type="DerivativeStructure" line="821"/>
                        <declaration name="zero" type="DerivativeStructure" line="822"/>
                        <scope line="823"/>
                    </scope>
                </scope>
            </method>
            <method name="testAtan2" type="void" line="831">
                <declaration name="epsilon" type="double[]" line="832"/>
                <scope line="833">
                    <scope line="834">
                        <declaration name="dsX" type="DerivativeStructure" line="835"/>
                        <scope line="836">
                            <declaration name="dsY" type="DerivativeStructure" line="837"/>
                            <declaration name="atan2" type="DerivativeStructure" line="838"/>
                            <declaration name="ref" type="DerivativeStructure" line="839"/>
                            <scope line="840"/>
                            <declaration name="zero" type="DerivativeStructure" line="843"/>
                            <scope line="844">
                                <scope line="845">
                                    <scope line="846"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testAtan2SpecialCases" type="void" line="857">
                <declaration name="pp" type="DerivativeStructure" line="859"/>
                <declaration name="pn" type="DerivativeStructure" line="865"/>
                <declaration name="np" type="DerivativeStructure" line="870"/>
                <declaration name="nn" type="DerivativeStructure" line="876"/>
            </method>
            <method name="testSinhDefinition" type="void" line="884">
                <declaration name="epsilon" type="double[]" line="885"/>
                <scope line="886">
                    <scope line="887">
                        <declaration name="dsX" type="DerivativeStructure" line="888"/>
                        <declaration name="sinh1" type="DerivativeStructure" line="889"/>
                        <declaration name="sinh2" type="DerivativeStructure" line="890"/>
                        <declaration name="zero" type="DerivativeStructure" line="891"/>
                        <scope line="892"/>
                    </scope>
                </scope>
            </method>
            <method name="testCoshDefinition" type="void" line="900">
                <declaration name="epsilon" type="double[]" line="901"/>
                <scope line="902">
                    <scope line="903">
                        <declaration name="dsX" type="DerivativeStructure" line="904"/>
                        <declaration name="cosh1" type="DerivativeStructure" line="905"/>
                        <declaration name="cosh2" type="DerivativeStructure" line="906"/>
                        <declaration name="zero" type="DerivativeStructure" line="907"/>
                        <scope line="908"/>
                    </scope>
                </scope>
            </method>
            <method name="testTanhDefinition" type="void" line="916">
                <declaration name="epsilon" type="double[]" line="917"/>
                <scope line="918">
                    <scope line="919">
                        <declaration name="dsX" type="DerivativeStructure" line="920"/>
                        <declaration name="tanh1" type="DerivativeStructure" line="921"/>
                        <declaration name="tanh2" type="DerivativeStructure" line="922"/>
                        <declaration name="zero" type="DerivativeStructure" line="923"/>
                        <scope line="924"/>
                    </scope>
                </scope>
            </method>
            <method name="testSinhAsinh" type="void" line="932">
                <declaration name="epsilon" type="double[]" line="933"/>
                <scope line="934">
                    <scope line="935">
                        <declaration name="dsX" type="DerivativeStructure" line="936"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="937"/>
                        <declaration name="zero" type="DerivativeStructure" line="938"/>
                        <scope line="939"/>
                    </scope>
                </scope>
            </method>
            <method name="testCoshAcosh" type="void" line="947">
                <declaration name="epsilon" type="double[]" line="948"/>
                <scope line="949">
                    <scope line="950">
                        <declaration name="dsX" type="DerivativeStructure" line="951"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="952"/>
                        <declaration name="zero" type="DerivativeStructure" line="953"/>
                        <scope line="954"/>
                    </scope>
                </scope>
            </method>
            <method name="testTanhAtanh" type="void" line="962">
                <declaration name="epsilon" type="double[]" line="963"/>
                <scope line="964">
                    <scope line="965">
                        <declaration name="dsX" type="DerivativeStructure" line="966"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="967"/>
                        <declaration name="zero" type="DerivativeStructure" line="968"/>
                        <scope line="969"/>
                    </scope>
                </scope>
            </method>
            <method name="testCompositionOneVariableY" type="void" line="977">
                <declaration name="epsilon" type="double" line="978"/>
                <scope line="979">
                    <scope line="980">
                        <declaration name="dsX" type="DerivativeStructure" line="981"/>
                        <scope line="982">
                            <declaration name="dsY" type="DerivativeStructure" line="983"/>
                            <declaration name="f" type="DerivativeStructure" line="984"/>
                            <declaration name="f0" type="double" line="985"/>
                            <scope line="987">
                                <declaration name="f1" type="double" line="988"/>
                                <scope line="990">
                                    <declaration name="f2" type="double" line="991"/>
                                    <scope line="993">
                                        <declaration name="f3" type="double" line="994"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testTaylorPolynomial" type="void" line="1005">
                <scope line="1006">
                    <declaration name="dsX" type="DerivativeStructure" line="1007"/>
                    <scope line="1008">
                        <declaration name="dsY" type="DerivativeStructure" line="1009"/>
                        <scope line="1010">
                            <declaration name="dsZ" type="DerivativeStructure" line="1011"/>
                            <declaration name="f" type="DerivativeStructure" line="1012"/>
                            <scope line="1013">
                                <scope line="1014">
                                    <scope line="1015">
                                        <declaration name="ref" type="double" line="1016"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testTaylorAtan2" type="void" line="1027">
                <declaration name="expected" type="double[]" line="1028"/>
                <declaration name="x0" type="double" line="1029"/>
                <declaration name="y0" type="double" line="1030"/>
                <scope line="1031">
                    <declaration name="dsX" type="DerivativeStructure" line="1032"/>
                    <declaration name="dsY" type="DerivativeStructure" line="1033"/>
                    <declaration name="atan2" type="DerivativeStructure" line="1034"/>
                    <declaration name="maxError" type="double" line="1035"/>
                    <scope line="1036">
                        <scope line="1037">
                            <declaration name="ref" type="double" line="1038"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testAbs" type="void" line="1047">
                <declaration name="minusOne" type="DerivativeStructure" line="1049"/>
                <declaration name="plusOne" type="DerivativeStructure" line="1053"/>
                <declaration name="minusZero" type="DerivativeStructure" line="1057"/>
                <declaration name="plusZero" type="DerivativeStructure" line="1061"/>
            </method>
            <method name="testSignum" type="void" line="1068">
                <declaration name="minusOne" type="DerivativeStructure" line="1070"/>
                <declaration name="plusOne" type="DerivativeStructure" line="1074"/>
                <declaration name="minusZero" type="DerivativeStructure" line="1078"/>
                <declaration name="plusZero" type="DerivativeStructure" line="1083"/>
            </method>
            <method name="testCeilFloorRintLong" type="void" line="1091">
                <declaration name="x" type="DerivativeStructure" line="1093"/>
            </method>
            <method name="testCopySign" type="void" line="1108">
                <declaration name="minusOne" type="DerivativeStructure" line="1110"/>
                <declaration name="plusOne" type="DerivativeStructure" line="1122"/>
            </method>
            <method name="testToDegreesDefinition" type="void" line="1137">
                <declaration name="epsilon" type="double" line="1138"/>
                <scope line="1139">
                    <scope line="1140">
                        <declaration name="dsX" type="DerivativeStructure" line="1141"/>
                        <scope line="1143">
                            <scope line="1144"/>
                            <scope line="1146"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testToRadiansDefinition" type="void" line="1155">
                <declaration name="epsilon" type="double" line="1156"/>
                <scope line="1157">
                    <scope line="1158">
                        <declaration name="dsX" type="DerivativeStructure" line="1159"/>
                        <scope line="1161">
                            <scope line="1162"/>
                            <scope line="1164"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testDegRad" type="void" line="1173">
                <declaration name="epsilon" type="double" line="1174"/>
                <scope line="1175">
                    <scope line="1176">
                        <declaration name="dsX" type="DerivativeStructure" line="1177"/>
                        <declaration name="rebuiltX" type="DerivativeStructure" line="1178"/>
                        <declaration name="zero" type="DerivativeStructure" line="1179"/>
                        <scope line="1180"/>
                    </scope>
                </scope>
            </method>
            <method name="testComposeMismatchedDimensions" type="void" line="1188"/>
            <method name="testCompose" type="void" line="1193">
                <declaration name="epsilon" type="double[]" line="1194"/>
                <declaration name="poly" type="PolynomialFunction" line="1195"/>
                <scope line="1197">
                    <declaration name="p" type="PolynomialFunction[]" line="1198"/>
                    <scope line="1200"/>
                    <scope line="1203">
                        <declaration name="dsX" type="DerivativeStructure" line="1204"/>
                        <declaration name="dsY1" type="DerivativeStructure" line="1205"/>
                        <scope line="1206"/>
                        <declaration name="f" type="double[]" line="1209"/>
                        <scope line="1210"/>
                        <declaration name="dsY2" type="DerivativeStructure" line="1213"/>
                        <declaration name="zero" type="DerivativeStructure" line="1214"/>
                        <scope line="1215"/>
                    </scope>
                </scope>
            </method>
            <method name="testField" type="void" line="1223">
                <scope line="1224">
                    <declaration name="x" type="DerivativeStructure" line="1225"/>
                </scope>
            </method>
            <method name="testOneParameterConstructor" type="void" line="1235">
                <comment line="1245">
                    expected                    
                </comment>
                <declaration name="x" type="double" line="1236"/>
                <declaration name="cos" type="double" line="1237"/>
                <declaration name="sin" type="double" line="1238"/>
                <declaration name="yRef" type="DerivativeStructure" line="1239"/>
                <scope line="1240"/>
                <scope line="1243"/>
                <scope line="1245"/>
                <declaration name="derivatives" type="double[]" line="1248"/>
                <declaration name="y" type="DerivativeStructure" line="1249"/>
            </method>
            <method name="testOneOrderConstructor" type="void" line="1255">
                <comment line="1267">
                    expected                    
                </comment>
                <declaration name="x" type="double" line="1256"/>
                <declaration name="y" type="double" line="1257"/>
                <declaration name="z" type="double" line="1258"/>
                <declaration name="xRef" type="DerivativeStructure" line="1259"/>
                <declaration name="yRef" type="DerivativeStructure" line="1260"/>
                <declaration name="zRef" type="DerivativeStructure" line="1261"/>
                <scope line="1262"/>
                <scope line="1265"/>
                <scope line="1267"/>
                <declaration name="derivatives" type="double[]" line="1270"/>
                <declaration name="t" type="DerivativeStructure" line="1271"/>
            </method>
            <method name="testLinearCombination1DSDS" type="void" line="1277">
                <declaration name="a" type="DerivativeStructure[]" line="1278"/>
                <declaration name="b" type="DerivativeStructure[]" line="1283"/>
                <declaration name="abSumInline" type="DerivativeStructure" line="1289"/>
                <declaration name="abSumArray" type="DerivativeStructure" line="1290"/>
            </method>
            <method name="testLinearCombination1DoubleDS" type="void" line="1304">
                <declaration name="a" type="double[]" line="1305"/>
                <declaration name="b" type="DerivativeStructure[]" line="1310"/>
                <declaration name="abSumInline" type="DerivativeStructure" line="1316"/>
                <declaration name="abSumArray" type="DerivativeStructure" line="1319"/>
            </method>
            <method name="testLinearCombination2DSDS" type="void" line="1330">
                <comment line="1332">
                    we compare accurate versus naive dot product implementations
                     on regular vectors (i.e. not extreme cases like in the previous test)                    
                </comment>
                <declaration name="random" type="Well1024a" line="1333"/>
                <scope line="1335">
                    <declaration name="u" type="DerivativeStructure[]" line="1336"/>
                    <declaration name="v" type="DerivativeStructure[]" line="1337"/>
                    <scope line="1338"/>
                    <declaration name="lin" type="DerivativeStructure" line="1343"/>
                    <declaration name="ref" type="double" line="1344"/>
                </scope>
            </method>
            <method name="testLinearCombination2DoubleDS" type="void" line="1374">
                <comment line="1376">
                    we compare accurate versus naive dot product implementations
                     on regular vectors (i.e. not extreme cases like in the previous test)                    
                </comment>
                <declaration name="random" type="Well1024a" line="1377"/>
                <scope line="1379">
                    <declaration name="u" type="double[]" line="1380"/>
                    <declaration name="v" type="DerivativeStructure[]" line="1381"/>
                    <scope line="1382"/>
                    <declaration name="lin" type="DerivativeStructure" line="1387"/>
                    <declaration name="ref" type="double" line="1388"/>
                </scope>
            </method>
            <method name="testSerialization" type="void" line="1418">
                <declaration name="a" type="DerivativeStructure" line="1419"/>
                <declaration name="b" type="DerivativeStructure" line="1420"/>
            </method>
            <method name="checkF0F1" type="void" line="1426">
                <params>
                    <param name="ds" type="DerivativeStructure"/>
                    <param name="value" type="double"/>
                    <param name="derivatives" type="double"/>
                </params>
                <comment line="1429">
                    check dimension                    
                </comment>
                <comment line="1432">
                    check value, directly and also as 0th order derivative                    
                </comment>
                <comment line="1436">
                    check first order derivatives                    
                </comment>
                <scope line="1436">
                    <declaration name="orders" type="int[]" line="1437"/>
                </scope>
            </method>
            <method name="checkEquals" type="void" line="1444">
                <params>
                    <param name="ds1" type="DerivativeStructure"/>
                    <param name="ds2" type="DerivativeStructure"/>
                    <param name="epsilon" type="double"/>
                </params>
                <comment line="1447">
                    check dimension                    
                </comment>
                <declaration name="derivatives" type="int[]" line="1450"/>
                <declaration name="sum" type="int" line="1451"/>
                <scope line="1452">
                    <scope line="1454"/>
                    <declaration name="increment" type="boolean" line="1460"/>
                    <scope line="1462">
                        <scope line="1463">
                            <scope line="1464"/>
                            <scope line="1466"/>
                        </scope>
                    </scope>
                    <scope line="1473"/>
                </scope>
            </method>
        </class>
    </source>