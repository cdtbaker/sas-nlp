<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting">
        <import package="org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="GaussianFitterTest" line="24">
            <javadoc line="24">
                Tests {@link GaussianFitter}.                
                <since>
                    2.2                    
                </since>
                <version>
                    $Id: GaussianFitterTest.java 1349707 2012-06-13 09:30:56Z erans $                    
                </version>
            </javadoc>
            <declaration name="DATASET1" type="double[][]" line="31"/>
            <javadoc line="31">
                Good data.                
            </javadoc>
            <declaration name="DATASET2" type="double[][]" line="64"/>
            <javadoc line="64">
                Poor data: right of peak not symmetric with left of peak.                
            </javadoc>
            <declaration name="DATASET3" type="double[][]" line="98"/>
            <javadoc line="98">
                Poor data: long tails.                
            </javadoc>
            <declaration name="DATASET4" type="double[][]" line="147"/>
            <javadoc line="147">
                Poor data: right of peak is missing.                
            </javadoc>
            <declaration name="DATASET5" type="double[][]" line="164"/>
            <javadoc line="164">
                Good data, but few points.                
            </javadoc>
            <javadoc line="180">
                Basic.                
            </javadoc>
            <method name="testFit01" type="void" line="184">
                <declaration name="fitter" type="GaussianFitter" line="185"/>
                <declaration name="parameters" type="double[]" line="187"/>
            </method>
            <javadoc line="194">
                Zero points is not enough observed points.                
            </javadoc>
            <method name="testFit02" type="void" line="198">
                <declaration name="fitter" type="GaussianFitter" line="199"/>
            </method>
            <javadoc line="203">
                Two points is not enough observed points.                
            </javadoc>
            <method name="testFit03" type="void" line="207">
                <declaration name="fitter" type="GaussianFitter" line="208"/>
            </method>
            <javadoc line="216">
                Poor data: right of peak not symmetric with left of peak.                
            </javadoc>
            <method name="testFit04" type="void" line="220">
                <declaration name="fitter" type="GaussianFitter" line="221"/>
                <declaration name="parameters" type="double[]" line="223"/>
            </method>
            <javadoc line="230">
                Poor data: long tails.                
            </javadoc>
            <method name="testFit05" type="void" line="234">
                <declaration name="fitter" type="GaussianFitter" line="235"/>
                <declaration name="parameters" type="double[]" line="237"/>
            </method>
            <javadoc line="244">
                Poor data: right of peak is missing.                
            </javadoc>
            <method name="testFit06" type="void" line="248">
                <declaration name="fitter" type="GaussianFitter" line="249"/>
                <declaration name="parameters" type="double[]" line="251"/>
            </method>
            <javadoc line="258">
                Basic with smaller dataset.                
            </javadoc>
            <method name="testFit07" type="void" line="262">
                <declaration name="fitter" type="GaussianFitter" line="263"/>
                <declaration name="parameters" type="double[]" line="265"/>
            </method>
            <method name="testMath519" type="void" line="273">
                <comment line="275">
                    The optimizer will try negative sigma values but &quot;GaussianFitter&quot;
                     will catch the raised exceptions and return NaN values instead.                    
                </comment>
                <declaration name="data" type="double[]" line="277"/>
                <declaration name="fitter" type="GaussianFitter" line="307"/>
                <scope line="308"/>
                <declaration name="p" type="double[]" line="311"/>
            </method>
            <method name="testMath798" type="void" line="318">
                <comment line="322">
                    When the data points are not commented out below, the fit stalls.
                     This is expected however, since the whole dataset hardly looks like
                     a Gaussian.
                     When commented out, the fit proceeds fine.                    
                </comment>
                <comment line="328">
                    fitter.addObservedPoint(0.68, 0.0);                    
                </comment>
                <comment line="330">
                    fitter.addObservedPoint(1.59, 0.0);                    
                </comment>
                <comment line="332">
                    fitter.addObservedPoint(2.50, 0.0);                    
                </comment>
                <comment line="334">
                    fitter.addObservedPoint(3.41, 0.0);                    
                </comment>
                <comment line="336">
                    fitter.addObservedPoint(4.32, 0.0);                    
                </comment>
                <comment line="341">
                    Values are copied from a previous run of this test.                    
                </comment>
                <declaration name="fitter" type="GaussianFitter" line="319"/>
                <declaration name="p" type="double[]" line="338"/>
            </method>
            <javadoc line="346">
                Adds the specified points to specified &lt;code&gt;GaussianFitter&lt;/code&gt;
                  instance.                
                <param>
                    points data points where first dimension is a point index and
                      second dimension is an array of length two representing the point
                      with the first value corresponding to X and the second value
                      corresponding to Y                    
                </param>
                <param>
                    fitter fitter to which the points in &lt;code&gt;points&lt;/code&gt; should be
                      added as observed points                    
                </param>
            </javadoc>
            <method name="addDatasetToGaussianFitter" type="void" line="358">
                <params>
                    <param name="points" type="double[][]"/>
                    <param name="fitter" type="GaussianFitter"/>
                </params>
                <scope line="359"/>
            </method>
        </class>
    </source>