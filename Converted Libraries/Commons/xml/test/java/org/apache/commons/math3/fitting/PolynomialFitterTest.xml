<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting">
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer"/>
        <import package="org.apache.commons.math3.optim.SimpleVectorValueChecker"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.distribution.UniformRealDistribution"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <class name="PolynomialFitterTest" line="17">
            <javadoc line="17">
                Test for class {@link CurveFitter} where the function to fit is a
                  polynomial.                
            </javadoc>
            <method name="testFit" type="void" line="22">
                <declaration name="rng" type="RealDistribution" line="23"/>
                <declaration name="optim" type="LevenbergMarquardtOptimizer" line="25"/>
                <declaration name="fitter" type="PolynomialFitter" line="26"/>
                <declaration name="coeff" type="double[]" line="27"/>
                <declaration name="f" type="PolynomialFunction" line="28"/>
                <scope line="29">
                    <declaration name="x" type="double" line="30"/>
                </scope>
                <declaration name="best" type="double[]" line="33"/>
            </method>
            <method name="testNoError" type="void" line="36">
                <declaration name="randomizer" type="Random" line="37"/>
                <scope line="38">
                    <declaration name="p" type="PolynomialFunction" line="39"/>
                    <declaration name="fitter" type="PolynomialFitter" line="40"/>
                    <scope line="41"/>
                    <declaration name="init" type="double[]" line="44"/>
                    <declaration name="fitted" type="PolynomialFunction" line="45"/>
                    <scope line="46">
                        <declaration name="error" type="double" line="47"/>
                    </scope>
                </scope>
            </method>
            <method name="testSmallError" type="void" line="52">
                <declaration name="randomizer" type="Random" line="53"/>
                <declaration name="maxError" type="double" line="54"/>
                <scope line="55">
                    <declaration name="p" type="PolynomialFunction" line="56"/>
                    <declaration name="fitter" type="PolynomialFitter" line="57"/>
                    <scope line="58"/>
                    <declaration name="init" type="double[]" line="61"/>
                    <declaration name="fitted" type="PolynomialFunction" line="62"/>
                    <scope line="63">
                        <declaration name="error" type="double" line="64"/>
                    </scope>
                </scope>
            </method>
            <method name="testMath798" type="void" line="71">
                <declaration name="tol" type="double" line="72"/>
                <declaration name="checker" type="SimpleVectorValueChecker" line="73"/>
                <declaration name="init" type="double[]" line="74"/>
                <declaration name="maxEval" type="int" line="75"/>
                <declaration name="lm" type="double[]" line="76"/>
                <declaration name="gn" type="double[]" line="77"/>
                <scope line="78"/>
            </method>
            <javadoc line="82">
                This test shows that the user can set the maximum number of iterations
                  to avoid running for too long.
                  But in the test case, the real problem is that the tolerance is way too
                  stringent.                
            </javadoc>
            <method name="testMath798WithToleranceTooLow" type="void" line="88">
                <declaration name="tol" type="double" line="89"/>
                <declaration name="checker" type="SimpleVectorValueChecker" line="90"/>
                <declaration name="init" type="double[]" line="91"/>
                <declaration name="maxEval" type="int" line="92"/>
                <declaration name="gn" type="double[]" line="93"/>
            </method>
            <javadoc line="95">
                This test shows that the user can set the maximum number of iterations
                  to avoid running for too long.
                  Even if the real problem is that the tolerance is way too stringent, it
                  is possible to get the best solution so far, i.e. a checker will return
                  the point when the maximum iteration count has been reached.                
            </javadoc>
            <method name="testMath798WithToleranceTooLowButNoException" type="void" line="102">
                <declaration name="tol" type="double" line="103"/>
                <declaration name="init" type="double[]" line="104"/>
                <declaration name="maxEval" type="int" line="105"/>
                <declaration name="checker" type="SimpleVectorValueChecker" line="106"/>
                <declaration name="lm" type="double[]" line="107"/>
                <declaration name="gn" type="double[]" line="108"/>
                <scope line="109"/>
            </method>
            <javadoc line="113">
                @param optimizer Optimizer.                
                <param>
                    maxEval Maximum number of function evaluations.                    
                </param>
                <param>
                    init First guess.                    
                </param>
                <return>
                    the solution found by the given optimizer.                    
                </return>
            </javadoc>
            <method name="doMath798" type="double[]" line="119">
                <params>
                    <param name="optimizer" type="MultivariateVectorOptimizer"/>
                    <param name="maxEval" type="int"/>
                    <param name="init" type="double[]"/>
                </params>
                <declaration name="fitter" type="CurveFitter&lt;Parametric&gt;" line="120"/>
                <declaration name="coeff" type="double[]" line="151"/>
            </method>
            <method name="testRedundantSolvable" type="void" line="154"/>
            <method name="testRedundantUnsolvable" type="void" line="157"/>
            <method name="testLargeSample" type="void" line="160">
                <declaration name="randomizer" type="Random" line="161"/>
                <declaration name="maxError" type="double" line="162"/>
                <scope line="163">
                    <declaration name="p" type="PolynomialFunction" line="164"/>
                    <declaration name="fitter" type="PolynomialFitter" line="165"/>
                    <scope line="166">
                        <declaration name="x" type="double" line="167"/>
                    </scope>
                    <declaration name="init" type="double[]" line="170"/>
                    <declaration name="fitted" type="PolynomialFunction" line="171"/>
                    <scope line="172">
                        <declaration name="error" type="double" line="173"/>
                    </scope>
                </scope>
            </method>
            <method name="checkUnsolvableProblem" type="void" line="180">
                <params>
                    <param name="optimizer" type="MultivariateVectorOptimizer"/>
                    <param name="solvable" type="boolean"/>
                </params>
                <declaration name="randomizer" type="Random" line="181"/>
                <scope line="182">
                    <declaration name="p" type="PolynomialFunction" line="183"/>
                    <declaration name="fitter" type="PolynomialFitter" line="184"/>
                    <scope line="185"/>
                    <scope line="188">
                        <declaration name="init" type="double[]" line="189"/>
                    </scope>
                    <scope line="193"/>
                </scope>
            </method>
            <method name="buildRandomPolynomial" type="PolynomialFunction" line="198">
                <params>
                    <param name="degree" type="int"/>
                    <param name="randomizer" type="Random"/>
                </params>
                <declaration name="coefficients" type="double[]" line="199"/>
                <scope line="200"/>
            </method>
        </class>
    </source>