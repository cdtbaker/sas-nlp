<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet.sofm">
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="org.apache.commons.math3.ml.neuralnet.Neuron"/>
        <import package="org.apache.commons.math3.ml.neuralnet.Network"/>
        <import package="org.apache.commons.math3.ml.neuralnet.FeatureInitializer"/>
        <import package="org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory"/>
        <import package="org.apache.commons.math3.ml.distance.DistanceMeasure"/>
        <import package="org.apache.commons.math3.ml.distance.EuclideanDistance"/>
        <import package="org.apache.commons.math3.ml.neuralnet.oned.NeuronString"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well44497b"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.function.HarmonicOscillator"/>
        <import package="org.apache.commons.math3.analysis.function.Constant"/>
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.distribution.UniformRealDistribution"/>
        <class name="TravellingSalesmanSolver" line="44">
            <javadoc line="44">
                Solves the &quot;Travelling Salesman&apos;s Problem&quot; (i.e. trying to find the
                  sequence of cities that minimizes the travel distance) using a 1D
                  SOFM.                
            </javadoc>
            <declaration name="FIRST_NEURON_ID" type="long" line="50"/>
            <declaration name="random" type="RandomGenerator" line="51"/>
            <javadoc line="51">
                RNG.                
            </javadoc>
            <declaration name="cities" type="Set&amp;lt;City&amp;gt;" line="53"/>
            <javadoc line="53">
                Set of cities.                
            </javadoc>
            <declaration name="net" type="Network" line="55"/>
            <javadoc line="55">
                SOFM.                
            </javadoc>
            <declaration name="distance" type="DistanceMeasure" line="57"/>
            <javadoc line="57">
                Distance function.                
            </javadoc>
            <declaration name="numberOfNeurons" type="int" line="59"/>
            <javadoc line="59">
                Total number of neurons.                
            </javadoc>
            <javadoc line="62">
                @param cityList List of cities to visit in a single travel.                
                <param>
                    numNeuronsPerCity Number of neurons per city.                    
                </param>
            </javadoc>
            <method name="TravellingSalesmanSolver" type="constructor" line="67">
                <params>
                    <param name="cityList" type="City[]"/>
                    <param name="numNeuronsPerCity" type="double"/>
                </params>
            </method>
            <javadoc line="71">
                @param cityList List of cities to visit in a single travel.                
                <param>
                    numNeuronsPerCity Number of neurons per city.                    
                </param>
                <param>
                    seed Seed for the RNG that is used to present the samples
                      to the trainer.                    
                </param>
            </javadoc>
            <method name="TravellingSalesmanSolver" type="constructor" line="79">
                <params>
                    <param name="cityList" type="City[]"/>
                    <param name="numNeuronsPerCity" type="double"/>
                    <param name="seed" type="long"/>
                </params>
                <comment line="86">
                    Make sure that each city will appear only once in the list.                    
                </comment>
                <comment line="91">
                    Total number of neurons.                    
                </comment>
                <comment line="94">
                    Create a network with circle topology.                    
                </comment>
                <declaration name="xRange" type="double[]" line="82"/>
                <declaration name="yRange" type="double[]" line="83"/>
                <scope line="86"/>
            </method>
            <javadoc line="97">
                Creates training tasks.                
                <param>
                    numTasks Number of tasks to create.                    
                </param>
                <param>
                    numSamplesPerTask Number of training samples per task.                    
                </param>
                <return>
                    the created tasks.                    
                </return>
            </javadoc>
            <method name="createParallelTasks" type="Runnable[]" line="105">
                <params>
                    <param name="numTasks" type="int"/>
                    <param name="numSamplesPerTask" type="long"/>
                </params>
                <declaration name="tasks" type="Runnable[]" line="106"/>
                <declaration name="learning" type="LearningFactorFunction" line="107"/>
                <declaration name="neighbourhood" type="NeighbourhoodSizeFunction" line="111"/>
                <scope line="116">
                    <declaration name="action" type="KohonenUpdateAction" line="117"/>
                </scope>
            </method>
            <javadoc line="128">
                Creates a training task.                
                <param>
                    numSamples Number of training samples.                    
                </param>
                <return>
                    the created task.                    
                </return>
            </javadoc>
            <method name="createSequentialTask" type="Runnable" line="134">
                <params>
                    <param name="numSamples" type="long"/>
                </params>
            </method>
            <javadoc line="138">
                Creates an iterator that will present a series of city&apos;s coordinates in
                  a random order.                
                <param>
                    numSamples Number of samples.                    
                </param>
                <return>
                    the iterator.                    
                </return>
            </javadoc>
            <method name="createRandomIterator" type="Iterator&lt;double[]&gt;" line="145">
                <params>
                    <param name="numSamples" type="long"/>
                </params>
                <declaration name="cityList" type="List&amp;lt;City&amp;gt;" line="146"/>
                <anonymous_class line="149">
                    <declaration name="n" type="long" line="150"/>
                    <javadoc line="150">
                        Number of samples.                        
                    </javadoc>
                    <javadoc line="152">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="hasNext" type="boolean" line="153"/>
                    <javadoc line="156">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="next" type="double[]" line="157"/>
                    <javadoc line="161">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="remove" type="void" line="162"/>
                </anonymous_class>
            </method>
            <javadoc line="168">
                @return the list of linked neurons (i.e. the one-dimensional
                  SOFM).                
            </javadoc>
            <method name="getNeuronList" type="List&lt;Neuron&gt;" line="172">
                <comment line="174">
                    Sequence of coordinates.                    
                </comment>
                <comment line="177">
                    First neuron.                    
                </comment>
                <comment line="186">
                    All neurons have been visited.                    
                </comment>
                <declaration name="list" type="List&amp;lt;Neuron&amp;gt;" line="174"/>
                <declaration name="current" type="Neuron" line="177"/>
                <scope line="178">
                    <declaration name="neighbours" type="Collection&amp;lt;Neuron&amp;gt;" line="180"/>
                    <declaration name="iter" type="Iterator&amp;lt;Neuron&amp;gt;" line="183"/>
                    <scope line="184"/>
                </scope>
            </method>
            <javadoc line="195">
                @return the list of features (coordinates) of linked neurons.                
            </javadoc>
            <method name="getCoordinatesList" type="List&lt;double[]&gt;" line="198">
                <comment line="200">
                    Sequence of coordinates.                    
                </comment>
                <declaration name="coordinatesList" type="List&amp;lt;double[]&amp;gt;" line="200"/>
                <scope line="202"/>
            </method>
            <javadoc line="209">
                Returns the travel proposed by the solver.
                  Note: cities can be missing or duplicated.                
                <return>
                    the list of cities in travel order.                    
                </return>
            </javadoc>
            <method name="getCityList" type="City[]" line="215">
                <declaration name="coord" type="List&amp;lt;double[]&amp;gt;" line="216"/>
                <declaration name="cityList" type="City[]" line="217"/>
                <scope line="218">
                    <declaration name="c" type="double[]" line="219"/>
                </scope>
            </method>
            <javadoc line="225">
                @param x x-coordinate.                
                <param>
                    y y-coordinate.                    
                </param>
                <return>
                    the city whose coordinates are closest to {@code (x, y)}.                    
                </return>
            </javadoc>
            <method name="getClosestCity" type="City" line="231">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="closest" type="City" line="232"/>
                <declaration name="min" type="double" line="233"/>
                <scope line="234">
                    <declaration name="d" type="double" line="235"/>
                    <scope line="236"/>
                </scope>
            </method>
            <javadoc line="244">
                Computes the barycentre of all city locations.                
                <param>
                    cities City list.                    
                </param>
                <return>
                    the barycentre.                    
                </return>
            </javadoc>
            <method name="barycentre" type="double[]" line="250">
                <params>
                    <param name="cities" type="Set&lt;City&gt;"/>
                </params>
                <declaration name="xB" type="double" line="251"/>
                <declaration name="yB" type="double" line="252"/>
                <declaration name="count" type="int" line="254"/>
                <scope line="255">
                    <declaration name="coord" type="double[]" line="256"/>
                </scope>
            </method>
            <javadoc line="266">
                Computes the largest distance between the point at coordinates{@code (x, y)} and any of the cities.                
                <param>
                    x x-coodinate.                    
                </param>
                <param>
                    y y-coodinate.                    
                </param>
                <param>
                    cities City list.                    
                </param>
                <return>
                    the largest distance.                    
                </return>
            </javadoc>
            <method name="largestDistance" type="double" line="277">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="cities" type="Set&lt;City&gt;"/>
                </params>
                <declaration name="maxDist" type="double" line="278"/>
                <scope line="279">
                    <declaration name="dist" type="double" line="280"/>
                    <scope line="281"/>
                </scope>
            </method>
            <javadoc line="289">
                Creates the features&apos; initializers: an approximate circle around the
                  barycentre of the cities.                
                <return>
                    an array containing the two initializers.                    
                </return>
            </javadoc>
            <method name="makeInitializers" type="FeatureInitializer[]" line="295">
                <comment line="297">
                    Barycentre.                    
                </comment>
                <comment line="299">
                    Largest distance from centre.                    
                </comment>
                <declaration name="centre" type="double[]" line="297"/>
                <declaration name="radius" type="double" line="299"/>
                <declaration name="omega" type="double" line="301"/>
                <declaration name="h1" type="UnivariateFunction" line="302"/>
                <declaration name="h2" type="UnivariateFunction" line="303"/>
                <declaration name="f1" type="UnivariateFunction" line="305"/>
                <declaration name="f2" type="UnivariateFunction" line="306"/>
                <declaration name="u" type="RealDistribution" line="308"/>
            </method>
        </class>
        <class name="City" line="318">
            <javadoc line="318">
                A city, represented by a name and two-dimensional coordinates.                
            </javadoc>
            <declaration name="name" type="String" line="322"/>
            <javadoc line="322">
                Identifier.                
            </javadoc>
            <declaration name="x" type="double" line="324"/>
            <javadoc line="324">
                x-coordinate.                
            </javadoc>
            <declaration name="y" type="double" line="326"/>
            <javadoc line="326">
                y-coordinate.                
            </javadoc>
            <javadoc line="329">
                @param name Name.                
                <param>
                    x Cartesian x-coordinate.                    
                </param>
                <param>
                    y Cartesian y-coordinate.                    
                </param>
            </javadoc>
            <method name="City" type="constructor" line="336">
                <params>
                    <param name="name" type="String"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="342">
                @retun the name.                
            </javadoc>
            <method name="getName" type="String" line="345"/>
            <javadoc line="349">
                @return the (x, y) coordinates.                
            </javadoc>
            <method name="getCoordinates" type="double[]" line="352"/>
            <javadoc line="356">
                Computes the distance between this city and
                  the given point.                
                <param>
                    x x-coodinate.                    
                </param>
                <param>
                    y y-coodinate.                    
                </param>
                <return>
                    the distance between {@code (x, y)} and this
                      city.                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="366">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="xDiff" type="double" line="367"/>
                <declaration name="yDiff" type="double" line="368"/>
            </method>
            <javadoc line="373">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="374">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="375">
                    <declaration name="other" type="City" line="376"/>
                </scope>
            </method>
            <javadoc line="383">
                {@inheritDoc}                
            </javadoc>
            <method name="hashCode" type="int" line="384">
                <declaration name="result" type="int" line="385"/>
                <declaration name="c1" type="long" line="387"/>
                <declaration name="c2" type="long" line="390"/>
            </method>
        </class>
    </source>