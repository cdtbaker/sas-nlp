<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector.jacobian">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.ModelFunction"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="StatisticalReferenceDataset" line="10">
            <javadoc line="10">
                This class gives access to the statistical reference datasets provided by the
                  NIST (available
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/strd/general/dataarchive.html&quot;&gt;here&lt;/a&gt;).
                  Instances of this class can be created by invocation of the{@link StatisticalReferenceDatasetFactory}.                
            </javadoc>
            <declaration name="name" type="String" line="17"/>
            <javadoc line="17">
                The name of this dataset.                
            </javadoc>
            <declaration name="numObservations" type="int" line="21"/>
            <javadoc line="21">
                The total number of observations (data points).                
            </javadoc>
            <declaration name="numParameters" type="int" line="25"/>
            <javadoc line="25">
                The total number of parameters.                
            </javadoc>
            <declaration name="numStartingPoints" type="int" line="29"/>
            <javadoc line="29">
                The total number of starting points for the optimizations.                
            </javadoc>
            <declaration name="x" type="double[]" line="33"/>
            <javadoc line="33">
                The values of the predictor.                
            </javadoc>
            <declaration name="y" type="double[]" line="37"/>
            <javadoc line="37">
                The values of the response.                
            </javadoc>
            <declaration name="startingValues" type="double[][]" line="41"/>
            <javadoc line="41">
                The starting values. {@code startingValues[j][i]} is the value of the{@code i}-th parameter in the {@code j}-th set of starting values.                
            </javadoc>
            <declaration name="a" type="double[]" line="45"/>
            <javadoc line="45">
                The certified values of the parameters.                
            </javadoc>
            <declaration name="sigA" type="double[]" line="49"/>
            <javadoc line="49">
                The certified values of the standard deviation of the parameters.                
            </javadoc>
            <declaration name="residualSumOfSquares" type="double" line="53"/>
            <javadoc line="53">
                The certified value of the residual sum of squares.                
            </javadoc>
            <declaration name="problem" type="LeastSquaresProblem" line="57"/>
            <javadoc line="57">
                The least-squares problem.                
            </javadoc>
            <javadoc line="61">
                Creates a new instance of this class from the specified data file. The
                  file must follow the StRD format.                
                <param>
                    in the data file                    
                </param>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="StatisticalReferenceDataset" type="constructor" line="67">
                <params>
                    <param name="in" type="BufferedReader"/>
                </params>
                <declaration name="lines" type="ArrayList&lt;String&gt;" line="68"/>
                <scope line="69"/>
                <declaration name="index" type="int[]" line="72"/>
                <scope line="73"/>
                <scope line="79">
                    <declaration name="line" type="String" line="80"/>
                    <declaration name="tokens" type="String[]" line="81"/>
                </scope>
                <scope line="86"/>
                <declaration name="start" type="double[][]" line="90"/>
                <scope line="93">
                    <declaration name="line" type="String" line="94"/>
                    <declaration name="tokens" type="String[]" line="95"/>
                    <scope line="96"/>
                    <scope line="99"/>
                </scope>
                <scope line="105"/>
                <declaration name="dummyDouble" type="double" line="110"/>
                <declaration name="dummyString" type="String" line="111"/>
                <scope line="112">
                    <scope line="113"/>
                    <scope line="116">
                        <declaration name="tokens" type="String[]" line="117"/>
                    </scope>
                </scope>
                <scope line="121"/>
                <scope line="125"/>
            </method>
            <class name="LeastSquaresProblem" line="131">
                <method name="getModelFunction" type="ModelFunction" line="132">
                    <anonymous_class line="133">
                        <method name="value" type="double[]" line="134">
                            <params>
                                <param name="a" type="double[]"/>
                            </params>
                            <declaration name="n" type="int" line="135"/>
                            <declaration name="yhat" type="double[]" line="136"/>
                            <scope line="137"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="getModelFunctionJacobian" type="ModelFunctionJacobian" line="145">
                    <anonymous_class line="146">
                        <method name="value" type="double[][]" line="147">
                            <params>
                                <param name="a" type="double[]"/>
                            </params>
                            <declaration name="n" type="int" line="148"/>
                            <declaration name="j" type="double[][]" line="149"/>
                            <scope line="150"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <javadoc line="159">
                Returns the name of this dataset.                
                <return>
                    the name of the dataset                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="163"/>
            <javadoc line="166">
                Returns the total number of observations (data points).                
                <return>
                    the number of observations                    
                </return>
            </javadoc>
            <method name="getNumObservations" type="int" line="170"/>
            <javadoc line="173">
                Returns a copy of the data arrays. The data is laid out as follows &lt;li&gt;{@code data[0][i] = x[i]},&lt;/li&gt; &lt;li&gt;{@code data[1][i] = y[i]},&lt;/li&gt;                
                <return>
                    the array of data points.                    
                </return>
            </javadoc>
            <method name="getData" type="double[][]" line="177"/>
            <javadoc line="180">
                Returns the x-value of the {@code i}-th data point.                
                <param>
                    i the index of the data point                    
                </param>
                <return>
                    the x-value                    
                </return>
            </javadoc>
            <method name="getX" type="double" line="185">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="188">
                Returns the y-value of the {@code i}-th data point.                
                <param>
                    i the index of the data point                    
                </param>
                <return>
                    the y-value                    
                </return>
            </javadoc>
            <method name="getY" type="double" line="193">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="196">
                Returns the total number of parameters.                
                <return>
                    the number of parameters                    
                </return>
            </javadoc>
            <method name="getNumParameters" type="int" line="200"/>
            <javadoc line="203">
                Returns the certified values of the paramters.                
                <return>
                    the values of the parameters                    
                </return>
            </javadoc>
            <method name="getParameters" type="double[]" line="207"/>
            <javadoc line="210">
                Returns the certified value of the {@code i}-th parameter.                
                <param>
                    i the index of the parameter                    
                </param>
                <return>
                    the value of the parameter                    
                </return>
            </javadoc>
            <method name="getParameter" type="double" line="215">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="218">
                Reurns the certified values of the standard deviations of the parameters.                
                <return>
                    the standard deviations of the parameters                    
                </return>
            </javadoc>
            <method name="getParametersStandardDeviations" type="double[]" line="222"/>
            <javadoc line="225">
                Returns the certified value of the standard deviation of the {@code i}-th
                  parameter.                
                <param>
                    i the index of the parameter                    
                </param>
                <return>
                    the standard deviation of the parameter                    
                </return>
            </javadoc>
            <method name="getParameterStandardDeviation" type="double" line="231">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="234">
                Returns the certified value of the residual sum of squares.                
                <return>
                    the residual sum of squares                    
                </return>
            </javadoc>
            <method name="getResidualSumOfSquares" type="double" line="238"/>
            <javadoc line="241">
                Returns the total number of starting points (initial guesses for the
                  optimization process).                
                <return>
                    the number of starting points                    
                </return>
            </javadoc>
            <method name="getNumStartingPoints" type="int" line="246"/>
            <javadoc line="249">
                Returns the {@code i}-th set of initial values of the parameters.                
                <param>
                    i the index of the starting point                    
                </param>
                <return>
                    the starting point                    
                </return>
            </javadoc>
            <method name="getStartingPoint" type="double[]" line="254">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="257">
                Returns the least-squares problem corresponding to fitting the model to
                  the specified data.                
                <return>
                    the least-squares problem                    
                </return>
            </javadoc>
            <method name="getLeastSquaresProblem" type="LeastSquaresProblem" line="262"/>
            <method name="getModelValue" type="double" line="265"/>
            <javadoc line="265">
                Returns the value of the model for the specified values of the predictor
                  variable and the parameters.                
                <param>
                    x the predictor variable                    
                </param>
                <param>
                    a the parameters                    
                </param>
                <return>
                    the value of the model                    
                </return>
            </javadoc>
            <method name="getModelDerivatives" type="double[]" line="273"/>
            <javadoc line="273">
                Returns the values of the partial derivatives of the model with respect
                  to the parameters.                
                <param>
                    x the predictor variable                    
                </param>
                <param>
                    a the parameters                    
                </param>
                <return>
                    the partial derivatives                    
                </return>
            </javadoc>
            <javadoc line="281">
                &lt;p&gt;
                  Parses the specified text lines, and extracts the indices of the first
                  and last lines of the data defined by the specified {@code key}. This key
                  must be one of
                  &lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@code &quot;Starting Values&quot;},&lt;/li&gt;
                  &lt;li&gt;{@code &quot;Certified Values&quot;},&lt;/li&gt;
                  &lt;li&gt;{@code &quot;Data&quot;}.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  In the NIST data files, the line indices are separated by the keywords{@code &quot;lines&quot;} and {@code &quot;to&quot;}.
                  &lt;/p&gt;                
                <param>
                    lines the line of text to be parsed                    
                </param>
                <return>
                    an array of two {@code int}s. First value is the index of the
                      first line, second value is the index of the last line.{@code null} if the line could not be parsed.                    
                </return>
            </javadoc>
            <method name="findLineNumbers" type="int[]" line="299">
                <params>
                    <param name="key" type="String"/>
                    <param name="lines" type="Iterable<String>"/>
                </params>
                <scope line="300">
                    <declaration name="flag" type="boolean" line="301"/>
                    <scope line="302">
                        <declaration name="numbers" type="int[]" line="303"/>
                        <declaration name="from" type="String" line="304"/>
                        <declaration name="to" type="String" line="306"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>