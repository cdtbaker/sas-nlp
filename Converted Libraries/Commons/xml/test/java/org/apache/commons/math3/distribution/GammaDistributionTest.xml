<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.special.Gamma"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="GammaDistributionTest" line="32">
            <extends class="RealDistributionAbstractTest"/>
            <comment line="42">
                -------------- Implementations for abstract methods -----------------------                
            </comment>
            <comment line="71">
                --------------------- Override tolerance  --------------                
            </comment>
            <comment line="78">
                ---------------------------- Additional test cases -------------------------                
            </comment>
            <comment line="216">
                MATH-753: large values of x or shape parameter cause density(double) to
                 overflow. Reference data is generated with the Maxima script
                 gamma-distribution.mac, which can be found in
                 srctestresourcesorgapachecommonsmath3distribution.                
            </comment>
            <javadoc line="32">
                Test cases for GammaDistribution.
                  Extends ContinuousDistributionAbstractTest.  See class javadoc for
                  ContinuousDistributionAbstractTest for details.                
                <version>
                    $Id: GammaDistributionTest.java 1454719 2013-03-09 14:34:05Z luc $                    
                </version>
            </javadoc>
            <javadoc line="43">
                Creates the default continuous distribution instance to use in tests.                
            </javadoc>
            <method name="makeDistribution" type="GammaDistribution" line="45"/>
            <javadoc line="49">
                Creates the default cumulative probability distribution test input values                
            </javadoc>
            <method name="makeCumulativeTestPoints" type="double[]" line="51">
                <comment line="52">
                    quantiles computed using R version 2.9.2                    
                </comment>
            </method>
            <javadoc line="57">
                Creates the default cumulative probability density test expected values                
            </javadoc>
            <method name="makeCumulativeTestValues" type="double[]" line="59"/>
            <javadoc line="63">
                Creates the default probability density test expected values                
            </javadoc>
            <method name="makeDensityTestValues" type="double[]" line="65"/>
            <method name="setUp" type="void" line="72"/>
            <method name="testParameterAccessors" type="void" line="79">
                <declaration name="distribution" type="GammaDistribution" line="80"/>
            </method>
            <method name="testPreconditions" type="void" line="86">
                <comment line="91">
                    Expected.                    
                </comment>
                <comment line="97">
                    Expected.                    
                </comment>
                <scope line="87"/>
                <scope line="90"/>
                <scope line="93"/>
                <scope line="96"/>
            </method>
            <method name="testProbabilities" type="void" line="102"/>
            <method name="testValues" type="void" line="111"/>
            <method name="testProbability" type="void" line="118">
                <params>
                    <param name="x" type="double"/>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="expected" type="double"/>
                </params>
                <declaration name="distribution" type="GammaDistribution" line="119"/>
                <declaration name="actual" type="double" line="120"/>
            </method>
            <method name="testValue" type="void" line="124">
                <params>
                    <param name="expected" type="double"/>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="p" type="double"/>
                </params>
                <declaration name="distribution" type="GammaDistribution" line="125"/>
                <declaration name="actual" type="double" line="126"/>
            </method>
            <method name="testDensity" type="void" line="131">
                <comment line="133">
                    R2.5: print(dgamma(x, shape=1, rate=1), digits=10)                    
                </comment>
                <comment line="135">
                    R2.5: print(dgamma(x, shape=2, rate=1), digits=10)                    
                </comment>
                <comment line="137">
                    R2.5: print(dgamma(x, shape=4, rate=1), digits=10)                    
                </comment>
                <comment line="139">
                    R2.5: print(dgamma(x, shape=4, rate=10), digits=10)                    
                </comment>
                <comment line="141">
                    R2.5: print(dgamma(x, shape=.1, rate=10), digits=10)                    
                </comment>
                <comment line="143">
                    R2.5: print(dgamma(x, shape=.1, rate=20), digits=10)                    
                </comment>
                <comment line="145">
                    R2.5: print(dgamma(x, shape=.1, rate=4), digits=10)                    
                </comment>
                <comment line="147">
                    R2.5: print(dgamma(x, shape=.1, rate=1), digits=10)                    
                </comment>
                <declaration name="x" type="double[]" line="132"/>
            </method>
            <method name="checkDensity" type="void" line="151">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="rate" type="double"/>
                    <param name="x" type="double[]"/>
                    <param name="expected" type="double[]"/>
                </params>
                <declaration name="d" type="GammaDistribution" line="152"/>
                <scope line="153"/>
            </method>
            <method name="testInverseCumulativeProbabilityExtremes" type="void" line="159"/>
            <method name="testMoments" type="void" line="166">
                <declaration name="tol" type="double" line="167"/>
                <declaration name="dist" type="GammaDistribution" line="168"/>
            </method>
            <declaration name="HALF_LOG_2_PI" type="double" line="179"/>
            <method name="logGamma" type="double" line="181">
                <params>
                    <param name="x" type="double"/>
                </params>
                <comment line="182">
                    This is a copy of
                     double Gamma.logGamma(double)
                     prior to MATH-849                    
                </comment>
                <declaration name="ret" type="double" line="187"/>
                <scope line="189"/>
                <scope line="191">
                    <declaration name="sum" type="double" line="192"/>
                    <declaration name="tmp" type="double" line="193"/>
                </scope>
            </method>
            <method name="density" type="double" line="202">
                <params>
                    <param name="x" type="double"/>
                    <param name="shape" type="double"/>
                    <param name="scale" type="double"/>
                </params>
                <comment line="203">
                    This is a copy of
                     double GammaDistribution.density(double)
                     prior to MATH-753.                    
                </comment>
                <scope line="208"/>
            </method>
            <method name="doTestMath753" type="void" line="225">
                <params>
                    <param name="shape" type="double"/>
                    <param name="meanNoOF" type="double"/>
                    <param name="sdNoOF" type="double"/>
                    <param name="meanOF" type="double"/>
                    <param name="sdOF" type="double"/>
                    <param name="resourceName" type="String"/>
                </params>
                <comment line="267">
                    If no overflow occurs, check that new implementation is
                     better than old one.                    
                </comment>
                <declaration name="distribution" type="GammaDistribution" line="226"/>
                <declaration name="statOld" type="SummaryStatistics" line="227"/>
                <declaration name="statNewNoOF" type="SummaryStatistics" line="228"/>
                <declaration name="statNewOF" type="SummaryStatistics" line="229"/>
                <declaration name="resourceAsStream" type="InputStream" line="231"/>
                <declaration name="in" type="BufferedReader" line="235"/>
                <scope line="238">
                    <scope line="239">
                        <scope line="240"/>
                        <declaration name="tokens" type="String[]" line="243"/>
                        <declaration name="x" type="double" line="246"/>
                        <declaration name="msg" type="String" line="247"/>
                        <declaration name="expected" type="double" line="249"/>
                        <declaration name="ulp" type="double" line="250"/>
                        <declaration name="actualOld" type="double" line="251"/>
                        <declaration name="actualNew" type="double" line="252"/>
                        <declaration name="errOld" type="double" line="253"/>
                        <scope line="257"/>
                        <scope line="261"/>
                    </scope>
                    <scope line="266">
                        <declaration name="sb" type="StringBuilder" line="271"/>
                        <declaration name="msg" type="String" line="280"/>
                        <declaration name="oldMin" type="double" line="282"/>
                        <declaration name="newMin" type="double" line="283"/>
                        <declaration name="oldMax" type="double" line="286"/>
                        <declaration name="newMax" type="double" line="287"/>
                        <declaration name="oldMean" type="double" line="290"/>
                        <declaration name="newMean" type="double" line="291"/>
                        <declaration name="oldSd" type="double" line="294"/>
                        <declaration name="newSd" type="double" line="295"/>
                    </scope>
                    <scope line="301">
                        <declaration name="newMean" type="double" line="302"/>
                        <declaration name="newSd" type="double" line="303"/>
                        <declaration name="sb" type="StringBuilder" line="305"/>
                        <declaration name="msg" type="String" line="316"/>
                    </scope>
                </scope>
                <scope line="321"/>
                <scope line="323"/>
            </method>
            <method name="testMath753Shape1" type="void" line="330"/>
            <method name="testMath753Shape8" type="void" line="335"/>
            <method name="testMath753Shape10" type="void" line="340"/>
            <method name="testMath753Shape100" type="void" line="345"/>
            <method name="testMath753Shape142" type="void" line="350"/>
            <method name="testMath753Shape1000" type="void" line="355"/>
        </class>
    </source>