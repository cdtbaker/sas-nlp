<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.MonitoredFunction"/>
        <import package="org.apache.commons.math3.analysis.QuinticFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Constant"/>
        <import package="org.apache.commons.math3.analysis.function.Inverse"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.analysis.function.Sqrt"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="BrentSolverTest" line="36">
            <javadoc line="36">
                Test case for {@link BrentSolver Brent} solver.
                  Because Brent-Dekker is guaranteed to converge in less than the default
                  maximum iteration count due to bisection fallback, it is quite hard to
                  debug. I include measured iteration counts plus one in order to detect
                  regressions. On average Brent-Dekker should use 4..5 iterations for the
                  default absolute accuracy of 10E-8 for sinus and the quintic function around
                  zero, and 5..10 iterations for the other zeros.                
                <version>
                    $Id: BrentSolverTest.java 1383845 2012-09-12 08:34:10Z luc $                    
                </version>
            </javadoc>
            <method name="testSinZero" type="void" line="49">
                <comment line="50">
                    The sinus function is behaved well around the root at pi. The second                    
                </comment>
                <comment line="51">
                    order derivative is zero, which means linar approximating methods will                    
                </comment>
                <comment line="52">
                    still converge quadratically.                    
                </comment>
                <comment line="56">
                    Somewhat benign interval. The function is monotone.                    
                </comment>
                <comment line="58">
                    System.out.println(                    
                </comment>
                <comment line="59">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="62">
                    Larger and somewhat less benign interval. The function is grows first.                    
                </comment>
                <comment line="64">
                    System.out.println(                    
                </comment>
                <comment line="65">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="53"/>
                <declaration name="result" type="double" line="54"/>
                <declaration name="solver" type="UnivariateSolver" line="55"/>
            </method>
            <method name="testQuinticZero" type="void" line="71">
                <comment line="72">
                    The quintic function has zeros at 0, +-0.5 and +-1.                    
                </comment>
                <comment line="73">
                    Around the root of 0 the function is well behaved, with a second derivative                    
                </comment>
                <comment line="74">
                    of zero a 0.                    
                </comment>
                <comment line="75">
                    The other roots are less well to find, in particular the root at 1, because                    
                </comment>
                <comment line="76">
                    the function grows fast for x&gt;1.                    
                </comment>
                <comment line="77">
                    The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,                    
                </comment>
                <comment line="78">
                    intervals containing these values are harder for the solvers.                    
                </comment>
                <comment line="81">
                    Brent-Dekker solver.                    
                </comment>
                <comment line="83">
                    Symmetric bracket around 0. Test whether solvers can handle hitting                    
                </comment>
                <comment line="84">
                    the root in the first iteration.                    
                </comment>
                <comment line="86">
                    System.out.println(                    
                </comment>
                <comment line="87">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="90">
                    1 iterations on i586 JDK 1.4.1.                    
                </comment>
                <comment line="91">
                    Asymmetric bracket around 0, just for fun. Contains extremum.                    
                </comment>
                <comment line="93">
                    System.out.println(                    
                </comment>
                <comment line="94">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="96">
                    5 iterations on i586 JDK 1.4.1.                    
                </comment>
                <comment line="98">
                    Large bracket around 0. Contains two extrema.                    
                </comment>
                <comment line="100">
                    System.out.println(                    
                </comment>
                <comment line="101">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="103">
                    6 iterations on i586 JDK 1.4.1.                    
                </comment>
                <comment line="105">
                    Benign bracket around 0.5, function is monotonous.                    
                </comment>
                <comment line="107">
                    System.out.println(                    
                </comment>
                <comment line="108">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="110">
                    6 iterations on i586 JDK 1.4.1.                    
                </comment>
                <comment line="112">
                    Less benign bracket around 0.5, contains one extremum.                    
                </comment>
                <comment line="114">
                    System.out.println(                    
                </comment>
                <comment line="115">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="118">
                    Large, less benign bracket around 0.5, contains both extrema.                    
                </comment>
                <comment line="120">
                    System.out.println(                    
                </comment>
                <comment line="121">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="124">
                    Relatively benign bracket around 1, function is monotonous. Fast growth for x&gt;1                    
                </comment>
                <comment line="125">
                    is still a problem.                    
                </comment>
                <comment line="127">
                    System.out.println(                    
                </comment>
                <comment line="128">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="131">
                    Less benign bracket around 1 with extremum.                    
                </comment>
                <comment line="133">
                    System.out.println(                    
                </comment>
                <comment line="134">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="137">
                    Large bracket around 1. Monotonous.                    
                </comment>
                <comment line="139">
                    System.out.println(                    
                </comment>
                <comment line="140">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="143">
                    Large bracket around 1. Interval contains extremum.                    
                </comment>
                <comment line="145">
                    System.out.println(                    
                </comment>
                <comment line="146">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="149">
                    Very large bracket around 1 for testing fast growth behaviour.                    
                </comment>
                <comment line="151">
                    System.out.println(                    
                </comment>
                <comment line="152">
                    &quot;Root: &quot; + result + &quot; Evaluations: &quot; + solver.getEvaluations());                    
                </comment>
                <comment line="160">
                    Expected.                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="79"/>
                <declaration name="result" type="double" line="80"/>
                <declaration name="solver" type="UnivariateSolver" line="82"/>
                <scope line="156"/>
                <scope line="159"/>
            </method>
            <method name="testRootEndpoints" type="void" line="165">
                <comment line="169">
                    endpoint is root                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="166"/>
                <declaration name="solver" type="BrentSolver" line="167"/>
                <declaration name="result" type="double" line="170"/>
            </method>
            <method name="testBadEndpoints" type="void" line="184">
                <comment line="187">
                    bad interval                    
                </comment>
                <comment line="191">
                    expected                    
                </comment>
                <comment line="193">
                    no bracket                    
                </comment>
                <comment line="197">
                    expected                    
                </comment>
                <comment line="199">
                    no bracket                    
                </comment>
                <comment line="203">
                    expected                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="185"/>
                <declaration name="solver" type="BrentSolver" line="186"/>
                <scope line="187"/>
                <scope line="190"/>
                <scope line="193"/>
                <scope line="196"/>
                <scope line="199"/>
                <scope line="202"/>
            </method>
            <method name="testInitialGuess" type="void" line="208">
                <comment line="213">
                    no guess                    
                </comment>
                <comment line="219">
                    invalid guess (it *is* a root, but outside of the range)                    
                </comment>
                <comment line="224">
                    expected behaviour                    
                </comment>
                <comment line="227">
                    bad guess                    
                </comment>
                <comment line="233">
                    good guess                    
                </comment>
                <comment line="239">
                    perfect guess                    
                </comment>
                <declaration name="f" type="MonitoredFunction" line="209"/>
                <declaration name="solver" type="BrentSolver" line="210"/>
                <declaration name="result" type="double" line="211"/>
                <declaration name="referenceCallsCount" type="int" line="216"/>
                <scope line="220"/>
                <scope line="223"/>
            </method>
            <method name="testMath832" type="void" line="248">
                <anonymous_class line="249">
                    <declaration name="sqrt" type="UnivariateDifferentiableFunction" line="250"/>
                    <declaration name="inv" type="UnivariateDifferentiableFunction" line="251"/>
                    <declaration name="func" type="UnivariateDifferentiableFunction" line="252"/>
                    <method name="value" type="double" line="258">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="249"/>
                <declaration name="solver" type="BrentSolver" line="264"/>
                <declaration name="result" type="double" line="265"/>
            </method>
        </class>
    </source>