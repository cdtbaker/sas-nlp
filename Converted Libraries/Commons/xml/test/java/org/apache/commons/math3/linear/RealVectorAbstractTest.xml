<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Abs"/>
        <import package="org.apache.commons.math3.analysis.function.Acos"/>
        <import package="org.apache.commons.math3.analysis.function.Asin"/>
        <import package="org.apache.commons.math3.analysis.function.Atan"/>
        <import package="org.apache.commons.math3.analysis.function.Cbrt"/>
        <import package="org.apache.commons.math3.analysis.function.Ceil"/>
        <import package="org.apache.commons.math3.analysis.function.Cos"/>
        <import package="org.apache.commons.math3.analysis.function.Cosh"/>
        <import package="org.apache.commons.math3.analysis.function.Exp"/>
        <import package="org.apache.commons.math3.analysis.function.Expm1"/>
        <import package="org.apache.commons.math3.analysis.function.Floor"/>
        <import package="org.apache.commons.math3.analysis.function.Inverse"/>
        <import package="org.apache.commons.math3.analysis.function.Log"/>
        <import package="org.apache.commons.math3.analysis.function.Log10"/>
        <import package="org.apache.commons.math3.analysis.function.Log1p"/>
        <import package="org.apache.commons.math3.analysis.function.Power"/>
        <import package="org.apache.commons.math3.analysis.function.Rint"/>
        <import package="org.apache.commons.math3.analysis.function.Signum"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.analysis.function.Sinh"/>
        <import package="org.apache.commons.math3.analysis.function.Sqrt"/>
        <import package="org.apache.commons.math3.analysis.function.Tan"/>
        <import package="org.apache.commons.math3.analysis.function.Tanh"/>
        <import package="org.apache.commons.math3.analysis.function.Ulp"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="RealVectorAbstractTest" line="61">
            <comment line="1378">
                TESTS OF THE VISITOR PATTERN                
            </comment>
            <declaration name="BinaryOperation" type="enum" line="63"/>
            <scope line="63"/>
            <declaration name="values" type="double[]" line="67"/>
            <javadoc line="67">
                &lt;p&gt;
                  This is an attempt at covering most particular cases of combining two
                  values. Here {@code x} is the value returned by{@link #getPreferredEntryValue()}, while {@code y} and {@code z} are two
                  &quot;normal&quot; values.
                  &lt;/p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;
                  Addition: the following cases should be covered
                  &lt;ul&gt;
                  &lt;li&gt;{@code (2  x) + (-x)}&lt;/li&gt;
                  &lt;li&gt;{@code (-x) + 2  x}&lt;/li&gt;
                  &lt;li&gt;{@code x + y}&lt;/li&gt;
                  &lt;li&gt;{@code y + x}&lt;/li&gt;
                  &lt;li&gt;{@code y + z}&lt;/li&gt;
                  &lt;li&gt;{@code y + (x - y)}&lt;/li&gt;
                  &lt;li&gt;{@code (y - x) + x}&lt;/li&gt;
                  &lt;/ul&gt;
                  The values to be considered are:{@code x, y, z, 2  x, -x, x - y, y - x}.
                  &lt;/li&gt;
                  &lt;li&gt;
                  Subtraction: the following cases should be covered
                  &lt;ul&gt;
                  &lt;li&gt;{@code (2  x) - x}&lt;/li&gt;
                  &lt;li&gt;{@code x - y}&lt;/li&gt;
                  &lt;li&gt;{@code y - x}&lt;/li&gt;
                  &lt;li&gt;{@code y - z}&lt;/li&gt;
                  &lt;li&gt;{@code y - (y - x)}&lt;/li&gt;
                  &lt;li&gt;{@code (y + x) - y}&lt;/li&gt;
                  &lt;/ul&gt;
                  The values to be considered are: {@code x, y, z, x + y, y - x}.
                  &lt;/li&gt;
                  &lt;li&gt;
                  Multiplication
                  &lt;ul&gt;
                  &lt;li&gt;{@code (x  x)  (1 / x)}&lt;/li&gt;
                  &lt;li&gt;{@code (1 / x)  (x  x)}&lt;/li&gt;
                  &lt;li&gt;{@code x  y}&lt;/li&gt;
                  &lt;li&gt;{@code y  x}&lt;/li&gt;
                  &lt;li&gt;{@code y  z}&lt;/li&gt;
                  &lt;/ul&gt;
                  The values to be considered are: {@code x, y, z, 1 / x, x  x}.
                  &lt;/li&gt;
                  &lt;li&gt;
                  Division
                  &lt;ul&gt;
                  &lt;li&gt;{@code (x  x) / x}&lt;/li&gt;
                  &lt;li&gt;{@code x / y}&lt;/li&gt;
                  &lt;li&gt;{@code y / x}&lt;/li&gt;
                  &lt;li&gt;{@code y / z}&lt;/li&gt;
                  &lt;/ul&gt;
                  The values to be considered are: {@code x, y, z, x  x}.
                  &lt;/li&gt;
                  &lt;/ol&gt;
                  Also to be considered {@code NaN}, {@code POSITIVE_INFINITY},{@code NEGATIVE_INFINITY}, {@code +0.0}, {@code -0.0}.                
            </javadoc>
            <method name="create" type="RealVector" line="128"/>
            <javadoc line="128">
                Creates a new instance of {@link RealVector}, with specified entries.
                  The returned vector must be of the type currently tested. It should be
                  noted that some tests assume that no references to the specified{@code double[]} are kept in the returned object: if necessary, defensive
                  copy of this array should be made.                
                <param>
                    data the entries of the vector to be created                    
                </param>
                <return>
                    a new {@link RealVector} of the type to be tested                    
                </return>
            </javadoc>
            <javadoc line="140">
                Creates a new instance of {@link RealVector}, with specified entries.
                  The type of the returned vector must be different from the type currently
                  tested. It should be noted that some tests assume that no references to
                  the specified {@code double[]} are kept in the returned object: if
                  necessary, defensive copy of this array should be made.                
                <param>
                    data the entries of the vector to be created                    
                </param>
                <return>
                    a new {@link RealVector} of an alien type                    
                </return>
            </javadoc>
            <method name="createAlien" type="RealVector" line="150">
                <params>
                    <param name="data" type="double[]"/>
                </params>
            </method>
            <javadoc line="154">
                Returns a preferred value of the entries, to be tested specifically. Some
                  implementations of {@link RealVector} (e.g. {@link OpenMapRealVector}) do
                  not store specific values of entries. In order to ensure that all tests
                  take into account this specific value, some entries of the vectors to be
                  tested are deliberately set to the value returned by the present method.
                  The default implementation returns {@code 0.0}.                
                <return>
                    a value which &lt;em&gt;should&lt;/em&gt; be present in all vectors to be
                      tested                    
                </return>
            </javadoc>
            <method name="getPreferredEntryValue" type="double" line="165"/>
            <method name="RealVectorAbstractTest" type="constructor" line="169">
                <comment line="171">
                    Make sure that x, y, z are three different values. Also, x is the
                     preferred value (e.g. the value which is not stored in sparse
                     implementations).                    
                </comment>
                <declaration name="x" type="double" line="175"/>
                <declaration name="y" type="double" line="176"/>
                <declaration name="z" type="double" line="177"/>
            </method>
            <method name="testGetDimension" type="void" line="187">
                <declaration name="x" type="double" line="188"/>
                <declaration name="data1" type="double[]" line="189"/>
                <declaration name="y" type="double" line="191"/>
                <declaration name="data2" type="double[]" line="192"/>
            </method>
            <method name="testGetEntry" type="void" line="197">
                <declaration name="x" type="double" line="198"/>
                <declaration name="data" type="double[]" line="199"/>
                <declaration name="v" type="RealVector" line="200"/>
                <scope line="201"/>
            </method>
            <method name="testGetEntryInvalidIndex1" type="void" line="207"/>
            <method name="testGetEntryInvalidIndex2" type="void" line="212"/>
            <method name="testSetEntry" type="void" line="217">
                <comment line="224">
                    Try setting to any value.                    
                </comment>
                <comment line="238">
                    Try setting to the preferred value.                    
                </comment>
                <declaration name="x" type="double" line="218"/>
                <declaration name="data" type="double[]" line="219"/>
                <declaration name="expected" type="double[]" line="220"/>
                <declaration name="actual" type="RealVector" line="221"/>
                <scope line="226">
                    <declaration name="oldValue" type="double" line="227"/>
                    <declaration name="newValue" type="double" line="228"/>
                </scope>
                <scope line="240">
                    <declaration name="oldValue" type="double" line="241"/>
                    <declaration name="newValue" type="double" line="242"/>
                </scope>
            </method>
            <method name="testSetEntryInvalidIndex1" type="void" line="253"/>
            <method name="testSetEntryInvalidIndex2" type="void" line="258"/>
            <method name="testAddToEntry" type="void" line="263">
                <comment line="271">
                    Try adding any value.                    
                </comment>
                <comment line="285">
                    Try incrementing so that result is equal to preferred value.                    
                </comment>
                <declaration name="x" type="double" line="264"/>
                <declaration name="data1" type="double[]" line="265"/>
                <declaration name="expected" type="double[]" line="267"/>
                <declaration name="actual" type="RealVector" line="268"/>
                <declaration name="increment" type="double" line="273"/>
                <scope line="274">
                    <declaration name="oldValue" type="double" line="275"/>
                </scope>
                <scope line="287">
                    <declaration name="oldValue" type="double" line="288"/>
                </scope>
            </method>
            <method name="testAddToEntryInvalidIndex1" type="void" line="300"/>
            <method name="testAddToEntryInvalidIndex2" type="void" line="305"/>
            <method name="doTestAppendVector" type="void" line="310">
                <params>
                    <param name="message" type="String"/>
                    <param name="v1" type="RealVector"/>
                    <param name="v2" type="RealVector"/>
                    <param name="delta" type="double"/>
                </params>
                <declaration name="n1" type="int" line="312"/>
                <declaration name="n2" type="int" line="313"/>
                <declaration name="v" type="RealVector" line="314"/>
                <scope line="316">
                    <declaration name="msg" type="String" line="317"/>
                </scope>
                <scope line="320">
                    <declaration name="msg" type="String" line="321"/>
                </scope>
            </method>
            <method name="testAppendVector" type="void" line="327">
                <declaration name="x" type="double" line="328"/>
                <declaration name="data1" type="double[]" line="329"/>
                <declaration name="data2" type="double[]" line="330"/>
            </method>
            <method name="doTestAppendScalar" type="void" line="337">
                <params>
                    <param name="message" type="String"/>
                    <param name="v" type="RealVector"/>
                    <param name="d" type="double"/>
                    <param name="delta" type="double"/>
                </params>
                <declaration name="n" type="int" line="339"/>
                <declaration name="w" type="RealVector" line="340"/>
                <scope line="342">
                    <declaration name="msg" type="String" line="343"/>
                </scope>
                <declaration name="msg" type="String" line="346"/>
            </method>
            <method name="testAppendScalar" type="void" line="351">
                <declaration name="x" type="double" line="352"/>
                <declaration name="data" type="double[]" line="353"/>
            </method>
            <method name="testGetSubVector" type="void" line="360">
                <declaration name="x" type="double" line="361"/>
                <declaration name="data" type="double[]" line="362"/>
                <declaration name="index" type="int" line="363"/>
                <declaration name="n" type="int" line="364"/>
                <declaration name="actual" type="RealVector" line="365"/>
                <declaration name="expected" type="double[]" line="366"/>
            </method>
            <method name="testGetSubVectorInvalidIndex1" type="void" line="372">
                <declaration name="n" type="int" line="373"/>
            </method>
            <method name="testGetSubVectorInvalidIndex2" type="void" line="378">
                <declaration name="n" type="int" line="379"/>
            </method>
            <method name="testGetSubVectorInvalidIndex3" type="void" line="384">
                <declaration name="n" type="int" line="385"/>
            </method>
            <method name="testGetSubVectorInvalidIndex4" type="void" line="390">
                <declaration name="n" type="int" line="391"/>
            </method>
            <method name="testSetSubVectorSameType" type="void" line="396">
                <declaration name="x" type="double" line="397"/>
                <declaration name="expected" type="double[]" line="398"/>
                <declaration name="sub" type="double[]" line="399"/>
                <declaration name="actual" type="RealVector" line="400"/>
                <declaration name="index" type="int" line="401"/>
                <scope line="404"/>
            </method>
            <method name="testSetSubVectorMixedType" type="void" line="411">
                <declaration name="x" type="double" line="412"/>
                <declaration name="expected" type="double[]" line="413"/>
                <declaration name="sub" type="double[]" line="414"/>
                <declaration name="actual" type="RealVector" line="415"/>
                <declaration name="index" type="int" line="416"/>
                <scope line="419"/>
            </method>
            <method name="testSetSubVectorInvalidIndex1" type="void" line="426"/>
            <method name="testSetSubVectorInvalidIndex2" type="void" line="431"/>
            <method name="testSetSubVectorInvalidIndex3" type="void" line="436"/>
            <method name="testIsNaN" type="void" line="441">
                <declaration name="v" type="RealVector" line="442"/>
            </method>
            <method name="testIsInfinite" type="void" line="450">
                <declaration name="v" type="RealVector" line="451"/>
            </method>
            <method name="doTestEbeBinaryOperation" type="void" line="460">
                <params>
                    <param name="op" type="BinaryOperation"/>
                    <param name="mixed" type="boolean"/>
                    <param name="ignoreSpecial" type="boolean"/>
                </params>
                <declaration name="data1" type="double[]" line="461"/>
                <declaration name="data2" type="double[]" line="462"/>
                <declaration name="k" type="int" line="463"/>
                <scope line="464">
                    <scope line="465"/>
                </scope>
                <declaration name="v1" type="RealVector" line="471"/>
                <declaration name="v2" type="RealVector" line="472"/>
                <declaration name="actual" type="RealVector" line="473"/>
                <declaration name="expected" type="double[]" line="490"/>
                <scope line="491"/>
                <scope line="509">
                    <declaration name="isSpecial" type="boolean" line="510"/>
                    <scope line="511">
                        <declaration name="msg" type="String" line="512"/>
                    </scope>
                </scope>
            </method>
            <method name="doTestEbeBinaryOperationDimensionMismatch" type="void" line="518">
                <params>
                    <param name="op" type="BinaryOperation"/>
                </params>
                <declaration name="n" type="int" line="519"/>
            </method>
            <method name="testAddSameType" type="void" line="539"/>
            <method name="testAddMixedTypes" type="void" line="544"/>
            <method name="testAddDimensionMismatch" type="void" line="549"/>
            <method name="testSubtractSameType" type="void" line="554"/>
            <method name="testSubtractMixedTypes" type="void" line="559"/>
            <method name="testSubtractDimensionMismatch" type="void" line="564"/>
            <method name="testEbeMultiplySameType" type="void" line="569"/>
            <method name="testEbeMultiplyMixedTypes" type="void" line="574"/>
            <method name="testEbeMultiplyDimensionMismatch" type="void" line="579"/>
            <method name="testEbeDivideSameType" type="void" line="584"/>
            <method name="testEbeDivideMixedTypes" type="void" line="589"/>
            <method name="testEbeDivideDimensionMismatch" type="void" line="594"/>
            <method name="doTestGetDistance" type="void" line="598">
                <params>
                    <param name="mixed" type="boolean"/>
                </params>
                <declaration name="x" type="double" line="599"/>
                <declaration name="data1" type="double[]" line="600"/>
                <declaration name="data2" type="double[]" line="601"/>
                <declaration name="v1" type="RealVector" line="602"/>
                <declaration name="v2" type="RealVector" line="603"/>
                <scope line="604"/>
                <scope line="606"/>
                <declaration name="actual" type="double" line="609"/>
                <declaration name="expected" type="double" line="610"/>
                <scope line="611">
                    <declaration name="delta" type="double" line="612"/>
                </scope>
            </method>
            <method name="testGetDistanceSameType" type="void" line="620"/>
            <method name="testGetDistanceMixedTypes" type="void" line="625"/>
            <method name="testGetDistanceDimensionMismatch" type="void" line="630"/>
            <method name="testGetNorm" type="void" line="635">
                <declaration name="x" type="double" line="636"/>
                <declaration name="data" type="double[]" line="637"/>
                <declaration name="v" type="RealVector" line="638"/>
                <declaration name="actual" type="double" line="639"/>
                <declaration name="expected" type="double" line="640"/>
                <scope line="641"/>
            </method>
            <method name="doTestGetL1Distance" type="void" line="648">
                <params>
                    <param name="mixed" type="boolean"/>
                </params>
                <declaration name="x" type="double" line="649"/>
                <declaration name="data1" type="double[]" line="650"/>
                <declaration name="data2" type="double[]" line="651"/>
                <declaration name="v1" type="RealVector" line="652"/>
                <declaration name="v2" type="RealVector" line="653"/>
                <scope line="654"/>
                <scope line="656"/>
                <declaration name="actual" type="double" line="659"/>
                <declaration name="expected" type="double" line="660"/>
                <scope line="661">
                    <declaration name="delta" type="double" line="662"/>
                </scope>
            </method>
            <method name="testGetL1DistanceSameType" type="void" line="669"/>
            <method name="testGetL1DistanceMixedTypes" type="void" line="674"/>
            <method name="testGetL1DistanceDimensionMismatch" type="void" line="679"/>
            <method name="testGetL1Norm" type="void" line="684">
                <declaration name="x" type="double" line="685"/>
                <declaration name="data" type="double[]" line="686"/>
                <declaration name="v" type="RealVector" line="687"/>
                <declaration name="actual" type="double" line="688"/>
                <declaration name="expected" type="double" line="689"/>
                <scope line="690"/>
            </method>
            <method name="doTestGetLInfDistance" type="void" line="697">
                <params>
                    <param name="mixed" type="boolean"/>
                </params>
                <declaration name="x" type="double" line="698"/>
                <declaration name="data1" type="double[]" line="699"/>
                <declaration name="data2" type="double[]" line="700"/>
                <declaration name="v1" type="RealVector" line="701"/>
                <declaration name="v2" type="RealVector" line="702"/>
                <scope line="703"/>
                <scope line="705"/>
                <declaration name="actual" type="double" line="708"/>
                <declaration name="expected" type="double" line="709"/>
                <scope line="710">
                    <declaration name="delta" type="double" line="711"/>
                </scope>
            </method>
            <method name="testGetLInfDistanceSameType" type="void" line="718"/>
            <method name="testGetLInfDistanceMixedTypes" type="void" line="723"/>
            <method name="testGetLInfDistanceDimensionMismatch" type="void" line="728"/>
            <method name="testGetLInfNorm" type="void" line="733">
                <declaration name="x" type="double" line="734"/>
                <declaration name="data" type="double[]" line="735"/>
                <declaration name="v" type="RealVector" line="736"/>
                <declaration name="actual" type="double" line="737"/>
                <declaration name="expected" type="double" line="738"/>
                <scope line="739"/>
            </method>
            <method name="doTestMapBinaryOperation" type="void" line="746">
                <params>
                    <param name="op" type="BinaryOperation"/>
                    <param name="inPlace" type="boolean"/>
                </params>
                <declaration name="expected" type="double[]" line="747"/>
                <scope line="748">
                    <declaration name="d" type="double" line="749"/>
                    <scope line="750"/>
                    <declaration name="v" type="RealVector" line="768"/>
                    <declaration name="actual" type="RealVector" line="769"/>
                    <scope line="770"/>
                    <scope line="787"/>
                </scope>
            </method>
            <method name="testMapAdd" type="void" line="810"/>
            <method name="testMapAddToSelf" type="void" line="815"/>
            <method name="testMapSubtract" type="void" line="820"/>
            <method name="testMapSubtractToSelf" type="void" line="825"/>
            <method name="testMapMultiply" type="void" line="830"/>
            <method name="testMapMultiplyToSelf" type="void" line="835"/>
            <method name="testMapDivide" type="void" line="840"/>
            <method name="testMapDivideToSelf" type="void" line="845"/>
            <method name="doTestMapFunction" type="void" line="850">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="inPlace" type="boolean"/>
                </params>
                <declaration name="data" type="double[]" line="851"/>
                <declaration name="expected" type="double[]" line="859"/>
                <scope line="860"/>
                <declaration name="v" type="RealVector" line="863"/>
                <declaration name="actual" type="RealVector" line="864"/>
                <scope line="865"/>
                <scope line="868"/>
            </method>
            <method name="createFunctions" type="UnivariateFunction[]" line="874"/>
            <method name="testMap" type="void" line="885">
                <declaration name="functions" type="UnivariateFunction[]" line="886"/>
                <scope line="887"/>
            </method>
            <method name="testMapToSelf" type="void" line="893">
                <declaration name="functions" type="UnivariateFunction[]" line="894"/>
                <scope line="895"/>
            </method>
            <method name="doTestOuterProduct" type="void" line="900">
                <params>
                    <param name="mixed" type="boolean"/>
                </params>
                <declaration name="dataU" type="double[]" line="901"/>
                <declaration name="u" type="RealVector" line="902"/>
                <declaration name="dataV" type="double[]" line="903"/>
                <declaration name="v" type="RealVector" line="908"/>
                <scope line="909"/>
                <scope line="911"/>
                <declaration name="uv" type="RealMatrix" line="914"/>
                <scope line="919">
                    <scope line="920">
                        <declaration name="expected" type="double" line="921"/>
                        <declaration name="actual" type="double" line="922"/>
                    </scope>
                </scope>
            </method>
            <method name="testOuterProductSameType" type="void" line="929"/>
            <method name="testOuterProductMixedTypes" type="void" line="934"/>
            <method name="doTestProjection" type="void" line="938">
                <params>
                    <param name="mixed" type="boolean"/>
                </params>
                <declaration name="x" type="double" line="939"/>
                <declaration name="data1" type="double[]" line="940"/>
                <declaration name="data2" type="double[]" line="943"/>
                <declaration name="dotProduct" type="double" line="946"/>
                <declaration name="norm2" type="double" line="947"/>
                <scope line="948"/>
                <declaration name="s" type="double" line="952"/>
                <declaration name="expected" type="double[]" line="953"/>
                <scope line="954"/>
                <declaration name="v1" type="RealVector" line="957"/>
                <declaration name="v2" type="RealVector" line="958"/>
                <scope line="959"/>
                <scope line="961"/>
                <declaration name="actual" type="RealVector" line="964"/>
            </method>
            <method name="testProjectionSameType" type="void" line="969"/>
            <method name="testProjectionMixedTypes" type="void" line="974"/>
            <method name="testProjectionNullVector" type="void" line="979"/>
            <method name="testProjectionDimensionMismatch" type="void" line="984">
                <declaration name="v1" type="RealVector" line="985"/>
                <declaration name="v2" type="RealVector" line="986"/>
            </method>
            <method name="testSet" type="void" line="992">
                <scope line="993">
                    <declaration name="expected" type="double" line="994"/>
                    <declaration name="v" type="RealVector" line="995"/>
                    <scope line="997"/>
                </scope>
            </method>
            <method name="testToArray" type="void" line="1004">
                <declaration name="data" type="double[]" line="1005"/>
                <scope line="1007"/>
            </method>
            <method name="doTestUnitVector" type="void" line="1012">
                <params>
                    <param name="inPlace" type="boolean"/>
                </params>
                <declaration name="x" type="double" line="1013"/>
                <declaration name="data" type="double[]" line="1014"/>
                <declaration name="norm" type="double" line="1017"/>
                <scope line="1018"/>
                <declaration name="expected" type="double[]" line="1022"/>
                <scope line="1023"/>
                <declaration name="v" type="RealVector" line="1026"/>
                <declaration name="actual" type="RealVector" line="1027"/>
                <scope line="1028"/>
                <scope line="1031"/>
            </method>
            <method name="testUnitVector" type="void" line="1039"/>
            <method name="testUnitize" type="void" line="1044"/>
            <method name="doTestUnitVectorNullVector" type="void" line="1048">
                <params>
                    <param name="inPlace" type="boolean"/>
                </params>
                <declaration name="data" type="double[]" line="1049"/>
                <scope line="1052"/>
                <scope line="1054"/>
            </method>
            <method name="testUnitVectorNullVector" type="void" line="1060"/>
            <method name="testUnitizeNullVector" type="void" line="1065"/>
            <method name="testIterator" type="void" line="1070">
                <comment line="1083">
                    Expected behavior                    
                </comment>
                <comment line="1091">
                    Expected behavior                    
                </comment>
                <declaration name="v" type="RealVector" line="1071"/>
                <declaration name="it" type="Iterator&amp;lt;RealVector.Entry&amp;gt;" line="1072"/>
                <scope line="1073">
                    <declaration name="e" type="RealVector.Entry" line="1075"/>
                    <scope line="1078"/>
                    <scope line="1081"/>
                </scope>
                <scope line="1086"/>
                <scope line="1089"/>
            </method>
            <method name="doTestCombine" type="void" line="1094">
                <params>
                    <param name="inPlace" type="boolean"/>
                    <param name="mixed" type="boolean"/>
                </params>
                <declaration name="n" type="int" line="1095"/>
                <declaration name="data1" type="double[]" line="1096"/>
                <declaration name="data2" type="double[]" line="1097"/>
                <scope line="1098">
                    <scope line="1099">
                        <declaration name="index" type="int" line="1100"/>
                    </scope>
                </scope>
                <declaration name="v1" type="RealVector" line="1105"/>
                <declaration name="v2" type="RealVector" line="1106"/>
                <declaration name="expected" type="double[]" line="1107"/>
                <scope line="1108">
                    <declaration name="a1" type="double" line="1109"/>
                    <scope line="1110">
                        <declaration name="a2" type="double" line="1111"/>
                        <scope line="1112"/>
                        <declaration name="actual" type="RealVector" line="1115"/>
                        <scope line="1116">
                            <declaration name="v1bis" type="RealVector" line="1117"/>
                        </scope>
                        <scope line="1120"/>
                    </scope>
                </scope>
            </method>
            <method name="doTestCombineDimensionMismatch" type="void" line="1129">
                <params>
                    <param name="inPlace" type="boolean"/>
                    <param name="mixed" type="boolean"/>
                </params>
                <declaration name="v1" type="RealVector" line="1130"/>
                <declaration name="v2" type="RealVector" line="1131"/>
                <scope line="1132"/>
                <scope line="1134"/>
                <scope line="1137"/>
                <scope line="1139"/>
            </method>
            <method name="testCombineSameType" type="void" line="1145"/>
            <method name="testCombineMixedTypes" type="void" line="1150"/>
            <method name="testCombineDimensionMismatchSameType" type="void" line="1155"/>
            <method name="testCombineDimensionMismatchMixedTypes" type="void" line="1160"/>
            <method name="testCombineToSelfSameType" type="void" line="1165"/>
            <method name="testCombineToSelfMixedTypes" type="void" line="1170"/>
            <method name="testCombineToSelfDimensionMismatchSameType" type="void" line="1175"/>
            <method name="testCombineToSelfDimensionMismatchMixedTypes" type="void" line="1180"/>
            <method name="testCopy" type="void" line="1185">
                <declaration name="v" type="RealVector" line="1186"/>
                <declaration name="w" type="RealVector" line="1187"/>
            </method>
            <method name="doTestDotProductRegularValues" type="void" line="1192">
                <params>
                    <param name="mixed" type="boolean"/>
                </params>
                <declaration name="x" type="double" line="1193"/>
                <declaration name="data1" type="double[]" line="1194"/>
                <declaration name="data2" type="double[]" line="1197"/>
                <declaration name="expected" type="double" line="1200"/>
                <scope line="1201"/>
                <declaration name="v1" type="RealVector" line="1204"/>
                <declaration name="v2" type="RealVector" line="1205"/>
                <scope line="1206"/>
                <scope line="1208"/>
                <declaration name="actual" type="double" line="1211"/>
            </method>
            <method name="doTestDotProductSpecialValues" type="void" line="1215">
                <params>
                    <param name="mixed" type="boolean"/>
                </params>
                <scope line="1216">
                    <declaration name="data1" type="double[]" line="1217"/>
                    <declaration name="v1" type="RealVector" line="1220"/>
                    <scope line="1221">
                        <declaration name="data2" type="double[]" line="1222"/>
                        <declaration name="v2" type="RealVector" line="1225"/>
                        <scope line="1226"/>
                        <scope line="1228"/>
                        <declaration name="expected" type="double" line="1231"/>
                        <declaration name="actual" type="double" line="1232"/>
                    </scope>
                </scope>
            </method>
            <method name="doTestDotProductDimensionMismatch" type="void" line="1239">
                <params>
                    <param name="mixed" type="boolean"/>
                </params>
                <declaration name="data1" type="double[]" line="1240"/>
                <declaration name="data2" type="double[]" line="1241"/>
                <declaration name="v1" type="RealVector" line="1242"/>
                <declaration name="v2" type="RealVector" line="1243"/>
                <scope line="1244"/>
                <scope line="1246"/>
            </method>
            <method name="testDotProductSameType" type="void" line="1253"/>
            <method name="testDotProductDimensionMismatchSameType" type="void" line="1259"/>
            <method name="testDotProductMixedTypes" type="void" line="1264"/>
            <method name="testDotProductDimensionMismatchMixedTypes" type="void" line="1270"/>
            <method name="doTestCosine" type="void" line="1274">
                <params>
                    <param name="mixed" type="boolean"/>
                </params>
                <declaration name="x" type="double" line="1275"/>
                <declaration name="data1" type="double[]" line="1276"/>
                <declaration name="data2" type="double[]" line="1279"/>
                <declaration name="norm1" type="double" line="1282"/>
                <declaration name="norm2" type="double" line="1283"/>
                <declaration name="dotProduct" type="double" line="1284"/>
                <scope line="1285"/>
                <declaration name="expected" type="double" line="1292"/>
                <declaration name="v1" type="RealVector" line="1293"/>
                <declaration name="v2" type="RealVector" line="1294"/>
                <scope line="1295"/>
                <scope line="1297"/>
                <declaration name="actual" type="double" line="1300"/>
            </method>
            <method name="testCosineSameType" type="void" line="1306"/>
            <method name="testCosineMixedTypes" type="void" line="1311"/>
            <method name="testCosineLeftNullVector" type="void" line="1316">
                <declaration name="v" type="RealVector" line="1317"/>
                <declaration name="w" type="RealVector" line="1318"/>
            </method>
            <method name="testCosineRightNullVector" type="void" line="1323">
                <declaration name="v" type="RealVector" line="1324"/>
                <declaration name="w" type="RealVector" line="1325"/>
            </method>
            <method name="testCosineDimensionMismatch" type="void" line="1330">
                <declaration name="v" type="RealVector" line="1331"/>
                <declaration name="w" type="RealVector" line="1332"/>
            </method>
            <method name="testEquals" type="void" line="1337">
                <declaration name="v" type="RealVector" line="1338"/>
            </method>
            <method name="testSerial" type="void" line="1348">
                <declaration name="v" type="RealVector" line="1349"/>
            </method>
            <method name="testMinMax" type="void" line="1354">
                <declaration name="v1" type="RealVector" line="1355"/>
                <declaration name="v2" type="RealVector" line="1360"/>
                <declaration name="v3" type="RealVector" line="1365"/>
                <declaration name="v4" type="RealVector" line="1370"/>
            </method>
            <javadoc line="1381">
                The whole vector is visited.                
            </javadoc>
            <method name="testWalkInDefaultOrderPreservingVisitor1" type="void" line="1383">
                <declaration name="data" type="double[]" line="1384"/>
                <declaration name="v" type="RealVector" line="1387"/>
                <declaration name="visitor" type="RealVectorPreservingVisitor" line="1388"/>
                <anonymous_class line="1389">
                    <declaration name="expectedIndex" type="int" line="1391"/>
                    <method name="visit" type="void" line="1393">
                        <params>
                            <param name="actualIndex" type="int"/>
                            <param name="actualValue" type="double"/>
                        </params>
                    </method>
                    <method name="start" type="void" line="1401">
                        <params>
                            <param name="actualSize" type="int"/>
                            <param name="actualStart" type="int"/>
                            <param name="actualEnd" type="int"/>
                        </params>
                    </method>
                    <method name="end" type="double" line="1408"/>
                </anonymous_class>
            </method>
            <javadoc line="1415">
                Visiting an invalid subvector.                
            </javadoc>
            <method name="testWalkInDefaultOrderPreservingVisitor2" type="void" line="1417">
                <comment line="1424">
                    Do nothing                    
                </comment>
                <comment line="1428">
                    Do nothing                    
                </comment>
                <comment line="1439">
                    Expected behavior                    
                </comment>
                <comment line="1445">
                    Expected behavior                    
                </comment>
                <comment line="1451">
                    Expected behavior                    
                </comment>
                <comment line="1457">
                    Expected behavior                    
                </comment>
                <comment line="1463">
                    Expected behavior                    
                </comment>
                <declaration name="v" type="RealVector" line="1418"/>
                <declaration name="visitor" type="RealVectorPreservingVisitor" line="1419"/>
                <anonymous_class line="1420">
                    <method name="visit" type="void" line="1422">
                        <params>
                            <param name="index" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                        <comment line="1424">
                            Do nothing                            
                        </comment>
                    </method>
                    <method name="start" type="void" line="1426">
                        <params>
                            <param name="dimension" type="int"/>
                            <param name="start" type="int"/>
                            <param name="end" type="int"/>
                        </params>
                        <comment line="1428">
                            Do nothing                            
                        </comment>
                    </method>
                    <method name="end" type="double" line="1430"/>
                </anonymous_class>
                <scope line="1434"/>
                <scope line="1437"/>
                <scope line="1440"/>
                <scope line="1443"/>
                <scope line="1446"/>
                <scope line="1449"/>
                <scope line="1452"/>
                <scope line="1455"/>
                <scope line="1458"/>
                <scope line="1461"/>
            </method>
            <javadoc line="1466">
                Visiting a valid subvector.                
            </javadoc>
            <method name="testWalkInDefaultOrderPreservingVisitor3" type="void" line="1468">
                <declaration name="data" type="double[]" line="1469"/>
                <declaration name="expectedStart" type="int" line="1472"/>
                <declaration name="expectedEnd" type="int" line="1473"/>
                <declaration name="v" type="RealVector" line="1474"/>
                <declaration name="visitor" type="RealVectorPreservingVisitor" line="1475"/>
                <anonymous_class line="1476">
                    <declaration name="expectedIndex" type="int" line="1478"/>
                    <method name="visit" type="void" line="1480">
                        <params>
                            <param name="actualIndex" type="int"/>
                            <param name="actualValue" type="double"/>
                        </params>
                    </method>
                    <method name="start" type="void" line="1488">
                        <params>
                            <param name="actualSize" type="int"/>
                            <param name="actualStart" type="int"/>
                            <param name="actualEnd" type="int"/>
                        </params>
                    </method>
                    <method name="end" type="double" line="1495"/>
                </anonymous_class>
            </method>
            <javadoc line="1502">
                The whole vector is visited.                
            </javadoc>
            <method name="testWalkInOptimizedOrderPreservingVisitor1" type="void" line="1504">
                <declaration name="data" type="double[]" line="1505"/>
                <declaration name="v" type="RealVector" line="1508"/>
                <declaration name="visitor" type="RealVectorPreservingVisitor" line="1509"/>
                <anonymous_class line="1510">
                    <declaration name="visited" type="boolean[]" line="1511"/>
                    <method name="visit" type="void" line="1513">
                        <params>
                            <param name="actualIndex" type="int"/>
                            <param name="actualValue" type="double"/>
                        </params>
                    </method>
                    <method name="start" type="void" line="1520">
                        <params>
                            <param name="actualSize" type="int"/>
                            <param name="actualStart" type="int"/>
                            <param name="actualEnd" type="int"/>
                        </params>
                    </method>
                    <method name="end" type="double" line="1527">
                        <scope line="1528"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="1538">
                Visiting an invalid subvector.                
            </javadoc>
            <method name="testWalkInOptimizedOrderPreservingVisitor2" type="void" line="1540">
                <comment line="1547">
                    Do nothing                    
                </comment>
                <comment line="1551">
                    Do nothing                    
                </comment>
                <comment line="1562">
                    Expected behavior                    
                </comment>
                <comment line="1568">
                    Expected behavior                    
                </comment>
                <comment line="1574">
                    Expected behavior                    
                </comment>
                <comment line="1580">
                    Expected behavior                    
                </comment>
                <comment line="1586">
                    Expected behavior                    
                </comment>
                <declaration name="v" type="RealVector" line="1541"/>
                <declaration name="visitor" type="RealVectorPreservingVisitor" line="1542"/>
                <anonymous_class line="1543">
                    <method name="visit" type="void" line="1545">
                        <params>
                            <param name="index" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                        <comment line="1547">
                            Do nothing                            
                        </comment>
                    </method>
                    <method name="start" type="void" line="1549">
                        <params>
                            <param name="dimension" type="int"/>
                            <param name="start" type="int"/>
                            <param name="end" type="int"/>
                        </params>
                        <comment line="1551">
                            Do nothing                            
                        </comment>
                    </method>
                    <method name="end" type="double" line="1553"/>
                </anonymous_class>
                <scope line="1557"/>
                <scope line="1560"/>
                <scope line="1563"/>
                <scope line="1566"/>
                <scope line="1569"/>
                <scope line="1572"/>
                <scope line="1575"/>
                <scope line="1578"/>
                <scope line="1581"/>
                <scope line="1584"/>
            </method>
            <javadoc line="1589">
                Visiting a valid subvector.                
            </javadoc>
            <method name="testWalkInOptimizedOrderPreservingVisitor3" type="void" line="1591">
                <declaration name="data" type="double[]" line="1592"/>
                <declaration name="expectedStart" type="int" line="1595"/>
                <declaration name="expectedEnd" type="int" line="1596"/>
                <declaration name="v" type="RealVector" line="1597"/>
                <declaration name="visitor" type="RealVectorPreservingVisitor" line="1598"/>
                <anonymous_class line="1599">
                    <declaration name="visited" type="boolean[]" line="1600"/>
                    <method name="visit" type="void" line="1602">
                        <params>
                            <param name="actualIndex" type="int"/>
                            <param name="actualValue" type="double"/>
                        </params>
                    </method>
                    <method name="start" type="void" line="1609">
                        <params>
                            <param name="actualSize" type="int"/>
                            <param name="actualStart" type="int"/>
                            <param name="actualEnd" type="int"/>
                        </params>
                    </method>
                    <method name="end" type="double" line="1616">
                        <scope line="1617"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="1627">
                The whole vector is visited.                
            </javadoc>
            <method name="testWalkInDefaultOrderChangingVisitor1" type="void" line="1629">
                <declaration name="data" type="double[]" line="1630"/>
                <declaration name="v" type="RealVector" line="1633"/>
                <declaration name="visitor" type="RealVectorChangingVisitor" line="1634"/>
                <anonymous_class line="1635">
                    <declaration name="expectedIndex" type="int" line="1637"/>
                    <method name="visit" type="double" line="1639">
                        <params>
                            <param name="actualIndex" type="int"/>
                            <param name="actualValue" type="double"/>
                        </params>
                    </method>
                    <method name="start" type="void" line="1648">
                        <params>
                            <param name="actualSize" type="int"/>
                            <param name="actualStart" type="int"/>
                            <param name="actualEnd" type="int"/>
                        </params>
                    </method>
                    <method name="end" type="double" line="1655"/>
                </anonymous_class>
                <scope line="1660"/>
            </method>
            <javadoc line="1665">
                Visiting an invalid subvector.                
            </javadoc>
            <method name="testWalkInDefaultOrderChangingVisitor2" type="void" line="1667">
                <comment line="1678">
                    Do nothing                    
                </comment>
                <comment line="1689">
                    Expected behavior                    
                </comment>
                <comment line="1695">
                    Expected behavior                    
                </comment>
                <comment line="1701">
                    Expected behavior                    
                </comment>
                <comment line="1707">
                    Expected behavior                    
                </comment>
                <comment line="1713">
                    Expected behavior                    
                </comment>
                <declaration name="v" type="RealVector" line="1668"/>
                <declaration name="visitor" type="RealVectorChangingVisitor" line="1669"/>
                <anonymous_class line="1670">
                    <method name="visit" type="double" line="1672">
                        <params>
                            <param name="index" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                    <method name="start" type="void" line="1676">
                        <params>
                            <param name="dimension" type="int"/>
                            <param name="start" type="int"/>
                            <param name="end" type="int"/>
                        </params>
                        <comment line="1678">
                            Do nothing                            
                        </comment>
                    </method>
                    <method name="end" type="double" line="1680"/>
                </anonymous_class>
                <scope line="1684"/>
                <scope line="1687"/>
                <scope line="1690"/>
                <scope line="1693"/>
                <scope line="1696"/>
                <scope line="1699"/>
                <scope line="1702"/>
                <scope line="1705"/>
                <scope line="1708"/>
                <scope line="1711"/>
            </method>
            <javadoc line="1716">
                Visiting a valid subvector.                
            </javadoc>
            <method name="testWalkInDefaultOrderChangingVisitor3" type="void" line="1718">
                <declaration name="data" type="double[]" line="1719"/>
                <declaration name="expectedStart" type="int" line="1722"/>
                <declaration name="expectedEnd" type="int" line="1723"/>
                <declaration name="v" type="RealVector" line="1724"/>
                <declaration name="visitor" type="RealVectorChangingVisitor" line="1725"/>
                <anonymous_class line="1726">
                    <declaration name="expectedIndex" type="int" line="1728"/>
                    <method name="visit" type="double" line="1730">
                        <params>
                            <param name="actualIndex" type="int"/>
                            <param name="actualValue" type="double"/>
                        </params>
                    </method>
                    <method name="start" type="void" line="1739">
                        <params>
                            <param name="actualSize" type="int"/>
                            <param name="actualStart" type="int"/>
                            <param name="actualEnd" type="int"/>
                        </params>
                    </method>
                    <method name="end" type="double" line="1746"/>
                </anonymous_class>
                <scope line="1751"/>
            </method>
            <javadoc line="1756">
                The whole vector is visited.                
            </javadoc>
            <method name="testWalkInOptimizedOrderChangingVisitor1" type="void" line="1758">
                <declaration name="data" type="double[]" line="1759"/>
                <declaration name="v" type="RealVector" line="1762"/>
                <declaration name="visitor" type="RealVectorChangingVisitor" line="1763"/>
                <anonymous_class line="1764">
                    <declaration name="visited" type="boolean[]" line="1765"/>
                    <method name="visit" type="double" line="1767">
                        <params>
                            <param name="actualIndex" type="int"/>
                            <param name="actualValue" type="double"/>
                        </params>
                    </method>
                    <method name="start" type="void" line="1775">
                        <params>
                            <param name="actualSize" type="int"/>
                            <param name="actualStart" type="int"/>
                            <param name="actualEnd" type="int"/>
                        </params>
                    </method>
                    <method name="end" type="double" line="1782">
                        <scope line="1783"/>
                    </method>
                </anonymous_class>
                <scope line="1791"/>
            </method>
            <javadoc line="1796">
                Visiting an invalid subvector.                
            </javadoc>
            <method name="testWalkInOptimizedOrderChangingVisitor2" type="void" line="1798">
                <comment line="1809">
                    Do nothing                    
                </comment>
                <comment line="1820">
                    Expected behavior                    
                </comment>
                <comment line="1826">
                    Expected behavior                    
                </comment>
                <comment line="1832">
                    Expected behavior                    
                </comment>
                <comment line="1838">
                    Expected behavior                    
                </comment>
                <comment line="1844">
                    Expected behavior                    
                </comment>
                <declaration name="v" type="RealVector" line="1799"/>
                <declaration name="visitor" type="RealVectorChangingVisitor" line="1800"/>
                <anonymous_class line="1801">
                    <method name="visit" type="double" line="1803">
                        <params>
                            <param name="index" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                    <method name="start" type="void" line="1807">
                        <params>
                            <param name="dimension" type="int"/>
                            <param name="start" type="int"/>
                            <param name="end" type="int"/>
                        </params>
                        <comment line="1809">
                            Do nothing                            
                        </comment>
                    </method>
                    <method name="end" type="double" line="1811"/>
                </anonymous_class>
                <scope line="1815"/>
                <scope line="1818"/>
                <scope line="1821"/>
                <scope line="1824"/>
                <scope line="1827"/>
                <scope line="1830"/>
                <scope line="1833"/>
                <scope line="1836"/>
                <scope line="1839"/>
                <scope line="1842"/>
            </method>
            <javadoc line="1847">
                Visiting a valid subvector.                
            </javadoc>
            <method name="testWalkInOptimizedOrderChangingVisitor3" type="void" line="1849">
                <declaration name="data" type="double[]" line="1850"/>
                <declaration name="expectedStart" type="int" line="1853"/>
                <declaration name="expectedEnd" type="int" line="1854"/>
                <declaration name="v" type="RealVector" line="1855"/>
                <declaration name="visitor" type="RealVectorChangingVisitor" line="1856"/>
                <anonymous_class line="1857">
                    <declaration name="visited" type="boolean[]" line="1858"/>
                    <method name="visit" type="double" line="1860">
                        <params>
                            <param name="actualIndex" type="int"/>
                            <param name="actualValue" type="double"/>
                        </params>
                    </method>
                    <method name="start" type="void" line="1868">
                        <params>
                            <param name="actualSize" type="int"/>
                            <param name="actualStart" type="int"/>
                            <param name="actualEnd" type="int"/>
                        </params>
                    </method>
                    <method name="end" type="double" line="1875">
                        <scope line="1876"/>
                    </method>
                </anonymous_class>
                <scope line="1884"/>
            </method>
            <class name="RealVectorTestImpl" line="1889">
                <extends class="RealVector"/>
                <implements interface="Serializable"/>
                <javadoc line="1889">
                    Minimal implementation of the {@link RealVector} abstract class, for
                      mixed types unit tests.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1896"/>
                <javadoc line="1896">
                    Serializable version identifier.                    
                </javadoc>
                <declaration name="data" type="double" line="1899"/>
                <javadoc line="1899">
                    Entries of the vector.                    
                </javadoc>
                <method name="RealVectorTestImpl" type="constructor" line="1902">
                    <params>
                        <param name="d" type="double[]"/>
                    </params>
                </method>
                <method name="unsupported" type="UnsupportedOperationException" line="1906"/>
                <method name="copy" type="RealVector" line="1911"/>
                <method name="ebeMultiply" type="RealVector" line="1916">
                    <params>
                        <param name="v" type="RealVector"/>
                    </params>
                </method>
                <method name="ebeDivide" type="RealVector" line="1921">
                    <params>
                        <param name="v" type="RealVector"/>
                    </params>
                </method>
                <method name="getEntry" type="double" line="1926">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="getDimension" type="int" line="1932"/>
                <method name="append" type="RealVector" line="1937">
                    <params>
                        <param name="v" type="RealVector"/>
                    </params>
                </method>
                <method name="append" type="RealVector" line="1942">
                    <params>
                        <param name="d" type="double"/>
                    </params>
                </method>
                <method name="getSubVector" type="RealVector" line="1947">
                    <params>
                        <param name="index" type="int"/>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="setEntry" type="void" line="1952">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="setSubVector" type="void" line="1958">
                    <params>
                        <param name="index" type="int"/>
                        <param name="v" type="RealVector"/>
                    </params>
                </method>
                <method name="isNaN" type="boolean" line="1963"/>
                <method name="isInfinite" type="boolean" line="1968"/>
            </class>
        </class>
    </source>