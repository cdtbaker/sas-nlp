<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.differentiation">
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.ExtendedFieldElementAbstractTest"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.random.Well1024a"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="SparseGradientTest" line="30">
            <extends class="ExtendedFieldElementAbstractTest">
                <type_params>
                    <type_param name="SparseGradient"/>
                </type_params>
            </extends>
            <method name="build" type="SparseGradient" line="33">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <method name="testConstant" type="void" line="38">
                <comment line="42">
                    returns the value                    
                </comment>
                <comment line="43">
                    has no variables                    
                </comment>
                <declaration name="c" type="double" line="39"/>
                <declaration name="grad" type="SparseGradient" line="40"/>
            </method>
            <method name="testVariable" type="void" line="46">
                <comment line="51">
                    returns the value                    
                </comment>
                <comment line="52">
                    has one variable                    
                </comment>
                <comment line="53">
                    derivative wr.t itself is 1                    
                </comment>
                <declaration name="v" type="double" line="47"/>
                <declaration name="id" type="int" line="48"/>
                <declaration name="grad" type="SparseGradient" line="49"/>
            </method>
            <method name="testVarAddition" type="void" line="56">
                <comment line="66">
                    returns the value                    
                </comment>
                <declaration name="v1" type="double" line="57"/>
                <declaration name="v2" type="double" line="58"/>
                <declaration name="id1" type="int" line="59"/>
                <declaration name="id2" type="int" line="60"/>
                <declaration name="var1" type="SparseGradient" line="61"/>
                <declaration name="var2" type="SparseGradient" line="62"/>
                <declaration name="sum" type="SparseGradient" line="63"/>
            </method>
            <method name="testSubtraction" type="void" line="72">
                <comment line="82">
                    returns the value                    
                </comment>
                <declaration name="v1" type="double" line="73"/>
                <declaration name="v2" type="double" line="74"/>
                <declaration name="id1" type="int" line="75"/>
                <declaration name="id2" type="int" line="76"/>
                <declaration name="var1" type="SparseGradient" line="77"/>
                <declaration name="var2" type="SparseGradient" line="78"/>
                <declaration name="sum" type="SparseGradient" line="79"/>
            </method>
            <method name="testDivision" type="void" line="88">
                <comment line="97">
                    returns the value                    
                </comment>
                <declaration name="v1" type="double" line="89"/>
                <declaration name="v2" type="double" line="90"/>
                <declaration name="id1" type="int" line="91"/>
                <declaration name="id2" type="int" line="92"/>
                <declaration name="var1" type="SparseGradient" line="93"/>
                <declaration name="var2" type="SparseGradient" line="94"/>
                <declaration name="out" type="SparseGradient" line="95"/>
            </method>
            <method name="testMult" type="void" line="103">
                <comment line="114">
                    returns the value                    
                </comment>
                <declaration name="v1" type="double" line="104"/>
                <declaration name="c1" type="double" line="105"/>
                <declaration name="v2" type="double" line="106"/>
                <declaration name="id1" type="int" line="107"/>
                <declaration name="id2" type="int" line="108"/>
                <declaration name="var1" type="SparseGradient" line="109"/>
                <declaration name="unit1" type="SparseGradient" line="110"/>
                <declaration name="unit2" type="SparseGradient" line="111"/>
                <declaration name="sum" type="SparseGradient" line="112"/>
            </method>
            <method name="testVarMultInPlace" type="void" line="120">
                <comment line="132">
                    returns the value                    
                </comment>
                <declaration name="v1" type="double" line="121"/>
                <declaration name="c1" type="double" line="122"/>
                <declaration name="v2" type="double" line="123"/>
                <declaration name="id1" type="int" line="124"/>
                <declaration name="id2" type="int" line="125"/>
                <declaration name="var1" type="SparseGradient" line="126"/>
                <declaration name="sum" type="SparseGradient" line="127"/>
                <declaration name="mult" type="SparseGradient" line="128"/>
            </method>
            <method name="testPrimitiveAdd" type="void" line="138"/>
            <method name="testAdd" type="void" line="145">
                <declaration name="x" type="SparseGradient" line="146"/>
                <declaration name="y" type="SparseGradient" line="147"/>
                <declaration name="z" type="SparseGradient" line="148"/>
                <declaration name="xyz" type="SparseGradient" line="149"/>
            </method>
            <method name="testPrimitiveSubtract" type="void" line="154"/>
            <method name="testSubtract" type="void" line="161">
                <declaration name="x" type="SparseGradient" line="162"/>
                <declaration name="y" type="SparseGradient" line="163"/>
                <declaration name="z" type="SparseGradient" line="164"/>
                <declaration name="xyz" type="SparseGradient" line="165"/>
            </method>
            <method name="testPrimitiveMultiply" type="void" line="170"/>
            <method name="testMultiply" type="void" line="177">
                <declaration name="x" type="SparseGradient" line="178"/>
                <declaration name="y" type="SparseGradient" line="179"/>
                <declaration name="z" type="SparseGradient" line="180"/>
                <declaration name="xyz" type="SparseGradient" line="181"/>
            </method>
            <method name="testNegate" type="void" line="186"/>
            <method name="testReciprocal" type="void" line="193">
                <scope line="194">
                    <declaration name="r" type="SparseGradient" line="195"/>
                    <declaration name="expected" type="double" line="197"/>
                </scope>
            </method>
            <method name="testPow" type="void" line="203">
                <scope line="204">
                    <declaration name="x" type="SparseGradient" line="206"/>
                    <declaration name="y" type="SparseGradient" line="207"/>
                    <declaration name="z" type="SparseGradient" line="208"/>
                    <declaration name="list" type="List&amp;lt;SparseGradient&amp;gt;" line="209"/>
                    <scope line="213">
                        <scope line="214"/>
                    </scope>
                    <scope line="217">
                        <scope line="218"/>
                    </scope>
                    <scope line="221">
                        <scope line="222">
                            <declaration name="p" type="SparseGradient" line="223"/>
                            <scope line="224"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testPowDoubleDS" type="void" line="234">
                <comment line="246">
                    the special case a = 0 is included here                    
                </comment>
                <comment line="257">
                    negative base: -1^x can be evaluated for integers only, so value is sometimes OK, derivatives are always NaN                    
                </comment>
                <comment line="275">
                    very special case: a = 0 and power = 0                    
                </comment>
                <comment line="278">
                    this should be OK for simple first derivative with one variable only ...                    
                </comment>
                <scope line="235">
                    <declaration name="x" type="SparseGradient" line="237"/>
                    <declaration name="y" type="SparseGradient" line="238"/>
                    <declaration name="z" type="SparseGradient" line="239"/>
                    <declaration name="list" type="List&amp;lt;SparseGradient&amp;gt;" line="240"/>
                    <scope line="244">
                        <scope line="246">
                            <declaration name="reference" type="SparseGradient" line="247"/>
                            <declaration name="result" type="SparseGradient" line="250"/>
                        </scope>
                    </scope>
                    <declaration name="negEvenInteger" type="SparseGradient" line="257"/>
                    <declaration name="negOddInteger" type="SparseGradient" line="260"/>
                    <declaration name="negNonInteger" type="SparseGradient" line="263"/>
                    <declaration name="zeroNeg" type="SparseGradient" line="267"/>
                    <declaration name="posNeg" type="SparseGradient" line="270"/>
                    <declaration name="zeroZero" type="SparseGradient" line="275"/>
                </scope>
            </method>
            <method name="testExpression" type="void" line="288">
                <comment line="298">
                    f(x, y, z) = x + 5 x y - 2 z + (8 z x - y)^3                    
                </comment>
                <comment line="307">
                    df/dx = 1 + 5 y + 24 (8 z x - y)^2 z                    
                </comment>
                <declaration name="epsilon" type="double" line="289"/>
                <scope line="290">
                    <declaration name="sgX" type="SparseGradient" line="291"/>
                    <scope line="292">
                        <declaration name="sgY" type="SparseGradient" line="293"/>
                        <scope line="294">
                            <declaration name="sgZ" type="SparseGradient" line="295"/>
                            <declaration name="sg" type="SparseGradient" line="298"/>
                            <declaration name="f" type="double" line="303"/>
                            <declaration name="dfdx" type="double" line="307"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testCompositionOneVariableX" type="void" line="317">
                <declaration name="epsilon" type="double" line="318"/>
                <scope line="319">
                    <declaration name="sgX" type="SparseGradient" line="320"/>
                    <scope line="321">
                        <declaration name="sgY" type="SparseGradient" line="322"/>
                        <declaration name="f" type="SparseGradient" line="323"/>
                        <declaration name="f0" type="double" line="324"/>
                        <declaration name="f1" type="double" line="326"/>
                    </scope>
                </scope>
            </method>
            <method name="testTrigo" type="void" line="333">
                <declaration name="epsilon" type="double" line="334"/>
                <scope line="335">
                    <declaration name="sgX" type="SparseGradient" line="336"/>
                    <scope line="337">
                        <declaration name="sgY" type="SparseGradient" line="338"/>
                        <scope line="339">
                            <declaration name="sgZ" type="SparseGradient" line="340"/>
                            <declaration name="f" type="SparseGradient" line="341"/>
                            <declaration name="a" type="double" line="342"/>
                            <declaration name="f0" type="double" line="343"/>
                            <declaration name="dfdx" type="double" line="345"/>
                            <declaration name="dfdy" type="double" line="347"/>
                            <declaration name="cz" type="double" line="349"/>
                            <declaration name="cz2" type="double" line="350"/>
                            <declaration name="dfdz" type="double" line="351"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testSqrtDefinition" type="void" line="359">
                <scope line="360">
                    <declaration name="sgX" type="SparseGradient" line="361"/>
                    <declaration name="sqrt1" type="SparseGradient" line="362"/>
                    <declaration name="sqrt2" type="SparseGradient" line="363"/>
                    <declaration name="zero" type="SparseGradient" line="364"/>
                </scope>
            </method>
            <method name="testRootNSingularity" type="void" line="370">
                <scope line="371">
                    <declaration name="sgZero" type="SparseGradient" line="372"/>
                    <declaration name="rootN" type="SparseGradient" line="373"/>
                </scope>
            </method>
            <method name="testSqrtPow2" type="void" line="382">
                <scope line="383">
                    <declaration name="sgX" type="SparseGradient" line="384"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="385"/>
                    <declaration name="zero" type="SparseGradient" line="386"/>
                </scope>
            </method>
            <method name="testCbrtDefinition" type="void" line="392">
                <scope line="393">
                    <declaration name="sgX" type="SparseGradient" line="394"/>
                    <declaration name="cbrt1" type="SparseGradient" line="395"/>
                    <declaration name="cbrt2" type="SparseGradient" line="396"/>
                    <declaration name="zero" type="SparseGradient" line="397"/>
                </scope>
            </method>
            <method name="testCbrtPow3" type="void" line="403">
                <scope line="404">
                    <declaration name="sgX" type="SparseGradient" line="405"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="406"/>
                    <declaration name="zero" type="SparseGradient" line="407"/>
                </scope>
            </method>
            <method name="testPowReciprocalPow" type="void" line="413">
                <scope line="414">
                    <declaration name="sgX" type="SparseGradient" line="415"/>
                    <scope line="416">
                        <declaration name="sgY" type="SparseGradient" line="417"/>
                        <declaration name="rebuiltX" type="SparseGradient" line="418"/>
                        <declaration name="zero" type="SparseGradient" line="419"/>
                    </scope>
                </scope>
            </method>
            <method name="testHypotDefinition" type="void" line="426">
                <scope line="427">
                    <declaration name="sgX" type="SparseGradient" line="428"/>
                    <scope line="429">
                        <declaration name="sgY" type="SparseGradient" line="430"/>
                        <declaration name="hypot" type="SparseGradient" line="431"/>
                        <declaration name="ref" type="SparseGradient" line="432"/>
                        <declaration name="zero" type="SparseGradient" line="433"/>
                    </scope>
                </scope>
            </method>
            <method name="testHypotNoOverflow" type="void" line="441">
                <declaration name="sgX" type="SparseGradient" line="443"/>
                <declaration name="sgY" type="SparseGradient" line="444"/>
                <declaration name="hypot" type="SparseGradient" line="445"/>
                <declaration name="sqrt" type="SparseGradient" line="450"/>
            </method>
            <method name="testHypotNeglectible" type="void" line="456">
                <declaration name="sgSmall" type="SparseGradient" line="458"/>
                <declaration name="sgLarge" type="SparseGradient" line="459"/>
            </method>
            <method name="testHypotSpecial" type="void" line="484"/>
            <method name="testPrimitiveRemainder" type="void" line="496">
                <scope line="497">
                    <declaration name="sgX" type="SparseGradient" line="498"/>
                    <scope line="499">
                        <declaration name="remainder" type="SparseGradient" line="500"/>
                        <declaration name="ref" type="SparseGradient" line="501"/>
                        <declaration name="zero" type="SparseGradient" line="502"/>
                    </scope>
                </scope>
            </method>
            <method name="testRemainder" type="void" line="509">
                <scope line="510">
                    <declaration name="sgX" type="SparseGradient" line="511"/>
                    <scope line="512">
                        <declaration name="sgY" type="SparseGradient" line="513"/>
                        <declaration name="remainder" type="SparseGradient" line="514"/>
                        <declaration name="ref" type="SparseGradient" line="515"/>
                        <declaration name="zero" type="SparseGradient" line="516"/>
                    </scope>
                </scope>
            </method>
            <method name="testExp" type="void" line="524">
                <scope line="525">
                    <declaration name="refExp" type="double" line="526"/>
                </scope>
            </method>
            <method name="testExpm1Definition" type="void" line="532">
                <scope line="533">
                    <declaration name="sgX" type="SparseGradient" line="534"/>
                    <declaration name="expm11" type="SparseGradient" line="535"/>
                    <declaration name="expm12" type="SparseGradient" line="536"/>
                    <declaration name="zero" type="SparseGradient" line="537"/>
                </scope>
            </method>
            <method name="testLog" type="void" line="544">
                <scope line="545"/>
            </method>
            <method name="testLog1pDefinition" type="void" line="551">
                <scope line="552">
                    <declaration name="sgX" type="SparseGradient" line="553"/>
                    <declaration name="log1p1" type="SparseGradient" line="554"/>
                    <declaration name="log1p2" type="SparseGradient" line="555"/>
                    <declaration name="zero" type="SparseGradient" line="556"/>
                </scope>
            </method>
            <method name="testLog10Definition" type="void" line="562">
                <scope line="563">
                    <declaration name="sgX" type="SparseGradient" line="564"/>
                    <declaration name="log101" type="SparseGradient" line="565"/>
                    <declaration name="log102" type="SparseGradient" line="566"/>
                    <declaration name="zero" type="SparseGradient" line="567"/>
                </scope>
            </method>
            <method name="testLogExp" type="void" line="573">
                <scope line="574">
                    <declaration name="sgX" type="SparseGradient" line="575"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="576"/>
                    <declaration name="zero" type="SparseGradient" line="577"/>
                </scope>
            </method>
            <method name="testLog1pExpm1" type="void" line="583">
                <scope line="584">
                    <declaration name="sgX" type="SparseGradient" line="585"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="586"/>
                    <declaration name="zero" type="SparseGradient" line="587"/>
                </scope>
            </method>
            <method name="testLog10Power" type="void" line="593">
                <scope line="594">
                    <declaration name="sgX" type="SparseGradient" line="595"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="596"/>
                    <declaration name="zero" type="SparseGradient" line="597"/>
                </scope>
            </method>
            <method name="testSinCos" type="void" line="603">
                <scope line="604">
                    <declaration name="sgX" type="SparseGradient" line="605"/>
                    <declaration name="sin" type="SparseGradient" line="606"/>
                    <declaration name="cos" type="SparseGradient" line="607"/>
                    <declaration name="s" type="double" line="608"/>
                    <declaration name="c" type="double" line="609"/>
                </scope>
            </method>
            <method name="testSinAsin" type="void" line="616">
                <scope line="617">
                    <declaration name="sgX" type="SparseGradient" line="618"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="619"/>
                    <declaration name="zero" type="SparseGradient" line="620"/>
                </scope>
            </method>
            <method name="testCosAcos" type="void" line="626">
                <scope line="627">
                    <declaration name="sgX" type="SparseGradient" line="628"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="629"/>
                    <declaration name="zero" type="SparseGradient" line="630"/>
                </scope>
            </method>
            <method name="testTanAtan" type="void" line="636">
                <scope line="637">
                    <declaration name="sgX" type="SparseGradient" line="638"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="639"/>
                    <declaration name="zero" type="SparseGradient" line="640"/>
                </scope>
            </method>
            <method name="testTangentDefinition" type="void" line="646">
                <scope line="647">
                    <declaration name="sgX" type="SparseGradient" line="648"/>
                    <declaration name="tan1" type="SparseGradient" line="649"/>
                    <declaration name="tan2" type="SparseGradient" line="650"/>
                    <declaration name="zero" type="SparseGradient" line="651"/>
                </scope>
            </method>
            <method name="testAtan2" type="void" line="658">
                <scope line="659">
                    <declaration name="sgX" type="SparseGradient" line="660"/>
                    <scope line="661">
                        <declaration name="sgY" type="SparseGradient" line="662"/>
                        <declaration name="atan2" type="SparseGradient" line="663"/>
                        <declaration name="ref" type="SparseGradient" line="664"/>
                        <scope line="665"/>
                        <declaration name="zero" type="SparseGradient" line="668"/>
                    </scope>
                </scope>
            </method>
            <method name="testAtan2SpecialCases" type="void" line="675">
                <declaration name="pp" type="SparseGradient" line="677"/>
                <declaration name="pn" type="SparseGradient" line="683"/>
                <declaration name="np" type="SparseGradient" line="688"/>
                <declaration name="nn" type="SparseGradient" line="694"/>
            </method>
            <method name="testSinhDefinition" type="void" line="702">
                <scope line="703">
                    <declaration name="sgX" type="SparseGradient" line="704"/>
                    <declaration name="sinh1" type="SparseGradient" line="705"/>
                    <declaration name="sinh2" type="SparseGradient" line="706"/>
                    <declaration name="zero" type="SparseGradient" line="707"/>
                </scope>
            </method>
            <method name="testCoshDefinition" type="void" line="713">
                <scope line="714">
                    <declaration name="sgX" type="SparseGradient" line="715"/>
                    <declaration name="cosh1" type="SparseGradient" line="716"/>
                    <declaration name="cosh2" type="SparseGradient" line="717"/>
                    <declaration name="zero" type="SparseGradient" line="718"/>
                </scope>
            </method>
            <method name="testTanhDefinition" type="void" line="724">
                <scope line="725">
                    <declaration name="sgX" type="SparseGradient" line="726"/>
                    <declaration name="tanh1" type="SparseGradient" line="727"/>
                    <declaration name="tanh2" type="SparseGradient" line="728"/>
                    <declaration name="zero" type="SparseGradient" line="729"/>
                </scope>
            </method>
            <method name="testSinhAsinh" type="void" line="735">
                <scope line="736">
                    <declaration name="sgX" type="SparseGradient" line="737"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="738"/>
                    <declaration name="zero" type="SparseGradient" line="739"/>
                </scope>
            </method>
            <method name="testCoshAcosh" type="void" line="745">
                <scope line="746">
                    <declaration name="sgX" type="SparseGradient" line="747"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="748"/>
                    <declaration name="zero" type="SparseGradient" line="749"/>
                </scope>
            </method>
            <method name="testTanhAtanh" type="void" line="755">
                <scope line="756">
                    <declaration name="sgX" type="SparseGradient" line="757"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="758"/>
                    <declaration name="zero" type="SparseGradient" line="759"/>
                </scope>
            </method>
            <method name="testCompositionOneVariableY" type="void" line="765">
                <scope line="766">
                    <declaration name="sgX" type="SparseGradient" line="767"/>
                    <scope line="768">
                        <declaration name="sgY" type="SparseGradient" line="769"/>
                        <declaration name="f" type="SparseGradient" line="770"/>
                        <declaration name="f0" type="double" line="771"/>
                        <declaration name="f1" type="double" line="772"/>
                    </scope>
                </scope>
            </method>
            <method name="testTaylorPolynomial" type="void" line="779">
                <scope line="780">
                    <declaration name="sgX" type="SparseGradient" line="781"/>
                    <scope line="782">
                        <declaration name="sgY" type="SparseGradient" line="783"/>
                        <scope line="784">
                            <declaration name="sgZ" type="SparseGradient" line="785"/>
                            <declaration name="f" type="SparseGradient" line="786"/>
                            <scope line="787">
                                <scope line="788">
                                    <scope line="789">
                                        <declaration name="ref" type="double" line="790"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testTaylorAtan2" type="void" line="801">
                <declaration name="x0" type="double" line="802"/>
                <declaration name="y0" type="double" line="803"/>
                <declaration name="sgX" type="SparseGradient" line="804"/>
                <declaration name="sgY" type="SparseGradient" line="805"/>
                <declaration name="atan2" type="SparseGradient" line="806"/>
                <declaration name="maxError" type="double" line="807"/>
                <scope line="808">
                    <scope line="809">
                        <declaration name="ref" type="double" line="810"/>
                    </scope>
                </scope>
                <declaration name="expectedError" type="double" line="814"/>
            </method>
            <method name="testAbs" type="void" line="820">
                <declaration name="minusOne" type="SparseGradient" line="822"/>
                <declaration name="plusOne" type="SparseGradient" line="826"/>
                <declaration name="minusZero" type="SparseGradient" line="830"/>
                <declaration name="plusZero" type="SparseGradient" line="834"/>
            </method>
            <method name="testSignum" type="void" line="842">
                <declaration name="minusOne" type="SparseGradient" line="844"/>
                <declaration name="plusOne" type="SparseGradient" line="848"/>
                <declaration name="minusZero" type="SparseGradient" line="852"/>
                <declaration name="plusZero" type="SparseGradient" line="857"/>
            </method>
            <method name="testCeilFloorRintLong" type="void" line="865">
                <declaration name="x" type="SparseGradient" line="867"/>
            </method>
            <method name="testCopySign" type="void" line="882">
                <declaration name="minusOne" type="SparseGradient" line="884"/>
                <declaration name="plusOne" type="SparseGradient" line="896"/>
            </method>
            <method name="testToDegreesDefinition" type="void" line="911">
                <declaration name="epsilon" type="double" line="912"/>
                <scope line="913">
                    <scope line="914">
                        <declaration name="sgX" type="SparseGradient" line="915"/>
                    </scope>
                </scope>
            </method>
            <method name="testToRadiansDefinition" type="void" line="923">
                <declaration name="epsilon" type="double" line="924"/>
                <scope line="925">
                    <scope line="926">
                        <declaration name="sgX" type="SparseGradient" line="927"/>
                    </scope>
                </scope>
            </method>
            <method name="testDegRad" type="void" line="935">
                <scope line="936">
                    <declaration name="sgX" type="SparseGradient" line="937"/>
                    <declaration name="rebuiltX" type="SparseGradient" line="938"/>
                    <declaration name="zero" type="SparseGradient" line="939"/>
                </scope>
            </method>
            <method name="testCompose" type="void" line="945">
                <declaration name="poly" type="PolynomialFunction" line="946"/>
                <scope line="948">
                    <declaration name="sgX" type="SparseGradient" line="949"/>
                    <declaration name="sgY1" type="SparseGradient" line="950"/>
                    <scope line="951"/>
                    <declaration name="sgY2" type="SparseGradient" line="954"/>
                    <declaration name="zero" type="SparseGradient" line="955"/>
                </scope>
            </method>
            <method name="testField" type="void" line="961">
                <declaration name="x" type="SparseGradient" line="962"/>
            </method>
            <method name="testLinearCombination1DSDS" type="void" line="969">
                <declaration name="a" type="SparseGradient[]" line="970"/>
                <declaration name="b" type="SparseGradient[]" line="975"/>
                <declaration name="abSumInline" type="SparseGradient" line="981"/>
                <declaration name="abSumArray" type="SparseGradient" line="982"/>
            </method>
            <method name="testLinearCombination1DoubleDS" type="void" line="996">
                <declaration name="a" type="double[]" line="997"/>
                <declaration name="b" type="SparseGradient[]" line="1002"/>
                <declaration name="abSumInline" type="SparseGradient" line="1008"/>
                <declaration name="abSumArray" type="SparseGradient" line="1011"/>
            </method>
            <method name="testLinearCombination2DSDS" type="void" line="1022">
                <comment line="1024">
                    we compare accurate versus naive dot product implementations
                     on regular vectors (i.e. not extreme cases like in the previous test)                    
                </comment>
                <declaration name="random" type="Well1024a" line="1025"/>
                <scope line="1027">
                    <declaration name="u" type="SparseGradient[]" line="1028"/>
                    <declaration name="v" type="SparseGradient[]" line="1029"/>
                    <scope line="1030"/>
                    <declaration name="lin" type="SparseGradient" line="1035"/>
                    <declaration name="ref" type="double" line="1036"/>
                </scope>
            </method>
            <method name="testLinearCombination2DoubleDS" type="void" line="1066">
                <comment line="1068">
                    we compare accurate versus naive dot product implementations
                     on regular vectors (i.e. not extreme cases like in the previous test)                    
                </comment>
                <declaration name="random" type="Well1024a" line="1069"/>
                <scope line="1071">
                    <declaration name="u" type="double[]" line="1072"/>
                    <declaration name="v" type="SparseGradient[]" line="1073"/>
                    <scope line="1074"/>
                    <declaration name="lin" type="SparseGradient" line="1079"/>
                    <declaration name="ref" type="double" line="1080"/>
                </scope>
            </method>
            <method name="testSerialization" type="void" line="1110">
                <declaration name="a" type="SparseGradient" line="1111"/>
                <declaration name="b" type="SparseGradient" line="1112"/>
            </method>
            <method name="checkF0F1" type="void" line="1116">
                <params>
                    <param name="sg" type="SparseGradient"/>
                    <param name="value" type="double"/>
                    <param name="derivatives" type="double"/>
                </params>
                <comment line="1119">
                    check value                    
                </comment>
                <comment line="1122">
                    check first order derivatives                    
                </comment>
                <scope line="1122"/>
            </method>
        </class>
    </source>