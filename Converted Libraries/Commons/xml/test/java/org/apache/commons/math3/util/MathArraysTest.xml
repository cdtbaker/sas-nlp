<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.random.Well1024a"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="MathArraysTest" line="14">
            <javadoc line="14">
                Test cases for the {@link MathArrays} class.                
                <version>
                    $Id$                    
                </version>
            </javadoc>
            <method name="testScale" type="void" line="19">
                <declaration name="test" type="double[]" line="20"/>
                <declaration name="correctTest" type="double[]" line="21"/>
                <declaration name="correctScaled" type="double[]" line="22"/>
                <declaration name="scaled" type="double[]" line="23"/>
                <scope line="24"/>
                <scope line="27"/>
            </method>
            <method name="testScaleInPlace" type="void" line="31">
                <declaration name="test" type="double[]" line="32"/>
                <declaration name="correctScaled" type="double[]" line="33"/>
                <scope line="35"/>
            </method>
            <method name="testEbeAddPrecondition" type="void" line="39"/>
            <method name="testEbeSubtractPrecondition" type="void" line="42"/>
            <method name="testEbeMultiplyPrecondition" type="void" line="45"/>
            <method name="testEbeDividePrecondition" type="void" line="48"/>
            <method name="testEbeAdd" type="void" line="51">
                <declaration name="a" type="double[]" line="52"/>
                <declaration name="b" type="double[]" line="53"/>
                <declaration name="r" type="double[]" line="54"/>
                <scope line="55"/>
            </method>
            <method name="testEbeSubtract" type="void" line="59">
                <declaration name="a" type="double[]" line="60"/>
                <declaration name="b" type="double[]" line="61"/>
                <declaration name="r" type="double[]" line="62"/>
                <scope line="63"/>
            </method>
            <method name="testEbeMultiply" type="void" line="67">
                <declaration name="a" type="double[]" line="68"/>
                <declaration name="b" type="double[]" line="69"/>
                <declaration name="r" type="double[]" line="70"/>
                <scope line="71"/>
            </method>
            <method name="testEbeDivide" type="void" line="75">
                <declaration name="a" type="double[]" line="76"/>
                <declaration name="b" type="double[]" line="77"/>
                <declaration name="r" type="double[]" line="78"/>
                <scope line="79"/>
            </method>
            <method name="testL1DistanceDouble" type="void" line="83">
                <declaration name="p1" type="double[]" line="84"/>
                <declaration name="p2" type="double[]" line="85"/>
            </method>
            <method name="testL1DistanceInt" type="void" line="88">
                <declaration name="p1" type="int[]" line="89"/>
                <declaration name="p2" type="int[]" line="90"/>
            </method>
            <method name="testL2DistanceDouble" type="void" line="93">
                <declaration name="p1" type="double[]" line="94"/>
                <declaration name="p2" type="double[]" line="95"/>
            </method>
            <method name="testL2DistanceInt" type="void" line="98">
                <declaration name="p1" type="int[]" line="99"/>
                <declaration name="p2" type="int[]" line="100"/>
            </method>
            <method name="testLInfDistanceDouble" type="void" line="103">
                <declaration name="p1" type="double[]" line="104"/>
                <declaration name="p2" type="double[]" line="105"/>
            </method>
            <method name="testLInfDistanceInt" type="void" line="108">
                <declaration name="p1" type="int[]" line="109"/>
                <declaration name="p2" type="int[]" line="110"/>
            </method>
            <method name="testCheckOrder" type="void" line="113">
                <scope line="118"/>
                <scope line="122"/>
                <scope line="124"/>
                <scope line="128"/>
                <scope line="130"/>
                <scope line="134"/>
                <scope line="136"/>
                <scope line="140"/>
                <scope line="142"/>
                <scope line="146"/>
            </method>
            <method name="testIsMonotonic" type="void" line="149"/>
            <method name="testIsMonotonicComparable" type="void" line="159"/>
            <method name="testCheckRectangular" type="void" line="169">
                <declaration name="rect" type="long[][]" line="170"/>
                <declaration name="ragged" type="long[][]" line="171"/>
                <declaration name="nullArray" type="long[][]" line="172"/>
                <declaration name="empty" type="long[][]" line="173"/>
                <scope line="176"/>
                <scope line="180"/>
                <scope line="182"/>
                <scope line="186"/>
            </method>
            <method name="testCheckPositive" type="void" line="189">
                <declaration name="positive" type="double[]" line="190"/>
                <declaration name="nonNegative" type="double[]" line="191"/>
                <declaration name="nullArray" type="double[]" line="192"/>
                <declaration name="empty" type="double[]" line="193"/>
                <scope line="196"/>
                <scope line="200"/>
                <scope line="202"/>
                <scope line="206"/>
            </method>
            <method name="testCheckNonNegative" type="void" line="209">
                <declaration name="nonNegative" type="long[]" line="210"/>
                <declaration name="hasNegative" type="long[]" line="211"/>
                <declaration name="nullArray" type="long[]" line="212"/>
                <declaration name="empty" type="long[]" line="213"/>
                <scope line="216"/>
                <scope line="220"/>
                <scope line="222"/>
                <scope line="226"/>
            </method>
            <method name="testCheckNonNegative2D" type="void" line="229">
                <declaration name="nonNegative" type="long[][]" line="230"/>
                <declaration name="hasNegative" type="long[][]" line="231"/>
                <declaration name="nullArray" type="long[][]" line="232"/>
                <declaration name="empty" type="long[][]" line="233"/>
                <scope line="236"/>
                <scope line="240"/>
                <scope line="242"/>
                <scope line="246"/>
            </method>
            <method name="testSortInPlace" type="void" line="249">
                <declaration name="x1" type="double[]" line="250"/>
                <declaration name="x2" type="double[]" line="251"/>
                <declaration name="x3" type="double[]" line="252"/>
            </method>
            <method name="testSortInPlaceExample" type="void" line="270">
                <declaration name="x" type="double[]" line="271"/>
                <declaration name="y" type="double[]" line="272"/>
                <declaration name="z" type="double[]" line="273"/>
                <declaration name="sx" type="double[]" line="275"/>
                <declaration name="sy" type="double[]" line="276"/>
                <declaration name="sz" type="double[]" line="277"/>
            </method>
            <method name="testSortInPlaceFailures" type="void" line="282">
                <declaration name="nullArray" type="double[]" line="283"/>
                <declaration name="one" type="double[]" line="284"/>
                <declaration name="two" type="double[]" line="285"/>
                <declaration name="onep" type="double[]" line="286"/>
                <scope line="287"/>
                <scope line="291"/>
                <scope line="293"/>
                <scope line="297"/>
                <scope line="299"/>
                <scope line="303"/>
            </method>
            <method name="testCopyOfInt" type="void" line="306">
                <declaration name="source" type="int[]" line="307"/>
                <declaration name="dest" type="int[]" line="308"/>
                <scope line="310"/>
            </method>
            <method name="testCopyOfInt2" type="void" line="314">
                <declaration name="source" type="int[]" line="315"/>
                <declaration name="offset" type="int" line="316"/>
                <declaration name="dest" type="int[]" line="317"/>
                <scope line="319"/>
            </method>
            <method name="testCopyOfInt3" type="void" line="323">
                <declaration name="source" type="int[]" line="324"/>
                <declaration name="offset" type="int" line="325"/>
                <declaration name="dest" type="int[]" line="326"/>
                <scope line="328"/>
                <scope line="331"/>
            </method>
            <method name="testCopyOfDouble" type="void" line="335">
                <declaration name="source" type="double[]" line="336"/>
                <declaration name="dest" type="double[]" line="337"/>
                <scope line="339"/>
            </method>
            <method name="testCopyOfDouble2" type="void" line="343">
                <declaration name="source" type="double[]" line="344"/>
                <declaration name="offset" type="int" line="345"/>
                <declaration name="dest" type="double[]" line="346"/>
                <scope line="348"/>
            </method>
            <method name="testCopyOfDouble3" type="void" line="352">
                <declaration name="source" type="double[]" line="353"/>
                <declaration name="offset" type="int" line="354"/>
                <declaration name="dest" type="double[]" line="355"/>
                <scope line="357"/>
                <scope line="360"/>
            </method>
            <method name="testLinearCombination1" type="void" line="364">
                <declaration name="a" type="double[]" line="365"/>
                <declaration name="b" type="double[]" line="366"/>
                <declaration name="abSumInline" type="double" line="367"/>
                <declaration name="abSumArray" type="double" line="368"/>
                <declaration name="naive" type="double" line="371"/>
            </method>
            <method name="testLinearCombination2" type="void" line="374">
                <declaration name="random" type="Well1024a" line="375"/>
                <scope line="376">
                    <declaration name="ux" type="double" line="377"/>
                    <declaration name="uy" type="double" line="378"/>
                    <declaration name="uz" type="double" line="379"/>
                    <declaration name="vx" type="double" line="380"/>
                    <declaration name="vy" type="double" line="381"/>
                    <declaration name="vz" type="double" line="382"/>
                    <declaration name="sInline" type="double" line="383"/>
                    <declaration name="sArray" type="double" line="384"/>
                </scope>
            </method>
            <method name="testLinearCombinationInfinite" type="void" line="388">
                <declaration name="a" type="double[][]" line="389"/>
                <declaration name="b" type="double[][]" line="390"/>
            </method>
            <method name="testArrayEquals" type="void" line="424"/>
            <method name="testArrayEqualsIncludingNaN" type="void" line="435"/>
            <method name="testNormalizeArray" type="void" line="445">
                <declaration name="testValues1" type="double[]" line="446"/>
                <declaration name="testValues2" type="double[]" line="448"/>
                <declaration name="testValues3" type="double[]" line="450"/>
                <declaration name="zeroSum" type="double[]" line="452"/>
                <scope line="453"/>
                <scope line="457"/>
                <declaration name="hasInf" type="double[]" line="459"/>
                <scope line="460"/>
                <scope line="464"/>
                <scope line="466"/>
                <scope line="470"/>
                <scope line="472"/>
                <scope line="476"/>
            </method>
        </class>
    </source>