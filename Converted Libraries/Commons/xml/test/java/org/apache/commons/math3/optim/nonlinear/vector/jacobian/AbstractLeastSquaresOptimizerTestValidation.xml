<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector.jacobian">
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.Target"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.Weight"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.stat.descriptive.StatisticalSummary"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <class name="AbstractLeastSquaresOptimizerTestValidation" line="16">
            <javadoc line="16">
                This class demonstrates the main functionality of the{@link AbstractLeastSquaresOptimizer}, common to the
                  optimizer implementations in package{@link org.apache.commons.math3.optimization.general}.
                  &lt;br/&gt;
                  Not enabled by default, as the class name does not end with &quot;Test&quot;.
                  &lt;br/&gt;
                  Invoke by running
                  &lt;pre&gt;&lt;code&gt;
                  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation
                  &lt;/code&gt;&lt;/pre&gt;
                  or by running
                  &lt;pre&gt;&lt;code&gt;
                  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation -DargLine=&quot;-DmcRuns=1234 -server&quot;
                  &lt;/code&gt;&lt;/pre&gt;                
            </javadoc>
            <declaration name="MONTE_CARLO_RUNS" type="int" line="32"/>
            <javadoc line="33">
                Using a Monte-Carlo procedure, this test checks the error estimations
                  as provided by the square-root of the diagonal elements of the
                  covariance matrix.
                  &lt;br/&gt;
                  The test generates sets of observations, each sampled from
                  a Gaussian distribution.
                  &lt;br/&gt;
                  The optimization problem solved is defined in class{@link StraightLineProblem}.
                  &lt;br/&gt;
                  The output (on stdout) will be a table summarizing the distribution
                  of parameters generated by the Monte-Carlo process and by the direct
                  estimation provided by the diagonal elements of the covariance matrix.                
            </javadoc>
            <method name="testParametersErrorMonteCarloObservations" type="void" line="47">
                <declaration name="yError" type="double" line="48"/>
                <declaration name="slope" type="double" line="49"/>
                <declaration name="offset" type="double" line="50"/>
                <declaration name="lineGenerator" type="RandomStraightLinePointGenerator" line="51"/>
                <declaration name="numObs" type="int" line="52"/>
                <declaration name="numParams" type="int" line="53"/>
                <declaration name="paramsFoundByDirectSolution" type="SummaryStatistics[]" line="54"/>
                <declaration name="sigmaEstimate" type="SummaryStatistics[]" line="55"/>
                <scope line="56"/>
                <declaration name="optim" type="AbstractLeastSquaresOptimizer" line="60"/>
                <declaration name="init" type="double[]" line="61"/>
                <declaration name="mcRepeat" type="int" line="62"/>
                <declaration name="mcCount" type="int" line="63"/>
                <scope line="64">
                    <declaration name="obs" type="Point2D.Double[]" line="65"/>
                    <declaration name="problem" type="StraightLineProblem" line="66"/>
                    <scope line="67">
                        <declaration name="p" type="Point2D.Double" line="68"/>
                    </scope>
                    <declaration name="regress" type="double[]" line="71"/>
                    <declaration name="optimum" type="PointVectorValuePair" line="72"/>
                    <declaration name="sigma" type="double[]" line="73"/>
                    <scope line="74"/>
                </scope>
                <declaration name="line" type="String" line="80"/>
                <scope line="82">
                    <declaration name="s" type="StatisticalSummary" line="85"/>
                </scope>
                <scope line="91"/>
            </method>
            <javadoc line="95">
                In this test, the set of observations is fixed.
                  Using a Monte-Carlo procedure, it generates sets of parameters,
                  and determine the parameter change that will result in the
                  normalized chi-square becoming larger by one than the value from
                  the best fit solution.
                  &lt;br/&gt;
                  The optimization problem solved is defined in class{@link StraightLineProblem}.
                  &lt;br/&gt;
                  The output (on stdout) will be a list of lines containing:
                  &lt;ul&gt;
                  &lt;li&gt;slope of the straight line,&lt;/li&gt;
                  &lt;li&gt;intercept of the straight line,&lt;/li&gt;
                  &lt;li&gt;chi-square of the solution defined by the above two values.&lt;/li&gt;
                  &lt;/ul&gt;
                  The output is separated into two blocks (with a blank line between
                  them); the first block will contain all parameter sets for which{@code chi2 &lt; chi2_b + 1}and the second block, all sets for which{@code chi2 &gt;= chi2_b + 1}where {@code chi2_b} is the lowest chi-square (corresponding to the
                  best solution).                
            </javadoc>
            <method name="testParametersErrorMonteCarloParameters" type="void" line="114">
                <declaration name="yError" type="double" line="115"/>
                <declaration name="slope" type="double" line="116"/>
                <declaration name="offset" type="double" line="117"/>
                <declaration name="lineGenerator" type="RandomStraightLinePointGenerator" line="118"/>
                <declaration name="numObs" type="int" line="119"/>
                <declaration name="numParams" type="int" line="120"/>
                <declaration name="obs" type="Point2D.Double[]" line="121"/>
                <declaration name="problem" type="StraightLineProblem" line="122"/>
                <scope line="123">
                    <declaration name="p" type="Point2D.Double" line="124"/>
                </scope>
                <declaration name="regress" type="double[]" line="127"/>
                <declaration name="optim" type="AbstractLeastSquaresOptimizer" line="128"/>
                <declaration name="init" type="double[]" line="129"/>
                <declaration name="bestChi2N" type="double" line="130"/>
                <declaration name="sigma" type="double[]" line="131"/>
                <declaration name="mcRepeat" type="int" line="132"/>
                <declaration name="gridSize" type="int" line="133"/>
                <declaration name="paramsAndChi2" type="List&lt;double[]&gt;" line="134"/>
                <declaration name="slopeRange" type="double" line="135"/>
                <declaration name="offsetRange" type="double" line="136"/>
                <declaration name="minSlope" type="double" line="137"/>
                <declaration name="minOffset" type="double" line="138"/>
                <declaration name="deltaSlope" type="double" line="139"/>
                <declaration name="deltaOffset" type="double" line="140"/>
                <scope line="141">
                    <declaration name="s" type="double" line="142"/>
                    <scope line="143">
                        <declaration name="o" type="double" line="144"/>
                        <declaration name="chi2N" type="double" line="145"/>
                    </scope>
                </scope>
                <declaration name="chi2NPlusOne" type="double" line="149"/>
                <declaration name="numLarger" type="int" line="150"/>
                <declaration name="lineFmt" type="String" line="151"/>
                <scope line="154">
                    <scope line="155"/>
                </scope>
                <scope line="160">
                    <scope line="161"/>
                </scope>
            </method>
            <javadoc line="170">
                @return the normalized chi-square.                
            </javadoc>
            <method name="getChi2N" type="double" line="173">
                <params>
                    <param name="optim" type="AbstractLeastSquaresOptimizer"/>
                    <param name="problem" type="StraightLineProblem"/>
                    <param name="params" type="double[]"/>
                </params>
                <declaration name="t" type="double[]" line="174"/>
                <declaration name="w" type="double[]" line="175"/>
            </method>
        </class>
        <class name="DummyOptimizer" line="180">
            <extends class="AbstractLeastSquaresOptimizer"/>
            <javadoc line="180">
                A dummy optimizer.
                  Used for computing the covariance matrix.                
            </javadoc>
            <method name="DummyOptimizer" type="constructor" line="185"/>
            <javadoc line="188">
                This method does nothing and returns a dummy value.                
            </javadoc>
            <method name="doOptimize" type="PointVectorValuePair" line="191">
                <declaration name="params" type="double[]" line="192"/>
                <declaration name="res" type="double[]" line="193"/>
            </method>
        </class>
    </source>