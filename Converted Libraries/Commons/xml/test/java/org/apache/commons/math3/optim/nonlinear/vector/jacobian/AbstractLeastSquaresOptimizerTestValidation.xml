<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.vector.jacobian">
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="org.apache.commons.math3.optim.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.Target"/>
        <import package="org.apache.commons.math3.optim.nonlinear.vector.Weight"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.stat.descriptive.StatisticalSummary"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <class name="AbstractLeastSquaresOptimizerTestValidation" line="31">
            <javadoc line="31">
                This class demonstrates the main functionality of the{@link AbstractLeastSquaresOptimizer}, common to the
                  optimizer implementations in package{@link org.apache.commons.math3.optimization.general}.
                  &lt;br/&gt;
                  Not enabled by default, as the class name does not end with &quot;Test&quot;.
                  &lt;br/&gt;
                  Invoke by running
                  &lt;pre&gt;&lt;code&gt;
                  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation
                  &lt;/code&gt;&lt;/pre&gt;
                  or by running
                  &lt;pre&gt;&lt;code&gt;
                  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation -DargLine=&quot;-DmcRuns=1234 -server&quot;
                  &lt;/code&gt;&lt;/pre&gt;                
            </javadoc>
            <declaration name="MONTE_CARLO_RUNS" type="int" line="49"/>
            <javadoc line="52">
                Using a Monte-Carlo procedure, this test checks the error estimations
                  as provided by the square-root of the diagonal elements of the
                  covariance matrix.
                  &lt;br/&gt;
                  The test generates sets of observations, each sampled from
                  a Gaussian distribution.
                  &lt;br/&gt;
                  The optimization problem solved is defined in class{@link StraightLineProblem}.
                  &lt;br/&gt;
                  The output (on stdout) will be a table summarizing the distribution
                  of parameters generated by the Monte-Carlo process and by the direct
                  estimation provided by the diagonal elements of the covariance matrix.                
            </javadoc>
            <method name="testParametersErrorMonteCarloObservations" type="void" line="68">
                <comment line="69">
                    Error on the observations.                    
                </comment>
                <comment line="72">
                    True values of the parameters.                    
                </comment>
                <comment line="76">
                    Samples generator.                    
                </comment>
                <comment line="83">
                    Number of observations.                    
                </comment>
                <comment line="84">
                    XXX Should be a command-line option.                    
                </comment>
                <comment line="85">
                    number of parameters.                    
                </comment>
                <comment line="88">
                    Parameters found for each of Monte-Carlo run.                    
                </comment>
                <comment line="90">
                    Sigma estimations (square-root of the diagonal elements of the                    
                </comment>
                <comment line="91">
                    covariance matrix), for each Monte-Carlo run.                    
                </comment>
                <comment line="94">
                    Initialize statistics accumulators.                    
                </comment>
                <comment line="100">
                    Dummy optimizer (to compute the covariance matrix).                    
                </comment>
                <comment line="104">
                    Monte-Carlo (generates many sets of observations).                    
                </comment>
                <comment line="108">
                    Observations.                    
                </comment>
                <comment line="117">
                    Direct solution (using simple regression).                    
                </comment>
                <comment line="120">
                    Estimation of the standard deviation (diagonal elements of the                    
                </comment>
                <comment line="121">
                    covariance matrix).                    
                </comment>
                <comment line="131">
                    Accumulate statistics.                    
                </comment>
                <comment line="137">
                    Next Monte-Carlo.                    
                </comment>
                <comment line="141">
                    Print statistics.                    
                </comment>
                <comment line="161">
                    Check the error estimation.                    
                </comment>
                <declaration name="yError" type="double" line="70"/>
                <declaration name="slope" type="double" line="73"/>
                <declaration name="offset" type="double" line="74"/>
                <declaration name="lineGenerator" type="RandomStraightLinePointGenerator" line="77"/>
                <declaration name="numObs" type="int" line="84"/>
                <declaration name="numParams" type="int" line="86"/>
                <declaration name="paramsFoundByDirectSolution" type="SummaryStatistics[]" line="89"/>
                <declaration name="sigmaEstimate" type="SummaryStatistics[]" line="92"/>
                <scope line="95"/>
                <declaration name="optim" type="AbstractLeastSquaresOptimizer" line="101"/>
                <declaration name="init" type="double[]" line="102"/>
                <declaration name="mcRepeat" type="int" line="105"/>
                <declaration name="mcCount" type="int" line="106"/>
                <scope line="107">
                    <declaration name="obs" type="Point2D.Double[]" line="109"/>
                    <declaration name="problem" type="StraightLineProblem" line="111"/>
                    <scope line="112">
                        <declaration name="p" type="Point2D.Double" line="113"/>
                    </scope>
                    <declaration name="regress" type="double[]" line="118"/>
                    <declaration name="optimum" type="PointVectorValuePair" line="122"/>
                    <declaration name="sigma" type="double[]" line="129"/>
                    <scope line="132"/>
                </scope>
                <declaration name="line" type="String" line="142"/>
                <scope line="144">
                    <declaration name="s" type="StatisticalSummary" line="148"/>
                </scope>
                <scope line="162"/>
            </method>
            <javadoc line="169">
                In this test, the set of observations is fixed.
                  Using a Monte-Carlo procedure, it generates sets of parameters,
                  and determine the parameter change that will result in the
                  normalized chi-square becoming larger by one than the value from
                  the best fit solution.
                  &lt;br/&gt;
                  The optimization problem solved is defined in class{@link StraightLineProblem}.
                  &lt;br/&gt;
                  The output (on stdout) will be a list of lines containing:
                  &lt;ul&gt;
                  &lt;li&gt;slope of the straight line,&lt;/li&gt;
                  &lt;li&gt;intercept of the straight line,&lt;/li&gt;
                  &lt;li&gt;chi-square of the solution defined by the above two values.&lt;/li&gt;
                  &lt;/ul&gt;
                  The output is separated into two blocks (with a blank line between
                  them); the first block will contain all parameter sets for which{@code chi2 &lt; chi2_b + 1}and the second block, all sets for which{@code chi2 &gt;= chi2_b + 1}where {@code chi2_b} is the lowest chi-square (corresponding to the
                  best solution).                
            </javadoc>
            <method name="testParametersErrorMonteCarloParameters" type="void" line="194">
                <comment line="195">
                    Error on the observations.                    
                </comment>
                <comment line="198">
                    True values of the parameters.                    
                </comment>
                <comment line="202">
                    Samples generator.                    
                </comment>
                <comment line="209">
                    Number of observations.                    
                </comment>
                <comment line="211">
                    number of parameters.                    
                </comment>
                <comment line="214">
                    Create a single set of observations.                    
                </comment>
                <comment line="223">
                    Direct solution (using simple regression).                    
                </comment>
                <comment line="226">
                    Dummy optimizer (to compute the chi-square).                    
                </comment>
                <comment line="229">
                    Get chi-square of the best parameters set for the given set of                    
                </comment>
                <comment line="230">
                    observations.                    
                </comment>
                <comment line="234">
                    Monte-Carlo (generates a grid of parameters).                    
                </comment>
                <comment line="238">
                    Parameters found for each of Monte-Carlo run.                    
                </comment>
                <comment line="239">
                    Index 0 = slope                    
                </comment>
                <comment line="240">
                    Index 1 = offset                    
                </comment>
                <comment line="241">
                    Index 2 = normalized chi2                    
                </comment>
                <comment line="260">
                    Output (for use with &quot;gnuplot&quot;).                    
                </comment>
                <comment line="262">
                    Some info.                    
                </comment>
                <comment line="264">
                    For plotting separately sets of parameters that have a large chi2.                    
                </comment>
                <comment line="270">
                    Point with smallest chi-square.                    
                </comment>
                <comment line="272">
                    Empty line.                    
                </comment>
                <comment line="274">
                    Points within the confidence interval.                    
                </comment>
                <comment line="280">
                    Empty line.                    
                </comment>
                <comment line="282">
                    Points outside the confidence interval.                    
                </comment>
                <comment line="289">
                    Empty line.                    
                </comment>
                <declaration name="yError" type="double" line="196"/>
                <declaration name="slope" type="double" line="199"/>
                <declaration name="offset" type="double" line="200"/>
                <declaration name="lineGenerator" type="RandomStraightLinePointGenerator" line="203"/>
                <declaration name="numObs" type="int" line="210"/>
                <declaration name="numParams" type="int" line="212"/>
                <declaration name="obs" type="Point2D.Double[]" line="215"/>
                <declaration name="problem" type="StraightLineProblem" line="217"/>
                <scope line="218">
                    <declaration name="p" type="Point2D.Double" line="219"/>
                </scope>
                <declaration name="regress" type="double[]" line="224"/>
                <declaration name="optim" type="AbstractLeastSquaresOptimizer" line="227"/>
                <declaration name="init" type="double[]" line="228"/>
                <declaration name="bestChi2N" type="double" line="231"/>
                <declaration name="sigma" type="double[]" line="232"/>
                <declaration name="mcRepeat" type="int" line="235"/>
                <declaration name="gridSize" type="int" line="236"/>
                <declaration name="paramsAndChi2" type="List&lt;double[]&gt;" line="242"/>
                <declaration name="slopeRange" type="double" line="244"/>
                <declaration name="offsetRange" type="double" line="245"/>
                <declaration name="minSlope" type="double" line="246"/>
                <declaration name="minOffset" type="double" line="247"/>
                <declaration name="deltaSlope" type="double" line="248"/>
                <declaration name="deltaOffset" type="double" line="249"/>
                <scope line="250">
                    <declaration name="s" type="double" line="251"/>
                    <scope line="252">
                        <declaration name="o" type="double" line="253"/>
                        <declaration name="chi2N" type="double" line="254"/>
                    </scope>
                </scope>
                <declaration name="chi2NPlusOne" type="double" line="265"/>
                <declaration name="numLarger" type="int" line="266"/>
                <declaration name="lineFmt" type="String" line="268"/>
                <scope line="275">
                    <scope line="276"/>
                </scope>
                <scope line="283">
                    <scope line="284"/>
                </scope>
            </method>
            <javadoc line="295">
                @return the normalized chi-square.                
            </javadoc>
            <method name="getChi2N" type="double" line="300">
                <params>
                    <param name="optim" type="AbstractLeastSquaresOptimizer"/>
                    <param name="problem" type="StraightLineProblem"/>
                    <param name="params" type="double[]"/>
                </params>
                <declaration name="t" type="double[]" line="301"/>
                <declaration name="w" type="double[]" line="302"/>
            </method>
        </class>
        <class name="DummyOptimizer" line="315">
            <extends class="AbstractLeastSquaresOptimizer"/>
            <javadoc line="315">
                A dummy optimizer.
                  Used for computing the covariance matrix.                
            </javadoc>
            <method name="DummyOptimizer" type="constructor" line="320"/>
            <javadoc line="324">
                This method does nothing and returns a dummy value.                
            </javadoc>
            <method name="doOptimize" type="PointVectorValuePair" line="328">
                <declaration name="params" type="double[]" line="329"/>
                <declaration name="res" type="double[]" line="330"/>
            </method>
        </class>
    </source>