<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fitting.leastsquares">
        <import package="org.apache.commons.math3.analysis.MultivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer.Optimum"/>
        <import package="org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.linear.DiagonalMatrix"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.optim.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optim.SimpleVectorValueChecker"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Arrays"/>
        <import package="org.hamcrest.CoreMatchers.is"/>
        <import package="org.hamcrest.CoreMatchers.not"/>
        <import package="org.hamcrest.CoreMatchers.sameInstance"/>
        <class name="AbstractLeastSquaresOptimizerAbstractTest" line="46">
            <javadoc line="46">
                Some of the unit tests are re-implementations of the MINPACK &lt;a
                  href=&quot;http://www.netlib.org/minpack/ex/file17&quot;&gt;file17&lt;/a&gt; and &lt;a
                  href=&quot;http://www.netlib.org/minpack/ex/file22&quot;&gt;file22&lt;/a&gt; test files. The
                  redistribution policy for MINPACK is available &lt;a href=&quot;http://www.netlib.org/minpack/disclaimer&quot;&gt;here&lt;/a&gt;.
                  &lt;p/&gt;
                  &lt;T&gt; Concrete implementation of an optimizer.                
                <version>
                    $Id: AbstractLeastSquaresOptimizerAbstractTest.java 1573351 2014-03-02 19:54:43Z luc $                    
                </version>
            </javadoc>
            <declaration name="TOl" type="double" line="58"/>
            <javadoc line="58">
                default absolute tolerance of comparisons                
            </javadoc>
            <method name="base" type="LeastSquaresBuilder" line="61"/>
            <method name="builder" type="LeastSquaresBuilder" line="68">
                <params>
                    <param name="c" type="CircleVectorial"/>
                </params>
                <declaration name="weights" type="double[]" line="69"/>
            </method>
            <method name="builder" type="LeastSquaresBuilder" line="77">
                <params>
                    <param name="dataset" type="StatisticalReferenceDataset"/>
                </params>
                <declaration name="problem" type="StatisticalReferenceDataset.LeastSquaresProblem" line="78"/>
                <declaration name="weights" type="double[]" line="80"/>
            </method>
            <method name="fail" type="void" line="89">
                <params>
                    <param name="optimizer" type="LeastSquaresOptimizer"/>
                </params>
            </method>
            <javadoc line="93">
                Check the value of a vector.                
                <param>
                    tolerance the absolute tolerance of comparisons                    
                </param>
                <param>
                    actual the vector to test                    
                </param>
                <param>
                    expected the expected values                    
                </param>
            </javadoc>
            <method name="assertEquals" type="void" line="99">
                <params>
                    <param name="tolerance" type="double"/>
                    <param name="actual" type="RealVector"/>
                    <param name="expected" type="double"/>
                </params>
                <scope line="100"/>
            </method>
            <method name="getMaxIterations" type="int" line="106"/>
            <javadoc line="106">
                @return the default number of allowed iterations (which will be used when not
                  specified otherwise).                
            </javadoc>
            <method name="getOptimizer" type="LeastSquaresOptimizer" line="112"/>
            <javadoc line="112">
                Get an instance of the optimizer under test.                
                <return>
                    the subject under test.                    
                </return>
            </javadoc>
            <declaration name="optimizer" type="LeastSquaresOptimizer" line="119"/>
            <javadoc line="119">
                The subject under test.                
            </javadoc>
            <method name="testGetIterations" type="void" line="125">
                <comment line="151">
                    TODO more specific test? could pass with &apos;return 1;&apos;                    
                </comment>
                <anonymous_class line="130">
                    <method name="value" type="Pair&lt;RealVector,RealMatrix&gt;" line="131">
                        <params>
                            <param name="point" type="RealVector"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="lsp" type="LeastSquaresProblem" line="126"/>
                <declaration name="optimum" type="Optimum" line="148"/>
            </method>
            <method name="testTrivial" type="void" line="155">
                <declaration name="problem" type="LinearProblem" line="156"/>
                <declaration name="ls" type="LeastSquaresProblem" line="159"/>
                <declaration name="optimum" type="Optimum" line="161"/>
            </method>
            <method name="testQRColumnsPermutation" type="void" line="169">
                <declaration name="problem" type="LinearProblem" line="170"/>
                <declaration name="optimum" type="Optimum" line="174"/>
            </method>
            <method name="testNoDependency" type="void" line="182">
                <declaration name="problem" type="LinearProblem" line="183"/>
                <declaration name="optimum" type="Optimum" line="192"/>
                <scope line="195"/>
            </method>
            <method name="testOneSet" type="void" line="201">
                <declaration name="problem" type="LinearProblem" line="202"/>
                <declaration name="optimum" type="Optimum" line="208"/>
            </method>
            <method name="testTwoSets" type="void" line="215">
                <declaration name="epsilon" type="double" line="216"/>
                <declaration name="problem" type="LinearProblem" line="217"/>
                <declaration name="optimum" type="Optimum" line="226"/>
            </method>
            <method name="testNonInvertible" type="void" line="233">
                <comment line="246">
                    expected                    
                </comment>
                <scope line="234">
                    <declaration name="problem" type="LinearProblem" line="235"/>
                </scope>
                <scope line="244"/>
            </method>
            <method name="testIllConditioned" type="void" line="250">
                <declaration name="problem1" type="LinearProblem" line="251"/>
                <declaration name="start" type="double[]" line="257"/>
                <declaration name="optimum" type="Optimum" line="259"/>
                <declaration name="problem2" type="LinearProblem" line="265"/>
            </method>
            <method name="testMoreEstimatedParametersSimple" type="void" line="279">
                <declaration name="problem" type="LinearProblem" line="280"/>
                <declaration name="optimum" type="Optimum" line="286"/>
            </method>
            <method name="testMoreEstimatedParametersUnsorted" type="void" line="293">
                <comment line="308">
                    the first two elements are under constrained
                    check first two elements obey the constraint: sum to 3                    
                </comment>
                <comment line="311">
                    #constrains = #states fro the last 4 elements                    
                </comment>
                <declaration name="problem" type="LinearProblem" line="294"/>
                <declaration name="optimum" type="Optimum" line="302"/>
                <declaration name="point" type="RealVector" line="306"/>
            </method>
            <method name="testRedundantEquations" type="void" line="315">
                <declaration name="problem" type="LinearProblem" line="316"/>
                <declaration name="optimum" type="Optimum" line="322"/>
            </method>
            <method name="testInconsistentEquations" type="void" line="330">
                <comment line="341">
                    TODO what is this actually testing?                    
                </comment>
                <declaration name="problem" type="LinearProblem" line="331"/>
                <declaration name="optimum" type="Optimum" line="337"/>
            </method>
            <method name="testInconsistentSizes1" type="void" line="345">
                <comment line="353">
                    TODO why is this part here? hasn&apos;t it been tested already?                    
                </comment>
                <comment line="359">
                    TODO move to builder test                    
                </comment>
                <comment line="365">
                    expected                    
                </comment>
                <scope line="346">
                    <declaration name="problem" type="LinearProblem" line="347"/>
                    <declaration name="optimum" type="Optimum" line="353"/>
                </scope>
                <scope line="363"/>
            </method>
            <method name="testInconsistentSizes2" type="void" line="369">
                <comment line="381">
                    TODO move to builder test                    
                </comment>
                <comment line="391">
                    expected                    
                </comment>
                <scope line="370">
                    <declaration name="problem" type="LinearProblem" line="371"/>
                    <declaration name="optimum" type="Optimum" line="375"/>
                </scope>
                <scope line="389"/>
            </method>
            <method name="testCircleFitting" type="void" line="395">
                <comment line="423">
                    add perfect measurements and check formal errors are reduced                    
                </comment>
                <declaration name="circle" type="CircleVectorial" line="396"/>
                <declaration name="start" type="double[]" line="402"/>
                <declaration name="optimum" type="Optimum" line="404"/>
                <declaration name="rms" type="double" line="408"/>
                <declaration name="center" type="Vector2D" line="411"/>
                <declaration name="cov" type="double[][]" line="416"/>
                <declaration name="r" type="double" line="423"/>
                <scope line="424"/>
                <declaration name="weights" type="double[]" line="428"/>
            </method>
            <method name="testCircleFittingBadInit" type="void" line="442">
                <declaration name="circle" type="CircleVectorial" line="443"/>
                <declaration name="points" type="double[][]" line="444"/>
                <declaration name="weights" type="double[]" line="445"/>
                <declaration name="start" type="double[]" line="446"/>
                <scope line="448"/>
                <declaration name="optimum" type="Optimum" line="452"/>
                <declaration name="center" type="Vector2D" line="454"/>
            </method>
            <method name="testCircleFittingGoodInit" type="void" line="463">
                <declaration name="circle" type="CircleVectorial" line="464"/>
                <declaration name="points" type="double[][]" line="465"/>
                <declaration name="weights" type="double[]" line="466"/>
                <scope line="468"/>
                <declaration name="start" type="double[]" line="471"/>
                <declaration name="optimum" type="Optimum" line="473"/>
            </method>
            <declaration name="circlePoints" type="double[][]" line="480"/>
            <method name="doTestStRD" type="void" line="515">
                <params>
                    <param name="dataset" type="StatisticalReferenceDataset"/>
                    <param name="optimizer" type="LeastSquaresOptimizer"/>
                    <param name="errParams" type="double"/>
                    <param name="errParamsSd" type="double"/>
                </params>
                <declaration name="optimum" type="Optimum" line="517"/>
                <declaration name="actual" type="RealVector" line="519"/>
                <scope line="520">
                    <declaration name="expected" type="double" line="521"/>
                    <declaration name="delta" type="double" line="522"/>
                </scope>
            </method>
            <method name="testKirby2" type="void" line="529"/>
            <method name="testHahn1" type="void" line="534"/>
            <method name="testPointCopy" type="void" line="539">
                <comment line="546">
                    mutable boolean                    
                </comment>
                <declaration name="problem" type="LinearProblem" line="540"/>
                <declaration name="checked" type="boolean[]" line="546"/>
                <anonymous_class line="549">
                    <method name="converged" type="boolean" line="550">
                        <params>
                            <param name="iteration" type="int"/>
                            <param name="previous" type="Evaluation"/>
                            <param name="current" type="Evaluation"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="builder" type="LeastSquaresBuilder" line="548"/>
                <declaration name="optimum" type="Optimum" line="560"/>
            </method>
            <class name="LinearProblem" line="565">
                <declaration name="factors" type="RealMatrix" line="566"/>
                <declaration name="target" type="double[]" line="567"/>
                <method name="LinearProblem" type="constructor" line="569">
                    <params>
                        <param name="factors" type="double[][]"/>
                        <param name="target" type="double[]"/>
                    </params>
                </method>
                <method name="getTarget" type="double[]" line="574"/>
                <method name="getModelFunction" type="MultivariateVectorFunction" line="578">
                    <anonymous_class line="579">
                        <method name="value" type="double[]" line="580">
                            <params>
                                <param name="params" type="double[]"/>
                            </params>
                        </method>
                    </anonymous_class>
                </method>
                <method name="getModelFunctionJacobian" type="MultivariateMatrixFunction" line="586">
                    <anonymous_class line="587">
                        <method name="value" type="double[][]" line="588">
                            <params>
                                <param name="params" type="double[]"/>
                            </params>
                        </method>
                    </anonymous_class>
                </method>
                <method name="getBuilder" type="LeastSquaresBuilder" line="594">
                    <declaration name="weights" type="double[]" line="595"/>
                </method>
            </class>
        </class>
    </source>