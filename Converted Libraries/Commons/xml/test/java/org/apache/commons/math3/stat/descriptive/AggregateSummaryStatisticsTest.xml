<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.distribution.UniformRealDistribution"/>
        <import package="org.apache.commons.math3.distribution.IntegerDistribution"/>
        <import package="org.apache.commons.math3.distribution.UniformIntegerDistribution"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="AggregateSummaryStatisticsTest" line="12">
            <javadoc line="12">
                Test cases for {@link AggregateSummaryStatistics}                
            </javadoc>
            <javadoc line="16">
                Tests the standard aggregation behavior                
            </javadoc>
            <method name="testAggregation" type="void" line="19">
                <declaration name="aggregate" type="AggregateSummaryStatistics" line="20"/>
                <declaration name="setOneStats" type="SummaryStatistics" line="21"/>
                <declaration name="setTwoStats" type="SummaryStatistics" line="22"/>
            </method>
            <javadoc line="41">
                Verify that aggregating over a partition gives the same results
                  as direct computation.
                  1) Randomly generate a dataset of 10-100 values
                  from [-100, 100]
                  2) Divide the dataset it into 2-5 partitions
                  3) Create an AggregateSummaryStatistic and ContributingStatistics
                  for each partition
                  4) Compare results from the AggregateSummaryStatistic with values
                  returned by a single SummaryStatistics instance that is provided
                  the full dataset                
            </javadoc>
            <method name="testAggregationConsistency" type="void" line="53">
                <declaration name="totalSample" type="double[]" line="54"/>
                <declaration name="subSamples" type="double[][]" line="55"/>
                <declaration name="nSamples" type="int" line="56"/>
                <declaration name="aggregate" type="AggregateSummaryStatistics" line="57"/>
                <declaration name="totalStats" type="SummaryStatistics" line="58"/>
                <declaration name="componentStats" type="SummaryStatistics" line="59"/>
                <scope line="60">
                    <scope line="62"/>
                </scope>
                <scope line="66"/>
            </method>
            <javadoc line="71">
                Test aggregate function by randomly generating a dataset of 10-100 values
                  from [-100, 100], dividing it into 2-5 partitions, computing stats for each
                  partition and comparing the result of aggregate(...) applied to the collection
                  of per-partition SummaryStatistics with a single SummaryStatistics computed
                  over the full sample.                
            </javadoc>
            <method name="testAggregate" type="void" line="78">
                <declaration name="totalSample" type="double[]" line="79"/>
                <declaration name="subSamples" type="double[][]" line="80"/>
                <declaration name="nSamples" type="int" line="81"/>
                <declaration name="totalStats" type="SummaryStatistics" line="82"/>
                <scope line="83"/>
                <declaration name="subSampleStats" type="SummaryStatistics[]" line="86"/>
                <scope line="87"/>
                <declaration name="aggregate" type="Collection&lt;SummaryStatistics&gt;" line="90"/>
                <scope line="91">
                    <scope line="92"/>
                </scope>
                <declaration name="aggregatedStats" type="StatisticalSummary" line="97"/>
            </method>
            <method name="testAggregateDegenerate" type="void" line="100">
                <declaration name="totalSample" type="double[]" line="101"/>
                <declaration name="subSamples" type="double[][]" line="102"/>
                <declaration name="totalStats" type="SummaryStatistics" line="103"/>
                <scope line="104"/>
                <declaration name="subSampleStats" type="SummaryStatistics[]" line="107"/>
                <scope line="108"/>
                <declaration name="aggregate" type="Collection&lt;SummaryStatistics&gt;" line="111"/>
                <scope line="112">
                    <scope line="113"/>
                </scope>
                <declaration name="aggregatedStats" type="StatisticalSummaryValues" line="118"/>
            </method>
            <method name="testAggregateSpecialValues" type="void" line="121">
                <declaration name="totalSample" type="double[]" line="122"/>
                <declaration name="subSamples" type="double[][]" line="123"/>
                <declaration name="totalStats" type="SummaryStatistics" line="124"/>
                <scope line="125"/>
                <declaration name="subSampleStats" type="SummaryStatistics[]" line="128"/>
                <scope line="129"/>
                <declaration name="aggregate" type="Collection&lt;SummaryStatistics&gt;" line="132"/>
                <scope line="133">
                    <scope line="134"/>
                </scope>
                <declaration name="aggregatedStats" type="StatisticalSummaryValues" line="139"/>
            </method>
            <javadoc line="142">
                Verifies that a StatisticalSummary and a StatisticalSummaryValues are equal up
                  to delta, with NaNs, infinities returned in the same spots. For max, min, n, values
                  have to agree exactly, delta is used only for sum, mean, variance, std dev.                
            </javadoc>
            <method name="assertEquals" type="void" line="147">
                <params>
                    <param name="expected" type="StatisticalSummary"/>
                    <param name="observed" type="StatisticalSummary"/>
                    <param name="delta" type="double"/>
                </params>
            </method>
            <javadoc line="156">
                Generates a random sample of double values.
                  Sample size is random, between 10 and 100 and values are
                  uniformly distributed over [-100, 100].                
                <return>
                    array of random double values                    
                </return>
            </javadoc>
            <method name="generateSample" type="double[]" line="162">
                <declaration name="size" type="IntegerDistribution" line="163"/>
                <declaration name="randomData" type="RealDistribution" line="164"/>
                <declaration name="sampleSize" type="int" line="165"/>
                <declaration name="out" type="double[]" line="166"/>
            </method>
            <javadoc line="169">
                Generates a partition of &lt;sample&gt; into up to 5 sequentially selected
                  subsamples with randomly selected partition points.                
                <param>
                    sample array to partition                    
                </param>
                <return>
                    rectangular array with rows = subsamples                    
                </return>
            </javadoc>
            <method name="generatePartition" type="double[][]" line="175">
                <params>
                    <param name="sample" type="double[]"/>
                </params>
                <declaration name="length" type="int" line="176"/>
                <declaration name="out" type="double[][]" line="177"/>
                <declaration name="cur" type="int" line="178"/>
                <declaration name="offset" type="int" line="179"/>
                <declaration name="sampleCount" type="int" line="180"/>
                <scope line="181">
                    <scope line="182"/>
                    <declaration name="next" type="int" line="185"/>
                    <scope line="186"/>
                    <scope line="189"/>
                    <declaration name="subLength" type="int" line="192"/>
                </scope>
                <scope line="199">
                    <declaration name="out2" type="double[][]" line="200"/>
                    <scope line="201">
                        <declaration name="curSize" type="int" line="202"/>
                    </scope>
                </scope>
                <scope line="208"/>
            </method>
        </class>
    </source>