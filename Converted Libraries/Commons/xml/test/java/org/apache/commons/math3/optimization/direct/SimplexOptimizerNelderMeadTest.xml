<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.LeastSquaresConverter"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="SimplexOptimizerNelderMeadTest" line="13">
            <method name="testMinimize1" type="void" line="14">
                <declaration name="optimizer" type="SimplexOptimizer" line="15"/>
                <declaration name="fourExtrema" type="FourExtrema" line="17"/>
                <declaration name="optimum" type="PointValuePair" line="18"/>
            </method>
            <method name="testMinimize2" type="void" line="25">
                <declaration name="optimizer" type="SimplexOptimizer" line="26"/>
                <declaration name="fourExtrema" type="FourExtrema" line="28"/>
                <declaration name="optimum" type="PointValuePair" line="29"/>
            </method>
            <method name="testMaximize1" type="void" line="36">
                <declaration name="optimizer" type="SimplexOptimizer" line="37"/>
                <declaration name="fourExtrema" type="FourExtrema" line="39"/>
                <declaration name="optimum" type="PointValuePair" line="40"/>
            </method>
            <method name="testMaximize2" type="void" line="47">
                <declaration name="optimizer" type="SimplexOptimizer" line="48"/>
                <declaration name="fourExtrema" type="FourExtrema" line="50"/>
                <declaration name="optimum" type="PointValuePair" line="51"/>
            </method>
            <method name="testRosenbrock" type="void" line="58">
                <declaration name="rosenbrock" type="Rosenbrock" line="59"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="60"/>
                <declaration name="optimum" type="PointValuePair" line="62"/>
            </method>
            <method name="testPowell" type="void" line="68">
                <declaration name="powell" type="Powell" line="69"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="70"/>
                <declaration name="optimum" type="PointValuePair" line="72"/>
            </method>
            <method name="testLeastSquares1" type="void" line="78">
                <declaration name="factors" type="RealMatrix" line="79"/>
                <anonymous_class line="80">
                    <method name="value" type="double[]" line="81">
                        <params>
                            <param name="variables" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="ls" type="LeastSquaresConverter" line="80"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="86"/>
                <declaration name="optimum" type="PointValuePair" line="88"/>
            </method>
            <method name="testLeastSquares2" type="void" line="95">
                <declaration name="factors" type="RealMatrix" line="96"/>
                <anonymous_class line="97">
                    <method name="value" type="double[]" line="98">
                        <params>
                            <param name="variables" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="ls" type="LeastSquaresConverter" line="97"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="103"/>
                <declaration name="optimum" type="PointValuePair" line="105"/>
            </method>
            <method name="testLeastSquares3" type="void" line="112">
                <declaration name="factors" type="RealMatrix" line="113"/>
                <anonymous_class line="114">
                    <method name="value" type="double[]" line="115">
                        <params>
                            <param name="variables" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="ls" type="LeastSquaresConverter" line="114"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="120"/>
                <declaration name="optimum" type="PointValuePair" line="122"/>
            </method>
            <method name="testMaxIterations" type="void" line="129">
                <declaration name="powell" type="Powell" line="130"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="131"/>
            </method>
            <class name="FourExtrema" line="135">
                <implements interface="MultivariateFunction"/>
                <declaration name="xM" type="double" line="136"/>
                <declaration name="yM" type="double" line="137"/>
                <declaration name="xP" type="double" line="138"/>
                <declaration name="yP" type="double" line="139"/>
                <declaration name="valueXmYm" type="double" line="140"/>
                <declaration name="valueXmYp" type="double" line="141"/>
                <declaration name="valueXpYm" type="double" line="142"/>
                <declaration name="valueXpYp" type="double" line="143"/>
                <method name="value" type="double" line="144">
                    <params>
                        <param name="variables" type="double[]"/>
                    </params>
                    <declaration name="x" type="double" line="145"/>
                    <declaration name="y" type="double" line="146"/>
                </method>
            </class>
            <class name="Rosenbrock" line="150">
                <implements interface="MultivariateFunction"/>
                <declaration name="count" type="int" line="151"/>
                <method name="Rosenbrock" type="constructor" line="152"/>
                <method name="value" type="double" line="155">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="a" type="double" line="157"/>
                    <declaration name="b" type="double" line="158"/>
                </method>
                <method name="getCount" type="int" line="161"/>
            </class>
            <class name="Powell" line="165">
                <implements interface="MultivariateFunction"/>
                <declaration name="count" type="int" line="166"/>
                <method name="Powell" type="constructor" line="167"/>
                <method name="value" type="double" line="170">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="a" type="double" line="172"/>
                    <declaration name="b" type="double" line="173"/>
                    <declaration name="c" type="double" line="174"/>
                    <declaration name="d" type="double" line="175"/>
                </method>
                <method name="getCount" type="int" line="178"/>
            </class>
        </class>
    </source>