<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.general">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.analysis.solvers.BrentSolver"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <import package="org.apache.commons.math3.linear.BlockRealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.SimpleValueChecker"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="NonLinearConjugateGradientOptimizerTest" line="34">
            <javadoc line="34">
                &lt;p&gt;Some of the unit tests are re-implementations of the MINPACK &lt;a
                  href=&quot;http://www.netlib.org/minpack/ex/file17&quot;&gt;file17&lt;/a&gt; and &lt;a
                  href=&quot;http://www.netlib.org/minpack/ex/file22&quot;&gt;file22&lt;/a&gt; test files.
                  The redistribution policy for MINPACK is available &lt;a
                  href=&quot;http://www.netlib.org/minpack/disclaimer&quot;&gt;here&lt;/a&gt;, for
                  convenience, it is reproduced below.&lt;/p&gt;
                  &lt;table border=&quot;0&quot; width=&quot;80%&quot; cellpadding=&quot;10&quot; align=&quot;center&quot; bgcolor=&quot;#E0E0E0&quot;&gt;
                  &lt;tr&gt;&lt;td&gt;
                  Minpack Copyright Notice (1999) University of Chicago.
                  All rights reserved
                  &lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;
                  Redistribution and use in source and binary forms, with or without
                  modification, are permitted provided that the following conditions
                  are met:
                  &lt;ol&gt;
                  &lt;li&gt;Redistributions of source code must retain the above copyright
                  notice, this list of conditions and the following disclaimer.&lt;/li&gt;
                  &lt;li&gt;Redistributions in binary form must reproduce the above
                  copyright notice, this list of conditions and the following
                  disclaimer in the documentation and/or other materials provided
                  with the distribution.&lt;/li&gt;
                  &lt;li&gt;The end-user documentation included with the redistribution, if any,
                  must include the following acknowledgment:
                  &lt;code&gt;This product includes software developed by the University of
                  Chicago, as Operator of Argonne National Laboratory.&lt;/code&gt;
                  Alternately, this acknowledgment may appear in the software itself,
                  if and wherever such third-party acknowledgments normally appear.&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED &quot;AS IS&quot;
                  WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE
                  UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND
                  THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR
                  IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES
                  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE
                  OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY
                  OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR
                  USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF
                  THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)
                  DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
                  UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL
                  BE CORRECTED.&lt;/strong&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
                  HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF
                  ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,
                  INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF
                  ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF
                  PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER
                  SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT
                  (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,
                  EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
                  POSSIBILITY OF SUCH LOSS OR DAMAGES.&lt;/strong&gt;&lt;/li&gt;
                  &lt;ol&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;                
                <author>
                    Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)                    
                </author>
                <author>
                    Burton S. Garbow (original fortran minpack tests)                    
                </author>
                <author>
                    Kenneth E. Hillstrom (original fortran minpack tests)                    
                </author>
                <author>
                    Jorge J. More (original fortran minpack tests)                    
                </author>
                <author>
                    Luc Maisonobe (non-minpack tests and minpack tests Java translation)                    
                </author>
            </javadoc>
            <method name="testTrivial" type="void" line="98">
                <declaration name="problem" type="LinearProblem" line="99"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="101"/>
                <declaration name="optimum" type="PointValuePair" line="104"/>
            </method>
            <method name="testColumnsPermutation" type="void" line="111">
                <declaration name="problem" type="LinearProblem" line="112"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="116"/>
                <declaration name="optimum" type="PointValuePair" line="119"/>
            </method>
            <method name="testNoDependency" type="void" line="128">
                <declaration name="problem" type="LinearProblem" line="129"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="137"/>
                <declaration name="optimum" type="PointValuePair" line="140"/>
                <scope line="142"/>
            </method>
            <method name="testOneSet" type="void" line="148">
                <declaration name="problem" type="LinearProblem" line="149"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="154"/>
                <declaration name="optimum" type="PointValuePair" line="157"/>
            </method>
            <method name="testTwoSets" type="void" line="166">
                <declaration name="epsilon" type="double" line="167"/>
                <declaration name="problem" type="LinearProblem" line="168"/>
                <anonymous_class line="178">
                    <method name="precondition" type="double[]" line="179">
                        <params>
                            <param name="point" type="double[]"/>
                            <param name="r" type="double[]"/>
                        </params>
                        <declaration name="d" type="double[]" line="180"/>
                    </method>
                </anonymous_class>
                <declaration name="preconditioner" type="Preconditioner" line="177"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="191"/>
                <declaration name="optimum" type="PointValuePair" line="197"/>
            </method>
            <method name="testNonInversible" type="void" line="209">
                <declaration name="problem" type="LinearProblem" line="210"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="215"/>
                <declaration name="optimum" type="PointValuePair" line="218"/>
            </method>
            <method name="testIllConditioned" type="void" line="224">
                <declaration name="problem1" type="LinearProblem" line="225"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="231"/>
                <declaration name="optimum1" type="PointValuePair" line="235"/>
                <declaration name="problem2" type="LinearProblem" line="242"/>
                <declaration name="optimum2" type="PointValuePair" line="248"/>
            </method>
            <method name="testMoreEstimatedParametersSimple" type="void" line="258">
                <declaration name="problem" type="LinearProblem" line="259"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="265"/>
                <declaration name="optimum" type="PointValuePair" line="268"/>
            </method>
            <method name="testMoreEstimatedParametersUnsorted" type="void" line="275">
                <declaration name="problem" type="LinearProblem" line="276"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="283"/>
                <declaration name="optimum" type="PointValuePair" line="286"/>
            </method>
            <method name="testRedundantEquations" type="void" line="292">
                <declaration name="problem" type="LinearProblem" line="293"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="299"/>
                <declaration name="optimum" type="PointValuePair" line="302"/>
            </method>
            <method name="testInconsistentEquations" type="void" line="310">
                <declaration name="problem" type="LinearProblem" line="311"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="317"/>
                <declaration name="optimum" type="PointValuePair" line="320"/>
            </method>
            <method name="testCircleFitting" type="void" line="327">
                <declaration name="circle" type="CircleScalar" line="328"/>
                <declaration name="optimizer" type="NonLinearConjugateGradientOptimizer" line="334"/>
                <declaration name="optimum" type="PointValuePair" line="338"/>
                <declaration name="center" type="Vector2D" line="340"/>
            </method>
            <class name="LinearProblem" line="346">
                <implements interface="MultivariateDifferentiableFunction"/>
                <implements interface="Serializable"/>
                <declaration name="serialVersionUID" type="long" line="348"/>
                <declaration name="factors" type="RealMatrix" line="349"/>
                <declaration name="target" type="double[]" line="350"/>
                <method name="LinearProblem" type="constructor" line="351">
                    <params>
                        <param name="factors" type="double[][]"/>
                        <param name="target" type="double[]"/>
                    </params>
                </method>
                <method name="value" type="double" line="356">
                    <params>
                        <param name="variables" type="double[]"/>
                    </params>
                    <declaration name="y" type="double[]" line="357"/>
                    <declaration name="sum" type="double" line="358"/>
                    <scope line="359">
                        <declaration name="ri" type="double" line="360"/>
                    </scope>
                </method>
                <method name="value" type="DerivativeStructure" line="366">
                    <params>
                        <param name="variables" type="DerivativeStructure[]"/>
                    </params>
                    <declaration name="y" type="DerivativeStructure[]" line="367"/>
                    <scope line="368">
                        <scope line="370"/>
                    </scope>
                    <declaration name="sum" type="DerivativeStructure" line="375"/>
                    <scope line="376">
                        <declaration name="ri" type="DerivativeStructure" line="377"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>