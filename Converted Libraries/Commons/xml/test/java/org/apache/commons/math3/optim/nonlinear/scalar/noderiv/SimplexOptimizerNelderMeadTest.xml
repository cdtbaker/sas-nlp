<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.SimpleBounds"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="SimplexOptimizerNelderMeadTest" line="18">
            <method name="testBoundsUnsupported" type="void" line="19">
                <declaration name="optimizer" type="SimplexOptimizer" line="20"/>
                <declaration name="fourExtrema" type="FourExtrema" line="21"/>
            </method>
            <method name="testMinimize1" type="void" line="24">
                <declaration name="optimizer" type="SimplexOptimizer" line="25"/>
                <declaration name="fourExtrema" type="FourExtrema" line="26"/>
                <declaration name="optimum" type="PointValuePair" line="27"/>
            </method>
            <method name="testMinimize2" type="void" line="35">
                <declaration name="optimizer" type="SimplexOptimizer" line="36"/>
                <declaration name="fourExtrema" type="FourExtrema" line="37"/>
                <declaration name="optimum" type="PointValuePair" line="38"/>
            </method>
            <method name="testMaximize1" type="void" line="46">
                <declaration name="optimizer" type="SimplexOptimizer" line="47"/>
                <declaration name="fourExtrema" type="FourExtrema" line="48"/>
                <declaration name="optimum" type="PointValuePair" line="49"/>
            </method>
            <method name="testMaximize2" type="void" line="57">
                <declaration name="optimizer" type="SimplexOptimizer" line="58"/>
                <declaration name="fourExtrema" type="FourExtrema" line="59"/>
                <declaration name="optimum" type="PointValuePair" line="60"/>
            </method>
            <method name="testRosenbrock" type="void" line="68">
                <declaration name="rosenbrock" type="Rosenbrock" line="69"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="70"/>
                <declaration name="optimum" type="PointValuePair" line="71"/>
            </method>
            <method name="testPowell" type="void" line="77">
                <declaration name="powell" type="Powell" line="78"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="79"/>
                <declaration name="optimum" type="PointValuePair" line="80"/>
            </method>
            <method name="testLeastSquares1" type="void" line="86">
                <declaration name="factors" type="RealMatrix" line="87"/>
                <anonymous_class line="88">
                    <method name="value" type="double[]" line="89">
                        <params>
                            <param name="variables" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="ls" type="LeastSquaresConverter" line="88"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="94"/>
                <declaration name="optimum" type="PointValuePair" line="95"/>
            </method>
            <method name="testLeastSquares2" type="void" line="102">
                <declaration name="factors" type="RealMatrix" line="103"/>
                <anonymous_class line="104">
                    <method name="value" type="double[]" line="105">
                        <params>
                            <param name="variables" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="ls" type="LeastSquaresConverter" line="104"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="110"/>
                <declaration name="optimum" type="PointValuePair" line="111"/>
            </method>
            <method name="testLeastSquares3" type="void" line="118">
                <declaration name="factors" type="RealMatrix" line="119"/>
                <anonymous_class line="120">
                    <method name="value" type="double[]" line="121">
                        <params>
                            <param name="variables" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="ls" type="LeastSquaresConverter" line="120"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="126"/>
                <declaration name="optimum" type="PointValuePair" line="127"/>
            </method>
            <method name="testMaxIterations" type="void" line="134">
                <declaration name="powell" type="Powell" line="135"/>
                <declaration name="optimizer" type="SimplexOptimizer" line="136"/>
            </method>
            <class name="FourExtrema" line="139">
                <implements interface="MultivariateFunction"/>
                <declaration name="xM" type="double" line="140"/>
                <declaration name="yM" type="double" line="141"/>
                <declaration name="xP" type="double" line="142"/>
                <declaration name="yP" type="double" line="143"/>
                <declaration name="valueXmYm" type="double" line="144"/>
                <declaration name="valueXmYp" type="double" line="145"/>
                <declaration name="valueXpYm" type="double" line="146"/>
                <declaration name="valueXpYp" type="double" line="147"/>
                <method name="value" type="double" line="148">
                    <params>
                        <param name="variables" type="double[]"/>
                    </params>
                    <declaration name="x" type="double" line="149"/>
                    <declaration name="y" type="double" line="150"/>
                </method>
            </class>
            <class name="Rosenbrock" line="154">
                <implements interface="MultivariateFunction"/>
                <declaration name="count" type="int" line="155"/>
                <method name="Rosenbrock" type="constructor" line="156"/>
                <method name="value" type="double" line="159">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="a" type="double" line="161"/>
                    <declaration name="b" type="double" line="162"/>
                </method>
                <method name="getCount" type="int" line="165"/>
            </class>
            <class name="Powell" line="169">
                <implements interface="MultivariateFunction"/>
                <declaration name="count" type="int" line="170"/>
                <method name="Powell" type="constructor" line="171"/>
                <method name="value" type="double" line="174">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="a" type="double" line="176"/>
                    <declaration name="b" type="double" line="177"/>
                    <declaration name="c" type="double" line="178"/>
                    <declaration name="d" type="double" line="179"/>
                </method>
                <method name="getCount" type="int" line="182"/>
            </class>
        </class>
    </source>