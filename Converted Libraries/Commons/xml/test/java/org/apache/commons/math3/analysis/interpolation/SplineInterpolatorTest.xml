<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="SplineInterpolatorTest" line="30">
            <javadoc line="30">
                Test the SplineInterpolator.                
                <version>
                    $Id: SplineInterpolatorTest.java 1364030 2012-07-21 01:10:04Z erans $                    
                </version>
            </javadoc>
            <declaration name="knotTolerance" type="double" line="37"/>
            <javadoc line="37">
                error tolerance for spline interpolator value at knot points                
            </javadoc>
            <declaration name="coefficientTolerance" type="double" line="40"/>
            <javadoc line="40">
                error tolerance for interpolating polynomial coefficients                
            </javadoc>
            <declaration name="interpolationTolerance" type="double" line="43"/>
            <javadoc line="43">
                error tolerance for interpolated values -- high value is from sin test                
            </javadoc>
            <method name="testInterpolateLinearDegenerateTwoSegment" type="void" line="48">
                <comment line="57">
                    Verify coefficients using analytical values                    
                </comment>
                <comment line="64">
                    Check interpolation                    
                </comment>
                <declaration name="x" type="double" line="49"/>
                <declaration name="y" type="double" line="50"/>
                <declaration name="i" type="UnivariateInterpolator" line="51"/>
                <declaration name="f" type="UnivariateFunction" line="52"/>
                <declaration name="polynomials" type="PolynomialFunction" line="57"/>
                <declaration name="target" type="double" line="58"/>
            </method>
            <method name="testInterpolateLinearDegenerateThreeSegment" type="void" line="71">
                <comment line="79">
                    Verify coefficients using analytical values                    
                </comment>
                <comment line="88">
                    Check interpolation                    
                </comment>
                <declaration name="x" type="double" line="72"/>
                <declaration name="y" type="double" line="73"/>
                <declaration name="i" type="UnivariateInterpolator" line="74"/>
                <declaration name="f" type="UnivariateFunction" line="75"/>
                <declaration name="polynomials" type="PolynomialFunction" line="79"/>
                <declaration name="target" type="double" line="80"/>
            </method>
            <method name="testInterpolateLinear" type="void" line="94">
                <comment line="103">
                    Verify coefficients using analytical values                    
                </comment>
                <declaration name="x" type="double" line="95"/>
                <declaration name="y" type="double" line="96"/>
                <declaration name="i" type="UnivariateInterpolator" line="97"/>
                <declaration name="f" type="UnivariateFunction" line="98"/>
                <declaration name="polynomials" type="PolynomialFunction" line="103"/>
                <declaration name="target" type="double" line="104"/>
            </method>
            <method name="testInterpolateSin" type="void" line="111">
                <comment line="130">
                    Check coefficients against values computed using R (version 1.8.1, Red Hat Linux 9)
                    
                     To replicate in R:
                         x[1] &lt;- 0
                         x[2] &lt;- pi  6, etc, same for y[] (could use y &lt;- scan() for y values)
                         g &lt;- splinefun(x, y, &quot;natural&quot;)
                         splinecoef &lt;- eval(expression(z), envir = environment(g))
                         print(splinecoef)                    
                </comment>
                <comment line="157">
                    Check interpolation                    
                </comment>
                <declaration name="x" type="double" line="112"/>
                <declaration name="y" type="double" line="123"/>
                <declaration name="i" type="UnivariateInterpolator" line="124"/>
                <declaration name="f" type="UnivariateFunction" line="125"/>
                <declaration name="polynomials" type="PolynomialFunction" line="138"/>
                <declaration name="target" type="double" line="139"/>
            </method>
            <method name="testIllegalArguments" type="void" line="162">
                <comment line="164">
                    Data set arrays of different size.                    
                </comment>
                <comment line="172">
                    Expected.                    
                </comment>
                <comment line="174">
                    X values not sorted.                    
                </comment>
                <comment line="181">
                    Expected.                    
                </comment>
                <comment line="183">
                    Not enough data to interpolate.                    
                </comment>
                <comment line="190">
                    Expected.                    
                </comment>
                <declaration name="i" type="UnivariateInterpolator" line="164"/>
                <scope line="165">
                    <declaration name="xval" type="double" line="166"/>
                    <declaration name="yval" type="double" line="167"/>
                </scope>
                <scope line="170"/>
                <scope line="174">
                    <declaration name="xval" type="double" line="175"/>
                    <declaration name="yval" type="double" line="176"/>
                </scope>
                <scope line="179"/>
                <scope line="183">
                    <declaration name="xval" type="double" line="184"/>
                    <declaration name="yval" type="double" line="185"/>
                </scope>
                <scope line="188"/>
            </method>
            <javadoc line="193">
                verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.                
            </javadoc>
            <method name="verifyInterpolation" type="void" line="197">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="198"/>
            </method>
            <javadoc line="203">
                Verifies that interpolating polynomials satisfy consistency requirement:
                  adjacent polynomials must agree through two derivatives at knot points                
            </javadoc>
            <method name="verifyConsistency" type="void" line="208">
                <params>
                    <param name="f" type="PolynomialSplineFunction"/>
                    <param name="x" type="double"/>
                </params>
                <comment line="212">
                    evaluate polynomials and derivatives at x[i + 1]                    
                </comment>
                <declaration name="polynomials" type="PolynomialFunction" line="209"/>
                <scope line="210"/>
            </method>
        </class>
    </source>