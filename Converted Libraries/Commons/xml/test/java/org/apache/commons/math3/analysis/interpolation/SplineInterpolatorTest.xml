<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunction"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="SplineInterpolatorTest" line="12">
            <javadoc line="12">
                Test the SplineInterpolator.                
                <version>
                    $Id: SplineInterpolatorTest.java 1364030 2012-07-21 01:10:04Z erans $                    
                </version>
            </javadoc>
            <declaration name="knotTolerance" type="double" line="17"/>
            <javadoc line="17">
                error tolerance for spline interpolator value at knot points                
            </javadoc>
            <declaration name="coefficientTolerance" type="double" line="21"/>
            <javadoc line="21">
                error tolerance for interpolating polynomial coefficients                
            </javadoc>
            <declaration name="interpolationTolerance" type="double" line="25"/>
            <javadoc line="25">
                error tolerance for interpolated values -- high value is from sin test                
            </javadoc>
            <method name="testInterpolateLinearDegenerateTwoSegment" type="void" line="29">
                <declaration name="x" type="double" line="30"/>
                <declaration name="y" type="double" line="31"/>
                <declaration name="i" type="UnivariateInterpolator" line="32"/>
                <declaration name="f" type="UnivariateFunction" line="33"/>
                <declaration name="polynomials" type="PolynomialFunction" line="36"/>
                <declaration name="target" type="double" line="37"/>
            </method>
            <method name="testInterpolateLinearDegenerateThreeSegment" type="void" line="45">
                <declaration name="x" type="double" line="46"/>
                <declaration name="y" type="double" line="47"/>
                <declaration name="i" type="UnivariateInterpolator" line="48"/>
                <declaration name="f" type="UnivariateFunction" line="49"/>
                <declaration name="polynomials" type="PolynomialFunction" line="51"/>
                <declaration name="target" type="double" line="52"/>
            </method>
            <method name="testInterpolateLinear" type="void" line="62">
                <declaration name="x" type="double" line="63"/>
                <declaration name="y" type="double" line="64"/>
                <declaration name="i" type="UnivariateInterpolator" line="65"/>
                <declaration name="f" type="UnivariateFunction" line="66"/>
                <declaration name="polynomials" type="PolynomialFunction" line="69"/>
                <declaration name="target" type="double" line="70"/>
            </method>
            <method name="testInterpolateSin" type="void" line="75">
                <declaration name="x" type="double" line="76"/>
                <declaration name="y" type="double" line="77"/>
                <declaration name="i" type="UnivariateInterpolator" line="78"/>
                <declaration name="f" type="UnivariateFunction" line="79"/>
                <declaration name="polynomials" type="PolynomialFunction" line="82"/>
                <declaration name="target" type="double" line="83"/>
            </method>
            <method name="testIllegalArguments" type="void" line="102">
                <declaration name="i" type="UnivariateInterpolator" line="103"/>
                <scope line="104">
                    <declaration name="xval" type="double" line="105"/>
                    <declaration name="yval" type="double" line="106"/>
                </scope>
                <scope line="110"/>
                <scope line="112">
                    <declaration name="xval" type="double" line="113"/>
                    <declaration name="yval" type="double" line="114"/>
                </scope>
                <scope line="118"/>
                <scope line="120">
                    <declaration name="xval" type="double" line="121"/>
                    <declaration name="yval" type="double" line="122"/>
                </scope>
                <scope line="126"/>
            </method>
            <javadoc line="129">
                verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.                
            </javadoc>
            <method name="verifyInterpolation" type="void" line="132">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="133"/>
            </method>
            <javadoc line="137">
                Verifies that interpolating polynomials satisfy consistency requirement:
                  adjacent polynomials must agree through two derivatives at knot points                
            </javadoc>
            <method name="verifyConsistency" type="void" line="141">
                <params>
                    <param name="f" type="PolynomialSplineFunction"/>
                    <param name="x" type="double"/>
                </params>
                <declaration name="polynomials" type="PolynomialFunction" line="142"/>
                <scope line="143"/>
            </method>
        </class>
    </source>