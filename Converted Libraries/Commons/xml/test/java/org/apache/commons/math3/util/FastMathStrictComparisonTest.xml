<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.Type"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.runner.RunWith"/>
        <import package="org.junit.runners.Parameterized"/>
        <import package="org.junit.runners.Parameterized.Parameters"/>
        <class name="FastMathStrictComparisonTest" line="33">
            <comment line="46">
                Values which often need special handling                
            </comment>
            <javadoc line="33">
                Test to compare FastMath results against StrictMath results for boundary values.
                  &lt;p&gt;
                  Running all tests independently: &lt;br/&gt;{@code mvn test -Dtest=FastMathStrictComparisonTest}&lt;br/&gt;
                  or just run tests against a single method (e.g. scalb):&lt;br/&gt;{@code mvn test -Dtest=FastMathStrictComparisonTest -DargLine=&quot;-DtestMethod=scalb&quot;}                
            </javadoc>
            <declaration name="DOUBLE_SPECIAL_VALUES" type="Double[]" line="46"/>
            <declaration name="FLOAT_SPECIAL_VALUES" type="Float[]" line="57"/>
            <declaration name="LONG_SPECIAL_VALUES" type="Object[]" line="65"/>
            <declaration name="INT_SPECIAL_VALUES" type="Object[]" line="70"/>
            <declaration name="mathMethod" type="Method" line="75"/>
            <declaration name="fastMethod" type="Method" line="76"/>
            <declaration name="types" type="Type[]" line="77"/>
            <declaration name="valueArrays" type="Object[][]" line="78"/>
            <method name="FastMathStrictComparisonTest" type="constructor" line="80">
                <params>
                    <param name="m" type="Method"/>
                    <param name="f" type="Method"/>
                    <param name="types" type="Type[]"/>
                    <param name="data" type="Object[][]"/>
                </params>
            </method>
            <method name="test1" type="void" line="88"/>
            <method name="isNumber" type="boolean" line="91">
                <params>
                    <param name="d" type="Double"/>
                </params>
            </method>
            <method name="isNumber" type="boolean" line="95">
                <params>
                    <param name="f" type="Float"/>
                </params>
            </method>
            <method name="reportFailedResults" type="void" line="99">
                <params>
                    <param name="mathMethod" type="Method"/>
                    <param name="params" type="Object[]"/>
                    <param name="expected" type="Object"/>
                    <param name="actual" type="Object"/>
                    <param name="entries" type="int[]"/>
                </params>
                <comment line="108">
                    show difference as hex                    
                </comment>
                <comment line="112">
                    Not 100% sure off-by-one errors are allowed everywhere, so only allow for these methods                    
                </comment>
                <comment line="122">
                    show difference as hex                    
                </comment>
                <declaration name="methodName" type="String" line="100"/>
                <declaration name="format" type="String" line="101"/>
                <declaration name="actL" type="long" line="102"/>
                <declaration name="expL" type="long" line="103"/>
                <scope line="104">
                    <declaration name="exp" type="Double" line="105"/>
                    <declaration name="act" type="Double" line="106"/>
                    <scope line="107">
                        <scope line="110">
                            <scope line="112"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="118">
                    <declaration name="exp" type="Float" line="119"/>
                    <declaration name="act" type="Float" line="120"/>
                    <scope line="121"/>
                </scope>
                <declaration name="sb" type="StringBuilder" line="127"/>
                <declaration name="sep" type="String" line="132"/>
                <scope line="133"/>
                <scope line="139"/>
                <scope line="141"/>
                <scope line="145"/>
                <scope line="147"/>
                <declaration name="message" type="String" line="152"/>
                <declaration name="fatal" type="boolean" line="153"/>
                <scope line="154"/>
                <scope line="156"/>
            </method>
            <method name="callMethods" type="void" line="163">
                <params>
                    <param name="mathMethod" type="Method"/>
                    <param name="fastMethod" type="Method"/>
                    <param name="params" type="Object[]"/>
                    <param name="entries" type="int[]"/>
                </params>
                <scope line="164">
                    <declaration name="expected" type="Object" line="165"/>
                    <declaration name="actual" type="Object" line="166"/>
                    <scope line="167"/>
                </scope>
                <scope line="170"/>
            </method>
            <method name="setupMethodCall" type="void" line="176">
                <params>
                    <param name="mathMethod" type="Method"/>
                    <param name="fastMethod" type="Method"/>
                    <param name="types" type="Type[]"/>
                    <param name="valueArrays" type="Object[][]"/>
                </params>
                <declaration name="params" type="Object[]" line="177"/>
                <declaration name="entry1" type="int" line="178"/>
                <declaration name="entries" type="int[]" line="179"/>
                <scope line="180">
                    <scope line="184">
                        <declaration name="entry2" type="int" line="185"/>
                        <scope line="186"/>
                    </scope>
                    <scope line="192"/>
                </scope>
            </method>
            <method name="data" type="List&lt;Object[]&gt;" line="199">
                <comment line="205">
                    Only test public methods                    
                </comment>
                <comment line="207">
                    Only check methods with at least one parameter                    
                </comment>
                <comment line="209">
                    Get the corresponding FastMath method                    
                </comment>
                <comment line="211">
                    It must be public too                    
                </comment>
                <comment line="232">
                    System.out.println(fastMethod);                    
                </comment>
                <comment line="233">
                    The current implementation runs each method as a separate test.
                     Could be amended to run each value as a separate test                    
                </comment>
                <comment line="238">
                    setupMethodCall(mathMethod, fastMethod, params, data);                    
                </comment>
                <declaration name="singleMethod" type="String" line="200"/>
                <declaration name="list" type="List&amp;lt;Object[]&amp;gt;" line="201"/>
                <scope line="202">
                    <scope line="204">
                        <declaration name="types" type="Type[]" line="205"/>
                        <scope line="206">
                            <scope line="207">
                                <declaration name="fastMethod" type="Method" line="209"/>
                                <scope line="210">
                                    <scope line="211"/>
                                    <declaration name="values" type="Object[][]" line="214"/>
                                    <declaration name="index" type="int" line="215"/>
                                    <scope line="216">
                                        <scope line="217"/>
                                        <scope line="219"/>
                                        <scope line="221"/>
                                        <scope line="223"/>
                                        <scope line="225"/>
                                    </scope>
                                </scope>
                                <scope line="238"/>
                            </scope>
                            <scope line="241"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>