<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3">
        <import package="java.util.Random"/>
        <import package="java.util.concurrent.Callable"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.stat.descriptive.StatisticalSummary"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="PerfTestUtils" line="8">
            <javadoc line="8">
                Simple benchmarking utilities.                
            </javadoc>
            <declaration name="NANO_TO_MILLI" type="double" line="12"/>
            <javadoc line="12">
                Nanoseconds to milliseconds conversion factor ({@value}).                
            </javadoc>
            <declaration name="DEFAULT_REPEAT_CHUNK" type="int" line="16"/>
            <javadoc line="16">
                Default number of code repeat per timed block.                
            </javadoc>
            <declaration name="DEFAULT_REPEAT_STAT" type="int" line="20"/>
            <javadoc line="20">
                Default number of code repeats for computing the average run time.                
            </javadoc>
            <declaration name="rng" type="Random" line="24"/>
            <javadoc line="24">
                RNG.                
            </javadoc>
            <javadoc line="28">
                Timing.                
                <param>
                    repeatChunk Each timing measurement will done done for that
                      number of repeats of the code.                    
                </param>
                <param>
                    repeatStat Timing will be averaged over that number of runs.                    
                </param>
                <param>
                    runGC Call {@code System.gc()} between each timed block. When
                      set to {@code true}, the test will run much slower.                    
                </param>
                <param>
                    methods Codes being timed.                    
                </param>
                <return>
                    for each of the given {@code methods}, a{@link StatisticalSummary} of the average times (in milliseconds)
                      taken by a single call to the {@code call} method (i.e. the time
                      taken by each timed block divided by {@code repeatChunk}).                    
                </return>
            </javadoc>
            <method name="time" type="StatisticalSummary[]" line="40">
                <params>
                    <param name="repeatChunk" type="int"/>
                    <param name="repeatStat" type="int"/>
                    <param name="runGC" type="boolean"/>
                    <param name="methods" type="Callable<Double>"/>
                </params>
                <declaration name="times" type="double[][][]" line="41"/>
                <declaration name="len" type="int" line="42"/>
                <declaration name="stats" type="StatisticalSummary[]" line="43"/>
                <scope line="44">
                    <declaration name="s" type="SummaryStatistics" line="45"/>
                    <scope line="46"/>
                </scope>
            </method>
            <javadoc line="53">
                Timing.                
                <param>
                    repeatChunk Each timing measurement will done done for that
                      number of repeats of the code.                    
                </param>
                <param>
                    repeatStat Timing will be averaged over that number of runs.                    
                </param>
                <param>
                    runGC Call {@code System.gc()} between each timed block. When
                      set to {@code true}, the test will run much slower.                    
                </param>
                <param>
                    methods Codes being timed.                    
                </param>
                <return>
                    for each of the given {@code methods} (first dimension), and
                      each of the {@code repeatStat} runs (second dimension):
                      <ul>
                      <li>
                      the average time (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
                      by {@code repeatChunk})
                      </li>
                      <li>
                      the result returned by the {@code call} method.
                      </li>
                      </ul>                    
                </return>
            </javadoc>
            <method name="timesAndResults" type="double[][][]" line="73">
                <params>
                    <param name="repeatChunk" type="int"/>
                    <param name="repeatStat" type="int"/>
                    <param name="runGC" type="boolean"/>
                    <param name="methods" type="Callable<Double>"/>
                </params>
                <declaration name="numMethods" type="int" line="74"/>
                <declaration name="timesAndResults" type="double[][][]" line="75"/>
                <scope line="76">
                    <scope line="77">
                        <scope line="78">
                            <scope line="79"/>
                            <declaration name="r" type="Callable&lt;Double&gt;" line="82"/>
                            <declaration name="result" type="double[]" line="83"/>
                            <declaration name="start" type="long" line="84"/>
                            <scope line="85"/>
                            <declaration name="stop" type="long" line="88"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="94"/>
                <declaration name="normFactor" type="double" line="97"/>
                <scope line="98">
                    <scope line="99"/>
                </scope>
            </method>
            <javadoc line="105">
                Timing and report (to standard output) the average time and standard
                  deviation of a single call.
                  The timing is performed by calling the{@link #time(int,int,boolean,Callable[]) time} method.                
                <param>
                    title Title of the test (for the report).                    
                </param>
                <param>
                    repeatChunk Each timing measurement will done done for that
                      number of repeats of the code.                    
                </param>
                <param>
                    repeatStat Timing will be averaged over that number of runs.                    
                </param>
                <param>
                    runGC Call {@code System.gc()} between each timed block. When
                      set to {@code true}, the test will run much slower.                    
                </param>
                <param>
                    methods Codes being timed.                    
                </param>
                <return>
                    for each of the given {@code methods}, a statistics of the
                      average times (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
                      by {@code repeatChunk}).                    
                </return>
            </javadoc>
            <method name="timeAndReport" type="StatisticalSummary[]" line="120">
                <params>
                    <param name="title" type="String"/>
                    <param name="repeatChunk" type="int"/>
                    <param name="repeatStat" type="int"/>
                    <param name="runGC" type="boolean"/>
                    <param name="methods" type="RunTest"/>
                </params>
                <declaration name="hFormat" type="String" line="121"/>
                <declaration name="nameLength" type="int" line="122"/>
                <scope line="123">
                    <declaration name="len" type="int" line="124"/>
                    <scope line="125"/>
                </scope>
                <declaration name="nameLengthFormat" type="String" line="129"/>
                <declaration name="cFormat" type="String" line="130"/>
                <declaration name="format" type="String" line="131"/>
                <declaration name="time" type="StatisticalSummary[]" line="134"/>
                <declaration name="refSum" type="double" line="135"/>
                <scope line="136">
                    <declaration name="s" type="StatisticalSummary" line="137"/>
                    <declaration name="sum" type="double" line="138"/>
                </scope>
            </method>
            <javadoc line="143">
                Timing and report (to standard output).
                  This method calls {@link #timeAndReport(String,int,int,boolean,RunTest[])timeAndReport(title, 1000, 10000, false, methods)}.                
                <param>
                    title Title of the test (for the report).                    
                </param>
                <param>
                    methods Codes being timed.                    
                </param>
                <return>
                    for each of the given {@code methods}, a statistics of the
                      average times (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
                      by {@code repeatChunk}).                    
                </return>
            </javadoc>
            <method name="timeAndReport" type="StatisticalSummary[]" line="152">
                <params>
                    <param name="title" type="String"/>
                    <param name="methods" type="RunTest"/>
                </params>
            </method>
            <class name="RunTest" line="155">
                <implements interface="Callable">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </implements>
                <javadoc line="155">
                    Utility class for storing a test label.                    
                </javadoc>
                <declaration name="name" type="String" line="159"/>
                <javadoc line="160">
                    @param name Test name.                    
                </javadoc>
                <method name="RunTest" type="constructor" line="163">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="166">
                    @return the name of this test.                    
                </javadoc>
                <method name="getName" type="String" line="169"/>
                <method name="call" type="Double" line="172"/>
                <javadoc line="172">
                    {@inheritDoc}                    
                </javadoc>
            </class>
        </class>
    </source>