<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3">
        <import package="java.util.Random"/>
        <import package="java.util.concurrent.Callable"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.stat.descriptive.StatisticalSummary"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="PerfTestUtils" line="26">
            <javadoc line="26">
                Simple benchmarking utilities.                
            </javadoc>
            <declaration name="NANO_TO_MILLI" type="double" line="30"/>
            <javadoc line="30">
                Nanoseconds to milliseconds conversion factor ({@value}).                
            </javadoc>
            <declaration name="DEFAULT_REPEAT_CHUNK" type="int" line="32"/>
            <javadoc line="32">
                Default number of code repeat per timed block.                
            </javadoc>
            <declaration name="DEFAULT_REPEAT_STAT" type="int" line="34"/>
            <javadoc line="34">
                Default number of code repeats for computing the average run time.                
            </javadoc>
            <declaration name="rng" type="Random" line="36"/>
            <javadoc line="36">
                RNG.                
            </javadoc>
            <javadoc line="39">
                Timing.                
                <param>
                    repeatChunk Each timing measurement will done done for that
                      number of repeats of the code.                    
                </param>
                <param>
                    repeatStat Timing will be averaged over that number of runs.                    
                </param>
                <param>
                    runGC Call {@code System.gc()} between each timed block. When
                      set to {@code true}, the test will run much slower.                    
                </param>
                <param>
                    methods Codes being timed.                    
                </param>
                <return>
                    for each of the given {@code methods}, a{@link StatisticalSummary} of the average times (in milliseconds)
                      taken by a single call to the {@code call} method (i.e. the time
                      taken by each timed block divided by {@code repeatChunk}).                    
                </return>
            </javadoc>
            <method name="time" type="StatisticalSummary[]" line="56">
                <params>
                    <param name="repeatChunk" type="int"/>
                    <param name="repeatStat" type="int"/>
                    <param name="runGC" type="boolean"/>
                    <param name="methods" type="Callable<Double>"/>
                </params>
                <declaration name="times" type="double[][][]" line="57"/>
                <declaration name="len" type="int" line="62"/>
                <declaration name="stats" type="StatisticalSummary[]" line="63"/>
                <scope line="64">
                    <declaration name="s" type="SummaryStatistics" line="65"/>
                    <scope line="66"/>
                </scope>
            </method>
            <javadoc line="75">
                Timing.                
                <param>
                    repeatChunk Each timing measurement will done done for that
                      number of repeats of the code.                    
                </param>
                <param>
                    repeatStat Timing will be averaged over that number of runs.                    
                </param>
                <param>
                    runGC Call {@code System.gc()} between each timed block. When
                      set to {@code true}, the test will run much slower.                    
                </param>
                <param>
                    methods Codes being timed.                    
                </param>
                <return>
                    for each of the given {@code methods} (first dimension), and
                      each of the {@code repeatStat} runs (second dimension):
                      &lt;ul&gt;
                      &lt;li&gt;
                      the average time (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
                      by {@code repeatChunk})
                      &lt;/li&gt;
                      &lt;li&gt;
                      the result returned by the {@code call} method.
                      &lt;/li&gt;
                      &lt;/ul&gt;                    
                </return>
            </javadoc>
            <method name="timesAndResults" type="double[][][]" line="100">
                <params>
                    <param name="repeatChunk" type="int"/>
                    <param name="repeatStat" type="int"/>
                    <param name="runGC" type="boolean"/>
                    <param name="methods" type="Callable<Double>"/>
                </params>
                <comment line="109">
                    Try to perform GC outside the timed block.                    
                </comment>
                <comment line="116">
                    Timed block.                    
                </comment>
                <comment line="123">
                    Collect run time.                    
                </comment>
                <comment line="125">
                    Keep track of a randomly selected result.                    
                </comment>
                <comment line="130">
                    Abort benchmarking if codes throw exceptions.                    
                </comment>
                <declaration name="numMethods" type="int" line="101"/>
                <declaration name="timesAndResults" type="double[][][]" line="102"/>
                <scope line="104">
                    <scope line="105">
                        <scope line="106">
                            <scope line="107"/>
                            <declaration name="r" type="Callable&lt;Double&gt;" line="112"/>
                            <declaration name="result" type="double[]" line="113"/>
                            <declaration name="start" type="long" line="116"/>
                            <scope line="117"/>
                            <declaration name="stop" type="long" line="120"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="128"/>
                <declaration name="normFactor" type="double" line="133"/>
                <scope line="134">
                    <scope line="135"/>
                </scope>
            </method>
            <javadoc line="143">
                Timing and report (to standard output) the average time and standard
                  deviation of a single call.
                  The timing is performed by calling the{@link #time(int,int,boolean,Callable[]) time} method.                
                <param>
                    title Title of the test (for the report).                    
                </param>
                <param>
                    repeatChunk Each timing measurement will done done for that
                      number of repeats of the code.                    
                </param>
                <param>
                    repeatStat Timing will be averaged over that number of runs.                    
                </param>
                <param>
                    runGC Call {@code System.gc()} between each timed block. When
                      set to {@code true}, the test will run much slower.                    
                </param>
                <param>
                    methods Codes being timed.                    
                </param>
                <return>
                    for each of the given {@code methods}, a statistics of the
                      average times (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
                      by {@code repeatChunk}).                    
                </return>
            </javadoc>
            <method name="timeAndReport" type="StatisticalSummary[]" line="165">
                <params>
                    <param name="title" type="String"/>
                    <param name="repeatChunk" type="int"/>
                    <param name="repeatStat" type="int"/>
                    <param name="runGC" type="boolean"/>
                    <param name="methods" type="RunTest"/>
                </params>
                <comment line="167">
                    Header format.                    
                </comment>
                <comment line="170">
                    Width of the longest name.                    
                </comment>
                <comment line="180">
                    Column format.                    
                </comment>
                <comment line="182">
                    Result format.                    
                </comment>
                <declaration name="hFormat" type="String" line="167"/>
                <declaration name="nameLength" type="int" line="170"/>
                <scope line="171">
                    <declaration name="len" type="int" line="172"/>
                    <scope line="173"/>
                </scope>
                <declaration name="nameLengthFormat" type="String" line="177"/>
                <declaration name="cFormat" type="String" line="180"/>
                <declaration name="format" type="String" line="182"/>
                <declaration name="time" type="StatisticalSummary[]" line="195"/>
                <declaration name="refSum" type="double" line="199"/>
                <scope line="200">
                    <declaration name="s" type="StatisticalSummary" line="201"/>
                    <declaration name="sum" type="double" line="202"/>
                </scope>
            </method>
            <javadoc line="215">
                Timing and report (to standard output).
                  This method calls {@link #timeAndReport(String,int,int,boolean,RunTest[])timeAndReport(title, 1000, 10000, false, methods)}.                
                <param>
                    title Title of the test (for the report).                    
                </param>
                <param>
                    methods Codes being timed.                    
                </param>
                <return>
                    for each of the given {@code methods}, a statistics of the
                      average times (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
                      by {@code repeatChunk}).                    
                </return>
            </javadoc>
            <method name="timeAndReport" type="StatisticalSummary[]" line="228">
                <params>
                    <param name="title" type="String"/>
                    <param name="methods" type="RunTest"/>
                </params>
            </method>
            <class name="RunTest" line="236">
                <implements interface="Callable">
                    <type_params>
                        <type_param name="Double"/>
                    </type_params>
                </implements>
                <javadoc line="236">
                    Utility class for storing a test label.                    
                </javadoc>
                <declaration name="name" type="String" line="240"/>
                <javadoc line="242">
                    @param name Test name.                    
                </javadoc>
                <method name="RunTest" type="constructor" line="245">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="249">
                    @return the name of this test.                    
                </javadoc>
                <method name="getName" type="String" line="252"/>
                <method name="call" type="Double" line="256"/>
                <javadoc line="256">
                    {@inheritDoc}                    
                </javadoc>
            </class>
        </class>
    </source>