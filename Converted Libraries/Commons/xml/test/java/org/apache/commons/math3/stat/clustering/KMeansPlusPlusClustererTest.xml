<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="KMeansPlusPlusClustererTest" line="10">
            <method name="dimension2" type="void" line="11">
                <declaration name="transformer" type="KMeansPlusPlusClusterer&lt;EuclideanIntegerPoint&gt;" line="12"/>
                <declaration name="points" type="EuclideanIntegerPoint[]" line="13"/>
                <declaration name="clusters" type="List&lt;Cluster&lt;EuclideanIntegerPoint&gt;&gt;" line="14"/>
                <declaration name="cluster1Found" type="boolean" line="16"/>
                <declaration name="cluster2Found" type="boolean" line="17"/>
                <declaration name="cluster3Found" type="boolean" line="18"/>
                <scope line="19">
                    <declaration name="center" type="int[]" line="20"/>
                    <scope line="21"/>
                    <scope line="27"/>
                    <scope line="33"/>
                </scope>
            </method>
            <javadoc line="44">
                JIRA: MATH-305
                  Two points, one cluster, one iteration                
            </javadoc>
            <method name="testPerformClusterAnalysisDegenerate" type="void" line="48">
                <declaration name="transformer" type="KMeansPlusPlusClusterer&lt;EuclideanIntegerPoint&gt;" line="49"/>
                <declaration name="points" type="EuclideanIntegerPoint[]" line="50"/>
                <declaration name="clusters" type="List&lt;Cluster&lt;EuclideanIntegerPoint&gt;&gt;" line="51"/>
                <declaration name="pt1" type="EuclideanIntegerPoint" line="54"/>
                <declaration name="pt2" type="EuclideanIntegerPoint" line="55"/>
            </method>
            <method name="testCertainSpace" type="void" line="59">
                <declaration name="strategies" type="KMeansPlusPlusClusterer.EmptyClusterStrategy[]" line="60"/>
                <scope line="61">
                    <declaration name="transformer" type="KMeansPlusPlusClusterer&lt;EuclideanIntegerPoint&gt;" line="62"/>
                    <declaration name="numberOfVariables" type="int" line="63"/>
                    <declaration name="position1" type="int" line="64"/>
                    <declaration name="position2" type="int" line="65"/>
                    <declaration name="position3" type="int" line="66"/>
                    <declaration name="position4" type="int" line="67"/>
                    <declaration name="multiplier" type="int" line="68"/>
                    <declaration name="breakingPoints" type="EuclideanIntegerPoint[]" line="69"/>
                    <scope line="70">
                        <declaration name="points" type="int" line="71"/>
                        <scope line="72"/>
                        <declaration name="euclideanIntegerPoint" type="EuclideanIntegerPoint" line="75"/>
                    </scope>
                    <scope line="82">
                        <declaration name="clusters" type="List&lt;Cluster&lt;EuclideanIntegerPoint&gt;&gt;" line="83"/>
                        <declaration name="sum" type="int" line="85"/>
                        <scope line="86"/>
                    </scope>
                </scope>
            </method>
            <class name="CloseIntegerPoint" line="93">
                <implements interface="Clusterable">
                    <type_params>
                        <type_param name="CloseIntegerPoint"/>
                    </type_params>
                </implements>
                <javadoc line="93">
                    A helper class for testSmallDistances(). This class is similar to EuclideanIntegerPoint, but
                      it defines a different distanceFrom() method that tends to return distances less than 1.                    
                </javadoc>
                <method name="CloseIntegerPoint" type="constructor" line="98">
                    <params>
                        <param name="point" type="EuclideanIntegerPoint"/>
                    </params>
                </method>
                <method name="distanceFrom" type="double" line="101">
                    <params>
                        <param name="p" type="CloseIntegerPoint"/>
                    </params>
                </method>
                <method name="centroidOf" type="CloseIntegerPoint" line="104">
                    <params>
                        <param name="p" type="Collection<CloseIntegerPoint>"/>
                    </params>
                    <declaration name="euclideanPoints" type="Collection&lt;EuclideanIntegerPoint&gt;" line="105"/>
                    <scope line="106"/>
                </method>
                <method name="equals" type="boolean" line="111">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="112"/>
                    <declaration name="p" type="CloseIntegerPoint" line="115"/>
                </method>
                <method name="hashCode" type="int" line="118"/>
                <declaration name="euclideanPoint" type="EuclideanIntegerPoint" line="121"/>
            </class>
            <javadoc line="123">
                Test points that are very close together. See issue MATH-546.                
            </javadoc>
            <method name="testSmallDistances" type="void" line="126">
                <declaration name="repeatedArray" type="int[]" line="127"/>
                <declaration name="uniqueArray" type="int[]" line="128"/>
                <declaration name="repeatedPoint" type="CloseIntegerPoint" line="129"/>
                <declaration name="uniquePoint" type="CloseIntegerPoint" line="130"/>
                <declaration name="points" type="Collection&lt;CloseIntegerPoint&gt;" line="131"/>
                <declaration name="NUM_REPEATED_POINTS" type="int" line="132"/>
                <scope line="133"/>
                <declaration name="RANDOM_SEED" type="long" line="137"/>
                <declaration name="NUM_CLUSTERS" type="int" line="138"/>
                <declaration name="NUM_ITERATIONS" type="int" line="139"/>
                <declaration name="clusterer" type="KMeansPlusPlusClusterer&lt;CloseIntegerPoint&gt;" line="140"/>
                <declaration name="clusters" type="List&lt;Cluster&lt;CloseIntegerPoint&gt;&gt;" line="141"/>
                <declaration name="uniquePointIsCenter" type="boolean" line="142"/>
                <scope line="143">
                    <scope line="144"/>
                </scope>
            </method>
            <javadoc line="150">
                2 variables cannot be clustered into 3 clusters. See issue MATH-436.                
            </javadoc>
            <method name="testPerformClusterAnalysisToManyClusters" type="void" line="153">
                <declaration name="transformer" type="KMeansPlusPlusClusterer&lt;EuclideanIntegerPoint&gt;" line="154"/>
                <declaration name="points" type="EuclideanIntegerPoint[]" line="155"/>
            </method>
        </class>
    </source>