<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.complex">
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="java.util.List"/>
        <class name="ComplexTest" line="8">
            <javadoc line="8">
                @version $Id: ComplexTest.java 1459927 2013-03-22 18:55:58Z luc $                
            </javadoc>
            <declaration name="inf" type="double" line="12"/>
            <declaration name="neginf" type="double" line="13"/>
            <declaration name="nan" type="double" line="14"/>
            <declaration name="pi" type="double" line="15"/>
            <declaration name="oneInf" type="Complex" line="16"/>
            <declaration name="oneNegInf" type="Complex" line="17"/>
            <declaration name="infOne" type="Complex" line="18"/>
            <declaration name="infZero" type="Complex" line="19"/>
            <declaration name="infNaN" type="Complex" line="20"/>
            <declaration name="infNegInf" type="Complex" line="21"/>
            <declaration name="infInf" type="Complex" line="22"/>
            <declaration name="negInfInf" type="Complex" line="23"/>
            <declaration name="negInfZero" type="Complex" line="24"/>
            <declaration name="negInfOne" type="Complex" line="25"/>
            <declaration name="negInfNaN" type="Complex" line="26"/>
            <declaration name="negInfNegInf" type="Complex" line="27"/>
            <declaration name="oneNaN" type="Complex" line="28"/>
            <declaration name="zeroInf" type="Complex" line="29"/>
            <declaration name="zeroNaN" type="Complex" line="30"/>
            <declaration name="nanInf" type="Complex" line="31"/>
            <declaration name="nanNegInf" type="Complex" line="32"/>
            <declaration name="nanZero" type="Complex" line="33"/>
            <method name="testConstructor" type="void" line="34">
                <declaration name="z" type="Complex" line="35"/>
            </method>
            <method name="testConstructorNaN" type="void" line="39">
                <declaration name="z" type="Complex" line="40"/>
            </method>
            <method name="testAbs" type="void" line="47">
                <declaration name="z" type="Complex" line="48"/>
            </method>
            <method name="testAbsNaN" type="void" line="51">
                <declaration name="z" type="Complex" line="53"/>
            </method>
            <method name="testAbsInfinite" type="void" line="56">
                <declaration name="z" type="Complex" line="57"/>
            </method>
            <method name="testAdd" type="void" line="64">
                <declaration name="x" type="Complex" line="65"/>
                <declaration name="y" type="Complex" line="66"/>
                <declaration name="z" type="Complex" line="67"/>
            </method>
            <method name="testAddNaN" type="void" line="71">
                <declaration name="x" type="Complex" line="72"/>
                <declaration name="z" type="Complex" line="73"/>
                <declaration name="w" type="Complex" line="76"/>
            </method>
            <method name="testAddInf" type="void" line="79">
                <declaration name="x" type="Complex" line="80"/>
                <declaration name="z" type="Complex" line="81"/>
                <declaration name="w" type="Complex" line="82"/>
            </method>
            <method name="testScalarAdd" type="void" line="88">
                <declaration name="x" type="Complex" line="89"/>
                <declaration name="yDouble" type="double" line="90"/>
                <declaration name="yComplex" type="Complex" line="91"/>
            </method>
            <method name="testScalarAddNaN" type="void" line="94">
                <declaration name="x" type="Complex" line="95"/>
                <declaration name="yDouble" type="double" line="96"/>
                <declaration name="yComplex" type="Complex" line="97"/>
            </method>
            <method name="testScalarAddInf" type="void" line="100">
                <declaration name="x" type="Complex" line="101"/>
                <declaration name="yDouble" type="double" line="102"/>
                <declaration name="yComplex" type="Complex" line="103"/>
            </method>
            <method name="testConjugate" type="void" line="108">
                <declaration name="x" type="Complex" line="109"/>
                <declaration name="z" type="Complex" line="110"/>
            </method>
            <method name="testConjugateNaN" type="void" line="114">
                <declaration name="z" type="Complex" line="115"/>
            </method>
            <method name="testConjugateInfiinite" type="void" line="118">
                <declaration name="z" type="Complex" line="119"/>
            </method>
            <method name="testDivide" type="void" line="124">
                <declaration name="x" type="Complex" line="125"/>
                <declaration name="y" type="Complex" line="126"/>
                <declaration name="z" type="Complex" line="127"/>
            </method>
            <method name="testDivideReal" type="void" line="131">
                <declaration name="x" type="Complex" line="132"/>
                <declaration name="y" type="Complex" line="133"/>
            </method>
            <method name="testDivideImaginary" type="void" line="136">
                <declaration name="x" type="Complex" line="137"/>
                <declaration name="y" type="Complex" line="138"/>
            </method>
            <method name="testDivideInf" type="void" line="141">
                <declaration name="x" type="Complex" line="142"/>
                <declaration name="w" type="Complex" line="143"/>
                <declaration name="z" type="Complex" line="145"/>
            </method>
            <method name="testDivideZero" type="void" line="157">
                <declaration name="x" type="Complex" line="158"/>
                <declaration name="z" type="Complex" line="159"/>
            </method>
            <method name="testDivideZeroZero" type="void" line="162">
                <declaration name="x" type="Complex" line="163"/>
                <declaration name="z" type="Complex" line="164"/>
            </method>
            <method name="testDivideNaN" type="void" line="167">
                <declaration name="x" type="Complex" line="168"/>
                <declaration name="z" type="Complex" line="169"/>
            </method>
            <method name="testDivideNaNInf" type="void" line="172">
                <declaration name="z" type="Complex" line="173"/>
            </method>
            <method name="testScalarDivide" type="void" line="183">
                <declaration name="x" type="Complex" line="184"/>
                <declaration name="yDouble" type="double" line="185"/>
                <declaration name="yComplex" type="Complex" line="186"/>
            </method>
            <method name="testScalarDivideNaN" type="void" line="189">
                <declaration name="x" type="Complex" line="190"/>
                <declaration name="yDouble" type="double" line="191"/>
                <declaration name="yComplex" type="Complex" line="192"/>
            </method>
            <method name="testScalarDivideInf" type="void" line="195">
                <declaration name="x" type="Complex" line="196"/>
                <declaration name="yDouble" type="double" line="197"/>
                <declaration name="yComplex" type="Complex" line="198"/>
            </method>
            <method name="testScalarDivideZero" type="void" line="206">
                <declaration name="x" type="Complex" line="207"/>
            </method>
            <method name="testReciprocal" type="void" line="210">
                <declaration name="z" type="Complex" line="211"/>
                <declaration name="act" type="Complex" line="212"/>
                <declaration name="expRe" type="double" line="213"/>
                <declaration name="expIm" type="double" line="214"/>
            </method>
            <method name="testReciprocalReal" type="void" line="218">
                <declaration name="z" type="Complex" line="219"/>
            </method>
            <method name="testReciprocalImaginary" type="void" line="222">
                <declaration name="z" type="Complex" line="223"/>
            </method>
            <method name="testReciprocalInf" type="void" line="226">
                <declaration name="z" type="Complex" line="227"/>
            </method>
            <method name="testReciprocalZero" type="void" line="232"/>
            <method name="testReciprocalNaN" type="void" line="235"/>
            <method name="testMultiply" type="void" line="238">
                <declaration name="x" type="Complex" line="239"/>
                <declaration name="y" type="Complex" line="240"/>
                <declaration name="z" type="Complex" line="241"/>
            </method>
            <method name="testMultiplyNaN" type="void" line="245">
                <declaration name="x" type="Complex" line="246"/>
                <declaration name="z" type="Complex" line="247"/>
            </method>
            <method name="testMultiplyInfInf" type="void" line="252"/>
            <method name="testMultiplyNaNInf" type="void" line="255">
                <declaration name="z" type="Complex" line="256"/>
                <declaration name="w" type="Complex" line="257"/>
            </method>
            <method name="testScalarMultiply" type="void" line="272">
                <declaration name="x" type="Complex" line="273"/>
                <declaration name="yDouble" type="double" line="274"/>
                <declaration name="yComplex" type="Complex" line="275"/>
                <declaration name="zInt" type="int" line="277"/>
                <declaration name="zComplex" type="Complex" line="278"/>
            </method>
            <method name="testScalarMultiplyNaN" type="void" line="281">
                <declaration name="x" type="Complex" line="282"/>
                <declaration name="yDouble" type="double" line="283"/>
                <declaration name="yComplex" type="Complex" line="284"/>
            </method>
            <method name="testScalarMultiplyInf" type="void" line="287">
                <declaration name="x" type="Complex" line="288"/>
                <declaration name="yDouble" type="double" line="289"/>
                <declaration name="yComplex" type="Complex" line="290"/>
            </method>
            <method name="testNegate" type="void" line="296">
                <declaration name="x" type="Complex" line="297"/>
                <declaration name="z" type="Complex" line="298"/>
            </method>
            <method name="testNegateNaN" type="void" line="302">
                <declaration name="z" type="Complex" line="303"/>
            </method>
            <method name="testSubtract" type="void" line="306">
                <declaration name="x" type="Complex" line="307"/>
                <declaration name="y" type="Complex" line="308"/>
                <declaration name="z" type="Complex" line="309"/>
            </method>
            <method name="testSubtractNaN" type="void" line="313">
                <declaration name="x" type="Complex" line="314"/>
                <declaration name="z" type="Complex" line="315"/>
                <declaration name="w" type="Complex" line="318"/>
            </method>
            <method name="testSubtractInf" type="void" line="321">
                <declaration name="x" type="Complex" line="322"/>
                <declaration name="z" type="Complex" line="323"/>
                <declaration name="w" type="Complex" line="324"/>
            </method>
            <method name="testScalarSubtract" type="void" line="330">
                <declaration name="x" type="Complex" line="331"/>
                <declaration name="yDouble" type="double" line="332"/>
                <declaration name="yComplex" type="Complex" line="333"/>
            </method>
            <method name="testScalarSubtractNaN" type="void" line="336">
                <declaration name="x" type="Complex" line="337"/>
                <declaration name="yDouble" type="double" line="338"/>
                <declaration name="yComplex" type="Complex" line="339"/>
            </method>
            <method name="testScalarSubtractInf" type="void" line="342">
                <declaration name="x" type="Complex" line="343"/>
                <declaration name="yDouble" type="double" line="344"/>
                <declaration name="yComplex" type="Complex" line="345"/>
            </method>
            <method name="testEqualsNull" type="void" line="350">
                <declaration name="x" type="Complex" line="351"/>
            </method>
            <method name="testEqualsClass" type="void" line="354">
                <declaration name="x" type="Complex" line="355"/>
            </method>
            <method name="testEqualsSame" type="void" line="358">
                <declaration name="x" type="Complex" line="359"/>
            </method>
            <method name="testEqualsTrue" type="void" line="362">
                <declaration name="x" type="Complex" line="363"/>
                <declaration name="y" type="Complex" line="364"/>
            </method>
            <method name="testEqualsRealDifference" type="void" line="367">
                <declaration name="x" type="Complex" line="368"/>
                <declaration name="y" type="Complex" line="369"/>
            </method>
            <method name="testEqualsImaginaryDifference" type="void" line="372">
                <declaration name="x" type="Complex" line="373"/>
                <declaration name="y" type="Complex" line="374"/>
            </method>
            <method name="testEqualsNaN" type="void" line="377">
                <declaration name="realNaN" type="Complex" line="378"/>
                <declaration name="imaginaryNaN" type="Complex" line="379"/>
                <declaration name="complexNaN" type="Complex" line="380"/>
            </method>
            <method name="testHashCode" type="void" line="385">
                <declaration name="x" type="Complex" line="386"/>
                <declaration name="y" type="Complex" line="387"/>
                <declaration name="realNaN" type="Complex" line="391"/>
                <declaration name="imaginaryNaN" type="Complex" line="392"/>
            </method>
            <method name="testAcos" type="void" line="396">
                <declaration name="z" type="Complex" line="397"/>
                <declaration name="expected" type="Complex" line="398"/>
            </method>
            <method name="testAcosInf" type="void" line="402"/>
            <method name="testAcosNaN" type="void" line="412"/>
            <method name="testAsin" type="void" line="415">
                <declaration name="z" type="Complex" line="416"/>
                <declaration name="expected" type="Complex" line="417"/>
            </method>
            <method name="testAsinNaN" type="void" line="420"/>
            <method name="testAsinInf" type="void" line="423"/>
            <method name="testAtan" type="void" line="433">
                <declaration name="z" type="Complex" line="434"/>
                <declaration name="expected" type="Complex" line="435"/>
            </method>
            <method name="testAtanInf" type="void" line="438"/>
            <method name="testAtanI" type="void" line="448"/>
            <method name="testAtanNaN" type="void" line="451"/>
            <method name="testCos" type="void" line="454">
                <declaration name="z" type="Complex" line="455"/>
                <declaration name="expected" type="Complex" line="456"/>
            </method>
            <method name="testCosNaN" type="void" line="459"/>
            <method name="testCosInf" type="void" line="462"/>
            <method name="testCosh" type="void" line="472">
                <declaration name="z" type="Complex" line="473"/>
                <declaration name="expected" type="Complex" line="474"/>
            </method>
            <method name="testCoshNaN" type="void" line="477"/>
            <method name="testCoshInf" type="void" line="480"/>
            <method name="testExp" type="void" line="490">
                <declaration name="z" type="Complex" line="491"/>
                <declaration name="expected" type="Complex" line="492"/>
                <declaration name="iPi" type="Complex" line="495"/>
            </method>
            <method name="testExpNaN" type="void" line="498"/>
            <method name="testExpInf" type="void" line="501"/>
            <method name="testLog" type="void" line="511">
                <declaration name="z" type="Complex" line="512"/>
                <declaration name="expected" type="Complex" line="513"/>
            </method>
            <method name="testLogNaN" type="void" line="516"/>
            <method name="testLogInf" type="void" line="519"/>
            <method name="testLogZero" type="void" line="529"/>
            <method name="testPow" type="void" line="532">
                <declaration name="x" type="Complex" line="533"/>
                <declaration name="y" type="Complex" line="534"/>
                <declaration name="expected" type="Complex" line="535"/>
            </method>
            <method name="testPowNaNBase" type="void" line="538">
                <declaration name="x" type="Complex" line="539"/>
            </method>
            <method name="testPowNaNExponent" type="void" line="542">
                <declaration name="x" type="Complex" line="543"/>
            </method>
            <method name="testPowInf" type="void" line="546"/>
            <method name="testPowZero" type="void" line="570"/>
            <method name="testScalarPow" type="void" line="578">
                <declaration name="x" type="Complex" line="579"/>
                <declaration name="yDouble" type="double" line="580"/>
                <declaration name="yComplex" type="Complex" line="581"/>
            </method>
            <method name="testScalarPowNaNBase" type="void" line="584">
                <declaration name="x" type="Complex" line="585"/>
                <declaration name="yDouble" type="double" line="586"/>
                <declaration name="yComplex" type="Complex" line="587"/>
            </method>
            <method name="testScalarPowNaNExponent" type="void" line="590">
                <declaration name="x" type="Complex" line="591"/>
                <declaration name="yDouble" type="double" line="592"/>
                <declaration name="yComplex" type="Complex" line="593"/>
            </method>
            <method name="testScalarPowInf" type="void" line="596"/>
            <method name="testScalarPowZero" type="void" line="612"/>
            <method name="testpowNull" type="void" line="619"/>
            <method name="testSin" type="void" line="622">
                <declaration name="z" type="Complex" line="623"/>
                <declaration name="expected" type="Complex" line="624"/>
            </method>
            <method name="testSinInf" type="void" line="627"/>
            <method name="testSinNaN" type="void" line="637"/>
            <method name="testSinh" type="void" line="640">
                <declaration name="z" type="Complex" line="641"/>
                <declaration name="expected" type="Complex" line="642"/>
            </method>
            <method name="testSinhNaN" type="void" line="645"/>
            <method name="testSinhInf" type="void" line="648"/>
            <method name="testSqrtRealPositive" type="void" line="658">
                <declaration name="z" type="Complex" line="659"/>
                <declaration name="expected" type="Complex" line="660"/>
            </method>
            <method name="testSqrtRealZero" type="void" line="663">
                <declaration name="z" type="Complex" line="664"/>
                <declaration name="expected" type="Complex" line="665"/>
            </method>
            <method name="testSqrtRealNegative" type="void" line="668">
                <declaration name="z" type="Complex" line="669"/>
                <declaration name="expected" type="Complex" line="670"/>
            </method>
            <method name="testSqrtImaginaryZero" type="void" line="673">
                <declaration name="z" type="Complex" line="674"/>
                <declaration name="expected" type="Complex" line="675"/>
            </method>
            <method name="testSqrtImaginaryNegative" type="void" line="678">
                <declaration name="z" type="Complex" line="679"/>
                <declaration name="expected" type="Complex" line="680"/>
            </method>
            <method name="testSqrtPolar" type="void" line="683">
                <declaration name="r" type="double" line="684"/>
                <scope line="685">
                    <declaration name="theta" type="double" line="687"/>
                    <scope line="688">
                        <declaration name="z" type="Complex" line="690"/>
                        <declaration name="sqrtz" type="Complex" line="691"/>
                    </scope>
                </scope>
            </method>
            <method name="testSqrtNaN" type="void" line="696"/>
            <method name="testSqrtInf" type="void" line="699"/>
            <method name="testSqrt1z" type="void" line="709">
                <declaration name="z" type="Complex" line="710"/>
                <declaration name="expected" type="Complex" line="711"/>
            </method>
            <method name="testSqrt1zNaN" type="void" line="714"/>
            <method name="testTan" type="void" line="717">
                <declaration name="z" type="Complex" line="718"/>
                <declaration name="expected" type="Complex" line="719"/>
                <declaration name="actual" type="Complex" line="721"/>
            </method>
            <method name="testTanNaN" type="void" line="728"/>
            <method name="testTanInf" type="void" line="731"/>
            <method name="testTanCritical" type="void" line="741"/>
            <method name="testTanh" type="void" line="745">
                <declaration name="z" type="Complex" line="746"/>
                <declaration name="expected" type="Complex" line="747"/>
                <declaration name="actual" type="Complex" line="749"/>
            </method>
            <method name="testTanhNaN" type="void" line="756"/>
            <method name="testTanhInf" type="void" line="759"/>
            <method name="testTanhCritical" type="void" line="769"/>
            <javadoc line="772">
                test issue MATH-221                
            </javadoc>
            <method name="testMath221" type="void" line="775"/>
            <javadoc line="778">
                Test: computing &lt;b&gt;third roots&lt;/b&gt; of z.
                  &lt;pre&gt;
                  &lt;code&gt;
                  &lt;b&gt;z = -2 + 2  i&lt;/b&gt;
                  =&gt; z_0 =  1      +          i
                  =&gt; z_1 = -1.3660 + 0.3660  i
                  =&gt; z_2 =  0.3660 - 1.3660  i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testNthRoot_normal_thirdRoot" type="void" line="789">
                <declaration name="z" type="Complex" line="790"/>
                <declaration name="thirdRootsOfZ" type="Complex[]" line="791"/>
            </method>
            <javadoc line="800">
                Test: computing &lt;b&gt;fourth roots&lt;/b&gt; of z.
                  &lt;pre&gt;
                  &lt;code&gt;
                  &lt;b&gt;z = 5 - 2  i&lt;/b&gt;
                  =&gt; z_0 =  1.5164 - 0.1446  i
                  =&gt; z_1 =  0.1446 + 1.5164  i
                  =&gt; z_2 = -1.5164 + 0.1446  i
                  =&gt; z_3 = -1.5164 - 0.1446  i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testNthRoot_normal_fourthRoot" type="void" line="812">
                <declaration name="z" type="Complex" line="813"/>
                <declaration name="fourthRootsOfZ" type="Complex[]" line="814"/>
            </method>
            <javadoc line="825">
                Test: computing &lt;b&gt;third roots&lt;/b&gt; of z.
                  &lt;pre&gt;
                  &lt;code&gt;
                  &lt;b&gt;z = 8&lt;/b&gt;
                  =&gt; z_0 =  2
                  =&gt; z_1 = -1 + 1.73205  i
                  =&gt; z_2 = -1 - 1.73205  i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty" type="void" line="836">
                <declaration name="z" type="Complex" line="837"/>
                <declaration name="thirdRootsOfZ" type="Complex[]" line="838"/>
            </method>
            <javadoc line="847">
                Test: computing &lt;b&gt;third roots&lt;/b&gt; of z with real part 0.
                  &lt;pre&gt;
                  &lt;code&gt;
                  &lt;b&gt;z = 2  i&lt;/b&gt;
                  =&gt; z_0 =  1.0911 + 0.6299  i
                  =&gt; z_1 = -1.0911 + 0.6299  i
                  =&gt; z_2 = -2.3144 - 1.2599  i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testNthRoot_cornercase_thirdRoot_realPartZero" type="void" line="858">
                <declaration name="z" type="Complex" line="859"/>
                <declaration name="thirdRootsOfZ" type="Complex[]" line="860"/>
            </method>
            <javadoc line="869">
                Test cornercases with NaN and Infinity.                
            </javadoc>
            <method name="testNthRoot_cornercase_NAN_Inf" type="void" line="872">
                <declaration name="roots" type="List&lt;Complex&gt;" line="873"/>
            </method>
            <javadoc line="889">
                Test standard values                
            </javadoc>
            <method name="testGetArgument" type="void" line="892">
                <declaration name="z" type="Complex" line="893"/>
            </method>
            <javadoc line="910">
                Verify atan2-style handling of infinite parts                
            </javadoc>
            <method name="testGetArgumentInf" type="void" line="913"/>
            <javadoc line="923">
                Verify that either part NaN results in NaN                
            </javadoc>
            <method name="testGetArgumentNaN" type="void" line="926"/>
            <method name="testSerial" type="void" line="931">
                <declaration name="z" type="Complex" line="932"/>
                <declaration name="ncmplx" type="Complex" line="934"/>
                <declaration name="infcmplx" type="Complex" line="937"/>
                <declaration name="tz" type="TestComplex" line="940"/>
                <declaration name="ntcmplx" type="TestComplex" line="942"/>
                <declaration name="inftcmplx" type="TestComplex" line="945"/>
            </method>
            <class name="TestComplex" line="949">
                <extends class="Complex"/>
                <javadoc line="949">
                    Class to test extending Complex                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="953"/>
                <javadoc line="953">
                    Serialization identifier.                    
                </javadoc>
                <method name="TestComplex" type="constructor" line="957">
                    <params>
                        <param name="real" type="double"/>
                        <param name="imaginary" type="double"/>
                    </params>
                </method>
                <method name="TestComplex" type="constructor" line="960">
                    <params>
                        <param name="other" type="Complex"/>
                    </params>
                </method>
                <method name="createComplex" type="TestComplex" line="963">
                    <params>
                        <param name="real" type="double"/>
                        <param name="imaginary" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>