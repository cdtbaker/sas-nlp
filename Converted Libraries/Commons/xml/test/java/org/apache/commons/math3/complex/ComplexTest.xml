<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.complex">
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="java.util.List"/>
        <class name="ComplexTest" line="29">
            <javadoc line="29">
                @version $Id: ComplexTest.java 1459927 2013-03-22 18:55:58Z luc $                
            </javadoc>
            <declaration name="inf" type="double" line="35"/>
            <declaration name="neginf" type="double" line="36"/>
            <declaration name="nan" type="double" line="37"/>
            <declaration name="pi" type="double" line="38"/>
            <declaration name="oneInf" type="Complex" line="39"/>
            <declaration name="oneNegInf" type="Complex" line="40"/>
            <declaration name="infOne" type="Complex" line="41"/>
            <declaration name="infZero" type="Complex" line="42"/>
            <declaration name="infNaN" type="Complex" line="43"/>
            <declaration name="infNegInf" type="Complex" line="44"/>
            <declaration name="infInf" type="Complex" line="45"/>
            <declaration name="negInfInf" type="Complex" line="46"/>
            <declaration name="negInfZero" type="Complex" line="47"/>
            <declaration name="negInfOne" type="Complex" line="48"/>
            <declaration name="negInfNaN" type="Complex" line="49"/>
            <declaration name="negInfNegInf" type="Complex" line="50"/>
            <declaration name="oneNaN" type="Complex" line="51"/>
            <declaration name="zeroInf" type="Complex" line="52"/>
            <declaration name="zeroNaN" type="Complex" line="53"/>
            <declaration name="nanInf" type="Complex" line="54"/>
            <declaration name="nanNegInf" type="Complex" line="55"/>
            <declaration name="nanZero" type="Complex" line="56"/>
            <method name="testConstructor" type="void" line="59">
                <declaration name="z" type="Complex" line="60"/>
            </method>
            <method name="testConstructorNaN" type="void" line="66">
                <declaration name="z" type="Complex" line="67"/>
            </method>
            <method name="testAbs" type="void" line="78">
                <declaration name="z" type="Complex" line="79"/>
            </method>
            <method name="testAbsNaN" type="void" line="84">
                <declaration name="z" type="Complex" line="86"/>
            </method>
            <method name="testAbsInfinite" type="void" line="91">
                <declaration name="z" type="Complex" line="92"/>
            </method>
            <method name="testAdd" type="void" line="101">
                <declaration name="x" type="Complex" line="102"/>
                <declaration name="y" type="Complex" line="103"/>
                <declaration name="z" type="Complex" line="104"/>
            </method>
            <method name="testAddNaN" type="void" line="110">
                <declaration name="x" type="Complex" line="111"/>
                <declaration name="z" type="Complex" line="112"/>
                <declaration name="w" type="Complex" line="115"/>
            </method>
            <method name="testAddInf" type="void" line="120">
                <declaration name="x" type="Complex" line="121"/>
                <declaration name="z" type="Complex" line="122"/>
                <declaration name="w" type="Complex" line="123"/>
            </method>
            <method name="testScalarAdd" type="void" line="133">
                <declaration name="x" type="Complex" line="134"/>
                <declaration name="yDouble" type="double" line="135"/>
                <declaration name="yComplex" type="Complex" line="136"/>
            </method>
            <method name="testScalarAddNaN" type="void" line="141">
                <declaration name="x" type="Complex" line="142"/>
                <declaration name="yDouble" type="double" line="143"/>
                <declaration name="yComplex" type="Complex" line="144"/>
            </method>
            <method name="testScalarAddInf" type="void" line="149">
                <declaration name="x" type="Complex" line="150"/>
                <declaration name="yDouble" type="double" line="151"/>
                <declaration name="yComplex" type="Complex" line="153"/>
            </method>
            <method name="testConjugate" type="void" line="161">
                <declaration name="x" type="Complex" line="162"/>
                <declaration name="z" type="Complex" line="163"/>
            </method>
            <method name="testConjugateNaN" type="void" line="169">
                <declaration name="z" type="Complex" line="170"/>
            </method>
            <method name="testConjugateInfiinite" type="void" line="175">
                <declaration name="z" type="Complex" line="176"/>
            </method>
            <method name="testDivide" type="void" line="183">
                <declaration name="x" type="Complex" line="184"/>
                <declaration name="y" type="Complex" line="185"/>
                <declaration name="z" type="Complex" line="186"/>
            </method>
            <method name="testDivideReal" type="void" line="192">
                <declaration name="x" type="Complex" line="193"/>
                <declaration name="y" type="Complex" line="194"/>
            </method>
            <method name="testDivideImaginary" type="void" line="200">
                <declaration name="x" type="Complex" line="201"/>
                <declaration name="y" type="Complex" line="202"/>
            </method>
            <method name="testDivideInf" type="void" line="207">
                <declaration name="x" type="Complex" line="208"/>
                <declaration name="w" type="Complex" line="209"/>
                <declaration name="z" type="Complex" line="212"/>
            </method>
            <method name="testDivideZero" type="void" line="228">
                <comment line="232">
                    Assert.assertEquals(z, Complex.INF); // See MATH-657                    
                </comment>
                <declaration name="x" type="Complex" line="229"/>
                <declaration name="z" type="Complex" line="230"/>
            </method>
            <method name="testDivideZeroZero" type="void" line="236">
                <declaration name="x" type="Complex" line="237"/>
                <declaration name="z" type="Complex" line="238"/>
            </method>
            <method name="testDivideNaN" type="void" line="243">
                <declaration name="x" type="Complex" line="244"/>
                <declaration name="z" type="Complex" line="245"/>
            </method>
            <method name="testDivideNaNInf" type="void" line="250">
                <declaration name="z" type="Complex" line="251"/>
            </method>
            <method name="testScalarDivide" type="void" line="265">
                <declaration name="x" type="Complex" line="266"/>
                <declaration name="yDouble" type="double" line="267"/>
                <declaration name="yComplex" type="Complex" line="268"/>
            </method>
            <method name="testScalarDivideNaN" type="void" line="273">
                <declaration name="x" type="Complex" line="274"/>
                <declaration name="yDouble" type="double" line="275"/>
                <declaration name="yComplex" type="Complex" line="276"/>
            </method>
            <method name="testScalarDivideInf" type="void" line="281">
                <declaration name="x" type="Complex" line="282"/>
                <declaration name="yDouble" type="double" line="283"/>
                <declaration name="yComplex" type="Complex" line="284"/>
            </method>
            <method name="testScalarDivideZero" type="void" line="296">
                <declaration name="x" type="Complex" line="297"/>
            </method>
            <method name="testReciprocal" type="void" line="302">
                <declaration name="z" type="Complex" line="303"/>
                <declaration name="act" type="Complex" line="304"/>
                <declaration name="expRe" type="double" line="305"/>
                <declaration name="expIm" type="double" line="306"/>
            </method>
            <method name="testReciprocalReal" type="void" line="312">
                <declaration name="z" type="Complex" line="313"/>
            </method>
            <method name="testReciprocalImaginary" type="void" line="318">
                <declaration name="z" type="Complex" line="319"/>
            </method>
            <method name="testReciprocalInf" type="void" line="324">
                <declaration name="z" type="Complex" line="325"/>
            </method>
            <method name="testReciprocalZero" type="void" line="333"/>
            <method name="testReciprocalNaN" type="void" line="338"/>
            <method name="testMultiply" type="void" line="343">
                <declaration name="x" type="Complex" line="344"/>
                <declaration name="y" type="Complex" line="345"/>
                <declaration name="z" type="Complex" line="346"/>
            </method>
            <method name="testMultiplyNaN" type="void" line="352">
                <declaration name="x" type="Complex" line="353"/>
                <declaration name="z" type="Complex" line="354"/>
            </method>
            <method name="testMultiplyInfInf" type="void" line="361">
                <comment line="363">
                    Assert.assertTrue(infInf.multiply(infInf).isNaN()); // MATH-620                    
                </comment>
            </method>
            <method name="testMultiplyNaNInf" type="void" line="367">
                <comment line="374">
                    [MATH-164]                    
                </comment>
                <declaration name="z" type="Complex" line="368"/>
                <declaration name="w" type="Complex" line="369"/>
            </method>
            <method name="testScalarMultiply" type="void" line="391">
                <declaration name="x" type="Complex" line="392"/>
                <declaration name="yDouble" type="double" line="393"/>
                <declaration name="yComplex" type="Complex" line="394"/>
                <declaration name="zInt" type="int" line="396"/>
                <declaration name="zComplex" type="Complex" line="397"/>
            </method>
            <method name="testScalarMultiplyNaN" type="void" line="402">
                <declaration name="x" type="Complex" line="403"/>
                <declaration name="yDouble" type="double" line="404"/>
                <declaration name="yComplex" type="Complex" line="405"/>
            </method>
            <method name="testScalarMultiplyInf" type="void" line="410">
                <declaration name="x" type="Complex" line="411"/>
                <declaration name="yDouble" type="double" line="412"/>
                <declaration name="yComplex" type="Complex" line="413"/>
            </method>
            <method name="testNegate" type="void" line="422">
                <declaration name="x" type="Complex" line="423"/>
                <declaration name="z" type="Complex" line="424"/>
            </method>
            <method name="testNegateNaN" type="void" line="430">
                <declaration name="z" type="Complex" line="431"/>
            </method>
            <method name="testSubtract" type="void" line="436">
                <declaration name="x" type="Complex" line="437"/>
                <declaration name="y" type="Complex" line="438"/>
                <declaration name="z" type="Complex" line="439"/>
            </method>
            <method name="testSubtractNaN" type="void" line="445">
                <declaration name="x" type="Complex" line="446"/>
                <declaration name="z" type="Complex" line="447"/>
                <declaration name="w" type="Complex" line="450"/>
            </method>
            <method name="testSubtractInf" type="void" line="455">
                <declaration name="x" type="Complex" line="456"/>
                <declaration name="z" type="Complex" line="457"/>
                <declaration name="w" type="Complex" line="458"/>
            </method>
            <method name="testScalarSubtract" type="void" line="467">
                <declaration name="x" type="Complex" line="468"/>
                <declaration name="yDouble" type="double" line="469"/>
                <declaration name="yComplex" type="Complex" line="470"/>
            </method>
            <method name="testScalarSubtractNaN" type="void" line="475">
                <declaration name="x" type="Complex" line="476"/>
                <declaration name="yDouble" type="double" line="477"/>
                <declaration name="yComplex" type="Complex" line="478"/>
            </method>
            <method name="testScalarSubtractInf" type="void" line="483">
                <declaration name="x" type="Complex" line="484"/>
                <declaration name="yDouble" type="double" line="485"/>
                <declaration name="yComplex" type="Complex" line="486"/>
            </method>
            <method name="testEqualsNull" type="void" line="495">
                <declaration name="x" type="Complex" line="496"/>
            </method>
            <method name="testEqualsClass" type="void" line="501">
                <declaration name="x" type="Complex" line="502"/>
            </method>
            <method name="testEqualsSame" type="void" line="507">
                <declaration name="x" type="Complex" line="508"/>
            </method>
            <method name="testEqualsTrue" type="void" line="513">
                <declaration name="x" type="Complex" line="514"/>
                <declaration name="y" type="Complex" line="515"/>
            </method>
            <method name="testEqualsRealDifference" type="void" line="520">
                <declaration name="x" type="Complex" line="521"/>
                <declaration name="y" type="Complex" line="522"/>
            </method>
            <method name="testEqualsImaginaryDifference" type="void" line="527">
                <declaration name="x" type="Complex" line="528"/>
                <declaration name="y" type="Complex" line="529"/>
            </method>
            <method name="testEqualsNaN" type="void" line="534">
                <declaration name="realNaN" type="Complex" line="535"/>
                <declaration name="imaginaryNaN" type="Complex" line="536"/>
                <declaration name="complexNaN" type="Complex" line="537"/>
            </method>
            <method name="testHashCode" type="void" line="544">
                <declaration name="x" type="Complex" line="545"/>
                <declaration name="y" type="Complex" line="546"/>
                <declaration name="realNaN" type="Complex" line="550"/>
                <declaration name="imaginaryNaN" type="Complex" line="551"/>
            </method>
            <method name="testAcos" type="void" line="557">
                <declaration name="z" type="Complex" line="558"/>
                <declaration name="expected" type="Complex" line="559"/>
            </method>
            <method name="testAcosInf" type="void" line="566"/>
            <method name="testAcosNaN" type="void" line="578"/>
            <method name="testAsin" type="void" line="583">
                <declaration name="z" type="Complex" line="584"/>
                <declaration name="expected" type="Complex" line="585"/>
            </method>
            <method name="testAsinNaN" type="void" line="590"/>
            <method name="testAsinInf" type="void" line="595"/>
            <method name="testAtan" type="void" line="608">
                <declaration name="z" type="Complex" line="609"/>
                <declaration name="expected" type="Complex" line="610"/>
            </method>
            <method name="testAtanInf" type="void" line="615"/>
            <method name="testAtanI" type="void" line="627"/>
            <method name="testAtanNaN" type="void" line="632"/>
            <method name="testCos" type="void" line="637">
                <declaration name="z" type="Complex" line="638"/>
                <declaration name="expected" type="Complex" line="639"/>
            </method>
            <method name="testCosNaN" type="void" line="644"/>
            <method name="testCosInf" type="void" line="649"/>
            <method name="testCosh" type="void" line="661">
                <declaration name="z" type="Complex" line="662"/>
                <declaration name="expected" type="Complex" line="663"/>
            </method>
            <method name="testCoshNaN" type="void" line="668"/>
            <method name="testCoshInf" type="void" line="673"/>
            <method name="testExp" type="void" line="685">
                <declaration name="z" type="Complex" line="686"/>
                <declaration name="expected" type="Complex" line="687"/>
                <declaration name="iPi" type="Complex" line="691"/>
            </method>
            <method name="testExpNaN" type="void" line="697"/>
            <method name="testExpInf" type="void" line="702"/>
            <method name="testLog" type="void" line="714">
                <declaration name="z" type="Complex" line="715"/>
                <declaration name="expected" type="Complex" line="716"/>
            </method>
            <method name="testLogNaN" type="void" line="721"/>
            <method name="testLogInf" type="void" line="726"/>
            <method name="testLogZero" type="void" line="745"/>
            <method name="testPow" type="void" line="750">
                <declaration name="x" type="Complex" line="751"/>
                <declaration name="y" type="Complex" line="752"/>
                <declaration name="expected" type="Complex" line="753"/>
            </method>
            <method name="testPowNaNBase" type="void" line="758">
                <declaration name="x" type="Complex" line="759"/>
            </method>
            <method name="testPowNaNExponent" type="void" line="764">
                <declaration name="x" type="Complex" line="765"/>
            </method>
            <method name="testPowInf" type="void" line="770"/>
            <method name="testPowZero" type="void" line="796"/>
            <method name="testScalarPow" type="void" line="812">
                <declaration name="x" type="Complex" line="813"/>
                <declaration name="yDouble" type="double" line="814"/>
                <declaration name="yComplex" type="Complex" line="815"/>
            </method>
            <method name="testScalarPowNaNBase" type="void" line="820">
                <declaration name="x" type="Complex" line="821"/>
                <declaration name="yDouble" type="double" line="822"/>
                <declaration name="yComplex" type="Complex" line="823"/>
            </method>
            <method name="testScalarPowNaNExponent" type="void" line="828">
                <declaration name="x" type="Complex" line="829"/>
                <declaration name="yDouble" type="double" line="830"/>
                <declaration name="yComplex" type="Complex" line="831"/>
            </method>
            <method name="testScalarPowInf" type="void" line="836"/>
            <method name="testScalarPowZero" type="void" line="854"/>
            <method name="testpowNull" type="void" line="863"/>
            <method name="testSin" type="void" line="868">
                <declaration name="z" type="Complex" line="869"/>
                <declaration name="expected" type="Complex" line="870"/>
            </method>
            <method name="testSinInf" type="void" line="875"/>
            <method name="testSinNaN" type="void" line="887"/>
            <method name="testSinh" type="void" line="892">
                <declaration name="z" type="Complex" line="893"/>
                <declaration name="expected" type="Complex" line="894"/>
            </method>
            <method name="testSinhNaN" type="void" line="899"/>
            <method name="testSinhInf" type="void" line="904"/>
            <method name="testSqrtRealPositive" type="void" line="916">
                <declaration name="z" type="Complex" line="917"/>
                <declaration name="expected" type="Complex" line="918"/>
            </method>
            <method name="testSqrtRealZero" type="void" line="923">
                <declaration name="z" type="Complex" line="924"/>
                <declaration name="expected" type="Complex" line="925"/>
            </method>
            <method name="testSqrtRealNegative" type="void" line="930">
                <declaration name="z" type="Complex" line="931"/>
                <declaration name="expected" type="Complex" line="932"/>
            </method>
            <method name="testSqrtImaginaryZero" type="void" line="937">
                <declaration name="z" type="Complex" line="938"/>
                <declaration name="expected" type="Complex" line="939"/>
            </method>
            <method name="testSqrtImaginaryNegative" type="void" line="944">
                <declaration name="z" type="Complex" line="945"/>
                <declaration name="expected" type="Complex" line="946"/>
            </method>
            <method name="testSqrtPolar" type="void" line="951">
                <declaration name="r" type="double" line="952"/>
                <scope line="953">
                    <declaration name="theta" type="double" line="955"/>
                    <scope line="956">
                        <declaration name="z" type="Complex" line="958"/>
                        <declaration name="sqrtz" type="Complex" line="959"/>
                    </scope>
                </scope>
            </method>
            <method name="testSqrtNaN" type="void" line="966"/>
            <method name="testSqrtInf" type="void" line="971"/>
            <method name="testSqrt1z" type="void" line="983">
                <declaration name="z" type="Complex" line="984"/>
                <declaration name="expected" type="Complex" line="985"/>
            </method>
            <method name="testSqrt1zNaN" type="void" line="990"/>
            <method name="testTan" type="void" line="995">
                <comment line="1000">
                                        
                </comment>
                <declaration name="z" type="Complex" line="996"/>
                <declaration name="expected" type="Complex" line="997"/>
                <declaration name="actual" type="Complex" line="1000"/>
            </method>
            <method name="testTanNaN" type="void" line="1009"/>
            <method name="testTanInf" type="void" line="1014"/>
            <method name="testTanCritical" type="void" line="1026"/>
            <method name="testTanh" type="void" line="1032">
                <comment line="1037">
                                        
                </comment>
                <declaration name="z" type="Complex" line="1033"/>
                <declaration name="expected" type="Complex" line="1034"/>
                <declaration name="actual" type="Complex" line="1037"/>
            </method>
            <method name="testTanhNaN" type="void" line="1046"/>
            <method name="testTanhInf" type="void" line="1051"/>
            <method name="testTanhCritical" type="void" line="1063"/>
            <javadoc line="1067">
                test issue MATH-221                
            </javadoc>
            <method name="testMath221" type="void" line="1069"/>
            <javadoc line="1073">
                Test: computing &lt;b&gt;third roots&lt;/b&gt; of z.
                  &lt;pre&gt;
                  &lt;code&gt;
                  &lt;b&gt;z = -2 + 2  i&lt;/b&gt;
                  =&gt; z_0 =  1      +          i
                  =&gt; z_1 = -1.3660 + 0.3660  i
                  =&gt; z_2 =  0.3660 - 1.3660  i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testNthRoot_normal_thirdRoot" type="void" line="1085">
                <comment line="1087">
                    The complex number we want to compute all third-roots for.                    
                </comment>
                <comment line="1089">
                    The List holding all third roots                    
                </comment>
                <comment line="1091">
                    Returned Collection must not be empty!                    
                </comment>
                <comment line="1093">
                    test z_0                    
                </comment>
                <comment line="1096">
                    test z_1                    
                </comment>
                <comment line="1099">
                    test z_2                    
                </comment>
                <declaration name="z" type="Complex" line="1087"/>
                <declaration name="thirdRootsOfZ" type="Complex[]" line="1089"/>
            </method>
            <javadoc line="1104">
                Test: computing &lt;b&gt;fourth roots&lt;/b&gt; of z.
                  &lt;pre&gt;
                  &lt;code&gt;
                  &lt;b&gt;z = 5 - 2  i&lt;/b&gt;
                  =&gt; z_0 =  1.5164 - 0.1446  i
                  =&gt; z_1 =  0.1446 + 1.5164  i
                  =&gt; z_2 = -1.5164 + 0.1446  i
                  =&gt; z_3 = -1.5164 - 0.1446  i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testNthRoot_normal_fourthRoot" type="void" line="1117">
                <comment line="1119">
                    The complex number we want to compute all third-roots for.                    
                </comment>
                <comment line="1121">
                    The List holding all fourth roots                    
                </comment>
                <comment line="1123">
                    Returned Collection must not be empty!                    
                </comment>
                <comment line="1125">
                    test z_0                    
                </comment>
                <comment line="1128">
                    test z_1                    
                </comment>
                <comment line="1131">
                    test z_2                    
                </comment>
                <comment line="1134">
                    test z_3                    
                </comment>
                <declaration name="z" type="Complex" line="1119"/>
                <declaration name="fourthRootsOfZ" type="Complex[]" line="1121"/>
            </method>
            <javadoc line="1138">
                Test: computing &lt;b&gt;third roots&lt;/b&gt; of z.
                  &lt;pre&gt;
                  &lt;code&gt;
                  &lt;b&gt;z = 8&lt;/b&gt;
                  =&gt; z_0 =  2
                  =&gt; z_1 = -1 + 1.73205  i
                  =&gt; z_2 = -1 - 1.73205  i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty" type="void" line="1150">
                <comment line="1152">
                    The number 8 has three third roots. One we all already know is the number 2.
                     But there are two more complex roots.                    
                </comment>
                <comment line="1155">
                    The List holding all third roots                    
                </comment>
                <comment line="1157">
                    Returned Collection must not be empty!                    
                </comment>
                <comment line="1159">
                    test z_0                    
                </comment>
                <comment line="1162">
                    test z_1                    
                </comment>
                <comment line="1165">
                    test z_2                    
                </comment>
                <declaration name="z" type="Complex" line="1153"/>
                <declaration name="thirdRootsOfZ" type="Complex[]" line="1155"/>
            </method>
            <javadoc line="1170">
                Test: computing &lt;b&gt;third roots&lt;/b&gt; of z with real part 0.
                  &lt;pre&gt;
                  &lt;code&gt;
                  &lt;b&gt;z = 2  i&lt;/b&gt;
                  =&gt; z_0 =  1.0911 + 0.6299  i
                  =&gt; z_1 = -1.0911 + 0.6299  i
                  =&gt; z_2 = -2.3144 - 1.2599  i
                  &lt;/code&gt;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="testNthRoot_cornercase_thirdRoot_realPartZero" type="void" line="1182">
                <comment line="1184">
                    complex number with only imaginary part                    
                </comment>
                <comment line="1186">
                    The List holding all third roots                    
                </comment>
                <comment line="1188">
                    Returned Collection must not be empty!                    
                </comment>
                <comment line="1190">
                    test z_0                    
                </comment>
                <comment line="1193">
                    test z_1                    
                </comment>
                <comment line="1196">
                    test z_2                    
                </comment>
                <declaration name="z" type="Complex" line="1184"/>
                <declaration name="thirdRootsOfZ" type="Complex[]" line="1186"/>
            </method>
            <javadoc line="1200">
                Test cornercases with NaN and Infinity.                
            </javadoc>
            <method name="testNthRoot_cornercase_NAN_Inf" type="void" line="1204">
                <comment line="1206">
                    NaN + finite -&gt; NaN                    
                </comment>
                <comment line="1215">
                    NaN + infinite -&gt; NaN                    
                </comment>
                <comment line="1220">
                    finite + infinite -&gt; Inf                    
                </comment>
                <comment line="1225">
                    infinite + infinite -&gt; Inf                    
                </comment>
                <declaration name="roots" type="List&lt;Complex&gt;" line="1206"/>
            </method>
            <javadoc line="1230">
                Test standard values                
            </javadoc>
            <method name="testGetArgument" type="void" line="1234">
                <declaration name="z" type="Complex" line="1235"/>
            </method>
            <javadoc line="1261">
                Verify atan2-style handling of infinite parts                
            </javadoc>
            <method name="testGetArgumentInf" type="void" line="1265"/>
            <javadoc line="1276">
                Verify that either part NaN results in NaN                
            </javadoc>
            <method name="testGetArgumentNaN" type="void" line="1280"/>
            <method name="testSerial" type="void" line="1287">
                <declaration name="z" type="Complex" line="1288"/>
                <declaration name="ncmplx" type="Complex" line="1290"/>
                <declaration name="infcmplx" type="Complex" line="1293"/>
                <declaration name="tz" type="TestComplex" line="1296"/>
                <declaration name="ntcmplx" type="TestComplex" line="1298"/>
                <declaration name="inftcmplx" type="TestComplex" line="1301"/>
            </method>
            <class name="TestComplex" line="1306">
                <extends class="Complex"/>
                <javadoc line="1306">
                    Class to test extending Complex                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1311"/>
                <javadoc line="1311">
                    Serialization identifier.                    
                </javadoc>
                <method name="TestComplex" type="constructor" line="1316">
                    <params>
                        <param name="real" type="double"/>
                        <param name="imaginary" type="double"/>
                    </params>
                </method>
                <method name="TestComplex" type="constructor" line="1320">
                    <params>
                        <param name="other" type="Complex"/>
                    </params>
                </method>
                <method name="createComplex" type="TestComplex" line="1325">
                    <params>
                        <param name="real" type="double"/>
                        <param name="imaginary" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>