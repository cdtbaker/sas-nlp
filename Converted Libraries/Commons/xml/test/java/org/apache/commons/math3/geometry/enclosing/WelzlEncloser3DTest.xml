<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.enclosing">
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Vector3D"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.UnitSphereRandomVectorGenerator"/>
        <import package="org.apache.commons.math3.random.Well1024a"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="WelzlEncloser3DTest" line="34">
            <method name="testNullList" type="void" line="37">
                <declaration name="generator" type="SphereGenerator" line="38"/>
                <declaration name="encloser" type="WelzlEncloser&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="39"/>
                <declaration name="ball" type="EnclosingBall&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="41"/>
            </method>
            <method name="testNoPoints" type="void" line="46">
                <declaration name="generator" type="SphereGenerator" line="47"/>
                <declaration name="encloser" type="WelzlEncloser&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="48"/>
                <declaration name="ball" type="EnclosingBall&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="50"/>
            </method>
            <method name="testReducingBall" type="void" line="55">
                <declaration name="list" type="List&amp;lt;Vector3D&amp;gt;" line="56"/>
                <declaration name="encloser" type="WelzlEncloser&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="68"/>
                <declaration name="ball" type="EnclosingBall&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="70"/>
            </method>
            <method name="testInfiniteLoop" type="void" line="75">
                <comment line="77">
                    this test used to generate an infinite loop                    
                </comment>
                <declaration name="list" type="List&amp;lt;Vector3D&amp;gt;" line="77"/>
                <declaration name="encloser" type="WelzlEncloser&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="97"/>
                <declaration name="ball" type="EnclosingBall&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="99"/>
            </method>
            <method name="testLargeSamples" type="void" line="104">
                <comment line="110">
                    define the reference sphere we want to compute                    
                </comment>
                <comment line="114">
                    set up a large sample inside the reference sphere                    
                </comment>
                <comment line="122">
                    test we find a sphere at most as large as the one used for random drawings                    
                </comment>
                <declaration name="random" type="RandomGenerator" line="105"/>
                <declaration name="sr" type="UnitSphereRandomVectorGenerator" line="106"/>
                <scope line="107">
                    <declaration name="d" type="double" line="110"/>
                    <declaration name="refRadius" type="double" line="111"/>
                    <declaration name="refCenter" type="Vector3D" line="112"/>
                    <declaration name="nbPoints" type="int" line="114"/>
                    <declaration name="points" type="List&amp;lt;Vector3D&amp;gt;" line="115"/>
                    <scope line="116">
                        <declaration name="r" type="double" line="117"/>
                    </scope>
                </scope>
            </method>
            <method name="checkSphere" type="void" line="127">
                <params>
                    <param name="points" type="List&lt;Vector3D&gt;"/>
                    <param name="refRadius" type="double"/>
                </params>
                <comment line="132">
                    compare computed sphere with bounding sphere                    
                </comment>
                <comment line="135">
                    check removing any point of the support Sphere fails to enclose the point                    
                </comment>
                <declaration name="sphere" type="EnclosingBall&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="129"/>
                <scope line="135">
                    <declaration name="reducedSupport" type="List&amp;lt;Vector3D&amp;gt;" line="136"/>
                    <declaration name="count" type="int" line="137"/>
                    <scope line="138">
                        <scope line="139"/>
                    </scope>
                    <declaration name="reducedSphere" type="EnclosingBall&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="143"/>
                    <declaration name="foundOutside" type="boolean" line="145"/>
                    <scope line="146">
                        <scope line="147"/>
                    </scope>
                </scope>
            </method>
            <method name="checkSphere" type="EnclosingBall&lt;Euclidean3D,Vector3D&gt;" line="156">
                <params>
                    <param name="points" type="List&lt;Vector3D&gt;"/>
                </params>
                <comment line="163">
                    all points are enclosed                    
                </comment>
                <comment line="176">
                    points on the support should be outside of reduced ball                    
                </comment>
                <declaration name="encloser" type="WelzlEncloser&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="158"/>
                <declaration name="Sphere" type="EnclosingBall&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="160"/>
                <scope line="163"/>
                <scope line="167">
                    <declaration name="inSupport" type="boolean" line="168"/>
                    <scope line="169">
                        <scope line="170"/>
                    </scope>
                    <scope line="174"/>
                </scope>
            </method>
        </class>
    </source>