<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.transform">
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.analysis.function.Sinc"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.runner.RunWith"/>
        <import package="org.junit.runners.Parameterized"/>
        <import package="org.junit.runners.Parameterized.Parameters"/>
        <class name="FastSineTransformerTest" line="15">
            <extends class="RealTransformerAbstractTest"/>
            <javadoc line="15">
                Test case for fast sine transformer.
                  &lt;p&gt;
                  FST algorithm is exact, the small tolerance number is used only
                  to account for round-off errors.                
                <version>
                    $Id: FastSineTransformerTest.java 1374632 2012-08-18 18:11:11Z luc $                    
                </version>
            </javadoc>
            <declaration name="normalization" type="DstNormalization" line="23"/>
            <declaration name="invalidDataSize" type="int[]" line="24"/>
            <declaration name="relativeTolerance" type="double[]" line="25"/>
            <declaration name="validDataSize" type="int[]" line="26"/>
            <method name="FastSineTransformerTest" type="constructor" line="27">
                <params>
                    <param name="normalization" type="DstNormalization"/>
                </params>
            </method>
            <javadoc line="33">
                Returns an array containing {@code true, false} in order to check both
                  standard and orthogonal DSTs.                
                <return>
                    an array of parameters for this parameterized test                    
                </return>
            </javadoc>
            <method name="data" type="Collection<Object[]>" line="38">
                <declaration name="normalization" type="DstNormalization[]" line="39"/>
                <declaration name="data" type="Object[][]" line="40"/>
                <scope line="41"/>
            </method>
            <javadoc line="46">
                {@inheritDoc}Overriding the default implementation allows to ensure that the first
                  element of the data set is zero.                
            </javadoc>
            <method name="createRealData" type="double[]" line="50">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="data" type="double[]" line="51"/>
            </method>
            <method name="createRealTransformer" type="RealTransformer" line="55"/>
            <method name="getInvalidDataSize" type="int" line="58">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getNumberOfInvalidDataSizes" type="int" line="61"/>
            <method name="getNumberOfValidDataSizes" type="int" line="64"/>
            <method name="getRelativeTolerance" type="double" line="67">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getValidDataSize" type="int" line="70">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getValidFunction" type="UnivariateFunction" line="73"/>
            <method name="getValidLowerBound" type="double" line="76"/>
            <method name="getValidUpperBound" type="double" line="79"/>
            <method name="transform" type="double[]" line="82">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="type" type="TransformType"/>
                </params>
                <declaration name="n" type="int" line="83"/>
                <declaration name="y" type="double[]" line="84"/>
                <declaration name="sin" type="double[]" line="85"/>
                <scope line="86"/>
                <scope line="89">
                    <declaration name="yj" type="double" line="90"/>
                    <scope line="91"/>
                </scope>
                <declaration name="s" type="double" line="96"/>
                <scope line="97">
                    <scope line="98"/>
                    <scope line="101"/>
                    <scope line="104"/>
                </scope>
                <scope line="108">
                    <scope line="109"/>
                    <scope line="112"/>
                    <scope line="115"/>
                </scope>
                <scope line="119"/>
            </method>
            <method name="testTransformRealFirstElementNotZero" type="void" line="125">
                <declaration name="type" type="TransformType[]" line="126"/>
                <declaration name="data" type="double[]" line="127"/>
                <declaration name="transformer" type="RealTransformer" line="128"/>
                <scope line="129">
                    <scope line="130"/>
                    <scope line="134"/>
                </scope>
            </method>
            <javadoc line="138">
                Test of transformer for the ad hoc data.                
            </javadoc>
            <method name="testAdHocData" type="void" line="141">
                <declaration name="transformer" type="FastSineTransformer" line="142"/>
                <declaration name="result" type="double" line="144"/>
                <declaration name="x" type="double" line="145"/>
                <declaration name="y" type="double" line="146"/>
                <scope line="148"/>
                <scope line="152"/>
                <scope line="158"/>
                <scope line="162"/>
            </method>
            <javadoc line="166">
                Test of transformer for the sine function.                
            </javadoc>
            <method name="testSinFunction" type="void" line="169">
                <declaration name="f" type="UnivariateFunction" line="170"/>
                <declaration name="transformer" type="FastSineTransformer" line="171"/>
                <declaration name="min" type="double" line="173"/>
                <declaration name="N" type="int" line="174"/>
                <scope line="179"/>
                <scope line="186"/>
            </method>
            <javadoc line="190">
                Test of parameters for the transformer.                
            </javadoc>
            <method name="testParameters" type="void" line="193">
                <declaration name="f" type="UnivariateFunction" line="194"/>
                <declaration name="transformer" type="FastSineTransformer" line="195"/>
                <scope line="197"/>
                <scope line="201"/>
                <scope line="203"/>
                <scope line="207"/>
                <scope line="209"/>
                <scope line="213"/>
            </method>
        </class>
    </source>