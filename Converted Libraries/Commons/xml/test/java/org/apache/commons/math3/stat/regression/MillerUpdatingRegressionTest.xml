<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.regression">
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.stat.correlation.PearsonsCorrelation"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="MillerUpdatingRegressionTest" line="26">
            <comment line="34">
                This is the Greene Airline Cost data.
                 The data can be downloaded from http:www.indiana.edu~statmathstatallpanelairline.csv                
            </comment>
            <comment line="162">
                Results can be found at http:www.indiana.edu~statmathstatallpanelpanel4.html
                 This test concerns a known data set                
            </comment>
            <comment line="559">
                @Test                
            </comment>
            <comment line="717">
                @Test                
            </comment>
            <comment line="718">
                public void testRegressReorder() {                
            </comment>
            <comment line="719">
                // System.out.println(&quot;testRegressReorder&quot;);                
            </comment>
            <comment line="720">
                MillerUpdatingRegression instance = new MillerUpdatingRegression(4, false);                
            </comment>
            <comment line="721">
                double[][] x = new double[airdata[0].length][];                
            </comment>
            <comment line="722">
                double[] y = new double[airdata[0].length];                
            </comment>
            <comment line="723">
                for (int i = 0; i &lt; airdata[0].length; i++) {                
            </comment>
            <comment line="724">
                x[i] = new double[4];                
            </comment>
            <comment line="725">
                x[i][0] = 1.0;                
            </comment>
            <comment line="726">
                x[i][1] = Math.log(airdata[3][i]);                
            </comment>
            <comment line="727">
                x[i][2] = Math.log(airdata[4][i]);                
            </comment>
            <comment line="728">
                x[i][3] = airdata[5][i];                
            </comment>
            <comment line="729">
                y[i] = Math.log(airdata[2][i]);                
            </comment>
            <comment line="730">
                }                
            </comment>
            <comment line="731">
                                
            </comment>
            <comment line="732">
                instance.addObservations(x, y);                
            </comment>
            <comment line="733">
                RegressionResults result = instance.regress();                
            </comment>
            <comment line="734">
                if (result == null) {                
            </comment>
            <comment line="735">
                Assert.fail(&quot;Null result....&quot;);                
            </comment>
            <comment line="736">
                }                
            </comment>
            <comment line="737">
                                
            </comment>
            <comment line="738">
                instance.reorderRegressors(new int[]{3, 2}, 0);                
            </comment>
            <comment line="739">
                RegressionResults resultInverse = instance.regress();                
            </comment>
            <comment line="740">
                                
            </comment>
            <comment line="741">
                double[] beta = result.getParameterEstimates();                
            </comment>
            <comment line="742">
                double[] betar = resultInverse.getParameterEstimates();                
            </comment>
            <comment line="743">
                if (Math.abs(beta[0] - betar[0]) &gt; 1.0e-14) {                
            </comment>
            <comment line="744">
                Assert.fail(&quot;Parameters not correct after reorder (0,3)&quot;);                
            </comment>
            <comment line="745">
                }                
            </comment>
            <comment line="746">
                if (Math.abs(beta[1] - betar[1]) &gt; 1.0e-14) {                
            </comment>
            <comment line="747">
                Assert.fail(&quot;Parameters not correct after reorder (1,2)&quot;);                
            </comment>
            <comment line="748">
                }                
            </comment>
            <comment line="749">
                if (Math.abs(beta[2] - betar[2]) &gt; 1.0e-14) {                
            </comment>
            <comment line="750">
                Assert.fail(&quot;Parameters not correct after reorder (2,1)&quot;);                
            </comment>
            <comment line="751">
                }                
            </comment>
            <comment line="752">
                if (Math.abs(beta[3] - betar[3]) &gt; 1.0e-14) {                
            </comment>
            <comment line="753">
                Assert.fail(&quot;Parameters not correct after reorder (3,0)&quot;);                
            </comment>
            <comment line="754">
                }                
            </comment>
            <comment line="755">
                }                
            </comment>
            <javadoc line="26">
                MillerUpdatingRegression tests.                
            </javadoc>
            <method name="MillerUpdatingRegressionTest" type="constructor" line="31"/>
            <declaration name="airdata" type="double[][]" line="36"/>
            <javadoc line="45">
                Test of hasIntercept method, of class MillerUpdatingRegression.                
            </javadoc>
            <method name="testHasIntercept" type="void" line="49">
                <declaration name="instance" type="MillerUpdatingRegression" line="50"/>
                <scope line="51"/>
                <scope line="55"/>
            </method>
            <javadoc line="60">
                Test of getN method, of class MillerUpdatingRegression.                
            </javadoc>
            <method name="testAddObsGetNClear" type="void" line="64">
                <declaration name="instance" type="MillerUpdatingRegression" line="65"/>
                <declaration name="xAll" type="double[][]" line="66"/>
                <declaration name="y" type="double[]" line="67"/>
                <scope line="68"/>
                <scope line="76"/>
                <scope line="80"/>
                <scope line="83"/>
            </method>
            <method name="testNegativeTestAddObs" type="void" line="90">
                <comment line="112">
                    now we try it without an intercept                    
                </comment>
                <declaration name="instance" type="MillerUpdatingRegression" line="91"/>
                <scope line="92"/>
                <scope line="95"/>
                <scope line="96"/>
                <scope line="99"/>
                <scope line="102"/>
                <scope line="103"/>
                <scope line="106"/>
                <scope line="108"/>
                <scope line="114"/>
                <scope line="117"/>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="124"/>
                <scope line="125"/>
                <scope line="128"/>
                <scope line="130"/>
            </method>
            <method name="testNegativeTestAddMultipleObs" type="void" line="136">
                <declaration name="instance" type="MillerUpdatingRegression" line="137"/>
                <scope line="138">
                    <declaration name="tst" type="double[][]" line="139"/>
                    <declaration name="y" type="double[]" line="140"/>
                </scope>
                <scope line="144"/>
                <scope line="145"/>
                <scope line="149">
                    <declaration name="tst" type="double[][]" line="150"/>
                    <declaration name="y" type="double[]" line="151"/>
                </scope>
                <scope line="155"/>
                <scope line="156"/>
            </method>
            <method name="testRegressAirlineConstantExternal" type="void" line="165">
                <declaration name="instance" type="MillerUpdatingRegression" line="166"/>
                <declaration name="x" type="double[][]" line="167"/>
                <declaration name="y" type="double[]" line="168"/>
                <scope line="169"/>
                <scope line="179">
                    <declaration name="result" type="RegressionResults" line="180"/>
                </scope>
                <scope line="192"/>
            </method>
            <method name="testRegressAirlineConstantInternal" type="void" line="198">
                <declaration name="instance" type="MillerUpdatingRegression" line="199"/>
                <declaration name="x" type="double[][]" line="200"/>
                <declaration name="y" type="double[]" line="201"/>
                <scope line="202"/>
                <scope line="211">
                    <declaration name="result" type="RegressionResults" line="212"/>
                </scope>
                <scope line="225"/>
            </method>
            <method name="testFilippelli" type="void" line="231">
                <comment line="322">
                    tmp[1] = tmp[0] * tmp[0];                    
                </comment>
                <comment line="323">
                    tmp[2] = tmp[0] * tmp[1]; //^3                    
                </comment>
                <comment line="324">
                    tmp[3] = tmp[1] * tmp[1]; //^4                    
                </comment>
                <comment line="325">
                    tmp[4] = tmp[2] * tmp[1]; //^5                    
                </comment>
                <comment line="326">
                    tmp[5] = tmp[2] * tmp[2]; //^6                    
                </comment>
                <comment line="327">
                    tmp[6] = tmp[2] * tmp[3]; //^7                    
                </comment>
                <comment line="328">
                    tmp[7] = tmp[3] * tmp[3]; //^8                    
                </comment>
                <comment line="329">
                    tmp[8] = tmp[4] * tmp[3]; //^9                    
                </comment>
                <comment line="330">
                    tmp[9] = tmp[4] * tmp[4]; //^10                    
                </comment>
                <comment line="358">
                                        
                </comment>
                <comment line="359">
                                        
                </comment>
                <comment line="374">
                                        
                </comment>
                <declaration name="data" type="double[]" line="232"/>
                <declaration name="model" type="MillerUpdatingRegression" line="316"/>
                <declaration name="off" type="int" line="317"/>
                <declaration name="tmp" type="double[]" line="318"/>
                <declaration name="nobs" type="int" line="319"/>
                <scope line="320"/>
                <declaration name="result" type="RegressionResults" line="343"/>
                <declaration name="betaHat" type="double[]" line="344"/>
                <declaration name="se" type="double[]" line="360"/>
            </method>
            <method name="testWampler1" type="void" line="383">
                <comment line="426">
                                        
                </comment>
                <comment line="427">
                                        
                </comment>
                <comment line="433">
                                        
                </comment>
                <declaration name="data" type="double[]" line="384"/>
                <declaration name="model" type="MillerUpdatingRegression" line="407"/>
                <declaration name="off" type="int" line="408"/>
                <declaration name="tmp" type="double[]" line="409"/>
                <declaration name="nobs" type="int" line="410"/>
                <scope line="411"/>
                <declaration name="result" type="RegressionResults" line="420"/>
                <declaration name="betaHat" type="double[]" line="421"/>
                <declaration name="se" type="double[]" line="428"/>
            </method>
            <method name="testWampler2" type="void" line="443">
                <comment line="486">
                                        
                </comment>
                <comment line="487">
                                        
                </comment>
                <comment line="493">
                                        
                </comment>
                <declaration name="data" type="double[]" line="444"/>
                <declaration name="model" type="MillerUpdatingRegression" line="467"/>
                <declaration name="off" type="int" line="468"/>
                <declaration name="tmp" type="double[]" line="469"/>
                <declaration name="nobs" type="int" line="470"/>
                <scope line="471"/>
                <declaration name="result" type="RegressionResults" line="480"/>
                <declaration name="betaHat" type="double[]" line="481"/>
                <declaration name="se" type="double[]" line="488"/>
            </method>
            <method name="testWampler3" type="void" line="502">
                <comment line="544">
                                        
                </comment>
                <comment line="550">
                                        
                </comment>
                <declaration name="data" type="double[]" line="503"/>
                <declaration name="model" type="MillerUpdatingRegression" line="525"/>
                <declaration name="off" type="int" line="526"/>
                <declaration name="tmp" type="double[]" line="527"/>
                <declaration name="nobs" type="int" line="528"/>
                <scope line="529"/>
                <declaration name="result" type="RegressionResults" line="538"/>
                <declaration name="betaHat" type="double[]" line="539"/>
                <declaration name="se" type="double[]" line="545"/>
            </method>
            <method name="testWampler4" type="void" line="559">
                <comment line="601">
                                        
                </comment>
                <comment line="602">
                                        
                </comment>
                <comment line="608">
                                        
                </comment>
                <declaration name="data" type="double[]" line="560"/>
                <declaration name="model" type="MillerUpdatingRegression" line="582"/>
                <declaration name="off" type="int" line="583"/>
                <declaration name="tmp" type="double[]" line="584"/>
                <declaration name="nobs" type="int" line="585"/>
                <scope line="586"/>
                <declaration name="result" type="RegressionResults" line="595"/>
                <declaration name="betaHat" type="double[]" line="596"/>
                <declaration name="se" type="double[]" line="603"/>
            </method>
            <javadoc line="617">
                Test Longley dataset against certified values provided by NIST.
                  Data Source: J. Longley (1967) &quot;An Appraisal of Least Squares
                  Programs for the Electronic Computer from the Point of View of the User&quot;
                  Journal of the American Statistical Association, vol. 62. September,
                  pp. 819-841.
                  Certified values (and data) are from NIST:
                  http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat                
            </javadoc>
            <method name="testLongly" type="void" line="628">
                <comment line="629">
                    Y values are first, then independent vars                    
                </comment>
                <comment line="630">
                    Each row is one observation                    
                </comment>
                <comment line="653">
                    Estimate the model                    
                </comment>
                <comment line="663">
                    Check expected beta values from NIST                    
                </comment>
                <comment line="670">
                                        
                </comment>
                <comment line="672">
                    Check standard errors from NIST                    
                </comment>
                <comment line="681">
                                        
                </comment>
                <comment line="682">
                    Check R-Square statistics against R                    
                </comment>
                <comment line="685">
                                        
                </comment>
                <comment line="686">
                                        
                </comment>
                <comment line="687">
                    // Estimate model without intercept                    
                </comment>
                <comment line="695">
                    Check expected beta values from R                    
                </comment>
                <comment line="702">
                                        
                </comment>
                <comment line="703">
                    Check standard errors from R                    
                </comment>
                <comment line="708">
                                        
                </comment>
                <comment line="710">
                    // Check R-Square statistics against R                    
                </comment>
                <declaration name="design" type="double[]" line="631"/>
                <declaration name="nobs" type="int" line="650"/>
                <declaration name="nvars" type="int" line="651"/>
                <declaration name="model" type="MillerUpdatingRegression" line="654"/>
                <declaration name="off" type="int" line="655"/>
                <declaration name="tmp" type="double[]" line="656"/>
                <scope line="657"/>
                <declaration name="result" type="RegressionResults" line="664"/>
                <declaration name="betaHat" type="double[]" line="665"/>
                <declaration name="errors" type="double[]" line="673"/>
                <scope line="690"/>
            </method>
            <method name="testOneRedundantColumn" type="void" line="757">
                <declaration name="instance" type="MillerUpdatingRegression" line="758"/>
                <declaration name="instance2" type="MillerUpdatingRegression" line="759"/>
                <declaration name="x" type="double[][]" line="760"/>
                <declaration name="x2" type="double[][]" line="761"/>
                <declaration name="y" type="double[]" line="762"/>
                <scope line="763"/>
                <declaration name="result" type="RegressionResults" line="781"/>
                <declaration name="resultRedundant" type="RegressionResults" line="785"/>
                <declaration name="beta" type="double[]" line="787"/>
                <declaration name="betar" type="double[]" line="788"/>
                <declaration name="se" type="double[]" line="789"/>
                <declaration name="ser" type="double[]" line="790"/>
                <scope line="792">
                    <scope line="793"/>
                    <scope line="796"/>
                    <scope line="799">
                        <scope line="801"/>
                    </scope>
                </scope>
            </method>
            <method name="testThreeRedundantColumn" type="void" line="816">
                <declaration name="instance" type="MillerUpdatingRegression" line="818"/>
                <declaration name="instance2" type="MillerUpdatingRegression" line="819"/>
                <declaration name="x" type="double[][]" line="820"/>
                <declaration name="x2" type="double[][]" line="821"/>
                <declaration name="y" type="double[]" line="822"/>
                <scope line="823"/>
                <declaration name="result" type="RegressionResults" line="843"/>
                <declaration name="resultRedundant" type="RegressionResults" line="847"/>
                <declaration name="beta" type="double[]" line="849"/>
                <declaration name="betar" type="double[]" line="850"/>
                <declaration name="se" type="double[]" line="851"/>
                <declaration name="ser" type="double[]" line="852"/>
                <scope line="854"/>
                <scope line="857"/>
                <scope line="860"/>
                <scope line="863"/>
                <scope line="867"/>
                <scope line="870"/>
                <scope line="873"/>
                <scope line="876"/>
                <scope line="881"/>
                <scope line="885"/>
                <scope line="889"/>
                <scope line="893"/>
                <scope line="897"/>
                <scope line="901"/>
                <scope line="905"/>
                <scope line="910"/>
                <scope line="914"/>
                <scope line="919"/>
            </method>
            <method name="testPCorr" type="void" line="931">
                <declaration name="instance" type="MillerUpdatingRegression" line="932"/>
                <declaration name="x" type="double[][]" line="933"/>
                <declaration name="y" type="double[]" line="934"/>
                <declaration name="cp" type="double[]" line="935"/>
                <declaration name="yxcorr" type="double[]" line="936"/>
                <declaration name="diag" type="double[]" line="937"/>
                <declaration name="sumysq" type="double" line="938"/>
                <declaration name="off" type="int" line="939"/>
                <scope line="940">
                    <scope line="948">
                        <declaration name="tmp" type="double" line="949"/>
                        <scope line="950"/>
                    </scope>
                </scope>
                <declaration name="pearson" type="PearsonsCorrelation" line="957"/>
                <declaration name="corr" type="RealMatrix" line="958"/>
                <scope line="960"/>
                <declaration name="pc" type="double[]" line="965"/>
                <declaration name="idx" type="int" line="966"/>
                <declaration name="off2" type="int" line="968"/>
                <scope line="969">
                    <scope line="970">
                        <scope line="971"/>
                    </scope>
                    <scope line="978"/>
                </scope>
                <declaration name="pc2" type="double[]" line="982"/>
                <scope line="986">
                    <scope line="987">
                        <scope line="988"/>
                    </scope>
                </scope>
                <declaration name="pc3" type="double[]" line="994"/>
                <scope line="995"/>
            </method>
            <method name="testHdiag" type="void" line="1002">
                <declaration name="instance" type="MillerUpdatingRegression" line="1003"/>
                <declaration name="x" type="double[][]" line="1004"/>
                <declaration name="y" type="double[]" line="1005"/>
                <scope line="1006"/>
                <declaration name="ols" type="OLSMultipleLinearRegression" line="1015"/>
                <declaration name="rm" type="RealMatrix" line="1019"/>
                <scope line="1020"/>
            </method>
            <method name="testHdiagConstant" type="void" line="1026">
                <declaration name="instance" type="MillerUpdatingRegression" line="1027"/>
                <declaration name="x" type="double[][]" line="1028"/>
                <declaration name="y" type="double[]" line="1029"/>
                <scope line="1030"/>
                <declaration name="ols" type="OLSMultipleLinearRegression" line="1038"/>
                <declaration name="rm" type="RealMatrix" line="1042"/>
                <scope line="1043"/>
            </method>
            <method name="testSubsetRegression" type="void" line="1051">
                <declaration name="instance" type="MillerUpdatingRegression" line="1053"/>
                <declaration name="redRegression" type="MillerUpdatingRegression" line="1054"/>
                <declaration name="x" type="double[][]" line="1055"/>
                <declaration name="xReduced" type="double[][]" line="1056"/>
                <declaration name="y" type="double[]" line="1057"/>
                <scope line="1058"/>
                <declaration name="resultsInstance" type="RegressionResults" line="1074"/>
                <declaration name="resultsReduced" type="RegressionResults" line="1075"/>
            </method>
        </class>
    </source>