<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.Retry"/>
        <import package="org.apache.commons.math3.RetryRunner"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.InitialGuess"/>
        <import package="org.apache.commons.math3.optimization.SimpleBounds"/>
        <import package="org.apache.commons.math3.random.MersenneTwister"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.runner.RunWith"/>
        <class name="CMAESOptimizerTest" line="24">
            <javadoc line="24">
                Test for {@link CMAESOptimizer}.                
            </javadoc>
            <declaration name="DIM" type="int" line="28"/>
            <declaration name="LAMBDA" type="int" line="29"/>
            <method name="testInitOutofbounds1" type="void" line="30">
                <declaration name="startPoint" type="double[]" line="31"/>
                <declaration name="insigma" type="double[]" line="32"/>
                <declaration name="boundaries" type="double[][]" line="33"/>
                <declaration name="expected" type="PointValuePair" line="34"/>
            </method>
            <method name="testInitOutofbounds2" type="void" line="37">
                <declaration name="startPoint" type="double[]" line="38"/>
                <declaration name="insigma" type="double[]" line="39"/>
                <declaration name="boundaries" type="double[][]" line="40"/>
                <declaration name="expected" type="PointValuePair" line="41"/>
            </method>
            <method name="testBoundariesDimensionMismatch" type="void" line="44">
                <declaration name="startPoint" type="double[]" line="45"/>
                <declaration name="insigma" type="double[]" line="46"/>
                <declaration name="boundaries" type="double[][]" line="47"/>
                <declaration name="expected" type="PointValuePair" line="48"/>
            </method>
            <method name="testInputSigmaNegative" type="void" line="51">
                <declaration name="startPoint" type="double[]" line="52"/>
                <declaration name="insigma" type="double[]" line="53"/>
                <declaration name="boundaries" type="double[][]" line="54"/>
                <declaration name="expected" type="PointValuePair" line="55"/>
            </method>
            <method name="testInputSigmaOutOfRange" type="void" line="58">
                <declaration name="startPoint" type="double[]" line="59"/>
                <declaration name="insigma" type="double[]" line="60"/>
                <declaration name="boundaries" type="double[][]" line="61"/>
                <declaration name="expected" type="PointValuePair" line="62"/>
            </method>
            <method name="testInputSigmaDimensionMismatch" type="void" line="65">
                <declaration name="startPoint" type="double[]" line="66"/>
                <declaration name="insigma" type="double[]" line="67"/>
                <declaration name="boundaries" type="double[][]" line="68"/>
                <declaration name="expected" type="PointValuePair" line="69"/>
            </method>
            <method name="testRosen" type="void" line="72">
                <declaration name="startPoint" type="double[]" line="73"/>
                <declaration name="insigma" type="double[]" line="74"/>
                <declaration name="boundaries" type="double[][]" line="75"/>
                <declaration name="expected" type="PointValuePair" line="76"/>
            </method>
            <method name="testMaximize" type="void" line="80">
                <declaration name="startPoint" type="double[]" line="81"/>
                <declaration name="insigma" type="double[]" line="82"/>
                <declaration name="boundaries" type="double[][]" line="83"/>
                <declaration name="expected" type="PointValuePair" line="84"/>
            </method>
            <method name="testEllipse" type="void" line="91">
                <declaration name="startPoint" type="double[]" line="92"/>
                <declaration name="insigma" type="double[]" line="93"/>
                <declaration name="boundaries" type="double[][]" line="94"/>
                <declaration name="expected" type="PointValuePair" line="95"/>
            </method>
            <method name="testElliRotated" type="void" line="99">
                <declaration name="startPoint" type="double[]" line="100"/>
                <declaration name="insigma" type="double[]" line="101"/>
                <declaration name="boundaries" type="double[][]" line="102"/>
                <declaration name="expected" type="PointValuePair" line="103"/>
            </method>
            <method name="testCigar" type="void" line="107">
                <declaration name="startPoint" type="double[]" line="108"/>
                <declaration name="insigma" type="double[]" line="109"/>
                <declaration name="boundaries" type="double[][]" line="110"/>
                <declaration name="expected" type="PointValuePair" line="111"/>
            </method>
            <method name="testCigarWithBoundaries" type="void" line="115">
                <declaration name="startPoint" type="double[]" line="116"/>
                <declaration name="insigma" type="double[]" line="117"/>
                <declaration name="boundaries" type="double[][]" line="118"/>
                <declaration name="expected" type="PointValuePair" line="119"/>
            </method>
            <method name="testTwoAxes" type="void" line="123">
                <declaration name="startPoint" type="double[]" line="124"/>
                <declaration name="insigma" type="double[]" line="125"/>
                <declaration name="boundaries" type="double[][]" line="126"/>
                <declaration name="expected" type="PointValuePair" line="127"/>
            </method>
            <method name="testCigTab" type="void" line="131">
                <declaration name="startPoint" type="double[]" line="132"/>
                <declaration name="insigma" type="double[]" line="133"/>
                <declaration name="boundaries" type="double[][]" line="134"/>
                <declaration name="expected" type="PointValuePair" line="135"/>
            </method>
            <method name="testSphere" type="void" line="139">
                <declaration name="startPoint" type="double[]" line="140"/>
                <declaration name="insigma" type="double[]" line="141"/>
                <declaration name="boundaries" type="double[][]" line="142"/>
                <declaration name="expected" type="PointValuePair" line="143"/>
            </method>
            <method name="testTablet" type="void" line="147">
                <declaration name="startPoint" type="double[]" line="148"/>
                <declaration name="insigma" type="double[]" line="149"/>
                <declaration name="boundaries" type="double[][]" line="150"/>
                <declaration name="expected" type="PointValuePair" line="151"/>
            </method>
            <method name="testDiffPow" type="void" line="155">
                <declaration name="startPoint" type="double[]" line="156"/>
                <declaration name="insigma" type="double[]" line="157"/>
                <declaration name="boundaries" type="double[][]" line="158"/>
                <declaration name="expected" type="PointValuePair" line="159"/>
            </method>
            <method name="testSsDiffPow" type="void" line="163">
                <declaration name="startPoint" type="double[]" line="164"/>
                <declaration name="insigma" type="double[]" line="165"/>
                <declaration name="boundaries" type="double[][]" line="166"/>
                <declaration name="expected" type="PointValuePair" line="167"/>
            </method>
            <method name="testAckley" type="void" line="171">
                <declaration name="startPoint" type="double[]" line="172"/>
                <declaration name="insigma" type="double[]" line="173"/>
                <declaration name="boundaries" type="double[][]" line="174"/>
                <declaration name="expected" type="PointValuePair" line="175"/>
            </method>
            <method name="testRastrigin" type="void" line="179">
                <declaration name="startPoint" type="double[]" line="180"/>
                <declaration name="insigma" type="double[]" line="181"/>
                <declaration name="boundaries" type="double[][]" line="182"/>
                <declaration name="expected" type="PointValuePair" line="183"/>
            </method>
            <method name="testConstrainedRosen" type="void" line="187">
                <declaration name="startPoint" type="double[]" line="188"/>
                <declaration name="insigma" type="double[]" line="189"/>
                <declaration name="boundaries" type="double[][]" line="190"/>
                <declaration name="expected" type="PointValuePair" line="191"/>
            </method>
            <method name="testDiagonalRosen" type="void" line="195">
                <declaration name="startPoint" type="double[]" line="196"/>
                <declaration name="insigma" type="double[]" line="197"/>
                <declaration name="boundaries" type="double[][]" line="198"/>
                <declaration name="expected" type="PointValuePair" line="199"/>
            </method>
            <method name="testMath864" type="void" line="202">
                <declaration name="optimizer" type="CMAESOptimizer" line="203"/>
                <anonymous_class line="204">
                    <method name="value" type="double" line="205">
                        <params>
                            <param name="parameters" type="double[]"/>
                        </params>
                        <declaration name="target" type="double" line="206"/>
                        <declaration name="error" type="double" line="207"/>
                    </method>
                </anonymous_class>
                <declaration name="fitnessFunction" type="MultivariateFunction" line="204"/>
                <declaration name="start" type="double[]" line="212"/>
                <declaration name="lower" type="double[]" line="213"/>
                <declaration name="upper" type="double[]" line="214"/>
                <declaration name="result" type="double[]" line="215"/>
            </method>
            <javadoc line="218">
                Cf. MATH-867                
            </javadoc>
            <method name="testFitAccuracyDependsOnBoundary" type="void" line="221">
                <declaration name="optimizer" type="CMAESOptimizer" line="222"/>
                <anonymous_class line="223">
                    <method name="value" type="double" line="224">
                        <params>
                            <param name="parameters" type="double[]"/>
                        </params>
                        <declaration name="target" type="double" line="225"/>
                        <declaration name="error" type="double" line="226"/>
                    </method>
                </anonymous_class>
                <declaration name="fitnessFunction" type="MultivariateFunction" line="223"/>
                <declaration name="start" type="double[]" line="231"/>
                <declaration name="result" type="PointValuePair" line="232"/>
                <declaration name="resNoBound" type="double" line="233"/>
                <declaration name="lower" type="double[]" line="234"/>
                <declaration name="upper" type="double[]" line="235"/>
                <declaration name="resNearLo" type="double" line="237"/>
                <declaration name="resNearHi" type="double" line="241"/>
            </method>
            <javadoc line="245">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    inSigma Individual input sigma.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    lambda Population size used for offspring.                    
                </param>
                <param>
                    isActive Covariance update mechanism.                    
                </param>
                <param>
                    diagonalOnly Simplified covariance update.                    
                </param>
                <param>
                    stopValue Termination criteria for optimization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="260">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="inSigma" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="lambda" type="int"/>
                    <param name="isActive" type="boolean"/>
                    <param name="diagonalOnly" type="int"/>
                    <param name="stopValue" type="double"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                </params>
                <declaration name="dim" type="int" line="261"/>
                <declaration name="optim" type="CMAESOptimizer" line="262"/>
                <declaration name="lB" type="double[]" line="263"/>
                <declaration name="uB" type="double[]" line="264"/>
                <declaration name="result" type="PointValuePair" line="265"/>
                <scope line="267"/>
            </method>
            <method name="point" type="double[]" line="271">
                <params>
                    <param name="n" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="ds" type="double[]" line="272"/>
            </method>
            <method name="boundaries" type="double[][]" line="276">
                <params>
                    <param name="dim" type="int"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <declaration name="boundaries" type="double[][]" line="277"/>
            </method>
            <class name="Sphere" line="282">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="283">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="284"/>
                </method>
            </class>
            <class name="Cigar" line="289">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="290"/>
                <method name="Cigar" type="constructor" line="291"/>
                <method name="Cigar" type="constructor" line="294">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="297">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="298"/>
                </method>
            </class>
            <class name="Tablet" line="303">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="304"/>
                <method name="Tablet" type="constructor" line="305"/>
                <method name="Tablet" type="constructor" line="308">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="311">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="312"/>
                </method>
            </class>
            <class name="CigTab" line="317">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="318"/>
                <method name="CigTab" type="constructor" line="319"/>
                <method name="CigTab" type="constructor" line="322">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="325">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="end" type="int" line="326"/>
                    <declaration name="f" type="double" line="327"/>
                </method>
            </class>
            <class name="TwoAxes" line="332">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="333"/>
                <method name="TwoAxes" type="constructor" line="334"/>
                <method name="TwoAxes" type="constructor" line="337">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="340">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="341"/>
                </method>
            </class>
            <class name="ElliRotated" line="346">
                <implements interface="MultivariateFunction"/>
                <declaration name="B" type="Basis" line="347"/>
                <declaration name="factor" type="double" line="348"/>
                <method name="ElliRotated" type="constructor" line="349"/>
                <method name="ElliRotated" type="constructor" line="352">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="355">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="356"/>
                </method>
            </class>
            <class name="Elli" line="362">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="363"/>
                <method name="Elli" type="constructor" line="364"/>
                <method name="Elli" type="constructor" line="367">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="370">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="371"/>
                </method>
            </class>
            <class name="MinusElli" line="376">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="377">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                </method>
            </class>
            <class name="DiffPow" line="381">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="382">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="383"/>
                </method>
            </class>
            <class name="SsDiffPow" line="388">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="389">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="390"/>
                </method>
            </class>
            <class name="Rosen" line="394">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="395">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="396"/>
                </method>
            </class>
            <class name="Ackley" line="401">
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="402"/>
                <method name="Ackley" type="constructor" line="403">
                    <params>
                        <param name="axra" type="double"/>
                    </params>
                </method>
                <method name="Ackley" type="constructor" line="406"/>
                <method name="value" type="double" line="409">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="410"/>
                    <declaration name="res2" type="double" line="411"/>
                    <declaration name="fac" type="double" line="412"/>
                    <scope line="413"/>
                </method>
            </class>
            <class name="Rastrigin" line="422">
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="423"/>
                <declaration name="amplitude" type="double" line="424"/>
                <method name="Rastrigin" type="constructor" line="425"/>
                <method name="Rastrigin" type="constructor" line="428">
                    <params>
                        <param name="axisratio" type="double"/>
                        <param name="amplitude" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="432">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="433"/>
                    <declaration name="fac" type="double" line="434"/>
                    <scope line="435"/>
                </method>
            </class>
            <class name="Basis" line="443">
                <declaration name="basis" type="double[][]" line="444"/>
                <declaration name="rand" type="Random" line="445"/>
                <method name="Rotate" type="double[]" line="446">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="y" type="double[]" line="448"/>
                    <scope line="449"/>
                </method>
                <method name="GenBasis" type="void" line="455">
                    <params>
                        <param name="DIM" type="int"/>
                    </params>
                    <declaration name="sp" type="double" line="457"/>
                    <declaration name="i" type="int" line="458"/>
                    <scope line="460">
                        <scope line="462"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>