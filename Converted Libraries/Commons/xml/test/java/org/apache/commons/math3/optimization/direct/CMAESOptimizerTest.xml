<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.Retry"/>
        <import package="org.apache.commons.math3.RetryRunner"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.InitialGuess"/>
        <import package="org.apache.commons.math3.optimization.SimpleBounds"/>
        <import package="org.apache.commons.math3.random.MersenneTwister"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.runner.RunWith"/>
        <class name="CMAESOptimizerTest" line="43">
            <javadoc line="43">
                Test for {@link CMAESOptimizer}.                
            </javadoc>
            <declaration name="DIM" type="int" line="49"/>
            <declaration name="LAMBDA" type="int" line="50"/>
            <method name="testInitOutofbounds1" type="void" line="53">
                <declaration name="startPoint" type="double[]" line="54"/>
                <declaration name="insigma" type="double[]" line="55"/>
                <declaration name="boundaries" type="double[][]" line="56"/>
                <declaration name="expected" type="PointValuePair" line="57"/>
            </method>
            <method name="testInitOutofbounds2" type="void" line="64">
                <declaration name="startPoint" type="double[]" line="65"/>
                <declaration name="insigma" type="double[]" line="66"/>
                <declaration name="boundaries" type="double[][]" line="67"/>
                <declaration name="expected" type="PointValuePair" line="68"/>
            </method>
            <method name="testBoundariesDimensionMismatch" type="void" line="76">
                <declaration name="startPoint" type="double[]" line="77"/>
                <declaration name="insigma" type="double[]" line="78"/>
                <declaration name="boundaries" type="double[][]" line="79"/>
                <declaration name="expected" type="PointValuePair" line="80"/>
            </method>
            <method name="testInputSigmaNegative" type="void" line="88">
                <declaration name="startPoint" type="double[]" line="89"/>
                <declaration name="insigma" type="double[]" line="90"/>
                <declaration name="boundaries" type="double[][]" line="91"/>
                <declaration name="expected" type="PointValuePair" line="92"/>
            </method>
            <method name="testInputSigmaOutOfRange" type="void" line="100">
                <declaration name="startPoint" type="double[]" line="101"/>
                <declaration name="insigma" type="double[]" line="102"/>
                <declaration name="boundaries" type="double[][]" line="103"/>
                <declaration name="expected" type="PointValuePair" line="104"/>
            </method>
            <method name="testInputSigmaDimensionMismatch" type="void" line="112">
                <declaration name="startPoint" type="double[]" line="113"/>
                <declaration name="insigma" type="double[]" line="114"/>
                <declaration name="boundaries" type="double[][]" line="115"/>
                <declaration name="expected" type="PointValuePair" line="116"/>
            </method>
            <method name="testRosen" type="void" line="125">
                <declaration name="startPoint" type="double[]" line="126"/>
                <declaration name="insigma" type="double[]" line="127"/>
                <declaration name="boundaries" type="double[][]" line="128"/>
                <declaration name="expected" type="PointValuePair" line="129"/>
            </method>
            <method name="testMaximize" type="void" line="141">
                <declaration name="startPoint" type="double[]" line="142"/>
                <declaration name="insigma" type="double[]" line="143"/>
                <declaration name="boundaries" type="double[][]" line="144"/>
                <declaration name="expected" type="PointValuePair" line="145"/>
            </method>
            <method name="testEllipse" type="void" line="161">
                <declaration name="startPoint" type="double[]" line="162"/>
                <declaration name="insigma" type="double[]" line="163"/>
                <declaration name="boundaries" type="double[][]" line="164"/>
                <declaration name="expected" type="PointValuePair" line="165"/>
            </method>
            <method name="testElliRotated" type="void" line="176">
                <declaration name="startPoint" type="double[]" line="177"/>
                <declaration name="insigma" type="double[]" line="178"/>
                <declaration name="boundaries" type="double[][]" line="179"/>
                <declaration name="expected" type="PointValuePair" line="180"/>
            </method>
            <method name="testCigar" type="void" line="191">
                <declaration name="startPoint" type="double[]" line="192"/>
                <declaration name="insigma" type="double[]" line="193"/>
                <declaration name="boundaries" type="double[][]" line="194"/>
                <declaration name="expected" type="PointValuePair" line="195"/>
            </method>
            <method name="testCigarWithBoundaries" type="void" line="206">
                <declaration name="startPoint" type="double[]" line="207"/>
                <declaration name="insigma" type="double[]" line="208"/>
                <declaration name="boundaries" type="double[][]" line="209"/>
                <declaration name="expected" type="PointValuePair" line="210"/>
            </method>
            <method name="testTwoAxes" type="void" line="221">
                <declaration name="startPoint" type="double[]" line="222"/>
                <declaration name="insigma" type="double[]" line="223"/>
                <declaration name="boundaries" type="double[][]" line="224"/>
                <declaration name="expected" type="PointValuePair" line="225"/>
            </method>
            <method name="testCigTab" type="void" line="236">
                <declaration name="startPoint" type="double[]" line="237"/>
                <declaration name="insigma" type="double[]" line="238"/>
                <declaration name="boundaries" type="double[][]" line="239"/>
                <declaration name="expected" type="PointValuePair" line="240"/>
            </method>
            <method name="testSphere" type="void" line="251">
                <declaration name="startPoint" type="double[]" line="252"/>
                <declaration name="insigma" type="double[]" line="253"/>
                <declaration name="boundaries" type="double[][]" line="254"/>
                <declaration name="expected" type="PointValuePair" line="255"/>
            </method>
            <method name="testTablet" type="void" line="266">
                <declaration name="startPoint" type="double[]" line="267"/>
                <declaration name="insigma" type="double[]" line="268"/>
                <declaration name="boundaries" type="double[][]" line="269"/>
                <declaration name="expected" type="PointValuePair" line="270"/>
            </method>
            <method name="testDiffPow" type="void" line="281">
                <declaration name="startPoint" type="double[]" line="282"/>
                <declaration name="insigma" type="double[]" line="283"/>
                <declaration name="boundaries" type="double[][]" line="284"/>
                <declaration name="expected" type="PointValuePair" line="285"/>
            </method>
            <method name="testSsDiffPow" type="void" line="296">
                <declaration name="startPoint" type="double[]" line="297"/>
                <declaration name="insigma" type="double[]" line="298"/>
                <declaration name="boundaries" type="double[][]" line="299"/>
                <declaration name="expected" type="PointValuePair" line="300"/>
            </method>
            <method name="testAckley" type="void" line="311">
                <declaration name="startPoint" type="double[]" line="312"/>
                <declaration name="insigma" type="double[]" line="313"/>
                <declaration name="boundaries" type="double[][]" line="314"/>
                <declaration name="expected" type="PointValuePair" line="315"/>
            </method>
            <method name="testRastrigin" type="void" line="326">
                <declaration name="startPoint" type="double[]" line="327"/>
                <declaration name="insigma" type="double[]" line="328"/>
                <declaration name="boundaries" type="double[][]" line="329"/>
                <declaration name="expected" type="PointValuePair" line="330"/>
            </method>
            <method name="testConstrainedRosen" type="void" line="341">
                <declaration name="startPoint" type="double[]" line="342"/>
                <declaration name="insigma" type="double[]" line="343"/>
                <declaration name="boundaries" type="double[][]" line="344"/>
                <declaration name="expected" type="PointValuePair" line="345"/>
            </method>
            <method name="testDiagonalRosen" type="void" line="356">
                <declaration name="startPoint" type="double[]" line="357"/>
                <declaration name="insigma" type="double[]" line="358"/>
                <declaration name="boundaries" type="double[][]" line="359"/>
                <declaration name="expected" type="PointValuePair" line="360"/>
            </method>
            <method name="testMath864" type="void" line="368">
                <declaration name="optimizer" type="CMAESOptimizer" line="369"/>
                <anonymous_class line="370">
                    <method name="value" type="double" line="371">
                        <params>
                            <param name="parameters" type="double[]"/>
                        </params>
                        <declaration name="target" type="double" line="372"/>
                        <declaration name="error" type="double" line="373"/>
                    </method>
                </anonymous_class>
                <declaration name="fitnessFunction" type="MultivariateFunction" line="370"/>
                <declaration name="start" type="double[]" line="378"/>
                <declaration name="lower" type="double[]" line="379"/>
                <declaration name="upper" type="double[]" line="380"/>
                <declaration name="result" type="double[]" line="381"/>
            </method>
            <javadoc line="387">
                Cf. MATH-867                
            </javadoc>
            <method name="testFitAccuracyDependsOnBoundary" type="void" line="391">
                <comment line="404">
                    No bounds.                    
                </comment>
                <comment line="409">
                    Optimum is near the lower bound.                    
                </comment>
                <comment line="416">
                    Optimum is near the upper bound.                    
                </comment>
                <comment line="423">
                    System.out.println(&quot;resNoBound=&quot; + resNoBound +
                                        &quot; resNearLo=&quot; + resNearLo +
                                        &quot; resNearHi=&quot; + resNearHi);                    
                </comment>
                <comment line="427">
                    The two values currently differ by a substantial amount, indicating that
                     the bounds definition can prevent reaching the optimum.                    
                </comment>
                <declaration name="optimizer" type="CMAESOptimizer" line="392"/>
                <anonymous_class line="393">
                    <method name="value" type="double" line="394">
                        <params>
                            <param name="parameters" type="double[]"/>
                        </params>
                        <declaration name="target" type="double" line="395"/>
                        <declaration name="error" type="double" line="396"/>
                    </method>
                </anonymous_class>
                <declaration name="fitnessFunction" type="MultivariateFunction" line="393"/>
                <declaration name="start" type="double[]" line="401"/>
                <declaration name="result" type="PointValuePair" line="404"/>
                <declaration name="resNoBound" type="double" line="406"/>
                <declaration name="lower" type="double[]" line="409"/>
                <declaration name="upper" type="double[]" line="410"/>
                <declaration name="resNearLo" type="double" line="413"/>
                <declaration name="resNearHi" type="double" line="420"/>
            </method>
            <javadoc line="432">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    inSigma Individual input sigma.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    lambda Population size used for offspring.                    
                </param>
                <param>
                    isActive Covariance update mechanism.                    
                </param>
                <param>
                    diagonalOnly Simplified covariance update.                    
                </param>
                <param>
                    stopValue Termination criteria for optimization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="459">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="inSigma" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="lambda" type="int"/>
                    <param name="isActive" type="boolean"/>
                    <param name="diagonalOnly" type="int"/>
                    <param name="stopValue" type="double"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                </params>
                <comment line="462">
                    test diagonalOnly = 0 - slow but normally fewer feval#                    
                </comment>
                <comment line="477">
                    System.out.println(&quot;sol=&quot; + Arrays.toString(result.getPoint()));                    
                </comment>
                <declaration name="dim" type="int" line="460"/>
                <declaration name="optim" type="CMAESOptimizer" line="462"/>
                <declaration name="lB" type="double[]" line="464"/>
                <declaration name="uB" type="double[]" line="465"/>
                <declaration name="result" type="PointValuePair" line="466"/>
                <scope line="478"/>
            </method>
            <method name="point" type="double[]" line="483">
                <params>
                    <param name="n" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="ds" type="double[]" line="484"/>
            </method>
            <method name="boundaries" type="double[][]" line="490">
                <params>
                    <param name="dim" type="int"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <declaration name="boundaries" type="double[][]" line="491"/>
            </method>
            <class name="Sphere" line="499">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="501">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="502"/>
                </method>
            </class>
            <class name="Cigar" line="509">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="510"/>
                <method name="Cigar" type="constructor" line="512"/>
                <method name="Cigar" type="constructor" line="516">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="520">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="521"/>
                </method>
            </class>
            <class name="Tablet" line="528">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="529"/>
                <method name="Tablet" type="constructor" line="531"/>
                <method name="Tablet" type="constructor" line="535">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="539">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="540"/>
                </method>
            </class>
            <class name="CigTab" line="547">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="548"/>
                <method name="CigTab" type="constructor" line="550"/>
                <method name="CigTab" type="constructor" line="554">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="558">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="end" type="int" line="559"/>
                    <declaration name="f" type="double" line="560"/>
                </method>
            </class>
            <class name="TwoAxes" line="567">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="569"/>
                <method name="TwoAxes" type="constructor" line="571"/>
                <method name="TwoAxes" type="constructor" line="575">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="579">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="580"/>
                </method>
            </class>
            <class name="ElliRotated" line="587">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="B" type="Basis" line="588"/>
                <declaration name="factor" type="double" line="589"/>
                <method name="ElliRotated" type="constructor" line="591"/>
                <method name="ElliRotated" type="constructor" line="595">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="599">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="600"/>
                </method>
            </class>
            <class name="Elli" line="608">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="610"/>
                <method name="Elli" type="constructor" line="612"/>
                <method name="Elli" type="constructor" line="616">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="620">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="621"/>
                </method>
            </class>
            <class name="MinusElli" line="628">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="630">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                </method>
            </class>
            <class name="DiffPow" line="635">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="637">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="638"/>
                </method>
            </class>
            <class name="SsDiffPow" line="646">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="648">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="649"/>
                </method>
            </class>
            <class name="Rosen" line="654">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="656">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="657"/>
                </method>
            </class>
            <class name="Ackley" line="665">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="666"/>
                <method name="Ackley" type="constructor" line="668">
                    <params>
                        <param name="axra" type="double"/>
                    </params>
                </method>
                <method name="Ackley" type="constructor" line="672"/>
                <method name="value" type="double" line="676">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="677"/>
                    <declaration name="res2" type="double" line="678"/>
                    <declaration name="fac" type="double" line="679"/>
                    <scope line="680"/>
                </method>
            </class>
            <class name="Rastrigin" line="691">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="693"/>
                <declaration name="amplitude" type="double" line="694"/>
                <method name="Rastrigin" type="constructor" line="696"/>
                <method name="Rastrigin" type="constructor" line="700">
                    <params>
                        <param name="axisratio" type="double"/>
                        <param name="amplitude" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="705">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="706"/>
                    <declaration name="fac" type="double" line="707"/>
                    <scope line="708"/>
                </method>
            </class>
            <class name="Basis" line="719">
                <comment line="722">
                    use not always the same basis                    
                </comment>
                <declaration name="basis" type="double[][]" line="720"/>
                <declaration name="rand" type="Random" line="721"/>
                <method name="Rotate" type="double[]" line="723">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="y" type="double[]" line="725"/>
                    <scope line="726"/>
                </method>
                <method name="GenBasis" type="void" line="734">
                    <params>
                        <param name="DIM" type="int"/>
                    </params>
                    <comment line="742">
                                                
                    </comment>
                    <comment line="745">
                                                
                    </comment>
                    <comment line="748">
                                                
                    </comment>
                    <comment line="751">
                                                
                    </comment>
                    <comment line="753">
                                                
                    </comment>
                    <comment line="755">
                                                
                    </comment>
                    <comment line="757">
                                                
                    </comment>
                    <declaration name="sp" type="double" line="738"/>
                    <declaration name="i" type="int" line="739"/>
                    <scope line="743">
                        <scope line="748"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>