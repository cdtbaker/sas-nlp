<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.Retry"/>
        <import package="org.apache.commons.math3.RetryRunner"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.InitialGuess"/>
        <import package="org.apache.commons.math3.optimization.SimpleBounds"/>
        <import package="org.apache.commons.math3.random.MersenneTwister"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.runner.RunWith"/>
        <class name="CMAESOptimizerTest" line="40">
            <javadoc line="40">
                Test for {@link CMAESOptimizer}.                
            </javadoc>
            <declaration name="DIM" type="int" line="46"/>
            <declaration name="LAMBDA" type="int" line="47"/>
            <method name="testInitOutofbounds1" type="void" line="50">
                <declaration name="startPoint" type="double[]" line="51"/>
                <declaration name="insigma" type="double[]" line="52"/>
                <declaration name="boundaries" type="double[][]" line="53"/>
                <declaration name="expected" type="PointValuePair" line="54"/>
            </method>
            <method name="testInitOutofbounds2" type="void" line="61">
                <declaration name="startPoint" type="double[]" line="62"/>
                <declaration name="insigma" type="double[]" line="63"/>
                <declaration name="boundaries" type="double[][]" line="64"/>
                <declaration name="expected" type="PointValuePair" line="65"/>
            </method>
            <method name="testBoundariesDimensionMismatch" type="void" line="73">
                <declaration name="startPoint" type="double[]" line="74"/>
                <declaration name="insigma" type="double[]" line="75"/>
                <declaration name="boundaries" type="double[][]" line="76"/>
                <declaration name="expected" type="PointValuePair" line="77"/>
            </method>
            <method name="testInputSigmaNegative" type="void" line="85">
                <declaration name="startPoint" type="double[]" line="86"/>
                <declaration name="insigma" type="double[]" line="87"/>
                <declaration name="boundaries" type="double[][]" line="88"/>
                <declaration name="expected" type="PointValuePair" line="89"/>
            </method>
            <method name="testInputSigmaOutOfRange" type="void" line="97">
                <declaration name="startPoint" type="double[]" line="98"/>
                <declaration name="insigma" type="double[]" line="99"/>
                <declaration name="boundaries" type="double[][]" line="100"/>
                <declaration name="expected" type="PointValuePair" line="101"/>
            </method>
            <method name="testInputSigmaDimensionMismatch" type="void" line="109">
                <declaration name="startPoint" type="double[]" line="110"/>
                <declaration name="insigma" type="double[]" line="111"/>
                <declaration name="boundaries" type="double[][]" line="112"/>
                <declaration name="expected" type="PointValuePair" line="113"/>
            </method>
            <method name="testRosen" type="void" line="122">
                <declaration name="startPoint" type="double[]" line="123"/>
                <declaration name="insigma" type="double[]" line="124"/>
                <declaration name="boundaries" type="double[][]" line="125"/>
                <declaration name="expected" type="PointValuePair" line="126"/>
            </method>
            <method name="testMaximize" type="void" line="138">
                <declaration name="startPoint" type="double[]" line="139"/>
                <declaration name="insigma" type="double[]" line="140"/>
                <declaration name="boundaries" type="double[][]" line="141"/>
                <declaration name="expected" type="PointValuePair" line="142"/>
            </method>
            <method name="testEllipse" type="void" line="158">
                <declaration name="startPoint" type="double[]" line="159"/>
                <declaration name="insigma" type="double[]" line="160"/>
                <declaration name="boundaries" type="double[][]" line="161"/>
                <declaration name="expected" type="PointValuePair" line="162"/>
            </method>
            <method name="testElliRotated" type="void" line="173">
                <declaration name="startPoint" type="double[]" line="174"/>
                <declaration name="insigma" type="double[]" line="175"/>
                <declaration name="boundaries" type="double[][]" line="176"/>
                <declaration name="expected" type="PointValuePair" line="177"/>
            </method>
            <method name="testCigar" type="void" line="188">
                <declaration name="startPoint" type="double[]" line="189"/>
                <declaration name="insigma" type="double[]" line="190"/>
                <declaration name="boundaries" type="double[][]" line="191"/>
                <declaration name="expected" type="PointValuePair" line="192"/>
            </method>
            <method name="testCigarWithBoundaries" type="void" line="203">
                <declaration name="startPoint" type="double[]" line="204"/>
                <declaration name="insigma" type="double[]" line="205"/>
                <declaration name="boundaries" type="double[][]" line="206"/>
                <declaration name="expected" type="PointValuePair" line="207"/>
            </method>
            <method name="testTwoAxes" type="void" line="218">
                <declaration name="startPoint" type="double[]" line="219"/>
                <declaration name="insigma" type="double[]" line="220"/>
                <declaration name="boundaries" type="double[][]" line="221"/>
                <declaration name="expected" type="PointValuePair" line="222"/>
            </method>
            <method name="testCigTab" type="void" line="233">
                <declaration name="startPoint" type="double[]" line="234"/>
                <declaration name="insigma" type="double[]" line="235"/>
                <declaration name="boundaries" type="double[][]" line="236"/>
                <declaration name="expected" type="PointValuePair" line="237"/>
            </method>
            <method name="testSphere" type="void" line="248">
                <declaration name="startPoint" type="double[]" line="249"/>
                <declaration name="insigma" type="double[]" line="250"/>
                <declaration name="boundaries" type="double[][]" line="251"/>
                <declaration name="expected" type="PointValuePair" line="252"/>
            </method>
            <method name="testTablet" type="void" line="263">
                <declaration name="startPoint" type="double[]" line="264"/>
                <declaration name="insigma" type="double[]" line="265"/>
                <declaration name="boundaries" type="double[][]" line="266"/>
                <declaration name="expected" type="PointValuePair" line="267"/>
            </method>
            <method name="testDiffPow" type="void" line="278">
                <declaration name="startPoint" type="double[]" line="279"/>
                <declaration name="insigma" type="double[]" line="280"/>
                <declaration name="boundaries" type="double[][]" line="281"/>
                <declaration name="expected" type="PointValuePair" line="282"/>
            </method>
            <method name="testSsDiffPow" type="void" line="293">
                <declaration name="startPoint" type="double[]" line="294"/>
                <declaration name="insigma" type="double[]" line="295"/>
                <declaration name="boundaries" type="double[][]" line="296"/>
                <declaration name="expected" type="PointValuePair" line="297"/>
            </method>
            <method name="testAckley" type="void" line="308">
                <declaration name="startPoint" type="double[]" line="309"/>
                <declaration name="insigma" type="double[]" line="310"/>
                <declaration name="boundaries" type="double[][]" line="311"/>
                <declaration name="expected" type="PointValuePair" line="312"/>
            </method>
            <method name="testRastrigin" type="void" line="323">
                <declaration name="startPoint" type="double[]" line="324"/>
                <declaration name="insigma" type="double[]" line="325"/>
                <declaration name="boundaries" type="double[][]" line="326"/>
                <declaration name="expected" type="PointValuePair" line="327"/>
            </method>
            <method name="testConstrainedRosen" type="void" line="338">
                <declaration name="startPoint" type="double[]" line="339"/>
                <declaration name="insigma" type="double[]" line="340"/>
                <declaration name="boundaries" type="double[][]" line="341"/>
                <declaration name="expected" type="PointValuePair" line="342"/>
            </method>
            <method name="testDiagonalRosen" type="void" line="353">
                <declaration name="startPoint" type="double[]" line="354"/>
                <declaration name="insigma" type="double[]" line="355"/>
                <declaration name="boundaries" type="double[][]" line="356"/>
                <declaration name="expected" type="PointValuePair" line="357"/>
            </method>
            <method name="testMath864" type="void" line="365">
                <declaration name="optimizer" type="CMAESOptimizer" line="366"/>
                <anonymous_class line="367">
                    <method name="value" type="double" line="368">
                        <params>
                            <param name="parameters" type="double[]"/>
                        </params>
                        <declaration name="target" type="double" line="369"/>
                        <declaration name="error" type="double" line="370"/>
                    </method>
                </anonymous_class>
                <declaration name="fitnessFunction" type="MultivariateFunction" line="367"/>
                <declaration name="start" type="double[]" line="375"/>
                <declaration name="lower" type="double[]" line="376"/>
                <declaration name="upper" type="double[]" line="377"/>
                <declaration name="result" type="double[]" line="378"/>
            </method>
            <javadoc line="384">
                Cf. MATH-867                
            </javadoc>
            <method name="testFitAccuracyDependsOnBoundary" type="void" line="388">
                <comment line="401">
                    No bounds.                    
                </comment>
                <comment line="406">
                    Optimum is near the lower bound.                    
                </comment>
                <comment line="413">
                    Optimum is near the upper bound.                    
                </comment>
                <comment line="420">
                    System.out.println(&quot;resNoBound=&quot; + resNoBound +
                                        &quot; resNearLo=&quot; + resNearLo +
                                        &quot; resNearHi=&quot; + resNearHi);                    
                </comment>
                <comment line="424">
                    The two values currently differ by a substantial amount, indicating that
                     the bounds definition can prevent reaching the optimum.                    
                </comment>
                <declaration name="optimizer" type="CMAESOptimizer" line="389"/>
                <anonymous_class line="390">
                    <method name="value" type="double" line="391">
                        <params>
                            <param name="parameters" type="double[]"/>
                        </params>
                        <declaration name="target" type="double" line="392"/>
                        <declaration name="error" type="double" line="393"/>
                    </method>
                </anonymous_class>
                <declaration name="fitnessFunction" type="MultivariateFunction" line="390"/>
                <declaration name="start" type="double[]" line="398"/>
                <declaration name="result" type="PointValuePair" line="401"/>
                <declaration name="resNoBound" type="double" line="403"/>
                <declaration name="lower" type="double[]" line="406"/>
                <declaration name="upper" type="double[]" line="407"/>
                <declaration name="resNearLo" type="double" line="410"/>
                <declaration name="resNearHi" type="double" line="417"/>
            </method>
            <javadoc line="429">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    inSigma Individual input sigma.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    lambda Population size used for offspring.                    
                </param>
                <param>
                    isActive Covariance update mechanism.                    
                </param>
                <param>
                    diagonalOnly Simplified covariance update.                    
                </param>
                <param>
                    stopValue Termination criteria for optimization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="456">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="inSigma" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="lambda" type="int"/>
                    <param name="isActive" type="boolean"/>
                    <param name="diagonalOnly" type="int"/>
                    <param name="stopValue" type="double"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                </params>
                <comment line="459">
                    test diagonalOnly = 0 - slow but normally fewer feval#                    
                </comment>
                <comment line="474">
                    System.out.println(&quot;sol=&quot; + Arrays.toString(result.getPoint()));                    
                </comment>
                <declaration name="dim" type="int" line="457"/>
                <declaration name="optim" type="CMAESOptimizer" line="459"/>
                <declaration name="lB" type="double[]" line="461"/>
                <declaration name="uB" type="double[]" line="462"/>
                <declaration name="result" type="PointValuePair" line="463"/>
                <scope line="475"/>
            </method>
            <method name="point" type="double[]" line="480">
                <params>
                    <param name="n" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="ds" type="double[]" line="481"/>
            </method>
            <method name="boundaries" type="double[][]" line="487">
                <params>
                    <param name="dim" type="int"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <declaration name="boundaries" type="double[][]" line="488"/>
            </method>
            <class name="Sphere" line="496">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="498">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="499"/>
                </method>
            </class>
            <class name="Cigar" line="506">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="507"/>
                <method name="Cigar" type="constructor" line="509"/>
                <method name="Cigar" type="constructor" line="513">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="517">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="518"/>
                </method>
            </class>
            <class name="Tablet" line="525">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="526"/>
                <method name="Tablet" type="constructor" line="528"/>
                <method name="Tablet" type="constructor" line="532">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="536">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="537"/>
                </method>
            </class>
            <class name="CigTab" line="544">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="545"/>
                <method name="CigTab" type="constructor" line="547"/>
                <method name="CigTab" type="constructor" line="551">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="555">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="end" type="int" line="556"/>
                    <declaration name="f" type="double" line="557"/>
                </method>
            </class>
            <class name="TwoAxes" line="564">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="566"/>
                <method name="TwoAxes" type="constructor" line="568"/>
                <method name="TwoAxes" type="constructor" line="572">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="576">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="577"/>
                </method>
            </class>
            <class name="ElliRotated" line="584">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="B" type="Basis" line="585"/>
                <declaration name="factor" type="double" line="586"/>
                <method name="ElliRotated" type="constructor" line="588"/>
                <method name="ElliRotated" type="constructor" line="592">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="596">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="597"/>
                </method>
            </class>
            <class name="Elli" line="605">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="607"/>
                <method name="Elli" type="constructor" line="609"/>
                <method name="Elli" type="constructor" line="613">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="617">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="618"/>
                </method>
            </class>
            <class name="MinusElli" line="625">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="627">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                </method>
            </class>
            <class name="DiffPow" line="632">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="634">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="635"/>
                </method>
            </class>
            <class name="SsDiffPow" line="643">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="645">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="646"/>
                </method>
            </class>
            <class name="Rosen" line="651">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="653">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="654"/>
                </method>
            </class>
            <class name="Ackley" line="662">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="663"/>
                <method name="Ackley" type="constructor" line="665">
                    <params>
                        <param name="axra" type="double"/>
                    </params>
                </method>
                <method name="Ackley" type="constructor" line="669"/>
                <method name="value" type="double" line="673">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="674"/>
                    <declaration name="res2" type="double" line="675"/>
                    <declaration name="fac" type="double" line="676"/>
                    <scope line="677"/>
                </method>
            </class>
            <class name="Rastrigin" line="688">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="690"/>
                <declaration name="amplitude" type="double" line="691"/>
                <method name="Rastrigin" type="constructor" line="693"/>
                <method name="Rastrigin" type="constructor" line="697">
                    <params>
                        <param name="axisratio" type="double"/>
                        <param name="amplitude" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="702">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="703"/>
                    <declaration name="fac" type="double" line="704"/>
                    <scope line="705"/>
                </method>
            </class>
            <class name="Basis" line="716">
                <comment line="719">
                    use not always the same basis                    
                </comment>
                <declaration name="basis" type="double[][]" line="717"/>
                <declaration name="rand" type="Random" line="718"/>
                <method name="Rotate" type="double[]" line="720">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="y" type="double[]" line="722"/>
                    <scope line="723"/>
                </method>
                <method name="GenBasis" type="void" line="731">
                    <params>
                        <param name="DIM" type="int"/>
                    </params>
                    <comment line="739">
                                                
                    </comment>
                    <comment line="742">
                                                
                    </comment>
                    <comment line="745">
                                                
                    </comment>
                    <comment line="748">
                                                
                    </comment>
                    <comment line="750">
                                                
                    </comment>
                    <comment line="752">
                                                
                    </comment>
                    <comment line="754">
                                                
                    </comment>
                    <declaration name="sp" type="double" line="735"/>
                    <declaration name="i" type="int" line="736"/>
                    <scope line="740">
                        <scope line="745"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>