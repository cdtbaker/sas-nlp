<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.fraction.Fraction"/>
        <import package="org.apache.commons.math3.fraction.FractionConversionException"/>
        <import package="org.apache.commons.math3.fraction.FractionField"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="SparseFieldVectorTest" line="28">
            <comment line="36">
                                
            </comment>
            <comment line="46">
                tolerances                
            </comment>
            <javadoc line="28">
                Test cases for the {@link SparseFieldVector} class.                
                <version>
                    $Id: SparseFieldVectorTest.java 1244107 2012-02-14 16:17:55Z erans $                    
                </version>
            </javadoc>
            <declaration name="ma1" type="Fraction[][]" line="36"/>
            <declaration name="vec1" type="Fraction[]" line="37"/>
            <declaration name="vec2" type="Fraction[]" line="38"/>
            <declaration name="vec3" type="Fraction[]" line="39"/>
            <declaration name="vec4" type="Fraction[]" line="40"/>
            <declaration name="vec_null" type="Fraction[]" line="41"/>
            <declaration name="dvec1" type="Fraction[]" line="42"/>
            <declaration name="mat1" type="Fraction[][]" line="43"/>
            <declaration name="entryTolerance" type="double" line="46"/>
            <declaration name="normTolerance" type="double" line="47"/>
            <declaration name="field" type="FractionField" line="49"/>
            <method name="testMapFunctions" type="void" line="52">
                <comment line="55">
                    octave =  v1 .+ 2.0                    
                </comment>
                <comment line="60">
                    octave =  v1 .+ 2.0                    
                </comment>
                <comment line="66">
                    octave =  v1 .- 2.0                    
                </comment>
                <comment line="71">
                    octave =  v1 .- 2.0                    
                </comment>
                <comment line="77">
                    octave =  v1 .* 2.0                    
                </comment>
                <comment line="82">
                    octave =  v1 .* 2.0                    
                </comment>
                <comment line="88">
                    octave =  v1 ./ 2.0                    
                </comment>
                <comment line="93">
                    octave =  v1 ./ 2.0                    
                </comment>
                <comment line="99">
                    octave =  v1 .^-1                    
                </comment>
                <comment line="104">
                    octave =  v1 .^-1                    
                </comment>
                <declaration name="v1" type="SparseFieldVector&lt;Fraction&gt;" line="53"/>
                <declaration name="v_mapAdd" type="FieldVector&lt;Fraction&gt;" line="56"/>
                <declaration name="result_mapAdd" type="Fraction[]" line="57"/>
                <declaration name="v_mapAddToSelf" type="FieldVector&lt;Fraction&gt;" line="61"/>
                <declaration name="result_mapAddToSelf" type="Fraction[]" line="63"/>
                <declaration name="v_mapSubtract" type="FieldVector&lt;Fraction&gt;" line="67"/>
                <declaration name="result_mapSubtract" type="Fraction[]" line="68"/>
                <declaration name="v_mapSubtractToSelf" type="FieldVector&lt;Fraction&gt;" line="72"/>
                <declaration name="result_mapSubtractToSelf" type="Fraction[]" line="74"/>
                <declaration name="v_mapMultiply" type="FieldVector&lt;Fraction&gt;" line="78"/>
                <declaration name="result_mapMultiply" type="Fraction[]" line="79"/>
                <declaration name="v_mapMultiplyToSelf" type="FieldVector&lt;Fraction&gt;" line="83"/>
                <declaration name="result_mapMultiplyToSelf" type="Fraction[]" line="85"/>
                <declaration name="v_mapDivide" type="FieldVector&lt;Fraction&gt;" line="89"/>
                <declaration name="result_mapDivide" type="Fraction[]" line="90"/>
                <declaration name="v_mapDivideToSelf" type="FieldVector&lt;Fraction&gt;" line="94"/>
                <declaration name="result_mapDivideToSelf" type="Fraction[]" line="96"/>
                <declaration name="v_mapInv" type="FieldVector&lt;Fraction&gt;" line="100"/>
                <declaration name="result_mapInv" type="Fraction[]" line="101"/>
                <declaration name="v_mapInvToSelf" type="FieldVector&lt;Fraction&gt;" line="105"/>
                <declaration name="result_mapInvToSelf" type="Fraction[]" line="107"/>
            </method>
            <method name="testBasicFunctions" type="void" line="114">
                <comment line="120">
                    octave =  v1 + v2                    
                </comment>
                <comment line="130">
                    octave =  v1 - v2                    
                </comment>
                <comment line="139">
                    octave v1 .* v2                    
                </comment>
                <comment line="148">
                    octave v1 ./ v2                    
                </comment>
                <comment line="157">
                    octave  dot(v1,v2)                    
                </comment>
                <comment line="161">
                    octave  dot(v1,v2_t)                    
                </comment>
                <declaration name="v1" type="SparseFieldVector&lt;Fraction&gt;" line="115"/>
                <declaration name="v2" type="SparseFieldVector&lt;Fraction&gt;" line="116"/>
                <declaration name="v2_t" type="FieldVector&lt;Fraction&gt;" line="118"/>
                <declaration name="v_add" type="FieldVector&lt;Fraction&gt;" line="121"/>
                <declaration name="result_add" type="Fraction[]" line="122"/>
                <declaration name="vt2" type="FieldVector&lt;Fraction&gt;" line="125"/>
                <declaration name="v_add_i" type="FieldVector&lt;Fraction&gt;" line="126"/>
                <declaration name="result_add_i" type="Fraction[]" line="127"/>
                <declaration name="v_subtract" type="SparseFieldVector&lt;Fraction&gt;" line="131"/>
                <declaration name="result_subtract" type="Fraction[]" line="132"/>
                <declaration name="v_subtract_i" type="FieldVector&lt;Fraction&gt;" line="135"/>
                <declaration name="result_subtract_i" type="Fraction[]" line="136"/>
                <declaration name="v_ebeMultiply" type="FieldVector&lt;Fraction&gt;" line="140"/>
                <declaration name="result_ebeMultiply" type="Fraction[]" line="141"/>
                <declaration name="v_ebeMultiply_2" type="FieldVector&lt;Fraction&gt;" line="144"/>
                <declaration name="result_ebeMultiply_2" type="Fraction[]" line="145"/>
                <declaration name="v_ebeDivide" type="FieldVector&lt;Fraction&gt;" line="149"/>
                <declaration name="result_ebeDivide" type="Fraction[]" line="150"/>
                <declaration name="v_ebeDivide_2" type="FieldVector&lt;Fraction&gt;" line="153"/>
                <declaration name="result_ebeDivide_2" type="Fraction[]" line="154"/>
                <declaration name="dot" type="Fraction" line="158"/>
                <declaration name="dot_2" type="Fraction" line="162"/>
                <declaration name="m_outerProduct" type="FieldMatrix&lt;Fraction&gt;" line="165"/>
                <declaration name="m_outerProduct_2" type="FieldMatrix&lt;Fraction&gt;" line="168"/>
            </method>
            <method name="testOuterProduct" type="void" line="174">
                <declaration name="u" type="SparseFieldVector&lt;Fraction&gt;" line="175"/>
                <declaration name="v" type="SparseFieldVector&lt;Fraction&gt;" line="180"/>
                <declaration name="uv" type="FieldMatrix&lt;Fraction&gt;" line="185"/>
                <declaration name="tol" type="double" line="187"/>
            </method>
            <method name="testMisc" type="void" line="197">
                <comment line="206">
                    expected behavior                    
                </comment>
                <declaration name="v1" type="SparseFieldVector&lt;Fraction&gt;" line="198"/>
                <declaration name="out1" type="String" line="200"/>
                <scope line="202"/>
                <scope line="205"/>
            </method>
            <method name="testPredicates" type="void" line="213">
                <declaration name="v" type="SparseFieldVector&lt;Fraction&gt;" line="215"/>
            </method>
            <javadoc line="223">
                verifies that two vectors are close (sup norm)                
            </javadoc>
            <method name="assertEquals" type="void" line="224">
                <params>
                    <param name="msg" type="String"/>
                    <param name="m" type="Fraction[]"/>
                    <param name="n" type="Fraction[]"/>
                </params>
                <scope line="225"/>
                <scope line="228"/>
            </method>
            <javadoc line="233">
                verifies that two vectors are close (sup norm)                
            </javadoc>
            <method name="assertClose" type="void" line="234">
                <params>
                    <param name="msg" type="String"/>
                    <param name="m" type="Fraction[]"/>
                    <param name="n" type="Fraction[]"/>
                    <param name="tolerance" type="double"/>
                </params>
                <scope line="235"/>
                <scope line="238"/>
            </method>
        </class>
    </source>