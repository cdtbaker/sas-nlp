<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.fraction.Fraction"/>
        <import package="org.apache.commons.math3.fraction.FractionConversionException"/>
        <import package="org.apache.commons.math3.fraction.FractionField"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="SparseFieldVectorTest" line="8">
            <javadoc line="8">
                Test cases for the {@link SparseFieldVector} class.                
                <version>
                    $Id: SparseFieldVectorTest.java 1244107 2012-02-14 16:17:55Z erans $                    
                </version>
            </javadoc>
            <declaration name="ma1" type="Fraction[][]" line="13"/>
            <declaration name="vec1" type="Fraction[]" line="14"/>
            <declaration name="vec2" type="Fraction[]" line="15"/>
            <declaration name="vec3" type="Fraction[]" line="16"/>
            <declaration name="vec4" type="Fraction[]" line="17"/>
            <declaration name="vec_null" type="Fraction[]" line="18"/>
            <declaration name="dvec1" type="Fraction[]" line="19"/>
            <declaration name="mat1" type="Fraction[][]" line="20"/>
            <declaration name="entryTolerance" type="double" line="21"/>
            <declaration name="normTolerance" type="double" line="22"/>
            <declaration name="field" type="FractionField" line="23"/>
            <method name="testMapFunctions" type="void" line="24">
                <declaration name="v1" type="SparseFieldVector&lt;Fraction&gt;" line="25"/>
                <declaration name="v_mapAdd" type="FieldVector&lt;Fraction&gt;" line="26"/>
                <declaration name="result_mapAdd" type="Fraction[]" line="27"/>
                <declaration name="v_mapAddToSelf" type="FieldVector&lt;Fraction&gt;" line="29"/>
                <declaration name="result_mapAddToSelf" type="Fraction[]" line="31"/>
                <declaration name="v_mapSubtract" type="FieldVector&lt;Fraction&gt;" line="33"/>
                <declaration name="result_mapSubtract" type="Fraction[]" line="34"/>
                <declaration name="v_mapSubtractToSelf" type="FieldVector&lt;Fraction&gt;" line="36"/>
                <declaration name="result_mapSubtractToSelf" type="Fraction[]" line="38"/>
                <declaration name="v_mapMultiply" type="FieldVector&lt;Fraction&gt;" line="40"/>
                <declaration name="result_mapMultiply" type="Fraction[]" line="41"/>
                <declaration name="v_mapMultiplyToSelf" type="FieldVector&lt;Fraction&gt;" line="43"/>
                <declaration name="result_mapMultiplyToSelf" type="Fraction[]" line="45"/>
                <declaration name="v_mapDivide" type="FieldVector&lt;Fraction&gt;" line="47"/>
                <declaration name="result_mapDivide" type="Fraction[]" line="48"/>
                <declaration name="v_mapDivideToSelf" type="FieldVector&lt;Fraction&gt;" line="50"/>
                <declaration name="result_mapDivideToSelf" type="Fraction[]" line="52"/>
                <declaration name="v_mapInv" type="FieldVector&lt;Fraction&gt;" line="54"/>
                <declaration name="result_mapInv" type="Fraction[]" line="55"/>
                <declaration name="v_mapInvToSelf" type="FieldVector&lt;Fraction&gt;" line="57"/>
                <declaration name="result_mapInvToSelf" type="Fraction[]" line="59"/>
            </method>
            <method name="testBasicFunctions" type="void" line="62">
                <declaration name="v1" type="SparseFieldVector&lt;Fraction&gt;" line="63"/>
                <declaration name="v2" type="SparseFieldVector&lt;Fraction&gt;" line="64"/>
                <declaration name="v2_t" type="FieldVector&lt;Fraction&gt;" line="65"/>
                <declaration name="v_add" type="FieldVector&lt;Fraction&gt;" line="66"/>
                <declaration name="result_add" type="Fraction[]" line="67"/>
                <declaration name="vt2" type="FieldVector&lt;Fraction&gt;" line="69"/>
                <declaration name="v_add_i" type="FieldVector&lt;Fraction&gt;" line="70"/>
                <declaration name="result_add_i" type="Fraction[]" line="71"/>
                <declaration name="v_subtract" type="SparseFieldVector&lt;Fraction&gt;" line="73"/>
                <declaration name="result_subtract" type="Fraction[]" line="74"/>
                <declaration name="v_subtract_i" type="FieldVector&lt;Fraction&gt;" line="76"/>
                <declaration name="result_subtract_i" type="Fraction[]" line="77"/>
                <declaration name="v_ebeMultiply" type="FieldVector&lt;Fraction&gt;" line="79"/>
                <declaration name="result_ebeMultiply" type="Fraction[]" line="80"/>
                <declaration name="v_ebeMultiply_2" type="FieldVector&lt;Fraction&gt;" line="82"/>
                <declaration name="result_ebeMultiply_2" type="Fraction[]" line="83"/>
                <declaration name="v_ebeDivide" type="FieldVector&lt;Fraction&gt;" line="85"/>
                <declaration name="result_ebeDivide" type="Fraction[]" line="86"/>
                <declaration name="v_ebeDivide_2" type="FieldVector&lt;Fraction&gt;" line="88"/>
                <declaration name="result_ebeDivide_2" type="Fraction[]" line="89"/>
                <declaration name="dot" type="Fraction" line="91"/>
                <declaration name="dot_2" type="Fraction" line="93"/>
                <declaration name="m_outerProduct" type="FieldMatrix&lt;Fraction&gt;" line="95"/>
                <declaration name="m_outerProduct_2" type="FieldMatrix&lt;Fraction&gt;" line="97"/>
            </method>
            <method name="testOuterProduct" type="void" line="100">
                <declaration name="u" type="SparseFieldVector&lt;Fraction&gt;" line="101"/>
                <declaration name="v" type="SparseFieldVector&lt;Fraction&gt;" line="102"/>
                <declaration name="uv" type="FieldMatrix&lt;Fraction&gt;" line="103"/>
                <declaration name="tol" type="double" line="104"/>
            </method>
            <method name="testMisc" type="void" line="112">
                <declaration name="v1" type="SparseFieldVector&lt;Fraction&gt;" line="113"/>
                <declaration name="out1" type="String" line="114"/>
                <scope line="116"/>
                <scope line="120"/>
            </method>
            <method name="testPredicates" type="void" line="123">
                <declaration name="v" type="SparseFieldVector&lt;Fraction&gt;" line="124"/>
            </method>
            <javadoc line="129">
                verifies that two vectors are close (sup norm)                
            </javadoc>
            <method name="assertEquals" type="void" line="132">
                <params>
                    <param name="msg" type="String"/>
                    <param name="m" type="Fraction[]"/>
                    <param name="n" type="Fraction[]"/>
                </params>
                <scope line="133"/>
                <scope line="136"/>
            </method>
            <javadoc line="140">
                verifies that two vectors are close (sup norm)                
            </javadoc>
            <method name="assertClose" type="void" line="143">
                <params>
                    <param name="msg" type="String"/>
                    <param name="m" type="Fraction[]"/>
                    <param name="n" type="Fraction[]"/>
                    <param name="tolerance" type="double"/>
                </params>
                <scope line="144"/>
                <scope line="147"/>
            </method>
        </class>
    </source>