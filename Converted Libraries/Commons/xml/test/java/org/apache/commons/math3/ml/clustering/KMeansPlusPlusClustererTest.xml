<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.clustering">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.ml.distance.EuclideanDistance"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Test"/>
        <class name="KMeansPlusPlusClustererTest" line="13">
            <declaration name="random" type="RandomGenerator" line="14"/>
            <method name="setUp" type="void" line="15"/>
            <javadoc line="19">
                JIRA: MATH-305
                  Two points, one cluster, one iteration                
            </javadoc>
            <method name="testPerformClusterAnalysisDegenerate" type="void" line="23">
                <declaration name="transformer" type="KMeansPlusPlusClusterer&lt;DoublePoint&gt;" line="24"/>
                <declaration name="points" type="DoublePoint[]" line="25"/>
                <declaration name="clusters" type="List&lt;? extends Cluster&lt;DoublePoint&gt;&gt;" line="26"/>
                <declaration name="pt1" type="DoublePoint" line="29"/>
                <declaration name="pt2" type="DoublePoint" line="30"/>
            </method>
            <method name="testCertainSpace" type="void" line="34">
                <declaration name="strategies" type="KMeansPlusPlusClusterer.EmptyClusterStrategy[]" line="35"/>
                <scope line="36">
                    <declaration name="numberOfVariables" type="int" line="37"/>
                    <declaration name="position1" type="int" line="38"/>
                    <declaration name="position2" type="int" line="39"/>
                    <declaration name="position3" type="int" line="40"/>
                    <declaration name="position4" type="int" line="41"/>
                    <declaration name="multiplier" type="int" line="42"/>
                    <declaration name="breakingPoints" type="DoublePoint[]" line="43"/>
                    <scope line="44">
                        <declaration name="points" type="int" line="45"/>
                        <scope line="46"/>
                        <declaration name="DoublePoint" type="DoublePoint" line="49"/>
                    </scope>
                    <scope line="56">
                        <declaration name="transformer" type="KMeansPlusPlusClusterer&lt;DoublePoint&gt;" line="57"/>
                        <declaration name="clusters" type="List&lt;? extends Cluster&lt;DoublePoint&gt;&gt;" line="58"/>
                        <declaration name="sum" type="int" line="60"/>
                        <scope line="61"/>
                    </scope>
                </scope>
            </method>
            <class name="CloseDistance" line="68">
                <extends class="EuclideanDistance"/>
                <javadoc line="68">
                    A helper class for testSmallDistances(). This class is similar to DoublePoint, but
                      it defines a different distanceFrom() method that tends to return distances less than 1.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="73"/>
                <method name="compute" type="double" line="74">
                    <params>
                        <param name="a" type="double[]"/>
                        <param name="b" type="double[]"/>
                    </params>
                </method>
            </class>
            <javadoc line="78">
                Test points that are very close together. See issue MATH-546.                
            </javadoc>
            <method name="testSmallDistances" type="void" line="81">
                <declaration name="repeatedArray" type="int[]" line="82"/>
                <declaration name="uniqueArray" type="int[]" line="83"/>
                <declaration name="repeatedPoint" type="DoublePoint" line="84"/>
                <declaration name="uniquePoint" type="DoublePoint" line="85"/>
                <declaration name="points" type="Collection&lt;DoublePoint&gt;" line="86"/>
                <declaration name="NUM_REPEATED_POINTS" type="int" line="87"/>
                <scope line="88"/>
                <declaration name="RANDOM_SEED" type="long" line="92"/>
                <declaration name="NUM_CLUSTERS" type="int" line="93"/>
                <declaration name="NUM_ITERATIONS" type="int" line="94"/>
                <declaration name="clusterer" type="KMeansPlusPlusClusterer&lt;DoublePoint&gt;" line="96"/>
                <declaration name="clusters" type="List&lt;CentroidCluster&lt;DoublePoint&gt;&gt;" line="97"/>
                <declaration name="uniquePointIsCenter" type="boolean" line="98"/>
                <scope line="99">
                    <scope line="100"/>
                </scope>
            </method>
            <javadoc line="106">
                2 variables cannot be clustered into 3 clusters. See issue MATH-436.                
            </javadoc>
            <method name="testPerformClusterAnalysisToManyClusters" type="void" line="109">
                <declaration name="transformer" type="KMeansPlusPlusClusterer&lt;DoublePoint&gt;" line="110"/>
                <declaration name="points" type="DoublePoint[]" line="111"/>
            </method>
        </class>
    </source>