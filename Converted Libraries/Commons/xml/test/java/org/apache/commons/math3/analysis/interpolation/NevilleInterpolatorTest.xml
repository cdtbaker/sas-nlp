<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Expm1"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="NevilleInterpolatorTest" line="28">
            <javadoc line="28">
                Test case for Neville interpolator.
                  &lt;p&gt;
                  The error of polynomial interpolation is
                  f(z) - p(z) = f^(n)(zeta)  (z-x[0])(z-x[1])...(z-x[n-1]) / n!
                  where f^(n) is the n-th derivative of the approximated function and
                  zeta is some point in the interval determined by x[] and z.
                  &lt;p&gt;
                  Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound
                  it and use the absolute value upper bound for estimates. For reference,
                  see &lt;b&gt;Introduction to Numerical Analysis&lt;/b&gt;, ISBN 038795452X, chapter 2.                
                <version>
                    $Id: NevilleInterpolatorTest.java 1374632 2012-08-18 18:11:11Z luc $                    
                </version>
            </javadoc>
            <javadoc line="44">
                Test of interpolator for the sine function.
                  &lt;p&gt;
                  |sin^(n)(zeta)| &lt;= 1.0, zeta in [0, 2PI]                
            </javadoc>
            <method name="testSinFunction" type="void" line="50">
                <comment line="55">
                    6 interpolating points on interval [0, 2*PI]                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="51"/>
                <declaration name="interpolator" type="UnivariateInterpolator" line="52"/>
                <declaration name="x" type="double" line="53"/>
                <declaration name="n" type="int" line="56"/>
                <declaration name="min" type="double" line="57"/>
                <scope line="60"/>
                <declaration name="derivativebound" type="double" line="64"/>
                <declaration name="p" type="UnivariateFunction" line="65"/>
            </method>
            <javadoc line="76">
                Test of interpolator for the exponential function.
                  &lt;p&gt;
                  |expm1^(n)(zeta)| &lt;= e, zeta in [-1, 1]                
            </javadoc>
            <method name="testExpm1Function" type="void" line="82">
                <comment line="87">
                    5 interpolating points on interval [-1, 1]                    
                </comment>
                <declaration name="f" type="UnivariateFunction" line="83"/>
                <declaration name="interpolator" type="UnivariateInterpolator" line="84"/>
                <declaration name="x" type="double" line="85"/>
                <declaration name="n" type="int" line="88"/>
                <declaration name="min" type="double" line="89"/>
                <scope line="92"/>
                <declaration name="derivativebound" type="double" line="96"/>
                <declaration name="p" type="UnivariateFunction" line="97"/>
            </method>
            <javadoc line="112">
                Test of parameters for the interpolator.                
            </javadoc>
            <method name="testParameters" type="void" line="116">
                <comment line="120">
                    bad abscissas array                    
                </comment>
                <comment line="127">
                    expected                    
                </comment>
                <declaration name="interpolator" type="UnivariateInterpolator" line="117"/>
                <scope line="119">
                    <declaration name="x" type="double" line="121"/>
                    <declaration name="y" type="double" line="122"/>
                    <declaration name="p" type="UnivariateFunction" line="123"/>
                </scope>
                <scope line="126"/>
            </method>
            <javadoc line="131">
                Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!                
            </javadoc>
            <method name="partialerror" type="double" line="135">
                <params>
                    <param name="x" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <scope line="137"/>
                <declaration name="out" type="double" line="141"/>
                <scope line="142"/>
            </method>
        </class>
    </source>