<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Expm1"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="NevilleInterpolatorTest" line="9">
            <javadoc line="9">
                Test case for Neville interpolator.
                  &lt;p&gt;
                  The error of polynomial interpolation is
                  f(z) - p(z) = f^(n)(zeta)  (z-x[0])(z-x[1])...(z-x[n-1]) / n!
                  where f^(n) is the n-th derivative of the approximated function and
                  zeta is some point in the interval determined by x[] and z.
                  &lt;p&gt;
                  Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound
                  it and use the absolute value upper bound for estimates. For reference,
                  see &lt;b&gt;Introduction to Numerical Analysis&lt;/b&gt;, ISBN 038795452X, chapter 2.                
                <version>
                    $Id: NevilleInterpolatorTest.java 1374632 2012-08-18 18:11:11Z luc $                    
                </version>
            </javadoc>
            <javadoc line="23">
                Test of interpolator for the sine function.
                  &lt;p&gt;
                  |sin^(n)(zeta)| &lt;= 1.0, zeta in [0, 2PI]                
            </javadoc>
            <method name="testSinFunction" type="void" line="28">
                <declaration name="f" type="UnivariateFunction" line="29"/>
                <declaration name="interpolator" type="UnivariateInterpolator" line="30"/>
                <declaration name="x" type="double" line="31"/>
                <declaration name="n" type="int" line="32"/>
                <declaration name="min" type="double" line="33"/>
                <scope line="36"/>
                <declaration name="derivativebound" type="double" line="40"/>
                <declaration name="p" type="UnivariateFunction" line="41"/>
            </method>
            <javadoc line="53">
                Test of interpolator for the exponential function.
                  &lt;p&gt;
                  |expm1^(n)(zeta)| &lt;= e, zeta in [-1, 1]                
            </javadoc>
            <method name="testExpm1Function" type="void" line="58">
                <declaration name="f" type="UnivariateFunction" line="59"/>
                <declaration name="interpolator" type="UnivariateInterpolator" line="60"/>
                <declaration name="x" type="double" line="61"/>
                <declaration name="n" type="int" line="62"/>
                <declaration name="min" type="double" line="63"/>
                <scope line="66"/>
                <declaration name="derivativebound" type="double" line="70"/>
                <declaration name="p" type="UnivariateFunction" line="71"/>
            </method>
            <javadoc line="88">
                Test of parameters for the interpolator.                
            </javadoc>
            <method name="testParameters" type="void" line="91">
                <declaration name="interpolator" type="UnivariateInterpolator" line="92"/>
                <scope line="93">
                    <declaration name="x" type="double" line="94"/>
                    <declaration name="y" type="double" line="95"/>
                    <declaration name="p" type="UnivariateFunction" line="96"/>
                </scope>
                <scope line="100"/>
            </method>
            <javadoc line="103">
                Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!                
            </javadoc>
            <method name="partialerror" type="double" line="106">
                <params>
                    <param name="x" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <scope line="107"/>
                <declaration name="out" type="double" line="110"/>
                <scope line="111"/>
            </method>
        </class>
    </source>