<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.differentiation">
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.analysis.QuinticFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Gaussian"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="FiniteDifferencesDifferentiatorTest" line="35">
            <javadoc line="35">
                Test for class {@link FiniteDifferencesDifferentiator}.                
            </javadoc>
            <method name="testWrongNumberOfPoints" type="void" line="41"/>
            <method name="testWrongStepSize" type="void" line="46"/>
            <method name="testSerialization" type="void" line="51">
                <declaration name="differentiator" type="FiniteDifferencesDifferentiator" line="52"/>
                <declaration name="recovered" type="FiniteDifferencesDifferentiator" line="54"/>
            </method>
            <method name="testConstant" type="void" line="61">
                <declaration name="differentiator" type="FiniteDifferencesDifferentiator" line="62"/>
                <anonymous_class line="65">
                    <method name="value" type="double" line="66">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateDifferentiableFunction" line="64"/>
                <scope line="70">
                    <declaration name="y" type="DerivativeStructure" line="71"/>
                </scope>
            </method>
            <method name="testLinear" type="void" line="79">
                <declaration name="differentiator" type="FiniteDifferencesDifferentiator" line="80"/>
                <anonymous_class line="83">
                    <method name="value" type="double" line="84">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateDifferentiableFunction" line="82"/>
                <scope line="88">
                    <declaration name="y" type="DerivativeStructure" line="89"/>
                </scope>
            </method>
            <method name="testGaussian" type="void" line="97">
                <declaration name="differentiator" type="FiniteDifferencesDifferentiator" line="98"/>
                <declaration name="gaussian" type="UnivariateDifferentiableFunction" line="100"/>
                <declaration name="f" type="UnivariateDifferentiableFunction" line="101"/>
                <declaration name="expectedError" type="double[]" line="103"/>
                <declaration name="maxError" type="double[]" line="106"/>
                <scope line="107">
                    <declaration name="dsX" type="DerivativeStructure" line="108"/>
                    <declaration name="yRef" type="DerivativeStructure" line="109"/>
                    <declaration name="y" type="DerivativeStructure" line="110"/>
                    <scope line="112"/>
                </scope>
                <scope line="118"/>
            </method>
            <method name="testStepSizeUnstability" type="void" line="124">
                <comment line="147">
                    the 0.25 step size is good for finite differences in the quintic on this abscissa range for 7 points                    
                </comment>
                <comment line="148">
                    the errors are fair                    
                </comment>
                <comment line="153">
                    the 1.0e-6 step size is far too small for finite differences in the quintic on this abscissa range for 7 points                    
                </comment>
                <comment line="154">
                    the errors are huge!                    
                </comment>
                <declaration name="quintic" type="UnivariateDifferentiableFunction" line="125"/>
                <declaration name="goodStep" type="UnivariateDifferentiableFunction" line="126"/>
                <declaration name="badStep" type="UnivariateDifferentiableFunction" line="128"/>
                <declaration name="maxErrorGood" type="double[]" line="130"/>
                <declaration name="maxErrorBad" type="double[]" line="131"/>
                <scope line="132">
                    <declaration name="dsX" type="DerivativeStructure" line="133"/>
                    <declaration name="yRef" type="DerivativeStructure" line="134"/>
                    <declaration name="yGood" type="DerivativeStructure" line="135"/>
                    <declaration name="yBad" type="DerivativeStructure" line="136"/>
                    <scope line="137"/>
                </scope>
                <declaration name="expectedGood" type="double[]" line="149"/>
                <declaration name="expectedBad" type="double[]" line="155"/>
                <scope line="159"/>
            </method>
            <method name="testWrongOrder" type="void" line="167">
                <comment line="171">
                    this exception should not be thrown because wrong order                    
                </comment>
                <comment line="172">
                    should be detected before function call                    
                </comment>
                <anonymous_class line="169">
                    <method name="value" type="double" line="170">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <comment line="171">
                            this exception should not be thrown because wrong order                            
                        </comment>
                        <comment line="172">
                            should be detected before function call                            
                        </comment>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateDifferentiableFunction" line="168"/>
            </method>
            <method name="testWrongOrderVector" type="void" line="180">
                <comment line="184">
                    this exception should not be thrown because wrong order                    
                </comment>
                <comment line="185">
                    should be detected before function call                    
                </comment>
                <anonymous_class line="182">
                    <method name="value" type="double[]" line="183">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <comment line="184">
                            this exception should not be thrown because wrong order                            
                        </comment>
                        <comment line="185">
                            should be detected before function call                            
                        </comment>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateDifferentiableVectorFunction" line="181"/>
            </method>
            <method name="testWrongOrderMatrix" type="void" line="193">
                <comment line="197">
                    this exception should not be thrown because wrong order                    
                </comment>
                <comment line="198">
                    should be detected before function call                    
                </comment>
                <anonymous_class line="195">
                    <method name="value" type="double[][]" line="196">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <comment line="197">
                            this exception should not be thrown because wrong order                            
                        </comment>
                        <comment line="198">
                            should be detected before function call                            
                        </comment>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateDifferentiableMatrixFunction" line="194"/>
            </method>
            <method name="testTooLargeStep" type="void" line="206"/>
            <method name="testBounds" type="void" line="211">
                <comment line="234">
                    here, we did not set the bounds, so the differences are evaluated out of domain                    
                </comment>
                <comment line="235">
                    using f(-0.05), f(0.05), f(0.15)                    
                </comment>
                <comment line="245">
                    here, we did not set the bounds, so the differences are evaluated out of domain                    
                </comment>
                <comment line="246">
                    using f(0.85), f(0.95), f(1.05)                    
                </comment>
                <comment line="255">
                    here, we did set the bounds, so evaluations are done within domain                    
                </comment>
                <comment line="256">
                    using f(0.0), f(0.1), f(0.2)                    
                </comment>
                <comment line="259">
                    here, we did set the bounds, so evaluations are done within domain                    
                </comment>
                <comment line="260">
                    using f(0.8), f(0.9), f(1.0)                    
                </comment>
                <declaration name="slope" type="double" line="213"/>
                <anonymous_class line="214">
                    <method name="value" type="double" line="215">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <scope line="216"/>
                        <scope line="218"/>
                        <scope line="220"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="214"/>
                <declaration name="missingBounds" type="UnivariateDifferentiableFunction" line="226"/>
                <declaration name="properlyBounded" type="UnivariateDifferentiableFunction" line="228"/>
                <declaration name="tLow" type="DerivativeStructure" line="230"/>
                <declaration name="tHigh" type="DerivativeStructure" line="231"/>
                <scope line="233"/>
                <scope line="238"/>
                <scope line="240"/>
                <scope line="244"/>
                <scope line="249"/>
                <scope line="251"/>
            </method>
            <method name="testBoundedSqrt" type="void" line="266">
                <comment line="276">
                    we are able to compute derivative near 0, but the accuracy is much poorer there                    
                </comment>
                <declaration name="differentiator" type="UnivariateFunctionDifferentiator" line="268"/>
                <anonymous_class line="270">
                    <method name="value" type="double" line="271">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="sqrt" type="UnivariateDifferentiableFunction" line="270"/>
                <declaration name="t001" type="DerivativeStructure" line="277"/>
                <declaration name="t01" type="DerivativeStructure" line="279"/>
                <declaration name="t03" type="DerivativeStructure" line="281"/>
            </method>
            <method name="testVectorFunction" type="void" line="287">
                <declaration name="differentiator" type="FiniteDifferencesDifferentiator" line="289"/>
                <anonymous_class line="292">
                    <method name="value" type="double[]" line="294">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateDifferentiableVectorFunction" line="291"/>
                <scope line="300">
                    <declaration name="dsX" type="DerivativeStructure" line="301"/>
                    <declaration name="y" type="DerivativeStructure[]" line="302"/>
                    <declaration name="cos" type="double" line="303"/>
                    <declaration name="sin" type="double" line="304"/>
                    <declaration name="f1" type="double[]" line="305"/>
                    <declaration name="f2" type="DerivativeStructure[]" line="306"/>
                    <scope line="308"/>
                </scope>
            </method>
            <method name="testMatrixFunction" type="void" line="322">
                <declaration name="differentiator" type="FiniteDifferencesDifferentiator" line="324"/>
                <anonymous_class line="327">
                    <method name="value" type="double[][]" line="329">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateDifferentiableMatrixFunction" line="326"/>
                <scope line="338">
                    <declaration name="dsX" type="DerivativeStructure" line="339"/>
                    <declaration name="y" type="DerivativeStructure[][]" line="340"/>
                    <declaration name="cos" type="double" line="341"/>
                    <declaration name="sin" type="double" line="342"/>
                    <declaration name="cosh" type="double" line="343"/>
                    <declaration name="sinh" type="double" line="344"/>
                    <declaration name="f1" type="double[][]" line="345"/>
                    <declaration name="f2" type="DerivativeStructure[][]" line="346"/>
                    <scope line="348">
                        <scope line="350"/>
                    </scope>
                </scope>
            </method>
            <method name="testSeveralFreeParameters" type="void" line="371">
                <declaration name="differentiator" type="FiniteDifferencesDifferentiator" line="372"/>
                <declaration name="sine" type="UnivariateDifferentiableFunction" line="374"/>
                <declaration name="f" type="UnivariateDifferentiableFunction" line="375"/>
                <declaration name="expectedError" type="double[]" line="377"/>
                <declaration name="maxError" type="double[]" line="380"/>
                <scope line="381">
                    <scope line="382">
                        <declaration name="dsX" type="DerivativeStructure" line="383"/>
                        <declaration name="dsY" type="DerivativeStructure" line="384"/>
                        <declaration name="dsT" type="DerivativeStructure" line="385"/>
                        <declaration name="sRef" type="DerivativeStructure" line="386"/>
                        <declaration name="s" type="DerivativeStructure" line="387"/>
                        <scope line="388">
                            <scope line="389">
                                <scope line="390"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="399"/>
            </method>
        </class>
    </source>