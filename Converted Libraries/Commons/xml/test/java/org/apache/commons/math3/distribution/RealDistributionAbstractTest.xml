<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator"/>
        <import package="org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.junit.After"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Test"/>
        <class name="RealDistributionAbstractTest" line="40">
            <comment line="77">
                -------------------- Private test instance data -------------------------                
            </comment>
            <comment line="99">
                -------------------- Abstract methods -----------------------------------                
            </comment>
            <comment line="113">
                ---- Default implementations of inverse test data generation methods ----                
            </comment>
            <comment line="125">
                -------------------- Setup / tear down ----------------------------------                
            </comment>
            <comment line="153">
                -------------------- Verification methods -------------------------------                
            </comment>
            <comment line="212">
                ------------------------ Default test cases -----------------------------                
            </comment>
            <comment line="398">
                ------------------ Getters / Setters for test instance data -----------                
            </comment>
            <javadoc line="40">
                Abstract base class for {@link RealDistribution} tests.
                  &lt;p&gt;
                  To create a concrete test class for a continuous distribution
                  implementation, first implement makeDistribution() to return a distribution
                  instance to use in tests. Then implement each of the test data generation
                  methods below.  In each case, the test points and test values arrays
                  returned represent parallel arrays of inputs and expected values for the
                  distribution returned by makeDistribution().  Default implementations
                  are provided for the makeInverseXxx methods that just invert the mapping
                  defined by the arrays returned by the makeCumulativeXxx methods.
                  &lt;p&gt;
                  makeCumulativeTestPoints() -- arguments used to test cumulative probabilities
                  makeCumulativeTestValues() -- expected cumulative probabilites
                  makeDensityTestValues() -- expected density values at cumulativeTestPoints
                  makeInverseCumulativeTestPoints() -- arguments used to test inverse cdf
                  makeInverseCumulativeTestValues() -- expected inverse cdf values
                  &lt;p&gt;
                  To implement additional test cases with different distribution instances and
                  test data, use the setXxx methods for the instance data in test cases and
                  call the verifyXxx methods to verify results.
                  &lt;p&gt;
                  Error tolerance can be overriden by implementing getTolerance().
                  &lt;p&gt;
                  Test data should be validated against reference tables or other packages
                  where possible, and the source of the reference data and/or validation
                  should be documented in the test cases.  A framework for validating
                  distribution data against R is included in the /src/test/R source tree.
                  &lt;p&gt;
                  See {@link NormalDistributionTest} and {@link ChiSquaredDistributionTest}for examples.                
                <version>
                    $Id: RealDistributionAbstractTest.java 1428822 2013-01-04 12:28:44Z erans $                    
                </version>
            </javadoc>
            <declaration name="distribution" type="RealDistribution" line="77"/>
            <javadoc line="77">
                Distribution instance used to perform tests                
            </javadoc>
            <declaration name="tolerance" type="double" line="80"/>
            <javadoc line="80">
                Tolerance used in comparing expected and returned values                
            </javadoc>
            <declaration name="cumulativeTestPoints" type="double[]" line="83"/>
            <javadoc line="83">
                Arguments used to test cumulative probability density calculations                
            </javadoc>
            <declaration name="cumulativeTestValues" type="double[]" line="86"/>
            <javadoc line="86">
                Values used to test cumulative probability density calculations                
            </javadoc>
            <declaration name="inverseCumulativeTestPoints" type="double[]" line="89"/>
            <javadoc line="89">
                Arguments used to test inverse cumulative probability density calculations                
            </javadoc>
            <declaration name="inverseCumulativeTestValues" type="double[]" line="92"/>
            <javadoc line="92">
                Values used to test inverse cumulative probability density calculations                
            </javadoc>
            <declaration name="densityTestValues" type="double[]" line="95"/>
            <javadoc line="95">
                Values used to test density calculations                
            </javadoc>
            <method name="makeDistribution" type="RealDistribution" line="100"/>
            <javadoc line="100">
                Creates the default continuous distribution instance to use in tests.                
            </javadoc>
            <method name="makeCumulativeTestPoints" type="double[]" line="103"/>
            <javadoc line="103">
                Creates the default cumulative probability test input values                
            </javadoc>
            <method name="makeCumulativeTestValues" type="double[]" line="106"/>
            <javadoc line="106">
                Creates the default cumulative probability test expected values                
            </javadoc>
            <method name="makeDensityTestValues" type="double[]" line="109"/>
            <javadoc line="109">
                Creates the default density test expected values                
            </javadoc>
            <javadoc line="114">
                Creates the default inverse cumulative probability test input values                
            </javadoc>
            <method name="makeInverseCumulativeTestPoints" type="double[]" line="115"/>
            <javadoc line="119">
                Creates the default inverse cumulative probability density test expected values                
            </javadoc>
            <method name="makeInverseCumulativeTestValues" type="double[]" line="120"/>
            <javadoc line="126">
                Setup sets all test instance data to default values                
            </javadoc>
            <method name="setUp" type="void" line="130"/>
            <javadoc line="139">
                Cleans up test instance data                
            </javadoc>
            <method name="tearDown" type="void" line="143"/>
            <javadoc line="154">
                Verifies that cumulative probability density calculations match expected values
                  using current test instance data                
            </javadoc>
            <method name="verifyCumulativeProbabilities" type="void" line="158">
                <comment line="160">
                    verify cumulativeProbability(double)                    
                </comment>
                <comment line="167">
                    verify cumulativeProbability(double, double)
                     XXX In 4.0, &quot;cumulativeProbability(double,double)&quot; must be replaced with &quot;probability&quot; (MATH-839).                    
                </comment>
                <scope line="160"/>
                <scope line="168">
                    <scope line="169">
                        <scope line="170"/>
                        <scope line="174">
                            <scope line="175"/>
                            <scope line="177"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="186">
                Verifies that inverse cumulative probability density calculations match expected values
                  using current test instance data                
            </javadoc>
            <method name="verifyInverseCumulativeProbabilities" type="void" line="190">
                <scope line="191"/>
            </method>
            <javadoc line="199">
                Verifies that density calculations match expected values                
            </javadoc>
            <method name="verifyDensities" type="void" line="202">
                <scope line="203"/>
            </method>
            <javadoc line="213">
                Verifies that cumulative probability density calculations match expected values
                  using default test instance data                
            </javadoc>
            <method name="testCumulativeProbabilities" type="void" line="218"/>
            <javadoc line="222">
                Verifies that inverse cumulative probability density calculations match expected values
                  using default test instance data                
            </javadoc>
            <method name="testInverseCumulativeProbabilities" type="void" line="227"/>
            <javadoc line="231">
                Verifies that density calculations return expected values
                  for default test instance data                
            </javadoc>
            <method name="testDensities" type="void" line="236"/>
            <javadoc line="240">
                Verifies that probability computations are consistent                
            </javadoc>
            <method name="testConsistency" type="void" line="244">
                <comment line="248">
                    check that cdf(x, x) = 0
                     XXX In 4.0, &quot;cumulativeProbability(double,double)&quot; must be replaced with &quot;probability&quot; (MATH-839).                    
                </comment>
                <comment line="254">
                    check that P(a &lt; X &lt;= b) = P(X &lt;= b) - P(X &lt;= a)                    
                </comment>
                <comment line="259">
                    XXX In 4.0, &quot;cumulativeProbability(double,double)&quot; must be replaced with &quot;probability&quot; (MATH-839).                    
                </comment>
                <scope line="245">
                    <declaration name="upper" type="double" line="254"/>
                    <declaration name="lower" type="double" line="255"/>
                    <declaration name="diff" type="double" line="256"/>
                    <declaration name="direct" type="double" line="259"/>
                </scope>
            </method>
            <javadoc line="265">
                Verifies that illegal arguments are correctly handled                
            </javadoc>
            <method name="testIllegalArguments" type="void" line="269">
                <comment line="272">
                    XXX In 4.0, &quot;cumulativeProbability(double,double)&quot; must be replaced with &quot;probability&quot; (MATH-839).                    
                </comment>
                <comment line="276">
                    expected                    
                </comment>
                <comment line="282">
                    expected                    
                </comment>
                <comment line="288">
                    expected                    
                </comment>
                <scope line="270"/>
                <scope line="274"/>
                <scope line="277"/>
                <scope line="280"/>
                <scope line="283"/>
                <scope line="286"/>
            </method>
            <javadoc line="291">
                Test sampling                
            </javadoc>
            <method name="testSampling" type="void" line="295">
                <comment line="298">
                    Use fixed seed                    
                </comment>
                <declaration name="sampleSize" type="int" line="296"/>
                <declaration name="sample" type="double[]" line="298"/>
                <declaration name="quartiles" type="double[]" line="299"/>
                <declaration name="expected" type="double[]" line="300"/>
                <declaration name="counts" type="long[]" line="301"/>
                <scope line="302"/>
            </method>
            <javadoc line="308">
                Verify that density integrals match the distribution.
                  The (filtered, sorted) cumulativeTestPoints array is used to source
                  integration limits. The integral of the density (estimated using a
                  Legendre-Gauss integrator) is compared with the cdf over the same
                  interval. Test points outside of the domain of the density function
                  are discarded.                
            </javadoc>
            <method name="testDensityIntegrals" type="void" line="317">
                <comment line="332">
                    exclude integrals outside domain.                    
                </comment>
                <comment line="339">
                    FIXME @4.0 when rename happens                    
                </comment>
                <comment line="342">
                    Triangle integrals are very slow to converge                    
                </comment>
                <declaration name="tol" type="double" line="318"/>
                <declaration name="integrator" type="BaseAbstractUnivariateIntegrator" line="319"/>
                <anonymous_class line="321">
                    <method name="value" type="double" line="322">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="d" type="UnivariateFunction" line="321"/>
                <declaration name="integrationTestPoints" type="ArrayList&lt;Double&gt;" line="326"/>
                <scope line="327">
                    <scope line="330"/>
                </scope>
                <scope line="336"/>
            </method>
            <javadoc line="347">
                Verify that isSupportLowerBoundInclusvie returns true iff the lower bound
                  is finite and density is non-NaN, non-infinite there.                
            </javadoc>
            <method name="testIsSupportLowerBoundInclusive" type="void" line="352">
                <declaration name="lowerBound" type="double" line="353"/>
                <declaration name="result" type="double" line="354"/>
            </method>
            <javadoc line="363">
                Verify that isSupportUpperBoundInclusvie returns true iff the upper bound
                  is finite and density is non-NaN, non-infinite there.                
            </javadoc>
            <method name="testIsSupportUpperBoundInclusive" type="void" line="368">
                <declaration name="upperBound" type="double" line="369"/>
                <declaration name="result" type="double" line="370"/>
            </method>
            <method name="testDistributionClone" type="void" line="382">
                <comment line="384">
                    Construct a distribution and initialize its internal random
                     generator, using a fixed seed for deterministic results.                    
                </comment>
                <comment line="389">
                    Clone the distribution.                    
                </comment>
                <comment line="392">
                    Make sure they still produce the same samples.                    
                </comment>
                <declaration name="cloned" type="RealDistribution" line="389"/>
                <declaration name="s1" type="double" line="392"/>
                <declaration name="s2" type="double" line="393"/>
            </method>
            <javadoc line="398">
                @return Returns the cumulativeTestPoints.                
            </javadoc>
            <method name="getCumulativeTestPoints" type="double[]" line="401"/>
            <javadoc line="405">
                @param cumulativeTestPoints The cumulativeTestPoints to set.                
            </javadoc>
            <method name="setCumulativeTestPoints" type="void" line="408">
                <params>
                    <param name="cumulativeTestPoints" type="double[]"/>
                </params>
            </method>
            <javadoc line="412">
                @return Returns the cumulativeTestValues.                
            </javadoc>
            <method name="getCumulativeTestValues" type="double[]" line="415"/>
            <javadoc line="419">
                @param cumulativeTestValues The cumulativeTestValues to set.                
            </javadoc>
            <method name="setCumulativeTestValues" type="void" line="422">
                <params>
                    <param name="cumulativeTestValues" type="double[]"/>
                </params>
            </method>
            <method name="getDensityTestValues" type="double[]" line="426"/>
            <method name="setDensityTestValues" type="void" line="430">
                <params>
                    <param name="densityTestValues" type="double[]"/>
                </params>
            </method>
            <javadoc line="434">
                @return Returns the distribution.                
            </javadoc>
            <method name="getDistribution" type="RealDistribution" line="437"/>
            <javadoc line="441">
                @param distribution The distribution to set.                
            </javadoc>
            <method name="setDistribution" type="void" line="444">
                <params>
                    <param name="distribution" type="RealDistribution"/>
                </params>
            </method>
            <javadoc line="448">
                @return Returns the inverseCumulativeTestPoints.                
            </javadoc>
            <method name="getInverseCumulativeTestPoints" type="double[]" line="451"/>
            <javadoc line="455">
                @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.                
            </javadoc>
            <method name="setInverseCumulativeTestPoints" type="void" line="458">
                <params>
                    <param name="inverseCumulativeTestPoints" type="double[]"/>
                </params>
            </method>
            <javadoc line="462">
                @return Returns the inverseCumulativeTestValues.                
            </javadoc>
            <method name="getInverseCumulativeTestValues" type="double[]" line="465"/>
            <javadoc line="469">
                @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.                
            </javadoc>
            <method name="setInverseCumulativeTestValues" type="void" line="472">
                <params>
                    <param name="inverseCumulativeTestValues" type="double[]"/>
                </params>
            </method>
            <javadoc line="476">
                @return Returns the tolerance.                
            </javadoc>
            <method name="getTolerance" type="double" line="479"/>
            <javadoc line="483">
                @param tolerance The tolerance to set.                
            </javadoc>
            <method name="setTolerance" type="void" line="486">
                <params>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="490">
                Serialization and deserialization loop of the {@link #distribution}.                
            </javadoc>
            <method name="deepClone" type="RealDistribution" line="495">
                <comment line="497">
                    Serialize to byte array.                    
                </comment>
                <comment line="503">
                    Deserialize from byte array.                    
                </comment>
                <declaration name="bOut" type="ByteArrayOutputStream" line="497"/>
                <declaration name="oOut" type="ObjectOutputStream" line="498"/>
                <declaration name="data" type="byte[]" line="500"/>
                <declaration name="bIn" type="ByteArrayInputStream" line="503"/>
                <declaration name="oIn" type="ObjectInputStream" line="504"/>
                <declaration name="clone" type="Object" line="505"/>
            </method>
        </class>
    </source>