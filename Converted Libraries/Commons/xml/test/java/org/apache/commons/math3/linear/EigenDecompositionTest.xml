<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.junit.After"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.Test"/>
        <class name="EigenDecompositionTest" line="13">
            <declaration name="refValues" type="double[]" line="14"/>
            <declaration name="matrix" type="RealMatrix" line="15"/>
            <method name="testDimension1" type="void" line="16">
                <declaration name="matrix" type="RealMatrix" line="17"/>
                <declaration name="ed" type="EigenDecomposition" line="18"/>
            </method>
            <method name="testDimension2" type="void" line="22">
                <declaration name="matrix" type="RealMatrix" line="23"/>
                <declaration name="ed" type="EigenDecomposition" line="24"/>
            </method>
            <method name="testDimension3" type="void" line="29">
                <declaration name="matrix" type="RealMatrix" line="30"/>
                <declaration name="ed" type="EigenDecomposition" line="31"/>
            </method>
            <method name="testDimension3MultipleRoot" type="void" line="37">
                <declaration name="matrix" type="RealMatrix" line="38"/>
                <declaration name="ed" type="EigenDecomposition" line="39"/>
            </method>
            <method name="testDimension4WithSplit" type="void" line="45">
                <declaration name="matrix" type="RealMatrix" line="46"/>
                <declaration name="ed" type="EigenDecomposition" line="47"/>
            </method>
            <method name="testDimension4WithoutSplit" type="void" line="54">
                <declaration name="matrix" type="RealMatrix" line="55"/>
                <declaration name="ed" type="EigenDecomposition" line="56"/>
            </method>
            <method name="testMath308" type="void" line="63">
                <declaration name="mainTridiagonal" type="double[]" line="64"/>
                <declaration name="secondaryTridiagonal" type="double[]" line="65"/>
                <declaration name="refEigenValues" type="double[]" line="66"/>
                <declaration name="refEigenVectors" type="RealVector[]" line="67"/>
                <declaration name="decomposition" type="EigenDecomposition" line="68"/>
                <declaration name="eigenValues" type="double[]" line="70"/>
                <scope line="71"/>
            </method>
            <method name="testMathpbx02" type="void" line="76">
                <declaration name="mainTridiagonal" type="double[]" line="77"/>
                <declaration name="secondaryTridiagonal" type="double[]" line="78"/>
                <declaration name="refEigenValues" type="double[]" line="79"/>
                <declaration name="refEigenVectors" type="RealVector[]" line="80"/>
                <declaration name="decomposition" type="EigenDecomposition" line="81"/>
                <declaration name="eigenValues" type="double[]" line="83"/>
                <scope line="84">
                    <scope line="86"/>
                    <scope line="89"/>
                </scope>
            </method>
            <method name="testMathpbx03" type="void" line="94">
                <declaration name="mainTridiagonal" type="double[]" line="95"/>
                <declaration name="secondaryTridiagonal" type="double[]" line="96"/>
                <declaration name="refEigenValues" type="double[]" line="97"/>
                <declaration name="refEigenVectors" type="RealVector[]" line="98"/>
                <declaration name="decomposition" type="EigenDecomposition" line="99"/>
                <declaration name="eigenValues" type="double[]" line="101"/>
                <scope line="102">
                    <scope line="104"/>
                    <scope line="107"/>
                </scope>
            </method>
            <javadoc line="112">
                test a matrix already in tridiagonal form.                
            </javadoc>
            <method name="testTridiagonal" type="void" line="115">
                <declaration name="r" type="Random" line="116"/>
                <declaration name="ref" type="double[]" line="117"/>
                <scope line="118">
                    <scope line="119"/>
                    <scope line="122"/>
                </scope>
                <declaration name="t" type="TriDiagonalTransformer" line="127"/>
                <declaration name="ed" type="EigenDecomposition" line="128"/>
                <declaration name="eigenValues" type="double[]" line="130"/>
                <scope line="132"/>
            </method>
            <javadoc line="136">
                test dimensions                
            </javadoc>
            <method name="testDimensions" type="void" line="139">
                <declaration name="m" type="int" line="140"/>
                <declaration name="ed" type="EigenDecomposition" line="141"/>
            </method>
            <javadoc line="150">
                test eigenvalues                
            </javadoc>
            <method name="testEigenvalues" type="void" line="153">
                <declaration name="ed" type="EigenDecomposition" line="154"/>
                <declaration name="eigenValues" type="double[]" line="156"/>
                <scope line="158"/>
            </method>
            <javadoc line="162">
                test eigenvalues for a big matrix.                
            </javadoc>
            <method name="testBigMatrix" type="void" line="165">
                <declaration name="r" type="Random" line="166"/>
                <declaration name="bigValues" type="double[]" line="167"/>
                <scope line="168"/>
                <declaration name="ed" type="EigenDecomposition" line="172"/>
                <declaration name="eigenValues" type="double[]" line="174"/>
                <scope line="176"/>
            </method>
            <method name="testSymmetric" type="void" line="180">
                <declaration name="symmetric" type="RealMatrix" line="181"/>
                <declaration name="ed" type="EigenDecomposition" line="182"/>
                <declaration name="d" type="RealMatrix" line="184"/>
                <declaration name="v" type="RealMatrix" line="185"/>
                <declaration name="vT" type="RealMatrix" line="186"/>
                <declaration name="norm" type="double" line="187"/>
            </method>
            <method name="testSquareRoot" type="void" line="190">
                <declaration name="data" type="double[][]" line="191"/>
                <declaration name="dec" type="EigenDecomposition" line="192"/>
                <declaration name="sqrtM" type="RealMatrix" line="193"/>
                <declaration name="m" type="RealMatrix" line="194"/>
                <declaration name="dim" type="int" line="195"/>
                <scope line="196">
                    <scope line="197"/>
                </scope>
            </method>
            <method name="testSquareRootNonSymmetric" type="void" line="202">
                <declaration name="data" type="double[][]" line="203"/>
                <declaration name="dec" type="EigenDecomposition" line="204"/>
                <declaration name="sqrtM" type="RealMatrix" line="205"/>
            </method>
            <method name="testSquareRootNonPositiveDefinite" type="void" line="207">
                <declaration name="data" type="double[][]" line="208"/>
                <declaration name="dec" type="EigenDecomposition" line="209"/>
                <declaration name="sqrtM" type="RealMatrix" line="210"/>
            </method>
            <method name="testUnsymmetric" type="void" line="212">
                <declaration name="vData" type="double[][]" line="213"/>
                <declaration name="randMatrix" type="RealMatrix" line="215"/>
                <declaration name="randData2" type="double[][]" line="217"/>
            </method>
            <method name="testRandomUnsymmetricMatrix" type="void" line="220">
                <scope line="221">
                    <declaration name="r" type="Random" line="222"/>
                    <declaration name="size" type="int" line="223"/>
                    <declaration name="data" type="double[][]" line="224"/>
                    <scope line="225">
                        <scope line="226"/>
                    </scope>
                    <declaration name="m" type="RealMatrix" line="230"/>
                </scope>
            </method>
            <method name="testNormalDistributionUnsymmetricMatrix" type="void" line="234">
                <scope line="235">
                    <declaration name="r" type="Random" line="236"/>
                    <declaration name="dist" type="NormalDistribution" line="237"/>
                    <declaration name="size" type="int" line="238"/>
                    <declaration name="data" type="double[][]" line="239"/>
                    <scope line="240">
                        <scope line="241"/>
                    </scope>
                    <declaration name="m" type="RealMatrix" line="245"/>
                </scope>
            </method>
            <method name="testMath848" type="void" line="249">
                <declaration name="data" type="double[][]" line="250"/>
                <declaration name="m" type="RealMatrix" line="251"/>
            </method>
            <javadoc line="254">
                Checks that the eigen decomposition of a general (unsymmetric) matrix is valid by
                  checking: AV = VD                
            </javadoc>
            <method name="checkUnsymmetricMatrix" type="void" line="258">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <scope line="259">
                    <declaration name="ed" type="EigenDecomposition" line="260"/>
                    <declaration name="d" type="RealMatrix" line="261"/>
                    <declaration name="v" type="RealMatrix" line="262"/>
                    <declaration name="x" type="RealMatrix" line="263"/>
                    <declaration name="y" type="RealMatrix" line="264"/>
                    <declaration name="diffNorm" type="double" line="265"/>
                    <declaration name="invV" type="RealMatrix" line="267"/>
                    <declaration name="norm" type="double" line="268"/>
                </scope>
                <scope line="271"/>
            </method>
            <javadoc line="275">
                test eigenvectors                
            </javadoc>
            <method name="testEigenvectors" type="void" line="278">
                <declaration name="ed" type="EigenDecomposition" line="279"/>
                <scope line="281">
                    <declaration name="lambda" type="double" line="282"/>
                    <declaration name="v" type="RealVector" line="283"/>
                    <declaration name="mV" type="RealVector" line="284"/>
                </scope>
            </method>
            <javadoc line="288">
                test A = VDVt                
            </javadoc>
            <method name="testAEqualVDVt" type="void" line="291">
                <declaration name="ed" type="EigenDecomposition" line="292"/>
                <declaration name="v" type="RealMatrix" line="294"/>
                <declaration name="d" type="RealMatrix" line="295"/>
                <declaration name="vT" type="RealMatrix" line="296"/>
                <declaration name="norm" type="double" line="297"/>
            </method>
            <javadoc line="300">
                test that V is orthogonal                
            </javadoc>
            <method name="testVOrthogonal" type="void" line="303">
                <declaration name="v" type="RealMatrix" line="304"/>
                <declaration name="vTv" type="RealMatrix" line="305"/>
                <declaration name="id" type="RealMatrix" line="306"/>
            </method>
            <javadoc line="309">
                test diagonal matrix                
            </javadoc>
            <method name="testDiagonal" type="void" line="312">
                <declaration name="diagonal" type="double[]" line="313"/>
                <declaration name="m" type="RealMatrix" line="314"/>
                <declaration name="ed" type="EigenDecomposition" line="315"/>
            </method>
            <javadoc line="322">
                Matrix with eigenvalues {8, -1, -1}                
            </javadoc>
            <method name="testRepeatedEigenvalue" type="void" line="325">
                <declaration name="repeated" type="RealMatrix" line="326"/>
                <declaration name="ed" type="EigenDecomposition" line="327"/>
            </method>
            <javadoc line="332">
                Matrix with eigenvalues {2, 0, 12}                
            </javadoc>
            <method name="testDistinctEigenvalues" type="void" line="335">
                <declaration name="distinct" type="RealMatrix" line="336"/>
                <declaration name="ed" type="EigenDecomposition" line="337"/>
            </method>
            <javadoc line="344">
                Verifies operation on indefinite matrix                
            </javadoc>
            <method name="testZeroDivide" type="void" line="347">
                <declaration name="indefinite" type="RealMatrix" line="348"/>
                <declaration name="ed" type="EigenDecomposition" line="349"/>
                <declaration name="isqrt3" type="double" line="352"/>
                <declaration name="isqrt2" type="double" line="354"/>
                <declaration name="isqrt6" type="double" line="356"/>
            </method>
            <javadoc line="359">
                Verifies that the given EigenDecomposition has eigenvalues equivalent to
                  the targetValues, ignoring the order of the values and allowing
                  values to differ by tolerance.                
            </javadoc>
            <method name="checkEigenValues" type="void" line="364">
                <params>
                    <param name="targetValues" type="double[]"/>
                    <param name="ed" type="EigenDecomposition"/>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="observed" type="double[]" line="365"/>
                <scope line="366"/>
            </method>
            <javadoc line="371">
                Returns true iff there is an entry within tolerance of value in
                  searchArray.                
            </javadoc>
            <method name="isIncludedValue" type="boolean" line="375">
                <params>
                    <param name="value" type="double"/>
                    <param name="searchArray" type="double[]"/>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="found" type="boolean" line="376"/>
                <declaration name="i" type="int" line="377"/>
                <scope line="378">
                    <scope line="379"/>
                </scope>
            </method>
            <javadoc line="386">
                Returns true iff eigenVector is a scalar multiple of one of the columns
                  of ed.getV().  Does not try linear combinations - i.e., should only be
                  used to find vectors in one-dimensional eigenspaces.                
            </javadoc>
            <method name="checkEigenVector" type="void" line="391">
                <params>
                    <param name="eigenVector" type="double[]"/>
                    <param name="ed" type="EigenDecomposition"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="394">
                Returns true iff there is a column that is a scalar multiple of column
                  in searchMatrix (modulo tolerance)                
            </javadoc>
            <method name="isIncludedColumn" type="boolean" line="398">
                <params>
                    <param name="column" type="double[]"/>
                    <param name="searchMatrix" type="RealMatrix"/>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="found" type="boolean" line="399"/>
                <declaration name="i" type="int" line="400"/>
                <scope line="401">
                    <declaration name="multiplier" type="double" line="402"/>
                    <declaration name="matching" type="boolean" line="403"/>
                    <declaration name="j" type="int" line="404"/>
                    <scope line="405">
                        <declaration name="colEntry" type="double" line="406"/>
                        <scope line="407"/>
                        <scope line="410"/>
                    </scope>
                </scope>
            </method>
            <method name="setUp" type="void" line="420"/>
            <method name="tearDown" type="void" line="424"/>
            <method name="createTestMatrix" type="RealMatrix" line="428">
                <params>
                    <param name="r" type="Random"/>
                    <param name="eigenValues" type="double[]"/>
                </params>
                <declaration name="n" type="int" line="429"/>
                <declaration name="v" type="RealMatrix" line="430"/>
                <declaration name="d" type="RealMatrix" line="431"/>
            </method>
            <method name="createOrthogonalMatrix" type="RealMatrix" line="434">
                <params>
                    <param name="r" type="Random"/>
                    <param name="size" type="int"/>
                </params>
                <declaration name="data" type="double[][]" line="435"/>
                <scope line="436">
                    <declaration name="dataI" type="double[]" line="437"/>
                    <declaration name="norm2" type="double" line="438"/>
                    <scope line="439">
                        <scope line="440"/>
                        <scope line="443">
                            <declaration name="dataK" type="double[]" line="444"/>
                            <declaration name="dotProduct" type="double" line="445"/>
                            <scope line="446"/>
                            <scope line="449"/>
                        </scope>
                        <scope line="454"/>
                        <declaration name="inv" type="double" line="457"/>
                        <scope line="458"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>