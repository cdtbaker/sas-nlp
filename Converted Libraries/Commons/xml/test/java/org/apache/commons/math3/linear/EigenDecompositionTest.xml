<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.junit.After"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.Test"/>
        <class name="EigenDecompositionTest" line="34">
            <comment line="126">
                the following test triggered an ArrayIndexOutOfBoundsException in commons-math 2.0                
            </comment>
            <declaration name="refValues" type="double[]" line="36"/>
            <declaration name="matrix" type="RealMatrix" line="37"/>
            <method name="testDimension1" type="void" line="40">
                <declaration name="matrix" type="RealMatrix" line="41"/>
                <declaration name="ed" type="EigenDecomposition" line="43"/>
            </method>
            <method name="testDimension2" type="void" line="49">
                <declaration name="matrix" type="RealMatrix" line="50"/>
                <declaration name="ed" type="EigenDecomposition" line="55"/>
            </method>
            <method name="testDimension3" type="void" line="62">
                <declaration name="matrix" type="RealMatrix" line="63"/>
                <declaration name="ed" type="EigenDecomposition" line="69"/>
            </method>
            <method name="testDimension3MultipleRoot" type="void" line="77">
                <declaration name="matrix" type="RealMatrix" line="78"/>
                <declaration name="ed" type="EigenDecomposition" line="84"/>
            </method>
            <method name="testDimension4WithSplit" type="void" line="92">
                <declaration name="matrix" type="RealMatrix" line="93"/>
                <declaration name="ed" type="EigenDecomposition" line="100"/>
            </method>
            <method name="testDimension4WithoutSplit" type="void" line="109">
                <declaration name="matrix" type="RealMatrix" line="110"/>
                <declaration name="ed" type="EigenDecomposition" line="117"/>
            </method>
            <method name="testMath308" type="void" line="127">
                <comment line="136">
                    the reference values have been computed using routine DSTEMR                    
                </comment>
                <comment line="137">
                    from the fortran library LAPACK version 3.2.1                    
                </comment>
                <declaration name="mainTridiagonal" type="double[]" line="129"/>
                <declaration name="secondaryTridiagonal" type="double[]" line="132"/>
                <declaration name="refEigenValues" type="double[]" line="138"/>
                <declaration name="refEigenVectors" type="RealVector[]" line="141"/>
                <declaration name="decomposition" type="EigenDecomposition" line="149"/>
                <declaration name="eigenValues" type="double[]" line="152"/>
                <scope line="153"/>
            </method>
            <method name="testMathpbx02" type="void" line="161">
                <comment line="173">
                    the reference values have been computed using routine DSTEMR                    
                </comment>
                <comment line="174">
                    from the fortran library LAPACK version 3.2.1                    
                </comment>
                <comment line="191">
                    the following line triggers the exception                    
                </comment>
                <declaration name="mainTridiagonal" type="double[]" line="163"/>
                <declaration name="secondaryTridiagonal" type="double[]" line="168"/>
                <declaration name="refEigenValues" type="double[]" line="175"/>
                <declaration name="refEigenVectors" type="RealVector[]" line="181"/>
                <declaration name="decomposition" type="EigenDecomposition" line="192"/>
                <declaration name="eigenValues" type="double[]" line="195"/>
                <scope line="196">
                    <scope line="198"/>
                    <scope line="200"/>
                </scope>
            </method>
            <method name="testMathpbx03" type="void" line="208">
                <comment line="219">
                    the reference values have been computed using routine DSTEMR                    
                </comment>
                <comment line="220">
                    from the fortran library LAPACK version 3.2.1                    
                </comment>
                <comment line="236">
                    the following line triggers the exception                    
                </comment>
                <declaration name="mainTridiagonal" type="double[]" line="210"/>
                <declaration name="secondaryTridiagonal" type="double[]" line="214"/>
                <declaration name="refEigenValues" type="double[]" line="221"/>
                <declaration name="refEigenVectors" type="RealVector[]" line="226"/>
                <declaration name="decomposition" type="EigenDecomposition" line="237"/>
                <declaration name="eigenValues" type="double[]" line="240"/>
                <scope line="241">
                    <scope line="243"/>
                    <scope line="245"/>
                </scope>
            </method>
            <javadoc line="252">
                test a matrix already in tridiagonal form.                
            </javadoc>
            <method name="testTridiagonal" type="void" line="254">
                <declaration name="r" type="Random" line="255"/>
                <declaration name="ref" type="double[]" line="256"/>
                <scope line="257">
                    <scope line="258"/>
                    <scope line="260"/>
                </scope>
                <declaration name="t" type="TriDiagonalTransformer" line="265"/>
                <declaration name="ed" type="EigenDecomposition" line="267"/>
                <declaration name="eigenValues" type="double[]" line="269"/>
                <scope line="271"/>
            </method>
            <javadoc line="277">
                test dimensions                
            </javadoc>
            <method name="testDimensions" type="void" line="279">
                <declaration name="m" type="int" line="280"/>
                <declaration name="ed" type="EigenDecomposition" line="281"/>
            </method>
            <javadoc line="291">
                test eigenvalues                
            </javadoc>
            <method name="testEigenvalues" type="void" line="293">
                <declaration name="ed" type="EigenDecomposition" line="294"/>
                <declaration name="eigenValues" type="double[]" line="296"/>
                <scope line="298"/>
            </method>
            <javadoc line="303">
                test eigenvalues for a big matrix.                
            </javadoc>
            <method name="testBigMatrix" type="void" line="305">
                <declaration name="r" type="Random" line="306"/>
                <declaration name="bigValues" type="double[]" line="307"/>
                <scope line="308"/>
                <declaration name="ed" type="EigenDecomposition" line="312"/>
                <declaration name="eigenValues" type="double[]" line="314"/>
                <scope line="316"/>
            </method>
            <method name="testSymmetric" type="void" line="322">
                <declaration name="symmetric" type="RealMatrix" line="323"/>
                <declaration name="ed" type="EigenDecomposition" line="329"/>
                <declaration name="d" type="RealMatrix" line="332"/>
                <declaration name="v" type="RealMatrix" line="333"/>
                <declaration name="vT" type="RealMatrix" line="334"/>
                <declaration name="norm" type="double" line="336"/>
            </method>
            <method name="testSquareRoot" type="void" line="341">
                <comment line="351">
                    Reconstruct initial matrix.                    
                </comment>
                <declaration name="data" type="double[][]" line="342"/>
                <declaration name="dec" type="EigenDecomposition" line="348"/>
                <declaration name="sqrtM" type="RealMatrix" line="349"/>
                <declaration name="m" type="RealMatrix" line="352"/>
                <declaration name="dim" type="int" line="354"/>
                <scope line="355">
                    <scope line="356"/>
                </scope>
            </method>
            <method name="testSquareRootNonSymmetric" type="void" line="364">
                <declaration name="data" type="double[][]" line="365"/>
                <declaration name="dec" type="EigenDecomposition" line="371"/>
                <declaration name="sqrtM" type="RealMatrix" line="372"/>
            </method>
            <method name="testSquareRootNonPositiveDefinite" type="void" line="376">
                <declaration name="data" type="double[][]" line="377"/>
                <declaration name="dec" type="EigenDecomposition" line="383"/>
                <declaration name="sqrtM" type="RealMatrix" line="384"/>
            </method>
            <method name="testUnsymmetric" type="void" line="388">
                <comment line="389">
                    Vandermonde matrix V(x;i,j) = x_i^{n - j} with x = (-1,-2,3,4)                    
                </comment>
                <comment line="404">
                    from http://eigen.tuxfamily.org/dox/classEigen_1_1RealSchur.html                    
                </comment>
                <declaration name="vData" type="double[][]" line="390"/>
                <declaration name="randMatrix" type="RealMatrix" line="396"/>
                <declaration name="randData2" type="double[][]" line="405"/>
            </method>
            <method name="testRandomUnsymmetricMatrix" type="void" line="418">
                <comment line="422">
                    matrix size                    
                </comment>
                <scope line="419">
                    <declaration name="r" type="Random" line="420"/>
                    <declaration name="size" type="int" line="423"/>
                    <declaration name="data" type="double[][]" line="425"/>
                    <scope line="426">
                        <scope line="427"/>
                    </scope>
                    <declaration name="m" type="RealMatrix" line="432"/>
                </scope>
            </method>
            <method name="testNormalDistributionUnsymmetricMatrix" type="void" line="439">
                <comment line="444">
                    matrix size                    
                </comment>
                <scope line="440">
                    <declaration name="r" type="Random" line="441"/>
                    <declaration name="dist" type="NormalDistribution" line="442"/>
                    <declaration name="size" type="int" line="445"/>
                    <declaration name="data" type="double[][]" line="447"/>
                    <scope line="448">
                        <scope line="449"/>
                    </scope>
                    <declaration name="m" type="RealMatrix" line="454"/>
                </scope>
            </method>
            <method name="testMath848" type="void" line="460">
                <declaration name="data" type="double[][]" line="461"/>
                <declaration name="m" type="RealMatrix" line="470"/>
            </method>
            <javadoc line="474">
                Checks that the eigen decomposition of a general (unsymmetric) matrix is valid by
                  checking: AV = VD                
            </javadoc>
            <method name="checkUnsymmetricMatrix" type="void" line="478">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <comment line="484">
                    RealMatrix vT = ed.getVT();                    
                </comment>
                <scope line="479">
                    <declaration name="ed" type="EigenDecomposition" line="480"/>
                    <declaration name="d" type="RealMatrix" line="482"/>
                    <declaration name="v" type="RealMatrix" line="483"/>
                    <declaration name="x" type="RealMatrix" line="486"/>
                    <declaration name="y" type="RealMatrix" line="487"/>
                    <declaration name="diffNorm" type="double" line="489"/>
                    <declaration name="invV" type="RealMatrix" line="493"/>
                    <declaration name="norm" type="double" line="494"/>
                </scope>
                <scope line="496"/>
            </method>
            <javadoc line="501">
                test eigenvectors                
            </javadoc>
            <method name="testEigenvectors" type="void" line="503">
                <declaration name="ed" type="EigenDecomposition" line="504"/>
                <scope line="506">
                    <declaration name="lambda" type="double" line="507"/>
                    <declaration name="v" type="RealVector" line="508"/>
                    <declaration name="mV" type="RealVector" line="509"/>
                </scope>
            </method>
            <javadoc line="514">
                test A = VDVt                
            </javadoc>
            <method name="testAEqualVDVt" type="void" line="516">
                <declaration name="ed" type="EigenDecomposition" line="517"/>
                <declaration name="v" type="RealMatrix" line="519"/>
                <declaration name="d" type="RealMatrix" line="520"/>
                <declaration name="vT" type="RealMatrix" line="521"/>
                <declaration name="norm" type="double" line="522"/>
            </method>
            <javadoc line="526">
                test that V is orthogonal                
            </javadoc>
            <method name="testVOrthogonal" type="void" line="528">
                <declaration name="v" type="RealMatrix" line="529"/>
                <declaration name="vTv" type="RealMatrix" line="530"/>
                <declaration name="id" type="RealMatrix" line="531"/>
            </method>
            <javadoc line="535">
                test diagonal matrix                
            </javadoc>
            <method name="testDiagonal" type="void" line="537">
                <declaration name="diagonal" type="double[]" line="538"/>
                <declaration name="m" type="RealMatrix" line="539"/>
                <declaration name="ed" type="EigenDecomposition" line="540"/>
            </method>
            <javadoc line="548">
                Matrix with eigenvalues {8, -1, -1}                
            </javadoc>
            <method name="testRepeatedEigenvalue" type="void" line="552">
                <declaration name="repeated" type="RealMatrix" line="553"/>
                <declaration name="ed" type="EigenDecomposition" line="558"/>
            </method>
            <javadoc line="564">
                Matrix with eigenvalues {2, 0, 12}                
            </javadoc>
            <method name="testDistinctEigenvalues" type="void" line="568">
                <declaration name="distinct" type="RealMatrix" line="569"/>
                <declaration name="ed" type="EigenDecomposition" line="574"/>
            </method>
            <javadoc line="582">
                Verifies operation on indefinite matrix                
            </javadoc>
            <method name="testZeroDivide" type="void" line="586">
                <declaration name="indefinite" type="RealMatrix" line="587"/>
                <declaration name="ed" type="EigenDecomposition" line="592"/>
                <declaration name="isqrt3" type="double" line="595"/>
                <declaration name="isqrt2" type="double" line="597"/>
                <declaration name="isqrt6" type="double" line="599"/>
            </method>
            <javadoc line="602">
                Verifies that the given EigenDecomposition has eigenvalues equivalent to
                  the targetValues, ignoring the order of the values and allowing
                  values to differ by tolerance.                
            </javadoc>
            <method name="checkEigenValues" type="void" line="608">
                <params>
                    <param name="targetValues" type="double[]"/>
                    <param name="ed" type="EigenDecomposition"/>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="observed" type="double[]" line="609"/>
                <scope line="610"/>
            </method>
            <javadoc line="617">
                Returns true iff there is an entry within tolerance of value in
                  searchArray.                
            </javadoc>
            <method name="isIncludedValue" type="boolean" line="622">
                <params>
                    <param name="value" type="double"/>
                    <param name="searchArray" type="double[]"/>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="found" type="boolean" line="623"/>
                <declaration name="i" type="int" line="624"/>
                <scope line="625">
                    <scope line="626"/>
                </scope>
            </method>
            <javadoc line="634">
                Returns true iff eigenVector is a scalar multiple of one of the columns
                  of ed.getV().  Does not try linear combinations - i.e., should only be
                  used to find vectors in one-dimensional eigenspaces.                
            </javadoc>
            <method name="checkEigenVector" type="void" line="640">
                <params>
                    <param name="eigenVector" type="double[]"/>
                    <param name="ed" type="EigenDecomposition"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="644">
                Returns true iff there is a column that is a scalar multiple of column
                  in searchMatrix (modulo tolerance)                
            </javadoc>
            <method name="isIncludedColumn" type="boolean" line="649">
                <params>
                    <param name="column" type="double[]"/>
                    <param name="searchMatrix" type="RealMatrix"/>
                    <param name="tolerance" type="double"/>
                </params>
                <comment line="658">
                    Use the first entry where both are non-zero as scalar                    
                </comment>
                <declaration name="found" type="boolean" line="650"/>
                <declaration name="i" type="int" line="651"/>
                <scope line="652">
                    <declaration name="multiplier" type="double" line="653"/>
                    <declaration name="matching" type="boolean" line="654"/>
                    <declaration name="j" type="int" line="655"/>
                    <scope line="656">
                        <declaration name="colEntry" type="double" line="657"/>
                        <scope line="660"/>
                        <scope line="663"/>
                    </scope>
                </scope>
            </method>
            <method name="setUp" type="void" line="675"/>
            <method name="tearDown" type="void" line="683"/>
            <method name="createTestMatrix" type="RealMatrix" line="688">
                <params>
                    <param name="r" type="Random"/>
                    <param name="eigenValues" type="double[]"/>
                </params>
                <declaration name="n" type="int" line="689"/>
                <declaration name="v" type="RealMatrix" line="690"/>
                <declaration name="d" type="RealMatrix" line="691"/>
            </method>
            <method name="createOrthogonalMatrix" type="RealMatrix" line="695">
                <params>
                    <param name="r" type="Random"/>
                    <param name="size" type="int"/>
                </params>
                <comment line="704">
                    generate randomly row I                    
                </comment>
                <comment line="709">
                    project the row in the subspace orthogonal to previous rows                    
                </comment>
                <comment line="721">
                    normalize the row                    
                </comment>
                <declaration name="data" type="double[][]" line="697"/>
                <scope line="699">
                    <declaration name="dataI" type="double[]" line="700"/>
                    <declaration name="norm2" type="double" line="701"/>
                    <scope line="702">
                        <scope line="705"/>
                        <scope line="710">
                            <declaration name="dataK" type="double[]" line="711"/>
                            <declaration name="dotProduct" type="double" line="712"/>
                            <scope line="713"/>
                            <scope line="716"/>
                        </scope>
                        <scope line="723"/>
                        <declaration name="inv" type="double" line="726"/>
                        <scope line="727"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>