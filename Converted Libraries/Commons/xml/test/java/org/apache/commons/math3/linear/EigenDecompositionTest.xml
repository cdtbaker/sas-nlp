<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.distribution.NormalDistribution"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <import package="org.junit.After"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Before"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.Test"/>
        <class name="EigenDecompositionTest" line="35">
            <comment line="127">
                the following test triggered an ArrayIndexOutOfBoundsException in commons-math 2.0                
            </comment>
            <declaration name="refValues" type="double[]" line="37"/>
            <declaration name="matrix" type="RealMatrix" line="38"/>
            <method name="testDimension1" type="void" line="41">
                <declaration name="matrix" type="RealMatrix" line="42"/>
                <declaration name="ed" type="EigenDecomposition" line="44"/>
            </method>
            <method name="testDimension2" type="void" line="50">
                <declaration name="matrix" type="RealMatrix" line="51"/>
                <declaration name="ed" type="EigenDecomposition" line="56"/>
            </method>
            <method name="testDimension3" type="void" line="63">
                <declaration name="matrix" type="RealMatrix" line="64"/>
                <declaration name="ed" type="EigenDecomposition" line="70"/>
            </method>
            <method name="testDimension3MultipleRoot" type="void" line="78">
                <declaration name="matrix" type="RealMatrix" line="79"/>
                <declaration name="ed" type="EigenDecomposition" line="85"/>
            </method>
            <method name="testDimension4WithSplit" type="void" line="93">
                <declaration name="matrix" type="RealMatrix" line="94"/>
                <declaration name="ed" type="EigenDecomposition" line="101"/>
            </method>
            <method name="testDimension4WithoutSplit" type="void" line="110">
                <declaration name="matrix" type="RealMatrix" line="111"/>
                <declaration name="ed" type="EigenDecomposition" line="118"/>
            </method>
            <method name="testMath308" type="void" line="128">
                <comment line="138">
                    the reference values have been computed using routine DSTEMR
                     from the fortran library LAPACK version 3.2.1                    
                </comment>
                <declaration name="mainTridiagonal" type="double[]" line="130"/>
                <declaration name="secondaryTridiagonal" type="double[]" line="133"/>
                <declaration name="refEigenValues" type="double[]" line="139"/>
                <declaration name="refEigenVectors" type="RealVector[]" line="142"/>
                <declaration name="decomposition" type="EigenDecomposition" line="150"/>
                <declaration name="eigenValues" type="double[]" line="153"/>
                <scope line="154"/>
            </method>
            <method name="testMathpbx02" type="void" line="162">
                <comment line="175">
                    the reference values have been computed using routine DSTEMR
                     from the fortran library LAPACK version 3.2.1                    
                </comment>
                <comment line="193">
                    the following line triggers the exception                    
                </comment>
                <declaration name="mainTridiagonal" type="double[]" line="164"/>
                <declaration name="secondaryTridiagonal" type="double[]" line="169"/>
                <declaration name="refEigenValues" type="double[]" line="176"/>
                <declaration name="refEigenVectors" type="RealVector[]" line="182"/>
                <declaration name="decomposition" type="EigenDecomposition" line="193"/>
                <declaration name="eigenValues" type="double[]" line="196"/>
                <scope line="197">
                    <scope line="199"/>
                    <scope line="201"/>
                </scope>
            </method>
            <method name="testMathpbx03" type="void" line="209">
                <comment line="221">
                    the reference values have been computed using routine DSTEMR
                     from the fortran library LAPACK version 3.2.1                    
                </comment>
                <comment line="238">
                    the following line triggers the exception                    
                </comment>
                <declaration name="mainTridiagonal" type="double[]" line="211"/>
                <declaration name="secondaryTridiagonal" type="double[]" line="215"/>
                <declaration name="refEigenValues" type="double[]" line="222"/>
                <declaration name="refEigenVectors" type="RealVector[]" line="227"/>
                <declaration name="decomposition" type="EigenDecomposition" line="238"/>
                <declaration name="eigenValues" type="double[]" line="241"/>
                <scope line="242">
                    <scope line="244"/>
                    <scope line="246"/>
                </scope>
            </method>
            <javadoc line="253">
                test a matrix already in tridiagonal form.                
            </javadoc>
            <method name="testTridiagonal" type="void" line="255">
                <declaration name="r" type="Random" line="256"/>
                <declaration name="ref" type="double[]" line="257"/>
                <scope line="258">
                    <scope line="259"/>
                    <scope line="261"/>
                </scope>
                <declaration name="t" type="TriDiagonalTransformer" line="266"/>
                <declaration name="ed" type="EigenDecomposition" line="268"/>
                <declaration name="eigenValues" type="double[]" line="270"/>
                <scope line="272"/>
            </method>
            <javadoc line="278">
                test dimensions                
            </javadoc>
            <method name="testDimensions" type="void" line="280">
                <declaration name="m" type="int" line="281"/>
                <declaration name="ed" type="EigenDecomposition" line="282"/>
            </method>
            <javadoc line="292">
                test eigenvalues                
            </javadoc>
            <method name="testEigenvalues" type="void" line="294">
                <declaration name="ed" type="EigenDecomposition" line="295"/>
                <declaration name="eigenValues" type="double[]" line="297"/>
                <scope line="299"/>
            </method>
            <javadoc line="304">
                test eigenvalues for a big matrix.                
            </javadoc>
            <method name="testBigMatrix" type="void" line="306">
                <declaration name="r" type="Random" line="307"/>
                <declaration name="bigValues" type="double[]" line="308"/>
                <scope line="309"/>
                <declaration name="ed" type="EigenDecomposition" line="313"/>
                <declaration name="eigenValues" type="double[]" line="315"/>
                <scope line="317"/>
            </method>
            <method name="testSymmetric" type="void" line="323">
                <declaration name="symmetric" type="RealMatrix" line="324"/>
                <declaration name="ed" type="EigenDecomposition" line="330"/>
                <declaration name="d" type="RealMatrix" line="333"/>
                <declaration name="v" type="RealMatrix" line="334"/>
                <declaration name="vT" type="RealMatrix" line="335"/>
                <declaration name="norm" type="double" line="337"/>
            </method>
            <method name="testSquareRoot" type="void" line="342">
                <comment line="353">
                    Reconstruct initial matrix.                    
                </comment>
                <declaration name="data" type="double[][]" line="343"/>
                <declaration name="dec" type="EigenDecomposition" line="349"/>
                <declaration name="sqrtM" type="RealMatrix" line="350"/>
                <declaration name="m" type="RealMatrix" line="353"/>
                <declaration name="dim" type="int" line="355"/>
                <scope line="356">
                    <scope line="357"/>
                </scope>
            </method>
            <method name="testSquareRootNonSymmetric" type="void" line="365">
                <declaration name="data" type="double[][]" line="366"/>
                <declaration name="dec" type="EigenDecomposition" line="372"/>
                <declaration name="sqrtM" type="RealMatrix" line="373"/>
            </method>
            <method name="testSquareRootNonPositiveDefinite" type="void" line="378">
                <declaration name="data" type="double[][]" line="379"/>
                <declaration name="dec" type="EigenDecomposition" line="385"/>
                <declaration name="sqrtM" type="RealMatrix" line="386"/>
            </method>
            <method name="testUnsymmetric" type="void" line="391">
                <comment line="393">
                    Vandermonde matrix V(x;i,j) = x_i^{n - j} with x = (-1,-2,3,4)                    
                </comment>
                <comment line="408">
                    from http://eigen.tuxfamily.org/dox/classEigen_1_1RealSchur.html                    
                </comment>
                <declaration name="vData" type="double[][]" line="393"/>
                <declaration name="randMatrix" type="RealMatrix" line="399"/>
                <declaration name="randData2" type="double[][]" line="408"/>
            </method>
            <method name="testRandomUnsymmetricMatrix" type="void" line="421">
                <comment line="426">
                    matrix size                    
                </comment>
                <scope line="422">
                    <declaration name="r" type="Random" line="423"/>
                    <declaration name="size" type="int" line="426"/>
                    <declaration name="data" type="double[][]" line="428"/>
                    <scope line="429">
                        <scope line="430"/>
                    </scope>
                    <declaration name="m" type="RealMatrix" line="435"/>
                </scope>
            </method>
            <javadoc line="440">
                Tests the porting of a bugfix in Jama-1.0.3 (from changelog):
                  Patched hqr2 method in Jama.EigenvalueDecomposition to avoid infinite loop;
                  Thanks Frederic Devernay &lt;frederic.devernay@m4x.org&gt;                
            </javadoc>
            <method name="testMath1051" type="void" line="447">
                <declaration name="data" type="double[][]" line="448"/>
                <declaration name="m" type="RealMatrix" line="456"/>
            </method>
            <method name="testNormalDistributionUnsymmetricMatrix" type="void" line="462">
                <comment line="468">
                    matrix size                    
                </comment>
                <scope line="463">
                    <declaration name="r" type="Random" line="464"/>
                    <declaration name="dist" type="NormalDistribution" line="465"/>
                    <declaration name="size" type="int" line="468"/>
                    <declaration name="data" type="double[][]" line="470"/>
                    <scope line="471">
                        <scope line="472"/>
                    </scope>
                    <declaration name="m" type="RealMatrix" line="477"/>
                </scope>
            </method>
            <method name="testMath848" type="void" line="483">
                <declaration name="data" type="double[][]" line="484"/>
                <declaration name="m" type="RealMatrix" line="493"/>
            </method>
            <javadoc line="497">
                Checks that the eigen decomposition of a general (unsymmetric) matrix is valid by
                  checking: AV = VD                
            </javadoc>
            <method name="checkUnsymmetricMatrix" type="void" line="501">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <comment line="508">
                    RealMatrix vT = ed.getVT();                    
                </comment>
                <scope line="502">
                    <declaration name="ed" type="EigenDecomposition" line="503"/>
                    <declaration name="d" type="RealMatrix" line="505"/>
                    <declaration name="v" type="RealMatrix" line="506"/>
                    <declaration name="x" type="RealMatrix" line="509"/>
                    <declaration name="y" type="RealMatrix" line="510"/>
                    <declaration name="diffNorm" type="double" line="512"/>
                    <declaration name="invV" type="RealMatrix" line="516"/>
                    <declaration name="norm" type="double" line="517"/>
                </scope>
                <scope line="519"/>
            </method>
            <javadoc line="524">
                test eigenvectors                
            </javadoc>
            <method name="testEigenvectors" type="void" line="526">
                <declaration name="ed" type="EigenDecomposition" line="527"/>
                <scope line="529">
                    <declaration name="lambda" type="double" line="530"/>
                    <declaration name="v" type="RealVector" line="531"/>
                    <declaration name="mV" type="RealVector" line="532"/>
                </scope>
            </method>
            <javadoc line="537">
                test A = VDVt                
            </javadoc>
            <method name="testAEqualVDVt" type="void" line="539">
                <declaration name="ed" type="EigenDecomposition" line="540"/>
                <declaration name="v" type="RealMatrix" line="542"/>
                <declaration name="d" type="RealMatrix" line="543"/>
                <declaration name="vT" type="RealMatrix" line="544"/>
                <declaration name="norm" type="double" line="545"/>
            </method>
            <javadoc line="549">
                test that V is orthogonal                
            </javadoc>
            <method name="testVOrthogonal" type="void" line="551">
                <declaration name="v" type="RealMatrix" line="552"/>
                <declaration name="vTv" type="RealMatrix" line="553"/>
                <declaration name="id" type="RealMatrix" line="554"/>
            </method>
            <javadoc line="558">
                test diagonal matrix                
            </javadoc>
            <method name="testDiagonal" type="void" line="560">
                <declaration name="diagonal" type="double[]" line="561"/>
                <declaration name="m" type="RealMatrix" line="562"/>
                <declaration name="ed" type="EigenDecomposition" line="563"/>
            </method>
            <javadoc line="571">
                Matrix with eigenvalues {8, -1, -1}                
            </javadoc>
            <method name="testRepeatedEigenvalue" type="void" line="575">
                <declaration name="repeated" type="RealMatrix" line="576"/>
                <declaration name="ed" type="EigenDecomposition" line="581"/>
            </method>
            <javadoc line="587">
                Matrix with eigenvalues {2, 0, 12}                
            </javadoc>
            <method name="testDistinctEigenvalues" type="void" line="591">
                <declaration name="distinct" type="RealMatrix" line="592"/>
                <declaration name="ed" type="EigenDecomposition" line="597"/>
            </method>
            <javadoc line="605">
                Verifies operation on indefinite matrix                
            </javadoc>
            <method name="testZeroDivide" type="void" line="609">
                <declaration name="indefinite" type="RealMatrix" line="610"/>
                <declaration name="ed" type="EigenDecomposition" line="615"/>
                <declaration name="isqrt3" type="double" line="618"/>
                <declaration name="isqrt2" type="double" line="620"/>
                <declaration name="isqrt6" type="double" line="622"/>
            </method>
            <javadoc line="626">
                Verifies operation on very small values.
                  Matrix with eigenvalues {2e-100, 0, 12e-100}                
            </javadoc>
            <method name="testTinyValues" type="void" line="631">
                <declaration name="tiny" type="double" line="632"/>
                <declaration name="distinct" type="RealMatrix" line="633"/>
                <declaration name="ed" type="EigenDecomposition" line="640"/>
            </method>
            <javadoc line="647">
                Verifies that the given EigenDecomposition has eigenvalues equivalent to
                  the targetValues, ignoring the order of the values and allowing
                  values to differ by tolerance.                
            </javadoc>
            <method name="checkEigenValues" type="void" line="653">
                <params>
                    <param name="targetValues" type="double[]"/>
                    <param name="ed" type="EigenDecomposition"/>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="observed" type="double[]" line="654"/>
                <scope line="655"/>
            </method>
            <javadoc line="662">
                Returns true iff there is an entry within tolerance of value in
                  searchArray.                
            </javadoc>
            <method name="isIncludedValue" type="boolean" line="667">
                <params>
                    <param name="value" type="double"/>
                    <param name="searchArray" type="double[]"/>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="found" type="boolean" line="668"/>
                <declaration name="i" type="int" line="669"/>
                <scope line="670">
                    <scope line="671"/>
                </scope>
            </method>
            <javadoc line="679">
                Returns true iff eigenVector is a scalar multiple of one of the columns
                  of ed.getV().  Does not try linear combinations - i.e., should only be
                  used to find vectors in one-dimensional eigenspaces.                
            </javadoc>
            <method name="checkEigenVector" type="void" line="685">
                <params>
                    <param name="eigenVector" type="double[]"/>
                    <param name="ed" type="EigenDecomposition"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="689">
                Returns true iff there is a column that is a scalar multiple of column
                  in searchMatrix (modulo tolerance)                
            </javadoc>
            <method name="isIncludedColumn" type="boolean" line="694">
                <params>
                    <param name="column" type="double[]"/>
                    <param name="searchMatrix" type="RealMatrix"/>
                    <param name="tolerance" type="double"/>
                </params>
                <comment line="704">
                    Use the first entry where both are non-zero as scalar                    
                </comment>
                <declaration name="found" type="boolean" line="695"/>
                <declaration name="i" type="int" line="696"/>
                <scope line="697">
                    <declaration name="multiplier" type="double" line="698"/>
                    <declaration name="matching" type="boolean" line="699"/>
                    <declaration name="j" type="int" line="700"/>
                    <scope line="701">
                        <declaration name="colEntry" type="double" line="702"/>
                        <scope line="705"/>
                        <scope line="708"/>
                    </scope>
                </scope>
            </method>
            <method name="setUp" type="void" line="720"/>
            <method name="tearDown" type="void" line="728"/>
            <method name="createTestMatrix" type="RealMatrix" line="733">
                <params>
                    <param name="r" type="Random"/>
                    <param name="eigenValues" type="double[]"/>
                </params>
                <declaration name="n" type="int" line="734"/>
                <declaration name="v" type="RealMatrix" line="735"/>
                <declaration name="d" type="RealMatrix" line="736"/>
            </method>
            <method name="createOrthogonalMatrix" type="RealMatrix" line="740">
                <params>
                    <param name="r" type="Random"/>
                    <param name="size" type="int"/>
                </params>
                <comment line="750">
                    generate randomly row I                    
                </comment>
                <comment line="755">
                    project the row in the subspace orthogonal to previous rows                    
                </comment>
                <comment line="767">
                    normalize the row                    
                </comment>
                <declaration name="data" type="double[][]" line="742"/>
                <scope line="744">
                    <declaration name="dataI" type="double[]" line="745"/>
                    <declaration name="norm2" type="double" line="746"/>
                    <scope line="747">
                        <scope line="750"/>
                        <scope line="755">
                            <declaration name="dataK" type="double[]" line="756"/>
                            <declaration name="dotProduct" type="double" line="757"/>
                            <scope line="758"/>
                            <scope line="761"/>
                        </scope>
                        <scope line="768"/>
                        <declaration name="inv" type="double" line="771"/>
                        <scope line="772"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>