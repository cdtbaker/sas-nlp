<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.polynomials">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator"/>
        <import package="org.apache.commons.math3.util.ArithmeticUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="PolynomialsUtilsTest" line="9">
            <javadoc line="9">
                Tests the PolynomialsUtils class.                
                <version>
                    $Id: PolynomialsUtilsTest.java 1377244 2012-08-25 10:05:13Z luc $                    
                </version>
            </javadoc>
            <method name="testFirstChebyshevPolynomials" type="void" line="14"/>
            <method name="testChebyshevBounds" type="void" line="24">
                <scope line="25">
                    <declaration name="Tk" type="PolynomialFunction" line="26"/>
                    <scope line="27"/>
                </scope>
            </method>
            <method name="testChebyshevDifferentials" type="void" line="32">
                <scope line="33">
                    <declaration name="Tk0" type="PolynomialFunction" line="34"/>
                    <declaration name="Tk1" type="PolynomialFunction" line="35"/>
                    <declaration name="Tk2" type="PolynomialFunction" line="36"/>
                    <declaration name="g0" type="PolynomialFunction" line="37"/>
                    <declaration name="g1" type="PolynomialFunction" line="38"/>
                    <declaration name="g2" type="PolynomialFunction" line="39"/>
                    <declaration name="Tk0g0" type="PolynomialFunction" line="40"/>
                    <declaration name="Tk1g1" type="PolynomialFunction" line="41"/>
                    <declaration name="Tk2g2" type="PolynomialFunction" line="42"/>
                </scope>
            </method>
            <method name="testChebyshevOrthogonality" type="void" line="46">
                <anonymous_class line="47">
                    <method name="value" type="double" line="48">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="weight" type="UnivariateFunction" line="47"/>
                <scope line="53">
                    <declaration name="pi" type="PolynomialFunction" line="54"/>
                    <scope line="55">
                        <declaration name="pj" type="PolynomialFunction" line="56"/>
                    </scope>
                </scope>
            </method>
            <method name="testFirstHermitePolynomials" type="void" line="61"/>
            <method name="testHermiteDifferentials" type="void" line="71">
                <scope line="72">
                    <declaration name="Hk0" type="PolynomialFunction" line="73"/>
                    <declaration name="Hk1" type="PolynomialFunction" line="74"/>
                    <declaration name="Hk2" type="PolynomialFunction" line="75"/>
                    <declaration name="g0" type="PolynomialFunction" line="76"/>
                    <declaration name="g1" type="PolynomialFunction" line="77"/>
                    <declaration name="g2" type="PolynomialFunction" line="78"/>
                    <declaration name="Hk0g0" type="PolynomialFunction" line="79"/>
                    <declaration name="Hk1g1" type="PolynomialFunction" line="80"/>
                    <declaration name="Hk2g2" type="PolynomialFunction" line="81"/>
                </scope>
            </method>
            <method name="testHermiteOrthogonality" type="void" line="85">
                <anonymous_class line="86">
                    <method name="value" type="double" line="87">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="weight" type="UnivariateFunction" line="86"/>
                <scope line="92">
                    <declaration name="pi" type="PolynomialFunction" line="93"/>
                    <scope line="94">
                        <declaration name="pj" type="PolynomialFunction" line="95"/>
                    </scope>
                </scope>
            </method>
            <method name="testFirstLaguerrePolynomials" type="void" line="100"/>
            <method name="testLaguerreDifferentials" type="void" line="110">
                <scope line="111">
                    <declaration name="Lk0" type="PolynomialFunction" line="112"/>
                    <declaration name="Lk1" type="PolynomialFunction" line="113"/>
                    <declaration name="Lk2" type="PolynomialFunction" line="114"/>
                    <declaration name="g0" type="PolynomialFunction" line="115"/>
                    <declaration name="g1" type="PolynomialFunction" line="116"/>
                    <declaration name="g2" type="PolynomialFunction" line="117"/>
                    <declaration name="Lk0g0" type="PolynomialFunction" line="118"/>
                    <declaration name="Lk1g1" type="PolynomialFunction" line="119"/>
                    <declaration name="Lk2g2" type="PolynomialFunction" line="120"/>
                </scope>
            </method>
            <method name="testLaguerreOrthogonality" type="void" line="124">
                <anonymous_class line="125">
                    <method name="value" type="double" line="126">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="weight" type="UnivariateFunction" line="125"/>
                <scope line="131">
                    <declaration name="pi" type="PolynomialFunction" line="132"/>
                    <scope line="133">
                        <declaration name="pj" type="PolynomialFunction" line="134"/>
                    </scope>
                </scope>
            </method>
            <method name="testFirstLegendrePolynomials" type="void" line="139"/>
            <method name="testLegendreDifferentials" type="void" line="149">
                <scope line="150">
                    <declaration name="Pk0" type="PolynomialFunction" line="151"/>
                    <declaration name="Pk1" type="PolynomialFunction" line="152"/>
                    <declaration name="Pk2" type="PolynomialFunction" line="153"/>
                    <declaration name="g0" type="PolynomialFunction" line="154"/>
                    <declaration name="g1" type="PolynomialFunction" line="155"/>
                    <declaration name="g2" type="PolynomialFunction" line="156"/>
                    <declaration name="Pk0g0" type="PolynomialFunction" line="157"/>
                    <declaration name="Pk1g1" type="PolynomialFunction" line="158"/>
                    <declaration name="Pk2g2" type="PolynomialFunction" line="159"/>
                </scope>
            </method>
            <method name="testLegendreOrthogonality" type="void" line="163">
                <anonymous_class line="164">
                    <method name="value" type="double" line="165">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="weight" type="UnivariateFunction" line="164"/>
                <scope line="170">
                    <declaration name="pi" type="PolynomialFunction" line="171"/>
                    <scope line="172">
                        <declaration name="pj" type="PolynomialFunction" line="173"/>
                    </scope>
                </scope>
            </method>
            <method name="testHighDegreeLegendre" type="void" line="178">
                <declaration name="l40" type="double[]" line="180"/>
                <declaration name="denominator" type="double" line="181"/>
                <declaration name="numerators" type="double[]" line="182"/>
                <scope line="183">
                    <scope line="184">
                        <declaration name="ci" type="double" line="185"/>
                    </scope>
                    <scope line="188"/>
                </scope>
            </method>
            <method name="testJacobiLegendre" type="void" line="193">
                <scope line="194">
                    <declaration name="legendre" type="PolynomialFunction" line="195"/>
                    <declaration name="jacobi" type="PolynomialFunction" line="196"/>
                </scope>
            </method>
            <method name="testJacobiEvaluationAt1" type="void" line="200">
                <scope line="201">
                    <scope line="202">
                        <scope line="203">
                            <declaration name="jacobi" type="PolynomialFunction" line="204"/>
                            <declaration name="binomial" type="double" line="205"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testJacobiOrthogonality" type="void" line="211">
                <scope line="212">
                    <scope line="213">
                        <declaration name="vv" type="int" line="214"/>
                        <declaration name="ww" type="int" line="215"/>
                        <anonymous_class line="216">
                            <method name="value" type="double" line="217">
                                <params>
                                    <param name="x" type="double"/>
                                </params>
                            </method>
                        </anonymous_class>
                        <declaration name="weight" type="UnivariateFunction" line="216"/>
                        <scope line="222">
                            <declaration name="pi" type="PolynomialFunction" line="223"/>
                            <scope line="224">
                                <declaration name="pj" type="PolynomialFunction" line="225"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="testShift" type="void" line="232">
                <declaration name="f1x" type="PolynomialFunction" line="233"/>
                <declaration name="f1x1" type="PolynomialFunction" line="234"/>
                <declaration name="f1xM1" type="PolynomialFunction" line="236"/>
                <declaration name="f1x3" type="PolynomialFunction" line="238"/>
                <declaration name="f2x" type="PolynomialFunction" line="240"/>
                <declaration name="f2x1" type="PolynomialFunction" line="241"/>
                <declaration name="f2x3" type="PolynomialFunction" line="243"/>
            </method>
            <method name="checkPolynomial" type="void" line="246">
                <params>
                    <param name="p" type="PolynomialFunction"/>
                    <param name="denominator" type="long"/>
                    <param name="reference" type="String"/>
                </params>
                <declaration name="q" type="PolynomialFunction" line="247"/>
            </method>
            <method name="checkPolynomial" type="void" line="250">
                <params>
                    <param name="p" type="PolynomialFunction"/>
                    <param name="reference" type="String"/>
                </params>
            </method>
            <method name="checkNullPolynomial" type="void" line="253">
                <params>
                    <param name="p" type="PolynomialFunction"/>
                </params>
                <scope line="254"/>
            </method>
            <method name="checkOrthogonality" type="void" line="258">
                <params>
                    <param name="p1" type="PolynomialFunction"/>
                    <param name="p2" type="PolynomialFunction"/>
                    <param name="weight" type="UnivariateFunction"/>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="nonZeroThreshold" type="double"/>
                    <param name="zeroThreshold" type="double"/>
                </params>
                <anonymous_class line="259">
                    <method name="value" type="double" line="260">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="259"/>
                <declaration name="dotProduct" type="double" line="265"/>
                <scope line="266"/>
                <scope line="269"/>
            </method>
        </class>
    </source>