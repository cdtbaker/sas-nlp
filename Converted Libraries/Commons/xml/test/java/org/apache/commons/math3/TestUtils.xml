<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.text.DecimalFormat"/>
        <import package="org.apache.commons.math3.complex.Complex"/>
        <import package="org.apache.commons.math3.complex.ComplexFormat"/>
        <import package="org.apache.commons.math3.distribution.RealDistribution"/>
        <import package="org.apache.commons.math3.linear.FieldMatrix"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.stat.inference.ChiSquareTest"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.junit.Assert"/>
        <class name="TestUtils" line="18">
            <javadoc line="18">
                @version $Id: TestUtils.java 1363575 2012-07-19 23:02:47Z erans $                
            </javadoc>
            <javadoc line="22">
                Collection of static methods used in math unit tests.                
            </javadoc>
            <method name="TestUtils" type="constructor" line="25"/>
            <javadoc line="28">
                Verifies that expected and actual are within delta, or are both NaN or
                  infinities of the same sign.                
            </javadoc>
            <method name="assertEquals" type="void" line="32">
                <params>
                    <param name="expected" type="double"/>
                    <param name="actual" type="double"/>
                    <param name="delta" type="double"/>
                </params>
            </method>
            <javadoc line="35">
                Verifies that expected and actual are within delta, or are both NaN or
                  infinities of the same sign.                
            </javadoc>
            <method name="assertEquals" type="void" line="39">
                <params>
                    <param name="msg" type="String"/>
                    <param name="expected" type="double"/>
                    <param name="actual" type="double"/>
                    <param name="delta" type="double"/>
                </params>
                <scope line="40"/>
                <scope line="43"/>
            </method>
            <javadoc line="47">
                Verifies that the two arguments are exactly the same, either
                  both NaN or infinities of same sign, or identical floating point values.                
            </javadoc>
            <method name="assertSame" type="void" line="51">
                <params>
                    <param name="expected" type="double"/>
                    <param name="actual" type="double"/>
                </params>
            </method>
            <javadoc line="54">
                Verifies that real and imaginary parts of the two complex arguments
                  are exactly the same.  Also ensures that NaN / infinite components match.                
            </javadoc>
            <method name="assertSame" type="void" line="58">
                <params>
                    <param name="expected" type="Complex"/>
                    <param name="actual" type="Complex"/>
                </params>
            </method>
            <javadoc line="62">
                Verifies that real and imaginary parts of the two complex arguments
                  differ by at most delta.  Also ensures that NaN / infinite components match.                
            </javadoc>
            <method name="assertEquals" type="void" line="66">
                <params>
                    <param name="expected" type="Complex"/>
                    <param name="actual" type="Complex"/>
                    <param name="delta" type="double"/>
                </params>
            </method>
            <javadoc line="70">
                Verifies that two double arrays have equal entries, up to tolerance                
            </javadoc>
            <method name="assertEquals" type="void" line="73">
                <params>
                    <param name="expected" type="double"/>
                    <param name="observed" type="double"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="76">
                Serializes an object to a bytes array and then recovers the object from the bytes array.
                  Returns the deserialized object.                
                <param>
                    o  object to serialize and recover                    
                </param>
                <return>
                    the recovered, deserialized object                    
                </return>
            </javadoc>
            <method name="serializeAndRecover" type="Object" line="82">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="83">
                    <declaration name="bos" type="ByteArrayOutputStream" line="84"/>
                    <declaration name="so" type="ObjectOutputStream" line="85"/>
                    <declaration name="bis" type="ByteArrayInputStream" line="87"/>
                    <declaration name="si" type="ObjectInputStream" line="88"/>
                </scope>
                <scope line="91"/>
                <scope line="94"/>
            </method>
            <javadoc line="98">
                Verifies that serialization preserves equals and hashCode.
                  Serializes the object, then recovers it and checks equals and hash code.                
                <param>
                    object  the object to serialize and recover                    
                </param>
            </javadoc>
            <method name="checkSerializedEquality" type="void" line="103">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <declaration name="object2" type="Object" line="104"/>
            </method>
            <javadoc line="108">
                Verifies that the relative error in actual vs. expected is less than or
                  equal to relativeError.  If expected is infinite or NaN, actual must be
                  the same (NaN or infinity of the same sign).                
                <param>
                    expected expected value                    
                </param>
                <param>
                    actual  observed value                    
                </param>
                <param>
                    relativeError  maximum allowable relative error                    
                </param>
            </javadoc>
            <method name="assertRelativelyEquals" type="void" line="116">
                <params>
                    <param name="expected" type="double"/>
                    <param name="actual" type="double"/>
                    <param name="relativeError" type="double"/>
                </params>
            </method>
            <javadoc line="119">
                Verifies that the relative error in actual vs. expected is less than or
                  equal to relativeError.  If expected is infinite or NaN, actual must be
                  the same (NaN or infinity of the same sign).                
                <param>
                    msg  message to return with failure                    
                </param>
                <param>
                    expected expected value                    
                </param>
                <param>
                    actual  observed value                    
                </param>
                <param>
                    relativeError  maximum allowable relative error                    
                </param>
            </javadoc>
            <method name="assertRelativelyEquals" type="void" line="128">
                <params>
                    <param name="msg" type="String"/>
                    <param name="expected" type="double"/>
                    <param name="actual" type="double"/>
                    <param name="relativeError" type="double"/>
                </params>
                <scope line="129"/>
                <scope line="132"/>
                <scope line="135"/>
                <scope line="138"/>
                <scope line="141">
                    <declaration name="absError" type="double" line="142"/>
                </scope>
            </method>
            <javadoc line="146">
                Fails iff values does not contain a number within epsilon of z.                
                <param>
                    msg  message to return with failure                    
                </param>
                <param>
                    values complex array to search                    
                </param>
                <param>
                    z  value sought                    
                </param>
                <param>
                    epsilon  tolerance                    
                </param>
            </javadoc>
            <method name="assertContains" type="void" line="153">
                <params>
                    <param name="msg" type="String"/>
                    <param name="values" type="Complex[]"/>
                    <param name="z" type="Complex"/>
                    <param name="epsilon" type="double"/>
                </params>
                <scope line="154">
                    <scope line="155"/>
                </scope>
            </method>
            <javadoc line="161">
                Fails iff values does not contain a number within epsilon of z.                
                <param>
                    values complex array to search                    
                </param>
                <param>
                    z  value sought                    
                </param>
                <param>
                    epsilon  tolerance                    
                </param>
            </javadoc>
            <method name="assertContains" type="void" line="167">
                <params>
                    <param name="values" type="Complex[]"/>
                    <param name="z" type="Complex"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="170">
                Fails iff values does not contain a number within epsilon of x.                
                <param>
                    msg  message to return with failure                    
                </param>
                <param>
                    values double array to search                    
                </param>
                <param>
                    x value sought                    
                </param>
                <param>
                    epsilon  tolerance                    
                </param>
            </javadoc>
            <method name="assertContains" type="void" line="177">
                <params>
                    <param name="msg" type="String"/>
                    <param name="values" type="double[]"/>
                    <param name="x" type="double"/>
                    <param name="epsilon" type="double"/>
                </params>
                <scope line="178">
                    <scope line="179"/>
                </scope>
            </method>
            <javadoc line="185">
                Fails iff values does not contain a number within epsilon of x.                
                <param>
                    values double array to search                    
                </param>
                <param>
                    x value sought                    
                </param>
                <param>
                    epsilon  tolerance                    
                </param>
            </javadoc>
            <method name="assertContains" type="void" line="191">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="x" type="double"/>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="194">
                Asserts that all entries of the specified vectors are equal to within a
                  positive {@code delta}.                
                <param>
                    message the identifying message for the assertion error (can be{@code null})                    
                </param>
                <param>
                    expected expected value                    
                </param>
                <param>
                    actual actual value                    
                </param>
                <param>
                    delta the maximum difference between the entries of the expected
                      and actual vectors for which both entries are still considered equal                    
                </param>
            </javadoc>
            <method name="assertEquals" type="void" line="203">
                <params>
                    <param name="message" type="String"/>
                    <param name="expected" type="double[]"/>
                    <param name="actual" type="RealVector"/>
                    <param name="delta" type="double"/>
                </params>
                <declaration name="msgAndSep" type="String" line="204"/>
                <scope line="206"/>
            </method>
            <javadoc line="210">
                Asserts that all entries of the specified vectors are equal to within a
                  positive {@code delta}.                
                <param>
                    message the identifying message for the assertion error (can be{@code null})                    
                </param>
                <param>
                    expected expected value                    
                </param>
                <param>
                    actual actual value                    
                </param>
                <param>
                    delta the maximum difference between the entries of the expected
                      and actual vectors for which both entries are still considered equal                    
                </param>
            </javadoc>
            <method name="assertEquals" type="void" line="219">
                <params>
                    <param name="message" type="String"/>
                    <param name="expected" type="RealVector"/>
                    <param name="actual" type="RealVector"/>
                    <param name="delta" type="double"/>
                </params>
                <declaration name="msgAndSep" type="String" line="220"/>
                <declaration name="dim" type="int" line="222"/>
                <scope line="223"/>
            </method>
            <javadoc line="227">
                verifies that two matrices are close (1-norm)                
            </javadoc>
            <method name="assertEquals" type="void" line="230">
                <params>
                    <param name="msg" type="String"/>
                    <param name="expected" type="RealMatrix"/>
                    <param name="observed" type="RealMatrix"/>
                    <param name="tolerance" type="double"/>
                </params>
                <scope line="232">
                    <declaration name="messageBuffer" type="StringBuilder" line="233"/>
                </scope>
                <declaration name="delta" type="RealMatrix" line="239"/>
                <scope line="240">
                    <declaration name="messageBuffer" type="StringBuilder" line="241"/>
                </scope>
            </method>
            <javadoc line="248">
                verifies that two matrices are equal                
            </javadoc>
            <method name="assertEquals" type="void" line="251">
                <params>
                    <param name="expected" type="FieldMatrix<? extends FieldElement<?>>"/>
                    <param name="observed" type="FieldMatrix<? extends FieldElement<?>>"/>
                </params>
                <scope line="253">
                    <declaration name="messageBuffer" type="StringBuilder" line="254"/>
                </scope>
                <scope line="260">
                    <scope line="261">
                        <declaration name="eij" type="FieldElement&lt;?&gt;" line="262"/>
                        <declaration name="oij" type="FieldElement&lt;?&gt;" line="263"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="268">
                verifies that two arrays are close (sup norm)                
            </javadoc>
            <method name="assertEquals" type="void" line="271">
                <params>
                    <param name="msg" type="String"/>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="double[]"/>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="out" type="StringBuilder" line="272"/>
                <scope line="273"/>
                <declaration name="failure" type="boolean" line="281"/>
                <scope line="282">
                    <scope line="283"/>
                </scope>
                <scope line="294"/>
            </method>
            <javadoc line="298">
                verifies that two arrays are equal                
            </javadoc>
            <method name="assertEquals" type="void" line="301">
                <params>
                    <param name="m" type="T[]"/>
                    <param name="n" type="T[]"/>
                </params>
                <scope line="302"/>
                <scope line="305"/>
            </method>
            <javadoc line="309">
                Computes the sum of squared deviations of &lt;values&gt; from &lt;target&gt;                
                <param>
                    values array of deviates                    
                </param>
                <param>
                    target value to compute deviations from                    
                </param>
                <return>
                    sum of squared deviations                    
                </return>
            </javadoc>
            <method name="sumSquareDev" type="double" line="315">
                <params>
                    <param name="values" type="double[]"/>
                    <param name="target" type="double"/>
                </params>
                <declaration name="sumsq" type="double" line="316"/>
                <scope line="317">
                    <declaration name="dev" type="double" line="318"/>
                </scope>
            </method>
            <javadoc line="323">
                Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
                  statistics if the null hypothesis can be rejected with confidence 100  (1 - alpha)%                
                <param>
                    valueLabels labels for the values of the discrete distribution under test                    
                </param>
                <param>
                    expected expected counts                    
                </param>
                <param>
                    observed observed counts                    
                </param>
                <param>
                    alpha significance level of the test                    
                </param>
            </javadoc>
            <method name="assertChiSquareAccept" type="void" line="331">
                <params>
                    <param name="valueLabels" type="String[]"/>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="long[]"/>
                    <param name="alpha" type="double"/>
                </params>
                <declaration name="chiSquareTest" type="ChiSquareTest" line="332"/>
                <scope line="333">
                    <declaration name="msgBuffer" type="StringBuilder" line="334"/>
                    <declaration name="df" type="DecimalFormat" line="335"/>
                    <scope line="343"/>
                </scope>
            </method>
            <javadoc line="357">
                Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
                  statistics if the null hypothesis can be rejected with confidence 100  (1 - alpha)%                
                <param>
                    values integer values whose observed and expected counts are being compared                    
                </param>
                <param>
                    expected expected counts                    
                </param>
                <param>
                    observed observed counts                    
                </param>
                <param>
                    alpha significance level of the test                    
                </param>
            </javadoc>
            <method name="assertChiSquareAccept" type="void" line="365">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="long[]"/>
                    <param name="alpha" type="double"/>
                </params>
                <declaration name="labels" type="String[]" line="366"/>
                <scope line="367"/>
            </method>
            <javadoc line="372">
                Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
                  statistics if the null hypothesis can be rejected with confidence 100  (1 - alpha)%                
                <param>
                    expected expected counts                    
                </param>
                <param>
                    observed observed counts                    
                </param>
                <param>
                    alpha significance level of the test                    
                </param>
            </javadoc>
            <method name="assertChiSquareAccept" type="void" line="379">
                <params>
                    <param name="expected" type="double[]"/>
                    <param name="observed" type="long[]"/>
                    <param name="alpha" type="double"/>
                </params>
                <declaration name="labels" type="String[]" line="380"/>
                <scope line="381"/>
            </method>
            <javadoc line="386">
                Computes the 25th, 50th and 75th percentiles of the given distribution and returns
                  these values in an array.                
            </javadoc>
            <method name="getDistributionQuartiles" type="double[]" line="390">
                <params>
                    <param name="distribution" type="RealDistribution"/>
                </params>
                <declaration name="quantiles" type="double[]" line="391"/>
            </method>
            <javadoc line="397">
                Updates observed counts of values in quartiles.
                  counts[0] &lt;-&gt; 1st quartile ... counts[3] &lt;-&gt; top quartile                
            </javadoc>
            <method name="updateCounts" type="void" line="401">
                <params>
                    <param name="value" type="double"/>
                    <param name="counts" type="long[]"/>
                    <param name="quartiles" type="double[]"/>
                </params>
                <scope line="402"/>
                <scope line="405"/>
                <scope line="408"/>
                <scope line="411"/>
            </method>
            <javadoc line="415">
                Eliminates points with zero mass from densityPoints and densityValues parallel
                  arrays.  Returns the number of positive mass points and collapses the arrays so
                  that the first &lt;returned value&gt; elements of the input arrays represent the positive
                  mass points.                
            </javadoc>
            <method name="eliminateZeroMassPoints" type="int" line="421">
                <params>
                    <param name="densityPoints" type="int[]"/>
                    <param name="densityValues" type="double[]"/>
                </params>
                <declaration name="positiveMassCount" type="int" line="422"/>
                <scope line="423">
                    <scope line="424"/>
                </scope>
                <scope line="428">
                    <declaration name="newPoints" type="int[]" line="429"/>
                    <declaration name="newValues" type="double[]" line="430"/>
                    <declaration name="j" type="int" line="431"/>
                    <scope line="432">
                        <scope line="433"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>