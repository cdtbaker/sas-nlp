<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.math.BigInteger"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.random.RandomDataGenerator"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="ArithmeticUtilsTest" line="29">
            <javadoc line="29">
                Test cases for the {@link ArithmeticUtils} class.                
                <version>
                    $Id: ArithmeticUtilsTest.java 1540513 2013-11-10 18:54:32Z psteitz $                    
                </version>
            </javadoc>
            <method name="testAddAndCheck" type="void" line="37">
                <declaration name="big" type="int" line="38"/>
                <declaration name="bigNeg" type="int" line="39"/>
                <scope line="41"/>
                <scope line="44"/>
                <scope line="46"/>
                <scope line="49"/>
            </method>
            <method name="testAddAndCheckLong" type="void" line="54">
                <declaration name="max" type="long" line="55"/>
                <declaration name="min" type="long" line="56"/>
            </method>
            <method name="testGcd" type="void" line="75">
                <comment line="104">
                    gcd(Integer.MIN_VALUE, 0) &gt; Integer.MAX_VALUE                    
                </comment>
                <comment line="108">
                    expected                    
                </comment>
                <comment line="111">
                    gcd(0, Integer.MIN_VALUE) &gt; Integer.MAX_VALUE                    
                </comment>
                <comment line="115">
                    expected                    
                </comment>
                <comment line="118">
                    gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) &gt; Integer.MAX_VALUE                    
                </comment>
                <comment line="122">
                    expected                    
                </comment>
                <declaration name="a" type="int" line="76"/>
                <declaration name="b" type="int" line="77"/>
                <declaration name="c" type="int" line="78"/>
                <scope line="102"/>
                <scope line="106"/>
                <scope line="109"/>
                <scope line="113"/>
                <scope line="116"/>
                <scope line="120"/>
            </method>
            <method name="testGcdConsistency" type="void" line="126">
                <declaration name="primeList" type="int[]" line="127"/>
                <declaration name="primes" type="ArrayList&amp;lt;Integer&amp;gt;" line="128"/>
                <scope line="129"/>
                <declaration name="randomData" type="RandomDataGenerator" line="132"/>
                <scope line="133">
                    <declaration name="sample" type="Object[]" line="134"/>
                    <declaration name="p1" type="int" line="135"/>
                    <declaration name="p2" type="int" line="136"/>
                    <declaration name="p3" type="int" line="137"/>
                    <declaration name="p4" type="int" line="138"/>
                    <declaration name="i1" type="int" line="139"/>
                    <declaration name="i2" type="int" line="140"/>
                    <declaration name="gcd" type="int" line="141"/>
                    <declaration name="l1" type="long" line="143"/>
                    <declaration name="l2" type="long" line="144"/>
                </scope>
            </method>
            <method name="testGcdLong" type="void" line="150">
                <comment line="181">
                    gcd(Long.MIN_VALUE, 0) &gt; Long.MAX_VALUE                    
                </comment>
                <comment line="185">
                    expected                    
                </comment>
                <comment line="188">
                    gcd(0, Long.MIN_VALUE) &gt; Long.MAX_VALUE                    
                </comment>
                <comment line="192">
                    expected                    
                </comment>
                <comment line="195">
                    gcd(Long.MIN_VALUE, Long.MIN_VALUE) &gt; Long.MAX_VALUE                    
                </comment>
                <comment line="199">
                    expected                    
                </comment>
                <declaration name="a" type="long" line="151"/>
                <declaration name="b" type="long" line="152"/>
                <declaration name="c" type="long" line="153"/>
                <scope line="179"/>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="190"/>
                <scope line="193"/>
                <scope line="197"/>
            </method>
            <method name="testLcm" type="void" line="204">
                <comment line="220">
                    Assert that no intermediate value overflows:
                     The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)                    
                </comment>
                <comment line="224">
                    Special case                    
                </comment>
                <comment line="228">
                    lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int                    
                </comment>
                <comment line="232">
                    expected                    
                </comment>
                <comment line="236">
                    lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int                    
                </comment>
                <comment line="240">
                    expected                    
                </comment>
                <comment line="247">
                    expected                    
                </comment>
                <declaration name="a" type="int" line="205"/>
                <declaration name="b" type="int" line="206"/>
                <declaration name="c" type="int" line="207"/>
                <scope line="226"/>
                <scope line="230"/>
                <scope line="234"/>
                <scope line="238"/>
                <scope line="242"/>
                <scope line="245"/>
            </method>
            <method name="testLcmLong" type="void" line="251">
                <comment line="269">
                    Assert that no intermediate value overflows:
                     The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)                    
                </comment>
                <comment line="273">
                    Special case                    
                </comment>
                <comment line="277">
                    lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int                    
                </comment>
                <comment line="281">
                    expected                    
                </comment>
                <comment line="285">
                    lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int                    
                </comment>
                <comment line="289">
                    expected                    
                </comment>
                <comment line="298">
                    expected                    
                </comment>
                <declaration name="a" type="long" line="252"/>
                <declaration name="b" type="long" line="253"/>
                <declaration name="c" type="long" line="254"/>
                <scope line="275"/>
                <scope line="279"/>
                <scope line="283"/>
                <scope line="287"/>
                <scope line="293"/>
                <scope line="296"/>
            </method>
            <method name="testMulAndCheck" type="void" line="302">
                <declaration name="big" type="int" line="303"/>
                <declaration name="bigNeg" type="int" line="304"/>
                <scope line="306"/>
                <scope line="309"/>
                <scope line="311"/>
                <scope line="314"/>
            </method>
            <method name="testMulAndCheckLong" type="void" line="319">
                <declaration name="max" type="long" line="320"/>
                <declaration name="min" type="long" line="321"/>
            </method>
            <method name="testSubAndCheck" type="void" line="341">
                <declaration name="big" type="int" line="342"/>
                <declaration name="bigNeg" type="int" line="343"/>
                <scope line="347"/>
                <scope line="350"/>
                <scope line="352"/>
                <scope line="355"/>
            </method>
            <method name="testSubAndCheckErrorMessage" type="void" line="360">
                <declaration name="big" type="int" line="361"/>
                <scope line="362"/>
                <scope line="365"/>
            </method>
            <method name="testSubAndCheckLong" type="void" line="371">
                <comment line="379">
                    min == -1-max                    
                </comment>
                <declaration name="max" type="long" line="372"/>
                <declaration name="min" type="long" line="373"/>
            </method>
            <method name="testPow" type="void" line="387">
                <comment line="396">
                    expected behavior                    
                </comment>
                <comment line="405">
                    expected behavior                    
                </comment>
                <comment line="414">
                    expected behavior                    
                </comment>
                <comment line="423">
                    expected behavior                    
                </comment>
                <comment line="433">
                    expected behavior                    
                </comment>
                <comment line="442">
                    expected behavior                    
                </comment>
                <comment line="451">
                    expected behavior                    
                </comment>
                <scope line="391"/>
                <scope line="394"/>
                <scope line="400"/>
                <scope line="403"/>
                <scope line="409"/>
                <scope line="412"/>
                <scope line="418"/>
                <scope line="421"/>
                <declaration name="twentyOne" type="BigInteger" line="425"/>
                <scope line="428"/>
                <scope line="431"/>
                <scope line="437"/>
                <scope line="440"/>
                <scope line="446"/>
                <scope line="449"/>
                <declaration name="bigOne" type="BigInteger" line="453"/>
            </method>
            <method name="testPowIntOverflow" type="void" line="464"/>
            <method name="testPowInt" type="void" line="469">
                <declaration name="base" type="int" line="470"/>
            </method>
            <method name="testPowNegativeIntOverflow" type="void" line="479"/>
            <method name="testPowNegativeInt" type="void" line="484">
                <declaration name="base" type="int" line="485"/>
            </method>
            <method name="testPowMinusOneInt" type="void" line="494">
                <declaration name="base" type="int" line="495"/>
                <scope line="496">
                    <declaration name="pow" type="int" line="497"/>
                </scope>
            </method>
            <method name="testPowOneInt" type="void" line="503">
                <declaration name="base" type="int" line="504"/>
                <scope line="505">
                    <declaration name="pow" type="int" line="506"/>
                </scope>
            </method>
            <method name="testPowLongOverflow" type="void" line="512"/>
            <method name="testPowLong" type="void" line="517">
                <declaration name="base" type="long" line="518"/>
            </method>
            <method name="testPowNegativeLongOverflow" type="void" line="527"/>
            <method name="testPowNegativeLong" type="void" line="532">
                <declaration name="base" type="long" line="533"/>
            </method>
            <method name="testPowMinusOneLong" type="void" line="542">
                <declaration name="base" type="long" line="543"/>
                <scope line="544">
                    <declaration name="pow" type="long" line="545"/>
                </scope>
            </method>
            <method name="testPowOneLong" type="void" line="551">
                <declaration name="base" type="long" line="552"/>
                <scope line="553">
                    <declaration name="pow" type="long" line="554"/>
                </scope>
            </method>
            <method name="testIsPowerOfTwo" type="void" line="560">
                <declaration name="n" type="int" line="561"/>
                <declaration name="expected" type="boolean[]" line="562"/>
                <scope line="564"/>
                <scope line="567">
                    <declaration name="actual" type="boolean" line="568"/>
                </scope>
            </method>
            <method name="testAddAndCheckLongFailure" type="void" line="573">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <comment line="579">
                    success                    
                </comment>
                <scope line="574"/>
                <scope line="577"/>
            </method>
            <method name="testMulAndCheckLongFailure" type="void" line="582">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <comment line="588">
                    success                    
                </comment>
                <scope line="583"/>
                <scope line="586"/>
            </method>
            <method name="testSubAndCheckLongFailure" type="void" line="591">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
                <comment line="597">
                    success                    
                </comment>
                <scope line="592"/>
                <scope line="595"/>
            </method>
        </class>
    </source>