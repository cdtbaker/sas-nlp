<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.univariate">
        <import package="org.apache.commons.math3.analysis.QuinticFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Sin"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.random.JDKRandomGenerator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="MultiStartUnivariateOptimizerTest" line="12">
            <method name="testMissingMaxEval" type="void" line="13">
                <declaration name="underlying" type="UnivariateOptimizer" line="14"/>
                <declaration name="g" type="JDKRandomGenerator" line="15"/>
                <declaration name="optimizer" type="MultiStartUnivariateOptimizer" line="17"/>
            </method>
            <method name="testMissingSearchInterval" type="void" line="20">
                <declaration name="underlying" type="UnivariateOptimizer" line="21"/>
                <declaration name="g" type="JDKRandomGenerator" line="22"/>
                <declaration name="optimizer" type="MultiStartUnivariateOptimizer" line="24"/>
            </method>
            <method name="testSinMin" type="void" line="27">
                <declaration name="f" type="UnivariateFunction" line="28"/>
                <declaration name="underlying" type="UnivariateOptimizer" line="29"/>
                <declaration name="g" type="JDKRandomGenerator" line="30"/>
                <declaration name="optimizer" type="MultiStartUnivariateOptimizer" line="32"/>
                <declaration name="optima" type="UnivariatePointValuePair[]" line="34"/>
                <scope line="35">
                    <declaration name="d" type="double" line="36"/>
                </scope>
            </method>
            <method name="testQuinticMin" type="void" line="44">
                <declaration name="f" type="UnivariateFunction" line="45"/>
                <declaration name="underlying" type="UnivariateOptimizer" line="46"/>
                <declaration name="g" type="JDKRandomGenerator" line="47"/>
                <declaration name="optimizer" type="MultiStartUnivariateOptimizer" line="49"/>
                <declaration name="optimum" type="UnivariatePointValuePair" line="50"/>
                <declaration name="optima" type="UnivariatePointValuePair[]" line="53"/>
                <scope line="54"/>
            </method>
            <method name="testBadFunction" type="void" line="60">
                <anonymous_class line="61">
                    <method name="value" type="double" line="62">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <scope line="63"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="UnivariateFunction" line="61"/>
                <declaration name="underlying" type="UnivariateOptimizer" line="70"/>
                <declaration name="g" type="JDKRandomGenerator" line="71"/>
                <declaration name="optimizer" type="MultiStartUnivariateOptimizer" line="73"/>
                <scope line="74"/>
                <scope line="78"/>
            </method>
            <class name="LocalException" line="82">
                <extends class="RuntimeException"/>
                <declaration name="serialVersionUID" type="long" line="83"/>
            </class>
        </class>
    </source>