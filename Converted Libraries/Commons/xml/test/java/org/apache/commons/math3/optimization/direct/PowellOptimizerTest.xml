<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.SumSincFunction"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.MultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="PowellOptimizerTest" line="10">
            <javadoc line="10">
                Test for {@link PowellOptimizer}.                
            </javadoc>
            <method name="testSumSinc" type="void" line="14">
                <declaration name="func" type="MultivariateFunction" line="15"/>
                <declaration name="dim" type="int" line="16"/>
                <declaration name="minPoint" type="double[]" line="17"/>
                <scope line="18"/>
                <declaration name="init" type="double[]" line="21"/>
                <scope line="22"/>
                <scope line="26"/>
            </method>
            <method name="testQuadratic" type="void" line="32">
                <anonymous_class line="33">
                    <method name="value" type="double" line="34">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                        <declaration name="a" type="double" line="35"/>
                        <declaration name="b" type="double" line="36"/>
                    </method>
                </anonymous_class>
                <declaration name="func" type="MultivariateFunction" line="33"/>
                <declaration name="dim" type="int" line="41"/>
                <declaration name="minPoint" type="double[]" line="42"/>
                <scope line="43"/>
                <declaration name="init" type="double[]" line="46"/>
                <scope line="47"/>
                <scope line="51"/>
            </method>
            <method name="testMaximizeQuadratic" type="void" line="56">
                <anonymous_class line="57">
                    <method name="value" type="double" line="58">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                        <declaration name="a" type="double" line="59"/>
                        <declaration name="b" type="double" line="60"/>
                    </method>
                </anonymous_class>
                <declaration name="func" type="MultivariateFunction" line="57"/>
                <declaration name="dim" type="int" line="65"/>
                <declaration name="maxPoint" type="double[]" line="66"/>
                <scope line="67"/>
                <declaration name="init" type="double[]" line="70"/>
                <scope line="71"/>
                <scope line="75"/>
            </method>
            <javadoc line="80">
                Ensure that we do not increase the number of function evaluations when
                  the function values are scaled up.
                  Note that the tolerances parameters passed to the constructor must
                  still hold sensible values because they are used to set the line search
                  tolerances.                
            </javadoc>
            <method name="testRelativeToleranceOnScaledValues" type="void" line="87">
                <anonymous_class line="88">
                    <method name="value" type="double" line="89">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                        <declaration name="a" type="double" line="90"/>
                        <declaration name="b" type="double" line="91"/>
                    </method>
                </anonymous_class>
                <declaration name="func" type="MultivariateFunction" line="88"/>
                <declaration name="dim" type="int" line="96"/>
                <declaration name="minPoint" type="double[]" line="97"/>
                <scope line="98"/>
                <declaration name="init" type="double[]" line="101"/>
                <scope line="102"/>
                <declaration name="relTol" type="double" line="105"/>
                <declaration name="maxEval" type="int" line="106"/>
                <declaration name="optim" type="MultivariateOptimizer" line="107"/>
                <declaration name="funcResult" type="PointValuePair" line="108"/>
                <declaration name="funcValue" type="double" line="109"/>
                <declaration name="funcEvaluations" type="int" line="110"/>
                <declaration name="scale" type="double" line="111"/>
                <anonymous_class line="112">
                    <method name="value" type="double" line="113">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="funcScaled" type="MultivariateFunction" line="112"/>
                <declaration name="funcScaledResult" type="PointValuePair" line="118"/>
                <declaration name="funcScaledValue" type="double" line="119"/>
                <declaration name="funcScaledEvaluations" type="int" line="120"/>
            </method>
            <javadoc line="124">
                @param func Function to optimize.                
                <param>
                    optimum Expected optimum.                    
                </param>
                <param>
                    init Starting point.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    fTol Tolerance (relative error on the objective function) for
                      "Powell" algorithm.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="133">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="optimum" type="double[]"/>
                    <param name="init" type="double[]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                </params>
                <declaration name="optim" type="MultivariateOptimizer" line="134"/>
                <declaration name="result" type="PointValuePair" line="135"/>
                <declaration name="point" type="double[]" line="136"/>
                <scope line="137"/>
            </method>
            <javadoc line="141">
                @param func Function to optimize.                
                <param>
                    optimum Expected optimum.                    
                </param>
                <param>
                    init Starting point.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    fTol Tolerance (relative error on the objective function) for
                      "Powell" algorithm.                    
                </param>
                <param>
                    fLineTol Tolerance (relative error on the objective function)
                      for the internal line search algorithm.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="152">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="optimum" type="double[]"/>
                    <param name="init" type="double[]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="fTol" type="double"/>
                    <param name="fLineTol" type="double"/>
                    <param name="pointTol" type="double"/>
                </params>
                <declaration name="optim" type="MultivariateOptimizer" line="153"/>
                <declaration name="result" type="PointValuePair" line="154"/>
                <declaration name="point" type="double[]" line="155"/>
                <scope line="156"/>
            </method>
        </class>
    </source>