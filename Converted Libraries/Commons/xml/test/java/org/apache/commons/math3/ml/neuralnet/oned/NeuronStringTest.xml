<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet.oned">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Collection"/>
        <import package="org.junit.Test"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Ignore"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.ml.neuralnet.FeatureInitializer"/>
        <import package="org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory"/>
        <import package="org.apache.commons.math3.ml.neuralnet.Network"/>
        <import package="org.apache.commons.math3.ml.neuralnet.Neuron"/>
        <import package="org.apache.commons.math3.random.Well44497b"/>
        <class name="NeuronStringTest" line="38">
            <comment line="46">
                Test assumes that the network is
                
                  0-----1-----2-----3                
            </comment>
            <comment line="91">
                Test assumes that the network is
                
                  0-----1-----2-----3                
            </comment>
            <comment line="136">
                Test assumes that the network is
                
                  0-----1-----2-----3-----4                
            </comment>
            <javadoc line="38">
                Tests for {@link NeuronString} and {@link Network} functionality for
                  a one-dimensional network.                
            </javadoc>
            <declaration name="init" type="FeatureInitializer" line="43"/>
            <method name="testSegmentNetwork" type="void" line="51">
                <comment line="58">
                    Neuron 0.                    
                </comment>
                <comment line="63">
                    Ensures that no other neurons is in the neihbourhood set.                    
                </comment>
                <comment line="66">
                    Neuron 1.                    
                </comment>
                <comment line="71">
                    Ensures that no other neurons is in the neihbourhood set.                    
                </comment>
                <comment line="74">
                    Neuron 2.                    
                </comment>
                <comment line="79">
                    Ensures that no other neurons is in the neihbourhood set.                    
                </comment>
                <comment line="82">
                    Neuron 3.                    
                </comment>
                <comment line="87">
                    Ensures that no other neurons is in the neihbourhood set.                    
                </comment>
                <declaration name="initArray" type="FeatureInitializer[]" line="52"/>
                <declaration name="net" type="Network" line="53"/>
                <declaration name="neighbours" type="Collection&amp;lt;Neuron&amp;gt;" line="55"/>
                <scope line="59"/>
                <scope line="67"/>
                <scope line="75"/>
                <scope line="83"/>
            </method>
            <method name="testCircleNetwork" type="void" line="96">
                <comment line="103">
                    Neuron 0.                    
                </comment>
                <comment line="108">
                    Ensures that no other neurons is in the neihbourhood set.                    
                </comment>
                <comment line="111">
                    Neuron 1.                    
                </comment>
                <comment line="116">
                    Ensures that no other neurons is in the neihbourhood set.                    
                </comment>
                <comment line="119">
                    Neuron 2.                    
                </comment>
                <comment line="124">
                    Ensures that no other neurons is in the neihbourhood set.                    
                </comment>
                <comment line="127">
                    Neuron 3.                    
                </comment>
                <comment line="132">
                    Ensures that no other neurons is in the neihbourhood set.                    
                </comment>
                <declaration name="initArray" type="FeatureInitializer[]" line="97"/>
                <declaration name="net" type="Network" line="98"/>
                <declaration name="neighbours" type="Collection&amp;lt;Neuron&amp;gt;" line="100"/>
                <scope line="104"/>
                <scope line="112"/>
                <scope line="120"/>
                <scope line="128"/>
            </method>
            <method name="testGetNeighboursWithExclude" type="void" line="141">
                <declaration name="initArray" type="FeatureInitializer[]" line="142"/>
                <declaration name="net" type="Network" line="143"/>
                <declaration name="exclude" type="Collection&amp;lt;Neuron&amp;gt;" line="144"/>
                <declaration name="neighbours" type="Collection&amp;lt;Neuron&amp;gt;" line="146"/>
            </method>
            <method name="testSerialize" type="void" line="155">
                <comment line="171">
                    Same values.                    
                </comment>
                <comment line="179">
                    Same neighbours.                    
                </comment>
                <declaration name="initArray" type="FeatureInitializer[]" line="156"/>
                <declaration name="out" type="NeuronString" line="157"/>
                <declaration name="bos" type="ByteArrayOutputStream" line="159"/>
                <declaration name="oos" type="ObjectOutputStream" line="160"/>
                <declaration name="bis" type="ByteArrayInputStream" line="163"/>
                <declaration name="ois" type="ObjectInputStream" line="164"/>
                <declaration name="in" type="NeuronString" line="165"/>
                <scope line="167">
                    <declaration name="nIn" type="Neuron" line="168"/>
                    <declaration name="outF" type="double[]" line="171"/>
                    <declaration name="inF" type="double[]" line="172"/>
                    <scope line="174"/>
                    <declaration name="outNeighbours" type="Collection&amp;lt;Neuron&amp;gt;" line="179"/>
                    <declaration name="inNeighbours" type="Collection&amp;lt;Neuron&amp;gt;" line="180"/>
                    <scope line="182"/>
                </scope>
            </method>
        </class>
    </source>