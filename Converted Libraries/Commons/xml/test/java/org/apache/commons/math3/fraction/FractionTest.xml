<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="FractionTest" line="28">
            <comment line="76">
                MATH-179                
            </comment>
            <comment line="122">
                MATH-181                
            </comment>
            <javadoc line="28">
                @version $Id: FractionTest.java 1368253 2012-08-01 21:24:27Z tn $                
            </javadoc>
            <method name="assertFraction" type="void" line="33">
                <params>
                    <param name="expectedNumerator" type="int"/>
                    <param name="expectedDenominator" type="int"/>
                    <param name="actual" type="Fraction"/>
                </params>
            </method>
            <method name="testConstructor" type="void" line="39">
                <comment line="50">
                    overflow                    
                </comment>
                <comment line="55">
                    success                    
                </comment>
                <comment line="61">
                    success                    
                </comment>
                <scope line="51"/>
                <scope line="54"/>
                <scope line="57"/>
                <scope line="60"/>
            </method>
            <method name="testGoldenRatio" type="void" line="70">
                <comment line="71">
                    the golden ratio is notoriously a difficult number for continuous fraction                    
                </comment>
            </method>
            <method name="testDoubleConstructor" type="void" line="77"/>
            <method name="testDigitLimitConstructor" type="void" line="123"/>
            <method name="testIntegerOverflow" type="void" line="135"/>
            <method name="checkIntegerOverflow" type="void" line="142">
                <params>
                    <param name="a" type="double"/>
                </params>
                <comment line="147">
                    expected behavior                    
                </comment>
                <scope line="143"/>
                <scope line="146"/>
            </method>
            <method name="testEpsilonLimitConstructor" type="void" line="152"/>
            <method name="testCompareTo" type="void" line="164">
                <comment line="174">
                    these two values are different approximations of PI                    
                </comment>
                <comment line="175">
                    the first  one is approximately PI - 3.07e-18                    
                </comment>
                <comment line="176">
                    the second one is approximately PI + 1.936e-17                    
                </comment>
                <declaration name="first" type="Fraction" line="165"/>
                <declaration name="second" type="Fraction" line="166"/>
                <declaration name="third" type="Fraction" line="167"/>
                <declaration name="pi1" type="Fraction" line="177"/>
                <declaration name="pi2" type="Fraction" line="178"/>
            </method>
            <method name="testDoubleValue" type="void" line="185">
                <declaration name="first" type="Fraction" line="186"/>
                <declaration name="second" type="Fraction" line="187"/>
            </method>
            <method name="testFloatValue" type="void" line="194">
                <declaration name="first" type="Fraction" line="195"/>
                <declaration name="second" type="Fraction" line="196"/>
            </method>
            <method name="testIntValue" type="void" line="203">
                <declaration name="first" type="Fraction" line="204"/>
                <declaration name="second" type="Fraction" line="205"/>
            </method>
            <method name="testLongValue" type="void" line="212">
                <declaration name="first" type="Fraction" line="213"/>
                <declaration name="second" type="Fraction" line="214"/>
            </method>
            <method name="testConstructorDouble" type="void" line="221"/>
            <method name="testAbs" type="void" line="233">
                <declaration name="a" type="Fraction" line="234"/>
                <declaration name="b" type="Fraction" line="235"/>
                <declaration name="c" type="Fraction" line="236"/>
            </method>
            <method name="testPercentage" type="void" line="244"/>
            <method name="testMath835" type="void" line="249">
                <comment line="254">
                    With the implementation that preceded the fix suggested in MATH-835,                    
                </comment>
                <comment line="255">
                    this test was failing, due to overflow.                    
                </comment>
                <declaration name="numer" type="int" line="250"/>
                <declaration name="denom" type="int" line="251"/>
                <declaration name="percentage" type="double" line="252"/>
                <declaration name="frac" type="Fraction" line="253"/>
            </method>
            <method name="testReciprocal" type="void" line="260">
                <comment line="284">
                    large values                    
                </comment>
                <declaration name="f" type="Fraction" line="261"/>
                <scope line="279"/>
                <scope line="282"/>
            </method>
            <method name="testNegate" type="void" line="292">
                <comment line="305">
                    large values                    
                </comment>
                <declaration name="f" type="Fraction" line="293"/>
                <scope line="312"/>
                <scope line="315"/>
            </method>
            <method name="testAdd" type="void" line="319">
                <comment line="348">
                    if this fraction is added naively, it will overflow.                    
                </comment>
                <comment line="349">
                    check that it doesn&apos;t.                    
                </comment>
                <comment line="369">
                    should overflow                    
                </comment>
                <comment line="373">
                    denominator should not be a multiple of 2 or 3 to trigger overflow                    
                </comment>
                <comment line="377">
                    should overflow                    
                </comment>
                <comment line="396">
                    should overflow                    
                </comment>
                <declaration name="a" type="Fraction" line="320"/>
                <declaration name="b" type="Fraction" line="321"/>
                <declaration name="f1" type="Fraction" line="328"/>
                <declaration name="f2" type="Fraction" line="329"/>
                <declaration name="f" type="Fraction" line="330"/>
                <scope line="343"/>
                <scope line="346"/>
                <scope line="368"/>
                <scope line="371"/>
                <scope line="376"/>
                <scope line="379"/>
                <scope line="381"/>
                <scope line="385"/>
                <scope line="387"/>
                <scope line="391"/>
                <scope line="395"/>
                <scope line="398"/>
            </method>
            <method name="testDivide" type="void" line="402">
                <comment line="447">
                    should overflow                    
                </comment>
                <comment line="452">
                    should overflow                    
                </comment>
                <declaration name="a" type="Fraction" line="403"/>
                <declaration name="b" type="Fraction" line="404"/>
                <declaration name="f1" type="Fraction" line="411"/>
                <declaration name="f2" type="Fraction" line="412"/>
                <scope line="413"/>
                <scope line="416"/>
                <declaration name="f" type="Fraction" line="420"/>
                <scope line="440"/>
                <scope line="443"/>
                <scope line="445"/>
                <scope line="449"/>
                <scope line="450"/>
                <scope line="454"/>
            </method>
            <method name="testMultiply" type="void" line="464">
                <declaration name="a" type="Fraction" line="465"/>
                <declaration name="b" type="Fraction" line="466"/>
                <declaration name="f1" type="Fraction" line="473"/>
                <declaration name="f2" type="Fraction" line="474"/>
                <declaration name="f" type="Fraction" line="475"/>
                <scope line="479"/>
                <scope line="482"/>
            </method>
            <method name="testSubtract" type="void" line="491">
                <comment line="506">
                    if this fraction is subtracted naively, it will overflow.                    
                </comment>
                <comment line="507">
                    check that it doesn&apos;t.                    
                </comment>
                <comment line="533">
                    should overflow                    
                </comment>
                <comment line="536">
                    denominator should not be a multiple of 2 or 3 to trigger overflow                    
                </comment>
                <comment line="540">
                    should overflow                    
                </comment>
                <comment line="559">
                    should overflow                    
                </comment>
                <declaration name="a" type="Fraction" line="492"/>
                <declaration name="b" type="Fraction" line="493"/>
                <declaration name="f" type="Fraction" line="500"/>
                <scope line="501"/>
                <scope line="504"/>
                <declaration name="f1" type="Fraction" line="508"/>
                <declaration name="f2" type="Fraction" line="509"/>
                <scope line="529"/>
                <scope line="534"/>
                <scope line="539"/>
                <scope line="542"/>
                <scope line="544"/>
                <scope line="548"/>
                <scope line="550"/>
                <scope line="554"/>
                <scope line="558"/>
                <scope line="561"/>
            </method>
            <method name="testEqualsAndHashCode" type="void" line="565">
                <declaration name="zero" type="Fraction" line="566"/>
                <declaration name="nullFraction" type="Fraction" line="567"/>
                <declaration name="zero2" type="Fraction" line="571"/>
                <declaration name="one" type="Fraction" line="574"/>
            </method>
            <method name="testGetReducedFraction" type="void" line="579">
                <comment line="587">
                    expected                    
                </comment>
                <declaration name="threeFourths" type="Fraction" line="580"/>
                <scope line="583"/>
                <scope line="586"/>
            </method>
            <method name="testToString" type="void" line="596"/>
            <method name="testSerial" type="void" line="603">
                <declaration name="fractions" type="Fraction[]" line="604"/>
                <scope line="609"/>
            </method>
        </class>
    </source>