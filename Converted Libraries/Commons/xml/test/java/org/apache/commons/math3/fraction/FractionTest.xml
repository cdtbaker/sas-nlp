<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.fraction">
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.TestUtils"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Test"/>
        <class name="FractionTest" line="28">
            <comment line="76">
                MATH-179                
            </comment>
            <comment line="122">
                MATH-181                
            </comment>
            <javadoc line="28">
                @version $Id: FractionTest.java 1519204 2013-08-31 19:43:02Z tn $                
            </javadoc>
            <method name="assertFraction" type="void" line="33">
                <params>
                    <param name="expectedNumerator" type="int"/>
                    <param name="expectedDenominator" type="int"/>
                    <param name="actual" type="Fraction"/>
                </params>
            </method>
            <method name="testConstructor" type="void" line="39">
                <comment line="51">
                    overflow                    
                </comment>
                <comment line="56">
                    success                    
                </comment>
                <comment line="62">
                    success                    
                </comment>
                <scope line="51"/>
                <scope line="54"/>
                <scope line="57"/>
                <scope line="60"/>
            </method>
            <method name="testGoldenRatio" type="void" line="70">
                <comment line="72">
                    the golden ratio is notoriously a difficult number for continuous fraction                    
                </comment>
            </method>
            <method name="testDoubleConstructor" type="void" line="77"/>
            <method name="testDigitLimitConstructor" type="void" line="123">
                <comment line="134">
                    MATH-996                    
                </comment>
            </method>
            <method name="testIntegerOverflow" type="void" line="138"/>
            <method name="checkIntegerOverflow" type="void" line="145">
                <params>
                    <param name="a" type="double"/>
                </params>
                <comment line="150">
                    System.out.println(f.getNumerator() + &quot;/&quot; + f.getDenominator());                    
                </comment>
                <comment line="153">
                    expected behavior                    
                </comment>
                <scope line="146">
                    <declaration name="f" type="Fraction" line="147"/>
                </scope>
                <scope line="151"/>
            </method>
            <method name="testEpsilonLimitConstructor" type="void" line="157"/>
            <method name="testCompareTo" type="void" line="169">
                <comment line="180">
                    these two values are different approximations of PI
                     the first  one is approximately PI - 3.07e-18
                     the second one is approximately PI + 1.936e-17                    
                </comment>
                <declaration name="first" type="Fraction" line="170"/>
                <declaration name="second" type="Fraction" line="171"/>
                <declaration name="third" type="Fraction" line="172"/>
                <declaration name="pi1" type="Fraction" line="182"/>
                <declaration name="pi2" type="Fraction" line="183"/>
            </method>
            <method name="testDoubleValue" type="void" line="190">
                <declaration name="first" type="Fraction" line="191"/>
                <declaration name="second" type="Fraction" line="192"/>
            </method>
            <method name="testFloatValue" type="void" line="199">
                <declaration name="first" type="Fraction" line="200"/>
                <declaration name="second" type="Fraction" line="201"/>
            </method>
            <method name="testIntValue" type="void" line="208">
                <declaration name="first" type="Fraction" line="209"/>
                <declaration name="second" type="Fraction" line="210"/>
            </method>
            <method name="testLongValue" type="void" line="217">
                <declaration name="first" type="Fraction" line="218"/>
                <declaration name="second" type="Fraction" line="219"/>
            </method>
            <method name="testConstructorDouble" type="void" line="226"/>
            <method name="testAbs" type="void" line="238">
                <declaration name="a" type="Fraction" line="239"/>
                <declaration name="b" type="Fraction" line="240"/>
                <declaration name="c" type="Fraction" line="241"/>
            </method>
            <method name="testPercentage" type="void" line="249"/>
            <method name="testMath835" type="void" line="254">
                <comment line="260">
                    With the implementation that preceded the fix suggested in MATH-835,
                     this test was failing, due to overflow.                    
                </comment>
                <declaration name="numer" type="int" line="255"/>
                <declaration name="denom" type="int" line="256"/>
                <declaration name="percentage" type="double" line="257"/>
                <declaration name="frac" type="Fraction" line="258"/>
            </method>
            <method name="testReciprocal" type="void" line="265">
                <comment line="290">
                    large values                    
                </comment>
                <declaration name="f" type="Fraction" line="266"/>
                <scope line="284"/>
                <scope line="287"/>
            </method>
            <method name="testNegate" type="void" line="297">
                <comment line="311">
                    large values                    
                </comment>
                <declaration name="f" type="Fraction" line="298"/>
                <scope line="317"/>
                <scope line="320"/>
            </method>
            <method name="testAdd" type="void" line="324">
                <comment line="354">
                    if this fraction is added naively, it will overflow.
                     check that it doesn&apos;t.                    
                </comment>
                <comment line="375">
                    should overflow                    
                </comment>
                <comment line="379">
                    denominator should not be a multiple of 2 or 3 to trigger overflow                    
                </comment>
                <comment line="383">
                    should overflow                    
                </comment>
                <comment line="402">
                    should overflow                    
                </comment>
                <declaration name="a" type="Fraction" line="325"/>
                <declaration name="b" type="Fraction" line="326"/>
                <declaration name="f1" type="Fraction" line="333"/>
                <declaration name="f2" type="Fraction" line="334"/>
                <declaration name="f" type="Fraction" line="335"/>
                <scope line="348"/>
                <scope line="351"/>
                <scope line="373"/>
                <scope line="376"/>
                <scope line="381"/>
                <scope line="384"/>
                <scope line="386"/>
                <scope line="390"/>
                <scope line="392"/>
                <scope line="396"/>
                <scope line="400"/>
                <scope line="403"/>
            </method>
            <method name="testDivide" type="void" line="407">
                <comment line="453">
                    should overflow                    
                </comment>
                <comment line="458">
                    should overflow                    
                </comment>
                <declaration name="a" type="Fraction" line="408"/>
                <declaration name="b" type="Fraction" line="409"/>
                <declaration name="f1" type="Fraction" line="416"/>
                <declaration name="f2" type="Fraction" line="417"/>
                <scope line="418"/>
                <scope line="421"/>
                <declaration name="f" type="Fraction" line="425"/>
                <scope line="445"/>
                <scope line="448"/>
                <scope line="450"/>
                <scope line="454"/>
                <scope line="455"/>
                <scope line="459"/>
            </method>
            <method name="testMultiply" type="void" line="469">
                <declaration name="a" type="Fraction" line="470"/>
                <declaration name="b" type="Fraction" line="471"/>
                <declaration name="f1" type="Fraction" line="478"/>
                <declaration name="f2" type="Fraction" line="479"/>
                <declaration name="f" type="Fraction" line="480"/>
                <scope line="484"/>
                <scope line="487"/>
            </method>
            <method name="testSubtract" type="void" line="496">
                <comment line="512">
                    if this fraction is subtracted naively, it will overflow.
                     check that it doesn&apos;t.                    
                </comment>
                <comment line="539">
                    should overflow                    
                </comment>
                <comment line="542">
                    denominator should not be a multiple of 2 or 3 to trigger overflow                    
                </comment>
                <comment line="546">
                    should overflow                    
                </comment>
                <comment line="565">
                    should overflow                    
                </comment>
                <declaration name="a" type="Fraction" line="497"/>
                <declaration name="b" type="Fraction" line="498"/>
                <declaration name="f" type="Fraction" line="505"/>
                <scope line="506"/>
                <scope line="509"/>
                <declaration name="f1" type="Fraction" line="513"/>
                <declaration name="f2" type="Fraction" line="514"/>
                <scope line="534"/>
                <scope line="539"/>
                <scope line="544"/>
                <scope line="547"/>
                <scope line="549"/>
                <scope line="553"/>
                <scope line="555"/>
                <scope line="559"/>
                <scope line="563"/>
                <scope line="566"/>
            </method>
            <method name="testEqualsAndHashCode" type="void" line="570">
                <declaration name="zero" type="Fraction" line="571"/>
                <declaration name="nullFraction" type="Fraction" line="572"/>
                <declaration name="zero2" type="Fraction" line="576"/>
                <declaration name="one" type="Fraction" line="579"/>
            </method>
            <method name="testGetReducedFraction" type="void" line="584">
                <comment line="593">
                    expected                    
                </comment>
                <declaration name="threeFourths" type="Fraction" line="585"/>
                <scope line="588"/>
                <scope line="591"/>
            </method>
            <method name="testToString" type="void" line="601"/>
            <method name="testSerial" type="void" line="608">
                <declaration name="fractions" type="Fraction[]" line="609"/>
                <scope line="614"/>
            </method>
        </class>
    </source>