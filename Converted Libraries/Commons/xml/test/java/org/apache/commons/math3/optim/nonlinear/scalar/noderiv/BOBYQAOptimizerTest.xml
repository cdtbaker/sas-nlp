<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.SimpleBounds"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.Test"/>
        <class name="BOBYQAOptimizerTest" line="38">
            <comment line="241">
                See MATH-728
                 TODO: this test is temporarily disabled for 3.2 release as a bug in Cobertura
                       makes it run for several hours before completing                
            </comment>
            <javadoc line="38">
                Test for {@link BOBYQAOptimizer}.                
            </javadoc>
            <declaration name="DIM" type="int" line="43"/>
            <method name="testInitOutOfBounds" type="void" line="46">
                <declaration name="startPoint" type="double[]" line="47"/>
                <declaration name="boundaries" type="double[][]" line="48"/>
            </method>
            <method name="testBoundariesDimensionMismatch" type="void" line="55">
                <declaration name="startPoint" type="double[]" line="56"/>
                <declaration name="boundaries" type="double[][]" line="57"/>
            </method>
            <method name="testProblemDimensionTooSmall" type="void" line="64">
                <declaration name="startPoint" type="double[]" line="65"/>
            </method>
            <method name="testMaxEvaluations" type="void" line="72">
                <declaration name="lowMaxEval" type="int" line="73"/>
                <declaration name="startPoint" type="double[]" line="74"/>
                <declaration name="boundaries" type="double[][]" line="75"/>
            </method>
            <method name="testRosen" type="void" line="82">
                <declaration name="startPoint" type="double[]" line="83"/>
                <declaration name="boundaries" type="double[][]" line="84"/>
                <declaration name="expected" type="PointValuePair" line="85"/>
            </method>
            <method name="testMaximize" type="void" line="92">
                <declaration name="startPoint" type="double[]" line="93"/>
                <declaration name="boundaries" type="double[][]" line="94"/>
                <declaration name="expected" type="PointValuePair" line="95"/>
            </method>
            <method name="testEllipse" type="void" line="107">
                <declaration name="startPoint" type="double[]" line="108"/>
                <declaration name="boundaries" type="double[][]" line="109"/>
                <declaration name="expected" type="PointValuePair" line="110"/>
            </method>
            <method name="testElliRotated" type="void" line="118">
                <declaration name="startPoint" type="double[]" line="119"/>
                <declaration name="boundaries" type="double[][]" line="120"/>
                <declaration name="expected" type="PointValuePair" line="121"/>
            </method>
            <method name="testCigar" type="void" line="129">
                <declaration name="startPoint" type="double[]" line="130"/>
                <declaration name="boundaries" type="double[][]" line="131"/>
                <declaration name="expected" type="PointValuePair" line="132"/>
            </method>
            <method name="testTwoAxes" type="void" line="140">
                <declaration name="startPoint" type="double[]" line="141"/>
                <declaration name="boundaries" type="double[][]" line="142"/>
                <declaration name="expected" type="PointValuePair" line="143"/>
            </method>
            <method name="testCigTab" type="void" line="151">
                <declaration name="startPoint" type="double[]" line="152"/>
                <declaration name="boundaries" type="double[][]" line="153"/>
                <declaration name="expected" type="PointValuePair" line="154"/>
            </method>
            <method name="testSphere" type="void" line="162">
                <declaration name="startPoint" type="double[]" line="163"/>
                <declaration name="boundaries" type="double[][]" line="164"/>
                <declaration name="expected" type="PointValuePair" line="165"/>
            </method>
            <method name="testTablet" type="void" line="173">
                <declaration name="startPoint" type="double[]" line="174"/>
                <declaration name="boundaries" type="double[][]" line="175"/>
                <declaration name="expected" type="PointValuePair" line="176"/>
            </method>
            <method name="testDiffPow" type="void" line="184">
                <declaration name="startPoint" type="double[]" line="185"/>
                <declaration name="boundaries" type="double[][]" line="186"/>
                <declaration name="expected" type="PointValuePair" line="187"/>
            </method>
            <method name="testSsDiffPow" type="void" line="195">
                <declaration name="startPoint" type="double[]" line="196"/>
                <declaration name="boundaries" type="double[][]" line="197"/>
                <declaration name="expected" type="PointValuePair" line="198"/>
            </method>
            <method name="testAckley" type="void" line="206">
                <declaration name="startPoint" type="double[]" line="207"/>
                <declaration name="boundaries" type="double[][]" line="208"/>
                <declaration name="expected" type="PointValuePair" line="209"/>
            </method>
            <method name="testRastrigin" type="void" line="217">
                <declaration name="startPoint" type="double[]" line="218"/>
                <declaration name="boundaries" type="double[][]" line="220"/>
                <declaration name="expected" type="PointValuePair" line="221"/>
            </method>
            <method name="testConstrainedRosen" type="void" line="229">
                <declaration name="startPoint" type="double[]" line="230"/>
                <declaration name="boundaries" type="double[][]" line="232"/>
                <declaration name="expected" type="PointValuePair" line="233"/>
            </method>
            <method name="testConstrainedRosenWithMoreInterpolationPoints" type="void" line="244">
                <comment line="250">
                    This should have been 78 because in the code the hard limit is
                     said to be
                       ((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)
                     i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64,
                     65, 66, ...                    
                </comment>
                <declaration name="startPoint" type="double[]" line="245"/>
                <declaration name="boundaries" type="double[][]" line="246"/>
                <declaration name="expected" type="PointValuePair" line="247"/>
                <declaration name="maxAdditionalPoints" type="int" line="254"/>
                <scope line="256"/>
            </method>
            <javadoc line="266">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="283">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                </params>
            </method>
            <javadoc line="296">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    additionalInterpolationPoints Number of interpolation to used
                      in addition to the default (2  dim + 1).                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="317">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="additionalInterpolationPoints" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                    <param name="assertMsg" type="String"/>
                </params>
                <comment line="320">
                    System.out.println(func.getClass().getName() + &quot; BEGIN&quot;); // XXX                    
                </comment>
                <comment line="337">
                    System.out.println(func.getClass().getName() + &quot; = &quot;
                                  + optim.getEvaluations() + &quot; f(&quot;);
                            for (double x: result.getPoint())  System.out.print(x + &quot; &quot;);
                            System.out.println(&quot;) = &quot; +  result.getValue());                    
                </comment>
                <comment line="347">
                    System.out.println(func.getClass().getName() + &quot; END&quot;); // XXX                    
                </comment>
                <declaration name="dim" type="int" line="321"/>
                <declaration name="numIterpolationPoints" type="int" line="322"/>
                <declaration name="optim" type="BOBYQAOptimizer" line="323"/>
                <declaration name="result" type="PointValuePair" line="324"/>
                <scope line="341"/>
            </method>
            <method name="point" type="double[]" line="349">
                <params>
                    <param name="n" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="ds" type="double[]" line="350"/>
            </method>
            <method name="boundaries" type="double[][]" line="356">
                <params>
                    <param name="dim" type="int"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <declaration name="boundaries" type="double[][]" line="357"/>
            </method>
            <class name="Sphere" line="365">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="367">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="368"/>
                </method>
            </class>
            <class name="Cigar" line="375">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="376"/>
                <method name="Cigar" type="constructor" line="378"/>
                <method name="Cigar" type="constructor" line="382">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="386">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="387"/>
                </method>
            </class>
            <class name="Tablet" line="394">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="395"/>
                <method name="Tablet" type="constructor" line="397"/>
                <method name="Tablet" type="constructor" line="401">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="405">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="406"/>
                </method>
            </class>
            <class name="CigTab" line="413">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="414"/>
                <method name="CigTab" type="constructor" line="416"/>
                <method name="CigTab" type="constructor" line="420">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="424">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="end" type="int" line="425"/>
                    <declaration name="f" type="double" line="426"/>
                </method>
            </class>
            <class name="TwoAxes" line="433">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="435"/>
                <method name="TwoAxes" type="constructor" line="437"/>
                <method name="TwoAxes" type="constructor" line="441">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="445">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="446"/>
                </method>
            </class>
            <class name="ElliRotated" line="453">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="B" type="Basis" line="454"/>
                <declaration name="factor" type="double" line="455"/>
                <method name="ElliRotated" type="constructor" line="457"/>
                <method name="ElliRotated" type="constructor" line="461">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="465">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="466"/>
                </method>
            </class>
            <class name="Elli" line="474">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="476"/>
                <method name="Elli" type="constructor" line="478"/>
                <method name="Elli" type="constructor" line="482">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="486">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="487"/>
                </method>
            </class>
            <class name="MinusElli" line="494">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="elli" type="Elli" line="495"/>
                <method name="value" type="double" line="496">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                </method>
            </class>
            <class name="DiffPow" line="501">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="503">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <comment line="509">
                        System.out.print(&quot;&quot; + (fcount++) + &quot;) &quot;);
                                    for (int i = 0; i &lt; x.length; i++)
                                        System.out.print(x[i] +  &quot; &quot;);
                                    System.out.println(&quot; = &quot; + f);                        
                    </comment>
                    <declaration name="f" type="double" line="504"/>
                </method>
            </class>
            <class name="SsDiffPow" line="516">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="518">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="519"/>
                </method>
            </class>
            <class name="Rosen" line="524">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="526">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="527"/>
                </method>
            </class>
            <class name="Ackley" line="535">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="536"/>
                <method name="Ackley" type="constructor" line="538">
                    <params>
                        <param name="axra" type="double"/>
                    </params>
                </method>
                <method name="Ackley" type="constructor" line="542"/>
                <method name="value" type="double" line="546">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="547"/>
                    <declaration name="res2" type="double" line="548"/>
                    <declaration name="fac" type="double" line="549"/>
                    <scope line="550"/>
                </method>
            </class>
            <class name="Rastrigin" line="561">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="563"/>
                <declaration name="amplitude" type="double" line="564"/>
                <method name="Rastrigin" type="constructor" line="566"/>
                <method name="Rastrigin" type="constructor" line="570">
                    <params>
                        <param name="axisratio" type="double"/>
                        <param name="amplitude" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="575">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="576"/>
                    <declaration name="fac" type="double" line="577"/>
                    <scope line="578"/>
                </method>
            </class>
            <class name="Basis" line="589">
                <comment line="503">
                    private int fcount = 0;                    
                </comment>
                <comment line="592">
                    use not always the same basis                    
                </comment>
                <declaration name="basis" type="double[][]" line="590"/>
                <declaration name="rand" type="Random" line="591"/>
                <method name="Rotate" type="double[]" line="593">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="y" type="double[]" line="595"/>
                    <scope line="596"/>
                </method>
                <method name="GenBasis" type="void" line="604">
                    <params>
                        <param name="DIM" type="int"/>
                    </params>
                    <comment line="612">
                                                
                    </comment>
                    <comment line="615">
                                                
                    </comment>
                    <comment line="618">
                                                
                    </comment>
                    <comment line="621">
                                                
                    </comment>
                    <comment line="623">
                                                
                    </comment>
                    <comment line="625">
                                                
                    </comment>
                    <comment line="627">
                                                
                    </comment>
                    <declaration name="sp" type="double" line="608"/>
                    <declaration name="i" type="int" line="609"/>
                    <scope line="613">
                        <scope line="618"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>