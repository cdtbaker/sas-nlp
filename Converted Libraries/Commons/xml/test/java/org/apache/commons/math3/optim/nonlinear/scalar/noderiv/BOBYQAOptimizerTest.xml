<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.optim.MaxEval"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.GoalType"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.InitialGuess"/>
        <import package="org.apache.commons.math3.optim.SimpleBounds"/>
        <import package="org.junit.Assert"/>
        <import package="org.junit.Ignore"/>
        <import package="org.junit.Test"/>
        <class name="BOBYQAOptimizerTest" line="18">
            <javadoc line="18">
                Test for {@link BOBYQAOptimizer}.                
            </javadoc>
            <declaration name="DIM" type="int" line="22"/>
            <method name="testInitOutOfBounds" type="void" line="23">
                <declaration name="startPoint" type="double[]" line="24"/>
                <declaration name="boundaries" type="double[][]" line="25"/>
            </method>
            <method name="testBoundariesDimensionMismatch" type="void" line="28">
                <declaration name="startPoint" type="double[]" line="29"/>
                <declaration name="boundaries" type="double[][]" line="30"/>
            </method>
            <method name="testProblemDimensionTooSmall" type="void" line="33">
                <declaration name="startPoint" type="double[]" line="34"/>
            </method>
            <method name="testMaxEvaluations" type="void" line="37">
                <declaration name="lowMaxEval" type="int" line="38"/>
                <declaration name="startPoint" type="double[]" line="39"/>
                <declaration name="boundaries" type="double[][]" line="40"/>
            </method>
            <method name="testRosen" type="void" line="43">
                <declaration name="startPoint" type="double[]" line="44"/>
                <declaration name="boundaries" type="double[][]" line="45"/>
                <declaration name="expected" type="PointValuePair" line="46"/>
            </method>
            <method name="testMaximize" type="void" line="49">
                <declaration name="startPoint" type="double[]" line="50"/>
                <declaration name="boundaries" type="double[][]" line="51"/>
                <declaration name="expected" type="PointValuePair" line="52"/>
            </method>
            <method name="testEllipse" type="void" line="58">
                <declaration name="startPoint" type="double[]" line="59"/>
                <declaration name="boundaries" type="double[][]" line="60"/>
                <declaration name="expected" type="PointValuePair" line="61"/>
            </method>
            <method name="testElliRotated" type="void" line="64">
                <declaration name="startPoint" type="double[]" line="65"/>
                <declaration name="boundaries" type="double[][]" line="66"/>
                <declaration name="expected" type="PointValuePair" line="67"/>
            </method>
            <method name="testCigar" type="void" line="70">
                <declaration name="startPoint" type="double[]" line="71"/>
                <declaration name="boundaries" type="double[][]" line="72"/>
                <declaration name="expected" type="PointValuePair" line="73"/>
            </method>
            <method name="testTwoAxes" type="void" line="76">
                <declaration name="startPoint" type="double[]" line="77"/>
                <declaration name="boundaries" type="double[][]" line="78"/>
                <declaration name="expected" type="PointValuePair" line="79"/>
            </method>
            <method name="testCigTab" type="void" line="82">
                <declaration name="startPoint" type="double[]" line="83"/>
                <declaration name="boundaries" type="double[][]" line="84"/>
                <declaration name="expected" type="PointValuePair" line="85"/>
            </method>
            <method name="testSphere" type="void" line="88">
                <declaration name="startPoint" type="double[]" line="89"/>
                <declaration name="boundaries" type="double[][]" line="90"/>
                <declaration name="expected" type="PointValuePair" line="91"/>
            </method>
            <method name="testTablet" type="void" line="94">
                <declaration name="startPoint" type="double[]" line="95"/>
                <declaration name="boundaries" type="double[][]" line="96"/>
                <declaration name="expected" type="PointValuePair" line="97"/>
            </method>
            <method name="testDiffPow" type="void" line="100">
                <declaration name="startPoint" type="double[]" line="101"/>
                <declaration name="boundaries" type="double[][]" line="102"/>
                <declaration name="expected" type="PointValuePair" line="103"/>
            </method>
            <method name="testSsDiffPow" type="void" line="106">
                <declaration name="startPoint" type="double[]" line="107"/>
                <declaration name="boundaries" type="double[][]" line="108"/>
                <declaration name="expected" type="PointValuePair" line="109"/>
            </method>
            <method name="testAckley" type="void" line="112">
                <declaration name="startPoint" type="double[]" line="113"/>
                <declaration name="boundaries" type="double[][]" line="114"/>
                <declaration name="expected" type="PointValuePair" line="115"/>
            </method>
            <method name="testRastrigin" type="void" line="118">
                <declaration name="startPoint" type="double[]" line="119"/>
                <declaration name="boundaries" type="double[][]" line="120"/>
                <declaration name="expected" type="PointValuePair" line="121"/>
            </method>
            <method name="testConstrainedRosen" type="void" line="124">
                <declaration name="startPoint" type="double[]" line="125"/>
                <declaration name="boundaries" type="double[][]" line="126"/>
                <declaration name="expected" type="PointValuePair" line="127"/>
            </method>
            <method name="testConstrainedRosenWithMoreInterpolationPoints" type="void" line="130">
                <declaration name="startPoint" type="double[]" line="131"/>
                <declaration name="boundaries" type="double[][]" line="132"/>
                <declaration name="expected" type="PointValuePair" line="133"/>
                <declaration name="maxAdditionalPoints" type="int" line="134"/>
                <scope line="135"/>
            </method>
            <javadoc line="139">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="149">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                </params>
            </method>
            <javadoc line="152">
                @param func Function to optimize.                
                <param>
                    startPoint Starting point.                    
                </param>
                <param>
                    boundaries Upper / lower point limit.                    
                </param>
                <param>
                    goal Minimization or maximization.                    
                </param>
                <param>
                    fTol Tolerance relative error on the objective function.                    
                </param>
                <param>
                    pointTol Tolerance for checking that the optimum is correct.                    
                </param>
                <param>
                    maxEvaluations Maximum number of evaluations.                    
                </param>
                <param>
                    additionalInterpolationPoints Number of interpolation to used
                      in addition to the default (2  dim + 1).                    
                </param>
                <param>
                    expected Expected point / value.                    
                </param>
            </javadoc>
            <method name="doTest" type="void" line="164">
                <params>
                    <param name="func" type="MultivariateFunction"/>
                    <param name="startPoint" type="double[]"/>
                    <param name="boundaries" type="double[][]"/>
                    <param name="goal" type="GoalType"/>
                    <param name="fTol" type="double"/>
                    <param name="pointTol" type="double"/>
                    <param name="maxEvaluations" type="int"/>
                    <param name="additionalInterpolationPoints" type="int"/>
                    <param name="expected" type="PointValuePair"/>
                    <param name="assertMsg" type="String"/>
                </params>
                <declaration name="dim" type="int" line="165"/>
                <declaration name="numIterpolationPoints" type="int" line="166"/>
                <declaration name="optim" type="BOBYQAOptimizer" line="167"/>
                <declaration name="result" type="PointValuePair" line="168"/>
                <scope line="170"/>
            </method>
            <method name="point" type="double[]" line="174">
                <params>
                    <param name="n" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="ds" type="double[]" line="175"/>
            </method>
            <method name="boundaries" type="double[][]" line="179">
                <params>
                    <param name="dim" type="int"/>
                    <param name="lower" type="double"/>
                    <param name="upper" type="double"/>
                </params>
                <declaration name="boundaries" type="double[][]" line="180"/>
            </method>
            <class name="Sphere" line="185">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="186">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="187"/>
                </method>
            </class>
            <class name="Cigar" line="192">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="193"/>
                <method name="Cigar" type="constructor" line="194"/>
                <method name="Cigar" type="constructor" line="197">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="200">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="201"/>
                </method>
            </class>
            <class name="Tablet" line="206">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="207"/>
                <method name="Tablet" type="constructor" line="208"/>
                <method name="Tablet" type="constructor" line="211">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="214">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="215"/>
                </method>
            </class>
            <class name="CigTab" line="220">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="221"/>
                <method name="CigTab" type="constructor" line="222"/>
                <method name="CigTab" type="constructor" line="225">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="228">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="end" type="int" line="229"/>
                    <declaration name="f" type="double" line="230"/>
                </method>
            </class>
            <class name="TwoAxes" line="235">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="236"/>
                <method name="TwoAxes" type="constructor" line="237"/>
                <method name="TwoAxes" type="constructor" line="240">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="243">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="244"/>
                </method>
            </class>
            <class name="ElliRotated" line="249">
                <implements interface="MultivariateFunction"/>
                <declaration name="B" type="Basis" line="250"/>
                <declaration name="factor" type="double" line="251"/>
                <method name="ElliRotated" type="constructor" line="252"/>
                <method name="ElliRotated" type="constructor" line="255">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="258">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="259"/>
                </method>
            </class>
            <class name="Elli" line="265">
                <implements interface="MultivariateFunction"/>
                <declaration name="factor" type="double" line="266"/>
                <method name="Elli" type="constructor" line="267"/>
                <method name="Elli" type="constructor" line="270">
                    <params>
                        <param name="axisratio" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="273">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="274"/>
                </method>
            </class>
            <class name="MinusElli" line="279">
                <implements interface="MultivariateFunction"/>
                <declaration name="elli" type="Elli" line="280"/>
                <method name="value" type="double" line="281">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                </method>
            </class>
            <class name="DiffPow" line="285">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="286">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="287"/>
                </method>
            </class>
            <class name="SsDiffPow" line="292">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="293">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="294"/>
                </method>
            </class>
            <class name="Rosen" line="298">
                <implements interface="MultivariateFunction"/>
                <method name="value" type="double" line="299">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="300"/>
                </method>
            </class>
            <class name="Ackley" line="305">
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="306"/>
                <method name="Ackley" type="constructor" line="307">
                    <params>
                        <param name="axra" type="double"/>
                    </params>
                </method>
                <method name="Ackley" type="constructor" line="310"/>
                <method name="value" type="double" line="313">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="314"/>
                    <declaration name="res2" type="double" line="315"/>
                    <declaration name="fac" type="double" line="316"/>
                    <scope line="317"/>
                </method>
            </class>
            <class name="Rastrigin" line="326">
                <implements interface="MultivariateFunction"/>
                <declaration name="axisratio" type="double" line="327"/>
                <declaration name="amplitude" type="double" line="328"/>
                <method name="Rastrigin" type="constructor" line="329"/>
                <method name="Rastrigin" type="constructor" line="332">
                    <params>
                        <param name="axisratio" type="double"/>
                        <param name="amplitude" type="double"/>
                    </params>
                </method>
                <method name="value" type="double" line="336">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="f" type="double" line="337"/>
                    <declaration name="fac" type="double" line="338"/>
                    <scope line="339"/>
                </method>
            </class>
            <class name="Basis" line="347">
                <declaration name="basis" type="double[][]" line="348"/>
                <declaration name="rand" type="Random" line="349"/>
                <method name="Rotate" type="double[]" line="350">
                    <params>
                        <param name="x" type="double[]"/>
                    </params>
                    <declaration name="y" type="double[]" line="352"/>
                    <scope line="353"/>
                </method>
                <method name="GenBasis" type="void" line="359">
                    <params>
                        <param name="DIM" type="int"/>
                    </params>
                    <declaration name="sp" type="double" line="361"/>
                    <declaration name="i" type="int" line="362"/>
                    <scope line="364">
                        <scope line="366"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>