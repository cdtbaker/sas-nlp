<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.userguide.sofm">
        <import package="java.util.Iterator"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.io.IOException"/>
        <import package="org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood"/>
        <import package="org.apache.commons.math3.ml.neuralnet.FeatureInitializer"/>
        <import package="org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory"/>
        <import package="org.apache.commons.math3.ml.neuralnet.MapUtils"/>
        <import package="org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D"/>
        <import package="org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction"/>
        <import package="org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory"/>
        <import package="org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction"/>
        <import package="org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory"/>
        <import package="org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction"/>
        <import package="org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTask"/>
        <import package="org.apache.commons.math3.ml.distance.DistanceMeasure"/>
        <import package="org.apache.commons.math3.ml.distance.EuclideanDistance"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.stat.descriptive.SummaryStatistics"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Vector3D"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.exception.MathUnsupportedOperationException"/>
        <class name="ChineseRingsClassifier" line="43">
            <javadoc line="43">
                SOFM for categorizing points that belong to each of two intertwined rings.
                  The output currently consists in 3 text files:
                  &lt;ul&gt;
                  &lt;li&gt;&quot;before.chinese.U.seq.dat&quot;: U-matrix of the SOFM before training&lt;/li&gt;
                  &lt;li&gt;&quot;after.chinese.U.seq.dat&quot;: U-matrix of the SOFM after training&lt;/li&gt;
                  &lt;li&gt;&quot;after.chinese.hit.seq.dat&quot;: Hit histogram after training&lt;/li&gt;
                  &lt;ul&gt;                
            </javadoc>
            <declaration name="sofm" type="NeuronSquareMesh2D" line="54"/>
            <javadoc line="54">
                SOFM.                
            </javadoc>
            <declaration name="rings" type="ChineseRings" line="56"/>
            <javadoc line="56">
                Rings.                
            </javadoc>
            <declaration name="distance" type="DistanceMeasure" line="58"/>
            <javadoc line="58">
                Distance function.                
            </javadoc>
            <method name="main" type="void" line="61">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="rings" type="ChineseRings" line="62"/>
                <declaration name="classifier" type="ChineseRingsClassifier" line="66"/>
            </method>
            <javadoc line="73">
                @param rings Training data.                
                <param>
                    dim1 Number of rows of the SOFM.                    
                </param>
                <param>
                    dim2 Number of columns of the SOFM.                    
                </param>
            </javadoc>
            <method name="ChineseRingsClassifier" type="constructor" line="80">
                <params>
                    <param name="rings" type="ChineseRings"/>
                    <param name="dim1" type="int"/>
                    <param name="dim2" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                Creates training tasks.                
                <param>
                    numTasks Number of tasks to create.                    
                </param>
                <param>
                    numSamplesPerTask Number of training samples per task.                    
                </param>
                <return>
                    the created tasks.                    
                </return>
            </javadoc>
            <method name="createParallelTasks" type="Runnable[]" line="96">
                <params>
                    <param name="numTasks" type="int"/>
                    <param name="numSamplesPerTask" type="long"/>
                </params>
                <declaration name="tasks" type="Runnable[]" line="97"/>
                <declaration name="learning" type="LearningFactorFunction" line="98"/>
                <declaration name="numNeurons" type="double" line="102"/>
                <declaration name="neighbourhood" type="NeighbourhoodSizeFunction" line="103"/>
                <scope line="108">
                    <declaration name="action" type="KohonenUpdateAction" line="109"/>
                </scope>
            </method>
            <javadoc line="120">
                Creates a training task.                
                <param>
                    numSamples Number of training samples.                    
                </param>
                <return>
                    the created task.                    
                </return>
            </javadoc>
            <method name="createSequentialTask" type="Runnable" line="126">
                <params>
                    <param name="numSamples" type="long"/>
                </params>
            </method>
            <javadoc line="130">
                Computes the U-matrix.                
                <return>
                    the U-matrix of the network.                    
                </return>
            </javadoc>
            <method name="computeU" type="double[][]" line="135"/>
            <javadoc line="139">
                Computes the hit histogram.                
                <return>
                    the histogram.                    
                </return>
            </javadoc>
            <method name="computeHitHistogram" type="int[][]" line="144"/>
            <javadoc line="150">
                Computes the quantization error.                
                <return>
                    the quantization error.                    
                </return>
            </javadoc>
            <method name="computeQuantizationError" type="double" line="155"/>
            <javadoc line="161">
                Computes the topographic error.                
                <return>
                    the topographic error.                    
                </return>
            </javadoc>
            <method name="computeTopographicError" type="double" line="166"/>
            <javadoc line="172">
                Creates the features&apos; initializers.
                  They are sampled from a uniform distribution around the barycentre of
                  the rings.                
                <return>
                    an array containing the initializers for the x, y and
                      z coordinates of the features array of the neurons.                    
                </return>
            </javadoc>
            <method name="makeInitializers" type="FeatureInitializer[]" line="180">
                <declaration name="centre" type="SummaryStatistics[]" line="181"/>
                <scope line="186"/>
                <declaration name="mean" type="double[]" line="192"/>
                <declaration name="s" type="double" line="197"/>
                <declaration name="dev" type="double[]" line="198"/>
            </method>
            <javadoc line="211">
                Creates an iterable that will present the points coordinates.                
                <return>
                    the iterable.                    
                </return>
            </javadoc>
            <method name="createIterable" type="Iterable&lt;double[]&gt;" line="216">
                <anonymous_class line="217">
                    <method name="iterator" type="Iterator&lt;double[]&gt;" line="218">
                        <anonymous_class line="219">
                            <declaration name="points" type="Vector3D[]" line="220"/>
                            <javadoc line="220">
                                Data.                                
                            </javadoc>
                            <declaration name="n" type="int" line="222"/>
                            <javadoc line="222">
                                Number of samples.                                
                            </javadoc>
                            <javadoc line="225">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="hasNext" type="boolean" line="226"/>
                            <javadoc line="230">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="next" type="double[]" line="231"/>
                            <javadoc line="235">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="remove" type="void" line="236"/>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="244">
                Creates an iterator that will present a series of points coordinates in
                  a random order.                
                <param>
                    numSamples Number of samples.                    
                </param>
                <return>
                    the iterator.                    
                </return>
            </javadoc>
            <method name="createRandomIterator" type="Iterator&lt;double[]&gt;" line="251">
                <params>
                    <param name="numSamples" type="long"/>
                </params>
                <anonymous_class line="252">
                    <declaration name="points" type="Vector3D[]" line="253"/>
                    <javadoc line="253">
                        Data.                        
                    </javadoc>
                    <declaration name="rng" type="RandomGenerator" line="255"/>
                    <javadoc line="255">
                        RNG.                        
                    </javadoc>
                    <declaration name="n" type="long" line="257"/>
                    <javadoc line="257">
                        Number of samples.                        
                    </javadoc>
                    <javadoc line="260">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="hasNext" type="boolean" line="261"/>
                    <javadoc line="265">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="next" type="double[]" line="266"/>
                    <javadoc line="271">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="remove" type="void" line="272"/>
                </anonymous_class>
            </method>
            <javadoc line="278">
                Prints the U-matrix of the map to the given filename.                
                <param>
                    filename File.                    
                </param>
                <param>
                    sofm Classifier.                    
                </param>
            </javadoc>
            <method name="printU" type="void" line="285">
                <params>
                    <param name="filename" type="String"/>
                    <param name="sofm" type="ChineseRingsClassifier"/>
                </params>
                <comment line="301">
                    Do nothing.                    
                </comment>
                <declaration name="out" type="PrintWriter" line="286"/>
                <scope line="287">
                    <declaration name="uMatrix" type="double[][]" line="290"/>
                    <scope line="291">
                        <scope line="292"/>
                    </scope>
                </scope>
                <scope line="299"/>
                <scope line="301">
                    <scope line="302"/>
                </scope>
            </method>
            <javadoc line="308">
                Prints the hit histogram of the map to the given filename.                
                <param>
                    filename File.                    
                </param>
                <param>
                    sofm Classifier.                    
                </param>
            </javadoc>
            <method name="printHit" type="void" line="315">
                <params>
                    <param name="filename" type="String"/>
                    <param name="sofm" type="ChineseRingsClassifier"/>
                </params>
                <comment line="329">
                    Do nothing.                    
                </comment>
                <declaration name="out" type="PrintWriter" line="316"/>
                <scope line="317">
                    <declaration name="histo" type="int[][]" line="320"/>
                    <scope line="321">
                        <scope line="322"/>
                    </scope>
                </scope>
                <scope line="327"/>
                <scope line="329">
                    <scope line="330"/>
                </scope>
            </method>
        </class>
    </source>