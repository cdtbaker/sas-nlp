<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.simple">
        <import package="org.ejml.alg.generic.GenericMatrixOps"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.ReshapeMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.ops.RandomMatrices"/>
        <import package="java.util.Random"/>
        <class name="SimpleMatrix" line="30">
            <extends class="SimpleBase">
                <type_params>
                    <type_param name="SimpleMatrix"/>
                </type_params>
            </extends>
            <comment line="262">
                TODO should this function be added back?  It makes the code hard to read when its used                
            </comment>
            <comment line="263">
                /**
                     * &lt;p&gt;
                     * Performs one of the following matrix multiplication operations:&lt;br&gt;
                     * &lt;br&gt;
                     * c = a * b &lt;br&gt;
                     * c = a&lt;sup&gt;T&lt;/sup&gt; * b &lt;br&gt;
                     * c = a * b &lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                     * c = a&lt;sup&gt;T&lt;/sup&gt; * b &lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                     * &lt;br&gt;
                     * where c is the returned matrix, a is this matrix, and b is the passed in matrix.
                     * &lt;/p&gt;
                     *
                     * @see CommonOps#mult(DenseMatrix64F, DenseMatrix64F, DenseMatrix64F)
                     * @see CommonOps#multTransA(DenseMatrix64F, DenseMatrix64F, DenseMatrix64F)
                     * @see CommonOps#multTransB(DenseMatrix64F, DenseMatrix64F, DenseMatrix64F)
                     * @see CommonOps#multTransAB(DenseMatrix64F, DenseMatrix64F, DenseMatrix64F)
                     *
                     * @param tranA If true matrix A is transposed.
                     * @param tranB If true matrix B is transposed.
                     * @param b A matrix that is n by bn. Not modified.
                     *
                     * @return The results of this operation.
                     */
                    public SimpleMatrix mult( boolean tranA , boolean tranB , SimpleMatrix b) {
                        SimpleMatrix ret;
                
                        if( tranA &amp;&amp; tranB ) {
                            ret = createMatrix(mat.numCols,b.mat.numRows);
                            CommonOps.multTransAB(mat,b.mat,ret.mat);
                        } else if( tranA ) {
                            ret = createMatrix(mat.numCols,b.mat.numCols);
                            CommonOps.multTransA(mat,b.mat,ret.mat);
                        } else if( tranB ) {
                            ret = createMatrix(mat.numRows,b.mat.numRows);
                            CommonOps.multTransB(mat,b.mat,ret.mat);
                        }  else  {
                            ret = createMatrix(mat.numRows,b.mat.numCols);
                            CommonOps.mult(mat,b.mat,ret.mat);
                        }
                
                        return ret;
                    }                
            </comment>
            <javadoc line="30">
                &lt;p&gt;{@link SimpleMatrix} is a wrapper around {@link org.ejml.data.DenseMatrix64F} that provides an
                  easy to use object oriented interface for performing matrix operations.  It is designed to be
                  more accessible to novice programmers and provide a way to rapidly code up solutions by simplifying
                  memory management and providing easy to use functions.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Most functions in SimpleMatrix do not modify the original matrix.  Instead they
                  create a new SimpleMatrix instance which is modified and returned.  This greatly simplifies memory
                  management and writing of code in general. It also allows operations to be chained, as is shown
                  below:&lt;br&gt;
                  &lt;br&gt;
                  SimpleMatrix K = P.mult(H.transpose().mult(S.invert()));
                  &lt;/p&gt;
                  &lt;p&gt;
                  Working with both {@link org.ejml.data.DenseMatrix64F} and SimpleMatrix in the same code base is easy.
                  To access the internal DenseMatrix64F in a SimpleMatrix simply call {@link SimpleMatrix#getMatrix()}.
                  To turn a DenseMatrix64F into a SimpleMatrix use {@link SimpleMatrix#wrap(org.ejml.data.DenseMatrix64F)}.  Not
                  all operations in EJML are provided for SimpleMatrix, but can be accessed by extracting the internal
                  DenseMatrix64F.
                  &lt;/p&gt;
                  &lt;p&gt;
                  EXTENDING: SimpleMatrix contains a list of narrowly focused functions for linear algebra.  To harness
                  the functionality for another application and to the number of functions it supports it is recommended
                  that one extends {@link SimpleBase} instead.  This way the returned matrix type&apos;s of SimpleMatrix functions
                  will be of the appropriate types.  See StatisticsMatrix inside of the examples directory.
                  &lt;/p&gt;
                  &lt;p&gt;
                  PERFORMANCE: The disadvantage of using this class is that it is more resource intensive, since
                  it creates a new matrix each time an operation is performed.  This makes the JavaVM work harder and
                  Java automatically initializes the matrix to be all zeros.  Typically operations on small matrices
                  or operations that have a runtime linear with the number of elements are the most affected.  More
                  computationally intensive operations have only a slight unnoticeable performance loss.  MOST PEOPLE
                  SHOULD NOT WORRY ABOUT THE SLIGHT LOSS IN PERFORMANCE.
                  &lt;/p&gt;
                  &lt;p&gt;
                  It is hard to judge how significant the performance hit will be in general.  Often the performance
                  hit is insignificant since other parts of the application are more processor intensive or the bottle
                  neck is a more computationally complex operation.  The best approach is benchmark and then optimize the code.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If SimpleMatrix is extended then the protected function {link #createMatrix} should be extended and return
                  the child class.  The results of SimpleMatrix operations will then be of the correct matrix type. 
                  &lt;/p&gt;
                  &lt;p&gt;
                  The object oriented approach used in SimpleMatrix was originally inspired by Jama.
                  http://math.nist.gov/javanumerics/jama/
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="END" type="int" line="91"/>
            <javadoc line="91">
                A simplified way to reference the last row or column in the matrix for some functions.                
            </javadoc>
            <javadoc line="96">
                &lt;p&gt;
                  Creates a new matrix which has the same value as the matrix encoded in the
                  provided array.  The input matrix&apos;s format can either be row-major or
                  column-major.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Note that &apos;data&apos; is a variable argument type, so either 1D arrays or a set of numbers can be
                  passed in:&lt;br&gt;
                  SimpleMatrix a = new SimpleMatrix(2,2,true,new double[]{1,2,3,4});&lt;br&gt;
                  SimpleMatrix b = new SimpleMatrix(2,2,true,1,2,3,4);&lt;br&gt;
                  &lt;br&gt;
                  Both are equivalent.
                  &lt;/p&gt;                
                <see>
                    DenseMatrix64F#DenseMatrix64F(int,int,boolean,double)                    
                </see>
                <param>
                    numRows The number of rows.                    
                </param>
                <param>
                    numCols The number of columns.                    
                </param>
                <param>
                    rowMajor If the array is encoded in a row-major or a column-major format.                    
                </param>
                <param>
                    data The formatted 1D array. Not modified.                    
                </param>
            </javadoc>
            <method name="SimpleMatrix" type="constructor" line="119">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="rowMajor" type="boolean"/>
                    <param name="data" type="double"/>
                </params>
            </method>
            <javadoc line="123">
                &lt;p&gt;
                  Creates a matrix with the values and shape defined by the 2D array &apos;data&apos;.
                  It is assumed that &apos;data&apos; has a row-major formatting:&lt;br&gt;
                  &lt;br&gt;
                  data[ row ][ column ]
                  &lt;/p&gt;                
                <see>
                    org.ejml.data.DenseMatrix64F#DenseMatrix64F(double[][])                    
                </see>
                <param>
                    data 2D array representation of the matrix. Not modified.                    
                </param>
            </javadoc>
            <method name="SimpleMatrix" type="constructor" line="135">
                <params>
                    <param name="data" type="double"/>
                </params>
            </method>
            <javadoc line="139">
                Creates a new matrix that is initially set to zero with the specified dimensions.                
                <see>
                    org.ejml.data.DenseMatrix64F#DenseMatrix64F(int,int)                    
                </see>
                <param>
                    numRows The number of rows in the matrix.                    
                </param>
                <param>
                    numCols The number of columns in the matrix.                    
                </param>
            </javadoc>
            <method name="SimpleMatrix" type="constructor" line="147">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
            </method>
            <javadoc line="151">
                Creats a new SimpleMatrix which is identical to the original.                
                <param>
                    orig The matrix which is to be copied. Not modified.                    
                </param>
            </javadoc>
            <method name="SimpleMatrix" type="constructor" line="156">
                <params>
                    <param name="orig" type="SimpleMatrix"/>
                </params>
            </method>
            <javadoc line="160">
                Creates a new SimpleMatrix which is a copy of the DenseMatrix64F.                
                <param>
                    orig The original matrix whose value is copied.  Not modified.                    
                </param>
            </javadoc>
            <method name="SimpleMatrix" type="constructor" line="165">
                <params>
                    <param name="orig" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="169">
                Creates a new SimpleMatrix which is a copy of the Matrix64F.                
                <param>
                    orig The original matrix whose value is copied.  Not modified.                    
                </param>
            </javadoc>
            <method name="SimpleMatrix" type="constructor" line="174">
                <params>
                    <param name="orig" type="ReshapeMatrix64F"/>
                </params>
            </method>
            <javadoc line="180">
                Constructor for internal library use only.  Nothing is configured and is intended for serialization.                
            </javadoc>
            <method name="SimpleMatrix" type="constructor" line="183"/>
            <javadoc line="185">
                Creates a new SimpleMatrix with the specified DenseMatrix64F used as its internal matrix.  This means
                  that the reference is saved and calls made to the returned SimpleMatrix will modify the passed in DenseMatrix64F.                
                <param>
                    internalMat The internal DenseMatrix64F of the returned SimpleMatrix. Will be modified.                    
                </param>
            </javadoc>
            <method name="wrap" type="SimpleMatrix" line="191">
                <params>
                    <param name="internalMat" type="DenseMatrix64F"/>
                </params>
                <declaration name="ret" type="SimpleMatrix" line="192"/>
            </method>
            <javadoc line="197">
                Creates a new identity matrix with the specified size.                
                <see>
                    org.ejml.ops.CommonOps#identity(int)                    
                </see>
                <param>
                    width The width and height of the matrix.                    
                </param>
                <return>
                    An identity matrix.                    
                </return>
            </javadoc>
            <method name="identity" type="SimpleMatrix" line="205">
                <params>
                    <param name="width" type="int"/>
                </params>
                <declaration name="ret" type="SimpleMatrix" line="206"/>
            </method>
            <javadoc line="213">
                &lt;p&gt;
                  Creates a matrix where all but the diagonal elements are zero.  The values
                  of the diagonal elements are specified by the parameter &apos;vals&apos;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  To extract the diagonal elements from a matrix see {@link #extractDiag()}.
                  &lt;/p&gt;                
                <see>
                    org.ejml.ops.CommonOps#diag(double)                    
                </see>
                <param>
                    vals The values of the diagonal elements.                    
                </param>
                <return>
                    A diagonal matrix.                    
                </return>
            </javadoc>
            <method name="diag" type="SimpleMatrix" line="228">
                <params>
                    <param name="vals" type="double"/>
                </params>
                <declaration name="m" type="DenseMatrix64F" line="229"/>
                <declaration name="ret" type="SimpleMatrix" line="230"/>
            </method>
            <javadoc line="234">
                &lt;p&gt;
                  Creates a new SimpleMatrix with random elements drawn from a uniform distribution from minValue to maxValue.
                  &lt;/p&gt;                
                <see>
                    org.ejml.ops.RandomMatrices#setRandom(DenseMatrix64F,java.util.Random)                    
                </see>
                <param>
                    numRows The number of rows in the new matrix                    
                </param>
                <param>
                    numCols The number of columns in the new matrix                    
                </param>
                <param>
                    minValue Lower bound                    
                </param>
                <param>
                    maxValue Upper bound                    
                </param>
                <param>
                    rand The random number generator that&apos;s used to fill the matrix.  @return The new random matrix.                    
                </param>
            </javadoc>
            <method name="random" type="SimpleMatrix" line="247">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="minValue" type="double"/>
                    <param name="maxValue" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="ret" type="SimpleMatrix" line="248"/>
            </method>
            <javadoc line="253">
                @inheritdoc                
            </javadoc>
            <method name="createMatrix" type="SimpleMatrix" line="257">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
            </method>
        </class>
    </source>