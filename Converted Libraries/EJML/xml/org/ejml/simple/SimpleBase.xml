<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.simple">
        <import package="org.ejml.alg.dense.mult.VectorVectorMult"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.MatrixIterator"/>
        <import package="org.ejml.data.ReshapeMatrix64F"/>
        <import package="org.ejml.factory.SingularMatrixException"/>
        <import package="org.ejml.ops"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.Serializable"/>
        <class name="SimpleBase" line="12">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="Serializable"/>
            <javadoc line="12">
                Parent of {@link SimpleMatrix} implements all the standard matrix operations and uses
                  generics to allow the returned matrix type to be changed.  This class should be extended
                  instead of SimpleMatrix.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="mat" type="DenseMatrix64F" line="19"/>
            <javadoc line="19">
                Internal matrix which this is a wrapper around.                
            </javadoc>
            <method name="SimpleBase" type="constructor" line="23">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
            </method>
            <method name="SimpleBase" type="constructor" line="26"/>
            <method name="createMatrix" type="T" line="28"/>
            <javadoc line="28">
                Used internally for creating new instances of SimpleMatrix.  If SimpleMatrix is extended
                  by another class this function should be overridden so that the returned matrices are
                  of the correct type.                
                <param>
                    numRows number of rows in the new matrix.                    
                </param>
                <param>
                    numCols number of columns in the new matrix.                    
                </param>
                <return>
                    A new matrix.                    
                </return>
            </javadoc>
            <javadoc line="37">
                &lt;p&gt;
                  Returns a reference to the matrix that it uses internally.  This is useful
                  when an operation is needed that is not provided by this class.
                  &lt;/p&gt;                
                <return>
                    Reference to the internal DenseMatrix64F.                    
                </return>
            </javadoc>
            <method name="getMatrix" type="DenseMatrix64F" line="44"/>
            <javadoc line="47">
                &lt;p&gt;
                  Returns the transpose of this matrix.&lt;br&gt;
                  a&lt;sup&gt;T&lt;/sup&gt;
                  &lt;/p&gt;                
                <see>
                    org.ejml.ops.CommonOps#transpose(DenseMatrix64F,DenseMatrix64F)                    
                </see>
                <return>
                    A matrix that is n by m.                    
                </return>
            </javadoc>
            <method name="transpose" type="T" line="55">
                <declaration name="ret" type="T" line="56"/>
            </method>
            <javadoc line="60">
                &lt;p&gt;
                  Returns a matrix which is the result of matrix multiplication:&lt;br&gt;
                  &lt;br&gt;
                  c = a  b &lt;br&gt;
                  &lt;br&gt;
                  where c is the returned matrix, a is this matrix, and b is the passed in matrix.
                  &lt;/p&gt;                
                <see>
                    CommonOps#mult(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)                    
                </see>
                <param>
                    b A matrix that is n by bn. Not modified.                    
                </param>
                <return>
                    The results of this operation.                    
                </return>
            </javadoc>
            <method name="mult" type="T" line="72">
                <params>
                    <param name="b" type="T"/>
                </params>
                <declaration name="ret" type="T" line="73"/>
            </method>
            <javadoc line="77">
                &lt;p&gt;
                  Computes the Kronecker product between this matrix and the provided B matrix:&lt;br&gt;
                  &lt;br&gt;
                  C = kron(A,B)
                  &lt;/p&gt;                
                <see>
                    CommonOps#kron(DenseMatrix64F,DenseMatrix64F,DenseMatrix64F)                    
                </see>
                <param>
                    B The right matrix in the operation. Not modified.                    
                </param>
                <return>
                    Kronecker product between this matrix and B.                    
                </return>
            </javadoc>
            <method name="kron" type="T" line="87">
                <params>
                    <param name="B" type="T"/>
                </params>
                <declaration name="ret" type="T" line="88"/>
            </method>
            <javadoc line="92">
                &lt;p&gt;
                  Returns the result of matrix addition:&lt;br&gt;
                  &lt;br&gt;
                  c = a + b &lt;br&gt;
                  &lt;br&gt;
                  where c is the returned matrix, a is this matrix, and b is the passed in matrix.
                  &lt;/p&gt;                
                <see>
                    CommonOps#mult(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)                    
                </see>
                <param>
                    b m by n matrix. Not modified.                    
                </param>
                <return>
                    The results of this operation.                    
                </return>
            </javadoc>
            <method name="plus" type="T" line="104">
                <params>
                    <param name="b" type="T"/>
                </params>
                <declaration name="ret" type="T" line="105"/>
            </method>
            <javadoc line="109">
                &lt;p&gt;
                  Returns the result of matrix subtraction:&lt;br&gt;
                  &lt;br&gt;
                  c = a - b &lt;br&gt;
                  &lt;br&gt;
                  where c is the returned matrix, a is this matrix, and b is the passed in matrix.
                  &lt;/p&gt;                
                <see>
                    CommonOps#sub(org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)                    
                </see>
                <param>
                    b m by n matrix. Not modified.                    
                </param>
                <return>
                    The results of this operation.                    
                </return>
            </javadoc>
            <method name="minus" type="T" line="121">
                <params>
                    <param name="b" type="T"/>
                </params>
                <declaration name="ret" type="T" line="122"/>
            </method>
            <javadoc line="126">
                &lt;p&gt;
                  Performs a matrix addition and scale operation.&lt;br&gt;
                  &lt;br&gt;
                  c = a + &amp;beta;b &lt;br&gt;
                  &lt;br&gt;
                  where c is the returned matrix, a is this matrix, and b is the passed in matrix.
                  &lt;/p&gt;                
                <see>
                    CommonOps#add(org.ejml.data.D1Matrix64F,double,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)                    
                </see>
                <param>
                    b m by n matrix. Not modified.                    
                </param>
                <return>
                    A matrix that contains the results.                    
                </return>
            </javadoc>
            <method name="plus" type="T" line="138">
                <params>
                    <param name="beta" type="double"/>
                    <param name="b" type="T"/>
                </params>
                <declaration name="ret" type="T" line="139"/>
            </method>
            <javadoc line="143">
                Computes the dot product (a.k.a. inner product) between this vector and vector &apos;v&apos;.                
                <param>
                    v The second vector in the dot product.  Not modified.                    
                </param>
                <return>
                    dot product                    
                </return>
            </javadoc>
            <method name="dot" type="double" line="148">
                <params>
                    <param name="v" type="T"/>
                </params>
                <scope line="149"/>
                <scope line="152"/>
            </method>
            <javadoc line="157">
                Returns true if this matrix is a vector.  A vector is defined as a matrix
                  that has either one row or column.                
                <return>
                    Returns true for vectors and false otherwise.                    
                </return>
            </javadoc>
            <method name="isVector" type="boolean" line="162"/>
            <javadoc line="165">
                &lt;p&gt;
                  Returns the result of scaling each element by &apos;val&apos;:&lt;br&gt;
                  b&lt;sub&gt;i,j&lt;/sub&gt; = vala&lt;sub&gt;i,j&lt;/sub&gt;
                  &lt;/p&gt;                
                <see>
                    CommonOps#scale(double,org.ejml.data.D1Matrix64F)                    
                </see>
                <param>
                    val The multiplication factor.                    
                </param>
                <return>
                    The scaled matrix.                    
                </return>
            </javadoc>
            <method name="scale" type="T" line="174">
                <params>
                    <param name="val" type="double"/>
                </params>
                <declaration name="ret" type="T" line="175"/>
            </method>
            <javadoc line="179">
                &lt;p&gt;
                  Returns the result of dividing each element by &apos;val&apos;:
                  b&lt;sub&gt;i,j&lt;/sub&gt; = a&lt;sub&gt;i,j&lt;/sub&gt;/val
                  &lt;/p&gt;                
                <see>
                    CommonOps#divide(double,org.ejml.data.D1Matrix64F)                    
                </see>
                <param>
                    val Divisor.                    
                </param>
                <return>
                    Matrix with its elements divided by the specified value.                    
                </return>
            </javadoc>
            <method name="divide" type="T" line="188">
                <params>
                    <param name="val" type="double"/>
                </params>
                <declaration name="ret" type="T" line="189"/>
            </method>
            <javadoc line="193">
                &lt;p&gt;
                  Returns the inverse of this matrix.&lt;br&gt;
                  &lt;br&gt;
                  b = a&lt;sup&gt;-1&lt;sup&gt;&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the matrix could not be inverted then SingularMatrixException is thrown.  Even
                  if no exception is thrown the matrix could still be singular or nearly singular.
                  &lt;/p&gt;                
                <see>
                    CommonOps#invert(DenseMatrix64F,DenseMatrix64F)                    
                </see>
                <throws>
                    org.ejml.factory.SingularMatrixException                    
                </throws>
                <return>
                    The inverse of this matrix.                    
                </return>
            </javadoc>
            <method name="invert" type="T" line="207">
                <declaration name="ret" type="T" line="208"/>
                <scope line="209"/>
            </method>
            <javadoc line="214">
                &lt;p&gt;
                  Computes the Moore-Penrose pseudo-inverse
                  &lt;/p&gt;                
                <return>
                    inverse computed using the pseudo inverse.                    
                </return>
            </javadoc>
            <method name="pseudoInverse" type="T" line="220">
                <declaration name="ret" type="T" line="221"/>
            </method>
            <javadoc line="225">
                &lt;p&gt;
                  Solves for X in the following equation:&lt;br&gt;
                  &lt;br&gt;
                  x = a&lt;sup&gt;-1&lt;/sup&gt;b&lt;br&gt;
                  &lt;br&gt;
                  where &apos;a&apos; is this matrix and &apos;b&apos; is an n by p matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the system could not be solved then SingularMatrixException is thrown.  Even
                  if no exception is thrown &apos;a&apos; could still be singular or nearly singular.
                  &lt;/p&gt;                
                <see>
                    CommonOps#solve(DenseMatrix64F,DenseMatrix64F,DenseMatrix64F)                    
                </see>
                <throws>
                    SingularMatrixException                    
                </throws>
                <param>
                    b n by p matrix. Not modified.                    
                </param>
                <return>
                    The solution for 'x' that is n by p.                    
                </return>
            </javadoc>
            <method name="solve" type="T" line="242">
                <params>
                    <param name="b" type="T"/>
                </params>
                <declaration name="x" type="T" line="243"/>
            </method>
            <javadoc line="247">
                Sets the elements in this matrix to be equal to the elements in the passed in matrix.
                  Both matrix must have the same dimension.                
                <param>
                    a The matrix whose value this matrix is being set to.                    
                </param>
            </javadoc>
            <method name="set" type="void" line="252">
                <params>
                    <param name="a" type="T"/>
                </params>
            </method>
            <javadoc line="255">
                &lt;p&gt;
                  Sets all the elements in this matrix equal to the specified value.&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = val&lt;br&gt;
                  &lt;/p&gt;                
                <see>
                    CommonOps#fill(org.ejml.data.D1Matrix64F,double)                    
                </see>
                <param>
                    val The value each element is set to.                    
                </param>
            </javadoc>
            <method name="set" type="void" line="264">
                <params>
                    <param name="val" type="double"/>
                </params>
            </method>
            <javadoc line="267">
                Sets all the elements in the matrix equal to zero.                
                <see>
                    CommonOps#fill(org.ejml.data.D1Matrix64F,double)                    
                </see>
            </javadoc>
            <method name="zero" type="void" line="271"/>
            <javadoc line="274">
                &lt;p&gt;
                  Computes the Frobenius normal of the matrix:&lt;br&gt;
                  &lt;br&gt;
                  normF = Sqrt{  &amp;sum;&lt;sub&gt;i=1:m&lt;/sub&gt; &amp;sum;&lt;sub&gt;j=1:n&lt;/sub&gt; { a&lt;sub&gt;ij&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;}   }
                  &lt;/p&gt;                
                <see>
                    org.ejml.ops.NormOps#normF(org.ejml.data.D1Matrix64F)                    
                </see>
                <return>
                    The matrix's Frobenius normal.                    
                </return>
            </javadoc>
            <method name="normF" type="double" line="283"/>
            <javadoc line="286">
                &lt;p&gt;
                  The condition p = 2 number of a matrix is used to measure the sensitivity of the linear
                  system &lt;b&gt;Ax=b&lt;/b&gt;.  A value near one indicates that it is a well conditioned matrix.
                  &lt;/p&gt;                
                <see>
                    NormOps#conditionP2(DenseMatrix64F)                    
                </see>
                <return>
                    The condition number.                    
                </return>
            </javadoc>
            <method name="conditionP2" type="double" line="294"/>
            <javadoc line="297">
                Computes the determinant of the matrix.                
                <see>
                    CommonOps#det(DenseMatrix64F)                    
                </see>
                <return>
                    The determinant.                    
                </return>
            </javadoc>
            <method name="determinant" type="double" line="302"/>
            <javadoc line="305">
                &lt;p&gt;
                  Computes the trace of the matrix.
                  &lt;/p&gt;                
                <see>
                    CommonOps#trace(org.ejml.data.RowD1Matrix64F)                    
                </see>
                <return>
                    The trace of the matrix.                    
                </return>
            </javadoc>
            <method name="trace" type="double" line="312"/>
            <javadoc line="315">
                &lt;p&gt;
                  Reshapes the matrix to the specified number of rows and columns.  If the total number of elements
                  is &lt;= number of elements it had before the data is saved.  Otherwise a new internal array is
                  declared and the old data lost.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is equivalent to calling A.getMatrix().reshape(numRows,numCols,false).
                  &lt;/p&gt;                
                <see>
                    org.ejml.data.ReshapeMatrix64F#reshape(int,int,boolean)                    
                </see>
                <param>
                    numRows The new number of rows in the matrix.                    
                </param>
                <param>
                    numCols The new number of columns in the matrix.                    
                </param>
            </javadoc>
            <method name="reshape" type="void" line="328">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
            </method>
            <javadoc line="331">
                Assigns the element in the Matrix to the specified value.  Performs a bounds check to make sure
                  the requested element is part of the matrix.                
                <param>
                    row The row of the element.                    
                </param>
                <param>
                    col The column of the element.                    
                </param>
                <param>
                    value The element's new value.                    
                </param>
            </javadoc>
            <method name="set" type="void" line="338">
                <params>
                    <param name="row" type="int"/>
                    <param name="col" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="341">
                Assigns an element a value based on its index in the internal array..                
                <param>
                    index The matrix element that is being assigned a value.                    
                </param>
                <param>
                    value The element's new value.                    
                </param>
            </javadoc>
            <method name="set" type="void" line="346">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="349">
                &lt;p&gt;
                  Assigns consecutive elements inside a row to the provided array.&lt;br&gt;
                  &lt;br&gt;
                  A(row,offset:(offset + values.length)) = values
                  &lt;/p&gt;                
                <param>
                    row The row that the array is to be written to.                    
                </param>
                <param>
                    offset The initial column that the array is written to.                    
                </param>
                <param>
                    values Values which are to be written to the row in a matrix.                    
                </param>
            </javadoc>
            <method name="setRow" type="void" line="359">
                <params>
                    <param name="row" type="int"/>
                    <param name="offset" type="int"/>
                    <param name="values" type="double"/>
                </params>
                <scope line="360"/>
            </method>
            <javadoc line="364">
                &lt;p&gt;
                  Assigns consecutive elements inside a column to the provided array.&lt;br&gt;
                  &lt;br&gt;
                  A(offset:(offset + values.length),column) = values
                  &lt;/p&gt;                
                <param>
                    column The column that the array is to be written to.                    
                </param>
                <param>
                    offset The initial column that the array is written to.                    
                </param>
                <param>
                    values Values which are to be written to the row in a matrix.                    
                </param>
            </javadoc>
            <method name="setColumn" type="void" line="374">
                <params>
                    <param name="column" type="int"/>
                    <param name="offset" type="int"/>
                    <param name="values" type="double"/>
                </params>
                <scope line="375"/>
            </method>
            <javadoc line="379">
                Returns the value of the specified matrix element.  Performs a bounds check to make sure
                  the requested element is part of the matrix.                
                <param>
                    row The row of the element.                    
                </param>
                <param>
                    col The column of the element.                    
                </param>
                <return>
                    The value of the element.                    
                </return>
            </javadoc>
            <method name="get" type="double" line="386">
                <params>
                    <param name="row" type="int"/>
                    <param name="col" type="int"/>
                </params>
            </method>
            <javadoc line="389">
                Returns the value of the matrix at the specified index of the 1D row major array.                
                <see>
                    org.ejml.data.DenseMatrix64F#get(int)                    
                </see>
                <param>
                    index The element's index whose value is to be returned                    
                </param>
                <return>
                    The value of the specified element.                    
                </return>
            </javadoc>
            <method name="get" type="double" line="395">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="398">
                Returns the index in the matrix&apos;s array.                
                <see>
                    org.ejml.data.DenseMatrix64F#getIndex(int,int)                    
                </see>
                <param>
                    row The row number.                    
                </param>
                <param>
                    col The column number.                    
                </param>
                <return>
                    The index of the specified element.                    
                </return>
            </javadoc>
            <method name="getIndex" type="int" line="405">
                <params>
                    <param name="row" type="int"/>
                    <param name="col" type="int"/>
                </params>
            </method>
            <javadoc line="408">
                Creates a new iterator for traversing through a submatrix inside this matrix.  It can be traversed
                  by row or by column.  Range of elements is inclusive, e.g. minRow = 0 and maxRow = 1 will include rows
                  0 and 1.  The iteration starts at (minRow,minCol) and ends at (maxRow,maxCol)                
                <param>
                    rowMajor true means it will traverse through the submatrix by row first, false by columns.                    
                </param>
                <param>
                    minRow first row it will start at.                    
                </param>
                <param>
                    minCol first column it will start at.                    
                </param>
                <param>
                    maxRow last row it will stop at.                    
                </param>
                <param>
                    maxCol last column it will stop at.                    
                </param>
                <return>
                    A new MatrixIterator                    
                </return>
            </javadoc>
            <method name="iterator" type="MatrixIterator" line="419">
                <params>
                    <param name="rowMajor" type="boolean"/>
                    <param name="minRow" type="int"/>
                    <param name="minCol" type="int"/>
                    <param name="maxRow" type="int"/>
                    <param name="maxCol" type="int"/>
                </params>
            </method>
            <javadoc line="422">
                Creates and returns a matrix which is idential to this one.                
                <return>
                    A new identical matrix.                    
                </return>
            </javadoc>
            <method name="copy" type="T" line="426">
                <declaration name="ret" type="T" line="427"/>
            </method>
            <javadoc line="431">
                Returns the number of rows in this matrix.                
                <return>
                    number of rows.                    
                </return>
            </javadoc>
            <method name="numRows" type="int" line="435"/>
            <javadoc line="438">
                Returns the number of columns in this matrix.                
                <return>
                    number of columns.                    
                </return>
            </javadoc>
            <method name="numCols" type="int" line="442"/>
            <javadoc line="445">
                Returns the number of elements in this matrix, which is equal to
                  the number of rows times the number of columns.                
                <return>
                    The number of elements in the matrix.                    
                </return>
            </javadoc>
            <method name="getNumElements" type="int" line="450"/>
            <javadoc line="453">
                Prints the matrix to standard out.                
            </javadoc>
            <method name="print" type="void" line="456"/>
            <javadoc line="459">
                Prints the matrix to standard out with the specified precision.                
            </javadoc>
            <method name="print" type="void" line="462">
                <params>
                    <param name="numChar" type="int"/>
                    <param name="precision" type="int"/>
                </params>
            </method>
            <javadoc line="465">
                &lt;p&gt;
                  Prints the matrix to standard out given a {@link java.io.PrintStream#printf) style floating point format,
                  e.g. print(&quot;%f&quot;).
                  &lt;/p&gt;}                
            </javadoc>
            <method name="print" type="void" line="471">
                <params>
                    <param name="format" type="String"/>
                </params>
            </method>
            <javadoc line="474">
                &lt;p&gt;
                  Converts the array into a string format for display purposes.
                  The conversion is done using {@link MatrixIO#print(java.io.PrintStream,org.ejml.data.ReshapeMatrix64F)}.
                  &lt;/p&gt;                
                <return>
                    String representation of the matrix.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="481">
                <declaration name="stream" type="ByteArrayOutputStream" line="482"/>
            </method>
            <javadoc line="486">
                &lt;p&gt;
                  Creates a new SimpleMatrix which is a submatrix of this matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  s&lt;sub&gt;i-y0 , j-x0&lt;/sub&gt; = o&lt;sub&gt;ij&lt;/sub&gt; for all y0 &amp;le; i &lt; y1 and x0 &amp;le; j &lt; x1&lt;br&gt;
                  &lt;br&gt;
                  where &apos;s&lt;sub&gt;ij&lt;/sub&gt;&apos; is an element in the submatrix and &apos;o&lt;sub&gt;ij&lt;/sub&gt;&apos; is an element in the
                  original matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If any of the inputs are set to T.END then it will be set to the last row
                  or column in the matrix.
                  &lt;/p&gt;                
                <param>
                    x0 Start column.                    
                </param>
                <param>
                    x1 Stop column.                    
                </param>
                <param>
                    y0 Start row.                    
                </param>
                <param>
                    y1 Stop row.                    
                </param>
                <return>
                    The submatrix.                    
                </return>
            </javadoc>
            <method name="extractMatrix" type="T" line="506">
                <params>
                    <param name="y0" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x0" type="int"/>
                    <param name="x1" type="int"/>
                </params>
                <declaration name="ret" type="T" line="511"/>
            </method>
            <javadoc line="515">
                &lt;p&gt;
                  Extracts a row or column from this matrix. The returned vector will either be a row
                  or column vector depending on the input type.
                  &lt;/p&gt;                
                <param>
                    extractRow If true a row will be extracted.                    
                </param>
                <param>
                    element The row or column the vector is contained in.                    
                </param>
                <return>
                    Extracted vector.                    
                </return>
            </javadoc>
            <method name="extractVector" type="T" line="524">
                <params>
                    <param name="extractRow" type="boolean"/>
                    <param name="element" type="int"/>
                </params>
                <declaration name="length" type="int" line="525"/>
                <declaration name="ret" type="T" line="526"/>
                <scope line="527"/>
                <scope line="530"/>
            </method>
            <javadoc line="535">
                &lt;p&gt;
                  Extracts the diagonal from this matrix and returns them inside a column vector.
                  &lt;/p&gt;                
                <see>
                    org.ejml.ops.CommonOps#extractDiag(DenseMatrix64F,DenseMatrix64F)                    
                </see>
                <return>
                    Diagonal elements inside a column vector.                    
                </return>
            </javadoc>
            <method name="extractDiag" type="T" line="542">
                <declaration name="N" type="int" line="543"/>
                <declaration name="diag" type="T" line="544"/>
            </method>
            <javadoc line="548">
                Checks to see if matrix &apos;a&apos; is the same as this matrix within the specified
                  tolerance.                
                <param>
                    a The matrix it is being compared against.                    
                </param>
                <param>
                    tol How similar they must be to be equals.                    
                </param>
                <return>
                    If they are equal within tolerance of each other.                    
                </return>
            </javadoc>
            <method name="isIdentical" type="boolean" line="555">
                <params>
                    <param name="a" type="T"/>
                    <param name="tol" type="double"/>
                </params>
            </method>
            <javadoc line="558">
                Checks to see if any of the elements in this matrix are either NaN or infinite.                
                <return>
                    True of an element is NaN or infinite.  False otherwise.                    
                </return>
            </javadoc>
            <method name="hasUncountable" type="boolean" line="562"/>
            <javadoc line="565">
                Computes a full Singular Value Decomposition (SVD) of this matrix with the
                  eigenvalues ordered from largest to smallest.                
                <return>
                    SVD                    
                </return>
            </javadoc>
            <method name="svd" type="SimpleSVD" line="570"/>
            <javadoc line="573">
                Computes the SVD in either  compact format or full format.                
                <return>
                    SVD of this matrix.                    
                </return>
            </javadoc>
            <method name="svd" type="SimpleSVD" line="577">
                <params>
                    <param name="compact" type="boolean"/>
                </params>
            </method>
            <javadoc line="580">
                Returns the Eigen Value Decomposition (EVD) of this matrix.                
            </javadoc>
            <method name="eig" type="SimpleEVD" line="583"/>
            <javadoc line="586">
                Copy matrix B into this matrix at location (insertRow, insertCol).                
                <param>
                    insertRow First row the matrix is to be inserted into.                    
                </param>
                <param>
                    insertCol First column the matrix is to be inserted into.                    
                </param>
                <param>
                    B The matrix that is being inserted.                    
                </param>
            </javadoc>
            <method name="insertIntoThis" type="void" line="592">
                <params>
                    <param name="insertRow" type="int"/>
                    <param name="insertCol" type="int"/>
                    <param name="B" type="T"/>
                </params>
            </method>
            <javadoc line="595">
                &lt;p&gt;
                  Creates a new matrix that is a combination of this matrix and matrix B.  B is
                  written into A at the specified location if needed the size of A is increased by
                  growing it.  A is grown by padding the new area with zeros.
                  &lt;/p&gt;
                  &lt;p&gt;
                  While useful when adding data to a matrix which will be solved for it is also much
                  less efficient than predeclaring a matrix and inserting data into it.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If insertRow or insertCol is set to SimpleMatrix.END then it will be combined
                  at the last row or column respectively.
                  &lt;p&gt;                
                <param>
                    insertRow Row where matrix B is written in to.                    
                </param>
                <param>
                    insertCol Column where matrix B is written in to.                    
                </param>
                <param>
                    B The matrix that is written into A.                    
                </param>
                <return>
                    A new combined matrix.                    
                </return>
            </javadoc>
            <method name="combine" type="T" line="614">
                <params>
                    <param name="insertRow" type="int"/>
                    <param name="insertCol" type="int"/>
                    <param name="B" type="T"/>
                </params>
                <scope line="615"/>
                <scope line="618"/>
                <declaration name="maxRow" type="int" line="621"/>
                <declaration name="maxCol" type="int" line="622"/>
                <declaration name="ret" type="T" line="623"/>
                <scope line="624">
                    <declaration name="M" type="int" line="625"/>
                    <declaration name="N" type="int" line="626"/>
                </scope>
                <scope line="630"/>
            </method>
            <javadoc line="636">
                Returns the maximum absolute value of all the elements in this matrix.  This is
                  equivalent the the infinite p-norm of the matrix.                
                <return>
                    Largest absolute value of any element.                    
                </return>
            </javadoc>
            <method name="elementMaxAbs" type="double" line="641"/>
            <javadoc line="644">
                Computes the sum of all the elements in the matrix.                
                <return>
                    Sum of all the elements.                    
                </return>
            </javadoc>
            <method name="elementSum" type="double" line="648"/>
            <javadoc line="651">
                &lt;p&gt;
                  Returns a matrix which is the result of an element by element multiplication of &apos;this&apos; and &apos;b&apos;:
                  c&lt;sub&gt;i,j&lt;/sub&gt; = a&lt;sub&gt;i,j&lt;/sub&gt;b&lt;sub&gt;i,j&lt;/sub&gt;
                  &lt;/p&gt;                
                <param>
                    b A simple matrix.                    
                </param>
                <return>
                    The element by element multiplication of 'this' and 'b'.                    
                </return>
            </javadoc>
            <method name="elementMult" type="T" line="659">
                <params>
                    <param name="b" type="T"/>
                </params>
                <declaration name="c" type="T" line="660"/>
            </method>
            <javadoc line="664">
                &lt;p&gt;
                  Returns a new matrix whose elements are the negative of &apos;this&apos; matrix&apos;s elements.&lt;br&gt;
                  &lt;br&gt;
                  b&lt;sub&gt;ij&lt;/sub&gt; = -a&lt;sub&gt;ij&lt;/sub&gt;
                  &lt;/p&gt;                
                <return>
                    A matrix that is the negative of the original.                    
                </return>
            </javadoc>
            <method name="negative" type="T" line="672">
                <declaration name="A" type="T" line="673"/>
            </method>
            <javadoc line="677">
                &lt;p&gt;
                  Saves this matrix to a file as a serialized binary object.
                  &lt;/p&gt;                
                <see>
                    MatrixIO#saveBin(org.ejml.data.ReshapeMatrix64F,String)                    
                </see>
                <param>
                    fileName                    
                </param>
                <throws>
                    java.io.IOException                    
                </throws>
            </javadoc>
            <method name="saveToFileBinary" type="void" line="685">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <javadoc line="688">
                &lt;p&gt;
                  Loads a new matrix from a serialized binary file.
                  &lt;/p&gt;                
                <see>
                    MatrixIO#loadBin(String)                    
                </see>
                <param>
                    fileName File which is to be loaded.                    
                </param>
                <return>
                    The matrix.                    
                </return>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="loadBinary" type="SimpleMatrix" line="697">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <declaration name="mat" type="ReshapeMatrix64F" line="698"/>
                <scope line="699"/>
                <scope line="702"/>
            </method>
            <javadoc line="706">
                &lt;p&gt;
                  Saves this matrix to a file in a CSV format.  For the file format see {@link MatrixIO}.
                  &lt;/p&gt;                
                <see>
                    MatrixIO#saveBin(org.ejml.data.ReshapeMatrix64F,String)                    
                </see>
                <param>
                    fileName                    
                </param>
                <throws>
                    java.io.IOException                    
                </throws>
            </javadoc>
            <method name="saveToFileCSV" type="void" line="714">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <javadoc line="717">
                &lt;p&gt;
                  Loads a new matrix from a CSV file.  For the file format see {@link MatrixIO}.
                  &lt;/p&gt;                
                <see>
                    MatrixIO#loadCSV(String)                    
                </see>
                <param>
                    fileName File which is to be loaded.                    
                </param>
                <return>
                    The matrix.                    
                </return>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="loadCSV" type="SimpleMatrix" line="726">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <declaration name="mat" type="ReshapeMatrix64F" line="727"/>
                <scope line="728"/>
                <scope line="731"/>
            </method>
            <javadoc line="735">
                Returns true of the specified matrix element is valid element inside this matrix.                
                <param>
                    row Row index.                    
                </param>
                <param>
                    col Column index.                    
                </param>
                <return>
                    true if it is a valid element in the matrix.                    
                </return>
            </javadoc>
            <method name="isInBounds" type="boolean" line="741">
                <params>
                    <param name="row" type="int"/>
                    <param name="col" type="int"/>
                </params>
            </method>
            <javadoc line="744">
                Prints the number of rows and column in this matrix.                
            </javadoc>
            <method name="printDimensions" type="void" line="747"/>
        </class>
    </source>