<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.data">
        <import package="java.util.Iterator"/>
        <class name="MatrixIterator" line="3">
            <implements interface="Iterator">
                <type_params>
                    <type_param name="Double"/>
                </type_params>
            </implements>
            <javadoc line="3">
                This is a matrix iterator for traversing through a submatrix.  For speed it is recommended
                  that you directly access the elements in the matrix, but there are some situations where this
                  can be a better design.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="a" type="ReshapeMatrix64F" line="10"/>
            <declaration name="rowMajor" type="boolean" line="11"/>
            <declaration name="minCol" type="int" line="12"/>
            <declaration name="minRow" type="int" line="13"/>
            <declaration name="index" type="int" line="14"/>
            <declaration name="size" type="int" line="15"/>
            <declaration name="submatrixStride" type="int" line="16"/>
            <declaration name="subRow" type="int" line="17"/>
            <javadoc line="18">
                Creates a new iterator for traversing through a submatrix inside this matrix.  It can be traversed
                  by row or by column.  Range of elements is inclusive, e.g. minRow = 0 and maxRow = 1 will include rows
                  0 and 1.  The iteration starts at (minRow,minCol) and ends at (maxRow,maxCol)                
                <param>
                    a the matrix it is iterating through                    
                </param>
                <param>
                    rowMajor true means it will traverse through the submatrix by row first, false by columns.                    
                </param>
                <param>
                    minRow first row it will start at.                    
                </param>
                <param>
                    minCol first column it will start at.                    
                </param>
                <param>
                    maxRow last row it will stop at.                    
                </param>
                <param>
                    maxCol last column it will stop at.                    
                </param>
                <return>
                    A new MatrixIterator                    
                </return>
            </javadoc>
            <method name="MatrixIterator" type="constructor" line="30">
                <params>
                    <param name="a" type="ReshapeMatrix64F"/>
                    <param name="rowMajor" type="boolean"/>
                    <param name="minRow" type="int"/>
                    <param name="minCol" type="int"/>
                    <param name="maxRow" type="int"/>
                    <param name="maxCol" type="int"/>
                </params>
            </method>
            <method name="hasNext" type="boolean" line="43"/>
            <method name="next" type="Double" line="46">
                <scope line="47"/>
                <scope line="51"/>
            </method>
            <method name="remove" type="void" line="58"/>
            <javadoc line="61">
                Which element in the submatrix was returned by next()                
                <return>
                    Submatrix element's index.                    
                </return>
            </javadoc>
            <method name="getIndex" type="int" line="65"/>
            <javadoc line="68">
                True if it is iterating through the matrix by rows and false if by columns.                
                <return>
                    row major or column major                    
                </return>
            </javadoc>
            <method name="isRowMajor" type="boolean" line="72"/>
            <javadoc line="75">
                Sets the value of the current element.                
                <param>
                    value The element's new value.                    
                </param>
            </javadoc>
            <method name="set" type="void" line="79">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
        </class>
    </source>