<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.factory">
        <import package="org.ejml.data.Matrix64F"/>
        <interface name="LUDecomposition">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="DecompositionInterface">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <javadoc line="3">
                &lt;p&gt;
                  LU Decomposition refactors the original matrix such that:&lt;br&gt;
                  &lt;div align=center&gt; P&lt;sup&gt;T&lt;/sup&gt;LU = A&lt;/div&gt;
                  where P is a pivot matrix, L is a lower triangular matrix, U is an upper triangular matrix and A is
                  the original matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  LU Decomposition is useful since once the decomposition has been performed linear
                  equations can be quickly solved and the original matrix A inverted.  Different algorithms
                  can be selected to perform the decomposition, all will have the same end result.
                  &lt;/p&gt;
                  &lt;p&gt;
                  To use this class first specify the size of the matrix that will be decomposed by it in
                  the constructor.  Only square m by m matrices can be decomposed.  Then to decompose a matrix
                  call {@link #decompose}.  If it encounters any problems an exception will be thrown.  After
                  that all the other functions will be available for solving and inverting matrices.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <method name="getLower" type="T" line="24"/>
            <javadoc line="24">
                &lt;p&gt;
                  Returns the L matrix from the decomposition.  Should only
                  be called after {@link #decompose(org.ejml.data.Matrix64F)} has
                  been called.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If parameter &apos;lower&apos; is not null, then that matrix is used to store the L matrix.  Otherwise
                  a new matrix is created.
                  &lt;/p&gt;                
                <param>
                    lower Storage for T matrix. If null then a new matrix is returned.  Modified.                    
                </param>
                <return>
                    The L matrix.                    
                </return>
            </javadoc>
            <method name="getUpper" type="T" line="38"/>
            <javadoc line="38">
                &lt;p&gt;
                  Returns the U matrix from the decomposition.  Should only
                  be called after {@link #decompose(org.ejml.data.Matrix64F)}  has
                  been called.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If parameter &apos;upper&apos; is not null, then that matrix is used to store the U matrix.  Otherwise
                  a new matrix is created.
                  &lt;/p&gt;                
                <param>
                    upper Storage for U matrix. If null then a new matrix is returned. Modified.                    
                </param>
                <return>
                    The U matrix.                    
                </return>
            </javadoc>
            <method name="getPivot" type="T" line="52"/>
            <javadoc line="52">
                &lt;p&gt;
                  For numerical stability there are often row interchanges.  This computes
                  a pivot matrix that will undo those changes.
                  &lt;/p&gt;                
                <param>
                    pivot Storage for the pivot matrix. If null then a new matrix is returned. Modified.                    
                </param>
                <return>
                    The pivot matrix.                    
                </return>
            </javadoc>
            <method name="isSingular" type="boolean" line="61"/>
            <javadoc line="61">
                Returns true if the decomposition detected a singular matrix.  This check
                  will not work 100% of the time due to machine precision issues.                
                <return>
                    True if the matrix is singular and false if it is not.                    
                </return>
            </javadoc>
            <method name="computeDeterminant" type="double" line="67"/>
            <javadoc line="67">
                Computes the matrix&apos;s determinant using the LU decomposition.                
                <return>
                    The determinant.                    
                </return>
            </javadoc>
        </interface>
    </source>