<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.factory">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.Matrix64F"/>
        <interface name="QRPDecomposition">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="QRDecomposition">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <javadoc line="4">
                &lt;p&gt;
                  Similar to {@link QRDecomposition} but it can handle the rank deficient case by
                  performing column pivots during the decomposition. The final decomposition has the
                  following structure:&lt;br&gt;
                  AP=QR&lt;br&gt;
                  where A is the original matrix, P is a pivot matrix, Q is an orthogonal matrix, and R is
                  upper triangular.
                  &lt;/p&gt;
                  &lt;p&gt;
                  WARNING: You should always call {@link #setSingularThreshold(double)} before {@link #decompose(org.ejml.data.Matrix64F)}.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <method name="setSingularThreshold" type="void" line="19"/>
            <javadoc line="19">
                &lt;p&gt;
                  Specifies the threshold used to flag a column as being singular.  The optimal threshold (if one exists)
                  varies by the matrix being processed.  A reasonable value would be the maximum absolute value of the
                  matrix&apos;s elements multiplied by EPS:&lt;br&gt;
                  decomposition.setSingularThreshold(CommonOps.elementMaxAbs(A)UtilEjml.EPS)
                  &lt;/p&gt;                
                <param>
                    threshold Singular threshold.                    
                </param>
            </javadoc>
            <method name="getRank" type="int" line="29"/>
            <javadoc line="29">
                Returns the rank as determined by the algorithm.  This is dependent upon a fixed threshold
                  and might not be appropriate for some applications.                
                <return>
                    Matrix's rank                    
                </return>
            </javadoc>
            <method name="getPivots" type="int[]" line="35"/>
            <javadoc line="35">
                Ordering of each column after pivoting.   The current column i was original at column pivot[i].                
                <return>
                    Order of columns.                    
                </return>
            </javadoc>
            <method name="getPivotMatrix" type="DenseMatrix64F" line="40"/>
            <javadoc line="40">
                Creates the pivot matrix.                
                <param>
                    P Optional storage for pivot matrix.  If null a new matrix will be created.                    
                </param>
                <return>
                    The pivot matrix.                    
                </return>
            </javadoc>
        </interface>
    </source>