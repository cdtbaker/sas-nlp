<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.factory">
        <import package="org.ejml.EjmlParameters"/>
        <import package="org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionCommon_D64"/>
        <import package="org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionInner_D64"/>
        <import package="org.ejml.alg.dense.decomposition.lu.LUDecompositionAlt_D64"/>
        <import package="org.ejml.alg.dense.decomposition.qr.QRColPivDecompositionHouseholderColumn_D64"/>
        <import package="org.ejml.alg.dense.linsol.AdjustableLinearSolver"/>
        <import package="org.ejml.alg.dense.linsol.chol.LinearSolverChol"/>
        <import package="org.ejml.alg.dense.linsol.chol.LinearSolverCholBlock64"/>
        <import package="org.ejml.alg.dense.linsol.lu.LinearSolverLu"/>
        <import package="org.ejml.alg.dense.linsol.qr"/>
        <import package="org.ejml.alg.dense.linsol.svd.SolvePseudoInverseSvd"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.interfaces.linsol.LinearSolver"/>
        <class name="LinearSolverFactory" line="36">
            <javadoc line="36">
                A factory for generating solvers for systems of the form Ax=b, where A and B are known and x is unknown.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="43">
                Creates a general purpose solver.  Use this if you are not sure what you need.                
                <param>
                    numRows The number of rows that the decomposition is optimized for.                    
                </param>
                <param>
                    numCols The number of columns that the decomposition is optimized for.                    
                </param>
            </javadoc>
            <method name="general" type="LinearSolver&lt;DenseMatrix64F&gt;" line="49">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
            </method>
            <javadoc line="56">
                Creates a solver for linear systems.  The A matrix will have dimensions (m,m).                
                <return>
                    A new linear solver.                    
                </return>
            </javadoc>
            <method name="linear" type="LinearSolver&lt;DenseMatrix64F&gt;" line="61">
                <params>
                    <param name="matrixSize" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Creates a good general purpose solver for over determined systems and returns the optimal least-squares
                  solution.  The A matrix will have dimensions (m,n) where m &amp;ge; n.                
                <param>
                    numRows The number of rows that the decomposition is optimized for.                    
                </param>
                <param>
                    numCols The number of columns that the decomposition is optimized for.                    
                </param>
                <return>
                    A new least-squares solver for over determined systems.                    
                </return>
            </javadoc>
            <method name="leastSquares" type="LinearSolver&lt;DenseMatrix64F&gt;" line="73">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
                <scope line="74"/>
                <scope line="76"/>
            </method>
            <javadoc line="84">
                Creates a solver for symmetric positive definite matrices.                
                <return>
                    A new solver for symmetric positive definite matrices.                    
                </return>
            </javadoc>
            <method name="symmPosDef" type="LinearSolver&lt;DenseMatrix64F&gt;" line="89">
                <params>
                    <param name="matrixWidth" type="int"/>
                </params>
                <scope line="90">
                    <declaration name="decomp" type="CholeskyDecompositionCommon_D64" line="91"/>
                </scope>
                <scope line="93">
                    <scope line="96">
                        <declaration name="decomp" type="CholeskyDecompositionCommon_D64" line="97"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="103">
                &lt;p&gt;
                  Linear solver which uses QR pivot decomposition.  These solvers can handle singular systems
                  and should never fail.  For singular systems, the solution might not be as accurate as a
                  pseudo inverse that uses SVD.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For singular systems there are multiple correct solutions.  The optimal 2-norm solution is the
                  solution vector with the minimal 2-norm and is unique.  If the optimal solution is not computed
                  then the basic solution is returned.  See {@link org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp}for details.  There is only a runtime difference for small matrices, 2-norm solution is slower.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Two different solvers are available.  Compute Q will compute the Q matrix once then use it multiple times.
                  If the solution for a single vector is being found then this should be set to false.  If the pseudo inverse
                  is being found or the solution matrix has more than one columns AND solve is being called numerous multiples
                  times then this should be set to true.
                  &lt;/p&gt;                
                <param>
                    computeNorm2 true to compute the minimum 2-norm solution for singular systems. Try true.                    
                </param>
                <param>
                    computeQ Should it precompute Q or use house holder.  Try false;                    
                </param>
                <return>
                    Pseudo inverse type solver using QR with column pivots.                    
                </return>
            </javadoc>
            <method name="leastSquaresQrPivot" type="LinearSolver&lt;DenseMatrix64F&gt;" line="128">
                <params>
                    <param name="computeNorm2" type="boolean"/>
                    <param name="computeQ" type="boolean"/>
                </params>
                <declaration name="decomposition" type="QRColPivDecompositionHouseholderColumn_D64" line="129"/>
            </method>
            <javadoc line="138">
                &lt;p&gt;
                  Returns a solver which uses the pseudo inverse.  Useful when a matrix
                  needs to be inverted which is singular.  Two variants of pseudo inverse are provided.  SVD
                  will tend to be the most robust but the slowest and QR decomposition with column pivots will
                  be faster, but less robust.
                  &lt;/p&gt;
                  &lt;p&gt;
                  See {@link #leastSquaresQrPivot} for additional options specific to QR decomposition based
                  pseudo inverse.  These options allow for better runtime performance in different situations.
                  &lt;/p&gt;                
                <param>
                    useSVD If true SVD will be used, otherwise QR with column pivot will be used.                    
                </param>
                <return>
                    Solver for singular matrices.                    
                </return>
            </javadoc>
            <method name="pseudoInverse" type="LinearSolver&lt;DenseMatrix64F&gt;" line="154">
                <params>
                    <param name="useSVD" type="boolean"/>
                </params>
            </method>
            <javadoc line="161">
                Create a solver which can efficiently add and remove elements instead of recomputing
                  everything from scratch.                
            </javadoc>
            <method name="adjustable" type="AdjustableLinearSolver" line="165"/>
        </class>
    </source>