<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.factory">
        <import package="org.ejml.EjmlParameters"/>
        <import package="org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionBlock"/>
        <import package="org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionBlock64"/>
        <import package="org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionInner"/>
        <import package="org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionLDL"/>
        <import package="org.ejml.alg.dense.decomposition.eig.SwitchingEigenDecomposition"/>
        <import package="org.ejml.alg.dense.decomposition.eig.SymmetricQRAlgorithmDecomposition"/>
        <import package="org.ejml.alg.dense.decomposition.eig.WatchedDoubleStepQRDecomposition"/>
        <import package="org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecompositionBlock"/>
        <import package="org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecompositionHouseholder"/>
        <import package="org.ejml.alg.dense.decomposition.hessenberg.TridiagonalSimilarDecomposition"/>
        <import package="org.ejml.alg.dense.decomposition.lu.LUDecompositionAlt"/>
        <import package="org.ejml.alg.dense.decomposition.qr.QRColPivDecompositionHouseholderColumn"/>
        <import package="org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderColumn"/>
        <import package="org.ejml.alg.dense.decomposition.svd.SvdImplicitQrDecompose"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.ReshapeMatrix64F"/>
        <import package="org.ejml.ops.EigenOps"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <import package="org.ejml.simple.SimpleMatrix"/>
        <class name="DecompositionFactory" line="22">
            <javadoc line="22">
                &lt;p&gt;
                  Contains operations related to creating and evaluating the quality of common matrix decompositions.  Except
                  in specialized situations, matrix decompositions should be instantiated from this factory instead of being
                  directly constructed.  Low level implementations are more prone to changes and new algorithms will be
                  automatically placed here.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Several functions are also provided to evaluate the quality of a decomposition.  This is provided
                  as a way to sanity check a decomposition.  Often times a significant error in a decomposition will
                  result in a poor (larger) quality value. Typically a quality value of around 1e-15 means it is within
                  machine precision.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="38">
                &lt;p&gt;
                  Returns a {@link CholeskyDecomposition} that has been optimized for the specified matrix size.
                  &lt;/p&gt;                
                <param>
                    matrixSize Number of rows and columns that the returned decomposition is optimized for.                    
                </param>
                <param>
                    lower should a lower or upper triangular matrix be used. If not sure set to true.                    
                </param>
                <return>
                    A new CholeskyDecomposition.                    
                </return>
            </javadoc>
            <method name="chol" type="CholeskyDecomposition<DenseMatrix64F>" line="46">
                <params>
                    <param name="matrixSize" type="int"/>
                    <param name="lower" type="boolean"/>
                </params>
                <scope line="47"/>
                <scope line="50"/>
                <scope line="53"/>
            </method>
            <javadoc line="57">
                &lt;p&gt;
                  Returns a {@link CholeskyDecompositionLDL} that has been optimized for the specified matrix size.
                  &lt;/p&gt;                
                <param>
                    matrixSize Number of rows and columns that the returned decomposition is optimized for.                    
                </param>
                <return>
                    CholeskyDecompositionLDL                    
                </return>
            </javadoc>
            <method name="cholLDL" type="CholeskyDecompositionLDL" line="64">
                <params>
                    <param name="matrixSize" type="int"/>
                </params>
            </method>
            <javadoc line="67">
                &lt;p&gt;
                  Returns a {@link LUDecomposition} that has been optimized for the specified matrix size.
                  &lt;/p&gt;                
                <parm>
                    matrixWidth The matrix size that the decomposition should be optimized for.                    
                </parm>
                <return>
                    LUDecomposition                    
                </return>
            </javadoc>
            <method name="lu" type="LUDecomposition<DenseMatrix64F>" line="74">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCol" type="int"/>
                </params>
            </method>
            <javadoc line="77">
                &lt;p&gt;
                  Returns a {@link SingularValueDecomposition} that has been optimized for the specified matrix size.
                  For improved performance only the portion of the decomposition that the user requests will be computed.
                  &lt;/p&gt;                
                <param>
                    numRows Number of rows the returned decomposition is optimized for.                    
                </param>
                <param>
                    numCols Number of columns that the returned decomposition is optimized for.                    
                </param>
                <param>
                    needU Should it compute the U matrix. If not sure set to true.                    
                </param>
                <param>
                    needV Should it compute the V matrix. If not sure set to true.                    
                </param>
                <param>
                    compact Should it compute the SVD in compact form.  If not sure set to false.                    
                </param>
                <return>
                                        
                </return>
            </javadoc>
            <method name="svd" type="SingularValueDecomposition<DenseMatrix64F>" line="89">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="needU" type="boolean"/>
                    <param name="needV" type="boolean"/>
                    <param name="compact" type="boolean"/>
                </params>
            </method>
            <javadoc line="92">
                &lt;p&gt;
                  Returns a {@link QRDecomposition} that has been optimized for the specified matrix size.
                  &lt;/p&gt;                
                <param>
                    numRows Number of rows the returned decomposition is optimized for.                    
                </param>
                <param>
                    numCols Number of columns that the returned decomposition is optimized for.                    
                </param>
                <return>
                    QRDecomposition                    
                </return>
            </javadoc>
            <method name="qr" type="QRDecomposition<DenseMatrix64F>" line="100">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
            </method>
            <javadoc line="103">
                &lt;p&gt;
                  Returns a {@link QRPDecomposition} that has been optimized for the specified matrix size.
                  &lt;/p&gt;                
                <param>
                    numRows Number of rows the returned decomposition is optimized for.                    
                </param>
                <param>
                    numCols Number of columns that the returned decomposition is optimized for.                    
                </param>
                <return>
                    QRPDecomposition                    
                </return>
            </javadoc>
            <method name="qrp" type="QRPDecomposition<DenseMatrix64F>" line="111">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
            </method>
            <javadoc line="114">
                &lt;p&gt;
                  Returns an {@link EigenDecomposition} that has been optimized for the specified matrix size.
                  If the input matrix is symmetric within tolerance then the symmetric algorithm will be used, otherwise
                  a general purpose eigenvalue decomposition is used.
                  &lt;/p&gt;                
                <param>
                    matrixSize Number of rows and columns that the returned decomposition is optimized for.                    
                </param>
                <param>
                    needVectors Should eigenvectors be computed or not.  If not sure set to true.                    
                </param>
                <return>
                    A new EigenDecomposition                    
                </return>
            </javadoc>
            <method name="eig" type="EigenDecomposition<DenseMatrix64F>" line="124">
                <params>
                    <param name="matrixSize" type="int"/>
                    <param name="needVectors" type="boolean"/>
                </params>
            </method>
            <javadoc line="127">
                &lt;p&gt;
                  Returns an {@link EigenDecomposition} which is specialized for symmetric matrices or the general problem.
                  &lt;/p&gt;                
                <param>
                    matrixSize Number of rows and columns that the returned decomposition is optimized for.                    
                </param>
                <param>
                    computeVectors Should it compute the eigenvectors or just eigenvalues.                    
                </param>
                <param>
                    isSymmetric If true then the returned algorithm is specialized only for symmetric matrices, if false
                      then a general purpose algorithm is returned.                    
                </param>
                <return>
                    EVD for any matrix.                    
                </return>
            </javadoc>
            <method name="eig" type="EigenDecomposition<DenseMatrix64F>" line="137">
                <params>
                    <param name="matrixSize" type="int"/>
                    <param name="computeVectors" type="boolean"/>
                    <param name="isSymmetric" type="boolean"/>
                </params>
                <scope line="138">
                    <declaration name="decomp" type="TridiagonalSimilarDecomposition&lt;DenseMatrix64F&gt;" line="139"/>
                </scope>
            </method>
            <javadoc line="144">
                &lt;p&gt;
                  Computes a metric which measures the the quality of a singular value decomposition.  If a
                  value is returned that is close to or smaller than 1e-15 then it is within machine precision.
                  &lt;/p&gt;
                  &lt;p&gt;
                  SVD quality is defined as:&lt;br&gt;
                  &lt;br&gt;
                  Quality = || A - U W V&lt;sup&gt;T&lt;/sup&gt;|| / || A || &lt;br&gt;
                  where A is the original matrix , U W V is the decomposition, and ||A|| is the norm-f of A.
                  &lt;/p&gt;                
                <param>
                    orig The original matrix which was decomposed. Not modified.                    
                </param>
                <param>
                    svd The decomposition after processing 'orig'. Not modified.                    
                </param>
                <return>
                    The quality of the decomposition.                    
                </return>
            </javadoc>
            <method name="quality" type="double" line="159">
                <params>
                    <param name="orig" type="DenseMatrix64F"/>
                    <param name="svd" type="SingularValueDecomposition<DenseMatrix64F>"/>
                </params>
            </method>
            <method name="quality" type="double" line="162">
                <params>
                    <param name="orig" type="DenseMatrix64F"/>
                    <param name="U" type="DenseMatrix64F"/>
                    <param name="W" type="DenseMatrix64F"/>
                    <param name="Vt" type="DenseMatrix64F"/>
                </params>
                <declaration name="_U" type="SimpleMatrix" line="163"/>
                <declaration name="_W" type="SimpleMatrix" line="164"/>
                <declaration name="_Vt" type="SimpleMatrix" line="165"/>
                <declaration name="foundA" type="SimpleMatrix" line="166"/>
            </method>
            <javadoc line="169">
                &lt;p&gt;
                  Computes a metric which measures the the quality of an eigen value decomposition.  If a
                  value is returned that is close to or smaller than 1e-15 then it is within machine precision.
                  &lt;/p&gt;
                  &lt;p&gt;
                  EVD quality is defined as:&lt;br&gt;
                  &lt;br&gt;
                  Quality = ||AV - VD|| / ||AV||.
                  &lt;/p&gt;                
                <param>
                    orig The original matrix. Not modified.                    
                </param>
                <param>
                    eig EVD of the original matrix. Not modified.                    
                </param>
                <return>
                    The quality of the decomposition.                    
                </return>
            </javadoc>
            <method name="quality" type="double" line="183">
                <params>
                    <param name="orig" type="DenseMatrix64F"/>
                    <param name="eig" type="EigenDecomposition<DenseMatrix64F>"/>
                </params>
                <declaration name="A" type="SimpleMatrix" line="184"/>
                <declaration name="V" type="SimpleMatrix" line="185"/>
                <declaration name="D" type="SimpleMatrix" line="186"/>
                <declaration name="L" type="SimpleMatrix" line="187"/>
                <declaration name="R" type="SimpleMatrix" line="188"/>
                <declaration name="diff" type="SimpleMatrix" line="189"/>
                <declaration name="top" type="double" line="190"/>
                <declaration name="bottom" type="double" line="191"/>
                <declaration name="error" type="double" line="192"/>
            </method>
            <javadoc line="195">
                Checks to see if the passed in tridiagonal decomposition is of the appropriate type
                  for the matrix of the provided size.  Returns the same instance or a new instance.                
                <param>
                    matrixSize Number of rows and columns that the returned decomposition is optimized for.                    
                </param>
            </javadoc>
            <method name="tridiagonal" type="TridiagonalSimilarDecomposition<DenseMatrix64F>" line="200">
                <params>
                    <param name="matrixSize" type="int"/>
                </params>
                <scope line="201"/>
                <scope line="204"/>
            </method>
            <javadoc line="208">
                A simple convinience function that decomposes the matrix but automatically checks the input ti make
                  sure is not being modified.                
                <param>
                    decomp Decomposition which is being wrapped                    
                </param>
                <param>
                    M THe matrix being decomposed.                    
                </param>
                <param>
                    <T>
                      Matrix type.                    
                </param>
                <return>
                    If the decomposition was successful or not.                    
                </return>
            </javadoc>
            <method name="decomposeSafe" type="boolean" line="217">
                <params>
                    <param name="decomp" type="DecompositionInterface<T>"/>
                    <param name="M" type="T"/>
                </params>
                <scope line="218"/>
                <scope line="221"/>
            </method>
        </class>
    </source>