<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.factory">
        <import package="org.ejml.data.Matrix64F"/>
        <interface name="SingularValueDecomposition">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="DecompositionInterface">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <javadoc line="24">
                &lt;p&gt;
                  This is an abstract class for computing the singular value decomposition (SVD) of a matrix, which is defined
                  as:&lt;br&gt;
                  &lt;div align=center&gt; A = U  W  V &lt;sup&gt;T&lt;/sup&gt; &lt;/div&gt;&lt;br&gt;
                  where A is m by n, and U and V are orthogonal matrices, and  W is a diagonal matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The dimension of U,W,V depends if it is a compact SVD or not.  If not compact then U  is m by m, W is  m by n, V is n by n.
                  If compact then let s be the number of singular values, U is m by s, W is s by s, and V is n by s.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Accessor functions for decomposed matrices can return an internally constructed matrix if null is passed in for the
                  optional storage parameter.  The exact behavior is implementation specific.  If an internally maintained matrix is
                  returned then on the next call to decompose the matrix will be modified.  The advantage of this approach is reduced
                  memory overhead.
                  &lt;/p&gt;
                  &lt;p&gt;
                  To create a new instance of SingularValueDecomposition see {@link DecompositionFactory#svd(int,int,boolean,boolean,boolean)}and {@link org.ejml.ops.SingularOps} contains additional helpful SVD related functions.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt; that the ordering of singular values is not guaranteed, unless done so by a specific implementation.
                  The singular values can be put into descending order while adjusting U and V using {@link org.ejml.ops.SingularOps#descendingOrder(org.ejml.data.DenseMatrix64F,boolean,org.ejml.data.DenseMatrix64F,org.ejml.data.DenseMatrix64F,boolean)}  SingularOps.descendingOrder()}.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <method name="getSingularValues" type="double[]" line="59"/>
            <javadoc line="59">
                Returns the singular values.  This is the diagonal elements of the W matrix in the decomposition.
                  &lt;b&gt;Ordering of singular values is not guaranteed.&lt;/b&gt;.                
                <return>
                    Singular values. Note this array can be longer than the number of singular values.
                      Extra elements have no meaning.                    
                </return>
            </javadoc>
            <method name="numberOfSingularValues" type="int" line="68"/>
            <javadoc line="68">
                The number of singular values in the matrix. This is equal to the length of the smallest side.                
                <return>
                    Number of singular values in the matrix.                    
                </return>
            </javadoc>
            <method name="isCompact" type="boolean" line="75"/>
            <javadoc line="75">
                If true then compact matrices are returned.                
                <return>
                    true if results use compact notation.                    
                </return>
            </javadoc>
            <method name="getU" type="T" line="82"/>
            <javadoc line="82">
                &lt;p&gt;
                  Returns the orthogonal &apos;U&apos; matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Internally the SVD algorithm might compute U transposed or it might not.  To avoid an
                  unnecessary double transpose the option is provided to select if the transpose is returned.
                  &lt;/p&gt;                
                <param>
                    U Optional storage for U. If null a new instance or internally maintained matrix is returned.  Modified.                    
                </param>
                <param>
                    transposed If the returned U is transposed.                    
                </param>
                <return>
                    An orthogonal matrix.                    
                </return>
            </javadoc>
            <method name="getV" type="T" line="97"/>
            <javadoc line="97">
                &lt;p&gt;
                  Returns the orthogonal &apos;V&apos; matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Internally the SVD algorithm might compute V transposed or it might not.  To avoid an
                  unnecessary double transpose the option is provided to select if the transpose is returned.
                  &lt;/p&gt;                
                <param>
                    V Optional storage for v. If null a new instance or internally maintained matrix is returned.  Modified.                    
                </param>
                <param>
                    transposed If the returned V is transposed.                    
                </param>
                <return>
                    An orthogonal matrix.                    
                </return>
            </javadoc>
            <method name="getW" type="T" line="113"/>
            <javadoc line="113">
                Returns a diagonal matrix with the singular values.  Order of the singular values
                  is not guaranteed.                
                <param>
                    W Optional storage for W. If null a new instance or internally maintained matrix is returned.  Modified.                    
                </param>
                <return>
                    Diagonal matrix with singular values along the diagonal.                    
                </return>
            </javadoc>
            <method name="numRows" type="int" line="122"/>
            <javadoc line="122">
                Number of rows in the decomposed matrix.                
                <return>
                    Number of rows in the decomposed matrix.                    
                </return>
            </javadoc>
            <method name="numCols" type="int" line="128"/>
            <javadoc line="128">
                Number of columns in the decomposed matrix.                
                <return>
                    Number of columns in the decomposed matrix.                    
                </return>
            </javadoc>
        </interface>
    </source>