<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.EjmlParameters"/>
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.alg.dense.decomposition.lu.LUDecompositionAlt"/>
        <import package="org.ejml.alg.dense.linsol.LinearSolverSafe"/>
        <import package="org.ejml.alg.dense.linsol.lu.LinearSolverLu"/>
        <import package="org.ejml.alg.dense.misc"/>
        <import package="org.ejml.alg.dense.mult.MatrixMatrixMult"/>
        <import package="org.ejml.alg.dense.mult.MatrixMultProduct"/>
        <import package="org.ejml.alg.dense.mult.MatrixVectorMult"/>
        <import package="org.ejml.data.D1Matrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.ReshapeMatrix64F"/>
        <import package="org.ejml.data.RowD1Matrix64F"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.factory.LinearSolverFactory"/>
        <import package="org.ejml.factory.ReducedRowEchelonForm"/>
        <class name="CommonOps" line="18">
            <javadoc line="18">
                &lt;p&gt;
                  Common matrix operations are contained here.  Which specific underlying algorithm is used
                  is not specified just the out come of the operation.  Nor should calls to these functions
                  reply on the underlying implementation.  Which algorithm is used can depend on the matrix
                  being passed in.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For more exotic and specialized generic operations see {@link org.ejml.ops.SpecializedOps}.
                  &lt;/p&gt;                
                <see>
                    org.ejml.alg.dense.mult.MatrixMatrixMult                    
                </see>
                <see>
                    org.ejml.alg.dense.mult.MatrixVectorMult                    
                </see>
                <see>
                    org.ejml.ops.SpecializedOps                    
                </see>
                <see>
                    org.ejml.ops.MatrixFeatures                    
                </see>
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="35">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = a  b &lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt;  b&lt;sub&gt;kj&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="mult" type="void" line="46">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="47"/>
                <scope line="50"/>
                <scope line="53"/>
            </method>
            <javadoc line="57">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = &amp;alpha;  a  b &lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha; &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; {  a&lt;sub&gt;ik&lt;/sub&gt;  b&lt;sub&gt;kj&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    alpha Scaling factor.                    
                </param>
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="mult" type="void" line="69">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="70"/>
                <scope line="73"/>
            </method>
            <javadoc line="77">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = a&lt;sup&gt;T&lt;/sup&gt;  b &lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt;  b&lt;sub&gt;kj&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multTransA" type="void" line="88">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="89">
                    <scope line="90"/>
                    <scope line="93"/>
                </scope>
                <scope line="97"/>
                <scope line="100"/>
            </method>
            <javadoc line="104">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = &amp;alpha;  a&lt;sup&gt;T&lt;/sup&gt;  b &lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha; &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt;  b&lt;sub&gt;kj&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    alpha Scaling factor.                    
                </param>
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multTransA" type="void" line="116">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="117"/>
                <scope line="120"/>
            </method>
            <javadoc line="124">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = a  b&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt;  b&lt;sub&gt;jk&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multTransB" type="void" line="135">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="136"/>
                <scope line="139"/>
            </method>
            <javadoc line="143">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c =  &amp;alpha;  a  b&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha; &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; {  a&lt;sub&gt;ik&lt;/sub&gt;  b&lt;sub&gt;jk&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    alpha Scaling factor.                    
                </param>
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multTransB" type="void" line="155">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
            </method>
            <javadoc line="158">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = a&lt;sup&gt;T&lt;/sup&gt;  b&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt;  b&lt;sub&gt;jk&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multTransAB" type="void" line="169">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="170">
                    <scope line="171"/>
                    <scope line="174"/>
                </scope>
                <scope line="178"/>
                <scope line="181"/>
            </method>
            <javadoc line="185">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = &amp;alpha;  a&lt;sup&gt;T&lt;/sup&gt;  b&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha; &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt;  b&lt;sub&gt;jk&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    alpha Scaling factor.                    
                </param>
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multTransAB" type="void" line="197">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="198"/>
                <scope line="201"/>
            </method>
            <javadoc line="205">
                &lt;p&gt;Computes the matrix multiplication inner product:&lt;br&gt;
                  &lt;br&gt;
                  c = a&lt;sup&gt;T&lt;/sup&gt;  a &lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt;  a&lt;sub&gt;kj&lt;/sub&gt;}
                  &lt;/p&gt;
                  &lt;p&gt;
                  Is faster than using a generic matrix multiplication by taking advantage of symmetry.  For
                  vectors there is an even faster option, see {@link org.ejml.alg.dense.mult.VectorVectorMult#innerProd(org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}&lt;/p&gt;                
                <param>
                    a The matrix being multiplied. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multInner" type="void" line="218">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="220"/>
                <scope line="223"/>
            </method>
            <javadoc line="227">
                &lt;p&gt;Computes the matrix multiplication outer product:&lt;br&gt;
                  &lt;br&gt;
                  c = a  a&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:m&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt;  a&lt;sub&gt;jk&lt;/sub&gt;}
                  &lt;/p&gt;
                  &lt;p&gt;
                  Is faster than using a generic matrix multiplication by taking advantage of symmetry.
                  &lt;/p&gt;                
                <param>
                    a The matrix being multiplied. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multOuter" type="void" line="240">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
            </method>
            <javadoc line="244">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = c + a  b&lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = c&lt;sub&gt;ij&lt;/sub&gt; + &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt;  b&lt;sub&gt;kj&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multAdd" type="void" line="255">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="256"/>
                <scope line="259">
                    <scope line="260"/>
                    <scope line="263"/>
                </scope>
            </method>
            <javadoc line="268">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = c + &amp;alpha;  a  b&lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = c&lt;sub&gt;ij&lt;/sub&gt; +  &amp;alpha;  &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt;  b&lt;sub&gt;kj&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    alpha scaling factor.                    
                </param>
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multAdd" type="void" line="280">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="281"/>
                <scope line="284"/>
            </method>
            <javadoc line="288">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = c + a&lt;sup&gt;T&lt;/sup&gt;  b&lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = c&lt;sub&gt;ij&lt;/sub&gt; + &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt;  b&lt;sub&gt;kj&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multAddTransA" type="void" line="299">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="300">
                    <scope line="301"/>
                    <scope line="304"/>
                </scope>
                <scope line="308">
                    <scope line="309"/>
                    <scope line="312"/>
                </scope>
            </method>
            <javadoc line="317">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = c + &amp;alpha;  a&lt;sup&gt;T&lt;/sup&gt;  b&lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; =c&lt;sub&gt;ij&lt;/sub&gt; +  &amp;alpha;  &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt;  b&lt;sub&gt;kj&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    alpha scaling factor                    
                </param>
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multAddTransA" type="void" line="329">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="330"/>
                <scope line="333"/>
            </method>
            <javadoc line="337">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = c + a  b&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = c&lt;sub&gt;ij&lt;/sub&gt; + &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt;  b&lt;sub&gt;jk&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multAddTransB" type="void" line="348">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
            </method>
            <javadoc line="351">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = c + &amp;alpha;  a  b&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = c&lt;sub&gt;ij&lt;/sub&gt; + &amp;alpha;  &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt;  b&lt;sub&gt;jk&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    alpha Scaling factor.                    
                </param>
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multAddTransB" type="void" line="363">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
            </method>
            <javadoc line="366">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = c + a&lt;sup&gt;T&lt;/sup&gt;  b&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = c&lt;sub&gt;ij&lt;/sub&gt; + &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt;  b&lt;sub&gt;jk&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the multiplication operation. Not Modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not Modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multAddTransAB" type="void" line="377">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="378">
                    <scope line="379"/>
                    <scope line="382"/>
                </scope>
                <scope line="386"/>
                <scope line="389"/>
            </method>
            <javadoc line="393">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = c + &amp;alpha;  a&lt;sup&gt;T&lt;/sup&gt;  b&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = c&lt;sub&gt;ij&lt;/sub&gt; + &amp;alpha;  &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt;  b&lt;sub&gt;jk&lt;/sub&gt;}
                  &lt;/p&gt;                
                <param>
                    alpha Scaling factor.                    
                </param>
                <param>
                    a The left matrix in the multiplication operation. Not Modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not Modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="multAddTransAB" type="void" line="405">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="RowD1Matrix64F"/>
                    <param name="c" type="RowD1Matrix64F"/>
                </params>
                <scope line="406"/>
                <scope line="409"/>
            </method>
            <javadoc line="413">
                &lt;p&gt;
                  Solves for x in the following equation:&lt;br&gt;
                  &lt;br&gt;
                  Ax = b
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the system could not be solved then false is returned.  If it returns true
                  that just means the algorithm finished operating, but the results could still be bad
                  because &apos;A&apos; is singular or nearly singular.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If repeat calls to solve are being made then one should consider using {@link LinearSolverFactory}instead.
                  &lt;/p&gt;
                  &lt;p&gt;
                  It is ok for &apos;b&apos; and &apos;x&apos; to be the same matrix.
                  &lt;/p&gt;                
                <param>
                    a A matrix that is m by m. Not modified.                    
                </param>
                <param>
                    b A matrix that is m by n. Not modified.                    
                </param>
                <param>
                    x A matrix that is m by n. Modified.                    
                </param>
                <return>
                    true if it could invert the matrix false if it could not.                    
                </return>
            </javadoc>
            <method name="solve" type="boolean" line="435">
                <params>
                    <param name="a" type="DenseMatrix64F"/>
                    <param name="b" type="DenseMatrix64F"/>
                    <param name="x" type="DenseMatrix64F"/>
                </params>
                <declaration name="solver" type="LinearSolver&lt;DenseMatrix64F&gt;" line="436"/>
            </method>
            <javadoc line="442">
                Performs an in-place transpose.  This algorithm is only efficient for square
                  matrices.                
                <param>
                    mat The matrix that is to be transposed. Modified.                    
                </param>
            </javadoc>
            <method name="transpose" type="void" line="447">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                </params>
                <scope line="448"/>
                <scope line="451">
                    <declaration name="b" type="DenseMatrix64F" line="452"/>
                </scope>
            </method>
            <javadoc line="457">
                &lt;p&gt;
                  Transposes matrix &apos;a&apos; and stores the results in &apos;b&apos;:&lt;br&gt;
                  &lt;br&gt;
                  b&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ji&lt;/sub&gt;&lt;br&gt;
                  where &apos;b&apos; is the transpose of &apos;a&apos;.
                  &lt;/p&gt;                
                <param>
                    A The original matrix.  Not modified.                    
                </param>
                <param>
                    A_tran Where the transpose is stored. If null a new matrix is created. Modified.                    
                </param>
                <return>
                    The transposed matrix.                    
                </return>
            </javadoc>
            <method name="transpose" type="DenseMatrix64F" line="468">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="A_tran" type="DenseMatrix64F"/>
                </params>
                <scope line="469"/>
                <scope line="472">
                    <scope line="473"/>
                </scope>
            </method>
            <javadoc line="481">
                &lt;p&gt;
                  This computes the trace of the matrix:&lt;br&gt;
                  &lt;br&gt;
                  trace = &amp;sum;&lt;sub&gt;i=1:n&lt;/sub&gt; { a&lt;sub&gt;ii&lt;/sub&gt; }
                  &lt;/p&gt;
                  &lt;p&gt;
                  The trace is only defined for square matrices.
                  &lt;/p&gt;                
                <param>
                    a A square matrix.  Not modified.                    
                </param>
            </javadoc>
            <method name="trace" type="double" line="492">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                </params>
                <scope line="493"/>
                <declaration name="sum" type="double" line="496"/>
                <declaration name="index" type="int" line="497"/>
                <scope line="498"/>
            </method>
            <javadoc line="504">
                Returns the determinant of the matrix.  If the inverse of the matrix is also
                  needed, then using {@link org.ejml.alg.dense.decomposition.lu.LUDecompositionAlt} directly (or any
                  similar algorithm) can be more efficient.                
                <param>
                    mat The matrix whose determinant is to be computed.  Not modified.                    
                </param>
                <return>
                    The determinant.                    
                </return>
            </javadoc>
            <method name="det" type="double" line="511">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                </params>
                <declaration name="numCol" type="int" line="512"/>
                <declaration name="numRow" type="int" line="513"/>
                <scope line="514"/>
                <scope line="517">
                    <scope line="518"/>
                    <scope line="521"/>
                </scope>
                <scope line="525">
                    <declaration name="alg" type="LUDecompositionAlt" line="526"/>
                    <scope line="527"/>
                </scope>
            </method>
            <javadoc line="534">
                &lt;p&gt;
                  Performs a matrix inversion operation on the specified matrix and stores the results
                  in the same matrix.&lt;br&gt;
                  &lt;br&gt;
                  a = a&lt;sup&gt;-1&lt;sup&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the algorithm could not invert the matrix then false is returned.  If it returns true
                  that just means the algorithm finished.  The results could still be bad
                  because the matrix is singular or nearly singular.
                  &lt;/p&gt;                
                <param>
                    mat The matrix that is to be inverted.  Results are stored here.  Modified.                    
                </param>
                <return>
                    true if it could invert the matrix false if it could not.                    
                </return>
            </javadoc>
            <method name="invert" type="boolean" line="549">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                </params>
                <scope line="550">
                    <scope line="551"/>
                    <scope line="554"/>
                    <scope line="557"/>
                </scope>
                <scope line="561">
                    <declaration name="alg" type="LUDecompositionAlt" line="562"/>
                    <declaration name="solver" type="LinearSolverLu" line="563"/>
                    <scope line="564"/>
                    <scope line="567"/>
                </scope>
            </method>
            <javadoc line="573">
                &lt;p&gt;
                  Performs a matrix inversion operation that does not modify the original
                  and stores the results in another matrix.  The two matrices must have the
                  same dimension.&lt;br&gt;
                  &lt;br&gt;
                  b = a&lt;sup&gt;-1&lt;sup&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the algorithm could not invert the matrix then false is returned.  If it returns true
                  that just means the algorithm finished.  The results could still be bad
                  because the matrix is singular or nearly singular.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For medium to large matrices there might be a slight performance boost to using{@link LinearSolverFactory} instead.
                  &lt;/p&gt;                
                <param>
                    mat The matrix that is to be inverted. Not modified.                    
                </param>
                <param>
                    result Where the inverse matrix is stored.  Modified.                    
                </param>
                <return>
                    true if it could invert the matrix false if it could not.                    
                </return>
            </javadoc>
            <method name="invert" type="boolean" line="593">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                    <param name="result" type="DenseMatrix64F"/>
                </params>
                <scope line="594">
                    <scope line="595"/>
                    <scope line="598"/>
                    <scope line="601"/>
                </scope>
                <scope line="605">
                    <declaration name="alg" type="LUDecompositionAlt" line="606"/>
                    <declaration name="solver" type="LinearSolverLu" line="607"/>
                </scope>
            </method>
            <javadoc line="614">
                &lt;p&gt;
                  Computes the Moore-Penrose pseudo-inverse:&lt;br&gt;
                  &lt;br&gt;
                  pinv(A) = (A&lt;sup&gt;T&lt;/sup&gt;A)&lt;sup&gt;-1&lt;/sup&gt; A&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  or&lt;br&gt;
                  pinv(A) = A&lt;sup&gt;T&lt;/sup&gt;(AA&lt;sup&gt;T&lt;/sup&gt;)&lt;sup&gt;-1&lt;/sup&gt;&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Internally it uses {@link org.ejml.alg.dense.linsol.svd.SolvePseudoInverseSvd} to compute the inverse.  For performance reasons, this should only
                  be used when a matrix is singular or nearly singular.
                  &lt;/p&gt;                
                <param>
                    A  A m by n Matrix.  Not modified.                    
                </param>
                <param>
                    invA Where the computed pseudo inverse is stored. n by m.  Modified.                    
                </param>
                <return>
                                        
                </return>
            </javadoc>
            <method name="pinv" type="void" line="630">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="invA" type="DenseMatrix64F"/>
                </params>
                <declaration name="solver" type="LinearSolver&lt;DenseMatrix64F&gt;" line="631"/>
            </method>
            <javadoc line="636">
                Converts the columns in a matrix into a set of vectors.                
                <param>
                    A Matrix.  Not modified.                    
                </param>
                <param>
                    v                    
                </param>
                <return>
                    An array of vectors.                    
                </return>
            </javadoc>
            <method name="columnsToVector" type="DenseMatrix64F[]" line="642">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="v" type="DenseMatrix64F[]"/>
                </params>
                <declaration name="ret" type="DenseMatrix64F[]" line="643"/>
                <scope line="644"/>
                <scope line="647"/>
                <scope line="650">
                    <scope line="651"/>
                    <scope line="654"/>
                    <declaration name="u" type="DenseMatrix64F" line="657"/>
                    <scope line="658"/>
                </scope>
            </method>
            <javadoc line="664">
                Converts the rows in a matrix into a set of vectors.                
                <param>
                    A Matrix.  Not modified.                    
                </param>
                <param>
                    v                    
                </param>
                <return>
                    An array of vectors.                    
                </return>
            </javadoc>
            <method name="rowsToVector" type="DenseMatrix64F[]" line="670">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="v" type="DenseMatrix64F[]"/>
                </params>
                <declaration name="ret" type="DenseMatrix64F[]" line="671"/>
                <scope line="672"/>
                <scope line="675"/>
                <scope line="678">
                    <scope line="679"/>
                    <scope line="682"/>
                    <declaration name="u" type="DenseMatrix64F" line="685"/>
                    <scope line="686"/>
                </scope>
            </method>
            <javadoc line="692">
                Sets all the diagonal elements equal to one and everything else equal to zero.
                  If this is a square matrix then it will be an identity matrix.                
                <see>
                    #identity(int)                    
                </see>
                <param>
                    mat A square matrix.                    
                </param>
            </javadoc>
            <method name="setIdentity" type="void" line="698">
                <params>
                    <param name="mat" type="RowD1Matrix64F"/>
                </params>
                <declaration name="width" type="int" line="699"/>
                <declaration name="length" type="int" line="700"/>
                <scope line="701"/>
                <declaration name="index" type="int" line="704"/>
                <scope line="705"/>
            </method>
            <javadoc line="709">
                &lt;p&gt;
                  Creates an identity matrix of the specified size.&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = 0   if i &amp;ne; j&lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = 1   if i = j&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    width The width and height of the identity matrix.                    
                </param>
                <return>
                    A new instance of an identity matrix.                    
                </return>
            </javadoc>
            <method name="identity" type="DenseMatrix64F" line="719">
                <params>
                    <param name="width" type="int"/>
                </params>
                <declaration name="ret" type="DenseMatrix64F" line="720"/>
                <scope line="721"/>
            </method>
            <javadoc line="726">
                Creates a rectangular matrix which is zero except along the diagonals.                
                <param>
                    numRows Number of rows in the matrix.                    
                </param>
                <param>
                    numCols NUmber of columns in the matrix.                    
                </param>
                <return>
                    A matrix with diagonal elements equal to one.                    
                </return>
            </javadoc>
            <method name="identity" type="DenseMatrix64F" line="732">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
                <declaration name="ret" type="DenseMatrix64F" line="733"/>
                <declaration name="small" type="int" line="734"/>
                <scope line="735"/>
            </method>
            <javadoc line="740">
                &lt;p&gt;
                  Creates a new square matrix whose diagonal elements are specified by diagEl and all
                  the other elements are zero.&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = 0         if i &amp;le; j&lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = diag[i]   if i = j&lt;br&gt;
                  &lt;/p&gt;                
                <see>
                    #diagR                    
                </see>
                <param>
                    diagEl Contains the values of the diagonal elements of the resulting matrix.                    
                </param>
                <return>
                    A new matrix.                    
                </return>
            </javadoc>
            <method name="diag" type="DenseMatrix64F" line="752">
                <params>
                    <param name="diagEl" type="double"/>
                </params>
            </method>
            <method name="diag" type="DenseMatrix64F" line="755">
                <params>
                    <param name="ret" type="DenseMatrix64F"/>
                    <param name="width" type="int"/>
                    <param name="diagEl" type="double"/>
                </params>
                <scope line="756"/>
                <scope line="759"/>
                <scope line="763"/>
            </method>
            <javadoc line="768">
                &lt;p&gt;
                  Creates a new rectangular matrix whose diagonal elements are specified by diagEl and all
                  the other elements are zero.&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = 0         if i &amp;le; j&lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = diag[i]   if i = j&lt;br&gt;
                  &lt;/p&gt;                
                <see>
                    #diag                    
                </see>
                <param>
                    numRows Number of rows in the matrix.                    
                </param>
                <param>
                    numCols Number of columns in the matrix.                    
                </param>
                <param>
                    diagEl Contains the values of the diagonal elements of the resulting matrix.                    
                </param>
                <return>
                    A new matrix.                    
                </return>
            </javadoc>
            <method name="diagR" type="DenseMatrix64F" line="782">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="diagEl" type="double"/>
                </params>
                <declaration name="ret" type="DenseMatrix64F" line="783"/>
                <declaration name="o" type="int" line="784"/>
                <scope line="785"/>
            </method>
            <javadoc line="790">
                &lt;p&gt;
                  The Kronecker product of two matrices is defined as:&lt;br&gt;
                  C&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt;B&lt;br&gt;
                  where C&lt;sub&gt;ij&lt;/sub&gt; is a sub matrix inside of C &amp;isin; &amp;real; &lt;sup&gt;mk &amp;times; nl&lt;/sup&gt;,
                  A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;, and B &amp;isin; &amp;real; &lt;sup&gt;k &amp;times; l&lt;/sup&gt;.
                  &lt;/p&gt;                
                <param>
                    A The left matrix in the operation. Not modified.                    
                </param>
                <param>
                    B The right matrix in the operation. Not modified.                    
                </param>
                <param>
                    C Where the results of the operation are stored. Modified.                    
                </param>
                <return>
                    The results of the operation.                    
                </return>
            </javadoc>
            <method name="kron" type="void" line="802">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="C" type="DenseMatrix64F"/>
                </params>
                <declaration name="numColsC" type="int" line="803"/>
                <declaration name="numRowsC" type="int" line="804"/>
                <scope line="805"/>
                <scope line="808">
                    <scope line="809">
                        <declaration name="a" type="double" line="810"/>
                        <scope line="811">
                            <scope line="812">
                                <declaration name="val" type="double" line="813"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="820">
                &lt;p&gt;
                  Extracts a submatrix from &apos;src&apos; and inserts it in a submatrix in &apos;dst&apos;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  s&lt;sub&gt;i-y0 , j-x0&lt;/sub&gt; = o&lt;sub&gt;ij&lt;/sub&gt; for all y0 &amp;le; i &lt; y1 and x0 &amp;le; j &lt; x1 &lt;br&gt;
                  &lt;br&gt;
                  where &apos;s&lt;sub&gt;ij&lt;/sub&gt;&apos; is an element in the submatrix and &apos;o&lt;sub&gt;ij&lt;/sub&gt;&apos; is an element in the
                  original matrix.
                  &lt;/p&gt;                
                <param>
                    src The original matrix which is to be copied.  Not modified.                    
                </param>
                <param>
                    srcX0 Start column.                    
                </param>
                <param>
                    srcX1 Stop column+1.                    
                </param>
                <param>
                    srcY0 Start row.                    
                </param>
                <param>
                    srcY1 Stop row+1.                    
                </param>
                <param>
                    dst Where the submatrix are stored.  Modified.                    
                </param>
                <param>
                    dstY0 Start row in dst.                    
                </param>
                <param>
                    dstX0 start column in dst.                    
                </param>
            </javadoc>
            <method name="extract" type="void" line="839">
                <params>
                    <param name="src" type="ReshapeMatrix64F"/>
                    <param name="srcY0" type="int"/>
                    <param name="srcY1" type="int"/>
                    <param name="srcX0" type="int"/>
                    <param name="srcX1" type="int"/>
                    <param name="dst" type="ReshapeMatrix64F"/>
                    <param name="dstY0" type="int"/>
                    <param name="dstX0" type="int"/>
                </params>
                <declaration name="w" type="int" line="842"/>
                <declaration name="h" type="int" line="843"/>
                <scope line="846"/>
                <scope line="849"/>
            </method>
            <javadoc line="853">
                &lt;p&gt;
                  Creates a new matrix which is the specified submatrix of &apos;src&apos;
                  &lt;/p&gt;
                  &lt;p&gt;
                  s&lt;sub&gt;i-y0 , j-x0&lt;/sub&gt; = o&lt;sub&gt;ij&lt;/sub&gt; for all y0 &amp;le; i &lt; y1 and x0 &amp;le; j &lt; x1 &lt;br&gt;
                  &lt;br&gt;
                  where &apos;s&lt;sub&gt;ij&lt;/sub&gt;&apos; is an element in the submatrix and &apos;o&lt;sub&gt;ij&lt;/sub&gt;&apos; is an element in the
                  original matrix.
                  &lt;/p&gt;                
                <param>
                    src The original matrix which is to be copied.  Not modified.                    
                </param>
                <param>
                    srcX0 Start column.                    
                </param>
                <param>
                    srcX1 Stop column+1.                    
                </param>
                <param>
                    srcY0 Start row.                    
                </param>
                <param>
                    srcY1 Stop row+1.                    
                </param>
                <return>
                    Extracted submatrix.                    
                </return>
            </javadoc>
            <method name="extract" type="DenseMatrix64F" line="870">
                <params>
                    <param name="src" type="DenseMatrix64F"/>
                    <param name="srcY0" type="int"/>
                    <param name="srcY1" type="int"/>
                    <param name="srcX0" type="int"/>
                    <param name="srcX1" type="int"/>
                </params>
                <declaration name="w" type="int" line="873"/>
                <declaration name="h" type="int" line="874"/>
                <declaration name="dst" type="DenseMatrix64F" line="875"/>
            </method>
            <javadoc line="879">
                &lt;p&gt;
                  Extracts the diagonal elements &apos;src&apos; write it to the &apos;dst&apos; vector.  &apos;dst&apos;
                  can either be a row or column vector.
                  &lt;p&gt;                
                <param>
                    src Matrix whose diagonal elements are being extracted. Not modified.                    
                </param>
                <param>
                    dst A vector the results will be written into. Modified.                    
                </param>
            </javadoc>
            <method name="extractDiag" type="void" line="887">
                <params>
                    <param name="src" type="DenseMatrix64F"/>
                    <param name="dst" type="DenseMatrix64F"/>
                </params>
                <declaration name="N" type="int" line="888"/>
                <scope line="889"/>
                <scope line="892"/>
                <scope line="895"/>
            </method>
            <javadoc line="899">
                Inserts matrix &apos;src&apos; into matrix &apos;dest&apos; with the (0,0) of src at (row,col) in dest.
                  This is equivalent to calling extract(src,0,src.numRows,0,src.numCols,dest,destY0,destX0).                
                <param>
                    src matrix that is being copied into dest. Not modified.                    
                </param>
                <param>
                    dest Where src is being copied into. Modified.                    
                </param>
                <param>
                    destY0 Start row for the copy into dest.                    
                </param>
                <param>
                    destX0 Start column for the copy into dest.                    
                </param>
            </javadoc>
            <method name="insert" type="void" line="907">
                <params>
                    <param name="src" type="ReshapeMatrix64F"/>
                    <param name="dest" type="ReshapeMatrix64F"/>
                    <param name="destY0" type="int"/>
                    <param name="destX0" type="int"/>
                </params>
            </method>
            <javadoc line="910">
                &lt;p&gt;
                  Returns the value of the element in the matrix that has the largest value.&lt;br&gt;
                  &lt;br&gt;
                  Max{ a&lt;sub&gt;ij&lt;/sub&gt; } for all i and j&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a A matrix. Not modified.                    
                </param>
                <return>
                    The max element value of the matrix.                    
                </return>
            </javadoc>
            <method name="elementMax" type="double" line="919">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="size" type="int" line="920"/>
                <declaration name="max" type="double" line="921"/>
                <scope line="922">
                    <declaration name="val" type="double" line="923"/>
                    <scope line="924"/>
                </scope>
            </method>
            <javadoc line="930">
                &lt;p&gt;
                  Returns the absolute value of the element in the matrix that has the largest absolute value.&lt;br&gt;
                  &lt;br&gt;
                  Max{ |a&lt;sub&gt;ij&lt;/sub&gt;| } for all i and j&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a A matrix. Not modified.                    
                </param>
                <return>
                    The max abs element value of the matrix.                    
                </return>
            </javadoc>
            <method name="elementMaxAbs" type="double" line="939">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="size" type="int" line="940"/>
                <declaration name="max" type="double" line="941"/>
                <scope line="942">
                    <declaration name="val" type="double" line="943"/>
                    <scope line="944"/>
                </scope>
            </method>
            <javadoc line="950">
                &lt;p&gt;
                  Returns the value of the element in the matrix that has the minimum value.&lt;br&gt;
                  &lt;br&gt;
                  Min{ a&lt;sub&gt;ij&lt;/sub&gt; } for all i and j&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a A matrix. Not modified.                    
                </param>
                <return>
                    The value of element in the matrix with the minimum value.                    
                </return>
            </javadoc>
            <method name="elementMin" type="double" line="959">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="size" type="int" line="960"/>
                <declaration name="min" type="double" line="961"/>
                <scope line="962">
                    <declaration name="val" type="double" line="963"/>
                    <scope line="964"/>
                </scope>
            </method>
            <javadoc line="970">
                &lt;p&gt;
                  Returns the absolute value of the element in the matrix that has the smallest absolute value.&lt;br&gt;
                  &lt;br&gt;
                  Min{ |a&lt;sub&gt;ij&lt;/sub&gt;| } for all i and j&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a A matrix. Not modified.                    
                </param>
                <return>
                    The max element value of the matrix.                    
                </return>
            </javadoc>
            <method name="elementMinAbs" type="double" line="979">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="size" type="int" line="980"/>
                <declaration name="min" type="double" line="981"/>
                <scope line="982">
                    <declaration name="val" type="double" line="983"/>
                    <scope line="984"/>
                </scope>
            </method>
            <javadoc line="990">
                &lt;p&gt;Performs the an element by element multiplication operation:&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt;  b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the multiplication operation. Modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
            </javadoc>
            <method name="elementMult" type="void" line="998">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <scope line="999"/>
                <declaration name="length" type="int" line="1002"/>
                <scope line="1003"/>
            </method>
            <javadoc line="1007">
                &lt;p&gt;Performs the an element by element multiplication operation:&lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt;  b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the multiplication operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="elementMult" type="void" line="1016">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="c" type="D1Matrix64F"/>
                </params>
                <scope line="1017"/>
                <declaration name="length" type="int" line="1020"/>
                <scope line="1021"/>
            </method>
            <javadoc line="1025">
                &lt;p&gt;Performs the an element by element division operation:&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; / b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the division operation. Modified.                    
                </param>
                <param>
                    b The right matrix in the division operation. Not modified.                    
                </param>
            </javadoc>
            <method name="elementDiv" type="void" line="1033">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <scope line="1034"/>
                <declaration name="length" type="int" line="1037"/>
                <scope line="1038"/>
            </method>
            <javadoc line="1042">
                &lt;p&gt;Performs the an element by element division operation:&lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; / b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a The left matrix in the division operation. Not modified.                    
                </param>
                <param>
                    b The right matrix in the division operation. Not modified.                    
                </param>
                <param>
                    c Where the results of the operation are stored. Modified.                    
                </param>
            </javadoc>
            <method name="elementDiv" type="void" line="1051">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="c" type="D1Matrix64F"/>
                </params>
                <scope line="1052"/>
                <declaration name="length" type="int" line="1055"/>
                <scope line="1056"/>
            </method>
            <javadoc line="1060">
                &lt;p&gt;
                  Computes the sum of all the elements in the matrix:&lt;br&gt;
                  &lt;br&gt;
                  sum(i=1:m , j=1:n ; a&lt;sub&gt;ij&lt;/sub&gt;)
                  &lt;p&gt;                
                <param>
                    mat An m by n matrix. Not modified.                    
                </param>
                <return>
                    The sum of the elements.                    
                </return>
            </javadoc>
            <method name="elementSum" type="double" line="1069">
                <params>
                    <param name="mat" type="D1Matrix64F"/>
                </params>
                <declaration name="total" type="double" line="1070"/>
                <declaration name="size" type="int" line="1071"/>
                <scope line="1072"/>
            </method>
            <javadoc line="1077">
                &lt;p&gt;
                  Computes the sum of the absolute value all the elements in the matrix:&lt;br&gt;
                  &lt;br&gt;
                  sum(i=1:m , j=1:n ; |a&lt;sub&gt;ij&lt;/sub&gt;|)
                  &lt;p&gt;                
                <param>
                    mat An m by n matrix. Not modified.                    
                </param>
                <return>
                    The sum of the absolute value of each element.                    
                </return>
            </javadoc>
            <method name="elementSumAbs" type="double" line="1086">
                <params>
                    <param name="mat" type="D1Matrix64F"/>
                </params>
                <declaration name="total" type="double" line="1087"/>
                <declaration name="size" type="int" line="1088"/>
                <scope line="1089"/>
            </method>
            <javadoc line="1094">
                &lt;p&gt;
                  Computes the sum of each row in the input matrix and returns the results in a vector:&lt;br&gt;
                  &lt;br&gt;
                  b&lt;sub&gt;j&lt;/sub&gt; = sum(i=1:n ; |a&lt;sub&gt;ji&lt;/sub&gt;|)
                  &lt;/p&gt;                
                <param>
                    input INput matrix whose rows are summed.                    
                </param>
                <param>
                    output Optional storage for output.  Must be a vector. If null a row vector is returned. Modified.                    
                </param>
                <return>
                    Vector containing the sum of each row in the input.                    
                </return>
            </javadoc>
            <method name="sumRows" type="DenseMatrix64F" line="1104">
                <params>
                    <param name="input" type="DenseMatrix64F"/>
                    <param name="output" type="DenseMatrix64F"/>
                </params>
                <scope line="1105"/>
                <scope line="1109">
                    <declaration name="total" type="double" line="1110"/>
                    <declaration name="end" type="int" line="1111"/>
                    <scope line="1112"/>
                </scope>
            </method>
            <javadoc line="1119">
                &lt;p&gt;
                  Computes the sum of each column in the input matrix and returns the results in a vector:&lt;br&gt;
                  &lt;br&gt;
                  b&lt;sub&gt;j&lt;/sub&gt; = sum(i=1:m ; |a&lt;sub&gt;ij&lt;/sub&gt;|)
                  &lt;/p&gt;                
                <param>
                    input INput matrix whose rows are summed.                    
                </param>
                <param>
                    output Optional storage for output.  Must be a vector. If null a column vector is returned. Modified.                    
                </param>
                <return>
                    Vector containing the sum of each row in the input.                    
                </return>
            </javadoc>
            <method name="sumCols" type="DenseMatrix64F" line="1129">
                <params>
                    <param name="input" type="DenseMatrix64F"/>
                    <param name="output" type="DenseMatrix64F"/>
                </params>
                <scope line="1130"/>
                <scope line="1134">
                    <declaration name="total" type="double" line="1135"/>
                    <declaration name="index" type="int" line="1136"/>
                    <declaration name="end" type="int" line="1137"/>
                    <scope line="1138"/>
                </scope>
            </method>
            <javadoc line="1145">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  a = a + b &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a A Matrix. Modified.                    
                </param>
                <param>
                    b A Matrix. Not modified.                    
                </param>
            </javadoc>
            <method name="addEquals" type="void" line="1154">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <scope line="1155"/>
                <declaration name="length" type="int" line="1158"/>
                <scope line="1159"/>
            </method>
            <javadoc line="1163">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  a = a +  &amp;beta;  b  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + &amp;beta;  b&lt;sub&gt;ij&lt;/sub&gt;
                  &lt;/p&gt;                
                <param>
                    beta The number that matrix 'b' is multiplied by.                    
                </param>
                <param>
                    a A Matrix. Modified.                    
                </param>
                <param>
                    b A Matrix. Not modified.                    
                </param>
            </javadoc>
            <method name="addEquals" type="void" line="1173">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="beta" type="double"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <scope line="1174"/>
                <declaration name="length" type="int" line="1177"/>
                <scope line="1178"/>
            </method>
            <javadoc line="1182">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = a + b &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Matrix C can be the same instance as Matrix A and/or B.
                  &lt;/p&gt;                
                <param>
                    a A Matrix. Not modified.                    
                </param>
                <param>
                    b A Matrix. Not modified.                    
                </param>
                <param>
                    c A Matrix where the results are stored. Modified.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="1195">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="c" type="D1Matrix64F"/>
                </params>
                <scope line="1196"/>
                <declaration name="length" type="int" line="1199"/>
                <scope line="1200"/>
            </method>
            <javadoc line="1204">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = a + &amp;beta;  b &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + &amp;beta;  b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Matrix C can be the same instance as Matrix A and/or B.
                  &lt;/p&gt;                
                <param>
                    a A Matrix. Not modified.                    
                </param>
                <param>
                    beta Scaling factor for matrix b.                    
                </param>
                <param>
                    b A Matrix. Not modified.                    
                </param>
                <param>
                    c A Matrix where the results are stored. Modified.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="1218">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="beta" type="double"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="c" type="D1Matrix64F"/>
                </params>
                <scope line="1219"/>
                <declaration name="length" type="int" line="1222"/>
                <scope line="1223"/>
            </method>
            <javadoc line="1227">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = &amp;alpha;  a + &amp;beta;  b &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha;  a&lt;sub&gt;ij&lt;/sub&gt; + &amp;beta;  b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Matrix C can be the same instance as Matrix A and/or B.
                  &lt;/p&gt;                
                <param>
                    alpha A scaling factor for matrix a.                    
                </param>
                <param>
                    a A Matrix. Not modified.                    
                </param>
                <param>
                    beta A scaling factor for matrix b.                    
                </param>
                <param>
                    b A Matrix. Not modified.                    
                </param>
                <param>
                    c A Matrix where the results are stored. Modified.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="1242">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="beta" type="double"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="c" type="D1Matrix64F"/>
                </params>
                <scope line="1243"/>
                <declaration name="length" type="int" line="1246"/>
                <scope line="1247"/>
            </method>
            <javadoc line="1251">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  c = &amp;alpha;  a + b &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha;  a&lt;sub&gt;ij&lt;/sub&gt; + b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Matrix C can be the same instance as Matrix A and/or B.
                  &lt;/p&gt;                
                <param>
                    alpha A scaling factor for matrix a.                    
                </param>
                <param>
                    a A Matrix. Not modified.                    
                </param>
                <param>
                    b A Matrix. Not modified.                    
                </param>
                <param>
                    c A Matrix where the results are stored. Modified.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="1265">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="c" type="D1Matrix64F"/>
                </params>
                <scope line="1266"/>
                <declaration name="length" type="int" line="1269"/>
                <scope line="1270"/>
            </method>
            <javadoc line="1274">
                &lt;p&gt;Performs an in-place scalar addition:&lt;br&gt;
                  &lt;br&gt;
                  a = a + val&lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + val&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a A matrix.  Modified.                    
                </param>
                <param>
                    val The value that's added to each element.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="1283">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="val" type="double"/>
                </params>
                <declaration name="length" type="int" line="1284"/>
                <scope line="1285"/>
            </method>
            <javadoc line="1289">
                &lt;p&gt;Performs scalar addition:&lt;br&gt;
                  &lt;br&gt;
                  c = a + val&lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + val&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    a A matrix. Not modified.                    
                </param>
                <param>
                    c A matrix. Modified.                    
                </param>
                <param>
                    val The value that's added to each element.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="1299">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="val" type="double"/>
                    <param name="c" type="D1Matrix64F"/>
                </params>
                <scope line="1300"/>
                <declaration name="length" type="int" line="1303"/>
                <scope line="1304"/>
            </method>
            <javadoc line="1308">
                &lt;p&gt;Performs the following subtraction operation:&lt;br&gt;
                  &lt;br&gt;
                  a = a - b  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;
                  &lt;/p&gt;                
                <param>
                    a A Matrix. Modified.                    
                </param>
                <param>
                    b A Matrix. Not modified.                    
                </param>
            </javadoc>
            <method name="subEquals" type="void" line="1317">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <scope line="1318"/>
                <declaration name="length" type="int" line="1321"/>
                <scope line="1322"/>
            </method>
            <javadoc line="1326">
                &lt;p&gt;Performs the following subtraction operation:&lt;br&gt;
                  &lt;br&gt;
                  c = a - b  &lt;br&gt;
                  c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Matrix C can be the same instance as Matrix A and/or B.
                  &lt;/p&gt;                
                <param>
                    a A Matrix. Not modified.                    
                </param>
                <param>
                    b A Matrix. Not modified.                    
                </param>
                <param>
                    c A Matrix. Modified.                    
                </param>
            </javadoc>
            <method name="sub" type="void" line="1339">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="c" type="D1Matrix64F"/>
                </params>
                <scope line="1340"/>
                <declaration name="length" type="int" line="1343"/>
                <scope line="1344"/>
            </method>
            <javadoc line="1348">
                &lt;p&gt;
                  Performs an in-place element by element scalar multiplication.&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha;a&lt;sub&gt;ij&lt;/sub&gt;
                  &lt;/p&gt;                
                <param>
                    a The matrix that is to be scaled.  Modified.                    
                </param>
                <param>
                    alpha the amount each element is multiplied by.                    
                </param>
            </javadoc>
            <method name="scale" type="void" line="1357">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="size" type="int" line="1358"/>
                <scope line="1359"/>
            </method>
            <javadoc line="1363">
                &lt;p&gt;
                  Performs an element by element scalar multiplication.&lt;br&gt;
                  &lt;br&gt;
                  b&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha;a&lt;sub&gt;ij&lt;/sub&gt;
                  &lt;/p&gt;                
                <param>
                    alpha the amount each element is multiplied by.                    
                </param>
                <param>
                    a The matrix that is to be scaled.  Not modified.                    
                </param>
                <param>
                    b Where the scaled matrix is stored. Modified.                    
                </param>
            </javadoc>
            <method name="scale" type="void" line="1373">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <declaration name="size" type="int" line="1375"/>
                <scope line="1376"/>
            </method>
            <javadoc line="1380">
                &lt;p&gt;
                  Performs an in-place element by element scalar division.&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt;/&amp;alpha;
                  &lt;/p&gt;                
                <param>
                    a The matrix whose elements are to be divided.  Modified.                    
                </param>
                <param>
                    alpha the amount each element is divided by.                    
                </param>
            </javadoc>
            <method name="divide" type="void" line="1389">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="size" type="int" line="1390"/>
                <scope line="1391"/>
            </method>
            <javadoc line="1395">
                &lt;p&gt;
                  Performs an element by element scalar division.&lt;br&gt;
                  &lt;br&gt;
                  b&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; /&amp;alpha;
                  &lt;/p&gt;                
                <param>
                    alpha the amount each element is divided by.                    
                </param>
                <param>
                    a The matrix whose elements are to be divided.  Not modified.                    
                </param>
                <param>
                    b Where the results are stored. Modified.                    
                </param>
            </javadoc>
            <method name="divide" type="void" line="1405">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <declaration name="size" type="int" line="1407"/>
                <scope line="1408"/>
            </method>
            <javadoc line="1412">
                &lt;p&gt;
                  Changes the sign of every element in the matrix.&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = -a&lt;sub&gt;ij&lt;/sub&gt;
                  &lt;/p&gt;                
                <param>
                    a A matrix. Modified.                    
                </param>
            </javadoc>
            <method name="changeSign" type="void" line="1420">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="size" type="int" line="1421"/>
                <scope line="1422"/>
            </method>
            <javadoc line="1426">
                &lt;p&gt;
                  Sets every element in the matrix to the specified value.&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = value
                  &lt;p&gt;                
                <param>
                    a A matrix whose elements are about to be set. Modified.                    
                </param>
                <param>
                    value The value each element will have.                    
                </param>
            </javadoc>
            <method name="fill" type="void" line="1435">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="size" type="int" line="1436"/>
                <scope line="1437"/>
            </method>
            <javadoc line="1441">
                &lt;p&gt;
                  Puts the augmented system matrix into reduced row echelon form (RREF).  A matrix is said to be in
                  RREF is the following conditions are true:
                  &lt;/p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;If a row has non-zero entries, then the first non-zero entry is 1.  This is known as the leading one.&lt;/li&gt;
                  &lt;li&gt;If a column contains a leading one then all other entries in that column are zero.&lt;/li&gt;
                  &lt;li&gt;If a row contains a leading 1, then each row above contains a leading 1 further to the left.&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt;
                  [1] Page 19 in, Otter Bretscherm &quot;Linear Algebra with Applications&quot; Prentice-Hall Inc, 1997
                  &lt;/p&gt;                
                <param>
                    A Input matrix.  Unmodified.                    
                </param>
                <param>
                    numUnknowns Number of unknowns/columns that are reduced. Set to -1 to default to
                      Math.min(A.numRows,A.numCols), which works for most systems.                    
                </param>
                <param>
                    reduced Storage for reduced echelon matrix. If null then a new matrix is returned. Modified.                    
                </param>
                <return>
                    Reduced echelon form of A                    
                </return>
            </javadoc>
            <method name="rref" type="DenseMatrix64F" line="1460">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="numUnknowns" type="int"/>
                    <param name="reduced" type="DenseMatrix64F"/>
                </params>
                <scope line="1461"/>
                <declaration name="alg" type="ReducedRowEchelonForm&lt;DenseMatrix64F&gt;" line="1466"/>
            </method>
        </class>
    </source>