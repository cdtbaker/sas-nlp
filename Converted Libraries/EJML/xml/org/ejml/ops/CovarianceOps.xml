<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.alg.dense.linsol.LinearSolverSafe"/>
        <import package="org.ejml.alg.dense.misc.UnrolledInverseFromMinor"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.factory.LinearSolverFactory"/>
        <import package="java.util.Random"/>
        <class name="CovarianceOps" line="8">
            <javadoc line="8">
                Contains operations specific to covariance matrices.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="TOL" type="double" line="13"/>
            <javadoc line="14">
                This is a fairly light weight check to see of a covariance matrix is valid.
                  It checks to see if the diagonal elements are all positive, which they should be
                  if it is valid.  Not all invalid covariance matrices will be caught by this method.                
                <return>
                    true if valid and false if invalid                    
                </return>
            </javadoc>
            <method name="isValidFast" type="boolean" line="20">
                <params>
                    <param name="cov" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="23">
                Performs a variety of tests to see if the provided matrix is a valid
                  covariance matrix.                
                <return>
                    0 = is valid 1 = failed positive diagonal, 2 = failed on symmetry, 2 = failed on positive definite                    
                </return>
            </javadoc>
            <method name="isValid" type="int" line="28">
                <params>
                    <param name="cov" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="34">
                Performs a matrix inversion operations that takes advantage of the special
                  properties of a covariance matrix.                
                <param>
                    cov On input it is a covariance matrix, on output it is the inverse.  Modified.                    
                </param>
                <return>
                    true if it could invert the matrix false if it could not.                    
                </return>
            </javadoc>
            <method name="invert" type="boolean" line="40">
                <params>
                    <param name="cov" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="43">
                Performs a matrix inversion operations that takes advantage of the special
                  properties of a covariance matrix.                
                <param>
                    cov A covariance matrix. Not modified.                    
                </param>
                <param>
                    cov_inv The inverse of cov.  Modified.                    
                </param>
                <return>
                    true if it could invert the matrix false if it could not.                    
                </return>
            </javadoc>
            <method name="invert" type="boolean" line="50">
                <params>
                    <param name="cov" type="DenseMatrix64F"/>
                    <param name="cov_inv" type="DenseMatrix64F"/>
                </params>
                <scope line="51">
                    <scope line="52"/>
                </scope>
                <scope line="58">
                    <declaration name="solver" type="LinearSolver&lt;DenseMatrix64F&gt;" line="59"/>
                </scope>
            </method>
            <javadoc line="66">
                Sets vector to a random value based upon a zero-mean multivariate Gaussian distribution with
                  covariance &apos;cov&apos;.  If repeat calls are made to this class, consider using {@link CovarianceRandomDraw} instead.                
                <param>
                    cov The distirbutions covariance.  Not modified.                    
                </param>
                <param>
                    vector The random vector. Modified.                    
                </param>
                <param>
                    rand Random number generator.                    
                </param>
            </javadoc>
            <method name="randomVector" type="void" line="73">
                <params>
                    <param name="cov" type="DenseMatrix64F"/>
                    <param name="vector" type="DenseMatrix64F"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="rng" type="CovarianceRandomDraw" line="74"/>
            </method>
        </class>
    </source>