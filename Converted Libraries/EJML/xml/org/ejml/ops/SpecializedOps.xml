<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.data.D1Matrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.RowD1Matrix64F"/>
        <class name="SpecializedOps" line="5">
            <javadoc line="5">
                This contains less common or more specialized matrix operations.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="10">
                &lt;p&gt;
                  Creates a reflector from the provided vector.&lt;br&gt;
                  &lt;br&gt;
                  Q = I - &amp;gamma; u u&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &amp;gamma; = 2/||u||&lt;sup&gt;2&lt;/sup&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  In practice {@link org.ejml.alg.dense.mult.VectorVectorMult#householder(double,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}  multHouseholder}
                  should be used for performance reasons since there is no need to calculate Q explicitly.
                  &lt;/p&gt;                
                <param>
                    u A vector. Not modified.                    
                </param>
                <return>
                    An orthogonal reflector.                    
                </return>
            </javadoc>
            <method name="createReflector" type="DenseMatrix64F" line="24">
                <params>
                    <param name="u" type="RowD1Matrix64F"/>
                </params>
                <declaration name="norm" type="double" line="26"/>
                <declaration name="gamma" type="double" line="27"/>
                <declaration name="Q" type="DenseMatrix64F" line="28"/>
            </method>
            <javadoc line="32">
                &lt;p&gt;
                  Creates a reflector from the provided vector and gamma.&lt;br&gt;
                  &lt;br&gt;
                  Q = I - &amp;gamma; u u&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  In practice {@link org.ejml.alg.dense.mult.VectorVectorMult#householder(double,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}  multHouseholder}
                  should be used for performance reasons since there is no need to calculate Q explicitly.
                  &lt;/p&gt;                
                <param>
                    u A vector.  Not modified.                    
                </param>
                <param>
                    gamma To produce a reflector gamma needs to be equal to 2/||u||.                    
                </param>
                <return>
                    An orthogonal reflector.                    
                </return>
            </javadoc>
            <method name="createReflector" type="DenseMatrix64F" line="46">
                <params>
                    <param name="u" type="DenseMatrix64F"/>
                    <param name="gamma" type="double"/>
                </params>
                <declaration name="Q" type="DenseMatrix64F" line="48"/>
            </method>
            <javadoc line="52">
                Creates a copy of a matrix but swaps the rows as specified by the order array.                
                <param>
                    order Specifies which row in the dest corresponds to a row in the src. Not modified.                    
                </param>
                <param>
                    src The original matrix. Not modified.                    
                </param>
                <param>
                    dst A Matrix that is a row swapped copy of src. Modified.                    
                </param>
            </javadoc>
            <method name="copyChangeRow" type="DenseMatrix64F" line="58">
                <params>
                    <param name="order" type="int"/>
                    <param name="src" type="DenseMatrix64F"/>
                    <param name="dst" type="DenseMatrix64F"/>
                </params>
                <scope line="59"/>
                <scope line="62"/>
                <scope line="65">
                    <declaration name="indexDst" type="int" line="66"/>
                    <declaration name="indexSrc" type="int" line="67"/>
                </scope>
            </method>
            <javadoc line="72">
                Copies just the upper or lower triangular portion of a matrix.                
                <param>
                    src Matrix being copied. Not modified.                    
                </param>
                <param>
                    dst Where just a triangle from src is copied.  If null a new one will be created. Modified.                    
                </param>
                <param>
                    upper If the upper or lower triangle should be copied.                    
                </param>
                <return>
                    The copied matrix.                    
                </return>
            </javadoc>
            <method name="copyTriangle" type="DenseMatrix64F" line="79">
                <params>
                    <param name="src" type="DenseMatrix64F"/>
                    <param name="dst" type="DenseMatrix64F"/>
                    <param name="upper" type="boolean"/>
                </params>
                <scope line="80"/>
                <scope line="83"/>
                <scope line="86">
                    <declaration name="N" type="int" line="87"/>
                    <scope line="88">
                        <declaration name="index" type="int" line="89"/>
                    </scope>
                </scope>
                <scope line="93">
                    <scope line="94">
                        <declaration name="length" type="int" line="95"/>
                        <declaration name="index" type="int" line="96"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="102">
                &lt;p&gt;
                  Computes the F norm of the difference between the two Matrices:&lt;br&gt;
                  &lt;br&gt;
                  Sqrt{&amp;sum;&lt;sub&gt;i=1:m&lt;/sub&gt; &amp;sum;&lt;sub&gt;j=1:n&lt;/sub&gt; ( a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;}
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is often used as a cost function.
                  &lt;/p&gt;                
                <see>
                    NormOps#fastNormF                    
                </see>
                <param>
                    a m by n matrix. Not modified.                    
                </param>
                <param>
                    b m by n matrix. Not modified.                    
                </param>
                <return>
                    The F normal of the difference matrix.                    
                </return>
            </javadoc>
            <method name="diffNormF" type="double" line="116">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <scope line="117"/>
                <declaration name="size" type="int" line="120"/>
                <declaration name="diff" type="DenseMatrix64F" line="121"/>
                <scope line="122"/>
            </method>
            <method name="diffNormF_fast" type="double" line="127">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <scope line="128"/>
                <declaration name="size" type="int" line="131"/>
                <declaration name="total" type="double" line="132"/>
                <scope line="133">
                    <declaration name="diff" type="double" line="134"/>
                </scope>
            </method>
            <javadoc line="139">
                &lt;p&gt;
                  Computes the p=1 p-norm of the difference between the two Matrices:&lt;br&gt;
                  &lt;br&gt;
                  &amp;sum;&lt;sub&gt;i=1:m&lt;/sub&gt; &amp;sum;&lt;sub&gt;j=1:n&lt;/sub&gt; | a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;| &lt;br&gt;
                  &lt;br&gt;
                  where |x| is the absolute value of x.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is often used as a cost function.
                  &lt;/p&gt;                
                <param>
                    a m by n matrix. Not modified.                    
                </param>
                <param>
                    b m by n matrix. Not modified.                    
                </param>
                <return>
                    The p=1 p-norm of the difference matrix.                    
                </return>
            </javadoc>
            <method name="diffNormP1" type="double" line="154">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <scope line="155"/>
                <declaration name="size" type="int" line="158"/>
                <declaration name="total" type="double" line="159"/>
                <scope line="160"/>
            </method>
            <javadoc line="165">
                &lt;p&gt;
                  Performs the following operation:&lt;br&gt;
                  &lt;br&gt;
                  B = A + &amp;alpha;I
                  &lt;p&gt;                
                <param>
                    A A square matrix.  Not modified.                    
                </param>
                <param>
                    B A square matrix that the results are saved to.  Modified.                    
                </param>
                <param>
                    alpha Scaling factor for the identity matrix.                    
                </param>
            </javadoc>
            <method name="addIdentity" type="void" line="175">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="B" type="RowD1Matrix64F"/>
                    <param name="alpha" type="double"/>
                </params>
                <declaration name="n" type="int" line="178"/>
                <declaration name="index" type="int" line="179"/>
                <scope line="180">
                    <scope line="181">
                        <scope line="182"/>
                        <scope line="185"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="191">
                &lt;p&gt;
                  Extracts a row or column vector from matrix A.  The first element in the matrix is at element (rowA,colA).
                  The next &apos;length&apos; elements are extracted along a row or column.  The results are put into vector &apos;v&apos;
                  start at its element v0.
                  &lt;/p&gt;                
                <param>
                    A Matrix that the vector is being extracted from.  Not modified.                    
                </param>
                <param>
                    rowA Row of the first element that is extracted.                    
                </param>
                <param>
                    colA Column of the first element that is extracted.                    
                </param>
                <param>
                    length Length of the extracted vector.                    
                </param>
                <param>
                    row If true a row vector is extracted, otherwise a column vector is extracted.                    
                </param>
                <param>
                    offsetV First element in 'v' where the results are extracted to.                    
                </param>
                <param>
                    v Vector where the results are written to. Modified.                    
                </param>
            </javadoc>
            <method name="subvector" type="void" line="205">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="rowA" type="int"/>
                    <param name="colA" type="int"/>
                    <param name="length" type="int"/>
                    <param name="row" type="boolean"/>
                    <param name="offsetV" type="int"/>
                    <param name="v" type="RowD1Matrix64F"/>
                </params>
                <scope line="206">
                    <scope line="207"/>
                </scope>
                <scope line="211">
                    <scope line="212"/>
                </scope>
            </method>
            <javadoc line="217">
                Takes a matrix and splits it into a set of row or column vectors.                
                <param>
                    A original matrix.                    
                </param>
                <param>
                    column If true then column vectors will be created.                    
                </param>
                <return>
                    Set of vectors.                    
                </return>
            </javadoc>
            <method name="splitIntoVectors" type="DenseMatrix64F[]" line="223">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="column" type="boolean"/>
                </params>
                <declaration name="w" type="int" line="224"/>
                <declaration name="M" type="int" line="225"/>
                <declaration name="N" type="int" line="226"/>
                <declaration name="o" type="int" line="227"/>
                <declaration name="ret" type="DenseMatrix64F[]" line="228"/>
                <scope line="229">
                    <declaration name="a" type="DenseMatrix64F" line="230"/>
                </scope>
            </method>
            <javadoc line="237">
                &lt;p&gt;
                  Creates a pivot matrix that exchanges the rows in a matrix:
                  &lt;br&gt;
                  A&apos; = PA&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  For example, if element 0 in &apos;pivots&apos; is 2 then the first row in A&apos; will be the 3rd row in A.
                  &lt;/p&gt;                
                <param>
                    ret If null then a new matrix is declared otherwise the results are written to it.  Is modified.                    
                </param>
                <param>
                    pivots Specifies the new order of rows in a matrix.                    
                </param>
                <param>
                    numPivots How many elements in pivots are being used.                    
                </param>
                <param>
                    transposed If the transpose of the matrix is returned.                    
                </param>
                <return>
                    A pivot matrix.                    
                </return>
            </javadoc>
            <method name="pivotMatrix" type="DenseMatrix64F" line="252">
                <params>
                    <param name="ret" type="DenseMatrix64F"/>
                    <param name="pivots" type="int"/>
                    <param name="numPivots" type="int"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <scope line="253"/>
                <scope line="256"/>
                <scope line="260">
                    <scope line="261"/>
                </scope>
                <scope line="265">
                    <scope line="266"/>
                </scope>
            </method>
            <javadoc line="272">
                Computes the product of the diagonal elements.  For a diagonal or triangular
                  matrix this is the determinant.                
                <param>
                    T A matrix.                    
                </param>
                <return>
                    product of the diagonal elements.                    
                </return>
            </javadoc>
            <method name="diagProd" type="double" line="278">
                <params>
                    <param name="T" type="RowD1Matrix64F"/>
                </params>
                <declaration name="prod" type="double" line="279"/>
                <declaration name="N" type="int" line="280"/>
                <scope line="281"/>
            </method>
            <javadoc line="286">
                Computes the quality of a triangular matrix, where the quality of a matrix
                  is defined in {@link org.ejml.factory.LinearSolver#quality()}.  In
                  this situation the quality os the absolute value of the product of
                  each diagonal element divided by the magnitude of the largest diagonal element.
                  If all diagonal elements are zero then zero is returned.                
                <param>
                    upper if it is upper triangular or not.                    
                </param>
                <param>
                    T A matrix.  @return product of the diagonal elements.                    
                </param>
                <return>
                    the quality of the system.                    
                </return>
            </javadoc>
            <method name="qualityTriangular" type="double" line="296">
                <params>
                    <param name="upper" type="boolean"/>
                    <param name="T" type="D1Matrix64F"/>
                </params>
                <declaration name="N" type="int" line="297"/>
                <declaration name="max" type="double" line="298"/>
                <declaration name="quality" type="double" line="300"/>
                <scope line="301"/>
            </method>
            <javadoc line="306">
                Sums up the square of each element in the matrix.  This is equivalent to the
                  Frobenius norm squared.                
                <param>
                    m Matrix.                    
                </param>
                <return>
                    Sum of elements squared.                    
                </return>
            </javadoc>
            <method name="elementSumSq" type="double" line="312">
                <params>
                    <param name="m" type="D1Matrix64F"/>
                </params>
                <declaration name="total" type="double" line="313"/>
                <declaration name="N" type="int" line="314"/>
                <scope line="315">
                    <declaration name="d" type="double" line="316"/>
                </scope>
            </method>
        </class>
    </source>