<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <class name="ReadCsv" line="8">
            <javadoc line="8">
                &lt;p&gt;
                  Base class for reading CSV formatted files.  CSV stands for column-space-value where text strings are separated
                  by a space character.  The values are typically stored in a human readable format.  The encoded text for a single
                  variable is referred to as a word.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Comments are allowed and identified by starting a line with the comment character.  The comment character is user
                  configurable.  By default there is no comment character.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="hasComment" type="boolean" line="21"/>
            <declaration name="comment" type="char" line="22"/>
            <declaration name="in" type="BufferedReader" line="23"/>
            <declaration name="lineNumber" type="int" line="24"/>
            <javadoc line="25">
                Constructor for ReadCsv                
                <param>
                    in Where the input comes from.                    
                </param>
            </javadoc>
            <method name="ReadCsv" type="constructor" line="29">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="32">
                Sets the comment character.  All lines that start with this character will be ignored.                
                <param>
                    comment The new comment character.                    
                </param>
            </javadoc>
            <method name="setComment" type="void" line="36">
                <params>
                    <param name="comment" type="char"/>
                </params>
            </method>
            <javadoc line="40">
                Returns how many lines have been read.                
                <return>
                    Line number                    
                </return>
            </javadoc>
            <method name="getLineNumber" type="int" line="44"/>
            <javadoc line="47">
                Returns the reader that it is using internally.                
                <return>
                    The reader.                    
                </return>
            </javadoc>
            <method name="getReader" type="BufferedReader" line="51"/>
            <javadoc line="54">
                Finds the next valid line of words in the stream and extracts them.                
                <return>
                    List of valid words on the line.  null if the end of the file has been reached.                    
                </return>
                <throws>
                    java.io.IOException                    
                </throws>
            </javadoc>
            <method name="extractWords" type="List<String>" line="59">
                <scope line="60">
                    <declaration name="line" type="String" line="62"/>
                    <scope line="63"/>
                    <scope line="66"/>
                </scope>
            </method>
            <javadoc line="72">
                Extracts the words from a string.  Words are seperated by a space character.                
                <param>
                    line The line that is being parsed.                    
                </param>
                <return>
                    A list of words contained on the line.                    
                </return>
            </javadoc>
            <method name="parseWords" type="List<String>" line="77">
                <params>
                    <param name="line" type="String"/>
                </params>
                <declaration name="words" type="List&lt;String&gt;" line="78"/>
                <declaration name="insideWord" type="boolean" line="79"/>
                <declaration name="last" type="int" line="80"/>
                <scope line="81">
                    <declaration name="c" type="char" line="82"/>
                    <scope line="83">
                        <scope line="84"/>
                    </scope>
                    <scope line="89">
                        <scope line="90"/>
                    </scope>
                </scope>
                <scope line="96"/>
            </method>
            <javadoc line="101">
                Checks to see if &apos;c&apos; is a space character or not.                
                <param>
                    c The character being tested.                    
                </param>
                <return>
                    if it is a space character or not.                    
                </return>
            </javadoc>
            <method name="isSpace" type="boolean" line="106">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
        </class>
    </source>