<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.alg.dense.decomposition.eig.EigenPowerMethod"/>
        <import package="org.ejml.alg.dense.mult.VectorVectorMult"/>
        <import package="org.ejml.data.Complex64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.Eigenpair"/>
        <import package="org.ejml.factory.EigenDecomposition"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.factory.LinearSolverFactory"/>
        <class name="EigenOps" line="11">
            <javadoc line="11">
                Additional functions related to eigenvalues and eigenvectors of a matrix.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="16">
                &lt;p&gt;
                  Given matrix A and an eigen vector of A, compute the corresponding eigen value.  This is
                  the Rayleigh quotient.&lt;br&gt;
                  &lt;br&gt;
                  x&lt;sup&gt;T&lt;/sup&gt;Ax / x&lt;sup&gt;T&lt;/sup&gt;x
                  &lt;/p&gt;                
                <param>
                    A Matrix. Not modified.                    
                </param>
                <param>
                    eigenVector An eigen vector of A. Not modified.                    
                </param>
                <return>
                    The corresponding eigen value.                    
                </return>
            </javadoc>
            <method name="computeEigenValue" type="double" line="27">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="eigenVector" type="DenseMatrix64F"/>
                </params>
                <declaration name="bottom" type="double" line="28"/>
                <declaration name="top" type="double" line="29"/>
            </method>
            <javadoc line="32">
                &lt;p&gt;
                  Given an eigenvalue it computes an eigenvector using inverse iteration:
                  &lt;br&gt;
                  for i=1:MAX {&lt;br&gt;
                  (A - &amp;mu;I)z&lt;sup&gt;(i)&lt;/sup&gt; = q&lt;sup&gt;(i-1)&lt;/sup&gt;&lt;br&gt;
                  q&lt;sup&gt;(i)&lt;/sup&gt; = z&lt;sup&gt;(i)&lt;/sup&gt; / ||z&lt;sup&gt;(i)&lt;/sup&gt;||&lt;br&gt;
                  &amp;lambda;&lt;sup&gt;(i)&lt;/sup&gt; =  q&lt;sup&gt;(i)&lt;/sup&gt;&lt;sup&gt;T&lt;/sup&gt; A  q&lt;sup&gt;(i)&lt;/sup&gt;&lt;br&gt;
                  }&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  NOTE: If there is another eigenvalue that is very similar to the provided one then there
                  is a chance of it converging towards that one instead.  The larger a matrix is the more
                  likely this is to happen.
                  &lt;/p&gt;                
                <param>
                    A Matrix whose eigenvector is being computed.  Not modified.                    
                </param>
                <param>
                    eigenvalue The eigenvalue in the eigen pair.                    
                </param>
                <return>
                    The eigenvector or null if none could be found.                    
                </return>
            </javadoc>
            <method name="computeEigenVector" type="Eigenpair" line="51">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="eigenvalue" type="double"/>
                </params>
                <declaration name="M" type="DenseMatrix64F" line="53"/>
                <declaration name="x" type="DenseMatrix64F" line="54"/>
                <declaration name="b" type="DenseMatrix64F" line="55"/>
                <declaration name="origEigenvalue" type="double" line="57"/>
                <declaration name="threshold" type="double" line="59"/>
                <declaration name="prevError" type="double" line="60"/>
                <declaration name="hasWorked" type="boolean" line="61"/>
                <declaration name="solver" type="LinearSolver&lt;DenseMatrix64F&gt;" line="62"/>
                <declaration name="perp" type="double" line="63"/>
                <scope line="64">
                    <declaration name="failed" type="boolean" line="65"/>
                    <scope line="66"/>
                    <scope line="69"/>
                    <scope line="72"/>
                    <scope line="75">
                        <scope line="76">
                            <declaration name="val" type="double" line="77"/>
                        </scope>
                        <scope line="81"/>
                    </scope>
                    <scope line="85">
                        <declaration name="error" type="double" line="90"/>
                        <scope line="91">
                            <declaration name="val" type="double" line="94"/>
                        </scope>
                        <scope line="97"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="107">
                &lt;p&gt;
                  Computes the dominant eigen vector for a matrix.  The dominant eigen vector is an
                  eigen vector associated with the largest eigen value.
                  &lt;/p&gt;
                  &lt;p&gt;
                  WARNING: This function uses the power method.  There are known cases where it will not converge.
                  It also seems to converge to non-dominant eigen vectors some times.  Use at your own risk.
                  &lt;/p&gt;                
                <param>
                    A A matrix.  Not modified.                    
                </param>
            </javadoc>
            <method name="dominantEigenpair" type="Eigenpair" line="118">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="power" type="EigenPowerMethod" line="119"/>
            </method>
            <javadoc line="123">
                &lt;p&gt;
                  Generates a bound for the largest eigen value of the provided matrix using Perron-Frobenius
                  theorem.   This function only applies to non-negative real matrices.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For &quot;stochastic&quot; matrices (Markov process) this should return one for the upper and lower bound.
                  &lt;/p&gt;                
                <param>
                    A Square matrix with positive elements.  Not modified.                    
                </param>
                <param>
                    bound Where the results are stored.  If null then a matrix will be declared. Modified.                    
                </param>
                <return>
                    Lower and upper bound in the first and second elements respectively.                    
                </return>
            </javadoc>
            <method name="boundLargestEigenValue" type="double[]" line="135">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="bound" type="double[]"/>
                </params>
                <declaration name="min" type="double" line="137"/>
                <declaration name="max" type="double" line="138"/>
                <declaration name="n" type="int" line="139"/>
                <scope line="140">
                    <declaration name="total" type="double" line="141"/>
                    <scope line="142">
                        <declaration name="v" type="double" line="143"/>
                    </scope>
                    <scope line="147"/>
                    <scope line="150"/>
                </scope>
            </method>
            <javadoc line="159">
                &lt;p&gt;
                  A diagonal matrix where real diagonal element contains a real eigenvalue.  If an eigenvalue
                  is imaginary then zero is stored in its place.
                  &lt;/p&gt;                
                <param>
                    eig An eigenvalue decomposition which has already decomposed a matrix.                    
                </param>
                <return>
                    A diagonal matrix containing the eigenvalues.                    
                </return>
            </javadoc>
            <method name="createMatrixD" type="DenseMatrix64F" line="167">
                <params>
                    <param name="eig" type="EigenDecomposition"/>
                </params>
                <declaration name="N" type="int" line="168"/>
                <declaration name="D" type="DenseMatrix64F" line="169"/>
                <scope line="170">
                    <declaration name="c" type="Complex64F" line="171"/>
                    <scope line="172"/>
                </scope>
            </method>
            <javadoc line="178">
                &lt;p&gt;
                  Puts all the real eigenvectors into the columns of a matrix.  If an eigenvalue is imaginary
                  then the corresponding eigenvector will have zeros in its column.
                  &lt;/p&gt;                
                <param>
                    eig An eigenvalue decomposition which has already decomposed a matrix.                    
                </param>
                <return>
                    An m by m matrix containing eigenvectors in its columns.                    
                </return>
            </javadoc>
            <method name="createMatrixV" type="DenseMatrix64F" line="186">
                <params>
                    <param name="eig" type="EigenDecomposition<DenseMatrix64F>"/>
                </params>
                <declaration name="N" type="int" line="187"/>
                <declaration name="V" type="DenseMatrix64F" line="188"/>
                <scope line="189">
                    <declaration name="c" type="Complex64F" line="190"/>
                    <scope line="191">
                        <declaration name="v" type="DenseMatrix64F" line="192"/>
                        <scope line="193">
                            <scope line="194"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>