<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.alg.dense.decomposition.eig.EigenPowerMethod"/>
        <import package="org.ejml.alg.dense.mult.VectorVectorMult"/>
        <import package="org.ejml.data.Complex64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.Eigenpair"/>
        <import package="org.ejml.factory.EigenDecomposition"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.factory.LinearSolverFactory"/>
        <class name="EigenOps" line="32">
            <javadoc line="32">
                Additional functions related to eigenvalues and eigenvectors of a matrix.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="38">
                &lt;p&gt;
                  Given matrix A and an eigen vector of A, compute the corresponding eigen value.  This is
                  the Rayleigh quotient.&lt;br&gt;
                  &lt;br&gt;
                  x&lt;sup&gt;T&lt;/sup&gt;Ax / x&lt;sup&gt;T&lt;/sup&gt;x
                  &lt;/p&gt;                
                <param>
                    A Matrix. Not modified.                    
                </param>
                <param>
                    eigenVector An eigen vector of A. Not modified.                    
                </param>
                <return>
                    The corresponding eigen value.                    
                </return>
            </javadoc>
            <method name="computeEigenValue" type="double" line="52">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="eigenVector" type="DenseMatrix64F"/>
                </params>
                <declaration name="bottom" type="double" line="53"/>
                <declaration name="top" type="double" line="54"/>
            </method>
            <javadoc line="59">
                &lt;p&gt;
                  Given an eigenvalue it computes an eigenvector using inverse iteration:
                  &lt;br&gt;
                  for i=1:MAX {&lt;br&gt;
                  (A - &amp;mu;I)z&lt;sup&gt;(i)&lt;/sup&gt; = q&lt;sup&gt;(i-1)&lt;/sup&gt;&lt;br&gt;
                  q&lt;sup&gt;(i)&lt;/sup&gt; = z&lt;sup&gt;(i)&lt;/sup&gt; / ||z&lt;sup&gt;(i)&lt;/sup&gt;||&lt;br&gt;
                  &amp;lambda;&lt;sup&gt;(i)&lt;/sup&gt; =  q&lt;sup&gt;(i)&lt;/sup&gt;&lt;sup&gt;T&lt;/sup&gt; A  q&lt;sup&gt;(i)&lt;/sup&gt;&lt;br&gt;
                  }&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  NOTE: If there is another eigenvalue that is very similar to the provided one then there
                  is a chance of it converging towards that one instead.  The larger a matrix is the more
                  likely this is to happen.
                  &lt;/p&gt;                
                <param>
                    A Matrix whose eigenvector is being computed.  Not modified.                    
                </param>
                <param>
                    eigenvalue The eigenvalue in the eigen pair.                    
                </param>
                <return>
                    The eigenvector or null if none could be found.                    
                </return>
            </javadoc>
            <method name="computeEigenVector" type="Eigenpair" line="79">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="eigenvalue" type="double"/>
                </params>
                <comment line="91">
                    perturb the eigenvalue slightly so that its not an exact solution the first time                    
                </comment>
                <comment line="92">
                    eigenvalue -= eigenvalue*UtilEjml.EPS*10;                    
                </comment>
                <comment line="109">
                    if the matrix is singular then the eigenvalue is within machine precision
                     of the true value, meaning that x must also be.                    
                </comment>
                <comment line="117">
                    see if solve silently failed                    
                </comment>
                <comment line="124">
                    if it failed on the first trial try perturbing it some more                    
                </comment>
                <comment line="126">
                    maybe this should be turn into a parameter allowing the user
                     to configure the wise of each step                    
                </comment>
                <comment line="132">
                    otherwise assume that it was so accurate that the matrix was singular
                     and return that result                    
                </comment>
                <comment line="142">
                    compute the residual                    
                </comment>
                <comment line="147">
                    if the error increased it is probably converging towards a different
                     eigenvalue                    
                </comment>
                <comment line="149">
                    CommonOps.set(b,1);                    
                </comment>
                <comment line="155">
                    see if it has converged                    
                </comment>
                <comment line="159">
                    update everything                    
                </comment>
                <declaration name="M" type="DenseMatrix64F" line="83"/>
                <declaration name="x" type="DenseMatrix64F" line="85"/>
                <declaration name="b" type="DenseMatrix64F" line="86"/>
                <declaration name="origEigenvalue" type="double" line="93"/>
                <declaration name="threshold" type="double" line="97"/>
                <declaration name="prevError" type="double" line="99"/>
                <declaration name="hasWorked" type="boolean" line="100"/>
                <declaration name="solver" type="LinearSolver&lt;DenseMatrix64F&gt;" line="102"/>
                <declaration name="perp" type="double" line="104"/>
                <scope line="106">
                    <declaration name="failed" type="boolean" line="107"/>
                    <scope line="110"/>
                    <scope line="112"/>
                    <scope line="117"/>
                    <scope line="121">
                        <scope line="122">
                            <declaration name="val" type="double" line="124"/>
                        </scope>
                        <scope line="130"/>
                    </scope>
                    <scope line="135">
                        <declaration name="error" type="double" line="143"/>
                        <scope line="145">
                            <declaration name="val" type="double" line="151"/>
                        </scope>
                        <scope line="153"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="171">
                &lt;p&gt;
                  Computes the dominant eigen vector for a matrix.  The dominant eigen vector is an
                  eigen vector associated with the largest eigen value.
                  &lt;/p&gt;
                  &lt;p&gt;
                  WARNING: This function uses the power method.  There are known cases where it will not converge.
                  It also seems to converge to non-dominant eigen vectors some times.  Use at your own risk.
                  &lt;/p&gt;                
                <param>
                    A A matrix.  Not modified.                    
                </param>
            </javadoc>
            <method name="dominantEigenpair" type="Eigenpair" line="185">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <comment line="185">
                    TODO maybe do the regular power method, estimate the eigenvalue, then shift invert?                    
                </comment>
                <comment line="190">
                    eh maybe 0.1 is a good value.  who knows.                    
                </comment>
                <comment line="194">
                    power.getEigenVector();                    
                </comment>
                <declaration name="power" type="EigenPowerMethod" line="187"/>
            </method>
            <javadoc line="196">
                &lt;p&gt;
                  Generates a bound for the largest eigen value of the provided matrix using Perron-Frobenius
                  theorem.   This function only applies to non-negative real matrices.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For &quot;stochastic&quot; matrices (Markov process) this should return one for the upper and lower bound.
                  &lt;/p&gt;                
                <param>
                    A Square matrix with positive elements.  Not modified.                    
                </param>
                <param>
                    bound Where the results are stored.  If null then a matrix will be declared. Modified.                    
                </param>
                <return>
                    Lower and upper bound in the first and second elements respectively.                    
                </return>
            </javadoc>
            <method name="boundLargestEigenValue" type="double[]" line="210">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="bound" type="double[]"/>
                </params>
                <declaration name="min" type="double" line="214"/>
                <declaration name="max" type="double" line="215"/>
                <declaration name="n" type="int" line="217"/>
                <scope line="219">
                    <declaration name="total" type="double" line="220"/>
                    <scope line="221">
                        <declaration name="v" type="double" line="222"/>
                    </scope>
                    <scope line="228"/>
                    <scope line="232"/>
                </scope>
            </method>
            <javadoc line="246">
                &lt;p&gt;
                  A diagonal matrix where real diagonal element contains a real eigenvalue.  If an eigenvalue
                  is imaginary then zero is stored in its place.
                  &lt;/p&gt;                
                <param>
                    eig An eigenvalue decomposition which has already decomposed a matrix.                    
                </param>
                <return>
                    A diagonal matrix containing the eigenvalues.                    
                </return>
            </javadoc>
            <method name="createMatrixD" type="DenseMatrix64F" line="256">
                <params>
                    <param name="eig" type="EigenDecomposition"/>
                </params>
                <declaration name="N" type="int" line="257"/>
                <declaration name="D" type="DenseMatrix64F" line="259"/>
                <scope line="261">
                    <declaration name="c" type="Complex64F" line="262"/>
                    <scope line="264"/>
                </scope>
            </method>
            <javadoc line="272">
                &lt;p&gt;
                  Puts all the real eigenvectors into the columns of a matrix.  If an eigenvalue is imaginary
                  then the corresponding eigenvector will have zeros in its column.
                  &lt;/p&gt;                
                <param>
                    eig An eigenvalue decomposition which has already decomposed a matrix.                    
                </param>
                <return>
                    An m by m matrix containing eigenvectors in its columns.                    
                </return>
            </javadoc>
            <method name="createMatrixV" type="DenseMatrix64F" line="282">
                <params>
                    <param name="eig" type="EigenDecomposition<DenseMatrix64F>"/>
                </params>
                <declaration name="N" type="int" line="283"/>
                <declaration name="V" type="DenseMatrix64F" line="285"/>
                <scope line="287">
                    <declaration name="c" type="Complex64F" line="288"/>
                    <scope line="290">
                        <declaration name="v" type="DenseMatrix64F" line="291"/>
                        <scope line="293">
                            <scope line="294"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>