<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.SingularValueDecomposition"/>
        <class name="SingularOps" line="4">
            <javadoc line="4">
                Operations related to singular value decomposition.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="9">
                &lt;p&gt;
                  Adjusts the matrices so that the singular values are in descending order.
                  &lt;/p&gt;
                  &lt;p&gt;
                  In most implementations of SVD the singular values are automatically arranged in in descending
                  order.  In EJML this is not the case since it is often not needed and some computations can
                  be saved by not doing that.
                  &lt;/p&gt;                
                <param>
                    U Matrix. Modified.                    
                </param>
                <param>
                    tranU is U transposed or not.                    
                </param>
                <param>
                    W Diagonal matrix with singular values. Modified.                    
                </param>
                <param>
                    V Matrix. Modified.                    
                </param>
                <param>
                    tranV is V transposed or not.                    
                </param>
            </javadoc>
            <method name="descendingOrder" type="void" line="24">
                <params>
                    <param name="U" type="DenseMatrix64F"/>
                    <param name="tranU" type="boolean"/>
                    <param name="W" type="DenseMatrix64F"/>
                    <param name="V" type="DenseMatrix64F"/>
                    <param name="tranV" type="boolean"/>
                </params>
                <declaration name="numSingular" type="int" line="25"/>
                <scope line="27">
                    <declaration name="bigValue" type="double" line="28"/>
                    <declaration name="bigIndex" type="int" line="29"/>
                    <scope line="30">
                        <declaration name="v" type="double" line="31"/>
                        <scope line="32"/>
                    </scope>
                    <scope line="38"/>
                    <declaration name="tmp" type="double" line="41"/>
                    <scope line="44"/>
                    <scope line="47"/>
                </scope>
            </method>
            <javadoc line="52">
                &lt;p&gt;
                  Similar to {@link #descendingOrder(org.ejml.data.DenseMatrix64F,boolean,org.ejml.data.DenseMatrix64F,org.ejml.data.DenseMatrix64F,boolean)}but takes in an array of singular values instead.
                  &lt;/p&gt;                
                <param>
                    U Matrix. Modified.                    
                </param>
                <param>
                    tranU is U transposed or not.                    
                </param>
                <param>
                    singularValues Array of singular values. Modified.                    
                </param>
                <param>
                    numSingularValues Number of elements in singularValues array                    
                </param>
                <param>
                    V Matrix. Modified.                    
                </param>
                <param>
                    tranV is V transposed or not.                    
                </param>
            </javadoc>
            <method name="descendingOrder" type="void" line="63">
                <params>
                    <param name="U" type="DenseMatrix64F"/>
                    <param name="tranU" type="boolean"/>
                    <param name="singularValues" type="double"/>
                    <param name="numSingularValues" type="int"/>
                    <param name="V" type="DenseMatrix64F"/>
                    <param name="tranV" type="boolean"/>
                </params>
                <scope line="64">
                    <declaration name="bigValue" type="double" line="65"/>
                    <declaration name="bigIndex" type="int" line="66"/>
                    <scope line="67">
                        <declaration name="v" type="double" line="68"/>
                        <scope line="69"/>
                    </scope>
                    <scope line="75"/>
                    <declaration name="tmp" type="double" line="78"/>
                    <scope line="81"/>
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="89">
                Checks to see if all the provided matrices are the expected size for an SVD.  If an error is encountered
                  then an exception is thrown.  This automatically handles compact and non-compact formats                
            </javadoc>
            <method name="checkSvdMatrixSize" type="void" line="93">
                <params>
                    <param name="U" type="DenseMatrix64F"/>
                    <param name="tranU" type="boolean"/>
                    <param name="W" type="DenseMatrix64F"/>
                    <param name="V" type="DenseMatrix64F"/>
                    <param name="tranV" type="boolean"/>
                </params>
                <declaration name="numSingular" type="int" line="94"/>
                <declaration name="compact" type="boolean" line="95"/>
                <scope line="96">
                    <scope line="97"/>
                    <scope line="101"/>
                </scope>
                <scope line="106"/>
            </method>
            <method name="swapRowOrCol" type="void" line="113">
                <params>
                    <param name="M" type="DenseMatrix64F"/>
                    <param name="tran" type="boolean"/>
                    <param name="i" type="int"/>
                    <param name="bigIndex" type="int"/>
                </params>
                <declaration name="tmp" type="double" line="114"/>
                <scope line="115">
                    <scope line="116"/>
                </scope>
                <scope line="122">
                    <scope line="123"/>
                </scope>
            </method>
            <javadoc line="130">
                &lt;p&gt;
                  Returns the null-space from the singular value decomposition. The null space is a set of non-zero vectors that
                  when multiplied by the original matrix return zero.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The null space is found by extracting the columns in V that are associated singular values less than
                  or equal to the threshold. In some situations a non-compact SVD is required.
                  &lt;/p&gt;                
                <param>
                    svd A precomputed decomposition.  Not modified.                    
                </param>
                <param>
                    nullSpace Storage for null space.  Will be reshaped as needed.  Modified.                    
                </param>
                <param>
                    tol Threshold for selecting singular values.  Try UtilEjml.EPS.                    
                </param>
                <return>
                    The null space.                    
                </return>
            </javadoc>
            <method name="nullSpace" type="DenseMatrix64F" line="144">
                <params>
                    <param name="svd" type="SingularValueDecomposition<DenseMatrix64F>"/>
                    <param name="nullSpace" type="DenseMatrix64F"/>
                    <param name="tol" type="double"/>
                </params>
                <declaration name="N" type="int" line="145"/>
                <declaration name="s" type="double" line="146"/>
                <declaration name="V" type="DenseMatrix64F" line="147"/>
                <scope line="148"/>
                <declaration name="numVectors" type="int" line="151"/>
                <scope line="152">
                    <scope line="153"/>
                </scope>
                <scope line="157"/>
                <scope line="160"/>
                <declaration name="count" type="int" line="163"/>
                <scope line="164">
                    <scope line="165"/>
                </scope>
                <scope line="169"/>
            </method>
            <javadoc line="175">
                &lt;p&gt;
                  The vector associated will the smallest singular value is returned as the null space
                  of the decomposed system.  A right null space is returned if &apos;isRight&apos; is set to true,
                  and a left null space if false.
                  &lt;/p&gt;                
                <param>
                    svd A precomputed decomposition.  Not modified.                    
                </param>
                <param>
                    isRight true for right null space and false for left null space.  Right is more commonly used.                    
                </param>
                <param>
                    nullVector Optional storage for a vector for the null space.  Modified.                    
                </param>
                <return>
                    Vector in V associated with smallest singular value..                    
                </return>
            </javadoc>
            <method name="nullVector" type="DenseMatrix64F" line="186">
                <params>
                    <param name="svd" type="SingularValueDecomposition<DenseMatrix64F>"/>
                    <param name="isRight" type="boolean"/>
                    <param name="nullVector" type="DenseMatrix64F"/>
                </params>
                <declaration name="N" type="int" line="187"/>
                <declaration name="s" type="double" line="188"/>
                <declaration name="A" type="DenseMatrix64F" line="189"/>
                <scope line="190">
                    <scope line="191"/>
                    <scope line="194"/>
                </scope>
                <scope line="198">
                    <scope line="199"/>
                    <scope line="202"/>
                </scope>
                <declaration name="smallestIndex" type="int" line="206"/>
                <scope line="209">
                    <declaration name="smallestValue" type="double" line="210"/>
                    <scope line="211">
                        <scope line="212"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="222">
                Extracts the rank of a matrix using a preexisting decomposition.                
                <param>
                    svd A precomputed decomposition.  Not modified.                    
                </param>
                <param>
                    threshold Tolerance used to determine of a singular value is singular.                    
                </param>
                <return>
                    The rank of the decomposed matrix.                    
                </return>
            </javadoc>
            <method name="rank" type="int" line="228">
                <params>
                    <param name="svd" type="SingularValueDecomposition"/>
                    <param name="threshold" type="double"/>
                </params>
                <declaration name="numRank" type="int" line="229"/>
                <declaration name="w" type="double" line="230"/>
                <declaration name="N" type="int" line="231"/>
                <scope line="232"/>
            </method>
            <javadoc line="237">
                Extracts the nullity of a matrix using a preexisting decomposition.                
                <param>
                    svd A precomputed decomposition.  Not modified.                    
                </param>
                <param>
                    threshold Tolerance used to determine of a singular value is singular.                    
                </param>
                <return>
                    The nullity of the decomposed matrix.                    
                </return>
            </javadoc>
            <method name="nullity" type="int" line="243">
                <params>
                    <param name="svd" type="SingularValueDecomposition"/>
                    <param name="threshold" type="double"/>
                </params>
                <declaration name="ret" type="int" line="244"/>
                <declaration name="w" type="double" line="245"/>
                <declaration name="N" type="int" line="246"/>
                <declaration name="numCol" type="int" line="247"/>
                <scope line="248"/>
            </method>
        </class>
    </source>