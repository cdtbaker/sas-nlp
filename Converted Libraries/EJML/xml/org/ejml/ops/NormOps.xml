<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.data.D1Matrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.RowD1Matrix64F"/>
        <import package="org.ejml.factory.DecompositionFactory"/>
        <import package="org.ejml.factory.SingularValueDecomposition"/>
        <class name="NormOps" line="8">
            <javadoc line="8">
                &lt;p&gt;
                  Norms are a measure of the size of a vector or a matrix.  One typical application is in error analysis.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Vector norms have the following properties:
                  &lt;ol&gt;
                  &lt;li&gt;||x|| &gt; 0 if x &amp;ne; 0 and ||0|| = 0&lt;/li&gt;
                  &lt;li&gt;||&amp;alpha;x|| = |&amp;alpha;| ||x||&lt;/li&gt;
                  &lt;li&gt;||x+y|| &amp;le; ||x|| + ||y||&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Matrix norms have the following properties:
                  &lt;ol&gt;
                  &lt;li&gt;||A|| &gt; 0 if A &amp;ne; 0 where A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;&lt;/li&gt;
                  &lt;li&gt; || &amp;alpha; A || = |&amp;alpha;| ||A|| where A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;&lt;/li&gt;
                  &lt;li&gt;||A+B|| &amp;le; ||A|| + ||B|| where A and B are &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;&lt;/li&gt;
                  &lt;li&gt;||AB|| &amp;le; ||A|| ||B|| where A and B are &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; m&lt;/sup&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  Note that the last item in the list only applies to square matrices.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Matrix norms can be induced from vector norms as is shown below:&lt;br&gt;
                  &lt;br&gt;
                  ||A||&lt;sub&gt;M&lt;/sub&gt; = max&lt;sub&gt;x&amp;ne;0&lt;/sub&gt;||Ax||&lt;sub&gt;v&lt;/sub&gt;/||x||&lt;sub&gt;v&lt;/sub&gt;&lt;br&gt;
                  &lt;br&gt;
                  where ||.||&lt;sub&gt;M&lt;/sub&gt; is the induced matrix norm for the vector norm ||.||&lt;sub&gt;v&lt;/sub&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  By default implementations that try to mitigate overflow/underflow are used.  If the word fast is
                  found before a function&apos;s name that means it does not mitigate those issues, but runs a bit faster.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="44">
                Normalizes the matrix such that the Frobenius norm is equal to one.                
                <param>
                    A The matrix that is to be normalized.                    
                </param>
            </javadoc>
            <method name="normalizeF" type="void" line="48">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="val" type="double" line="49"/>
                <declaration name="size" type="int" line="51"/>
                <scope line="52"/>
            </method>
            <javadoc line="56">
                &lt;p&gt;
                  The condition number of a matrix is used to measure the sensitivity of the linear
                  system &lt;b&gt;Ax=b&lt;/b&gt;.  A value near one indicates that it is a well conditioned matrix.&lt;br&gt;
                  &lt;br&gt;
                  &amp;kappa;&lt;sub&gt;p&lt;/sub&gt; = ||A||&lt;sub&gt;p&lt;/sub&gt;||A&lt;sup&gt;-1&lt;/sup&gt;||&lt;sub&gt;p&lt;/sub&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the matrix is not square then the condition of either A&lt;sup&gt;T&lt;/sup&gt;A or AA&lt;sup&gt;T&lt;/sup&gt; is computed. 
                  &lt;p&gt;                
                <param>
                    A The matrix.                    
                </param>
                <param>
                    p p-norm                    
                </param>
                <return>
                    The condition number.                    
                </return>
            </javadoc>
            <method name="conditionP" type="double" line="70">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="71"/>
                <scope line="74">
                    <declaration name="A_inv" type="DenseMatrix64F" line="75"/>
                </scope>
                <scope line="79">
                    <declaration name="pinv" type="DenseMatrix64F" line="80"/>
                </scope>
            </method>
            <javadoc line="85">
                &lt;p&gt;
                  The condition p = 2 number of a matrix is used to measure the sensitivity of the linear
                  system &lt;b&gt;Ax=b&lt;/b&gt;.  A value near one indicates that it is a well conditioned matrix.&lt;br&gt;
                  &lt;br&gt;
                  &amp;kappa;&lt;sub&gt;2&lt;/sub&gt; = ||A||&lt;sub&gt;2&lt;/sub&gt;||A&lt;sup&gt;-1&lt;/sup&gt;||&lt;sub&gt;2&lt;/sub&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is also known as the spectral condition number.
                  &lt;/p&gt;                
                <param>
                    A The matrix.                    
                </param>
                <return>
                    The condition number.                    
                </return>
            </javadoc>
            <method name="conditionP2" type="double" line="98">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="svd" type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" line="99"/>
                <declaration name="singularValues" type="double[]" line="101"/>
                <declaration name="n" type="int" line="102"/>
                <declaration name="smallest" type="double" line="104"/>
                <declaration name="largest" type="double" line="105"/>
                <scope line="106"/>
            </method>
            <javadoc line="112">
                &lt;p&gt;
                  This implementation of the Frobenius norm is a straight forward implementation and can
                  be susceptible for overflow/underflow issues.  A more resilient implementation is{@link #normF}.
                  &lt;/p&gt;                
                <param>
                    a The matrix whose norm is computed.  Not modified.                    
                </param>
            </javadoc>
            <method name="fastNormF" type="double" line="119">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="total" type="double" line="120"/>
                <declaration name="size" type="int" line="121"/>
                <scope line="122">
                    <declaration name="val" type="double" line="123"/>
                </scope>
            </method>
            <javadoc line="128">
                &lt;p&gt;
                  Computes the Frobenius matrix norm:&lt;br&gt;
                  &lt;br&gt;
                  normF = Sqrt{  &amp;sum;&lt;sub&gt;i=1:m&lt;/sub&gt; &amp;sum;&lt;sub&gt;j=1:n&lt;/sub&gt; { a&lt;sub&gt;ij&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;}   }
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is equivalent to the element wise p=2 norm.  See {@link #fastNormF} for another implementation
                  that is faster, but more prone to underflow/overflow errors.
                  &lt;/p&gt;                
                <param>
                    a The matrix whose norm is computed.  Not modified.                    
                </param>
                <return>
                    The norm's value.                    
                </return>
            </javadoc>
            <method name="normF" type="double" line="141">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="total" type="double" line="142"/>
                <declaration name="scale" type="double" line="143"/>
                <declaration name="size" type="int" line="145"/>
                <scope line="146">
                    <declaration name="val" type="double" line="147"/>
                </scope>
            </method>
            <javadoc line="152">
                &lt;p&gt;
                  Element wise p-norm:&lt;br&gt;
                  &lt;br&gt;
                  norm = {&amp;sum;&lt;sub&gt;i=1:m&lt;/sub&gt; &amp;sum;&lt;sub&gt;j=1:n&lt;/sub&gt; { |a&lt;sub&gt;ij&lt;/sub&gt;|&lt;sup&gt;p&lt;/sup&gt;}}&lt;sup&gt;1/p&lt;/sup&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is not the same as the induced p-norm used on matrices, but is the same as the vector p-norm.
                  &lt;/p&gt;                
                <param>
                    A Matrix. Not modified.                    
                </param>
                <param>
                    p p value.                    
                </param>
                <return>
                    The norm's value.                    
                </return>
            </javadoc>
            <method name="elementP" type="double" line="165">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="166"/>
                <scope line="169"/>
                <scope line="172">
                    <declaration name="max" type="double" line="173"/>
                    <declaration name="total" type="double" line="175"/>
                    <declaration name="size" type="int" line="176"/>
                    <scope line="177">
                        <declaration name="a" type="double" line="178"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="184">
                Same as {@link #elementP} but runs faster by not mitigating overflow/underflow related problems.                
                <param>
                    A Matrix. Not modified.                    
                </param>
                <param>
                    p p value.                    
                </param>
                <return>
                    The norm's value.                    
                </return>
            </javadoc>
            <method name="fastElementP" type="double" line="190">
                <params>
                    <param name="A" type="D1Matrix64F"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="191"/>
                <scope line="194">
                    <declaration name="total" type="double" line="195"/>
                    <declaration name="size" type="int" line="196"/>
                    <scope line="197">
                        <declaration name="a" type="double" line="198"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="204">
                Computes either the vector p-norm or the induced matrix p-norm depending on A
                  being a vector or a matrix respectively.                
                <param>
                    A Vector or matrix whose norm is to be computed.                    
                </param>
                <param>
                    p The p value of the p-norm.                    
                </param>
                <return>
                    The computed norm.                    
                </return>
            </javadoc>
            <method name="normP" type="double" line="211">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="212"/>
                <scope line="215"/>
                <scope line="218"/>
                <scope line="221"/>
                <scope line="224"/>
            </method>
            <javadoc line="228">
                An unsafe but faster version of {@link #normP} that calls routines which are faster
                  but more prone to overflow/underflow problems.                
                <param>
                    A Vector or matrix whose norm is to be computed.                    
                </param>
                <param>
                    p The p value of the p-norm.                    
                </param>
                <return>
                    The computed norm.                    
                </return>
            </javadoc>
            <method name="fastNormP" type="double" line="235">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="236"/>
                <scope line="239"/>
                <scope line="242"/>
                <scope line="245"/>
                <scope line="248"/>
            </method>
            <javadoc line="252">
                Computes the p=1 norm.  If A is a matrix then the induced norm is computed.                
                <param>
                    A Matrix or vector.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="normP1" type="double" line="257">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="258"/>
                <scope line="261"/>
            </method>
            <javadoc line="265">
                Computes the p=2 norm.  If A is a matrix then the induced norm is computed.                
                <param>
                    A Matrix or vector.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="normP2" type="double" line="270">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="271"/>
                <scope line="274"/>
            </method>
            <javadoc line="278">
                Computes the p=2 norm.  If A is a matrix then the induced norm is computed. This
                  implementation is faster, but more prone to buffer overflow or underflow problems.                
                <param>
                    A Matrix or vector.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="fastNormP2" type="double" line="284">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="285"/>
                <scope line="288"/>
            </method>
            <javadoc line="292">
                Computes the p=&amp;#8734; norm.  If A is a matrix then the induced norm is computed.                
                <param>
                    A Matrix or vector.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="normPInf" type="double" line="297">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="298"/>
                <scope line="301"/>
            </method>
            <javadoc line="305">
                &lt;p&gt;
                  Computes the induced p = 1 matrix norm.&lt;br&gt;
                  &lt;br&gt;
                  ||A||&lt;sub&gt;1&lt;/sub&gt;= max(j=1 to n; sum(i=1 to m; |a&lt;sub&gt;ij&lt;/sub&gt;|))
                  &lt;/p&gt;                
                <param>
                    A Matrix. Not modified.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="inducedP1" type="double" line="314">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="max" type="double" line="315"/>
                <declaration name="m" type="int" line="316"/>
                <declaration name="n" type="int" line="317"/>
                <scope line="318">
                    <declaration name="total" type="double" line="319"/>
                    <scope line="320"/>
                    <scope line="323"/>
                </scope>
            </method>
            <javadoc line="329">
                &lt;p&gt;
                  Computes the induced p = 2 matrix norm, which is the largest singular value.
                  &lt;/p&gt;                
                <param>
                    A Matrix. Not modified.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="inducedP2" type="double" line="336">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="svd" type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" line="337"/>
                <declaration name="singularValues" type="double[]" line="339"/>
            </method>
            <javadoc line="342">
                &lt;p&gt;
                  Induced matrix p = infinity norm.&lt;br&gt;
                  &lt;br&gt;
                  ||A||&lt;sub&gt;&amp;#8734;&lt;/sub&gt; = max(i=1 to m; sum(j=1 to n; |a&lt;sub&gt;ij&lt;/sub&gt;|))
                  &lt;/p&gt;                
                <param>
                    A A matrix.                    
                </param>
                <return>
                    the norm.                    
                </return>
            </javadoc>
            <method name="inducedPInf" type="double" line="351">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="max" type="double" line="352"/>
                <declaration name="m" type="int" line="353"/>
                <declaration name="n" type="int" line="354"/>
                <scope line="355">
                    <declaration name="total" type="double" line="356"/>
                    <scope line="357"/>
                    <scope line="360"/>
                </scope>
            </method>
        </class>
    </source>