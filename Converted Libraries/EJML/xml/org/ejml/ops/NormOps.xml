<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.data.D1Matrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.RowD1Matrix64F"/>
        <import package="org.ejml.factory.DecompositionFactory"/>
        <import package="org.ejml.interfaces.decomposition.SingularValueDecomposition"/>
        <class name="NormOps" line="29">
            <javadoc line="29">
                &lt;p&gt;
                  Norms are a measure of the size of a vector or a matrix.  One typical application is in error analysis.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Vector norms have the following properties:
                  &lt;ol&gt;
                  &lt;li&gt;||x|| &gt; 0 if x &amp;ne; 0 and ||0|| = 0&lt;/li&gt;
                  &lt;li&gt;||&amp;alpha;x|| = |&amp;alpha;| ||x||&lt;/li&gt;
                  &lt;li&gt;||x+y|| &amp;le; ||x|| + ||y||&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Matrix norms have the following properties:
                  &lt;ol&gt;
                  &lt;li&gt;||A|| &gt; 0 if A &amp;ne; 0 where A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;&lt;/li&gt;
                  &lt;li&gt; || &amp;alpha; A || = |&amp;alpha;| ||A|| where A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;&lt;/li&gt;
                  &lt;li&gt;||A+B|| &amp;le; ||A|| + ||B|| where A and B are &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;&lt;/li&gt;
                  &lt;li&gt;||AB|| &amp;le; ||A|| ||B|| where A and B are &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; m&lt;/sup&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  Note that the last item in the list only applies to square matrices.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Matrix norms can be induced from vector norms as is shown below:&lt;br&gt;
                  &lt;br&gt;
                  ||A||&lt;sub&gt;M&lt;/sub&gt; = max&lt;sub&gt;x&amp;ne;0&lt;/sub&gt;||Ax||&lt;sub&gt;v&lt;/sub&gt;/||x||&lt;sub&gt;v&lt;/sub&gt;&lt;br&gt;
                  &lt;br&gt;
                  where ||.||&lt;sub&gt;M&lt;/sub&gt; is the induced matrix norm for the vector norm ||.||&lt;sub&gt;v&lt;/sub&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  By default implementations that try to mitigate overflow/underflow are used.  If the word fast is
                  found before a function&apos;s name that means it does not mitigate those issues, but runs a bit faster.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="70">
                Normalizes the matrix such that the Frobenius norm is equal to one.                
                <param>
                    A The matrix that is to be normalized.                    
                </param>
            </javadoc>
            <method name="normalizeF" type="void" line="75">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="val" type="double" line="76"/>
                <declaration name="size" type="int" line="81"/>
                <scope line="83"/>
            </method>
            <javadoc line="88">
                &lt;p&gt;
                  The condition number of a matrix is used to measure the sensitivity of the linear
                  system &lt;b&gt;Ax=b&lt;/b&gt;.  A value near one indicates that it is a well conditioned matrix.&lt;br&gt;
                  &lt;br&gt;
                  &amp;kappa;&lt;sub&gt;p&lt;/sub&gt; = ||A||&lt;sub&gt;p&lt;/sub&gt;||A&lt;sup&gt;-1&lt;/sup&gt;||&lt;sub&gt;p&lt;/sub&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the matrix is not square then the condition of either A&lt;sup&gt;T&lt;/sup&gt;A or AA&lt;sup&gt;T&lt;/sup&gt; is computed. 
                  &lt;p&gt;                
                <param>
                    A The matrix.                    
                </param>
                <param>
                    p p-norm                    
                </param>
                <return>
                    The condition number.                    
                </return>
            </javadoc>
            <method name="conditionP" type="double" line="103">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="p" type="double"/>
                </params>
                <comment line="108">
                    square matrices are the typical case                    
                </comment>
                <scope line="104"/>
                <scope line="106">
                    <declaration name="A_inv" type="DenseMatrix64F" line="109"/>
                </scope>
                <scope line="115">
                    <declaration name="pinv" type="DenseMatrix64F" line="116"/>
                </scope>
            </method>
            <javadoc line="123">
                &lt;p&gt;
                  The condition p = 2 number of a matrix is used to measure the sensitivity of the linear
                  system &lt;b&gt;Ax=b&lt;/b&gt;.  A value near one indicates that it is a well conditioned matrix.&lt;br&gt;
                  &lt;br&gt;
                  &amp;kappa;&lt;sub&gt;2&lt;/sub&gt; = ||A||&lt;sub&gt;2&lt;/sub&gt;||A&lt;sup&gt;-1&lt;/sup&gt;||&lt;sub&gt;2&lt;/sub&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is also known as the spectral condition number.
                  &lt;/p&gt;                
                <param>
                    A The matrix.                    
                </param>
                <return>
                    The condition number.                    
                </return>
            </javadoc>
            <method name="conditionP2" type="double" line="138">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="svd" type="SingularValueDecomposition&amp;lt;DenseMatrix64F&amp;gt;" line="139"/>
                <declaration name="singularValues" type="double[]" line="143"/>
                <declaration name="n" type="int" line="145"/>
                <declaration name="smallest" type="double" line="149"/>
                <declaration name="largest" type="double" line="150"/>
                <scope line="152"/>
            </method>
            <javadoc line="162">
                &lt;p&gt;
                  This implementation of the Frobenius norm is a straight forward implementation and can
                  be susceptible for overflow/underflow issues.  A more resilient implementation is{@link #normF}.
                  &lt;/p&gt;                
                <param>
                    a The matrix whose norm is computed.  Not modified.                    
                </param>
            </javadoc>
            <method name="fastNormF" type="double" line="171">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="total" type="double" line="172"/>
                <declaration name="size" type="int" line="174"/>
                <scope line="176">
                    <declaration name="val" type="double" line="177"/>
                </scope>
            </method>
            <javadoc line="184">
                &lt;p&gt;
                  Computes the Frobenius matrix norm:&lt;br&gt;
                  &lt;br&gt;
                  normF = Sqrt{  &amp;sum;&lt;sub&gt;i=1:m&lt;/sub&gt; &amp;sum;&lt;sub&gt;j=1:n&lt;/sub&gt; { a&lt;sub&gt;ij&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;}   }
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is equivalent to the element wise p=2 norm.  See {@link #fastNormF} for another implementation
                  that is faster, but more prone to underflow/overflow errors.
                  &lt;/p&gt;                
                <param>
                    a The matrix whose norm is computed.  Not modified.                    
                </param>
                <return>
                    The norm&apos;s value.                    
                </return>
            </javadoc>
            <method name="normF" type="double" line="198">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                </params>
                <declaration name="total" type="double" line="199"/>
                <declaration name="scale" type="double" line="201"/>
                <declaration name="size" type="int" line="206"/>
                <scope line="208">
                    <declaration name="val" type="double" line="209"/>
                </scope>
            </method>
            <javadoc line="216">
                &lt;p&gt;
                  Element wise p-norm:&lt;br&gt;
                  &lt;br&gt;
                  norm = {&amp;sum;&lt;sub&gt;i=1:m&lt;/sub&gt; &amp;sum;&lt;sub&gt;j=1:n&lt;/sub&gt; { |a&lt;sub&gt;ij&lt;/sub&gt;|&lt;sup&gt;p&lt;/sup&gt;}}&lt;sup&gt;1/p&lt;/sup&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is not the same as the induced p-norm used on matrices, but is the same as the vector p-norm.
                  &lt;/p&gt;                
                <param>
                    A Matrix. Not modified.                    
                </param>
                <param>
                    p p value.                    
                </param>
                <return>
                    The norm&apos;s value.                    
                </return>
            </javadoc>
            <method name="elementP" type="double" line="231">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="232"/>
                <scope line="234"/>
                <scope line="236">
                    <declaration name="max" type="double" line="237"/>
                    <declaration name="total" type="double" line="242"/>
                    <declaration name="size" type="int" line="244"/>
                    <scope line="246">
                        <declaration name="a" type="double" line="247"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="256">
                Same as {@link #elementP} but runs faster by not mitigating overflow/underflow related problems.                
                <param>
                    A Matrix. Not modified.                    
                </param>
                <param>
                    p p value.                    
                </param>
                <return>
                    The norm&apos;s value.                    
                </return>
            </javadoc>
            <method name="fastElementP" type="double" line="263">
                <params>
                    <param name="A" type="D1Matrix64F"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="264"/>
                <scope line="266">
                    <declaration name="total" type="double" line="267"/>
                    <declaration name="size" type="int" line="269"/>
                    <scope line="271">
                        <declaration name="a" type="double" line="272"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="281">
                Computes either the vector p-norm or the induced matrix p-norm depending on A
                  being a vector or a matrix respectively.                
                <param>
                    A Vector or matrix whose norm is to be computed.                    
                </param>
                <param>
                    p The p value of the p-norm.                    
                </param>
                <return>
                    The computed norm.                    
                </return>
            </javadoc>
            <method name="normP" type="double" line="289">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="290"/>
                <scope line="292"/>
                <scope line="294"/>
                <scope line="297"/>
                <scope line="299"/>
            </method>
            <javadoc line="304">
                An unsafe but faster version of {@link #normP} that calls routines which are faster
                  but more prone to overflow/underflow problems.                
                <param>
                    A Vector or matrix whose norm is to be computed.                    
                </param>
                <param>
                    p The p value of the p-norm.                    
                </param>
                <return>
                    The computed norm.                    
                </return>
            </javadoc>
            <method name="fastNormP" type="double" line="312">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="313"/>
                <scope line="315"/>
                <scope line="317"/>
                <scope line="320"/>
                <scope line="322"/>
            </method>
            <javadoc line="327">
                Computes the p=1 norm.  If A is a matrix then the induced norm is computed.                
                <param>
                    A Matrix or vector.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="normP1" type="double" line="333">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="334"/>
                <scope line="336"/>
            </method>
            <javadoc line="341">
                Computes the p=2 norm.  If A is a matrix then the induced norm is computed.                
                <param>
                    A Matrix or vector.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="normP2" type="double" line="347">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="348"/>
                <scope line="350"/>
            </method>
            <javadoc line="355">
                Computes the p=2 norm.  If A is a matrix then the induced norm is computed. This
                  implementation is faster, but more prone to buffer overflow or underflow problems.                
                <param>
                    A Matrix or vector.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="fastNormP2" type="double" line="362">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="363"/>
                <scope line="365"/>
            </method>
            <javadoc line="370">
                Computes the p=&amp;#8734; norm.  If A is a matrix then the induced norm is computed.                
                <param>
                    A Matrix or vector.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="normPInf" type="double" line="376">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="377"/>
                <scope line="379"/>
            </method>
            <javadoc line="384">
                &lt;p&gt;
                  Computes the induced p = 1 matrix norm.&lt;br&gt;
                  &lt;br&gt;
                  ||A||&lt;sub&gt;1&lt;/sub&gt;= max(j=1 to n; sum(i=1 to m; |a&lt;sub&gt;ij&lt;/sub&gt;|))
                  &lt;/p&gt;                
                <param>
                    A Matrix. Not modified.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="inducedP1" type="double" line="394">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="max" type="double" line="395"/>
                <declaration name="m" type="int" line="397"/>
                <declaration name="n" type="int" line="398"/>
                <scope line="400">
                    <declaration name="total" type="double" line="401"/>
                    <scope line="402"/>
                    <scope line="405"/>
                </scope>
            </method>
            <javadoc line="413">
                &lt;p&gt;
                  Computes the induced p = 2 matrix norm, which is the largest singular value.
                  &lt;/p&gt;                
                <param>
                    A Matrix. Not modified.                    
                </param>
                <return>
                    The norm.                    
                </return>
            </javadoc>
            <method name="inducedP2" type="double" line="421">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <comment line="430">
                    the largest singular value is the induced p2 norm                    
                </comment>
                <declaration name="svd" type="SingularValueDecomposition&amp;lt;DenseMatrix64F&amp;gt;" line="422"/>
                <declaration name="singularValues" type="double[]" line="427"/>
            </method>
            <javadoc line="433">
                &lt;p&gt;
                  Induced matrix p = infinity norm.&lt;br&gt;
                  &lt;br&gt;
                  ||A||&lt;sub&gt;&amp;#8734;&lt;/sub&gt; = max(i=1 to m; sum(j=1 to n; |a&lt;sub&gt;ij&lt;/sub&gt;|))
                  &lt;/p&gt;                
                <param>
                    A A matrix.                    
                </param>
                <return>
                    the norm.                    
                </return>
            </javadoc>
            <method name="inducedPInf" type="double" line="443">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="max" type="double" line="444"/>
                <declaration name="m" type="int" line="446"/>
                <declaration name="n" type="int" line="447"/>
                <scope line="449">
                    <declaration name="total" type="double" line="450"/>
                    <scope line="451"/>
                    <scope line="454"/>
                </scope>
            </method>
        </class>
    </source>