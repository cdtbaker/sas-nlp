<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.chol">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.interfaces.decomposition.CholeskyDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="CholeskyDecompositionCommon_D64" line="27">
            <comment line="54">
                it can decompose a matrix up to this width                
            </comment>
            <comment line="57">
                width and height of the matrix                
            </comment>
            <comment line="60">
                the decomposed matrix                
            </comment>
            <comment line="64">
                tempoary variable used by various functions                
            </comment>
            <comment line="67">
                is it a lower triangular matrix or an upper triangular matrix                
            </comment>
            <implements interface="CholeskyDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="27">
                &lt;p&gt;
                  This is an abstract class for a Cholesky decomposition.  It provides the solvers, but the actual
                  decompsoition is provided in other classes.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A Cholesky Decomposition is a special decomposition for positive-definite symmetric matrices
                  that is more efficient than other general purposes decomposition. It refactors matrices
                  using one of the two following equations:&lt;br&gt;
                  &lt;br&gt;
                  LL&lt;sup&gt;T&lt;/sup&gt;=A&lt;br&gt;
                  R&lt;sup&gt;T&lt;/sup&gt;R=A&lt;br&gt;
                  &lt;br&gt;
                  where L is a lower triangular matrix and R is an upper traingular matrix.&lt;br&gt;
                  &lt;/p&gt;                
                <see>
                    CholeskyDecompositionInner_D64                    
                </see>
                <see>
                    CholeskyDecompositionBlock_D64                    
                </see>
                <see>
                    CholeskyDecompositionLDL_D64                    
                </see>
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="maxWidth" type="int" line="54"/>
            <declaration name="n" type="int" line="57"/>
            <declaration name="T" type="DenseMatrix64F" line="60"/>
            <declaration name="t" type="double[]" line="61"/>
            <declaration name="vv" type="double" line="64"/>
            <declaration name="lower" type="boolean" line="67"/>
            <javadoc line="69">
                Creates a CholeksyDecomposition capable of decompositong a matrix that is
                  n by n, where n is the width.                
                <param>
                    lower should a lower or upper triangular matrix be used.                    
                </param>
            </javadoc>
            <method name="CholeskyDecompositionCommon_D64" type="constructor" line="75">
                <params>
                    <param name="lower" type="boolean"/>
                </params>
            </method>
            <method name="setExpectedMaxSize" type="void" line="79">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
                <scope line="80"/>
            </method>
            <javadoc line="89">
                If true the decomposition was for a lower triangular matrix.
                  If false it was for an upper triangular matrix.                
                <return>
                    True if lower, false if upper.                    
                </return>
            </javadoc>
            <method name="isLower" type="boolean" line="96"/>
            <javadoc line="100">
                &lt;p&gt;
                  Performs Choleksy decomposition on the provided matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the matrix is not positive definite then this function will return
                  false since it can&apos;t complete its computations.  Not all errors will be
                  found.  This is an efficient way to check for positive definiteness.
                  &lt;/p&gt;                
                <param>
                    mat A symmetric positive definite matrix with n &lt;= widthMax.                    
                </param>
                <return>
                    True if it was able to finish the decomposition.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="114">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                </params>
                <scope line="115"/>
                <scope line="117"/>
                <scope line="126"/>
                <scope line="128"/>
            </method>
            <method name="inputModified" type="boolean" line="134"/>
            <method name="decomposeLower" type="boolean" line="138"/>
            <javadoc line="138">
                Performs an lower triangular decomposition.                
                <return>
                    true if the matrix was decomposed.                    
                </return>
            </javadoc>
            <method name="decomposeUpper" type="boolean" line="145"/>
            <javadoc line="145">
                Performs an upper triangular decomposition.                
                <return>
                    true if the matrix was decomposed.                    
                </return>
            </javadoc>
            <method name="getT" type="DenseMatrix64F" line="153">
                <params>
                    <param name="T" type="DenseMatrix64F"/>
                </params>
                <comment line="155">
                    see if it needs to declare a new matrix or not                    
                </comment>
                <comment line="165">
                    write the values to T                    
                </comment>
                <scope line="155"/>
                <scope line="157"/>
                <scope line="165">
                    <scope line="166">
                        <scope line="167"/>
                    </scope>
                </scope>
                <scope line="171">
                    <scope line="172">
                        <scope line="173"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="182">
                Returns the triangular matrix from the decomposition.                
                <return>
                    A lower or upper triangular matrix.                    
                </return>
            </javadoc>
            <method name="getT" type="DenseMatrix64F" line="187"/>
            <method name="_getVV" type="double[]" line="191"/>
        </class>
    </source>