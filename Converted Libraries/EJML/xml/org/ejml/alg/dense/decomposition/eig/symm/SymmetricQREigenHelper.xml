<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.eig.symm">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.alg.dense.decomposition.eig.EigenvalueSmall"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="java.util.Random"/>
        <class name="SymmetricQREigenHelper" line="6">
            <javadoc line="6">
                A helper class for the symmetric matrix implicit QR algorithm for eigenvalue decomposition.
                  Performs most of the basic operations needed to extract eigenvalues and eigenvectors.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="rand" type="Random" line="12"/>
            <declaration name="steps" type="int" line="13"/>
            <declaration name="numExceptional" type="int" line="14"/>
            <declaration name="lastExceptional" type="int" line="15"/>
            <declaration name="eigenSmall" type="EigenvalueSmall" line="16"/>
            <declaration name="Q" type="DenseMatrix64F" line="17"/>
            <declaration name="N" type="int" line="18"/>
            <declaration name="diag" type="double" line="19"/>
            <declaration name="off" type="double" line="20"/>
            <declaration name="x1" type="int" line="21"/>
            <declaration name="x2" type="int" line="22"/>
            <declaration name="splits" type="int" line="23"/>
            <declaration name="numSplits" type="int" line="24"/>
            <declaration name="bulge" type="double" line="25"/>
            <declaration name="c" type="double" line="26"/>
            <method name="SymmetricQREigenHelper" type="constructor" line="27"/>
            <method name="printMatrix" type="void" line="30">
                <scope line="32"/>
                <scope line="37"/>
            </method>
            <method name="setQ" type="void" line="42">
                <params>
                    <param name="q" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="incrementSteps" type="void" line="45"/>
            <javadoc line="48">
                Sets up and declares internal data structures.                
                <param>
                    diag Diagonal elements from tridiagonal matrix. Modified.                    
                </param>
                <param>
                    off Off diagonal elements from tridiagonal matrix. Modified.                    
                </param>
                <param>
                    numCols number of columns (and rows) in the matrix.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="54">
                <params>
                    <param name="diag" type="double"/>
                    <param name="off" type="double"/>
                    <param name="numCols" type="int"/>
                </params>
            </method>
            <javadoc line="59">
                Exchanges the internal array of the diagonal elements for the provided one.                
            </javadoc>
            <method name="swapDiag" type="double[]" line="62">
                <params>
                    <param name="diag" type="double"/>
                </params>
                <declaration name="ret" type="double[]" line="63"/>
            </method>
            <javadoc line="67">
                Exchanges the internal array of the off diagonal elements for the provided one.                
            </javadoc>
            <method name="swapOff" type="double[]" line="70">
                <params>
                    <param name="off" type="double"/>
                </params>
                <declaration name="ret" type="double[]" line="71"/>
            </method>
            <javadoc line="75">
                Sets the size of the matrix being decomposed, declares new memory if needed,
                  and sets all helper functions to their initial value.                
            </javadoc>
            <method name="reset" type="void" line="79">
                <params>
                    <param name="N" type="int"/>
                </params>
                <scope line="83"/>
            </method>
            <method name="copyDiag" type="double[]" line="92">
                <params>
                    <param name="ret" type="double[]"/>
                </params>
                <scope line="93"/>
            </method>
            <method name="copyOff" type="double[]" line="99">
                <params>
                    <param name="ret" type="double[]"/>
                </params>
                <scope line="100"/>
            </method>
            <method name="copyEigenvalues" type="double[]" line="106">
                <params>
                    <param name="ret" type="double[]"/>
                </params>
                <scope line="107"/>
            </method>
            <javadoc line="113">
                Sets which submatrix is being processed.                
                <param>
                    x1 Lower bound, inclusive.                    
                </param>
                <param>
                    x2 Upper bound, inclusive.                    
                </param>
            </javadoc>
            <method name="setSubmatrix" type="void" line="118">
                <params>
                    <param name="x1" type="int"/>
                    <param name="x2" type="int"/>
                </params>
            </method>
            <javadoc line="122">
                Checks to see if the specified off diagonal element is zero using a relative metric.                
            </javadoc>
            <method name="isZero" type="boolean" line="125">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="bottom" type="double" line="126"/>
            </method>
            <method name="performImplicitSingleStep" type="void" line="129">
                <params>
                    <param name="lambda" type="double"/>
                    <param name="byAngle" type="boolean"/>
                </params>
                <scope line="130"/>
                <scope line="133">
                    <scope line="135"/>
                </scope>
            </method>
            <method name="updateQ" type="void" line="141">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="c" type="double"/>
                    <param name="s" type="double"/>
                </params>
                <declaration name="rowA" type="int" line="142"/>
                <declaration name="rowB" type="int" line="143"/>
                <declaration name="endA" type="int" line="144"/>
                <scope line="145">
                    <declaration name="a" type="double" line="146"/>
                    <declaration name="b" type="double" line="147"/>
                </scope>
            </method>
            <javadoc line="152">
                Performs a similar transform on A-pI                
            </javadoc>
            <method name="createBulge" type="void" line="155">
                <params>
                    <param name="x1" type="int"/>
                    <param name="p" type="double"/>
                    <param name="byAngle" type="boolean"/>
                </params>
                <declaration name="a11" type="double" line="156"/>
                <declaration name="a22" type="double" line="157"/>
                <declaration name="a12" type="double" line="158"/>
                <declaration name="a23" type="double" line="159"/>
                <scope line="160"/>
                <scope line="167"/>
            </method>
            <method name="createBulge2by2" type="void" line="177">
                <params>
                    <param name="x1" type="int"/>
                    <param name="p" type="double"/>
                    <param name="byAngle" type="boolean"/>
                </params>
                <declaration name="a11" type="double" line="178"/>
                <declaration name="a22" type="double" line="179"/>
                <declaration name="a12" type="double" line="180"/>
                <scope line="181"/>
                <scope line="188"/>
            </method>
            <javadoc line="196">
                Computes the rotation and stores it in (c,s)                
            </javadoc>
            <method name="computeRotation" type="void" line="199">
                <params>
                    <param name="run" type="double"/>
                    <param name="rise" type="double"/>
                </params>
                <scope line="200">
                    <declaration name="k" type="double" line="201"/>
                    <declaration name="bottom" type="double" line="202"/>
                    <declaration name="bottom_sq" type="double" line="203"/>
                </scope>
                <scope line="210">
                    <declaration name="t" type="double" line="211"/>
                    <declaration name="bottom" type="double" line="212"/>
                    <declaration name="bottom_sq" type="double" line="213"/>
                </scope>
            </method>
            <method name="removeBulge" type="void" line="221">
                <params>
                    <param name="x1" type="int"/>
                </params>
                <declaration name="a22" type="double" line="222"/>
                <declaration name="a33" type="double" line="223"/>
                <declaration name="a12" type="double" line="224"/>
                <declaration name="a23" type="double" line="225"/>
                <declaration name="a34" type="double" line="226"/>
            </method>
            <javadoc line="236">
                Rotator to remove the bulge                
            </javadoc>
            <method name="removeBulgeEnd" type="void" line="239">
                <params>
                    <param name="x1" type="int"/>
                </params>
                <declaration name="a22" type="double" line="240"/>
                <declaration name="a12" type="double" line="241"/>
                <declaration name="a23" type="double" line="242"/>
                <declaration name="a33" type="double" line="243"/>
            </method>
            <javadoc line="251">
                Computes the eigenvalue of the 2 by 2 matrix.                
            </javadoc>
            <method name="eigenvalue2by2" type="void" line="254">
                <params>
                    <param name="x1" type="int"/>
                </params>
                <declaration name="a" type="double" line="255"/>
                <declaration name="b" type="double" line="256"/>
                <declaration name="c" type="double" line="257"/>
                <declaration name="absA" type="double" line="258"/>
                <declaration name="absB" type="double" line="259"/>
                <declaration name="absC" type="double" line="260"/>
                <declaration name="scale" type="double" line="261"/>
                <scope line="263"/>
            </method>
            <javadoc line="277">
                Perform a shift in a random direction that is of the same magnitude as the elements in the matrix.                
            </javadoc>
            <method name="exceptionalShift" type="void" line="280">
                <declaration name="mag" type="double" line="282"/>
                <declaration name="theta" type="double" line="284"/>
            </method>
            <javadoc line="288">
                Tells it to process the submatrix at the next split.  Should be called after the
                  current submatrix has been processed.                
            </javadoc>
            <method name="nextSplit" type="boolean" line="292"/>
            <method name="computeShift" type="double" line="299"/>
            <method name="computeWilkinsonShift" type="double" line="303">
                <declaration name="a" type="double" line="304"/>
                <declaration name="b" type="double" line="305"/>
                <declaration name="c" type="double" line="306"/>
                <declaration name="absA" type="double" line="307"/>
                <declaration name="absB" type="double" line="308"/>
                <declaration name="absC" type="double" line="309"/>
                <declaration name="scale" type="double" line="310"/>
                <scope line="312"/>
                <declaration name="diff0" type="double" line="319"/>
                <declaration name="diff1" type="double" line="320"/>
            </method>
            <method name="getMatrixSize" type="int" line="324"/>
            <method name="resetSteps" type="void" line="327"/>
        </class>
    </source>