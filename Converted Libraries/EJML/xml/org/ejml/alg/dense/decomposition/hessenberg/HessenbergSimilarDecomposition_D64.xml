<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.hessenberg">
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.interfaces.decomposition.DecompositionInterface"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="HessenbergSimilarDecomposition_D64" line="26">
            <comment line="48">
                TODO create a column based one similar to what was done for QR decomposition?                
            </comment>
            <comment line="51">
                A combined matrix that stores te upper Hessenberg matrix and the orthogonal matrix.                
            </comment>
            <comment line="53">
                number of rows and columns of the matrix being decompose                
            </comment>
            <comment line="56">
                the first element in the orthogonal vectors                
            </comment>
            <comment line="58">
                temporary storage                
            </comment>
            <implements interface="DecompositionInterface">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="26">
                &lt;p&gt;
                  Finds the decomposition of a matrix in the form of:&lt;br&gt;
                  &lt;br&gt;
                  A = OHO&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;br&gt;
                  where A is an m by m matrix, O is an orthogonal matrix, and H is an upper Hessenberg matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A matrix is upper Hessenberg if a&lt;sup&gt;ij&lt;/sup&gt; = 0 for all i &gt; j+1. For example, the following matrix
                  is upper Hessenberg.&lt;br&gt;
                  &lt;br&gt;
                  WRITE IT OUT USING A TABLE
                  &lt;/p&gt;
                  &lt;p&gt;
                  This decomposition is primarily used as a step for computing the eigenvalue decomposition of a matrix.
                  The basic algorithm comes from David S. Watkins, &quot;Fundamentals of MatrixComputations&quot; Second Edition.
                  &lt;/p&gt;                
            </javadoc>
            <declaration name="QH" type="DenseMatrix64F" line="51"/>
            <declaration name="N" type="int" line="53"/>
            <declaration name="gammas" type="double" line="56"/>
            <declaration name="b" type="double" line="58"/>
            <declaration name="u" type="double" line="59"/>
            <javadoc line="61">
                Creates a decomposition that won&apos;t need to allocate new memory if it is passed matrices up to
                  the specified size.                
                <param>
                    initialSize Expected size of the matrices it will decompose.                    
                </param>
            </javadoc>
            <method name="HessenbergSimilarDecomposition_D64" type="constructor" line="67">
                <params>
                    <param name="initialSize" type="int"/>
                </params>
            </method>
            <method name="HessenbergSimilarDecomposition_D64" type="constructor" line="73"/>
            <javadoc line="77">
                Computes the decomposition of the provided matrix.  If no errors are detected then true is returned,
                  false otherwise.                
                <param>
                    A  The matrix that is being decomposed.  Not modified.                    
                </param>
                <return>
                    If it detects any errors or not.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="85">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="93"/>
            </method>
            <method name="inputModified" type="boolean" line="102"/>
            <javadoc line="106">
                The raw QH matrix that is stored internally.                
                <return>
                    QH matrix.                    
                </return>
            </javadoc>
            <method name="getQH" type="DenseMatrix64F" line="111"/>
            <javadoc line="115">
                An upper Hessenberg matrix from the decompostion.                
                <param>
                    H If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted H matrix.                    
                </return>
            </javadoc>
            <method name="getH" type="DenseMatrix64F" line="121">
                <params>
                    <param name="H" type="DenseMatrix64F"/>
                </params>
                <comment line="130">
                    copy the first row                    
                </comment>
                <scope line="122"/>
                <scope line="132">
                    <scope line="133"/>
                </scope>
            </method>
            <javadoc line="141">
                An orthogonal matrix that has the following property: H = Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <param>
                    Q If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getQ" type="DenseMatrix64F" line="147">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                </params>
                <scope line="148">
                    <scope line="150"/>
                </scope>
                <scope line="158">
                    <scope line="160"/>
                </scope>
            </method>
            <javadoc line="169">
                Internal function for computing the decomposition.                
            </javadoc>
            <method name="_decompose" type="boolean" line="172">
                <comment line="177">
                    find the largest value in this column
                     this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <comment line="182">
                    copy the householder vector to vector outside of the matrix to reduce caching issues
                     big improvement on larger matrices and a relatively small performance hit on small matrices.                    
                </comment>
                <comment line="191">
                    -------- set up the reflector Q_k                    
                </comment>
                <comment line="194">
                    normalize to reduce overflow/underflow
                     and compute tau for the reflector                    
                </comment>
                <comment line="206">
                    write the reflector into the lower left column of the matrix                    
                </comment>
                <comment line="217">
                    ---------- multiply on the left by Q_k                    
                </comment>
                <comment line="220">
                    ---------- multiply on the right by Q_k                    
                </comment>
                <comment line="223">
                    since the first element in the householder vector is known to be 1
                     store the full upper hessenberg                    
                </comment>
                <declaration name="h" type="double" line="173"/>
                <scope line="175">
                    <declaration name="max" type="double" line="178"/>
                    <scope line="180">
                        <declaration name="val" type="double" line="183"/>
                    </scope>
                    <scope line="189">
                        <declaration name="tau" type="double" line="192"/>
                        <scope line="195">
                            <declaration name="val" type="double" line="196"/>
                        </scope>
                        <declaration name="nu" type="double" line="206"/>
                        <scope line="209"/>
                        <declaration name="gamma" type="double" line="213"/>
                    </scope>
                    <scope line="226"/>
                </scope>
            </method>
            <method name="getGammas" type="double[]" line="235"/>
        </class>
    </source>