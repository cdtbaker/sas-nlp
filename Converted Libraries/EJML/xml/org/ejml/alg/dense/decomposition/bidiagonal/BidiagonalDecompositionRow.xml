<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.bidiagonal">
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="BidiagonalDecompositionRow" line="5">
            <implements interface="BidiagonalDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="5">
                &lt;p&gt;
                  Performs a {@link org.ejml.alg.dense.decomposition.bidiagonal.BidiagonalDecomposition} using
                  householder reflectors.  This is efficient on wide or square matrices.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="UBV" type="DenseMatrix64F" line="13"/>
            <declaration name="m" type="int" line="14"/>
            <declaration name="n" type="int" line="15"/>
            <declaration name="min" type="int" line="16"/>
            <declaration name="gammasU" type="double" line="17"/>
            <declaration name="gammasV" type="double" line="18"/>
            <declaration name="b" type="double" line="19"/>
            <declaration name="u" type="double" line="20"/>
            <javadoc line="21">
                Creates a decompose that defines the specified amount of memory.                
                <param>
                    numElements number of elements in the matrix.                    
                </param>
            </javadoc>
            <method name="BidiagonalDecompositionRow" type="constructor" line="25">
                <params>
                    <param name="numElements" type="int"/>
                </params>
            </method>
            <method name="BidiagonalDecompositionRow" type="constructor" line="32"/>
            <javadoc line="35">
                Computes the decomposition of the provided matrix.  If no errors are detected then true is returned,
                  false otherwise.                
                <param>
                    A  The matrix that is being decomposed.  Not modified.                    
                </param>
                <return>
                    If it detects any errors or not.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="41">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="45">
                Sets up internal data structures and creates a copy of the input matrix.                
                <param>
                    A The input matrix.  Not modified.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="49">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="max" type="int" line="54"/>
                <scope line="55"/>
                <scope line="59"/>
                <scope line="62"/>
            </method>
            <javadoc line="66">
                The raw UBV matrix that is stored internally.                
                <return>
                    UBV matrix.                    
                </return>
            </javadoc>
            <method name="getUBV" type="DenseMatrix64F" line="70"/>
            <method name="getDiagonal" type="void" line="73">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="off" type="double[]"/>
                </params>
                <scope line="75"/>
            </method>
            <javadoc line="80">
                Returns the bidiagonal matrix.                
                <param>
                    B If not null the results are stored here, if null a new matrix is created.                    
                </param>
                <return>
                    The bidiagonal matrix.                    
                </return>
            </javadoc>
            <method name="getB" type="DenseMatrix64F" line="85">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                </params>
                <scope line="88"/>
            </method>
            <method name="handleB" type="DenseMatrix64F" line="95">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="min" type="int"/>
                </params>
                <declaration name="w" type="int" line="96"/>
                <scope line="97">
                    <scope line="98"/>
                    <scope line="101"/>
                </scope>
                <scope line="106">
                    <scope line="107"/>
                    <scope line="110"/>
                </scope>
            </method>
            <javadoc line="117">
                Returns the orthogonal U matrix.                
                <param>
                    U If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getU" type="DenseMatrix64F" line="122">
                <params>
                    <param name="U" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                </params>
                <scope line="126">
                    <scope line="128"/>
                </scope>
            </method>
            <method name="handleU" type="DenseMatrix64F" line="136">
                <params>
                    <param name="U" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="min" type="int"/>
                </params>
                <scope line="137">
                    <scope line="138">
                        <scope line="140"/>
                    </scope>
                    <scope line="144"/>
                </scope>
                <scope line="149"/>
            </method>
            <javadoc line="155">
                Returns the orthogonal V matrix.                
                <param>
                    V If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getV" type="DenseMatrix64F" line="160">
                <params>
                    <param name="V" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                </params>
                <scope line="163">
                    <scope line="165"/>
                </scope>
            </method>
            <method name="handleV" type="DenseMatrix64F" line="173">
                <params>
                    <param name="V" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="min" type="int"/>
                </params>
                <declaration name="w" type="int" line="174"/>
                <scope line="175">
                    <scope line="176">
                        <scope line="177"/>
                    </scope>
                    <scope line="182">
                        <scope line="183"/>
                    </scope>
                </scope>
                <scope line="189">
                    <scope line="190"/>
                </scope>
            </method>
            <javadoc line="197">
                Internal function for computing the decomposition.                
            </javadoc>
            <method name="_decompose" type="boolean" line="200">
                <scope line="201"/>
            </method>
            <method name="computeU" type="void" line="207">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="b" type="double" line="208"/>
                <declaration name="max" type="double" line="209"/>
                <scope line="210">
                    <declaration name="val" type="double" line="211"/>
                </scope>
                <scope line="215">
                    <declaration name="tau" type="double" line="216"/>
                    <declaration name="nu" type="double" line="217"/>
                    <declaration name="gamma" type="double" line="220"/>
                </scope>
                <scope line="225"/>
            </method>
            <method name="computeV" type="void" line="229">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="b" type="double" line="230"/>
                <declaration name="row" type="int" line="231"/>
                <declaration name="max" type="double" line="232"/>
                <scope line="233">
                    <declaration name="tau" type="double" line="234"/>
                    <declaration name="nu" type="double" line="235"/>
                    <declaration name="gamma" type="double" line="238"/>
                </scope>
                <scope line="243"/>
            </method>
            <javadoc line="247">
                Returns gammas from the householder operations for the U matrix.                
                <return>
                    gammas for householder operations                    
                </return>
            </javadoc>
            <method name="getGammasU" type="double[]" line="251"/>
            <javadoc line="254">
                Returns gammas from the householder operations for the V matrix.                
                <return>
                    gammas for householder operations                    
                </return>
            </javadoc>
            <method name="getGammasV" type="double[]" line="258"/>
            <method name="inputModified" type="boolean" line="261"/>
        </class>
    </source>