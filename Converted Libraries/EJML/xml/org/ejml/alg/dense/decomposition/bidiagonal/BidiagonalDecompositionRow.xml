<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.bidiagonal">
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="BidiagonalDecompositionRow" line="25">
            <comment line="37">
                A combined matrix that stores te upper Hessenberg matrix and the orthogonal matrix.                
            </comment>
            <comment line="40">
                number of rows                
            </comment>
            <comment line="42">
                number of columns                
            </comment>
            <comment line="44">
                the smaller of m or n                
            </comment>
            <comment line="47">
                the first element in the orthogonal vectors                
            </comment>
            <comment line="50">
                temporary storage                
            </comment>
            <implements interface="BidiagonalDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="25">
                &lt;p&gt;
                  Performs a {@link org.ejml.alg.dense.decomposition.bidiagonal.BidiagonalDecomposition} using
                  householder reflectors.  This is efficient on wide or square matrices.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="UBV" type="DenseMatrix64F" line="37"/>
            <declaration name="m" type="int" line="40"/>
            <declaration name="n" type="int" line="42"/>
            <declaration name="min" type="int" line="44"/>
            <declaration name="gammasU" type="double" line="47"/>
            <declaration name="gammasV" type="double" line="48"/>
            <declaration name="b" type="double" line="50"/>
            <declaration name="u" type="double" line="51"/>
            <javadoc line="53">
                Creates a decompose that defines the specified amount of memory.                
                <param>
                    numElements number of elements in the matrix.                    
                </param>
            </javadoc>
            <method name="BidiagonalDecompositionRow" type="constructor" line="58">
                <params>
                    <param name="numElements" type="int"/>
                </params>
            </method>
            <method name="BidiagonalDecompositionRow" type="constructor" line="67"/>
            <javadoc line="71">
                Computes the decomposition of the provided matrix.  If no errors are detected then true is returned,
                  false otherwise.                
                <param>
                    A  The matrix that is being decomposed.  Not modified.                    
                </param>
                <return>
                    If it detects any errors or not.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="80">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="85">
                Sets up internal data structures and creates a copy of the input matrix.                
                <param>
                    A The input matrix.  Not modified.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="90">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="max" type="int" line="97"/>
                <scope line="99"/>
                <scope line="103"/>
                <scope line="106"/>
            </method>
            <javadoc line="111">
                The raw UBV matrix that is stored internally.                
                <return>
                    UBV matrix.                    
                </return>
            </javadoc>
            <method name="getUBV" type="DenseMatrix64F" line="116"/>
            <method name="getDiagonal" type="void" line="121">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="off" type="double[]"/>
                </params>
                <scope line="123"/>
            </method>
            <javadoc line="129">
                Returns the bidiagonal matrix.                
                <param>
                    B If not null the results are stored here, if null a new matrix is created.                    
                </param>
                <return>
                    The bidiagonal matrix.                    
                </return>
            </javadoc>
            <method name="getB" type="DenseMatrix64F" line="136">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                </params>
                <comment line="140">
                    System.arraycopy(UBV.data, 0, B.data, 0, UBV.getNumElements());                    
                </comment>
                <scope line="142"/>
            </method>
            <method name="handleB" type="DenseMatrix64F" line="153">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="min" type="int"/>
                </params>
                <declaration name="w" type="int" line="154"/>
                <scope line="156">
                    <scope line="157"/>
                    <scope line="159"/>
                </scope>
                <scope line="163">
                    <scope line="164"/>
                    <scope line="166"/>
                </scope>
            </method>
            <javadoc line="174">
                Returns the orthogonal U matrix.                
                <param>
                    U If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getU" type="DenseMatrix64F" line="181">
                <params>
                    <param name="U" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                </params>
                <scope line="187">
                    <scope line="189"/>
                </scope>
            </method>
            <method name="handleU" type="DenseMatrix64F" line="203">
                <params>
                    <param name="U" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="min" type="int"/>
                </params>
                <scope line="204">
                    <scope line="205">
                        <scope line="208"/>
                    </scope>
                    <scope line="211"/>
                </scope>
                <scope line="217"/>
            </method>
            <javadoc line="227">
                Returns the orthogonal V matrix.                
                <param>
                    V If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getV" type="DenseMatrix64F" line="234">
                <params>
                    <param name="V" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                </params>
                <comment line="239">
                    UBV.print();                    
                </comment>
                <comment line="241">
                    todo the very first multiplication can be avoided by setting to the rank1update output                    
                </comment>
                <scope line="241">
                    <scope line="243"/>
                </scope>
            </method>
            <method name="handleV" type="DenseMatrix64F" line="256">
                <params>
                    <param name="V" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="min" type="int"/>
                </params>
                <declaration name="w" type="int" line="257"/>
                <scope line="259">
                    <scope line="260">
                        <scope line="261"/>
                    </scope>
                    <scope line="265">
                        <scope line="266"/>
                    </scope>
                </scope>
                <scope line="271">
                    <scope line="272"/>
                </scope>
            </method>
            <javadoc line="281">
                Internal function for computing the decomposition.                
            </javadoc>
            <method name="_decompose" type="boolean" line="284">
                <comment line="287">
                    UBV.print();                    
                </comment>
                <comment line="289">
                    System.out.println(&quot;--- after U&quot;);
                                UBV.print();                    
                </comment>
                <comment line="292">
                    System.out.println(&quot;--- after V&quot;);
                                UBV.print();                    
                </comment>
                <scope line="285"/>
            </method>
            <method name="computeU" type="void" line="298">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="302">
                    find the largest value in this column
                     this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <comment line="307">
                    copy the householder vector to vector outside of the matrix to reduce caching issues
                     big improvement on larger matrices and a relatively small performance hit on small matrices.                    
                </comment>
                <comment line="316">
                    -------- set up the reflector Q_k                    
                </comment>
                <comment line="319">
                    write the reflector into the lower left column of the matrix
                     while dividing u by nu                    
                </comment>
                <comment line="328">
                    ---------- multiply on the left by Q_k                    
                </comment>
                <declaration name="b" type="double" line="299"/>
                <declaration name="max" type="double" line="303"/>
                <scope line="305">
                    <declaration name="val" type="double" line="308"/>
                </scope>
                <scope line="314">
                    <declaration name="tau" type="double" line="316"/>
                    <declaration name="nu" type="double" line="320"/>
                    <declaration name="gamma" type="double" line="324"/>
                </scope>
                <scope line="331"/>
            </method>
            <method name="computeV" type="void" line="336">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="342">
                    find the largest value in this column
                     this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <comment line="347">
                    -------- set up the reflector Q_k                    
                </comment>
                <comment line="351">
                    write the reflector into the lower left column of the matrix                    
                </comment>
                <comment line="360">
                    writing to u could be avoided by working directly with b.
                     requires writing a custom rank1Update function
                     ---------- multiply on the left by Q_k                    
                </comment>
                <declaration name="b" type="double" line="337"/>
                <declaration name="row" type="int" line="339"/>
                <declaration name="max" type="double" line="343"/>
                <scope line="345">
                    <declaration name="tau" type="double" line="348"/>
                    <declaration name="nu" type="double" line="351"/>
                    <declaration name="gamma" type="double" line="356"/>
                </scope>
                <scope line="365"/>
            </method>
            <javadoc line="370">
                Returns gammas from the householder operations for the U matrix.                
                <return>
                    gammas for householder operations                    
                </return>
            </javadoc>
            <method name="getGammasU" type="double[]" line="375"/>
            <javadoc line="379">
                Returns gammas from the householder operations for the V matrix.                
                <return>
                    gammas for householder operations                    
                </return>
            </javadoc>
            <method name="getGammasV" type="double[]" line="384"/>
            <method name="inputModified" type="boolean" line="389"/>
        </class>
    </source>