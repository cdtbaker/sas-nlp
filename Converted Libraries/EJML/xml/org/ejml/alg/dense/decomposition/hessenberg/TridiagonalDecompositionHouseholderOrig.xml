<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.hessenberg">
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="TridiagonalDecompositionHouseholderOrig" line="5">
            <javadoc line="5">
                &lt;p&gt;
                  A straight forward implementation from &quot;Fundamentals of Matrix Computations,&quot; Second Edition.&lt;br&gt;
                  &lt;br&gt;
                  This is only saved to provide a point of reference in benchmarks.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="QT" type="DenseMatrix64F" line="14"/>
            <javadoc line="14">
                Internal storage of decomposed matrix.  The tridiagonal matrix is stored in the
                  upper tridiagonal portion of the matrix.  The householder vectors are stored
                  in the upper rows.                
            </javadoc>
            <declaration name="N" type="int" line="20"/>
            <declaration name="w" type="double" line="21"/>
            <declaration name="gammas" type="double" line="22"/>
            <declaration name="b" type="double" line="23"/>
            <method name="TridiagonalDecompositionHouseholderOrig" type="constructor" line="24"/>
            <javadoc line="31">
                Returns the interal matrix where the decomposed results are stored.                
                <return>
                                        
                </return>
            </javadoc>
            <method name="getQT" type="DenseMatrix64F" line="35"/>
            <javadoc line="38">
                Extracts the tridiagonal matrix found in the decomposition.                
                <param>
                    T If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted T matrix.                    
                </return>
            </javadoc>
            <method name="getT" type="DenseMatrix64F" line="43">
                <params>
                    <param name="T" type="DenseMatrix64F"/>
                </params>
                <scope line="44"/>
                <scope line="51"/>
            </method>
            <javadoc line="60">
                An orthogonal matrix that has the following property: T = Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <param>
                    Q If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getQ" type="DenseMatrix64F" line="65">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                </params>
                <scope line="66">
                    <scope line="68"/>
                </scope>
                <scope line="75">
                    <scope line="77"/>
                </scope>
            </method>
            <javadoc line="84">
                Decomposes the provided symmetric matrix.                
                <param>
                    A Symmetric matrix that is going to be decomposed.  Not modified.                    
                </param>
            </javadoc>
            <method name="decompose" type="void" line="88">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="90"/>
            </method>
            <javadoc line="94">
                Computes and performs the similar a transform for submatrix k.                
            </javadoc>
            <method name="similarTransform" type="void" line="97">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="t" type="double" line="98"/>
                <declaration name="max" type="double" line="99"/>
                <declaration name="rowU" type="int" line="100"/>
                <scope line="101">
                    <declaration name="val" type="double" line="102"/>
                </scope>
                <scope line="105">
                    <declaration name="tau" type="double" line="106"/>
                    <scope line="107">
                        <declaration name="val" type="double" line="108"/>
                    </scope>
                    <declaration name="nu" type="double" line="113"/>
                    <scope line="115"/>
                    <declaration name="gamma" type="double" line="118"/>
                </scope>
                <scope line="123"/>
            </method>
            <javadoc line="127">
                Performs the householder operations on left and right and side of the matrix.  Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <param>
                    row Specifies the submatrix.                    
                </param>
                <param>
                    gamma The gamma for the householder operation                    
                </param>
            </javadoc>
            <method name="householderSymmetric" type="void" line="132">
                <params>
                    <param name="row" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <declaration name="startU" type="int" line="133"/>
                <scope line="134">
                    <declaration name="total" type="double" line="135"/>
                    <scope line="136"/>
                </scope>
                <declaration name="alpha" type="double" line="141"/>
                <scope line="142"/>
                <scope line="146"/>
                <scope line="149">
                    <declaration name="ww" type="double" line="150"/>
                    <declaration name="uu" type="double" line="151"/>
                    <scope line="152"/>
                </scope>
            </method>
            <javadoc line="157">
                If needed declares and sets up internal data structures.                
                <param>
                    A Matrix being decomposed.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="161">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="163">
                    <scope line="166"/>
                </scope>
            </method>
            <method name="getGamma" type="double" line="174">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
        </class>
    </source>