<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.eig.watched">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.alg.dense.decomposition.TriangularSolver"/>
        <import package="org.ejml.data.Complex64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.factory.LinearSolverFactory"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.ops.NormOps"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <class name="WatchedDoubleStepQREigenvector" line="32">
            <comment line="40">
                Q matrix from double step QR                
            </comment>
            <javadoc line="32">
                @author Peter Abeles                
            </javadoc>
            <declaration name="implicit" type="WatchedDoubleStepQREigen" line="37"/>
            <declaration name="Q" type="DenseMatrix64F" line="40"/>
            <declaration name="eigenvectors" type="DenseMatrix64F" line="43"/>
            <declaration name="eigenvectorTemp" type="DenseMatrix64F" line="45"/>
            <declaration name="solver" type="LinearSolver" line="47"/>
            <declaration name="origEigenvalues" type="Complex64F" line="49"/>
            <declaration name="N" type="int" line="50"/>
            <declaration name="splits" type="int" line="52"/>
            <declaration name="numSplits" type="int" line="53"/>
            <declaration name="x1" type="int" line="55"/>
            <declaration name="indexVal" type="int" line="57"/>
            <declaration name="onscript" type="boolean" line="58"/>
            <method name="process" type="boolean" line="61">
                <params>
                    <param name="implicit" type="WatchedDoubleStepQREigen"/>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="Q_h" type="DenseMatrix64F"/>
                </params>
                <comment line="75">
                    UtilEjml.setnull(eigenvectors);                    
                </comment>
                <comment line="85">
                    System.out.println(&quot;Orig A&quot;);
                            A.print(&quot;%12.10f&quot;);                    
                </comment>
                <scope line="64"/>
                <scope line="73"/>
            </method>
            <method name="extractVectors" type="boolean" line="93">
                <params>
                    <param name="Q_h" type="DenseMatrix64F"/>
                </params>
                <comment line="97">
                    extract eigenvectors from the shur matrix
                     start at the top left corner of the matrix                    
                </comment>
                <comment line="112">
                    translate the eigenvectors into the frame of the original matrix                    
                </comment>
                <declaration name="triangular" type="boolean" line="98"/>
                <scope line="99">
                    <declaration name="c" type="Complex64F" line="101"/>
                    <scope line="106"/>
                </scope>
                <scope line="112">
                    <declaration name="temp" type="DenseMatrix64F" line="113"/>
                    <scope line="114">
                        <declaration name="v" type="DenseMatrix64F" line="115"/>
                        <scope line="117"/>
                    </scope>
                </scope>
            </method>
            <method name="solveEigenvectorDuplicateEigenvalue" type="void" line="128">
                <params>
                    <param name="real" type="double"/>
                    <param name="first" type="int"/>
                    <param name="isTriangle" type="boolean"/>
                </params>
                <declaration name="scale" type="double" line="130"/>
                <scope line="136">
                    <scope line="137"/>
                    <scope line="139"/>
                </scope>
                <scope line="146">
                    <declaration name="c" type="Complex64F" line="147"/>
                    <scope line="149">
                        <declaration name="v" type="DenseMatrix64F" line="152"/>
                    </scope>
                </scope>
            </method>
            <method name="solveUsingTriangle" type="void" line="162">
                <params>
                    <param name="real" type="double"/>
                    <param name="index" type="int"/>
                    <param name="r" type="DenseMatrix64F"/>
                </params>
                <scope line="163"/>
                <scope line="172"/>
            </method>
            <method name="solveWithLU" type="void" line="177">
                <params>
                    <param name="real" type="double"/>
                    <param name="index" type="int"/>
                    <param name="r" type="DenseMatrix64F"/>
                </params>
                <comment line="192">
                    TODO this must be very inefficient                    
                </comment>
                <declaration name="A" type="DenseMatrix64F" line="178"/>
                <scope line="182"/>
            </method>
            <method name="findQandR" type="boolean" line="197">
                <comment line="204">
                    use the already computed eigenvalues to recompute the Q and R matrices                    
                </comment>
                <comment line="212">
                    Q.print(&quot;%1.10f&quot;);
                    
                            implicit.A.print(&quot;%1.10f&quot;);                    
                </comment>
                <scope line="205">
                    <scope line="206"/>
                </scope>
            </method>
            <method name="findNextEigenvalue" type="boolean" line="218">
                <comment line="222">
                    implicit.A.print();                    
                </comment>
                <comment line="238">
                    implicit.A.print(&quot;%e&quot;);                    
                </comment>
                <comment line="239">
                    System.err.println(&quot;If it needs to do an exceptional shift then something went very bad.&quot;);                    
                </comment>
                <comment line="240">
                    return false;                    
                </comment>
                <comment line="244">
                    check for convergence                    
                </comment>
                <declaration name="foundEigen" type="boolean" line="219"/>
                <scope line="220">
                    <scope line="224"/>
                    <scope line="226"/>
                    <scope line="231"/>
                    <scope line="236"/>
                    <scope line="242"/>
                    <scope line="248"/>
                </scope>
            </method>
            <method name="checkSplitPerformImplicit" type="void" line="256">
                <comment line="258">
                    check for splits                    
                </comment>
                <comment line="263">
                    reduce the scope of what it is looking at                    
                </comment>
                <comment line="267">
                    first try using known eigenvalues in the same order they were originally found                    
                </comment>
                <comment line="274">
                    if no splits are found perform an implicit step                    
                </comment>
                <comment line="284">
                    that didn&apos;t work so try a modified order                    
                </comment>
                <scope line="258">
                    <scope line="259"/>
                </scope>
                <scope line="267">
                    <scope line="268"/>
                    <scope line="270">
                        <declaration name="a" type="Complex64F" line="271"/>
                        <scope line="274"/>
                        <scope line="276"/>
                        <scope line="278"/>
                    </scope>
                </scope>
                <scope line="282"/>
            </method>
            <method name="moveToNextSplit" type="void" line="292">
                <scope line="298"/>
                <scope line="300"/>
            </method>
            <method name="getQ" type="DenseMatrix64F" line="305"/>
            <method name="getImplicit" type="WatchedDoubleStepQREigen" line="309"/>
            <method name="getEigenvectors" type="DenseMatrix64F[]" line="313"/>
            <method name="getEigenvalues" type="Complex64F[]" line="317"/>
        </class>
    </source>