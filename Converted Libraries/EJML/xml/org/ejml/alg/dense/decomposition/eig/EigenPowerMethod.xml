<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.eig">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.factory.LinearSolverFactory"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.ops.NormOps"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <class name="EigenPowerMethod" line="8">
            <javadoc line="8">
                &lt;p&gt;
                  The power method is an iterative method that can be used to find dominant eigen vector in
                  a matrix.  Computing &lt;b&gt;A&lt;sup&gt;n&lt;/sup&gt;q&lt;/b&gt; for larger and larger values of n, where q is a vector.  Eventually the
                  dominant (if there is any) eigen vector will &quot;win&quot;.
                  &lt;p&gt;
                  &lt;p&gt;
                  Shift implementations find the eigen value of the matrix B=A-pI instead.  This matrix has the
                  same eigen vectors, but can converge much faster if p is chosen wisely.
                  &lt;/p&gt;
                  &lt;p&gt;
                  See section 5.3 in &quot;Fundamentals of Matrix Computations&quot; Second Edition, David S. Watkins.
                  &lt;/p&gt;
                  &lt;p&gt;
                  WARNING:  These functions have well known conditions where they will not converge or converge
                  very slowly and are only used in special situations in practice.  I have also seen it converge
                  to none dominant eigen vectors.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="tol" type="double" line="29"/>
            <declaration name="q0" type="DenseMatrix64F" line="30"/>
            <declaration name="maxIterations" type="int" line="31"/>
            <declaration name="B" type="DenseMatrix64F" line="32"/>
            <declaration name="seed" type="DenseMatrix64F" line="33"/>
            <javadoc line="34">
                @param size The size of the matrix which can be processed.                
            </javadoc>
            <method name="EigenPowerMethod" type="constructor" line="37">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="43">
                Sets the value of the vector to use in the start of the iterations.                
                <param>
                    seed The initial seed vector in the iteration.                    
                </param>
            </javadoc>
            <method name="setSeed" type="void" line="47">
                <params>
                    <param name="seed" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="50">
                @param maxIterations                
                <param>
                    tolerance                    
                </param>
            </javadoc>
            <method name="setOptions" type="void" line="54">
                <params>
                    <param name="maxIterations" type="int"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="58">
                This method computes the eigen vector with the largest eigen value by using the
                  direct power method. This technique is the easiest to implement, but the slowest to converge.
                  Works only if all the eigenvalues are real.                
                <param>
                    A The matrix. Not modified.                    
                </param>
                <return>
                    If it converged or not.                    
                </return>
            </javadoc>
            <method name="computeDirect" type="boolean" line="65">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="converged" type="boolean" line="67"/>
                <scope line="68">
                    <declaration name="s" type="double" line="70"/>
                </scope>
            </method>
            <method name="initPower" type="void" line="76">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="78"/>
                <scope line="81">
                    <scope line="82"/>
                </scope>
            </method>
            <javadoc line="87">
                Test for convergence by seeing if the element with the largest change
                  is smaller than the tolerance.  In some test cases it alternated between
                  the + and - values of the eigen vector.  When this happens it seems to have &quot;converged&quot;
                  to a non-dominant eigen vector.    At least in the case I looked at.  I haven&apos;t devoted
                  a lot of time into this issue...                
            </javadoc>
            <method name="checkConverged" type="boolean" line="94">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="worst" type="double" line="95"/>
                <declaration name="worst2" type="double" line="96"/>
                <scope line="97">
                    <declaration name="val" type="double" line="98"/>
                </scope>
                <declaration name="temp" type="DenseMatrix64F" line="103"/>
            </method>
            <javadoc line="110">
                Computes the most dominant eigen vector of A using a shifted matrix.
                  The shifted matrix is defined as &lt;b&gt;B = A - &amp;alpha;I&lt;/b&gt; and can converge faster
                  if &amp;alpha; is chosen wisely.  In general it is easier to choose a value for &amp;alpha;
                  that will converge faster with the shift-invert strategy than this one.                
                <param>
                    A The matrix.                    
                </param>
                <param>
                    alpha Shifting factor.                    
                </param>
                <return>
                    If it converged or not.                    
                </return>
            </javadoc>
            <method name="computeShiftDirect" type="boolean" line="119">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="alpha" type="double"/>
                </params>
            </method>
            <javadoc line="123">
                Computes the most dominant eigen vector of A using an inverted shifted matrix.
                  The inverted shifted matrix is defined as &lt;b&gt;B = (A - &amp;alpha;I)&lt;sup&gt;-1&lt;/sup&gt;&lt;/b&gt; and
                  can converge faster if &amp;alpha; is chosen wisely.                
                <param>
                    A An invertible square matrix matrix.                    
                </param>
                <param>
                    alpha Shifting factor.                    
                </param>
                <return>
                    If it converged or not.                    
                </return>
            </javadoc>
            <method name="computeShiftInvert" type="boolean" line="131">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="alpha" type="double"/>
                </params>
                <declaration name="solver" type="LinearSolver" line="133"/>
                <declaration name="converged" type="boolean" line="136"/>
                <scope line="137">
                    <declaration name="s" type="double" line="139"/>
                </scope>
            </method>
            <method name="getEigenVector" type="DenseMatrix64F" line="145"/>
        </class>
    </source>