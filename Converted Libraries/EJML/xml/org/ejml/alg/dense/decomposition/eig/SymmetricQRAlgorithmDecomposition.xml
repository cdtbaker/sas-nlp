<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.eig">
        <import package="org.ejml.alg.dense.decomposition.eig.symm.SymmetricQREigenHelper"/>
        <import package="org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm"/>
        <import package="org.ejml.alg.dense.decomposition.hessenberg.TridiagonalSimilarDecomposition"/>
        <import package="org.ejml.data.Complex64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.DecompositionFactory"/>
        <import package="org.ejml.factory.EigenDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="SymmetricQRAlgorithmDecomposition" line="10">
            <implements interface="EigenDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="10">
                &lt;p&gt;
                  Computes the eigenvalues and eigenvectors of a real symmetric matrix using the symmetric implicit QR algorithm.
                  Inside each iteration a QR decomposition of A&lt;sub&gt;i&lt;/sub&gt;-p&lt;sub&gt;i&lt;/sub&gt;I is implicitly computed.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is based on the algorithm is sketched out in:&lt;br&gt;
                  David S. Watkins, &quot;Fundamentals of Matrix Computations,&quot; Second Edition. page 377-385
                  &lt;/p&gt;                
                <see>
                    org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm                    
                </see>
                <see>
                    org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecompositionHouseholder                    
                </see>
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="decomp" type="TridiagonalSimilarDecomposition&lt;DenseMatrix64F&gt;" line="24"/>
            <declaration name="helper" type="SymmetricQREigenHelper" line="25"/>
            <declaration name="vector" type="SymmetricQrAlgorithm" line="26"/>
            <declaration name="computeVectorsWithValues" type="boolean" line="27"/>
            <declaration name="values" type="double" line="28"/>
            <declaration name="diag" type="double" line="29"/>
            <declaration name="off" type="double" line="30"/>
            <declaration name="diagSaved" type="double" line="31"/>
            <declaration name="offSaved" type="double" line="32"/>
            <declaration name="V" type="DenseMatrix64F" line="33"/>
            <declaration name="eigenvectors" type="DenseMatrix64F" line="34"/>
            <declaration name="computeVectors" type="boolean" line="35"/>
            <method name="SymmetricQRAlgorithmDecomposition" type="constructor" line="36">
                <params>
                    <param name="decomp" type="TridiagonalSimilarDecomposition<DenseMatrix64F>"/>
                    <param name="computeVectors" type="boolean"/>
                </params>
            </method>
            <method name="SymmetricQRAlgorithmDecomposition" type="constructor" line="42">
                <params>
                    <param name="computeVectors" type="boolean"/>
                </params>
            </method>
            <method name="setComputeVectorsWithValues" type="void" line="45">
                <params>
                    <param name="computeVectorsWithValues" type="boolean"/>
                </params>
            </method>
            <javadoc line="49">
                Used to limit the number of internal QR iterations that the QR algorithm performs.  20
                  should be enough for most applications.                
                <param>
                    max The maximum number of QR iterations it will perform.                    
                </param>
            </javadoc>
            <method name="setMaxIterations" type="void" line="54">
                <params>
                    <param name="max" type="int"/>
                </params>
            </method>
            <method name="getNumberOfEigenvalues" type="int" line="57"/>
            <method name="getEigenvalue" type="Complex64F" line="60">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getEigenVector" type="DenseMatrix64F" line="63">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="66">
                Decomposes the matrix using the QR algorithm.  Care was taken to minimize unnecessary memory copying
                  and cache skipping.                
                <param>
                    orig The matrix which is being decomposed.  Not modified.                    
                </param>
                <return>
                    true if it decomposed the matrix or false if an error was detected.  This will not catch all errors.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="72">
                <params>
                    <param name="orig" type="DenseMatrix64F"/>
                </params>
                <declaration name="N" type="int" line="74"/>
                <scope line="76"/>
                <scope line="82">
                    <scope line="83"/>
                    <scope line="86"/>
                </scope>
                <scope line="90"/>
            </method>
            <method name="inputModified" type="boolean" line="94"/>
            <method name="extractTogether" type="boolean" line="97"/>
            <method name="extractSeparate" type="boolean" line="106">
                <params>
                    <param name="numCols" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                Computes eigenvalues only                
                <return>
                                        
                </return>
            </javadoc>
            <method name="computeEigenValues" type="boolean" line="122"/>
        </class>
    </source>