<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.hessenberg">
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="TridiagonalDecompositionHouseholder_D64" line="26">
            <comment line="57">
                The size of the matrix                
            </comment>
            <comment line="60">
                temporary storage                
            </comment>
            <comment line="62">
                gammas for the householder operations                
            </comment>
            <comment line="64">
                temporary storage                
            </comment>
            <implements interface="TridiagonalSimilarDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="26">
                &lt;p&gt;
                  Performs a {@link org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition similar tridiagonal decomposition} on a square symmetric input matrix.
                  Householder vectors perform the similar operation and the symmetry is taken advantage
                  of for good performance.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Finds the decomposition of a matrix in the form of:&lt;br&gt;
                  &lt;br&gt;
                  A = OTO&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;br&gt;
                  where A is a symmetric m by m matrix, O is an orthogonal matrix, and T is a tridiagonal matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is based off of the algorithm described in:&lt;br&gt;
                  &lt;br&gt;
                  David S. Watkins, &quot;Fundamentals of Matrix Computations,&quot; Second Edition.  Page 349-355
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="QT" type="DenseMatrix64F" line="50"/>
            <javadoc line="50">
                Only the upper right triangle is used.  The Tridiagonal portion stores
                  the tridiagonal matrix.  The rows store householder vectors.                
            </javadoc>
            <declaration name="N" type="int" line="57"/>
            <declaration name="w" type="double" line="60"/>
            <declaration name="gammas" type="double" line="62"/>
            <declaration name="b" type="double" line="64"/>
            <method name="TridiagonalDecompositionHouseholder_D64" type="constructor" line="66"/>
            <javadoc line="73">
                Returns the internal matrix where the decomposed results are stored.                
                <return>
                                        
                </return>
            </javadoc>
            <method name="getQT" type="DenseMatrix64F" line="77"/>
            <method name="getDiagonal" type="void" line="82">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="off" type="double[]"/>
                </params>
                <scope line="83">
                    <scope line="86"/>
                </scope>
            </method>
            <javadoc line="92">
                Extracts the tridiagonal matrix found in the decomposition.                
                <param>
                    T If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted T matrix.                    
                </return>
            </javadoc>
            <method name="getT" type="DenseMatrix64F" line="99">
                <params>
                    <param name="T" type="DenseMatrix64F"/>
                </params>
                <scope line="100"/>
                <scope line="110">
                    <declaration name="a" type="double" line="112"/>
                </scope>
                <scope line="117"/>
            </method>
            <javadoc line="125">
                An orthogonal matrix that has the following property: T = Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <param>
                    Q If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getQ" type="DenseMatrix64F" line="132">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <scope line="133"/>
                <scope line="142">
                    <scope line="143">
                        <scope line="145"/>
                    </scope>
                </scope>
                <scope line="150">
                    <scope line="151">
                        <scope line="153"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="163">
                Decomposes the provided symmetric matrix.                
                <param>
                    A Symmetric matrix that is going to be decomposed.  Not modified.                    
                </param>
            </javadoc>
            <method name="decompose" type="boolean" line="169">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="172"/>
            </method>
            <javadoc line="179">
                Computes and performs the similar a transform for submatrix k.                
            </javadoc>
            <method name="similarTransform" type="void" line="182">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="186">
                    find the largest value in this column
                     this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <comment line="199">
                    -------- set up the reflector Q_k                    
                </comment>
                <comment line="203">
                    write the reflector into the lower left column of the matrix                    
                </comment>
                <comment line="211">
                    ---------- Specialized householder that takes advantage of the symmetry                    
                </comment>
                <comment line="214">
                    since the first element in the householder vector is known to be 1
                     store the full upper hessenberg                    
                </comment>
                <declaration name="t" type="double" line="183"/>
                <declaration name="max" type="double" line="187"/>
                <declaration name="rowU" type="int" line="189"/>
                <scope line="191">
                    <declaration name="val" type="double" line="192"/>
                </scope>
                <scope line="197">
                    <declaration name="tau" type="double" line="200"/>
                    <declaration name="nu" type="double" line="203"/>
                    <declaration name="gamma" type="double" line="207"/>
                </scope>
                <scope line="216"/>
            </method>
            <javadoc line="221">
                Performs the householder operations on left and right and side of the matrix.  Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <param>
                    row Specifies the submatrix.                    
                </param>
                <param>
                    gamma The gamma for the householder operation                    
                </param>
            </javadoc>
            <method name="householderSymmetric" type="void" line="228">
                <params>
                    <param name="row" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <comment line="232">
                    compute v = -gamma*A*u                    
                </comment>
                <comment line="235">
                    the lower triangle is not written to so it needs to traverse upwards
                     to get the information.  Reduces the number of matrix writes need
                     improving large matrix performance                    
                </comment>
                <comment line="246">
                    alpha = -0.5*gamma*u^T*v                    
                </comment>
                <comment line="254">
                    w = v + alpha*u                    
                </comment>
                <comment line="258">
                    A = A + w*u^T + u*w^T                    
                </comment>
                <comment line="266">
                    only write to the upper portion of the matrix
                     this reduces the number of cache misses                    
                </comment>
                <declaration name="startU" type="int" line="229"/>
                <scope line="232">
                    <declaration name="total" type="double" line="233"/>
                    <scope line="237"/>
                    <scope line="240"/>
                </scope>
                <declaration name="alpha" type="double" line="246"/>
                <scope line="248"/>
                <scope line="254"/>
                <scope line="258">
                    <declaration name="ww" type="double" line="260"/>
                    <declaration name="uu" type="double" line="261"/>
                    <declaration name="rowA" type="int" line="263"/>
                    <scope line="264"/>
                </scope>
            </method>
            <javadoc line="274">
                If needed declares and sets up internal data structures.                
                <param>
                    A Matrix being decomposed.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="279">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="283">
                    <scope line="286"/>
                </scope>
            </method>
            <method name="inputModified" type="boolean" line="297"/>
        </class>
    </source>