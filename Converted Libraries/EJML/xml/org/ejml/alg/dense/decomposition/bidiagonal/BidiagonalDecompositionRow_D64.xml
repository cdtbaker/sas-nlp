<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.bidiagonal">
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.interfaces.decomposition.BidiagonalDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="BidiagonalDecompositionRow_D64" line="26">
            <comment line="38">
                A combined matrix that stores te upper Hessenberg matrix and the orthogonal matrix.                
            </comment>
            <comment line="41">
                number of rows                
            </comment>
            <comment line="43">
                number of columns                
            </comment>
            <comment line="45">
                the smaller of m or n                
            </comment>
            <comment line="48">
                the first element in the orthogonal vectors                
            </comment>
            <comment line="51">
                temporary storage                
            </comment>
            <implements interface="BidiagonalDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="26">
                &lt;p&gt;
                  Performs a {@link org.ejml.interfaces.decomposition.BidiagonalDecomposition} using
                  householder reflectors.  This is efficient on wide or square matrices.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="UBV" type="DenseMatrix64F" line="38"/>
            <declaration name="m" type="int" line="41"/>
            <declaration name="n" type="int" line="43"/>
            <declaration name="min" type="int" line="45"/>
            <declaration name="gammasU" type="double" line="48"/>
            <declaration name="gammasV" type="double" line="49"/>
            <declaration name="b" type="double" line="51"/>
            <declaration name="u" type="double" line="52"/>
            <javadoc line="54">
                Creates a decompose that defines the specified amount of memory.                
                <param>
                    numElements number of elements in the matrix.                    
                </param>
            </javadoc>
            <method name="BidiagonalDecompositionRow_D64" type="constructor" line="59">
                <params>
                    <param name="numElements" type="int"/>
                </params>
            </method>
            <method name="BidiagonalDecompositionRow_D64" type="constructor" line="68"/>
            <javadoc line="72">
                Computes the decomposition of the provided matrix.  If no errors are detected then true is returned,
                  false otherwise.                
                <param>
                    A  The matrix that is being decomposed.  Not modified.                    
                </param>
                <return>
                    If it detects any errors or not.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="81">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="86">
                Sets up internal data structures and creates a copy of the input matrix.                
                <param>
                    A The input matrix.  Not modified.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="91">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="max" type="int" line="98"/>
                <scope line="100"/>
                <scope line="104"/>
                <scope line="107"/>
            </method>
            <javadoc line="112">
                The raw UBV matrix that is stored internally.                
                <return>
                    UBV matrix.                    
                </return>
            </javadoc>
            <method name="getUBV" type="DenseMatrix64F" line="117"/>
            <method name="getDiagonal" type="void" line="122">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="off" type="double[]"/>
                </params>
                <scope line="124"/>
            </method>
            <javadoc line="130">
                Returns the bidiagonal matrix.                
                <param>
                    B If not null the results are stored here, if null a new matrix is created.                    
                </param>
                <return>
                    The bidiagonal matrix.                    
                </return>
            </javadoc>
            <method name="getB" type="DenseMatrix64F" line="137">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                </params>
                <comment line="141">
                    System.arraycopy(UBV.data, 0, B.data, 0, UBV.getNumElements());                    
                </comment>
                <scope line="143"/>
            </method>
            <method name="handleB" type="DenseMatrix64F" line="154">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="min" type="int"/>
                </params>
                <declaration name="w" type="int" line="155"/>
                <scope line="157">
                    <scope line="158"/>
                    <scope line="160"/>
                </scope>
                <scope line="164">
                    <scope line="165"/>
                    <scope line="167"/>
                </scope>
            </method>
            <javadoc line="175">
                Returns the orthogonal U matrix.                
                <param>
                    U If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getU" type="DenseMatrix64F" line="182">
                <params>
                    <param name="U" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                </params>
                <scope line="188">
                    <scope line="190"/>
                </scope>
            </method>
            <method name="handleU" type="DenseMatrix64F" line="204">
                <params>
                    <param name="U" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="min" type="int"/>
                </params>
                <scope line="205">
                    <scope line="206">
                        <scope line="209"/>
                    </scope>
                    <scope line="212"/>
                </scope>
                <scope line="218"/>
            </method>
            <javadoc line="228">
                Returns the orthogonal V matrix.                
                <param>
                    V If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getV" type="DenseMatrix64F" line="235">
                <params>
                    <param name="V" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                </params>
                <comment line="240">
                    UBV.print();                    
                </comment>
                <comment line="242">
                    todo the very first multiplication can be avoided by setting to the rank1update output                    
                </comment>
                <scope line="242">
                    <scope line="244"/>
                </scope>
            </method>
            <method name="handleV" type="DenseMatrix64F" line="257">
                <params>
                    <param name="V" type="DenseMatrix64F"/>
                    <param name="transpose" type="boolean"/>
                    <param name="compact" type="boolean"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="min" type="int"/>
                </params>
                <declaration name="w" type="int" line="258"/>
                <scope line="260">
                    <scope line="261">
                        <scope line="262"/>
                    </scope>
                    <scope line="266">
                        <scope line="267"/>
                    </scope>
                </scope>
                <scope line="272">
                    <scope line="273"/>
                </scope>
            </method>
            <javadoc line="282">
                Internal function for computing the decomposition.                
            </javadoc>
            <method name="_decompose" type="boolean" line="285">
                <comment line="288">
                    UBV.print();                    
                </comment>
                <comment line="290">
                    System.out.println(&quot;--- after U&quot;);
                                UBV.print();                    
                </comment>
                <comment line="293">
                    System.out.println(&quot;--- after V&quot;);
                                UBV.print();                    
                </comment>
                <scope line="286"/>
            </method>
            <method name="computeU" type="void" line="299">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="303">
                    find the largest value in this column
                     this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <comment line="308">
                    copy the householder vector to vector outside of the matrix to reduce caching issues
                     big improvement on larger matrices and a relatively small performance hit on small matrices.                    
                </comment>
                <comment line="317">
                    -------- set up the reflector Q_k                    
                </comment>
                <comment line="320">
                    write the reflector into the lower left column of the matrix
                     while dividing u by nu                    
                </comment>
                <comment line="329">
                    ---------- multiply on the left by Q_k                    
                </comment>
                <declaration name="b" type="double" line="300"/>
                <declaration name="max" type="double" line="304"/>
                <scope line="306">
                    <declaration name="val" type="double" line="309"/>
                </scope>
                <scope line="315">
                    <declaration name="tau" type="double" line="317"/>
                    <declaration name="nu" type="double" line="321"/>
                    <declaration name="gamma" type="double" line="325"/>
                </scope>
                <scope line="332"/>
            </method>
            <method name="computeV" type="void" line="337">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="343">
                    find the largest value in this column
                     this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <comment line="348">
                    -------- set up the reflector Q_k                    
                </comment>
                <comment line="352">
                    write the reflector into the lower left column of the matrix                    
                </comment>
                <comment line="361">
                    writing to u could be avoided by working directly with b.
                     requires writing a custom rank1Update function
                     ---------- multiply on the left by Q_k                    
                </comment>
                <declaration name="b" type="double" line="338"/>
                <declaration name="row" type="int" line="340"/>
                <declaration name="max" type="double" line="344"/>
                <scope line="346">
                    <declaration name="tau" type="double" line="349"/>
                    <declaration name="nu" type="double" line="352"/>
                    <declaration name="gamma" type="double" line="357"/>
                </scope>
                <scope line="366"/>
            </method>
            <javadoc line="371">
                Returns gammas from the householder operations for the U matrix.                
                <return>
                    gammas for householder operations                    
                </return>
            </javadoc>
            <method name="getGammasU" type="double[]" line="376"/>
            <javadoc line="380">
                Returns gammas from the householder operations for the V matrix.                
                <return>
                    gammas for householder operations                    
                </return>
            </javadoc>
            <method name="getGammasV" type="double[]" line="385"/>
            <method name="inputModified" type="boolean" line="390"/>
        </class>
    </source>