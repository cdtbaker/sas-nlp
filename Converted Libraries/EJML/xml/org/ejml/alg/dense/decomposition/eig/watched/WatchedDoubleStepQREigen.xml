<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.eig.watched">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.alg.dense.decomposition.eig.EigenvalueSmall"/>
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.Complex64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.MatrixFeatures"/>
        <import package="java.util.Random"/>
        <class name="WatchedDoubleStepQREigen" line="9">
            <javadoc line="9">
                &lt;p&gt;
                  The double step implicit Eigenvalue decomposition algorithm is fairly complicated and needs to be designed so that
                  it can handle several special cases.  To aid in development and debugging this class was created.  It allows
                  individual components to be tested and to print out their results.  This shows how each step is performed.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Do not use this class to compute the eigenvalues since it is much slower than a non-debug implementation.
                  &lt;/p&gt;                
            </javadoc>
            <declaration name="rand" type="Random" line="20"/>
            <declaration name="N" type="int" line="21"/>
            <declaration name="A" type="DenseMatrix64F" line="22"/>
            <declaration name="u" type="DenseMatrix64F" line="23"/>
            <declaration name="gamma" type="double" line="24"/>
            <declaration name="_temp" type="DenseMatrix64F" line="25"/>
            <declaration name="numStepsFind" type="int" line="26"/>
            <declaration name="steps" type="int" line="27"/>
            <declaration name="eigenvalues" type="Complex64F" line="28"/>
            <declaration name="numEigen" type="int" line="29"/>
            <declaration name="valueSmall" type="EigenvalueSmall" line="30"/>
            <declaration name="temp" type="double" line="31"/>
            <declaration name="printHumps" type="boolean" line="32"/>
            <declaration name="checkHessenberg" type="boolean" line="33"/>
            <declaration name="checkOrthogonal" type="boolean" line="34"/>
            <declaration name="checkUncountable" type="boolean" line="35"/>
            <declaration name="useStandardEq" type="boolean" line="36"/>
            <declaration name="useCareful2x2" type="boolean" line="37"/>
            <declaration name="normalize" type="boolean" line="38"/>
            <declaration name="lastExceptional" type="int" line="39"/>
            <declaration name="numExceptional" type="int" line="40"/>
            <declaration name="exceptionalThreshold" type="int" line="41"/>
            <declaration name="maxIterations" type="int" line="42"/>
            <declaration name="createR" type="boolean" line="43"/>
            <declaration name="Q" type="DenseMatrix64F" line="44"/>
            <method name="incrementSteps" type="void" line="45"/>
            <method name="setQ" type="void" line="48">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="addEigenvalue" type="void" line="51">
                <params>
                    <param name="v" type="double"/>
                </params>
            </method>
            <method name="addEigenvalue" type="void" line="58">
                <params>
                    <param name="v" type="double"/>
                    <param name="i" type="double"/>
                </params>
            </method>
            <method name="setChecks" type="void" line="65">
                <params>
                    <param name="hessenberg" type="boolean"/>
                    <param name="orthogonal" type="boolean"/>
                    <param name="uncountable" type="boolean"/>
                </params>
            </method>
            <method name="isZero" type="boolean" line="70">
                <params>
                    <param name="x1" type="int"/>
                    <param name="x2" type="int"/>
                </params>
                <declaration name="target" type="double" line="71"/>
                <declaration name="above" type="double" line="72"/>
                <declaration name="right" type="double" line="73"/>
            </method>
            <method name="setup" type="void" line="76">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="78"/>
                <scope line="85"/>
                <scope line="89">
                    <scope line="90"/>
                </scope>
                <scope line="95"/>
            </method>
            <javadoc line="103">
                Perform a shift in a random direction that is of the same magnitude as the elements in the matrix.                
            </javadoc>
            <method name="exceptionalShift" type="void" line="106">
                <params>
                    <param name="x1" type="int"/>
                    <param name="x2" type="int"/>
                </params>
                <declaration name="val" type="double" line="108"/>
                <declaration name="p" type="double" line="111"/>
            </method>
            <javadoc line="117">
                Performs an implicit double step using the values contained in the lower right hand side
                  of the submatrix for the estimated eigenvector values.                
                <param>
                    x1                    
                </param>
                <param>
                    x2                    
                </param>
            </javadoc>
            <method name="implicitDoubleStep" type="void" line="123">
                <params>
                    <param name="x1" type="int"/>
                    <param name="x2" type="int"/>
                </params>
                <declaration name="z11" type="double" line="125"/>
                <declaration name="z12" type="double" line="126"/>
                <declaration name="z21" type="double" line="127"/>
                <declaration name="z22" type="double" line="128"/>
                <declaration name="a11" type="double" line="129"/>
                <declaration name="a21" type="double" line="130"/>
                <declaration name="a12" type="double" line="131"/>
                <declaration name="a22" type="double" line="132"/>
                <declaration name="a32" type="double" line="133"/>
                <scope line="134">
                    <declaration name="max" type="double" line="144"/>
                    <scope line="145"/>
                </scope>
                <declaration name="b11" type="double" line="158"/>
                <scope line="159"/>
                <scope line="164"/>
            </method>
            <javadoc line="171">
                Performs an implicit double step given the set of two imaginary eigenvalues provided.
                  Since one eigenvalue is the complex conjugate of the other only one set of real and imaginary
                  numbers is needed.                
                <param>
                    x1 upper index of submatrix.                    
                </param>
                <param>
                    x2 lower index of submatrix.                    
                </param>
                <param>
                    real Real component of each of the eigenvalues.                    
                </param>
                <param>
                    img Imaginary component of one of the eigenvalues.                    
                </param>
            </javadoc>
            <method name="performImplicitDoubleStep" type="void" line="180">
                <params>
                    <param name="x1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="real" type="double"/>
                    <param name="img" type="double"/>
                </params>
                <declaration name="a11" type="double" line="181"/>
                <declaration name="a21" type="double" line="182"/>
                <declaration name="a12" type="double" line="183"/>
                <declaration name="a22" type="double" line="184"/>
                <declaration name="a32" type="double" line="185"/>
                <declaration name="p_plus_t" type="double" line="186"/>
                <declaration name="p_times_t" type="double" line="187"/>
                <declaration name="b11" type="double" line="188"/>
                <scope line="189"/>
                <scope line="194"/>
            </method>
            <method name="performImplicitDoubleStep" type="void" line="201">
                <params>
                    <param name="x1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="b11" type="double"/>
                    <param name="b21" type="double"/>
                    <param name="b31" type="double"/>
                </params>
                <scope line="203">
                    <scope line="205"/>
                </scope>
                <scope line="211"/>
                <scope line="216">
                    <scope line="217"/>
                    <scope line="221"/>
                </scope>
                <scope line="227"/>
                <scope line="231"/>
                <scope line="235"/>
            </method>
            <method name="performImplicitSingleStep" type="void" line="240">
                <params>
                    <param name="x1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="eigenvalue" type="double"/>
                </params>
                <scope line="242"/>
                <scope line="246"/>
                <scope line="251">
                    <scope line="252"/>
                    <scope line="256"/>
                </scope>
                <scope line="261"/>
            </method>
            <method name="createBulgeSingleStep" type="boolean" line="266">
                <params>
                    <param name="x1" type="int"/>
                    <param name="eigenvalue" type="double"/>
                </params>
                <declaration name="b11" type="double" line="267"/>
                <declaration name="b21" type="double" line="268"/>
                <declaration name="threshold" type="double" line="269"/>
            </method>
            <method name="bulgeDoubleStepQn" type="boolean" line="272">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="a11" type="double" line="273"/>
                <declaration name="a21" type="double" line="274"/>
                <declaration name="a31" type="double" line="275"/>
                <declaration name="threshold" type="double" line="276"/>
            </method>
            <method name="bulgeDoubleStepQn" type="boolean" line="279">
                <params>
                    <param name="i" type="int"/>
                    <param name="a11" type="double"/>
                    <param name="a21" type="double"/>
                    <param name="a31" type="double"/>
                    <param name="threshold" type="double"/>
                    <param name="set" type="boolean"/>
                </params>
                <declaration name="max" type="double" line="280"/>
                <scope line="281">
                    <declaration name="absA11" type="double" line="282"/>
                    <declaration name="absA21" type="double" line="283"/>
                    <declaration name="absA31" type="double" line="284"/>
                    <scope line="287">
                        <scope line="288"/>
                    </scope>
                </scope>
                <scope line="299"/>
                <declaration name="tau" type="double" line="302"/>
                <declaration name="div" type="double" line="304"/>
                <scope line="310"/>
                <scope line="315"/>
                <scope line="320"/>
            </method>
            <method name="bulgeSingleStepQn" type="boolean" line="325">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="a11" type="double" line="326"/>
                <declaration name="a21" type="double" line="327"/>
                <declaration name="threshold" type="double" line="328"/>
            </method>
            <method name="bulgeSingleStepQn" type="boolean" line="331">
                <params>
                    <param name="i" type="int"/>
                    <param name="a11" type="double"/>
                    <param name="a21" type="double"/>
                    <param name="threshold" type="double"/>
                    <param name="set" type="boolean"/>
                </params>
                <declaration name="max" type="double" line="332"/>
                <scope line="333">
                    <scope line="336">
                        <scope line="337"/>
                    </scope>
                </scope>
                <scope line="346"/>
                <declaration name="tau" type="double" line="349"/>
                <declaration name="div" type="double" line="351"/>
                <scope line="356"/>
                <scope line="361"/>
            </method>
            <method name="eigen2by2_scale" type="void" line="366">
                <params>
                    <param name="a11" type="double"/>
                    <param name="a12" type="double"/>
                    <param name="a21" type="double"/>
                    <param name="a22" type="double"/>
                </params>
                <declaration name="abs11" type="double" line="367"/>
                <declaration name="abs22" type="double" line="368"/>
                <declaration name="abs12" type="double" line="369"/>
                <declaration name="abs21" type="double" line="370"/>
                <declaration name="max" type="double" line="371"/>
                <scope line="374"/>
                <scope line="380">
                    <scope line="385"/>
                    <scope line="388"/>
                </scope>
            </method>
            <method name="getNumberOfEigenvalues" type="int" line="397"/>
            <method name="getEigenvalues" type="Complex64F[]" line="400"/>
            <method name="addComputedEigen2x2" type="void" line="403">
                <params>
                    <param name="x1" type="int"/>
                    <param name="x2" type="int"/>
                </params>
                <scope line="405"/>
            </method>
            <method name="isReal2x2" type="boolean" line="411">
                <params>
                    <param name="x1" type="int"/>
                    <param name="x2" type="int"/>
                </params>
            </method>
            <method name="addEigenAt" type="void" line="415">
                <params>
                    <param name="x1" type="int"/>
                </params>
            </method>
            <method name="printSteps" type="void" line="418">
                <scope line="419"/>
            </method>
        </class>
    </source>