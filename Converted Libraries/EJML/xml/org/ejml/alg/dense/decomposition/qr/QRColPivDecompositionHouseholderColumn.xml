<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.qr">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.QRPDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="QRColPivDecompositionHouseholderColumn" line="5">
            <extends class="QRDecompositionHouseholderColumn"/>
            <implements interface="QRPDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="5">
                &lt;p&gt;
                  Performs QR decomposition with column pivoting.  To prevent overflow/underflow the whole matrix
                  is normalized by the max value, but columns are not normalized individually any more. To enable
                  code reuse it extends {@link QRDecompositionHouseholderColumn} and functions from that class
                  are used whenever possible.  Columns are transposed into single arrays, which allow for
                  fast pivots.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Decomposition: AP = QR
                  &lt;/p&gt;
                  &lt;p&gt;
                  Based off the description in &quot;Fundamentals of Matrix Computations&quot;, 2nd by David S. Watkins.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="pivots" type="int" line="22"/>
            <declaration name="normsCol" type="double" line="23"/>
            <declaration name="singularThreshold" type="double" line="24"/>
            <declaration name="rank" type="int" line="25"/>
            <javadoc line="26">
                Configure parameters.                
                <param>
                    singularThreshold The singular threshold.                    
                </param>
            </javadoc>
            <method name="QRColPivDecompositionHouseholderColumn" type="constructor" line="30">
                <params>
                    <param name="singularThreshold" type="double"/>
                </params>
            </method>
            <method name="QRColPivDecompositionHouseholderColumn" type="constructor" line="33"/>
            <method name="setSingularThreshold" type="void" line="35">
                <params>
                    <param name="threshold" type="double"/>
                </params>
            </method>
            <method name="setExpectedMaxSize" type="void" line="38">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
                <scope line="40"/>
            </method>
            <javadoc line="45">
                Computes the Q matrix from the information stored in the QR matrix.  This
                  operation requires about 4(m&lt;sup&gt;2&lt;/sup&gt;n-mn&lt;sup&gt;2&lt;/sup&gt;+n&lt;sup&gt;3&lt;/sup&gt;/3) flops.                
                <param>
                    Q The orthogonal Q matrix.                    
                </param>
            </javadoc>
            <method name="getQ" type="DenseMatrix64F" line="50">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                </params>
                <scope line="51">
                    <scope line="52"/>
                    <scope line="55">
                        <scope line="56"/>
                        <scope line="59"/>
                    </scope>
                </scope>
                <scope line="64">
                    <scope line="65"/>
                    <scope line="68">
                        <scope line="69"/>
                        <scope line="72"/>
                    </scope>
                </scope>
                <scope line="77">
                    <declaration name="u" type="double" line="78"/>
                    <declaration name="vv" type="double" line="79"/>
                </scope>
            </method>
            <javadoc line="86">
                &lt;p&gt;
                  To decompose the matrix &apos;A&apos; it must have full rank.  &apos;A&apos; is a &apos;m&apos; by &apos;n&apos; matrix.
                  It requires about 2nm&lt;sup&gt;2&lt;/sup&gt;-2m&lt;sup&gt;2&lt;/sup&gt;/3 flops.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The matrix provided here can be of different
                  dimension than the one specified in the constructor.  It just has to be smaller than or equal
                  to it.
                  &lt;/p&gt;                
            </javadoc>
            <method name="decompose" type="boolean" line="97">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="101"/>
            </method>
            <javadoc line="110">
                Sets the initial pivot ordering and compute the F-norm squared for each column                
            </javadoc>
            <method name="setupPivotInfo" type="void" line="113">
                <scope line="114">
                    <declaration name="c" type="double" line="116"/>
                    <declaration name="norm" type="double" line="117"/>
                    <scope line="118">
                        <declaration name="element" type="double" line="119"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="125">
                Performs an efficient update of each columns&apos; norm                
            </javadoc>
            <method name="updateNorms" type="void" line="128">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="foundNegative" type="boolean" line="129"/>
                <scope line="130">
                    <declaration name="e" type="double" line="131"/>
                    <scope line="133"/>
                </scope>
                <scope line="138">
                    <scope line="139">
                        <declaration name="u" type="double" line="140"/>
                        <declaration name="actual" type="double" line="141"/>
                        <scope line="142">
                            <declaration name="v" type="double" line="143"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="150">
                Finds the column with the largest normal and makes that the first column                
                <param>
                    j Current column being inspected                    
                </param>
            </javadoc>
            <method name="swapColumns" type="void" line="154">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="largestIndex" type="int" line="155"/>
                <declaration name="largestNorm" type="double" line="156"/>
                <scope line="157">
                    <declaration name="n" type="double" line="158"/>
                    <scope line="159"/>
                </scope>
                <declaration name="tempC" type="double[]" line="164"/>
                <declaration name="tempN" type="double" line="167"/>
                <declaration name="tempP" type="int" line="170"/>
            </method>
            <javadoc line="174">
                &lt;p&gt;
                  Computes the householder vector &quot;u&quot; for the first column of submatrix j. The already computed
                  norm is used and checks to see if the matrix is singular at this point.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Q = I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This function finds the values of &apos;u&apos; and &apos;&amp;gamma;&apos;.
                  &lt;/p&gt;                
                <param>
                    j Which submatrix to work off of.                    
                </param>
                <return>
                    false if it is degenerate                    
                </return>
            </javadoc>
            <method name="householderPivot" type="boolean" line="188">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="u" type="double" line="189"/>
                <declaration name="max" type="double" line="190"/>
                <scope line="191"/>
                <scope line="194">
                    <declaration name="u_0" type="double" line="196"/>
                    <scope line="201"/>
                </scope>
            </method>
            <method name="getRank" type="int" line="208"/>
            <method name="getPivots" type="int[]" line="211"/>
            <method name="getPivotMatrix" type="DenseMatrix64F" line="214">
                <params>
                    <param name="P" type="DenseMatrix64F"/>
                </params>
                <scope line="218"/>
                <scope line="221"/>
            </method>
        </class>
    </source>