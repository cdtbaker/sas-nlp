<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.hessenberg">
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="TridiagonalDecompositionHouseholder" line="5">
            <implements interface="TridiagonalSimilarDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="5">
                &lt;p&gt;
                  Performs a {@link TridiagonalSimilarDecomposition similar tridiagonal decomposition} on a square symmetric input matrix.
                  Householder vectors perform the similar operation and the symmetry is taken advantage
                  of for good performance.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Finds the decomposition of a matrix in the form of:&lt;br&gt;
                  &lt;br&gt;
                  A = OTO&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;br&gt;
                  where A is a symmetric m by m matrix, O is an orthogonal matrix, and T is a tridiagonal matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is based off of the algorithm described in:&lt;br&gt;
                  &lt;br&gt;
                  David S. Watkins, &quot;Fundamentals of Matrix Computations,&quot; Second Edition.  Page 349-355
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="QT" type="DenseMatrix64F" line="26"/>
            <javadoc line="26">
                Only the upper right triangle is used.  The Tridiagonal portion stores
                  the tridiagonal matrix.  The rows store householder vectors.                
            </javadoc>
            <declaration name="N" type="int" line="31"/>
            <declaration name="w" type="double" line="32"/>
            <declaration name="gammas" type="double" line="33"/>
            <declaration name="b" type="double" line="34"/>
            <method name="TridiagonalDecompositionHouseholder" type="constructor" line="35"/>
            <javadoc line="41">
                Returns the internal matrix where the decomposed results are stored.                
                <return>
                                        
                </return>
            </javadoc>
            <method name="getQT" type="DenseMatrix64F" line="45"/>
            <method name="getDiagonal" type="void" line="48">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="off" type="double[]"/>
                </params>
                <scope line="49">
                    <scope line="51"/>
                </scope>
            </method>
            <javadoc line="56">
                Extracts the tridiagonal matrix found in the decomposition.                
                <param>
                    T If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted T matrix.                    
                </return>
            </javadoc>
            <method name="getT" type="DenseMatrix64F" line="61">
                <params>
                    <param name="T" type="DenseMatrix64F"/>
                </params>
                <scope line="62"/>
                <scope line="68">
                    <declaration name="a" type="double" line="70"/>
                </scope>
                <scope line="74"/>
            </method>
            <javadoc line="80">
                An orthogonal matrix that has the following property: T = Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <param>
                    Q If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getQ" type="DenseMatrix64F" line="85">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <scope line="86"/>
                <scope line="92">
                    <scope line="93">
                        <scope line="95"/>
                    </scope>
                </scope>
                <scope line="101">
                    <scope line="102">
                        <scope line="104"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="112">
                Decomposes the provided symmetric matrix.                
                <param>
                    A Symmetric matrix that is going to be decomposed.  Not modified.                    
                </param>
            </javadoc>
            <method name="decompose" type="boolean" line="116">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="118"/>
            </method>
            <javadoc line="123">
                Computes and performs the similar a transform for submatrix k.                
            </javadoc>
            <method name="similarTransform" type="void" line="126">
                <params>
                    <param name="k" type="int"/>
                </params>
                <declaration name="t" type="double" line="127"/>
                <declaration name="max" type="double" line="128"/>
                <declaration name="rowU" type="int" line="129"/>
                <scope line="130">
                    <declaration name="val" type="double" line="131"/>
                </scope>
                <scope line="134">
                    <declaration name="tau" type="double" line="135"/>
                    <declaration name="nu" type="double" line="136"/>
                    <declaration name="gamma" type="double" line="139"/>
                </scope>
                <scope line="144"/>
            </method>
            <javadoc line="148">
                Performs the householder operations on left and right and side of the matrix.  Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <param>
                    row Specifies the submatrix.                    
                </param>
                <param>
                    gamma The gamma for the householder operation                    
                </param>
            </javadoc>
            <method name="householderSymmetric" type="void" line="153">
                <params>
                    <param name="row" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <declaration name="startU" type="int" line="154"/>
                <scope line="155">
                    <declaration name="total" type="double" line="156"/>
                    <scope line="157"/>
                    <scope line="160"/>
                </scope>
                <declaration name="alpha" type="double" line="165"/>
                <scope line="166"/>
                <scope line="170"/>
                <scope line="173">
                    <declaration name="ww" type="double" line="174"/>
                    <declaration name="uu" type="double" line="175"/>
                    <declaration name="rowA" type="int" line="176"/>
                    <scope line="177"/>
                </scope>
            </method>
            <javadoc line="182">
                If needed declares and sets up internal data structures.                
                <param>
                    A Matrix being decomposed.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="186">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="188">
                    <scope line="190"/>
                </scope>
            </method>
            <method name="inputModified" type="boolean" line="198"/>
        </class>
    </source>