<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.hessenberg">
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="TridiagonalDecompositionHouseholder" line="25">
            <comment line="56">
                The size of the matrix                
            </comment>
            <comment line="59">
                temporary storage                
            </comment>
            <comment line="61">
                gammas for the householder operations                
            </comment>
            <comment line="63">
                temporary storage                
            </comment>
            <implements interface="TridiagonalSimilarDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="25">
                &lt;p&gt;
                  Performs a {@link TridiagonalSimilarDecomposition similar tridiagonal decomposition} on a square symmetric input matrix.
                  Householder vectors perform the similar operation and the symmetry is taken advantage
                  of for good performance.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Finds the decomposition of a matrix in the form of:&lt;br&gt;
                  &lt;br&gt;
                  A = OTO&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;br&gt;
                  where A is a symmetric m by m matrix, O is an orthogonal matrix, and T is a tridiagonal matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is based off of the algorithm described in:&lt;br&gt;
                  &lt;br&gt;
                  David S. Watkins, &quot;Fundamentals of Matrix Computations,&quot; Second Edition.  Page 349-355
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="QT" type="DenseMatrix64F" line="49"/>
            <javadoc line="49">
                Only the upper right triangle is used.  The Tridiagonal portion stores
                  the tridiagonal matrix.  The rows store householder vectors.                
            </javadoc>
            <declaration name="N" type="int" line="56"/>
            <declaration name="w" type="double" line="59"/>
            <declaration name="gammas" type="double" line="61"/>
            <declaration name="b" type="double" line="63"/>
            <method name="TridiagonalDecompositionHouseholder" type="constructor" line="65"/>
            <javadoc line="72">
                Returns the internal matrix where the decomposed results are stored.                
                <return>
                                        
                </return>
            </javadoc>
            <method name="getQT" type="DenseMatrix64F" line="76"/>
            <method name="getDiagonal" type="void" line="81">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="off" type="double[]"/>
                </params>
                <scope line="82">
                    <scope line="85"/>
                </scope>
            </method>
            <javadoc line="91">
                Extracts the tridiagonal matrix found in the decomposition.                
                <param>
                    T If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted T matrix.                    
                </return>
            </javadoc>
            <method name="getT" type="DenseMatrix64F" line="98">
                <params>
                    <param name="T" type="DenseMatrix64F"/>
                </params>
                <scope line="99"/>
                <scope line="109">
                    <declaration name="a" type="double" line="111"/>
                </scope>
                <scope line="116"/>
            </method>
            <javadoc line="124">
                An orthogonal matrix that has the following property: T = Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <param>
                    Q If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getQ" type="DenseMatrix64F" line="131">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <scope line="132"/>
                <scope line="141">
                    <scope line="142">
                        <scope line="144"/>
                    </scope>
                </scope>
                <scope line="149">
                    <scope line="150">
                        <scope line="152"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="162">
                Decomposes the provided symmetric matrix.                
                <param>
                    A Symmetric matrix that is going to be decomposed.  Not modified.                    
                </param>
            </javadoc>
            <method name="decompose" type="boolean" line="168">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="171"/>
            </method>
            <javadoc line="178">
                Computes and performs the similar a transform for submatrix k.                
            </javadoc>
            <method name="similarTransform" type="void" line="181">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="185">
                    find the largest value in this column
                     this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <comment line="198">
                    -------- set up the reflector Q_k                    
                </comment>
                <comment line="202">
                    write the reflector into the lower left column of the matrix                    
                </comment>
                <comment line="210">
                    ---------- Specialized householder that takes advantage of the symmetry                    
                </comment>
                <comment line="213">
                    since the first element in the householder vector is known to be 1
                     store the full upper hessenberg                    
                </comment>
                <declaration name="t" type="double" line="182"/>
                <declaration name="max" type="double" line="186"/>
                <declaration name="rowU" type="int" line="188"/>
                <scope line="190">
                    <declaration name="val" type="double" line="191"/>
                </scope>
                <scope line="196">
                    <declaration name="tau" type="double" line="199"/>
                    <declaration name="nu" type="double" line="202"/>
                    <declaration name="gamma" type="double" line="206"/>
                </scope>
                <scope line="215"/>
            </method>
            <javadoc line="220">
                Performs the householder operations on left and right and side of the matrix.  Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <param>
                    row Specifies the submatrix.                    
                </param>
                <param>
                    gamma The gamma for the householder operation                    
                </param>
            </javadoc>
            <method name="householderSymmetric" type="void" line="227">
                <params>
                    <param name="row" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <comment line="231">
                    compute v = -gamma*A*u                    
                </comment>
                <comment line="234">
                    the lower triangle is not written to so it needs to traverse upwards
                     to get the information.  Reduces the number of matrix writes need
                     improving large matrix performance                    
                </comment>
                <comment line="245">
                    alpha = -0.5*gamma*u^T*v                    
                </comment>
                <comment line="253">
                    w = v + alpha*u                    
                </comment>
                <comment line="257">
                    A = A + w*u^T + u*w^T                    
                </comment>
                <comment line="265">
                    only write to the upper portion of the matrix
                     this reduces the number of cache misses                    
                </comment>
                <declaration name="startU" type="int" line="228"/>
                <scope line="231">
                    <declaration name="total" type="double" line="232"/>
                    <scope line="236"/>
                    <scope line="239"/>
                </scope>
                <declaration name="alpha" type="double" line="245"/>
                <scope line="247"/>
                <scope line="253"/>
                <scope line="257">
                    <declaration name="ww" type="double" line="259"/>
                    <declaration name="uu" type="double" line="260"/>
                    <declaration name="rowA" type="int" line="262"/>
                    <scope line="263"/>
                </scope>
            </method>
            <javadoc line="273">
                If needed declares and sets up internal data structures.                
                <param>
                    A Matrix being decomposed.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="278">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="282">
                    <scope line="285"/>
                </scope>
            </method>
            <method name="inputModified" type="boolean" line="296"/>
        </class>
    </source>