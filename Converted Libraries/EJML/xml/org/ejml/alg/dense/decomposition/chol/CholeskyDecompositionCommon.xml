<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.chol">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.CholeskyDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="CholeskyDecompositionCommon" line="5">
            <implements interface="CholeskyDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="5">
                &lt;p&gt;
                  This is an abstract class for a Cholesky decomposition.  It provides the solvers, but the actual
                  decompsoition is provided in other classes.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A Cholesky Decomposition is a special decomposition for positive-definite symmetric matrices
                  that is more efficient than other general purposes decomposition. It refactors matrices
                  using one of the two following equations:&lt;br&gt;
                  &lt;br&gt;
                  LL&lt;sup&gt;T&lt;/sup&gt;=A&lt;br&gt;
                  R&lt;sup&gt;T&lt;/sup&gt;R=A&lt;br&gt;
                  &lt;br&gt;
                  where L is a lower triangular matrix and R is an upper traingular matrix.&lt;br&gt;
                  &lt;/p&gt;                
                <see>
                    CholeskyDecompositionInner                    
                </see>
                <see>
                    org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionBlock                    
                </see>
                <see>
                    org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionLDL                    
                </see>
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="maxWidth" type="int" line="26"/>
            <declaration name="n" type="int" line="27"/>
            <declaration name="T" type="DenseMatrix64F" line="28"/>
            <declaration name="t" type="double[]" line="29"/>
            <declaration name="vv" type="double" line="30"/>
            <declaration name="lower" type="boolean" line="31"/>
            <javadoc line="32">
                Creates a CholeksyDecomposition capable of decompositong a matrix that is
                  n by n, where n is the width.                
                <param>
                    lower should a lower or upper triangular matrix be used.                    
                </param>
            </javadoc>
            <method name="CholeskyDecompositionCommon" type="constructor" line="37">
                <params>
                    <param name="lower" type="boolean"/>
                </params>
            </method>
            <method name="setExpectedMaxSize" type="void" line="40">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
                <scope line="41"/>
            </method>
            <javadoc line="47">
                If true the decomposition was for a lower triangular matrix.
                  If false it was for an upper triangular matrix.                
                <return>
                    True if lower, false if upper.                    
                </return>
            </javadoc>
            <method name="isLower" type="boolean" line="52"/>
            <javadoc line="55">
                &lt;p&gt;
                  Performs Choleksy decomposition on the provided matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the matrix is not positive definite then this function will return
                  false since it can&apos;t complete its computations.  Not all errors will be
                  found.  This is an efficient way to check for positive definiteness.
                  &lt;/p&gt;                
                <param>
                    mat A symmetric positive definite matrix with n <= widthMax.                    
                </param>
                <return>
                    True if it was able to finish the decomposition.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="67">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                </params>
                <scope line="68"/>
                <scope line="71"/>
                <scope line="77"/>
                <scope line="80"/>
            </method>
            <method name="inputModified" type="boolean" line="84"/>
            <method name="decomposeLower" type="boolean" line="87"/>
            <javadoc line="87">
                Performs an lower triangular decomposition.                
                <return>
                    true if the matrix was decomposed.                    
                </return>
            </javadoc>
            <method name="decomposeUpper" type="boolean" line="92"/>
            <javadoc line="92">
                Performs an upper triangular decomposition.                
                <return>
                    true if the matrix was decomposed.                    
                </return>
            </javadoc>
            <method name="getT" type="DenseMatrix64F" line="97">
                <params>
                    <param name="T" type="DenseMatrix64F"/>
                </params>
                <scope line="98"/>
                <scope line="101"/>
                <scope line="105">
                    <scope line="106">
                        <scope line="107"/>
                    </scope>
                </scope>
                <scope line="112">
                    <scope line="113">
                        <scope line="114"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="121">
                Returns the triangular matrix from the decomposition.                
                <return>
                    A lower or upper triangular matrix.                    
                </return>
            </javadoc>
            <method name="getT" type="DenseMatrix64F" line="125"/>
            <method name="_getVV" type="double[]" line="128"/>
        </class>
    </source>