<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.chol">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.DecompositionInterface"/>
        <class name="CholeskyDecompositionLDL" line="4">
            <implements interface="DecompositionInterface">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="4">
                &lt;p&gt;
                  This variant on the Cholesky decomposition avoid the need to take the square root
                  by performing the following decomposition:&lt;br&gt;
                  &lt;br&gt;
                  LDL&lt;sup&gt;T&lt;/sup&gt;=A&lt;br&gt;
                  &lt;br&gt;
                  where L is a lower triangular matrix with zeros on the diagonal. D is a diagonal matrix.
                  The diagonal elements of L are equal to one.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Unfortunately the speed advantage of not computing the square root is washed out by the
                  increased number of array accesses.  There only appears to be a slight speed boost for
                  very small matrices.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="maxWidth" type="int" line="22"/>
            <declaration name="n" type="int" line="23"/>
            <declaration name="L" type="DenseMatrix64F" line="24"/>
            <declaration name="el" type="double[]" line="25"/>
            <declaration name="d" type="double[]" line="26"/>
            <declaration name="vv" type="double" line="27"/>
            <method name="setExpectedMaxSize" type="void" line="28">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
                <scope line="29"/>
            </method>
            <javadoc line="38">
                &lt;p&gt;
                  Performs Choleksy decomposition on the provided matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the matrix is not positive definite then this function will return
                  false since it can&apos;t complete its computations.  Not all errors will be
                  found.
                  &lt;/p&gt;                
                <param>
                    mat A symetric n by n positive definite matrix.                    
                </param>
                <return>
                    True if it was able to finish the decomposition.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="50">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                </params>
                <scope line="51"/>
                <scope line="54"/>
                <declaration name="d_inv" type="double" line="59"/>
                <scope line="60">
                    <scope line="61">
                        <declaration name="sum" type="double" line="62"/>
                        <scope line="63"/>
                        <scope line="66"/>
                        <scope line="72"/>
                    </scope>
                </scope>
                <scope line="77">
                    <scope line="78"/>
                </scope>
            </method>
            <method name="inputModified" type="boolean" line="84"/>
            <javadoc line="87">
                Diagonal elements of the diagonal D matrix.                
                <return>
                    diagonal elements of D                    
                </return>
            </javadoc>
            <method name="getD" type="double[]" line="91"/>
            <javadoc line="94">
                Returns L matrix from the decomposition.&lt;br&gt;
                  LDL&lt;sup&gt;T&lt;/sup&gt;=A                
                <return>
                    A lower triangular matrix.                    
                </return>
            </javadoc>
            <method name="getL" type="DenseMatrix64F" line="99"/>
            <method name="_getVV" type="double[]" line="102"/>
        </class>
    </source>