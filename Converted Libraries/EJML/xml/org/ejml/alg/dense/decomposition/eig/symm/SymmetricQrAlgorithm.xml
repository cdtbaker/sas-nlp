<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.eig.symm">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="SymmetricQrAlgorithm" line="4">
            <implements interface="A"/>
            <implements interface="B"/>
            <javadoc line="4">
                &lt;p&gt;
                  Computes the eigenvalues and eigenvectors of a symmetric tridiagonal matrix using the symmetric QR algorithm.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is based on the algorithm is sketched out in:&lt;br&gt;
                  David S. Watkins, &quot;Fundamentals of Matrix Computations,&quot; Second Edition. page 377-385
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="helper" type="SymmetricQREigenHelper" line="15"/>
            <declaration name="Q" type="DenseMatrix64F" line="16"/>
            <declaration name="eigenvalues" type="double" line="17"/>
            <declaration name="exceptionalThresh" type="int" line="18"/>
            <declaration name="maxIterations" type="int" line="19"/>
            <declaration name="fastEigenvalues" type="boolean" line="20"/>
            <declaration name="followingScript" type="boolean" line="21"/>
            <method name="SymmetricQrAlgorithm" type="constructor" line="22">
                <params>
                    <param name="helper" type="SymmetricQREigenHelper"/>
                </params>
            </method>
            <javadoc line="25">
                Creates a new SymmetricQREigenvalue class that declares its own SymmetricQREigenHelper.                
            </javadoc>
            <method name="SymmetricQrAlgorithm" type="constructor" line="28"/>
            <method name="setMaxIterations" type="void" line="31">
                <params>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <method name="getQ" type="DenseMatrix64F" line="34"/>
            <method name="setQ" type="void" line="37">
                <params>
                    <param name="q" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="setFastEigenvalues" type="void" line="40">
                <params>
                    <param name="fastEigenvalues" type="boolean"/>
                </params>
            </method>
            <javadoc line="43">
                Returns the eigenvalue at the specified index.                
                <param>
                    index Which eigenvalue.                    
                </param>
                <return>
                    The eigenvalue.                    
                </return>
            </javadoc>
            <method name="getEigenvalue" type="double" line="48">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="51">
                Returns the number of eigenvalues available.                
                <return>
                    How many eigenvalues there are.                    
                </return>
            </javadoc>
            <method name="getNumberOfEigenvalues" type="int" line="55"/>
            <javadoc line="58">
                Computes the eigenvalue of the provided tridiagonal matrix.  Note that only the upper portion
                  needs to be tridiagonal.  The bottom diagonal is assumed to be the same as the top.                
                <param>
                    sideLength Number of rows and columns in the input matrix.                    
                </param>
                <param>
                    diag Diagonal elements from tridiagonal matrix. Modified.                    
                </param>
                <param>
                    off Off diagonal elements from tridiagonal matrix. Modified.                    
                </param>
                <return>
                    true if it succeeds and false if it fails.                    
                </return>
            </javadoc>
            <method name="process" type="boolean" line="66">
                <params>
                    <param name="sideLength" type="int"/>
                    <param name="diag" type="double"/>
                    <param name="off" type="double"/>
                    <param name="eigenvalues" type="double"/>
                </params>
            </method>
            <method name="process" type="boolean" line="75">
                <params>
                    <param name="sideLength" type="int"/>
                    <param name="diag" type="double"/>
                    <param name="off" type="double"/>
                </params>
            </method>
            <method name="_process" type="boolean" line="81">
                <scope line="82">
                    <scope line="83"/>
                    <scope line="86"/>
                    <scope line="90"/>
                    <scope line="95"/>
                    <scope line="98"/>
                </scope>
            </method>
            <javadoc line="105">
                First looks for zeros and then performs the implicit single step in the QR Algorithm.                
            </javadoc>
            <method name="performStep" type="void" line="108">
                <scope line="109">
                    <scope line="110"/>
                </scope>
                <declaration name="lambda" type="double" line="116"/>
                <scope line="117">
                    <scope line="118"/>
                    <scope line="122"/>
                </scope>
                <scope line="126"/>
            </method>
        </class>
    </source>