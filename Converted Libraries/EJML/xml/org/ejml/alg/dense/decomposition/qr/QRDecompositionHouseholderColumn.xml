<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.qr">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.QRDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="QRDecompositionHouseholderColumn" line="26">
            <comment line="45">
                [ column][ row ]                
            </comment>
            <comment line="47">
                used internally to store temporary data                
            </comment>
            <comment line="50">
                dimension of the decomposed matrices                
            </comment>
            <comment line="51">
                this is &apos;n&apos;                
            </comment>
            <comment line="52">
                this is &apos;m&apos;                
            </comment>
            <comment line="55">
                the computed gamma for Q_k matrix                
            </comment>
            <comment line="57">
                local variables                
            </comment>
            <comment line="61">
                did it encounter an error?                
            </comment>
            <implements interface="QRDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="26">
                &lt;p&gt;
                  Householder QR decomposition is rich in operations along the columns of the matrix.  This can be
                  taken advantage of by solving for the Q matrix in a column major format to reduce the number
                  of CPU cache misses and the number of copies that are performed.
                  &lt;/p&gt;                
                <see>
                    org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholder                    
                </see>
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="dataQR" type="double" line="39"/>
            <javadoc line="39">
                Where the Q and R matrices are stored.  R is stored in the
                  upper triangular portion and Q on the lower bit.  Lower columns
                  are where u is stored.  Q_k = (I - gamma_ku_ku_k^T).                
            </javadoc>
            <declaration name="v" type="double" line="47"/>
            <declaration name="numCols" type="int" line="50"/>
            <declaration name="numRows" type="int" line="51"/>
            <declaration name="minLength" type="int" line="52"/>
            <declaration name="gammas" type="double" line="55"/>
            <declaration name="gamma" type="double" line="57"/>
            <declaration name="tau" type="double" line="58"/>
            <declaration name="error" type="boolean" line="61"/>
            <method name="setExpectedMaxSize" type="void" line="63">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
                <declaration name="maxLength" type="int" line="67"/>
                <scope line="69"/>
                <scope line="75"/>
                <scope line="78"/>
            </method>
            <javadoc line="83">
                Returns the combined QR matrix in a 2D array format that is column major.                
                <return>
                    The QR matrix in a 2D matrix column major format. [ column ][ row ]                    
                </return>
            </javadoc>
            <method name="getQR" type="double[][]" line="88"/>
            <javadoc line="92">
                Computes the Q matrix from the imformation stored in the QR matrix.  This
                  operation requires about 4(m&lt;sup&gt;2&lt;/sup&gt;n-mn&lt;sup&gt;2&lt;/sup&gt;+n&lt;sup&gt;3&lt;/sup&gt;/3) flops.                
                <param>
                    Q The orthogonal Q matrix.                    
                </param>
            </javadoc>
            <method name="getQ" type="DenseMatrix64F" line="99">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                </params>
                <scope line="100">
                    <scope line="101"/>
                    <scope line="103">
                        <scope line="104"/>
                        <scope line="106"/>
                    </scope>
                </scope>
                <scope line="110">
                    <scope line="111"/>
                    <scope line="113">
                        <scope line="114"/>
                        <scope line="116"/>
                    </scope>
                </scope>
                <scope line="122">
                    <declaration name="u" type="double" line="123"/>
                    <declaration name="vv" type="double" line="125"/>
                </scope>
            </method>
            <javadoc line="134">
                Returns an upper triangular matrix which is the R in the QR decomposition.                
                <param>
                    R An upper triangular matrix.                    
                </param>
                <param>
                    compact                    
                </param>
            </javadoc>
            <method name="getR" type="DenseMatrix64F" line="141">
                <params>
                    <param name="R" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                </params>
                <scope line="142">
                    <scope line="143"/>
                </scope>
                <scope line="147">
                    <scope line="148"/>
                    <scope line="152"/>
                    <scope line="157">
                        <declaration name="min" type="int" line="158"/>
                        <scope line="159"/>
                    </scope>
                </scope>
                <scope line="165">
                    <declaration name="colR" type="double" line="166"/>
                    <declaration name="l" type="int" line="167"/>
                    <scope line="168">
                        <declaration name="val" type="double" line="169"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="177">
                &lt;p&gt;
                  To decompose the matrix &apos;A&apos; it must have full rank.  &apos;A&apos; is a &apos;m&apos; by &apos;n&apos; matrix.
                  It requires about 2nm&lt;sup&gt;2&lt;/sup&gt;-2m&lt;sup&gt;2&lt;/sup&gt;/3 flops.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The matrix provided here can be of different
                  dimension than the one specified in the constructor.  It just has to be smaller than or equal
                  to it.
                  &lt;/p&gt;                
            </javadoc>
            <method name="decompose" type="boolean" line="190">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="197"/>
            </method>
            <method name="inputModified" type="boolean" line="206"/>
            <javadoc line="210">
                Converts the standard row-major matrix into a column-major vector
                  that is advantageous for this problem.                
                <param>
                    A original matrix that is to be decomposed.                    
                </param>
            </javadoc>
            <method name="convertToColumnMajor" type="void" line="216">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="217">
                    <declaration name="colQ" type="double" line="218"/>
                    <scope line="219"/>
                </scope>
            </method>
            <javadoc line="225">
                &lt;p&gt;
                  Computes the householder vector &quot;u&quot; for the first column of submatrix j.  Note this is
                  a specialized householder for this problem.  There is some protection against
                  overfloaw and underflow.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Q = I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This function finds the values of &apos;u&apos; and &apos;&amp;gamma;&apos;.
                  &lt;/p&gt;                
                <param>
                    j Which submatrix to work off of.                    
                </param>
            </javadoc>
            <method name="householder" type="void" line="241">
                <params>
                    <param name="j" type="int"/>
                </params>
                <comment line="245">
                    find the largest value in this column
                     this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <comment line="253">
                    computes tau and normalizes u by max                    
                </comment>
                <comment line="256">
                    divide u by u_0                    
                </comment>
                <declaration name="u" type="double" line="242"/>
                <declaration name="max" type="double" line="246"/>
                <scope line="248"/>
                <scope line="251">
                    <declaration name="u_0" type="double" line="256"/>
                </scope>
            </method>
            <javadoc line="268">
                &lt;p&gt;
                  Takes the results from the householder computation and updates the &apos;A&apos; matrix.&lt;br&gt;
                  &lt;br&gt;
                  A = (I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)A
                  &lt;/p&gt;                
                <param>
                    w The submatrix.                    
                </param>
            </javadoc>
            <method name="updateA" type="void" line="278">
                <params>
                    <param name="w" type="int"/>
                </params>
                <declaration name="u" type="double" line="279"/>
                <scope line="281">
                    <declaration name="colQ" type="double" line="283"/>
                    <declaration name="val" type="double" line="284"/>
                    <scope line="286"/>
                    <scope line="292"/>
                </scope>
            </method>
            <method name="getGammas" type="double[]" line="298"/>
        </class>
    </source>