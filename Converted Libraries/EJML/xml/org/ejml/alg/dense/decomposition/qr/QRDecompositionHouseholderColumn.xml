<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.qr">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.QRDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="QRDecompositionHouseholderColumn" line="5">
            <implements interface="QRDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="5">
                &lt;p&gt;
                  Householder QR decomposition is rich in operations along the columns of the matrix.  This can be
                  taken advantage of by solving for the Q matrix in a column major format to reduce the number
                  of CPU cache misses and the number of copies that are performed.
                  &lt;/p&gt;                
                <see>
                    org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholder                    
                </see>
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="dataQR" type="double" line="15"/>
            <javadoc line="15">
                Where the Q and R matrices are stored.  R is stored in the
                  upper triangular portion and Q on the lower bit.  Lower columns
                  are where u is stored.  Q_k = (I - gamma_ku_ku_k^T).                
            </javadoc>
            <declaration name="v" type="double" line="21"/>
            <declaration name="numCols" type="int" line="22"/>
            <declaration name="numRows" type="int" line="23"/>
            <declaration name="minLength" type="int" line="24"/>
            <declaration name="gammas" type="double" line="25"/>
            <declaration name="gamma" type="double" line="26"/>
            <declaration name="tau" type="double" line="27"/>
            <declaration name="error" type="boolean" line="28"/>
            <method name="setExpectedMaxSize" type="void" line="29">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
                <declaration name="maxLength" type="int" line="33"/>
                <scope line="34"/>
                <scope line="39"/>
                <scope line="42"/>
            </method>
            <javadoc line="46">
                Returns the combined QR matrix in a 2D array format that is column major.                
                <return>
                    The QR matrix in a 2D matrix column major format. [ column ][ row ]                    
                </return>
            </javadoc>
            <method name="getQR" type="double[][]" line="50"/>
            <javadoc line="53">
                Computes the Q matrix from the imformation stored in the QR matrix.  This
                  operation requires about 4(m&lt;sup&gt;2&lt;/sup&gt;n-mn&lt;sup&gt;2&lt;/sup&gt;+n&lt;sup&gt;3&lt;/sup&gt;/3) flops.                
                <param>
                    Q The orthogonal Q matrix.                    
                </param>
            </javadoc>
            <method name="getQ" type="DenseMatrix64F" line="58">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                </params>
                <scope line="59">
                    <scope line="60"/>
                    <scope line="63">
                        <scope line="64"/>
                        <scope line="67"/>
                    </scope>
                </scope>
                <scope line="72">
                    <scope line="73"/>
                    <scope line="76">
                        <scope line="77"/>
                        <scope line="80"/>
                    </scope>
                </scope>
                <scope line="85">
                    <declaration name="u" type="double" line="86"/>
                    <declaration name="vv" type="double" line="87"/>
                </scope>
            </method>
            <javadoc line="94">
                Returns an upper triangular matrix which is the R in the QR decomposition.                
                <param>
                    R An upper triangular matrix.                    
                </param>
                <param>
                    compact                    
                </param>
            </javadoc>
            <method name="getR" type="DenseMatrix64F" line="99">
                <params>
                    <param name="R" type="DenseMatrix64F"/>
                    <param name="compact" type="boolean"/>
                </params>
                <scope line="100">
                    <scope line="101"/>
                </scope>
                <scope line="106">
                    <scope line="107"/>
                    <scope line="110"/>
                    <scope line="113">
                        <declaration name="min" type="int" line="114"/>
                        <scope line="115"/>
                    </scope>
                </scope>
                <scope line="120">
                    <declaration name="colR" type="double" line="121"/>
                    <declaration name="l" type="int" line="122"/>
                    <scope line="123">
                        <declaration name="val" type="double" line="124"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="130">
                &lt;p&gt;
                  To decompose the matrix &apos;A&apos; it must have full rank.  &apos;A&apos; is a &apos;m&apos; by &apos;n&apos; matrix.
                  It requires about 2nm&lt;sup&gt;2&lt;/sup&gt;-2m&lt;sup&gt;2&lt;/sup&gt;/3 flops.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The matrix provided here can be of different
                  dimension than the one specified in the constructor.  It just has to be smaller than or equal
                  to it.
                  &lt;/p&gt;                
            </javadoc>
            <method name="decompose" type="boolean" line="141">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="145"/>
            </method>
            <method name="inputModified" type="boolean" line="151"/>
            <javadoc line="154">
                Converts the standard row-major matrix into a column-major vector
                  that is advantageous for this problem.                
                <param>
                    A original matrix that is to be decomposed.                    
                </param>
            </javadoc>
            <method name="convertToColumnMajor" type="void" line="159">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="160">
                    <declaration name="colQ" type="double" line="161"/>
                    <scope line="162"/>
                </scope>
            </method>
            <javadoc line="167">
                &lt;p&gt;
                  Computes the householder vector &quot;u&quot; for the first column of submatrix j.  Note this is
                  a specialized householder for this problem.  There is some protection against
                  overfloaw and underflow.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Q = I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This function finds the values of &apos;u&apos; and &apos;&amp;gamma;&apos;.
                  &lt;/p&gt;                
                <param>
                    j Which submatrix to work off of.                    
                </param>
            </javadoc>
            <method name="householder" type="void" line="181">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="u" type="double" line="182"/>
                <declaration name="max" type="double" line="183"/>
                <scope line="184"/>
                <scope line="188">
                    <declaration name="u_0" type="double" line="190"/>
                </scope>
            </method>
            <javadoc line="198">
                &lt;p&gt;
                  Takes the results from the householder computation and updates the &apos;A&apos; matrix.&lt;br&gt;
                  &lt;br&gt;
                  A = (I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)A
                  &lt;/p&gt;                
                <param>
                    w The submatrix.                    
                </param>
            </javadoc>
            <method name="updateA" type="void" line="206">
                <params>
                    <param name="w" type="int"/>
                </params>
                <declaration name="u" type="double" line="207"/>
                <scope line="208">
                    <declaration name="colQ" type="double" line="209"/>
                    <declaration name="val" type="double" line="210"/>
                    <scope line="211"/>
                    <scope line="216"/>
                </scope>
            </method>
            <method name="getGammas" type="double[]" line="221"/>
        </class>
    </source>