<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.qr">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <class name="QrHelperFunctions" line="3">
            <javadoc line="3">
                &lt;p&gt;
                  Contains different functions that are useful for computing the QR decomposition of a matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Two different families of functions are provided for help in computing reflectors.  Internally
                  both of these functions switch between normalization by division or multiplication.  Multiplication
                  is most often significantly faster than division (2 or 3 times) but produces less accurate results
                  on very small numbers.  It checks to see if round off error is significant and decides which
                  one it should do.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Tests were done using the stability benchmark in jmatbench and there doesn&apos;t seem to be
                  any advantage to always dividing by the max instead of checking and deciding.  The most
                  noticeable difference between the two methods is with very small numbers.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <method name="findMax" type="double" line="22">
                <params>
                    <param name="u" type="double[]"/>
                    <param name="startU" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="max" type="double" line="23"/>
                <declaration name="index" type="int" line="24"/>
                <declaration name="stopIndex" type="int" line="25"/>
                <scope line="26">
                    <declaration name="val" type="double" line="27"/>
                </scope>
            </method>
            <method name="divideElements" type="void" line="33">
                <params>
                    <param name="j" type="int"/>
                    <param name="numRows" type="int"/>
                    <param name="u" type="double[]"/>
                    <param name="u_0" type="double"/>
                </params>
                <scope line="34"/>
            </method>
            <method name="divideElements" type="void" line="38">
                <params>
                    <param name="j" type="int"/>
                    <param name="numRows" type="int"/>
                    <param name="u" type="double[]"/>
                    <param name="startU" type="int"/>
                    <param name="u_0" type="double"/>
                </params>
                <scope line="39"/>
            </method>
            <method name="divideElements_Brow" type="void" line="43">
                <params>
                    <param name="j" type="int"/>
                    <param name="numRows" type="int"/>
                    <param name="u" type="double[]"/>
                    <param name="b" type="double"/>
                    <param name="startB" type="int"/>
                    <param name="u_0" type="double"/>
                </params>
                <scope line="44"/>
            </method>
            <method name="divideElements_Bcol" type="void" line="48">
                <params>
                    <param name="j" type="int"/>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="u" type="double[]"/>
                    <param name="b" type="double"/>
                    <param name="startB" type="int"/>
                    <param name="u_0" type="double"/>
                </params>
                <declaration name="indexB" type="int" line="49"/>
                <scope line="50"/>
            </method>
            <method name="computeTauAndDivide" type="double" line="54">
                <params>
                    <param name="j" type="int"/>
                    <param name="numRows" type="int"/>
                    <param name="u" type="double[]"/>
                    <param name="startU" type="int"/>
                    <param name="max" type="double"/>
                </params>
                <declaration name="tau" type="double" line="55"/>
                <scope line="56">
                    <declaration name="d" type="double" line="57"/>
                </scope>
            </method>
            <javadoc line="64">
                Normalizes elements in &apos;u&apos; by dividing by max and computes the norm2 of the normalized
                  array u.  Adjust the sign of the returned value depending on the size of the first
                  element in &apos;u&apos;. Normalization is done to avoid overflow.
                  &lt;pre&gt;
                  for i=j:numRows
                  u[i] = u[i] / max
                  tau = tau + u[i]u[i]
                  end
                  tau = sqrt(tau)
                  if( u[j] &lt; 0 )
                  tau = -tau;
                  &lt;/pre&gt;                
                <param>
                    j Element in 'u' that it starts at.                    
                </param>
                <param>
                    numRows Element in 'u' that it stops at.                    
                </param>
                <param>
                    u Array                    
                </param>
                <param>
                    max Max value in 'u' that is used to normalize it.                    
                </param>
                <return>
                    norm2 of 'u'                    
                </return>
            </javadoc>
            <method name="computeTauAndDivide" type="double" line="83">
                <params>
                    <param name="j" type="int"/>
                    <param name="numRows" type="int"/>
                    <param name="u" type="double[]"/>
                    <param name="max" type="double"/>
                </params>
                <declaration name="tau" type="double" line="84"/>
                <scope line="85">
                    <declaration name="d" type="double" line="86"/>
                </scope>
            </method>
            <javadoc line="93">
                &lt;p&gt;
                  Performs a rank-1 update operation on the submatrix specified by w with the multiply on the right.&lt;br&gt;
                  &lt;br&gt;
                  A = (I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)A&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  The order that matrix multiplies are performed has been carefully selected
                  to minimize the number of operations.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Before this can become a truly generic operation the submatrix specification needs
                  to be made more generic.
                  &lt;/p&gt;                
            </javadoc>
            <method name="rank1UpdateMultR" type="void" line="108">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="u" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="colA0" type="int"/>
                    <param name="w0" type="int"/>
                    <param name="w1" type="int"/>
                    <param name="_temp" type="double"/>
                </params>
                <scope line="109"/>
                <scope line="112">
                    <declaration name="indexA" type="int" line="113"/>
                    <declaration name="valU" type="double" line="114"/>
                    <scope line="115"/>
                </scope>
                <scope line="119"/>
                <scope line="122">
                    <declaration name="valU" type="double" line="123"/>
                    <declaration name="indexA" type="int" line="124"/>
                    <scope line="125"/>
                </scope>
            </method>
            <method name="rank1UpdateMultR" type="void" line="130">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="u" type="double"/>
                    <param name="offsetU" type="int"/>
                    <param name="gamma" type="double"/>
                    <param name="colA0" type="int"/>
                    <param name="w0" type="int"/>
                    <param name="w1" type="int"/>
                    <param name="_temp" type="double"/>
                </params>
                <scope line="131"/>
                <scope line="134">
                    <declaration name="indexA" type="int" line="135"/>
                    <declaration name="valU" type="double" line="136"/>
                    <scope line="137"/>
                </scope>
                <scope line="141"/>
                <scope line="144">
                    <declaration name="valU" type="double" line="145"/>
                    <declaration name="indexA" type="int" line="146"/>
                    <scope line="147"/>
                </scope>
            </method>
            <javadoc line="152">
                &lt;p&gt;
                  Performs a rank-1 update operation on the submatrix specified by w with the multiply on the left.&lt;br&gt;
                  &lt;br&gt;
                  A = A(I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  The order that matrix multiplies are performed has been carefully selected
                  to minimize the number of operations.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Before this can become a truly generic operation the submatrix specification needs
                  to be made more generic.
                  &lt;/p&gt;                
            </javadoc>
            <method name="rank1UpdateMultL" type="void" line="167">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="u" type="double"/>
                    <param name="gamma" type="double"/>
                    <param name="colA0" type="int"/>
                    <param name="w0" type="int"/>
                    <param name="w1" type="int"/>
                </params>
                <scope line="168">
                    <declaration name="startIndex" type="int" line="169"/>
                    <declaration name="sum" type="double" line="170"/>
                    <declaration name="rowIndex" type="int" line="171"/>
                    <scope line="172"/>
                    <scope line="177"/>
                </scope>
            </method>
        </class>
    </source>