<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.bidiagonal">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <import package="org.ejml.simple.SimpleMatrix"/>
        <class name="BidiagonalDecompositionNaive" line="26">
            <comment line="39">
                number of rows                
            </comment>
            <comment line="41">
                number of columns                
            </comment>
            <comment line="43">
                smallest of m and n                
            </comment>
            <javadoc line="26">
                A slower but much simpler version of {@link BidiagonalDecompositionRow} that internally uses
                  SimpleMatrix and explicitly computes the householder matrices.  This was easier to code up and is
                  used to validate other implementations.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="U" type="SimpleMatrix" line="34"/>
            <declaration name="B" type="SimpleMatrix" line="35"/>
            <declaration name="V" type="SimpleMatrix" line="36"/>
            <declaration name="m" type="int" line="39"/>
            <declaration name="n" type="int" line="41"/>
            <declaration name="min" type="int" line="43"/>
            <declaration name="u" type="DenseMatrix64F" line="46"/>
            <method name="getU" type="SimpleMatrix" line="48"/>
            <method name="getB" type="SimpleMatrix" line="52"/>
            <method name="getV" type="SimpleMatrix" line="56"/>
            <javadoc line="60">
                Computes the decomposition of the provided matrix.  If no errors are detected then true is returned,
                  false otherwise.                
                <param>
                    A  The matrix that is being decomposed.  Not modified.                    
                </param>
                <return>
                    If it detects any errors or not.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="67">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="init" type="void" line="72">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="max" type="int" line="82"/>
            </method>
            <javadoc line="88">
                Internal function for computing the decomposition.                
            </javadoc>
            <method name="_decompose" type="boolean" line="91">
                <scope line="92"/>
            </method>
            <method name="computeU" type="void" line="100">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="104">
                    find the largest value in this column                    
                </comment>
                <comment line="105">
                    this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <comment line="109">
                    copy the householder vector to vector outside of the matrix to reduce caching issues                    
                </comment>
                <comment line="110">
                    big improvement on larger matrices and a relatively small performance hit on small matrices.                    
                </comment>
                <comment line="118">
                    -------- set up the reflector Q_k                    
                </comment>
                <comment line="121">
                    normalize to reduce overflow/underflow                    
                </comment>
                <comment line="122">
                    and compute tau for the reflector                    
                </comment>
                <comment line="133">
                    write the reflector into the lower left column of the matrix                    
                </comment>
                <declaration name="u" type="double" line="102"/>
                <declaration name="max" type="double" line="106"/>
                <scope line="108">
                    <declaration name="val" type="double" line="111"/>
                </scope>
                <scope line="117">
                    <declaration name="tau" type="double" line="120"/>
                    <scope line="123">
                        <declaration name="val" type="double" line="124"/>
                    </scope>
                    <declaration name="nu" type="double" line="134"/>
                    <scope line="137"/>
                    <declaration name="Q_k" type="SimpleMatrix" line="141"/>
                </scope>
            </method>
            <method name="computeV" type="void" line="147">
                <params>
                    <param name="k" type="int"/>
                </params>
                <comment line="153">
                    find the largest value in this column                    
                </comment>
                <comment line="154">
                    this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <comment line="158">
                    copy the householder vector to vector outside of the matrix to reduce caching issues                    
                </comment>
                <comment line="159">
                    big improvement on larger matrices and a relatively small performance hit on small matrices.                    
                </comment>
                <comment line="167">
                    -------- set up the reflector Q_k                    
                </comment>
                <comment line="170">
                    normalize to reduce overflow/underflow                    
                </comment>
                <comment line="171">
                    and compute tau for the reflector                    
                </comment>
                <comment line="182">
                    write the reflector into the lower left column of the matrix                    
                </comment>
                <comment line="190">
                    ---------- multiply on the left by Q_k                    
                </comment>
                <declaration name="u" type="double" line="150"/>
                <declaration name="max" type="double" line="155"/>
                <scope line="157">
                    <declaration name="val" type="double" line="160"/>
                </scope>
                <scope line="166">
                    <declaration name="tau" type="double" line="169"/>
                    <scope line="172">
                        <declaration name="val" type="double" line="173"/>
                    </scope>
                    <declaration name="nu" type="double" line="183"/>
                    <scope line="186"/>
                    <declaration name="Q_k" type="SimpleMatrix" line="191"/>
                </scope>
            </method>
        </class>
    </source>