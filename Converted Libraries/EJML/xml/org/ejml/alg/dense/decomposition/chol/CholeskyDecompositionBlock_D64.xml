<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.chol">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <class name="CholeskyDecompositionBlock_D64" line="24">
            <extends class="CholeskyDecompositionCommon_D64"/>
            <comment line="33">
                how wide the blocks should be                
            </comment>
            <comment line="34">
                row rectangular matrix                
            </comment>
            <javadoc line="24">
                This is an implementation of Cholesky that processes internal submatrices as blocks.  This is
                  done to reduce the number of cache issues.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="blockWidth" type="int" line="32"/>
            <declaration name="B" type="DenseMatrix64F" line="33"/>
            <declaration name="chol" type="CholeskyBlockHelper_D64" line="35"/>
            <javadoc line="37">
                Creates a CholeksyDecomposition capable of decomposing a matrix that is
                  n by n, where n is the width.                
                <param>
                    blockWidth The width of a block.                    
                </param>
            </javadoc>
            <method name="CholeskyDecompositionBlock_D64" type="constructor" line="43">
                <params>
                    <param name="blockWidth" type="int"/>
                </params>
            </method>
            <javadoc line="50">
                Declares additional internal data structures.                
            </javadoc>
            <method name="setExpectedMaxSize" type="void" line="54">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
                <comment line="58">
                    if the matrix that is being decomposed is smaller than the block we really don&apos;t
                     see the B matrix.                    
                </comment>
            </method>
            <javadoc line="67">
                &lt;p&gt;
                  Performs Choleksy decomposition on the provided matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the matrix is not positive definite then this function will return
                  false since it can&apos;t complete its computations.  Not all errors will be
                  found.
                  &lt;/p&gt;                
                <return>
                    True if it was able to finish the decomposition.                    
                </return>
            </javadoc>
            <method name="decomposeLower" type="boolean" line="80">
                <comment line="101">
                    apply cholesky to the current block                    
                </comment>
                <comment line="107">
                    B = L^(-1) * B                    
                </comment>
                <comment line="112">
                    c = c - a^T*a                    
                </comment>
                <comment line="121">
                    zero the top right corner.                    
                </comment>
                <declaration name="numBlocks" type="int" line="87"/>
                <declaration name="remainder" type="int" line="88"/>
                <scope line="90"/>
                <scope line="96">
                    <scope line="99">
                        <declaration name="indexSrc" type="int" line="103"/>
                        <declaration name="indexDst" type="int" line="104"/>
                        <declaration name="indexL" type="int" line="109"/>
                    </scope>
                    <scope line="113">
                        <declaration name="width" type="int" line="114"/>
                    </scope>
                </scope>
                <scope line="121">
                    <scope line="122"/>
                </scope>
            </method>
            <method name="decomposeUpper" type="boolean" line="131"/>
            <javadoc line="135">
                This is a variation on the {@link org.ejml.alg.dense.decomposition.TriangularSolver#solveL} function.
                  It grabs the input from the top right row rectangle of the source matrix then writes the results
                  to the lower bottom column rectangle.  The rectangle matrices just matrices are submatrices
                  of the matrix that is being decomposed.  The results are also written to B.                
                <param>
                    L A lower triangular matrix.                    
                </param>
                <param>
                    b_src matrix with the vectors that are to be solved for                    
                </param>
                <param>
                    indexSrc First index of the submatrix where the inputs are coming from.                    
                </param>
                <param>
                    indexDst First index of the submatrix where the results are going to.                    
                </param>
                <param>
                    B                    
                </param>
            </javadoc>
            <method name="solveL_special" type="void" line="151">
                <params>
                    <param name="L" type="double"/>
                    <param name="b_src" type="DenseMatrix64F"/>
                    <param name="indexSrc" type="int"/>
                    <param name="indexDst" type="int"/>
                    <param name="B" type="DenseMatrix64F"/>
                </params>
                <comment line="160">
                    for( int j = 0; j &lt; n; j++ ) {
                                for( int i = 0; i &lt; widthL; i++ ) {
                                    double sum = dataSrc[indexSrc+i*b_src.numCols+j];
                                    for( int k=0; k&lt;i; k++ ) {
                                        sum -= L[i*widthL+k]* b[k*n+j];
                                    }
                                    double val = sum / L[i*widthL+i];
                                    dataSrc[indexDst+j*b_src.numCols+i] = val;
                                    b[i*n+j] = val;
                                }
                            }                    
                </comment>
                <comment line="176">
                    for( int i = 0; i &lt; widthL; i++                    
                </comment>
                <comment line="183">
                    for( int k=0; k&lt;i; k++ ) {                    
                </comment>
                <declaration name="dataSrc" type="double" line="152"/>
                <declaration name="b" type="double" line="154"/>
                <declaration name="m" type="int" line="155"/>
                <declaration name="n" type="int" line="156"/>
                <declaration name="widthL" type="int" line="157"/>
                <scope line="171">
                    <declaration name="indexb" type="int" line="172"/>
                    <declaration name="rowL" type="int" line="173"/>
                    <scope line="176">
                        <declaration name="sum" type="double" line="177"/>
                        <declaration name="indexL" type="int" line="179"/>
                        <declaration name="endL" type="int" line="180"/>
                        <declaration name="indexB" type="int" line="181"/>
                        <scope line="183"/>
                        <declaration name="val" type="double" line="186"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="193">
                &lt;p&gt;
                  Performs this operation:&lt;br&gt;
                  &lt;br&gt;
                  c = c - a&lt;sup&gt;T&lt;/sup&gt;a &lt;br&gt;
                  where c is a submatrix.
                  &lt;/p&gt;
                  Only the upper triangle is updated.                
                <param>
                    a A matrix.                    
                </param>
                <param>
                    c A matrix.                    
                </param>
                <param>
                    startIndexC start of the submatrix in c.                    
                </param>
            </javadoc>
            <method name="symmRankTranA_sub" type="void" line="209">
                <params>
                    <param name="a" type="DenseMatrix64F"/>
                    <param name="c" type="DenseMatrix64F"/>
                    <param name="startIndexC" type="int"/>
                </params>
                <comment line="211">
                    TODO update so that it doesn&apos;t modify/read parts that it shouldn&apos;t                    
                </comment>
                <comment line="215">
                    for( int i = 0; i &lt; a.numCols; i++ ) {
                                for( int k = 0; k &lt; a.numRows; k++ ) {
                                    double valA = dataA[k*a.numCols+i];
                    
                                    for( int j = i; j &lt; a.numCols; j++ ) {
                                        dataC[startIndexC+i*c.numCols+j] -= valA * dataA[k*a.numCols+j];
                                    }
                                }
                            }                    
                </comment>
                <declaration name="dataA" type="double" line="211"/>
                <declaration name="dataC" type="double" line="212"/>
                <declaration name="strideC" type="int" line="224"/>
                <scope line="225">
                    <declaration name="indexA" type="int" line="226"/>
                    <declaration name="endR" type="int" line="227"/>
                    <scope line="229">
                        <declaration name="indexC" type="int" line="230"/>
                        <declaration name="valA" type="double" line="231"/>
                        <declaration name="indexR" type="int" line="232"/>
                        <scope line="234"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>