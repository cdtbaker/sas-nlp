<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.hessenberg">
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.DecompositionInterface"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="HessenbergSimilarDecomposition" line="6">
            <implements interface="DecompositionInterface">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="6">
                &lt;p&gt;
                  Finds the decomposition of a matrix in the form of:&lt;br&gt;
                  &lt;br&gt;
                  A = OHO&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;br&gt;
                  where A is an m by m matrix, O is an orthogonal matrix, and H is an upper Hessenberg matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A matrix is upper Hessenberg if a&lt;sup&gt;ij&lt;/sup&gt; = 0 for all i &gt; j+1. For example, the following matrix
                  is upper Hessenberg.&lt;br&gt;
                  &lt;br&gt;
                  WRITE IT OUT USING A TABLE
                  &lt;/p&gt;
                  &lt;p&gt;
                  This decomposition is primarily used as a step for computing the eigenvalue decomposition of a matrix.
                  The basic algorithm comes from David S. Watkins, &quot;Fundamentals of MatrixComputations&quot; Second Edition.
                  &lt;/p&gt;                
            </javadoc>
            <declaration name="QH" type="DenseMatrix64F" line="26"/>
            <declaration name="N" type="int" line="27"/>
            <declaration name="gammas" type="double" line="28"/>
            <declaration name="b" type="double" line="29"/>
            <declaration name="u" type="double" line="30"/>
            <javadoc line="31">
                Creates a decomposition that won&apos;t need to allocate new memory if it is passed matrices up to
                  the specified size.                
                <param>
                    initialSize Expected size of the matrices it will decompose.                    
                </param>
            </javadoc>
            <method name="HessenbergSimilarDecomposition" type="constructor" line="36">
                <params>
                    <param name="initialSize" type="int"/>
                </params>
            </method>
            <method name="HessenbergSimilarDecomposition" type="constructor" line="41"/>
            <javadoc line="44">
                Computes the decomposition of the provided matrix.  If no errors are detected then true is returned,
                  false otherwise.                
                <param>
                    A  The matrix that is being decomposed.  Not modified.                    
                </param>
                <return>
                    If it detects any errors or not.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="50">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="54"/>
            </method>
            <method name="inputModified" type="boolean" line="61"/>
            <javadoc line="64">
                The raw QH matrix that is stored internally.                
                <return>
                    QH matrix.                    
                </return>
            </javadoc>
            <method name="getQH" type="DenseMatrix64F" line="68"/>
            <javadoc line="71">
                An upper Hessenberg matrix from the decompostion.                
                <param>
                    H If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted H matrix.                    
                </return>
            </javadoc>
            <method name="getH" type="DenseMatrix64F" line="76">
                <params>
                    <param name="H" type="DenseMatrix64F"/>
                </params>
                <scope line="77"/>
                <scope line="83">
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="90">
                An orthogonal matrix that has the following property: H = Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <param>
                    Q If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </param>
                <return>
                    The extracted Q matrix.                    
                </return>
            </javadoc>
            <method name="getQ" type="DenseMatrix64F" line="95">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                </params>
                <scope line="96">
                    <scope line="98"/>
                </scope>
                <scope line="104">
                    <scope line="106"/>
                </scope>
            </method>
            <javadoc line="113">
                Internal function for computing the decomposition.                
            </javadoc>
            <method name="_decompose" type="boolean" line="116">
                <declaration name="h" type="double" line="117"/>
                <scope line="118">
                    <declaration name="max" type="double" line="119"/>
                    <scope line="120">
                        <declaration name="val" type="double" line="121"/>
                    </scope>
                    <scope line="125">
                        <declaration name="tau" type="double" line="126"/>
                        <scope line="127">
                            <declaration name="val" type="double" line="128"/>
                        </scope>
                        <declaration name="nu" type="double" line="133"/>
                        <scope line="135"/>
                        <declaration name="gamma" type="double" line="138"/>
                    </scope>
                    <scope line="144"/>
                </scope>
            </method>
            <method name="getGammas" type="double[]" line="150"/>
        </class>
    </source>