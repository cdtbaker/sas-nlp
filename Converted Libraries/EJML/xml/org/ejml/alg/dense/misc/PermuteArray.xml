<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.misc">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <class name="PermuteArray" line="4">
            <javadoc line="4">
                Generates a permutations of an integer set from 0 to N-1.  This can either be generated
                  all at once as a list of one at a time.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="level" type="int" line="10"/>
            <declaration name="data" type="int" line="11"/>
            <declaration name="iter" type="int" line="12"/>
            <declaration name="valk" type="int" line="13"/>
            <declaration name="ret" type="int" line="14"/>
            <method name="PermuteArray" type="constructor" line="15">
                <params>
                    <param name="N" type="int"/>
                </params>
                <scope line="21"/>
            </method>
            <javadoc line="25">
                &lt;p&gt;
                  Returns signature of the permutation.  This is the sgn() operator and returns
                  -1 or 1 depending on it being odd or even.
                  &lt;br&gt;
                  sgn(σ) = ( − 1)&lt;sup&gt;m&lt;/sup&gt;&lt;br&gt;
                  &lt;br&gt;
                  where m is the number of inversions.
                  &lt;/p&gt;
                  &lt;p&gt;
                  NOTE: This implementation is painfully slow O(N!).  There is probably another algorithm out there
                  which is much faster.
                  &lt;/p&gt;                
                <return>
                    -1 or 1 for odd or even permutations.                    
                </return>
            </javadoc>
            <method name="sgn" type="int" line="40">
                <declaration name="total" type="int" line="41"/>
                <scope line="42">
                    <declaration name="val" type="int" line="43"/>
                    <scope line="44">
                        <scope line="45"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="53">
                Computes N factorial                
            </javadoc>
            <method name="fact" type="int" line="56">
                <params>
                    <param name="N" type="int"/>
                </params>
                <declaration name="ret" type="int" line="57"/>
                <scope line="58"/>
            </method>
            <javadoc line="63">
                Creates a list of all permutations for a set with N elements.                
                <param>
                    N Number of elements in the list being permuted.                    
                </param>
                <return>
                    A list containing all the permutations.                    
                </return>
            </javadoc>
            <method name="createList" type="List<int[]>" line="68">
                <params>
                    <param name="N" type="int"/>
                </params>
                <declaration name="data" type="int" line="69"/>
                <scope line="70"/>
                <declaration name="ret" type="List&lt;int[]&gt;" line="73"/>
            </method>
            <javadoc line="77">
                Internal function that uses recursion to create the list                
            </javadoc>
            <method name="createList" type="void" line="80">
                <params>
                    <param name="data" type="int"/>
                    <param name="k" type="int"/>
                    <param name="level" type="int"/>
                    <param name="ret" type="List<int[]>"/>
                </params>
                <scope line="82">
                    <scope line="83">
                        <scope line="84"/>
                    </scope>
                </scope>
                <scope line="89">
                    <declaration name="copy" type="int[]" line="90"/>
                </scope>
            </method>
            <javadoc line="96">
                Creates the next permutation in the sequence.                
                <return>
                    An array containing the permutation.  The returned array is modified each time this function is called.                    
                </return>
            </javadoc>
            <method name="next" type="int[]" line="100">
                <declaration name="hasNewPerm" type="boolean" line="101"/>
                <scope line="102">
                    <scope line="103">
                        <scope line="105">
                            <scope line="108"/>
                            <scope line="115"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>