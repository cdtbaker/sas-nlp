<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.misc">
        <import package="org.ejml.data.RowD1Matrix64F"/>
        <class name="TransposeAlgs" line="24">
            <javadoc line="24">
                Low level transpose algorithms.  No sanity checks are performed.    Take a look at BenchmarkTranspose to
                  see which one is faster on your computer.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="32">
                In-place transpose for a square matrix.  On most architectures it is faster than the standard transpose
                  algorithm, but on most modern computers it&apos;s slower than block transpose.                
                <param>
                    mat The matrix that is transposed in-place.  Modified.                    
                </param>
            </javadoc>
            <method name="square" type="void" line="39">
                <params>
                    <param name="mat" type="RowD1Matrix64F"/>
                </params>
                <declaration name="index" type="int" line="40"/>
                <declaration name="indexEnd" type="int" line="41"/>
                <scope line="43">
                    <declaration name="indexOther" type="int" line="44"/>
                    <scope line="45">
                        <declaration name="val" type="double" line="46"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="53">
                Performs a transpose across block sub-matrices.  Reduces
                  the number of cache misses on larger matrices.
                  NOTE If this is beneficial is highly dependent on the computer it is run on. e.g:
                  - Q6600 Almost twice as fast as standard.
                  - Pentium-M Same speed and some times a bit slower than standard.                
                <param>
                    A Original matrix.  Not modified.                    
                </param>
                <param>
                    A_tran Transposed matrix.  Modified.                    
                </param>
                <param>
                    blockLength Length of a block.                    
                </param>
            </javadoc>
            <method name="block" type="void" line="67">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="A_tran" type="RowD1Matrix64F"/>
                    <param name="blockLength" type="int"/>
                </params>
                <comment line="78">
                    int indexSrc = i*A.numCols + j;
                                    int indexDst = j*A_tran.numCols + i;                    
                </comment>
                <comment line="82">
                    for( int l = 0; l &lt; blockWidth; l++ , indexSrc++ ) {                    
                </comment>
                <comment line="87">
                    for( int k = 0; k &lt; blockHeight; k++ , rowSrc += A.numCols ) {                    
                </comment>
                <comment line="89">
                    faster to write in sequence than to read in sequence                    
                </comment>
                <scope line="68">
                    <declaration name="blockHeight" type="int" line="69"/>
                    <declaration name="indexSrc" type="int" line="71"/>
                    <declaration name="indexDst" type="int" line="72"/>
                    <scope line="74">
                        <declaration name="blockWidth" type="int" line="75"/>
                        <declaration name="indexSrcEnd" type="int" line="80"/>
                        <scope line="82">
                            <declaration name="rowSrc" type="int" line="83"/>
                            <declaration name="rowDst" type="int" line="84"/>
                            <declaration name="end" type="int" line="85"/>
                            <scope line="87"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="97">
                A straight forward transpose.  Good for small non-square matrices.                
                <param>
                    A Original matrix.  Not modified.                    
                </param>
                <param>
                    A_tran Transposed matrix.  Modified.                    
                </param>
            </javadoc>
            <method name="standard" type="void" line="104">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="A_tran" type="RowD1Matrix64F"/>
                </params>
                <declaration name="index" type="int" line="105"/>
                <scope line="106">
                    <declaration name="index2" type="int" line="107"/>
                    <declaration name="end" type="int" line="109"/>
                    <scope line="110"/>
                </scope>
            </method>
        </class>
    </source>