<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.linsol.svd">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.DecompositionFactory"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.factory.SingularValueDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="SolvePseudoInverseSvd" line="8">
            <implements interface="LinearSolver">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="8">
                &lt;p&gt;
                  The pseudo-inverse is typically used to solve over determined system for which there is no unique solution.&lt;br&gt;
                  x=inv(A&lt;sup&gt;T&lt;/sup&gt;A)A&lt;sup&gt;T&lt;/sup&gt;b&lt;br&gt;
                  where A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt; and m &amp;ge; n.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This class implements the Moore-Penrose pseudo-inverse using SVD and should never fail.  Alternative implementations
                  can use Cholesky decomposition, but those will fail if the A&lt;sup&gt;T&lt;/sup&gt;A matrix is singular.
                  However the Cholesky implementation is much faster.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="svd" type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" line="22"/>
            <declaration name="pinv" type="DenseMatrix64F" line="23"/>
            <declaration name="threshold" type="double" line="24"/>
            <javadoc line="25">
                Creates a new solver targeted at the specified matrix size.                
                <param>
                    maxRows The expected largest matrix it might have to process.  Can be larger.                    
                </param>
                <param>
                    maxCols The expected largest matrix it might have to process.  Can be larger.                    
                </param>
            </javadoc>
            <method name="SolvePseudoInverseSvd" type="constructor" line="30">
                <params>
                    <param name="maxRows" type="int"/>
                    <param name="maxCols" type="int"/>
                </params>
            </method>
            <javadoc line="33">
                Creates a solver targeted at matrices around 100x100                
            </javadoc>
            <method name="SolvePseudoInverseSvd" type="constructor" line="36"/>
            <method name="setA" type="boolean" line="39">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="U_t" type="DenseMatrix64F" line="42"/>
                <declaration name="V" type="DenseMatrix64F" line="43"/>
                <declaration name="S" type="double[]" line="44"/>
                <declaration name="N" type="int" line="45"/>
                <declaration name="maxSingular" type="double" line="46"/>
                <scope line="47"/>
                <declaration name="tau" type="double" line="50"/>
                <scope line="51">
                    <declaration name="s" type="double" line="52"/>
                </scope>
                <scope line="56">
                    <declaration name="index" type="int" line="57"/>
                    <scope line="58"/>
                </scope>
            </method>
            <method name="quality" type="double" line="65"/>
            <method name="solve" type="void" line="68">
                <params>
                    <param name="b" type="DenseMatrix64F"/>
                    <param name="x" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="invert" type="void" line="71">
                <params>
                    <param name="A_inv" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="modifiesA" type="boolean" line="74"/>
            <method name="modifiesB" type="boolean" line="77"/>
            <javadoc line="80">
                Specify the relative threshold used to select singular values.  By default it&apos;s UtilEjml.EPS.                
                <param>
                    threshold The singular value threshold                    
                </param>
            </javadoc>
            <method name="setThreshold" type="void" line="84">
                <params>
                    <param name="threshold" type="double"/>
                </params>
            </method>
        </class>
    </source>