<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.linsol.qr">
        <import package="org.ejml.alg.dense.decomposition.TriangularSolver"/>
        <import package="org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderTran"/>
        <import package="org.ejml.alg.dense.linsol.LinearSolverAbstract"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <class name="LinearSolverQrHouseTran" line="28">
            <extends class="LinearSolverAbstract"/>
            <comment line="56">
                a column major QR matrix                
            </comment>
            <javadoc line="28">
                &lt;p&gt;
                  QR decomposition can be used to solve for systems.  However, this is not as computationally efficient
                  as LU decomposition and costs about 3n&lt;sup&gt;2&lt;/sup&gt; flops.
                  &lt;/p&gt;
                  &lt;p&gt;
                  It solve for x by first multiplying b by the transpose of Q then solving for the result.
                  &lt;br&gt;
                  QRx=b&lt;br&gt;
                  Rx=Q^T b&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  A column major decomposition is used in this solver.
                  &lt;p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="decomposer" type="QRDecompositionHouseholderTran" line="48"/>
            <declaration name="a" type="double[]" line="50"/>
            <declaration name="maxRows" type="int" line="52"/>
            <declaration name="maxCols" type="int" line="53"/>
            <declaration name="QR" type="DenseMatrix64F" line="55"/>
            <declaration name="U" type="DenseMatrix64F" line="56"/>
            <javadoc line="58">
                Creates a linear solver that uses QR decomposition.                
            </javadoc>
            <method name="LinearSolverQrHouseTran" type="constructor" line="61"/>
            <method name="setMaxSize" type="void" line="66">
                <params>
                    <param name="maxRows" type="int"/>
                    <param name="maxCols" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Performs QR decomposition on A                
                <param>
                    A not modified.                    
                </param>
            </javadoc>
            <method name="setA" type="boolean" line="78">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="quality" type="double" line="91">
                <comment line="92">
                    even those it is transposed the diagonal elements are at the same                    
                </comment>
                <comment line="93">
                    elements                    
                </comment>
            </method>
            <javadoc line="97">
                Solves for X using the QR decomposition.                
                <param>
                    B A matrix that is n by m.  Not modified.                    
                </param>
                <param>
                    X An n by m matrix where the solution is written to.  Modified.                    
                </param>
            </javadoc>
            <method name="solve" type="void" line="104">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="X" type="DenseMatrix64F"/>
                </params>
                <comment line="116">
                    solve each column one by one                    
                </comment>
                <comment line="119">
                    make a copy of this column in the vector                    
                </comment>
                <comment line="124">
                    Solve Qa=b                    
                </comment>
                <comment line="125">
                    a = Q&apos;b                    
                </comment>
                <comment line="126">
                    a = Q_{n-1}...Q_2*Q_1*b                    
                </comment>
                <comment line="127">
                                        
                </comment>
                <comment line="128">
                    Q_n*b = (I-gamma*u*u^T)*b = b - u*(gamma*U^T*b)                    
                </comment>
                <comment line="133">
                    U^T*b                    
                </comment>
                <comment line="138">
                    gamma*U^T*b                    
                </comment>
                <comment line="148">
                    solve for Rx = b using the standard upper triangular solver                    
                </comment>
                <comment line="151">
                    save the results                    
                </comment>
                <declaration name="gammas" type="double" line="111"/>
                <declaration name="dataQR" type="double" line="112"/>
                <declaration name="BnumCols" type="int" line="114"/>
                <scope line="117">
                    <scope line="120"/>
                    <scope line="129">
                        <declaration name="indexU" type="int" line="130"/>
                        <declaration name="ub" type="double" line="132"/>
                        <scope line="134"/>
                        <scope line="143"/>
                    </scope>
                    <scope line="152"/>
                </scope>
            </method>
            <method name="modifiesA" type="boolean" line="159"/>
            <method name="modifiesB" type="boolean" line="164"/>
        </class>
    </source>