<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.linsol.chol">
        <import package="org.ejml.alg.block.BlockMatrixOps"/>
        <import package="org.ejml.alg.block.linsol.chol.BlockCholeskyOuterSolver"/>
        <import package="org.ejml.alg.dense.linsol.WrapLinearSolverBlock64"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <class name="LinearSolverCholBlock64" line="6">
            <extends class="WrapLinearSolverBlock64"/>
            <javadoc line="6">
                A wrapper around {@link org.ejml.factory.CholeskyDecomposition}(BlockMatrix64F) that allows
                  it to be easily used with {@link org.ejml.data.DenseMatrix64F}.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <method name="LinearSolverCholBlock64" type="constructor" line="12"/>
            <javadoc line="15">
                Only converts the B matrix and passes that onto solve.  Te result is then copied into
                  the input &apos;X&apos; matrix.                
                <param>
                    B A matrix &real; <sup>m &times; p</sup>.  Not modified.                    
                </param>
                <param>
                    X A matrix &real; <sup>n &times; p</sup>, where the solution is written to.  Modified.                    
                </param>
            </javadoc>
            <method name="solve" type="void" line="21">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="X" type="DenseMatrix64F"/>
                </params>
            </method>
        </class>
    </source>