<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.linsol.qr">
        <import package="org.ejml.alg.dense.decomposition.TriangularSolver"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.QRPDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="SolvePseudoInverseQrp" line="26">
            <extends class="BaseLinearSolverQrp"/>
            <comment line="37">
                stores the orthogonal Q matrix from QR decomposition                
            </comment>
            <comment line="40">
                storage for basic solution                
            </comment>
            <javadoc line="26">
                &lt;p&gt;
                  A pseudo inverse solver for a generic QR column pivot decomposition algorithm.  See{@link BaseLinearSolverQrp} for technical details on the algorithm.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="Q" type="DenseMatrix64F" line="37"/>
            <declaration name="x_basic" type="DenseMatrix64F" line="40"/>
            <javadoc line="42">
                Configure and provide decomposition                
                <param>
                    decomposition Decomposition used.                    
                </param>
                <param>
                    norm2Solution If true the basic solution will be returned, false the minimal 2-norm solution.                    
                </param>
            </javadoc>
            <method name="SolvePseudoInverseQrp" type="constructor" line="49">
                <params>
                    <param name="decomposition" type="QRPDecomposition<DenseMatrix64F>"/>
                    <param name="norm2Solution" type="boolean"/>
                </params>
            </method>
            <method name="setA" type="boolean" line="54">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="solve" type="void" line="66">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="X" type="DenseMatrix64F"/>
                </params>
                <comment line="75">
                    get the pivots and transpose them                    
                </comment>
                <comment line="78">
                    solve each column one by one                    
                </comment>
                <comment line="83">
                    make a copy of this column in the vector                    
                </comment>
                <comment line="88">
                    Solve Q*a=b =&gt; a = Q&apos;*b                    
                </comment>
                <comment line="91">
                    solve for Rx = b using the standard upper triangular solver                    
                </comment>
                <comment line="94">
                    finish the basic solution by filling in zeros                    
                </comment>
                <comment line="102">
                    save the results                    
                </comment>
                <declaration name="BnumCols" type="int" line="72"/>
                <declaration name="pivots" type="int" line="75"/>
                <scope line="78">
                    <scope line="83"/>
                    <scope line="102"/>
                </scope>
            </method>
            <method name="modifiesA" type="boolean" line="109"/>
            <method name="modifiesB" type="boolean" line="114"/>
        </class>
    </source>