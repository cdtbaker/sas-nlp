<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.linsol.qr">
        <import package="org.ejml.alg.dense.decomposition.TriangularSolver"/>
        <import package="org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholder"/>
        <import package="org.ejml.alg.dense.linsol.LinearSolverAbstract"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <class name="LinearSolverQrHouse" line="28">
            <extends class="LinearSolverAbstract"/>
            <javadoc line="28">
                &lt;p&gt;
                  QR decomposition can be used to solve for systems.  However, this is not as computationally efficient
                  as LU decomposition and costs about 3n&lt;sup&gt;2&lt;/sup&gt; flops.
                  &lt;/p&gt;
                  &lt;p&gt;
                  It solve for x by first multiplying b by the transpose of Q then solving for the result.
                  &lt;br&gt;
                  QRx=b&lt;br&gt;
                  Rx=Q^T b&lt;br&gt;
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="decomposer" type="QRDecompositionHouseholder" line="44"/>
            <declaration name="a" type="double[]" line="46"/>
            <declaration name="maxRows" type="int" line="48"/>
            <declaration name="QR" type="DenseMatrix64F" line="50"/>
            <declaration name="gammas" type="double" line="51"/>
            <javadoc line="53">
                Creates a linear solver that uses QR decomposition.                
            </javadoc>
            <method name="LinearSolverQrHouse" type="constructor" line="56"/>
            <method name="setMaxSize" type="void" line="62">
                <params>
                    <param name="maxRows" type="int"/>
                </params>
            </method>
            <javadoc line="69">
                Performs QR decomposition on A                
                <param>
                    A not modified.                    
                </param>
            </javadoc>
            <method name="setA" type="boolean" line="75">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="76"/>
            </method>
            <method name="quality" type="double" line="91"/>
            <javadoc line="95">
                Solves for X using the QR decomposition.                
                <param>
                    B A matrix that is n by m.  Not modified.                    
                </param>
                <param>
                    X An n by m matrix where the solution is writen to.  Modified.                    
                </param>
            </javadoc>
            <method name="solve" type="void" line="102">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="X" type="DenseMatrix64F"/>
                </params>
                <comment line="110">
                    solve each column one by one                    
                </comment>
                <comment line="113">
                    make a copy of this column in the vector                    
                </comment>
                <comment line="118">
                    Solve Qa=b                    
                </comment>
                <comment line="119">
                    a = Q&apos;b                    
                </comment>
                <comment line="120">
                    a = Q_{n-1}...Q_2*Q_1*b                    
                </comment>
                <comment line="121">
                                        
                </comment>
                <comment line="122">
                    Q_n*b = (I-gamma*u*u^T)*b = b - u*(gamma*U^T*b)                    
                </comment>
                <comment line="126">
                    U^T*b                    
                </comment>
                <comment line="131">
                    gamma*U^T*b                    
                </comment>
                <comment line="139">
                    solve for Rx = b using the standard upper triangular solver                    
                </comment>
                <comment line="142">
                    save the results                    
                </comment>
                <declaration name="BnumCols" type="int" line="108"/>
                <scope line="111">
                    <scope line="114"/>
                    <scope line="123">
                        <declaration name="ub" type="double" line="125"/>
                        <scope line="127"/>
                        <scope line="134"/>
                    </scope>
                    <scope line="143"/>
                </scope>
            </method>
            <method name="modifiesA" type="boolean" line="150"/>
            <method name="modifiesB" type="boolean" line="155"/>
        </class>
    </source>