<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.linsol">
        <import package="org.ejml.alg.block.BlockMatrixOps"/>
        <import package="org.ejml.alg.block.linsol.chol.BlockCholeskyOuterSolver"/>
        <import package="org.ejml.data.BlockMatrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.interfaces.linsol.LinearSolver"/>
        <class name="LinearSolver_B64_to_D64" line="28">
            <comment line="39">
                block matrix copy of the system A matrix.                
            </comment>
            <comment line="41">
                block matrix copy of B matrix passed into solve                
            </comment>
            <comment line="43">
                block matrix copy of X matrix passed into solve                
            </comment>
            <implements interface="LinearSolver">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="28">
                Wrapper that allows {@link org.ejml.interfaces.linsol.LinearSolver &lt;BlockMatrix64F&gt;} to implements {@link org.ejml.interfaces.linsol.LinearSolver}.  It works
                  by converting {@link DenseMatrix64F} into {@link BlockMatrix64F} and calling the equivalent
                  functions.  Since a local copy is made all input matrices are never modified.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="alg" type="LinearSolver&amp;lt;BlockMatrix64F&amp;gt;" line="36"/>
            <declaration name="blockA" type="BlockMatrix64F" line="39"/>
            <declaration name="blockB" type="BlockMatrix64F" line="41"/>
            <declaration name="blockX" type="BlockMatrix64F" line="43"/>
            <method name="LinearSolver_B64_to_D64" type="constructor" line="45">
                <params>
                    <param name="alg" type="LinearSolver&lt;BlockMatrix64F&gt;"/>
                </params>
            </method>
            <javadoc line="49">
                Converts &apos;A&apos; into a block matrix and call setA() on the block matrix solver.                
                <param>
                    A The A matrix in the linear equation. Not modified. Reference saved.                    
                </param>
                <return>
                    true if it can solve the system.                    
                </return>
            </javadoc>
            <method name="setA" type="boolean" line="56">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="quality" type="double" line="64"/>
            <javadoc line="68">
                Converts B and X into block matrices and calls the block matrix solve routine.                
                <param>
                    B A matrix &amp;real; &lt;sup&gt;m &amp;times; p&lt;/sup&gt;.  Not modified.                    
                </param>
                <param>
                    X A matrix &amp;real; &lt;sup&gt;n &amp;times; p&lt;/sup&gt;, where the solution is written to.  Modified.                    
                </param>
            </javadoc>
            <method name="solve" type="void" line="75">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="X" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="85">
                Creates a block matrix the same size as A_inv, inverts the matrix and copies the results back
                  onto A_inv.                
                <param>
                    A_inv Where the inverted matrix saved. Modified.                    
                </param>
            </javadoc>
            <method name="invert" type="void" line="92">
                <params>
                    <param name="A_inv" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="modifiesA" type="boolean" line="101"/>
            <method name="modifiesB" type="boolean" line="106"/>
        </class>
    </source>