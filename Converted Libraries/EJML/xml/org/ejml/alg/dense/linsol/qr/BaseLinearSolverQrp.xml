<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.linsol.qr">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.alg.dense.decomposition.TriangularSolver"/>
        <import package="org.ejml.alg.dense.linsol.LinearSolverAbstract"/>
        <import package="org.ejml.alg.dense.linsol.LinearSolverSafe"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.factory.LinearSolverFactory"/>
        <import package="org.ejml.factory.QRPDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <class name="BaseLinearSolverQrp" line="12">
            <extends class="LinearSolverAbstract"/>
            <javadoc line="12">
                &lt;p&gt;
                  Base class for QR pivot based pseudo inverse classes.  It will return either the
                  basic of minimal 2-norm solution. See [1] for details.  The minimal 2-norm solution refers to the solution
                  &apos;x&apos; whose 2-norm is the smallest making it unique, not some other error function.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;pre&gt;
                  R = [ R12  R12 ] r      P^Tx = [ y ] r       Q^Tb = [ c ] r
                  [  0    0  ] m-r            [ z ] n -r            [ d ] m-r
                  r   n-r
                  where r is the rank of the matrix and (m,n) is the dimension of the linear system.
                  &lt;/pre&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;pre&gt;
                  The solution &apos;x&apos; is found by solving the system below.  The basic solution is found by setting z=0
                  [ R_11^-1(c - R12z) ]
                  x = [          z          ]
                  &lt;/pre&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  NOTE: The matrix rank is determined using the provided QR decomposition. [1] mentions that this will not always
                  work and could cause some problems.
                  &lt;/p&gt;
                  &lt;p&gt;
                  [1] See page 258-259 in Gene H. Golub and Charles F. Van Loan &quot;Matrix Computations&quot; 3rd Ed, 1996
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="decomposition" type="QRPDecomposition&lt;DenseMatrix64F&gt;" line="43"/>
            <declaration name="norm2Solution" type="boolean" line="44"/>
            <declaration name="Y" type="DenseMatrix64F" line="45"/>
            <declaration name="R" type="DenseMatrix64F" line="46"/>
            <declaration name="R11" type="DenseMatrix64F" line="47"/>
            <declaration name="I" type="DenseMatrix64F" line="48"/>
            <declaration name="rank" type="int" line="49"/>
            <declaration name="internalSolver" type="LinearSolver&lt;DenseMatrix64F&gt;" line="50"/>
            <declaration name="W" type="DenseMatrix64F" line="51"/>
            <javadoc line="52">
                Configures internal parameters.                
                <param>
                    decomposition Used to solve the linear system.                    
                </param>
                <param>
                    norm2Solution If true then the optimal 2-norm solution will be computed for degenerate systems.                    
                </param>
            </javadoc>
            <method name="BaseLinearSolverQrp" type="constructor" line="57">
                <params>
                    <param name="decomposition" type="QRPDecomposition<DenseMatrix64F>"/>
                    <param name="norm2Solution" type="boolean"/>
                </params>
            </method>
            <method name="setA" type="boolean" line="62">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="71">
                    <scope line="76">
                        <scope line="77"/>
                    </scope>
                </scope>
            </method>
            <method name="quality" type="double" line="85"/>
            <javadoc line="88">
                &lt;p&gt;
                  Upgrades the basic solution to the optimal 2-norm solution.
                  &lt;/p&gt;
                  &lt;pre&gt;
                  First solves for &apos;z&apos;
                  || x_b - P[ R_11^-1  R_12 ]  z ||2
                  min z ||         [ - I_{n-r}      ]     ||
                  &lt;/pre&gt;                
                <param>
                    X basic solution, also output solution                    
                </param>
            </javadoc>
            <method name="upgradeSolution" type="void" line="99">
                <params>
                    <param name="X" type="DenseMatrix64F"/>
                </params>
                <declaration name="z" type="DenseMatrix64F" line="100"/>
            </method>
            <method name="invert" type="void" line="106">
                <params>
                    <param name="A_inv" type="DenseMatrix64F"/>
                </params>
            </method>
        </class>
    </source>