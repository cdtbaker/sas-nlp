<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.linsol.lu">
        <import package="org.ejml.alg.dense.decomposition.lu.LUDecompositionBase"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <class name="LinearSolverLu" line="25">
            <extends class="LinearSolverLuBase"/>
            <javadoc line="25">
                For each column in the B matrix it makes a copy, which is then solved for and
                  writen into X.  By making a copy of the column cpu cache issues are reduced.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="doImprove" type="boolean" line="33"/>
            <method name="LinearSolverLu" type="constructor" line="35">
                <params>
                    <param name="decomp" type="LUDecompositionBase"/>
                </params>
            </method>
            <method name="LinearSolverLu" type="constructor" line="39">
                <params>
                    <param name="decomp" type="LUDecompositionBase"/>
                    <param name="doImprove" type="boolean"/>
                </params>
            </method>
            <method name="solve" type="void" line="46">
                <params>
                    <param name="b" type="DenseMatrix64F"/>
                    <param name="x" type="DenseMatrix64F"/>
                </params>
                <comment line="58">
                    for( int j = 0; j &lt; numCols; j++ ) {                    
                </comment>
                <comment line="59">
                    for( int i = 0; i &lt; this.numCols; i++ ) vv[i] = dataB[i*numCols+j];                    
                </comment>
                <comment line="60">
                    decomp._solveVectorInternal(vv);                    
                </comment>
                <comment line="61">
                    for( int i = 0; i &lt; this.numCols; i++ ) dataX[i*numCols+j] = vv[i];                    
                </comment>
                <comment line="62">
                    }                    
                </comment>
                <scope line="47"/>
                <declaration name="numCols" type="int" line="51"/>
                <declaration name="dataB" type="double" line="53"/>
                <declaration name="dataX" type="double" line="54"/>
                <declaration name="vv" type="double[]" line="56"/>
                <scope line="63">
                    <declaration name="index" type="int" line="64"/>
                </scope>
                <scope line="71"/>
            </method>
        </class>
    </source>