<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.linsol.lu">
        <import package="org.ejml.alg.dense.decomposition.lu.LUDecompositionBase"/>
        <import package="org.ejml.alg.dense.linsol.LinearSolverAbstract"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <class name="LinearSolverLuBase" line="26">
            <extends class="LinearSolverAbstract"/>
            <javadoc line="26">
                @author Peter Abeles                
            </javadoc>
            <declaration name="decomp" type="LUDecompositionBase" line="31"/>
            <method name="LinearSolverLuBase" type="constructor" line="33">
                <params>
                    <param name="decomp" type="LUDecompositionBase"/>
                </params>
            </method>
            <method name="setA" type="boolean" line="39">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="quality" type="double" line="46"/>
            <method name="invert" type="void" line="51">
                <params>
                    <param name="A_inv" type="DenseMatrix64F"/>
                </params>
                <comment line="64">
                    don&apos;t need to change inv into an identity matrix before hand                    
                </comment>
                <comment line="67">
                    for( int i = 0; i &lt; n; i++ ) dataInv[i* n +j] = vv[i];                    
                </comment>
                <declaration name="vv" type="double[]" line="52"/>
                <declaration name="LU" type="DenseMatrix64F" line="53"/>
                <declaration name="n" type="int" line="58"/>
                <declaration name="dataInv" type="double" line="60"/>
                <scope line="62">
                    <declaration name="index" type="int" line="67"/>
                </scope>
            </method>
            <javadoc line="72">
                This attempts to improve upon the solution generated by account
                  for numerical imprecisions.  See numerical recipes for more information.  It
                  is assumed that solve has already been run on &apos;b&apos; and &apos;x&apos; at least once.                
                <param>
                    b A matrix. Not modified.                    
                </param>
                <param>
                    x A matrix. Modified.                    
                </param>
            </javadoc>
            <method name="improveSol" type="void" line="81">
                <params>
                    <param name="b" type="DenseMatrix64F"/>
                    <param name="x" type="DenseMatrix64F"/>
                </params>
                <comment line="97">
                    BigDecimal sdp = new BigDecimal(0);                    
                </comment>
                <comment line="100">
                    *NOTE* in the book this is a long double.  extra precision might be required                    
                </comment>
                <comment line="102">
                    BigDecimal sdp = new BigDecimal(-dataB[ i * nc + k]);                    
                </comment>
                <comment line="105">
                    sdp = sdp.add( BigDecimal.valueOf(dataA[i* n +j] * dataX[ j * nc + k]));                    
                </comment>
                <comment line="108">
                    vv[i] = sdp.doubleValue();                    
                </comment>
                <scope line="82"/>
                <declaration name="dataA" type="double" line="86"/>
                <declaration name="dataB" type="double" line="87"/>
                <declaration name="dataX" type="double" line="88"/>
                <declaration name="nc" type="int" line="90"/>
                <declaration name="n" type="int" line="91"/>
                <declaration name="vv" type="double[]" line="93"/>
                <declaration name="LU" type="DenseMatrix64F" line="94"/>
                <scope line="97">
                    <scope line="98">
                        <declaration name="sdp" type="double" line="100"/>
                        <scope line="102"/>
                    </scope>
                    <scope line="110"/>
                </scope>
            </method>
            <method name="modifiesA" type="boolean" line="117"/>
            <method name="modifiesB" type="boolean" line="122"/>
        </class>
    </source>