<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.linsol.chol">
        <import package="org.ejml.alg.dense.decomposition.TriangularSolver"/>
        <import package="org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionCommon_D64"/>
        <import package="org.ejml.alg.dense.linsol.LinearSolverAbstract"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <class name="LinearSolverChol" line="28">
            <extends class="LinearSolverAbstract"/>
            <javadoc line="28">
                @author Peter Abeles                
            </javadoc>
            <declaration name="decomp" type="CholeskyDecompositionCommon_D64" line="33"/>
            <declaration name="n" type="int" line="34"/>
            <declaration name="vv" type="double" line="35"/>
            <declaration name="t" type="double" line="36"/>
            <method name="LinearSolverChol" type="constructor" line="38">
                <params>
                    <param name="decomp" type="CholeskyDecompositionCommon_D64"/>
                </params>
            </method>
            <method name="setA" type="boolean" line="43">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <scope line="49"/>
                <scope line="54"/>
            </method>
            <method name="quality" type="double" line="60"/>
            <javadoc line="64">
                &lt;p&gt;
                  Using the decomposition, finds the value of &apos;X&apos; in the linear equation below:&lt;br&gt;
                  Ax = b&lt;br&gt;
                  where A has dimension of n by n, x and b are n by m dimension.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Note that &apos;b&apos; and &apos;x&apos; can be the same matrix instance.
                  &lt;/p&gt;                
                <param>
                    B A matrix that is n by m.  Not modified.                    
                </param>
                <param>
                    X An n by m matrix where the solution is writen to.  Modified.                    
                </param>
            </javadoc>
            <method name="solve" type="void" line="80">
                <params>
                    <param name="B" type="DenseMatrix64F"/>
                    <param name="X" type="DenseMatrix64F"/>
                </params>
                <scope line="81"/>
                <declaration name="numCols" type="int" line="85"/>
                <declaration name="dataB" type="double" line="87"/>
                <declaration name="dataX" type="double" line="88"/>
                <scope line="90">
                    <scope line="91"/>
                </scope>
                <scope line="96"/>
            </method>
            <javadoc line="101">
                Used internally to find the solution to a single column vector.                
            </javadoc>
            <method name="solveInternalL" type="void" line="104">
                <comment line="106">
                    solve L*y=b storing y in x                    
                </comment>
                <comment line="109">
                    solve L^T*x=y                    
                </comment>
            </method>
            <javadoc line="112">
                Sets the matrix &apos;inv&apos; equal to the inverse of the matrix that was decomposed.                
                <param>
                    inv Where the value of the inverse will be stored.  Modified.                    
                </param>
            </javadoc>
            <method name="invert" type="void" line="118">
                <params>
                    <param name="inv" type="DenseMatrix64F"/>
                </params>
                <scope line="119"/>
                <scope line="122"/>
                <declaration name="a" type="double" line="126"/>
                <scope line="128"/>
                <scope line="130"/>
            </method>
            <javadoc line="135">
                Sets the matrix to the inverse using a lower triangular matrix.                
            </javadoc>
            <method name="setToInverseL" type="void" line="138">
                <params>
                    <param name="a" type="double"/>
                </params>
                <comment line="140">
                    TODO reorder these operations to avoid cache misses                    
                </comment>
                <comment line="142">
                    inverts the lower triangular system and saves the result
                     in the upper triangle to minimize cache misses                    
                </comment>
                <comment line="154">
                    solve the system and handle the previous solution being in the upper triangle
                     takes advantage of symmetry                    
                </comment>
                <scope line="143">
                    <declaration name="el_ii" type="double" line="144"/>
                    <scope line="145">
                        <declaration name="sum" type="double" line="146"/>
                        <scope line="147"/>
                    </scope>
                </scope>
                <scope line="155">
                    <declaration name="el_ii" type="double" line="156"/>
                    <scope line="158">
                        <declaration name="sum" type="double" line="159"/>
                        <scope line="160"/>
                    </scope>
                </scope>
            </method>
            <method name="modifiesA" type="boolean" line="169"/>
            <method name="modifiesB" type="boolean" line="174"/>
        </class>
    </source>