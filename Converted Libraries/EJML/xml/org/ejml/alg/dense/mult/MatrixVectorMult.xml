<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.mult">
        <import package="org.ejml.data.D1Matrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.RowD1Matrix64F"/>
        <class name="MatrixVectorMult" line="5">
            <javadoc line="5">
                &lt;p&gt;
                  This class contains various types of matrix vector multiplcation operations for {@link DenseMatrix64F}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If a matrix has only one column or row then it is a vector.  There are faster algorithms
                  that can be used to multiply matrices by vectors.  Strangely, even though the operations
                  count smaller, the difference between this and a regular matrix multiply is insignificant
                  for large matrices.  The smaller matrices there is about a 40% speed improvement.  In
                  practice the speed improvement for smaller matrices is not noticeable unless 10s of millions
                  of matrix multiplications are being performed.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="20">
                &lt;p&gt;
                  Performs a matrix vector multiply.&lt;br&gt;
                  &lt;br&gt;
                  c = A  b &lt;br&gt;
                  and&lt;br&gt;
                  c = A  b&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;i&lt;/sub&gt; = Sum{ j=1:n, a&lt;sub&gt;ij&lt;/sub&gt;  b&lt;sub&gt;j&lt;/sub&gt;}&lt;br&gt;
                  &lt;br&gt;
                  where A is a matrix, b is a column or transposed row vector, and c is a column vector.
                  &lt;/p&gt;                
                <param>
                    a A matrix that is m by n. Not modified.                    
                </param>
                <param>
                    b A vector that has length n. Not modified.                    
                </param>
                <param>
                    c A column vector that has length m. Modified.                    
                </param>
            </javadoc>
            <method name="mult" type="void" line="36">
                <params>
                    <param name="a" type="RowD1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="c" type="D1Matrix64F"/>
                </params>
                <scope line="37"/>
                <scope line="40"/>
                <scope line="43">
                    <scope line="44"/>
                </scope>
                <scope line="48">
                    <scope line="49"/>
                </scope>
                <scope line="53"/>
                <declaration name="indexA" type="int" line="56"/>
                <declaration name="cIndex" type="int" line="57"/>
                <declaration name="b0" type="double" line="58"/>
                <scope line="59">
                    <declaration name="total" type="double" line="60"/>
                    <scope line="61"/>
                </scope>
            </method>
            <javadoc line="67">
                &lt;p&gt;
                  Performs a matrix vector multiply.&lt;br&gt;
                  &lt;br&gt;
                  C = C + A  B &lt;br&gt;
                  or&lt;br&gt;
                  C = C + A  B&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;i&lt;/sub&gt; = Sum{ j=1:n, c&lt;sub&gt;i&lt;/sub&gt; + a&lt;sub&gt;ij&lt;/sub&gt;  b&lt;sub&gt;j&lt;/sub&gt;}&lt;br&gt;
                  &lt;br&gt;
                  where A is a matrix, B is a column or transposed row vector, and C is a column vector.
                  &lt;/p&gt;                
                <param>
                    A A matrix that is m by n. Not modified.                    
                </param>
                <param>
                    B A vector that has length n. Not modified.                    
                </param>
                <param>
                    C A column vector that has length m. Modified.                    
                </param>
            </javadoc>
            <method name="multAdd" type="void" line="83">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="B" type="D1Matrix64F"/>
                    <param name="C" type="D1Matrix64F"/>
                </params>
                <scope line="84"/>
                <scope line="87"/>
                <scope line="90">
                    <scope line="91"/>
                </scope>
                <scope line="95">
                    <scope line="96"/>
                </scope>
                <scope line="100"/>
                <declaration name="indexA" type="int" line="103"/>
                <declaration name="cIndex" type="int" line="104"/>
                <scope line="105">
                    <declaration name="total" type="double" line="106"/>
                    <scope line="107"/>
                </scope>
            </method>
            <javadoc line="113">
                &lt;p&gt;
                  Performs a matrix vector multiply.&lt;br&gt;
                  &lt;br&gt;
                  C = A&lt;sup&gt;T&lt;/sup&gt;  B &lt;br&gt;
                  where B is a column vector.&lt;br&gt;
                  or&lt;br&gt;
                  C = A&lt;sup&gt;T&lt;/sup&gt;  B&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                  where B is a row vector. &lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;i&lt;/sub&gt; = Sum{ j=1:n, a&lt;sub&gt;ji&lt;/sub&gt;  b&lt;sub&gt;j&lt;/sub&gt;}&lt;br&gt;
                  &lt;br&gt;
                  where A is a matrix, B is a column or transposed row vector, and C is a column vector.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is optimal for small matrices.  There is a huge performance hit when
                  used on large matrices due to CPU cache issues.
                  &lt;/p&gt;                
                <param>
                    A A matrix that is m by n. Not modified.                    
                </param>
                <param>
                    B A that has length m and is a column. Not modified.                    
                </param>
                <param>
                    C A column vector that has length n. Modified.                    
                </param>
            </javadoc>
            <method name="multTransA_small" type="void" line="135">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="B" type="D1Matrix64F"/>
                    <param name="C" type="D1Matrix64F"/>
                </params>
                <scope line="136"/>
                <scope line="139"/>
                <scope line="142">
                    <scope line="143"/>
                </scope>
                <scope line="147">
                    <scope line="148"/>
                </scope>
                <scope line="152"/>
                <declaration name="cIndex" type="int" line="155"/>
                <scope line="156">
                    <declaration name="total" type="double" line="157"/>
                    <declaration name="indexA" type="int" line="158"/>
                    <scope line="159"/>
                </scope>
            </method>
            <javadoc line="166">
                An alternative implementation of {@link #multTransA_small} that performs well on large
                  matrices.  There is a relative performance hit when used on small matrices.                
                <param>
                    A A matrix that is m by n. Not modified.                    
                </param>
                <param>
                    B A Vector that has length m. Not modified.                    
                </param>
                <param>
                    C A column vector that has length n. Modified.                    
                </param>
            </javadoc>
            <method name="multTransA_reorder" type="void" line="173">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="B" type="D1Matrix64F"/>
                    <param name="C" type="D1Matrix64F"/>
                </params>
                <scope line="174"/>
                <scope line="177"/>
                <scope line="180">
                    <scope line="181"/>
                </scope>
                <scope line="185">
                    <scope line="186"/>
                </scope>
                <scope line="190"/>
                <declaration name="B_val" type="double" line="193"/>
                <scope line="194"/>
                <declaration name="indexA" type="int" line="197"/>
                <scope line="198">
                    <scope line="200"/>
                </scope>
            </method>
            <javadoc line="205">
                &lt;p&gt;
                  Performs a matrix vector multiply.&lt;br&gt;
                  &lt;br&gt;
                  C = C + A&lt;sup&gt;T&lt;/sup&gt;  B &lt;br&gt;
                  or&lt;br&gt;
                  C = C&lt;sup&gt;T&lt;/sup&gt; + A&lt;sup&gt;T&lt;/sup&gt;  B&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                  &lt;br&gt;
                  c&lt;sub&gt;i&lt;/sub&gt; = Sum{ j=1:n, c&lt;sub&gt;i&lt;/sub&gt; + a&lt;sub&gt;ji&lt;/sub&gt;  b&lt;sub&gt;j&lt;/sub&gt;}&lt;br&gt;
                  &lt;br&gt;
                  where A is a matrix, B is a column or transposed row vector, and C is a column vector.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is optimal for small matrices.  There is a huge performance hit when
                  used on large matrices due to CPU cache issues.
                  &lt;/p&gt;                
                <param>
                    A A matrix that is m by n. Not modified.                    
                </param>
                <param>
                    B A vector that has length m. Not modified.                    
                </param>
                <param>
                    C A column vector that has length n. Modified.                    
                </param>
            </javadoc>
            <method name="multAddTransA_small" type="void" line="225">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="B" type="D1Matrix64F"/>
                    <param name="C" type="D1Matrix64F"/>
                </params>
                <scope line="226"/>
                <scope line="229"/>
                <scope line="232">
                    <scope line="233"/>
                </scope>
                <scope line="237">
                    <scope line="238"/>
                </scope>
                <scope line="242"/>
                <declaration name="cIndex" type="int" line="245"/>
                <scope line="246">
                    <declaration name="total" type="double" line="247"/>
                    <declaration name="indexA" type="int" line="248"/>
                    <scope line="249"/>
                </scope>
            </method>
            <javadoc line="256">
                An alternative implementation of {@link #multAddTransA_small} that performs well on large
                  matrices.  There is a relative performance hit when used on small matrices.                
                <param>
                    A A matrix that is m by n. Not modified.                    
                </param>
                <param>
                    B A vector that has length m. Not modified.                    
                </param>
                <param>
                    C A column vector that has length n. Modified.                    
                </param>
            </javadoc>
            <method name="multAddTransA_reorder" type="void" line="263">
                <params>
                    <param name="A" type="RowD1Matrix64F"/>
                    <param name="B" type="D1Matrix64F"/>
                    <param name="C" type="D1Matrix64F"/>
                </params>
                <scope line="264"/>
                <scope line="267"/>
                <scope line="270">
                    <scope line="271"/>
                </scope>
                <scope line="275">
                    <scope line="276"/>
                </scope>
                <scope line="280"/>
                <declaration name="indexA" type="int" line="283"/>
                <scope line="284">
                    <declaration name="B_val" type="double" line="285"/>
                    <scope line="286"/>
                </scope>
            </method>
        </class>
    </source>