<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.mult">
        <import package="org.ejml.data.D1Matrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.RowD1Matrix64F"/>
        <class name="VectorVectorMult" line="5">
            <javadoc line="5">
                Operations that involve multiplication of two vectors.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="10">
                @param x                
                <param>
                    y                    
                </param>
                <param>
                    A                    
                </param>
            </javadoc>
            <method name="mult" type="void" line="15">
                <params>
                    <param name="x" type="DenseMatrix64F"/>
                    <param name="y" type="DenseMatrix64F"/>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="17">
                &lt;p&gt;
                  Computes the inner product of the two vectors.  In geometry this is known as the dot product.&lt;br&gt;
                  &lt;br&gt;
                  &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; x&lt;sub&gt;k&lt;/sub&gt;  y&lt;sub&gt;k&lt;/sub&gt;&lt;br&gt;
                  where x and y are vectors with n elements.
                  &lt;/p&gt;
                  &lt;p&gt;
                  These functions are often used inside of highly optimized code and therefor sanity checks are
                  kept to a minimum.  It is not recommended that any of these functions be used directly.
                  &lt;/p&gt;                
                <param>
                    x A vector with n elements. Not modified.                    
                </param>
                <param>
                    y A vector with n elements. Not modified.                    
                </param>
                <return>
                    The inner product of the two vectors.                    
                </return>
            </javadoc>
            <method name="innerProd" type="double" line="32">
                <params>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                </params>
                <declaration name="m" type="int" line="33"/>
                <declaration name="total" type="double" line="34"/>
                <scope line="35"/>
            </method>
            <javadoc line="40">
                &lt;p&gt;
                  x&lt;sup&gt;T&lt;/sup&gt;Ay
                  &lt;/p&gt;                
                <param>
                    x  A vector with n elements. Not modified.                    
                </param>
                <param>
                    A  A matrix with n by m elements.  Not modified.                    
                </param>
                <param>
                    y  A vector with m elements. Not modified.                    
                </param>
                <return>
                    The results.                    
                </return>
            </javadoc>
            <method name="innerProdA" type="double" line="49">
                <params>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="A" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                </params>
                <declaration name="n" type="int" line="50"/>
                <declaration name="m" type="int" line="51"/>
                <declaration name="result" type="double" line="54"/>
                <scope line="55">
                    <declaration name="total" type="double" line="56"/>
                    <scope line="57"/>
                </scope>
            </method>
            <javadoc line="64">
                &lt;p&gt;
                  x&lt;sup&gt;T&lt;/sup&gt;A&lt;sup&gt;T&lt;/sup&gt;y
                  &lt;/p&gt;                
                <param>
                    x  A vector with n elements. Not modified.                    
                </param>
                <param>
                    A  A matrix with n by n elements.  Not modified.                    
                </param>
                <param>
                    y  A vector with n elements. Not modified.                    
                </param>
                <return>
                    The results.                    
                </return>
            </javadoc>
            <method name="innerProdTranA" type="double" line="73">
                <params>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="A" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                </params>
                <declaration name="n" type="int" line="74"/>
                <declaration name="result" type="double" line="78"/>
                <scope line="79">
                    <declaration name="total" type="double" line="80"/>
                    <scope line="81"/>
                </scope>
            </method>
            <javadoc line="88">
                &lt;p&gt;
                  Sets A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt; equal to an outer product multiplication of the two
                  vectors.  This is also known as a rank-1 operation.&lt;br&gt;
                  &lt;br&gt;
                  A = x  y&apos;
                  where x &amp;isin; &amp;real; &lt;sup&gt;m&lt;/sup&gt; and y &amp;isin; &amp;real; &lt;sup&gt;n&lt;/sup&gt; are vectors.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Which is equivalent to: A&lt;sub&gt;ij&lt;/sub&gt; = x&lt;sub&gt;i&lt;/sub&gt;y&lt;sub&gt;j&lt;/sub&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  These functions are often used inside of highly optimized code and therefor sanity checks are
                  kept to a minimum.  It is not recommended that any of these functions be used directly.
                  &lt;/p&gt;                
                <param>
                    x A vector with m elements. Not modified.                    
                </param>
                <param>
                    y A vector with n elements. Not modified.                    
                </param>
                <param>
                    A A Matrix with m by n elements. Modified.                    
                </param>
            </javadoc>
            <method name="outerProd" type="void" line="107">
                <params>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                    <param name="A" type="RowD1Matrix64F"/>
                </params>
                <declaration name="m" type="int" line="108"/>
                <declaration name="n" type="int" line="109"/>
                <declaration name="index" type="int" line="110"/>
                <scope line="111">
                    <declaration name="xdat" type="double" line="112"/>
                    <scope line="113"/>
                </scope>
            </method>
            <javadoc line="118">
                &lt;p&gt;
                  Adds to A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt; the results of an outer product multiplication
                  of the two vectors.  This is also known as a rank 1 update.&lt;br&gt;
                  &lt;br&gt;
                  A = A + &amp;gamma; x  y&lt;sup&gt;T&lt;/sup&gt;
                  where x &amp;isin; &amp;real; &lt;sup&gt;m&lt;/sup&gt; and y &amp;isin; &amp;real; &lt;sup&gt;n&lt;/sup&gt; are vectors.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Which is equivalent to: A&lt;sub&gt;ij&lt;/sub&gt; = A&lt;sub&gt;ij&lt;/sub&gt; + &amp;gamma; x&lt;sub&gt;i&lt;/sub&gt;y&lt;sub&gt;j&lt;/sub&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  These functions are often used inside of highly optimized code and therefor sanity checks are
                  kept to a minimum.  It is not recommended that any of these functions be used directly.
                  &lt;/p&gt;                
                <param>
                    gamma A multiplication factor for the outer product.                    
                </param>
                <param>
                    x A vector with m elements. Not modified.                    
                </param>
                <param>
                    y A vector with n elements. Not modified.                    
                </param>
                <param>
                    A A Matrix with m by n elements. Modified.                    
                </param>
            </javadoc>
            <method name="addOuterProd" type="void" line="138">
                <params>
                    <param name="gamma" type="double"/>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                    <param name="A" type="RowD1Matrix64F"/>
                </params>
                <declaration name="m" type="int" line="139"/>
                <declaration name="n" type="int" line="140"/>
                <declaration name="index" type="int" line="141"/>
                <scope line="142">
                    <scope line="143">
                        <declaration name="xdat" type="double" line="144"/>
                        <scope line="145"/>
                    </scope>
                </scope>
                <scope line="150">
                    <scope line="151">
                        <declaration name="xdat" type="double" line="152"/>
                        <scope line="153"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="159">
                &lt;p&gt;
                  Multiplies a householder reflection against a vector:&lt;br&gt;
                  &lt;br&gt;
                  y = (I + &amp;gamma; u u&lt;sup&gt;T&lt;/sup&gt;)x&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  The Householder reflection is used in some implementations of QR decomposition.
                  &lt;/p&gt;                
                <param>
                    u A vector. Not modified.                    
                </param>
                <param>
                    x a vector. Not modified.                    
                </param>
                <param>
                    y Vector where the result are written to.                    
                </param>
            </javadoc>
            <method name="householder" type="void" line="172">
                <params>
                    <param name="gamma" type="double"/>
                    <param name="u" type="D1Matrix64F"/>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                </params>
                <declaration name="n" type="int" line="173"/>
                <declaration name="sum" type="double" line="174"/>
                <scope line="175"/>
                <scope line="178"/>
            </method>
            <javadoc line="182">
                &lt;p&gt;
                  Performs a rank one update on matrix A using vectors u and w.  The results are stored in B.&lt;br&gt;
                  &lt;br&gt;
                  B = A + &amp;gamma; u w&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is called a rank1 update because the matrix u w&lt;sup&gt;T&lt;/sup&gt; has a rank of 1.  Both A and B
                  can be the same matrix instance, but there is a special rank1Update for that.
                  &lt;/p&gt;                
                <param>
                    gamma A scalar.                    
                </param>
                <param>
                    A A m by m matrix. Not modified.                    
                </param>
                <param>
                    u A vector with m elements.  Not modified.                    
                </param>
                <param>
                    w A vector with m elements.  Not modified.                    
                </param>
                <param>
                    B A m by m matrix where the results are stored. Modified.                    
                </param>
            </javadoc>
            <method name="rank1Update" type="void" line="198">
                <params>
                    <param name="gamma" type="double"/>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="u" type="DenseMatrix64F"/>
                    <param name="w" type="DenseMatrix64F"/>
                    <param name="B" type="DenseMatrix64F"/>
                </params>
                <declaration name="n" type="int" line="199"/>
                <declaration name="matrixIndex" type="int" line="200"/>
                <scope line="201">
                    <declaration name="elementU" type="double" line="202"/>
                    <scope line="203"/>
                </scope>
            </method>
            <javadoc line="208">
                &lt;p&gt;
                  Performs a rank one update on matrix A using vectors u and w.  The results are stored in A.&lt;br&gt;
                  &lt;br&gt;
                  A = A + &amp;gamma; u w&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is called a rank1 update because the matrix u w&lt;sup&gt;T&lt;/sup&gt; has a rank of 1.
                  &lt;/p&gt;                
                <param>
                    gamma A scalar.                    
                </param>
                <param>
                    A A m by m matrix. Modified.                    
                </param>
                <param>
                    u A vector with m elements.  Not modified.                    
                </param>
            </javadoc>
            <method name="rank1Update" type="void" line="221">
                <params>
                    <param name="gamma" type="double"/>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="u" type="DenseMatrix64F"/>
                    <param name="w" type="DenseMatrix64F"/>
                </params>
                <declaration name="n" type="int" line="222"/>
                <declaration name="matrixIndex" type="int" line="223"/>
                <scope line="224">
                    <declaration name="elementU" type="double" line="225"/>
                    <scope line="226"/>
                </scope>
            </method>
        </class>
    </source>