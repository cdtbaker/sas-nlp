<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.mult">
        <import package="org.ejml.data.D1Matrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.RowD1Matrix64F"/>
        <class name="VectorVectorMult" line="26">
            <comment line="33">
                TODO write this                
            </comment>
            <javadoc line="26">
                Operations that involve multiplication of two vectors.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="33">
                @param x                
                <param>
                    y                    
                </param>
                <param>
                    A                    
                </param>
            </javadoc>
            <method name="mult" type="void" line="42">
                <params>
                    <param name="x" type="DenseMatrix64F"/>
                    <param name="y" type="DenseMatrix64F"/>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <comment line="39">
                    TODO create a VectorOps for meer mortals to use?                    
                </comment>
                <comment line="40">
                    TODO have DenseMatrix64F flag itself as being a vector to make checks faster?                    
                </comment>
                <comment line="43">
                    sanity check inputs                    
                </comment>
                <comment line="45">
                    call the outer or inner product                    
                </comment>
            </method>
            <javadoc line="48">
                &lt;p&gt;
                  Computes the inner product of the two vectors.  In geometry this is known as the dot product.&lt;br&gt;
                  &lt;br&gt;
                  &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; x&lt;sub&gt;k&lt;/sub&gt;  y&lt;sub&gt;k&lt;/sub&gt;&lt;br&gt;
                  where x and y are vectors with n elements.
                  &lt;/p&gt;
                  &lt;p&gt;
                  These functions are often used inside of highly optimized code and therefor sanity checks are
                  kept to a minimum.  It is not recommended that any of these functions be used directly.
                  &lt;/p&gt;                
                <param>
                    x A vector with n elements. Not modified.                    
                </param>
                <param>
                    y A vector with n elements. Not modified.                    
                </param>
                <return>
                    The inner product of the two vectors.                    
                </return>
            </javadoc>
            <method name="innerProd" type="double" line="66">
                <params>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                </params>
                <declaration name="m" type="int" line="67"/>
                <declaration name="total" type="double" line="69"/>
                <scope line="70"/>
            </method>
            <javadoc line="77">
                &lt;p&gt;
                  x&lt;sup&gt;T&lt;/sup&gt;Ay
                  &lt;/p&gt;                
                <param>
                    x  A vector with n elements. Not modified.                    
                </param>
                <param>
                    A  A matrix with n by m elements.  Not modified.                    
                </param>
                <param>
                    y  A vector with m elements. Not modified.                    
                </param>
                <return>
                    The results.                    
                </return>
            </javadoc>
            <method name="innerProdA" type="double" line="88">
                <params>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="A" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                </params>
                <declaration name="n" type="int" line="89"/>
                <declaration name="m" type="int" line="90"/>
                <declaration name="result" type="double" line="97"/>
                <scope line="99">
                    <declaration name="total" type="double" line="100"/>
                    <scope line="102"/>
                </scope>
            </method>
            <javadoc line="113">
                &lt;p&gt;
                  x&lt;sup&gt;T&lt;/sup&gt;A&lt;sup&gt;T&lt;/sup&gt;y
                  &lt;/p&gt;                
                <param>
                    x  A vector with n elements. Not modified.                    
                </param>
                <param>
                    A  A matrix with n by n elements.  Not modified.                    
                </param>
                <param>
                    y  A vector with n elements. Not modified.                    
                </param>
                <return>
                    The results.                    
                </return>
            </javadoc>
            <method name="innerProdTranA" type="double" line="125">
                <params>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="A" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                </params>
                <comment line="123">
                    TODO better name for this                    
                </comment>
                <declaration name="n" type="int" line="126"/>
                <declaration name="result" type="double" line="136"/>
                <scope line="138">
                    <declaration name="total" type="double" line="139"/>
                    <scope line="141"/>
                </scope>
            </method>
            <javadoc line="151">
                &lt;p&gt;
                  Sets A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt; equal to an outer product multiplication of the two
                  vectors.  This is also known as a rank-1 operation.&lt;br&gt;
                  &lt;br&gt;
                  A = x  y&apos;
                  where x &amp;isin; &amp;real; &lt;sup&gt;m&lt;/sup&gt; and y &amp;isin; &amp;real; &lt;sup&gt;n&lt;/sup&gt; are vectors.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Which is equivalent to: A&lt;sub&gt;ij&lt;/sub&gt; = x&lt;sub&gt;i&lt;/sub&gt;y&lt;sub&gt;j&lt;/sub&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  These functions are often used inside of highly optimized code and therefor sanity checks are
                  kept to a minimum.  It is not recommended that any of these functions be used directly.
                  &lt;/p&gt;                
                <param>
                    x A vector with m elements. Not modified.                    
                </param>
                <param>
                    y A vector with n elements. Not modified.                    
                </param>
                <param>
                    A A Matrix with m by n elements. Modified.                    
                </param>
            </javadoc>
            <method name="outerProd" type="void" line="172">
                <params>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                    <param name="A" type="RowD1Matrix64F"/>
                </params>
                <declaration name="m" type="int" line="173"/>
                <declaration name="n" type="int" line="174"/>
                <declaration name="index" type="int" line="176"/>
                <scope line="177">
                    <declaration name="xdat" type="double" line="178"/>
                    <scope line="179"/>
                </scope>
            </method>
            <javadoc line="185">
                &lt;p&gt;
                  Adds to A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt; the results of an outer product multiplication
                  of the two vectors.  This is also known as a rank 1 update.&lt;br&gt;
                  &lt;br&gt;
                  A = A + &amp;gamma; x  y&lt;sup&gt;T&lt;/sup&gt;
                  where x &amp;isin; &amp;real; &lt;sup&gt;m&lt;/sup&gt; and y &amp;isin; &amp;real; &lt;sup&gt;n&lt;/sup&gt; are vectors.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Which is equivalent to: A&lt;sub&gt;ij&lt;/sub&gt; = A&lt;sub&gt;ij&lt;/sub&gt; + &amp;gamma; x&lt;sub&gt;i&lt;/sub&gt;y&lt;sub&gt;j&lt;/sub&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  These functions are often used inside of highly optimized code and therefor sanity checks are
                  kept to a minimum.  It is not recommended that any of these functions be used directly.
                  &lt;/p&gt;                
                <param>
                    gamma A multiplication factor for the outer product.                    
                </param>
                <param>
                    x A vector with m elements. Not modified.                    
                </param>
                <param>
                    y A vector with n elements. Not modified.                    
                </param>
                <param>
                    A A Matrix with m by n elements. Modified.                    
                </param>
            </javadoc>
            <method name="addOuterProd" type="void" line="207">
                <params>
                    <param name="gamma" type="double"/>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                    <param name="A" type="RowD1Matrix64F"/>
                </params>
                <declaration name="m" type="int" line="208"/>
                <declaration name="n" type="int" line="209"/>
                <declaration name="index" type="int" line="211"/>
                <scope line="212">
                    <scope line="213">
                        <declaration name="xdat" type="double" line="214"/>
                        <scope line="215"/>
                    </scope>
                </scope>
                <scope line="219">
                    <scope line="220">
                        <declaration name="xdat" type="double" line="221"/>
                        <scope line="222"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="230">
                &lt;p&gt;
                  Multiplies a householder reflection against a vector:&lt;br&gt;
                  &lt;br&gt;
                  y = (I + &amp;gamma; u u&lt;sup&gt;T&lt;/sup&gt;)x&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  The Householder reflection is used in some implementations of QR decomposition.
                  &lt;/p&gt;                
                <param>
                    u A vector. Not modified.                    
                </param>
                <param>
                    x a vector. Not modified.                    
                </param>
                <param>
                    y Vector where the result are written to.                    
                </param>
            </javadoc>
            <method name="householder" type="void" line="246">
                <params>
                    <param name="gamma" type="double"/>
                    <param name="u" type="D1Matrix64F"/>
                    <param name="x" type="D1Matrix64F"/>
                    <param name="y" type="D1Matrix64F"/>
                </params>
                <declaration name="n" type="int" line="247"/>
                <declaration name="sum" type="double" line="249"/>
                <scope line="250"/>
                <scope line="253"/>
            </method>
            <javadoc line="258">
                &lt;p&gt;
                  Performs a rank one update on matrix A using vectors u and w.  The results are stored in B.&lt;br&gt;
                  &lt;br&gt;
                  B = A + &amp;gamma; u w&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is called a rank1 update because the matrix u w&lt;sup&gt;T&lt;/sup&gt; has a rank of 1.  Both A and B
                  can be the same matrix instance, but there is a special rank1Update for that.
                  &lt;/p&gt;                
                <param>
                    gamma A scalar.                    
                </param>
                <param>
                    A A m by m matrix. Not modified.                    
                </param>
                <param>
                    u A vector with m elements.  Not modified.                    
                </param>
                <param>
                    w A vector with m elements.  Not modified.                    
                </param>
                <param>
                    B A m by m matrix where the results are stored. Modified.                    
                </param>
            </javadoc>
            <method name="rank1Update" type="void" line="279">
                <params>
                    <param name="gamma" type="double"/>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="u" type="DenseMatrix64F"/>
                    <param name="w" type="DenseMatrix64F"/>
                    <param name="B" type="DenseMatrix64F"/>
                </params>
                <declaration name="n" type="int" line="280"/>
                <declaration name="matrixIndex" type="int" line="282"/>
                <scope line="283">
                    <declaration name="elementU" type="double" line="284"/>
                    <scope line="286"/>
                </scope>
            </method>
            <javadoc line="292">
                &lt;p&gt;
                  Performs a rank one update on matrix A using vectors u and w.  The results are stored in A.&lt;br&gt;
                  &lt;br&gt;
                  A = A + &amp;gamma; u w&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is called a rank1 update because the matrix u w&lt;sup&gt;T&lt;/sup&gt; has a rank of 1.
                  &lt;/p&gt;                
                <param>
                    gamma A scalar.                    
                </param>
                <param>
                    A A m by m matrix. Modified.                    
                </param>
                <param>
                    u A vector with m elements.  Not modified.                    
                </param>
            </javadoc>
            <method name="rank1Update" type="void" line="310">
                <params>
                    <param name="gamma" type="double"/>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="u" type="DenseMatrix64F"/>
                    <param name="w" type="DenseMatrix64F"/>
                </params>
                <declaration name="n" type="int" line="311"/>
                <declaration name="matrixIndex" type="int" line="313"/>
                <scope line="314">
                    <declaration name="elementU" type="double" line="315"/>
                    <scope line="317"/>
                </scope>
            </method>
        </class>
    </source>