<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block">
        <import package="org.ejml.data.BlockMatrix64F"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.ops.MatrixFeatures"/>
        <import package="org.ejml.ops.RandomMatrices"/>
        <import package="org.ejml.simple.SimpleMatrix"/>
        <import package="java.util.Random"/>
        <class name="BlockMatrixOps" line="10">
            <javadoc line="10">
                Various operations on {@link BlockMatrix64F}.                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="15">
                Converts a row major matrix into a row major block matrix.                
                <param>
                    src Original DenseMatrix64F.  Not modified.                    
                </param>
                <param>
                    dst Equivalent BlockMatrix64F. Modified.                    
                </param>
            </javadoc>
            <method name="convert" type="void" line="20">
                <params>
                    <param name="src" type="DenseMatrix64F"/>
                    <param name="dst" type="BlockMatrix64F"/>
                </params>
                <scope line="22">
                    <declaration name="blockHeight" type="int" line="23"/>
                    <scope line="24">
                        <declaration name="blockWidth" type="int" line="25"/>
                        <declaration name="indexDst" type="int" line="26"/>
                        <declaration name="indexSrcRow" type="int" line="27"/>
                        <scope line="28"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="36">
                &lt;p&gt;
                  Converts matrix data stored is a row major format into a block row major format in place.
                  &lt;/p&gt;                
                <param>
                    numRows number of rows in the matrix.                    
                </param>
                <param>
                    numCols number of columns in the matrix.                    
                </param>
                <param>
                    blockLength Block size in the converted matrix.                    
                </param>
                <param>
                    data Matrix data in a row-major format. Modified.                    
                </param>
                <param>
                    tmp Temporary data structure that is to be the size of a block row.                    
                </param>
            </javadoc>
            <method name="convertRowToBlock" type="void" line="46">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="blockLength" type="int"/>
                    <param name="data" type="double[]"/>
                    <param name="tmp" type="double[]"/>
                </params>
                <declaration name="minLength" type="int" line="47"/>
                <scope line="48"/>
                <scope line="51">
                    <declaration name="blockHeight" type="int" line="52"/>
                    <scope line="54">
                        <declaration name="blockWidth" type="int" line="55"/>
                        <declaration name="indexDst" type="int" line="56"/>
                        <declaration name="indexSrcRow" type="int" line="57"/>
                        <scope line="58"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="66">
                Converts a row major block matrix into a row major matrix.                
                <param>
                    src Original BlockMatrix64F..  Not modified.                    
                </param>
                <param>
                    dst Equivalent DenseMatrix64F.  Modified.                    
                </param>
            </javadoc>
            <method name="convert" type="DenseMatrix64F" line="71">
                <params>
                    <param name="src" type="BlockMatrix64F"/>
                    <param name="dst" type="DenseMatrix64F"/>
                </params>
                <scope line="72"/>
                <scope line="75"/>
                <scope line="78">
                    <declaration name="blockHeight" type="int" line="79"/>
                    <scope line="80">
                        <declaration name="blockWidth" type="int" line="81"/>
                        <declaration name="indexSrc" type="int" line="82"/>
                        <declaration name="indexDstRow" type="int" line="83"/>
                        <scope line="84"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="93">
                &lt;p&gt;
                  Converts matrix data stored is a block row major format into a row major format in place.
                  &lt;/p&gt;                
                <param>
                    numRows number of rows in the matrix.                    
                </param>
                <param>
                    numCols number of columns in the matrix.                    
                </param>
                <param>
                    blockLength Block size in the converted matrix.                    
                </param>
                <param>
                    data Matrix data in a block row-major format. Modified.                    
                </param>
                <param>
                    tmp Temporary data structure that is to be the size of a block row.                    
                </param>
            </javadoc>
            <method name="convertBlockToRow" type="void" line="103">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="blockLength" type="int"/>
                    <param name="data" type="double[]"/>
                    <param name="tmp" type="double[]"/>
                </params>
                <declaration name="minLength" type="int" line="104"/>
                <scope line="105"/>
                <scope line="108">
                    <declaration name="blockHeight" type="int" line="109"/>
                    <scope line="111">
                        <declaration name="blockWidth" type="int" line="112"/>
                        <declaration name="indexSrc" type="int" line="113"/>
                        <declaration name="indexDstRow" type="int" line="114"/>
                        <scope line="115"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="123">
                Converts the transpose of a row major matrix into a row major block matrix.                
                <param>
                    src Original DenseMatrix64F.  Not modified.                    
                </param>
                <param>
                    dst Equivalent BlockMatrix64F. Modified.                    
                </param>
            </javadoc>
            <method name="convertTranSrc" type="void" line="128">
                <params>
                    <param name="src" type="DenseMatrix64F"/>
                    <param name="dst" type="BlockMatrix64F"/>
                </params>
                <scope line="130">
                    <declaration name="blockHeight" type="int" line="131"/>
                    <scope line="132">
                        <declaration name="blockWidth" type="int" line="133"/>
                        <declaration name="indexDst" type="int" line="134"/>
                        <declaration name="indexSrc" type="int" line="135"/>
                        <scope line="136">
                            <declaration name="rowSrc" type="int" line="137"/>
                            <declaration name="rowDst" type="int" line="138"/>
                            <scope line="139"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="mult" type="void" line="146">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                    <param name="B" type="BlockMatrix64F"/>
                    <param name="C" type="BlockMatrix64F"/>
                </params>
                <declaration name="blockLength" type="int" line="151"/>
                <declaration name="Asub" type="D1Submatrix64F" line="152"/>
                <declaration name="Bsub" type="D1Submatrix64F" line="153"/>
                <declaration name="Csub" type="D1Submatrix64F" line="154"/>
            </method>
            <method name="multTransA" type="void" line="157">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                    <param name="B" type="BlockMatrix64F"/>
                    <param name="C" type="BlockMatrix64F"/>
                </params>
                <declaration name="blockLength" type="int" line="162"/>
                <declaration name="Asub" type="D1Submatrix64F" line="163"/>
                <declaration name="Bsub" type="D1Submatrix64F" line="164"/>
                <declaration name="Csub" type="D1Submatrix64F" line="165"/>
            </method>
            <method name="multTransB" type="void" line="168">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                    <param name="B" type="BlockMatrix64F"/>
                    <param name="C" type="BlockMatrix64F"/>
                </params>
                <declaration name="blockLength" type="int" line="173"/>
                <declaration name="Asub" type="D1Submatrix64F" line="174"/>
                <declaration name="Bsub" type="D1Submatrix64F" line="175"/>
                <declaration name="Csub" type="D1Submatrix64F" line="176"/>
            </method>
            <javadoc line="179">
                Transposes a block matrix.                
                <param>
                    A Original matrix.  Not modified.                    
                </param>
                <param>
                    A_tran Transposed matrix.  Modified.                    
                </param>
            </javadoc>
            <method name="transpose" type="BlockMatrix64F" line="184">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                    <param name="A_tran" type="BlockMatrix64F"/>
                </params>
                <scope line="185"/>
                <scope line="189"/>
                <scope line="192">
                    <declaration name="blockHeight" type="int" line="193"/>
                    <scope line="194">
                        <declaration name="blockWidth" type="int" line="195"/>
                        <declaration name="indexA" type="int" line="196"/>
                        <declaration name="indexC" type="int" line="197"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="203">
                Transposes an individual block inside a block matrix.                
            </javadoc>
            <method name="transposeBlock" type="void" line="206">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                    <param name="A_tran" type="BlockMatrix64F"/>
                    <param name="indexA" type="int"/>
                    <param name="indexC" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="207">
                    <declaration name="rowIndexC" type="int" line="208"/>
                    <declaration name="rowIndexA" type="int" line="209"/>
                    <declaration name="end" type="int" line="210"/>
                    <scope line="211"/>
                </scope>
            </method>
            <method name="createRandom" type="BlockMatrix64F" line="216">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="ret" type="BlockMatrix64F" line="217"/>
            </method>
            <method name="createRandom" type="BlockMatrix64F" line="221">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                    <param name="blockLength" type="int"/>
                </params>
                <declaration name="ret" type="BlockMatrix64F" line="222"/>
            </method>
            <method name="convert" type="BlockMatrix64F" line="226">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="blockLength" type="int"/>
                </params>
                <declaration name="ret" type="BlockMatrix64F" line="227"/>
            </method>
            <method name="convert" type="BlockMatrix64F" line="231">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="ret" type="BlockMatrix64F" line="232"/>
            </method>
            <method name="isEquals" type="boolean" line="236">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                    <param name="B" type="BlockMatrix64F"/>
                </params>
            </method>
            <method name="isEquals" type="boolean" line="240">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                    <param name="B" type="BlockMatrix64F"/>
                    <param name="tol" type="double"/>
                </params>
            </method>
            <javadoc line="244">
                Sets either the upper or low triangle of a matrix to zero                
            </javadoc>
            <method name="zeroTriangle" type="void" line="247">
                <params>
                    <param name="upper" type="boolean"/>
                    <param name="A" type="BlockMatrix64F"/>
                </params>
                <declaration name="blockLength" type="int" line="248"/>
                <scope line="249">
                    <scope line="250">
                        <declaration name="h" type="int" line="251"/>
                        <scope line="252">
                            <declaration name="w" type="int" line="253"/>
                            <declaration name="index" type="int" line="254"/>
                            <scope line="255">
                                <scope line="256">
                                    <scope line="257"/>
                                </scope>
                            </scope>
                            <scope line="262">
                                <scope line="263">
                                    <scope line="264"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="272">
                    <scope line="273">
                        <declaration name="h" type="int" line="274"/>
                        <scope line="275">
                            <declaration name="w" type="int" line="276"/>
                            <declaration name="index" type="int" line="277"/>
                            <scope line="278">
                                <scope line="279">
                                    <declaration name="z" type="int" line="280"/>
                                    <scope line="281"/>
                                </scope>
                            </scope>
                            <scope line="286">
                                <scope line="287">
                                    <scope line="288"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="297">
                Copies either the upper or lower triangular portion of src into dst.  Dst can be smaller
                  than src.                
                <param>
                    upper If the upper or lower triangle is copied.                    
                </param>
                <param>
                    src The source matrix. Not modified.                    
                </param>
                <param>
                    dst The destination matrix. Modified.                    
                </param>
            </javadoc>
            <method name="copyTriangle" type="void" line="304">
                <params>
                    <param name="upper" type="boolean"/>
                    <param name="src" type="BlockMatrix64F"/>
                    <param name="dst" type="BlockMatrix64F"/>
                </params>
                <declaration name="blockLength" type="int" line="308"/>
                <declaration name="numRows" type="int" line="309"/>
                <declaration name="numCols" type="int" line="310"/>
                <scope line="311">
                    <scope line="312">
                        <declaration name="heightSrc" type="int" line="313"/>
                        <declaration name="heightDst" type="int" line="314"/>
                        <scope line="315">
                            <declaration name="widthSrc" type="int" line="316"/>
                            <declaration name="widthDst" type="int" line="317"/>
                            <declaration name="indexSrc" type="int" line="318"/>
                            <declaration name="indexDst" type="int" line="319"/>
                            <scope line="320">
                                <scope line="321">
                                    <scope line="322"/>
                                </scope>
                            </scope>
                            <scope line="327">
                                <scope line="328"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="335">
                    <scope line="336">
                        <declaration name="heightSrc" type="int" line="337"/>
                        <declaration name="heightDst" type="int" line="338"/>
                        <scope line="339">
                            <declaration name="widthSrc" type="int" line="340"/>
                            <declaration name="widthDst" type="int" line="341"/>
                            <declaration name="indexSrc" type="int" line="342"/>
                            <declaration name="indexDst" type="int" line="343"/>
                            <scope line="344">
                                <scope line="345">
                                    <declaration name="z" type="int" line="346"/>
                                    <scope line="347"/>
                                </scope>
                            </scope>
                            <scope line="352">
                                <scope line="353"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="361">
                &lt;p&gt;
                  Sets every element in the matrix to the specified value.&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = value
                  &lt;p&gt;                
                <param>
                    A A matrix whose elements are about to be set. Modified.                    
                </param>
                <param>
                    value The value each element will have.                    
                </param>
            </javadoc>
            <method name="set" type="void" line="370">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="373">
                &lt;p&gt;Sets the value of A to all zeros except along the diagonal.&lt;/p&gt;                
                <param>
                    A Block matrix.                    
                </param>
            </javadoc>
            <method name="setIdentity" type="void" line="377">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                </params>
                <declaration name="minLength" type="int" line="378"/>
                <declaration name="blockLength" type="int" line="380"/>
                <scope line="381">
                    <declaration name="h" type="int" line="382"/>
                    <declaration name="w" type="int" line="383"/>
                    <declaration name="index" type="int" line="384"/>
                    <declaration name="m" type="int" line="385"/>
                    <scope line="386"/>
                </scope>
            </method>
            <javadoc line="391">
                &lt;p&gt;Converts the block matrix into a SimpleMatrix.&lt;/p&gt;                
                <param>
                    A Block matrix that is being converted.  Not modified.                    
                </param>
                <return>
                    Equivalent SimpleMatrix.                    
                </return>
            </javadoc>
            <method name="convertSimple" type="SimpleMatrix" line="396">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                </params>
                <declaration name="B" type="DenseMatrix64F" line="397"/>
            </method>
            <javadoc line="400">
                &lt;p&gt;
                  Returns a new matrix with ones along the diagonal and zeros everywhere else.
                  &lt;/p&gt;                
                <param>
                    numRows Number of rows.                    
                </param>
                <param>
                    numCols NUmber of columns.                    
                </param>
                <param>
                    blockLength Block length.                    
                </param>
                <return>
                    An identify matrix.                    
                </return>
            </javadoc>
            <method name="identity" type="BlockMatrix64F" line="409">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="blockLength" type="int"/>
                </params>
                <declaration name="A" type="BlockMatrix64F" line="410"/>
                <declaration name="minLength" type="int" line="411"/>
                <scope line="412">
                    <declaration name="h" type="int" line="413"/>
                    <declaration name="w" type="int" line="414"/>
                    <declaration name="index" type="int" line="415"/>
                    <declaration name="m" type="int" line="416"/>
                    <scope line="417"/>
                </scope>
            </method>
            <javadoc line="423">
                &lt;p&gt;
                  Checks to see if the two matrices have an identical shape an block size.
                  &lt;/p&gt;                
                <param>
                    A Matrix.                    
                </param>
                <param>
                    B Matrix.                    
                </param>
            </javadoc>
            <method name="checkIdenticalShape" type="void" line="430">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                    <param name="B" type="BlockMatrix64F"/>
                </params>
            </method>
            <javadoc line="435">
                &lt;p&gt;
                  Extracts a matrix from src into dst.  The submatrix which is copied has its initial coordinate
                  at (0,0) and ends at (dst.numRows,dst.numCols). The end rows/columns must be aligned along blocks
                  or else it will silently screw things up.
                  &lt;/p&gt;                
                <param>
                    src Matrix which a submatrix is being extracted from. Not modified.                    
                </param>
                <param>
                    dst Where the submatrix is written to.  Its rows and columns be less than or equal to 'src'.  Modified.                    
                </param>
            </javadoc>
            <method name="extractAligned" type="void" line="444">
                <params>
                    <param name="src" type="BlockMatrix64F"/>
                    <param name="dst" type="BlockMatrix64F"/>
                </params>
                <declaration name="blockLength" type="int" line="448"/>
                <declaration name="numRows" type="int" line="449"/>
                <declaration name="numCols" type="int" line="450"/>
                <scope line="451">
                    <declaration name="heightSrc" type="int" line="452"/>
                    <declaration name="heightDst" type="int" line="453"/>
                    <scope line="454">
                        <declaration name="widthSrc" type="int" line="455"/>
                        <declaration name="widthDst" type="int" line="456"/>
                        <declaration name="indexSrc" type="int" line="457"/>
                        <declaration name="indexDst" type="int" line="458"/>
                        <scope line="459"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="465">
                Checks to see if the submatrix has its boundaries along inner blocks.                
                <param>
                    blockLength Size of an inner block.                    
                </param>
                <param>
                    A Submatrix.                    
                </param>
                <return>
                    If it is block aligned or not.                    
                </return>
            </javadoc>
            <method name="blockAligned" type="boolean" line="471">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                </params>
                <scope line="474"/>
                <scope line="477"/>
            </method>
        </class>
    </source>