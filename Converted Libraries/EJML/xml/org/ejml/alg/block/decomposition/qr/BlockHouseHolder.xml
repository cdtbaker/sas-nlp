<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block.decomposition.qr">
        <import package="org.ejml.alg.block.BlockInnerMultiplication"/>
        <import package="org.ejml.alg.block.BlockVectorOps"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <class name="BlockHouseHolder" line="25">
            <javadoc line="25">
                &lt;p&gt;
                  Contains various helper functions for performing a block matrix QR decomposition.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Assumptions:
                  &lt;ul&gt;
                  &lt;le&gt; All submatrices are aligned along the inner blocks of the {@link org.ejml.data.BlockMatrix64F}.
                  &lt;le&gt; Some times vectors are assumed to have leading zeros and a one.
                  &lt;/ul&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="42">
                Performs a standard QR decomposition on the specified submatrix that is one block wide.                
                <param>
                    blockLength                    
                </param>
                <param>
                    Y                    
                </param>
                <param>
                    gamma                    
                </param>
            </javadoc>
            <method name="decomposeQR_block_col" type="boolean" line="52">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="gamma" type="double"/>
                </params>
                <comment line="57">
                    compute the householder vector                    
                </comment>
                <comment line="61">
                    apply to rest of the columns in the block                    
                </comment>
                <declaration name="width" type="int" line="53"/>
                <declaration name="height" type="int" line="54"/>
                <declaration name="min" type="int" line="55"/>
                <scope line="56"/>
            </method>
            <javadoc line="68">
                &lt;p&gt;
                  Computes the householder vector that is used to create reflector for the column.
                  The results are stored in the original matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The householder vector &apos;u&apos; is computed as follows:&lt;br&gt;
                  &lt;br&gt;
                  u(1) = 1 &lt;br&gt;
                  u(i) = x(i)/(&amp;tau; + x(1))&lt;br&gt;
                  &lt;/p&gt;
                  The first element is implicitly assumed to be one and not written.                
                <return>
                    If there was any problems or not. true = no problem.                    
                </return>
            </javadoc>
            <method name="computeHouseHolderCol" type="boolean" line="86">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="gamma" type="double[]"/>
                    <param name="i" type="int"/>
                </params>
                <comment line="92">
                    computes tau and normalizes u by max                    
                </comment>
                <comment line="95">
                    divide u by u_0                    
                </comment>
                <comment line="102">
                    after the reflector is applied the column would be all zeros but be -tau in the first element                    
                </comment>
                <declaration name="max" type="double" line="87"/>
                <scope line="89"/>
                <scope line="91">
                    <declaration name="tau" type="double" line="93"/>
                    <declaration name="u_0" type="double" line="96"/>
                </scope>
            </method>
            <javadoc line="108">
                &lt;p&gt;
                  Computes the householder vector from the specified row
                  &lt;/p&gt;
                  &lt;p&gt;
                  The householder vector &apos;u&apos; is computed as follows:&lt;br&gt;
                  &lt;br&gt;
                  u(1) = 1 &lt;br&gt;
                  u(i) = x(i)/(&amp;tau; + x(1))&lt;br&gt;
                  &lt;/p&gt;
                  The first element is implicitly assumed to be one and not written.                
                <return>
                    If there was any problems or not. true = no problem.                    
                </return>
            </javadoc>
            <method name="computeHouseHolderRow" type="boolean" line="125">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="gamma" type="double[]"/>
                    <param name="i" type="int"/>
                </params>
                <comment line="131">
                    computes tau and normalizes u by max                    
                </comment>
                <comment line="134">
                    divide u by u_0                    
                </comment>
                <comment line="140">
                    after the reflector is applied the column would be all zeros but be -tau in the first element                    
                </comment>
                <declaration name="max" type="double" line="126"/>
                <scope line="128"/>
                <scope line="130">
                    <declaration name="tau" type="double" line="132"/>
                    <declaration name="u_0" type="double" line="135"/>
                </scope>
            </method>
            <javadoc line="146">
                &lt;p&gt;
                  Applies a householder reflector stored in column &apos;col&apos; to the remainder of the columns
                  in the block after it.  Takes in account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  A = (I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)A&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    A submatrix that is at most one block wide and aligned along inner blocks                    
                </param>
                <param>
                    col The column in A containing 'u'                    
                </param>
            </javadoc>
            <method name="rank1UpdateMultR_Col" type="void" line="160">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <comment line="167">
                    total = U^T * A(:,j)                    
                </comment>
                <comment line="171">
                    A(:,j) - gamma*U*total                    
                </comment>
                <comment line="192">
                    for( int k = 0; k &lt; height; k++                    
                </comment>
                <declaration name="width" type="int" line="161"/>
                <declaration name="dataA" type="double" line="163"/>
                <scope line="165">
                    <declaration name="total" type="double" line="168"/>
                    <scope line="173">
                        <declaration name="height" type="int" line="174"/>
                        <declaration name="indexU" type="int" line="176"/>
                        <declaration name="indexA" type="int" line="177"/>
                        <scope line="179">
                            <scope line="187"/>
                        </scope>
                        <scope line="190">
                            <declaration name="endU" type="int" line="191"/>
                            <scope line="193"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="201">
                &lt;p&gt;
                  Applies a householder reflector stored in column &apos;col&apos; to the top block row (excluding
                  the first column) of A.  Takes in account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  A = (I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)A&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    A submatrix that is at most one block wide and aligned along inner blocks                    
                </param>
                <param>
                    col The column in A containing 'u'                    
                </param>
            </javadoc>
            <method name="rank1UpdateMultR_TopRow" type="void" line="215">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <comment line="220">
                    step through columns in top block, skipping over the first block                    
                </comment>
                <comment line="225">
                    total = U^T * A(:,j) * gamma                    
                </comment>
                <comment line="228">
                    A(:,j) - gamma*U*total                    
                </comment>
                <comment line="229">
                    just update the top most block                    
                </comment>
                <comment line="236">
                    take in account zeros and one                    
                </comment>
                <declaration name="dataA" type="double" line="216"/>
                <declaration name="widthCol" type="int" line="218"/>
                <scope line="221">
                    <declaration name="widthJ" type="int" line="222"/>
                    <scope line="224">
                        <declaration name="total" type="double" line="226"/>
                        <declaration name="i" type="int" line="230"/>
                        <declaration name="height" type="int" line="231"/>
                        <declaration name="indexU" type="int" line="233"/>
                        <declaration name="indexA" type="int" line="234"/>
                        <scope line="244"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="251">
                &lt;p&gt;
                  Applies a householder reflector stored in row &apos;row&apos; to the remainder of the row
                  in the block after it.  Takes in account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  A = A(I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    A submatrix that is block aligned                    
                </param>
                <param>
                    row The row in A containing 'u'                    
                </param>
                <param>
                    colStart First index in 'u' that the reflector starts at                    
                </param>
            </javadoc>
            <method name="rank1UpdateMultL_Row" type="void" line="267">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="colStart" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <comment line="275">
                    total = U^T * A(i,:)                    
                </comment>
                <comment line="279">
                    A(i,:) - gamma*U*total                    
                </comment>
                <declaration name="height" type="int" line="268"/>
                <declaration name="dataA" type="double" line="270"/>
                <declaration name="zeroOffset" type="int" line="272"/>
                <scope line="274">
                    <declaration name="total" type="double" line="276"/>
                    <scope line="281">
                        <declaration name="width" type="int" line="282"/>
                        <declaration name="indexU" type="int" line="284"/>
                        <declaration name="indexA" type="int" line="285"/>
                        <scope line="287">
                            <scope line="293"/>
                        </scope>
                        <scope line="296">
                            <scope line="297"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="305">
                &lt;p&gt;
                  Applies a householder reflector stored in row &apos;row&apos; to the left column block.
                  Takes in account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  A = A(I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    A submatrix that is block aligned                    
                </param>
                <param>
                    row The row in A containing 'u'                    
                </param>
                <param>
                    zeroOffset How far off the diagonal is the first element in 'u'                    
                </param>
            </javadoc>
            <method name="rank1UpdateMultL_LeftCol" type="void" line="321">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="gamma" type="double"/>
                    <param name="zeroOffset" type="int"/>
                </params>
                <comment line="332">
                    total = U^T * A(i,:)                    
                </comment>
                <comment line="337">
                    A(i,:) - gamma*U*total                    
                </comment>
                <comment line="338">
                    plusScale_row(blockLength,);                    
                </comment>
                <comment line="343">
                    skip over zeros and assume first element in U is 1                    
                </comment>
                <declaration name="heightU" type="int" line="322"/>
                <declaration name="width" type="int" line="323"/>
                <declaration name="data" type="double" line="325"/>
                <scope line="327">
                    <declaration name="heightA" type="int" line="328"/>
                    <scope line="330">
                        <declaration name="total" type="double" line="333"/>
                        <declaration name="indexU" type="int" line="340"/>
                        <declaration name="indexA" type="int" line="341"/>
                        <scope line="349"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="357">
                &lt;p&gt;
                  Computes the inner product of column vector &apos;colA&apos; against column vector &apos;colB&apos; while taking account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  ret = a&lt;sup&gt;Tb
                  &lt;/p&gt;
                  &lt;p&gt;
                  Column A is assumed to be a householder vector.  Element at &apos;colA&apos; is one and previous ones are zero.
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A block aligned submatrix.                    
                </param>
                <param>
                    colA Column inside the block of first column vector.                    
                </param>
                <param>
                    widthA how wide the column block that colA is inside of.                    
                </param>
                <param>
                    colB Column inside the block of second column vector.                    
                </param>
                <param>
                    widthB how wide the column block that colB is inside of.                    
                </param>
                <return>
                    dot product of the two vectors.                    
                </return>
            </javadoc>
            <method name="innerProdCol" type="double" line="378">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="colA" type="int"/>
                    <param name="widthA" type="int"/>
                    <param name="colB" type="int"/>
                    <param name="widthB" type="int"/>
                </params>
                <comment line="382">
                    first column in the blocks                    
                </comment>
                <comment line="388">
                    compute dot product down column vectors                    
                </comment>
                <comment line="397">
                    handle leading zeros                    
                </comment>
                <comment line="401">
                    handle leading one                    
                </comment>
                <comment line="406">
                    standard vector dot product                    
                </comment>
                <comment line="409">
                    for( int k = col+1; k &lt; height; k++ , indexU += width, indexA += width ) {                    
                </comment>
                <comment line="413">
                    standard vector dot product                    
                </comment>
                <comment line="415">
                    for( int k = 0; k &lt; height; k++ ) {                    
                </comment>
                <declaration name="total" type="double" line="379"/>
                <declaration name="data" type="double" line="381"/>
                <declaration name="colBlockA" type="int" line="383"/>
                <declaration name="colBlockB" type="int" line="384"/>
                <scope line="389">
                    <declaration name="height" type="int" line="391"/>
                    <declaration name="indexA" type="int" line="393"/>
                    <declaration name="indexB" type="int" line="394"/>
                    <scope line="396">
                        <declaration name="endA" type="int" line="407"/>
                        <scope line="408"/>
                    </scope>
                    <scope line="412">
                        <declaration name="endA" type="int" line="414"/>
                        <scope line="416"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="424">
                &lt;p&gt;
                  Computes the inner product of row vector &apos;rowA&apos; against row vector &apos;rowB&apos; while taking account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  ret = a&lt;sup&gt;T&lt;/sup&gt;b
                  &lt;/p&gt;
                  &lt;p&gt;
                  Row A is assumed to be a householder vector.  Element at &apos;colStartA&apos; is one and previous elements are zero.
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A block aligned submatrix.                    
                </param>
                <param>
                    rowA Row index inside the sub-matrix of first row vector has zeros and ones..                    
                </param>
                <param>
                    rowB Row index inside the sub-matrix of second row vector.                    
                </param>
                <return>
                    dot product of the two vectors.                    
                </return>
            </javadoc>
            <method name="innerProdRow" type="double" line="445">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="rowA" type="int"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="rowB" type="int"/>
                    <param name="zeroOffset" type="int"/>
                </params>
                <comment line="450">
                    take in account the one in &apos;A&apos;                    
                </comment>
                <declaration name="offset" type="int" line="446"/>
                <declaration name="total" type="double" line="451"/>
            </method>
            <method name="add_row" type="void" line="462">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="rowA" type="int"/>
                    <param name="alpha" type="double"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="rowB" type="int"/>
                    <param name="beta" type="double"/>
                    <param name="C" type="D1Submatrix64F"/>
                    <param name="rowC" type="int"/>
                    <param name="zeroOffset" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="467">
                    handle leading one                    
                </comment>
                <declaration name="offset" type="int" line="463"/>
            </method>
            <javadoc line="473">
                Divides the elements at the specified column by &apos;val&apos;.  Takes in account
                  leading zeros and one.                
            </javadoc>
            <method name="divideElementsCol" type="void" line="478">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="val" type="double"/>
                </params>
                <comment line="496">
                    for( int k = 0; k &lt; height; k++                    
                </comment>
                <declaration name="width" type="int" line="479"/>
                <declaration name="dataY" type="double" line="481"/>
                <scope line="483">
                    <declaration name="height" type="int" line="484"/>
                    <declaration name="index" type="int" line="486"/>
                    <scope line="488">
                        <scope line="491"/>
                    </scope>
                    <scope line="494">
                        <declaration name="endIndex" type="int" line="495"/>
                        <scope line="497"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="505">
                Scales the elements in the specified row starting at element colStart by &apos;val&apos;.&lt;br&gt;
                  W = valY
                  Takes in account zeros and leading one automatically.                
                <param>
                    zeroOffset How far off the diagonal is the first element in the vector.                    
                </param>
            </javadoc>
            <method name="scale_row" type="void" line="518">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="W" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="zeroOffset" type="int"/>
                    <param name="val" type="double"/>
                </params>
                <comment line="526">
                    handle the one                    
                </comment>
                <comment line="529">
                    scale rest of the vector                    
                </comment>
                <declaration name="offset" type="int" line="521"/>
            </method>
            <javadoc line="533">
                &lt;p&gt;
                  From the specified column of Y tau is computed and each element is divided by &apos;max&apos;.
                  See code below:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  for i=col:Y.numRows
                  Y[i][col] = u[i][col] / max
                  tau = tau + u[i][col]u[i][col]
                  end
                  tau = sqrt(tau)
                  if( Y[col][col] &lt; 0 )
                  tau = -tau;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="computeTauAndDivideCol" type="double" line="552">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="max" type="double"/>
                </params>
                <comment line="567">
                    save this value so that the sign can be determined later on                    
                </comment>
                <declaration name="width" type="int" line="553"/>
                <declaration name="dataY" type="double" line="555"/>
                <declaration name="top" type="double" line="557"/>
                <declaration name="norm2" type="double" line="558"/>
                <scope line="560">
                    <declaration name="height" type="int" line="561"/>
                    <declaration name="index" type="int" line="563"/>
                    <scope line="565">
                        <scope line="572">
                            <declaration name="val" type="double" line="573"/>
                        </scope>
                    </scope>
                    <scope line="576">
                        <scope line="577">
                            <declaration name="val" type="double" line="578"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="592">
                &lt;p&gt;
                  From the specified row of Y tau is computed and each element is divided by &apos;max&apos;.
                  See code below:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  for j=row:Y.numCols
                  Y[row][j] = u[row][j] / max
                  tau = tau + u[row][j]u[row][j]
                  end
                  tau = sqrt(tau)
                  if( Y[row][row] &lt; 0 )
                  tau = -tau;
                  &lt;/pre&gt;                
                <param>
                    row Which row in the block will be processed                    
                </param>
                <param>
                    colStart The first column that computation of tau will start at                    
                </param>
                <param>
                    max used to normalize and prevent buffer over flow                    
                </param>
            </javadoc>
            <method name="computeTauAndDivideRow" type="double" line="615">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="colStart" type="int"/>
                    <param name="max" type="double"/>
                </params>
                <comment line="633">
                    save this value so that the sign can be determined later on                    
                </comment>
                <declaration name="height" type="int" line="616"/>
                <declaration name="dataY" type="double" line="618"/>
                <declaration name="top" type="double" line="620"/>
                <declaration name="norm2" type="double" line="621"/>
                <declaration name="startJ" type="int" line="623"/>
                <scope line="626">
                    <declaration name="width" type="int" line="627"/>
                    <declaration name="index" type="int" line="629"/>
                    <scope line="631">
                        <scope line="638">
                            <declaration name="val" type="double" line="639"/>
                        </scope>
                    </scope>
                    <scope line="642">
                        <scope line="643">
                            <declaration name="val" type="double" line="644"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="658">
                Finds the element in the column with the largest absolute value. The offset
                  from zero is automatically taken in account based on the column.                
            </javadoc>
            <method name="findMaxCol" type="double" line="663">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                </params>
                <declaration name="width" type="int" line="664"/>
                <declaration name="dataY" type="double" line="666"/>
                <declaration name="max" type="double" line="668"/>
                <scope line="670">
                    <declaration name="height" type="int" line="671"/>
                    <declaration name="index" type="int" line="673"/>
                    <scope line="675">
                        <scope line="677">
                            <declaration name="v" type="double" line="678"/>
                            <scope line="679"/>
                        </scope>
                    </scope>
                    <scope line="683">
                        <scope line="684">
                            <declaration name="v" type="double" line="685"/>
                            <scope line="686"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="696">
                Finds the element in the column with the largest absolute value. The offset
                  from zero is automatically taken in account based on the column.                
            </javadoc>
            <method name="findMaxRow" type="double" line="702">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="colStart" type="int"/>
                </params>
                <declaration name="height" type="int" line="703"/>
                <declaration name="dataY" type="double" line="705"/>
                <declaration name="max" type="double" line="707"/>
                <scope line="709">
                    <declaration name="width" type="int" line="710"/>
                    <declaration name="index" type="int" line="712"/>
                    <scope line="714">
                        <scope line="717">
                            <declaration name="v" type="double" line="718"/>
                            <scope line="719"/>
                        </scope>
                    </scope>
                    <scope line="723">
                        <scope line="724">
                            <declaration name="v" type="double" line="725"/>
                            <scope line="726"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="736">
                &lt;p&gt;
                  Computes W from the householder reflectors stored in the columns of the column block
                  submatrix Y.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Y = v&lt;sup&gt;(1)&lt;/sup&gt;&lt;br&gt;
                  W = -&amp;beta;&lt;sub&gt;1&lt;/sub&gt;v&lt;sup&gt;(1)&lt;/sup&gt;&lt;br&gt;
                  for j=2:r&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;z = -&amp;beta;(I +WY&lt;sup&gt;T&lt;/sup&gt;)v&lt;sup&gt;(j)&lt;/sup&gt; &lt;br&gt;
                  &amp;nbsp;&amp;nbsp;W = [W z]&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;Y = [Y v&lt;sup&gt;(j)&lt;/sup&gt;]&lt;br&gt;
                  end&lt;br&gt;
                  &lt;br&gt;
                  where v&lt;sup&gt;(.)&lt;/sup&gt; are the house holder vectors, and r is the block length.  Note that
                  Y already contains the householder vectors so it does not need to be modified.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Y and W are assumed to have the same number of rows and columns.
                  &lt;/p&gt;                
                <param>
                    Y Input matrix containing householder vectors.  Not modified.                    
                </param>
                <param>
                    W Resulting W matrix. Modified.                    
                </param>
                <param>
                    temp Used internally.  Must have W.numCols elements.                    
                </param>
                <param>
                    beta Beta's for householder vectors.                    
                </param>
                <param>
                    betaIndex Index of first relevant beta.                    
                </param>
            </javadoc>
            <method name="computeW_Column" type="void" line="767">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="W" type="D1Submatrix64F"/>
                    <param name="temp" type="double"/>
                    <param name="beta" type="double"/>
                    <param name="betaIndex" type="int"/>
                </params>
                <comment line="771">
                    set the first column in W                    
                </comment>
                <comment line="776">
                    set up rest of the columns                    
                </comment>
                <comment line="778">
                    compute the z vector and insert it into W                    
                </comment>
                <declaration name="widthB" type="int" line="769"/>
                <declaration name="min" type="int" line="774"/>
                <scope line="777"/>
            </method>
            <javadoc line="784">
                &lt;p&gt;
                  Sets W to its initial value using the first column of &apos;y&apos; and the value of &apos;b&apos;:
                  &lt;br&gt;
                  W = -&amp;beta;v&lt;br&gt;
                  &lt;br&gt;
                  where v = Y(:,0).
                  &lt;/p&gt;                
                <param>
                    blockLength size of the inner block                    
                </param>
                <param>
                    W Submatrix being initialized.                    
                </param>
                <param>
                    Y Contains householder vector                    
                </param>
                <param>
                    widthB How wide the W block matrix is.                    
                </param>
                <param>
                    b beta                    
                </param>
            </javadoc>
            <method name="initializeW" type="void" line="801">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="W" type="D1Submatrix64F"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="widthB" type="int"/>
                    <param name="b" type="double"/>
                </params>
                <comment line="812">
                    take in account the first element in V being 1                    
                </comment>
                <declaration name="dataW" type="double" line="803"/>
                <declaration name="dataY" type="double" line="804"/>
                <scope line="806">
                    <declaration name="heightW" type="int" line="807"/>
                    <declaration name="indexW" type="int" line="809"/>
                    <declaration name="indexY" type="int" line="810"/>
                    <scope line="813">
                        <scope line="817"/>
                    </scope>
                    <scope line="820">
                        <scope line="821"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="828">
                Computes the vector z and inserts it into &apos;W&apos;:&lt;br&gt;
                  &lt;br&gt;
                  z = - &amp;beta;&lt;sub&gt;j&lt;/sub&gt;(V&lt;sup&gt;j&lt;/sup&gt; + Wh)&lt;br&gt;
                  &lt;br&gt;
                  where h is a vector of length &apos;col&apos; and was computed using {@link #computeY_t_V}.
                  V is a column in the Y matrix. Z is a column in the W matrix.  Both Z and V are
                  column &apos;col&apos;.                
            </javadoc>
            <method name="computeZ" type="void" line="839">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="W" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="temp" type="double[]"/>
                    <param name="beta" type="double"/>
                </params>
                <comment line="857">
                    handle the triangular portion with the leading zeros and the one                    
                </comment>
                <comment line="859">
                    compute the rows of W * h                    
                </comment>
                <comment line="866">
                    add the two vectors together and multiply by -beta                    
                </comment>
                <comment line="867">
                    zeros                    
                </comment>
                <comment line="869">
                    one                    
                </comment>
                <comment line="871">
                    normal data                    
                </comment>
                <comment line="877">
                    for( int k = 0; k &lt; heightW; k++ ,                    
                </comment>
                <comment line="879">
                    compute the rows of W * h                    
                </comment>
                <comment line="886">
                    add the two vectors together and multiply by -beta                    
                </comment>
                <declaration name="width" type="int" line="840"/>
                <declaration name="dataW" type="double" line="842"/>
                <declaration name="dataY" type="double" line="843"/>
                <declaration name="colsW" type="int" line="845"/>
                <declaration name="beta_neg" type="double" line="847"/>
                <scope line="849">
                    <declaration name="heightW" type="int" line="850"/>
                    <declaration name="indexW" type="int" line="852"/>
                    <declaration name="indexZ" type="int" line="853"/>
                    <declaration name="indexV" type="int" line="854"/>
                    <scope line="856">
                        <scope line="858">
                            <declaration name="total" type="double" line="860"/>
                            <scope line="862"/>
                            <scope line="867"/>
                            <scope line="869"/>
                            <scope line="871"/>
                        </scope>
                    </scope>
                    <scope line="875">
                        <declaration name="endZ" type="int" line="876"/>
                        <scope line="878">
                            <declaration name="total" type="double" line="880"/>
                            <scope line="882"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="895">
                Computes Y&lt;sup&gt;T&lt;/sup&gt;v&lt;sup&gt;(j)&lt;/sup&gt;.  Where Y are the columns before &apos;col&apos; and v is the column
                  at &apos;col&apos;.  The zeros and ones are taken in account.  The solution is a vector with &apos;col&apos; elements.
                  width of Y must be along the block of original matrix A                
                <param>
                    temp Temporary storage of least length 'col'                    
                </param>
            </javadoc>
            <method name="computeY_t_V" type="void" line="905">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="temp" type="double[]"/>
                </params>
                <declaration name="widthB" type="int" line="906"/>
                <scope line="908"/>
            </method>
            <javadoc line="913">
                Special multiplication that takes in account the zeros and one in Y, which
                  is the matrix that stores the householder vectors.                
            </javadoc>
            <method name="multAdd_zeros" type="void" line="921">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="C" type="D1Submatrix64F"/>
                </params>
                <declaration name="widthY" type="int" line="922"/>
                <scope line="924">
                    <declaration name="heightY" type="int" line="925"/>
                    <scope line="927">
                        <declaration name="widthB" type="int" line="928"/>
                        <declaration name="indexC" type="int" line="930"/>
                        <scope line="932">
                            <declaration name="indexY" type="int" line="933"/>
                            <declaration name="indexB" type="int" line="934"/>
                            <scope line="936"/>
                            <scope line="939"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="948">
                &lt;p&gt;
                  Inner block mult add operation that takes in account the zeros and on in dataA,
                  which is the top part of the Y block vector that has the householder vectors.&lt;br&gt;
                  &lt;br&gt;
                  C = C + A  B
                  &lt;/p&gt;                
            </javadoc>
            <method name="multBlockAdd_zerosone" type="void" line="958">
                <params>
                    <param name="dataA" type="double[]"/>
                    <param name="dataB" type="double[]"/>
                    <param name="dataC" type="double[]"/>
                    <param name="indexA" type="int"/>
                    <param name="indexB" type="int"/>
                    <param name="indexC" type="int"/>
                    <param name="heightA" type="int"/>
                    <param name="widthA" type="int"/>
                    <param name="widthC" type="int"/>
                </params>
                <scope line="961">
                    <scope line="962">
                        <declaration name="val" type="double" line="963"/>
                        <declaration name="end" type="int" line="965"/>
                        <scope line="967"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="976">
                &lt;p&gt;
                  Performs a matrix multiplication on the block aligned submatrices.  A is
                  assumed to be block column vector that is lower triangular with diagonal elements set to 1.&lt;br&gt;
                  &lt;br&gt;
                  C = A^T  B
                  &lt;/p&gt;                
            </javadoc>
            <method name="multTransA_vecCol" type="void" line="987">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="C" type="D1Submatrix64F"/>
                </params>
                <declaration name="widthA" type="int" line="988"/>
                <scope line="992">
                    <declaration name="widthB" type="int" line="993"/>
                    <declaration name="indexC" type="int" line="995"/>
                    <scope line="997">
                        <declaration name="heightA" type="int" line="998"/>
                        <declaration name="indexA" type="int" line="1000"/>
                        <declaration name="indexB" type="int" line="1001"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1013">
                Performs a matrix multiplication on an single inner block where A is assumed to be lower triangular with diagonal
                  elements equal to 1.&lt;br&gt;
                  &lt;br&gt;
                  C = A^T  B                
            </javadoc>
            <method name="multTransABlockSet_lowerTriag" type="void" line="1021">
                <params>
                    <param name="dataA" type="double[]"/>
                    <param name="dataB" type="double[]"/>
                    <param name="dataC" type="double[]"/>
                    <param name="indexA" type="int"/>
                    <param name="indexB" type="int"/>
                    <param name="indexC" type="int"/>
                    <param name="heightA" type="int"/>
                    <param name="widthA" type="int"/>
                    <param name="widthC" type="int"/>
                </params>
                <scope line="1022">
                    <scope line="1023">
                        <declaration name="val" type="double" line="1024"/>
                        <scope line="1026"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>