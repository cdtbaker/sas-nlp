<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block.decomposition.qr">
        <import package="org.ejml.alg.block.BlockInnerMultiplication"/>
        <import package="org.ejml.alg.block.BlockVectorOps"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <class name="BlockHouseHolder" line="5">
            <javadoc line="5">
                &lt;p&gt;
                  Contains various helper functions for performing a block matrix QR decomposition.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Assumptions:
                  &lt;ul&gt;
                  &lt;le&gt; All submatrices are aligned along the inner blocks of the {@link org.ejml.data.BlockMatrix64F}.
                  &lt;le&gt; Some times vectors are assumed to have leading zeros and a one.
                  &lt;/ul&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="18">
                Performs a standard QR decomposition on the specified submatrix that is one block wide.                
                <param>
                    blockLength                    
                </param>
                <param>
                    Y                    
                </param>
                <param>
                    gamma                    
                </param>
            </javadoc>
            <method name="decomposeQR_block_col" type="boolean" line="24">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="gamma" type="double"/>
                </params>
                <declaration name="width" type="int" line="25"/>
                <declaration name="height" type="int" line="26"/>
                <declaration name="min" type="int" line="27"/>
                <scope line="28"/>
            </method>
            <javadoc line="34">
                &lt;p&gt;
                  Computes the householder vector that is used to create reflector for the column.
                  The results are stored in the original matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The householder vector &apos;u&apos; is computed as follows:&lt;br&gt;
                  &lt;br&gt;
                  u(1) = 1 &lt;br&gt;
                  u(i) = x(i)/(&amp;tau; + x(1))&lt;br&gt;
                  &lt;/p&gt;
                  The first element is implicitly assumed to be one and not written.                
                <return>
                    If there was any problems or not. true = no problem.                    
                </return>
            </javadoc>
            <method name="computeHouseHolderCol" type="boolean" line="48">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="gamma" type="double[]"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="max" type="double" line="49"/>
                <scope line="50"/>
                <scope line="53">
                    <declaration name="tau" type="double" line="54"/>
                    <declaration name="u_0" type="double" line="55"/>
                </scope>
            </method>
            <javadoc line="63">
                &lt;p&gt;
                  Computes the householder vector from the specified row
                  &lt;/p&gt;
                  &lt;p&gt;
                  The householder vector &apos;u&apos; is computed as follows:&lt;br&gt;
                  &lt;br&gt;
                  u(1) = 1 &lt;br&gt;
                  u(i) = x(i)/(&amp;tau; + x(1))&lt;br&gt;
                  &lt;/p&gt;
                  The first element is implicitly assumed to be one and not written.                
                <return>
                    If there was any problems or not. true = no problem.                    
                </return>
            </javadoc>
            <method name="computeHouseHolderRow" type="boolean" line="76">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="gamma" type="double[]"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="max" type="double" line="77"/>
                <scope line="78"/>
                <scope line="81">
                    <declaration name="tau" type="double" line="82"/>
                    <declaration name="u_0" type="double" line="83"/>
                </scope>
            </method>
            <javadoc line="90">
                &lt;p&gt;
                  Applies a householder reflector stored in column &apos;col&apos; to the remainder of the columns
                  in the block after it.  Takes in account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  A = (I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)A&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    A submatrix that is at most one block wide and aligned along inner blocks                    
                </param>
                <param>
                    col The column in A containing 'u'                    
                </param>
            </javadoc>
            <method name="rank1UpdateMultR_Col" type="void" line="100">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <declaration name="width" type="int" line="101"/>
                <declaration name="dataA" type="double" line="102"/>
                <scope line="103">
                    <declaration name="total" type="double" line="104"/>
                    <scope line="106">
                        <declaration name="height" type="int" line="107"/>
                        <declaration name="indexU" type="int" line="108"/>
                        <declaration name="indexA" type="int" line="109"/>
                        <scope line="110">
                            <scope line="115"/>
                        </scope>
                        <scope line="119">
                            <declaration name="endU" type="int" line="120"/>
                            <scope line="121"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="128">
                &lt;p&gt;
                  Applies a householder reflector stored in column &apos;col&apos; to the top block row (excluding
                  the first column) of A.  Takes in account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  A = (I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)A&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    A submatrix that is at most one block wide and aligned along inner blocks                    
                </param>
                <param>
                    col The column in A containing 'u'                    
                </param>
            </javadoc>
            <method name="rank1UpdateMultR_TopRow" type="void" line="138">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <declaration name="dataA" type="double" line="139"/>
                <declaration name="widthCol" type="int" line="140"/>
                <scope line="141">
                    <declaration name="widthJ" type="int" line="142"/>
                    <scope line="143">
                        <declaration name="total" type="double" line="144"/>
                        <declaration name="i" type="int" line="145"/>
                        <declaration name="height" type="int" line="146"/>
                        <declaration name="indexU" type="int" line="147"/>
                        <declaration name="indexA" type="int" line="148"/>
                        <scope line="153"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="159">
                &lt;p&gt;
                  Applies a householder reflector stored in row &apos;row&apos; to the remainder of the row
                  in the block after it.  Takes in account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  A = A(I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    A submatrix that is block aligned                    
                </param>
                <param>
                    row The row in A containing 'u'                    
                </param>
                <param>
                    colStart First index in 'u' that the reflector starts at                    
                </param>
            </javadoc>
            <method name="rank1UpdateMultL_Row" type="void" line="170">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="colStart" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <declaration name="height" type="int" line="171"/>
                <declaration name="dataA" type="double" line="172"/>
                <declaration name="zeroOffset" type="int" line="173"/>
                <scope line="174">
                    <declaration name="total" type="double" line="175"/>
                    <scope line="177">
                        <declaration name="width" type="int" line="178"/>
                        <declaration name="indexU" type="int" line="179"/>
                        <declaration name="indexA" type="int" line="180"/>
                        <scope line="181">
                            <scope line="185"/>
                        </scope>
                        <scope line="189">
                            <scope line="190"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="197">
                &lt;p&gt;
                  Applies a householder reflector stored in row &apos;row&apos; to the left column block.
                  Takes in account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  A = A(I - &amp;gamma;uu&lt;sup&gt;T&lt;/sup&gt;)&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    A submatrix that is block aligned                    
                </param>
                <param>
                    row The row in A containing 'u'                    
                </param>
                <param>
                    zeroOffset How far off the diagonal is the first element in 'u'                    
                </param>
            </javadoc>
            <method name="rank1UpdateMultL_LeftCol" type="void" line="208">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="gamma" type="double"/>
                    <param name="zeroOffset" type="int"/>
                </params>
                <declaration name="heightU" type="int" line="209"/>
                <declaration name="width" type="int" line="210"/>
                <declaration name="data" type="double" line="211"/>
                <scope line="212">
                    <declaration name="heightA" type="int" line="213"/>
                    <scope line="214">
                        <declaration name="total" type="double" line="215"/>
                        <declaration name="indexU" type="int" line="217"/>
                        <declaration name="indexA" type="int" line="218"/>
                        <scope line="222"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="228">
                &lt;p&gt;
                  Computes the inner product of column vector &apos;colA&apos; against column vector &apos;colB&apos; while taking account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  ret = a&lt;sup&gt;Tb
                  &lt;/p&gt;
                  &lt;p&gt;
                  Column A is assumed to be a householder vector.  Element at &apos;colA&apos; is one and previous ones are zero.
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A block aligned submatrix.                    
                </param>
                <param>
                    colA Column inside the block of first column vector.                    
                </param>
                <param>
                    widthA how wide the column block that colA is inside of.                    
                </param>
                <param>
                    colB Column inside the block of second column vector.                    
                </param>
                <param>
                    widthB how wide the column block that colB is inside of.                    
                </param>
                <return>
                    dot product of the two vectors.                    
                </return>
            </javadoc>
            <method name="innerProdCol" type="double" line="245">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="colA" type="int"/>
                    <param name="widthA" type="int"/>
                    <param name="colB" type="int"/>
                    <param name="widthB" type="int"/>
                </params>
                <declaration name="total" type="double" line="246"/>
                <declaration name="data" type="double" line="247"/>
                <declaration name="colBlockA" type="int" line="248"/>
                <declaration name="colBlockB" type="int" line="249"/>
                <scope line="252">
                    <declaration name="height" type="int" line="253"/>
                    <declaration name="indexA" type="int" line="254"/>
                    <declaration name="indexB" type="int" line="255"/>
                    <scope line="256">
                        <declaration name="endA" type="int" line="261"/>
                        <scope line="262"/>
                    </scope>
                    <scope line="266">
                        <declaration name="endA" type="int" line="267"/>
                        <scope line="268"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="275">
                &lt;p&gt;
                  Computes the inner product of row vector &apos;rowA&apos; against row vector &apos;rowB&apos; while taking account leading zeros and one.&lt;br&gt;
                  &lt;br&gt;
                  ret = a&lt;sup&gt;T&lt;/sup&gt;b
                  &lt;/p&gt;
                  &lt;p&gt;
                  Row A is assumed to be a householder vector.  Element at &apos;colStartA&apos; is one and previous elements are zero.
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A block aligned submatrix.                    
                </param>
                <param>
                    rowA Row index inside the sub-matrix of first row vector has zeros and ones..                    
                </param>
                <param>
                    rowB Row index inside the sub-matrix of second row vector.                    
                </param>
                <return>
                    dot product of the two vectors.                    
                </return>
            </javadoc>
            <method name="innerProdRow" type="double" line="290">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="rowA" type="int"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="rowB" type="int"/>
                    <param name="zeroOffset" type="int"/>
                </params>
                <declaration name="offset" type="int" line="291"/>
                <declaration name="total" type="double" line="293"/>
            </method>
            <method name="add_row" type="void" line="297">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="rowA" type="int"/>
                    <param name="alpha" type="double"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="rowB" type="int"/>
                    <param name="beta" type="double"/>
                    <param name="C" type="D1Submatrix64F"/>
                    <param name="rowC" type="int"/>
                    <param name="zeroOffset" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="offset" type="int" line="298"/>
            </method>
            <javadoc line="303">
                Divides the elements at the specified column by &apos;val&apos;.  Takes in account
                  leading zeros and one.                
            </javadoc>
            <method name="divideElementsCol" type="void" line="307">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="val" type="double"/>
                </params>
                <declaration name="width" type="int" line="308"/>
                <declaration name="dataY" type="double" line="309"/>
                <scope line="310">
                    <declaration name="height" type="int" line="311"/>
                    <declaration name="index" type="int" line="312"/>
                    <scope line="313">
                        <scope line="315"/>
                    </scope>
                    <scope line="319">
                        <declaration name="endIndex" type="int" line="320"/>
                        <scope line="321"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="327">
                Scales the elements in the specified row starting at element colStart by &apos;val&apos;.&lt;br&gt;
                  W = valY
                  Takes in account zeros and leading one automatically.                
                <param>
                    zeroOffset How far off the diagonal is the first element in the vector.                    
                </param>
            </javadoc>
            <method name="scale_row" type="void" line="333">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="W" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="zeroOffset" type="int"/>
                    <param name="val" type="double"/>
                </params>
                <declaration name="offset" type="int" line="334"/>
            </method>
            <javadoc line="339">
                &lt;p&gt;
                  From the specified column of Y tau is computed and each element is divided by &apos;max&apos;.
                  See code below:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  for i=col:Y.numRows
                  Y[i][col] = u[i][col] / max
                  tau = tau + u[i][col]u[i][col]
                  end
                  tau = sqrt(tau)
                  if( Y[col][col] &lt; 0 )
                  tau = -tau;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="computeTauAndDivideCol" type="double" line="354">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="max" type="double"/>
                </params>
                <declaration name="width" type="int" line="355"/>
                <declaration name="dataY" type="double" line="356"/>
                <declaration name="top" type="double" line="357"/>
                <declaration name="norm2" type="double" line="358"/>
                <scope line="359">
                    <declaration name="height" type="int" line="360"/>
                    <declaration name="index" type="int" line="361"/>
                    <scope line="362">
                        <scope line="367">
                            <declaration name="val" type="double" line="368"/>
                        </scope>
                    </scope>
                    <scope line="372">
                        <scope line="373">
                            <declaration name="val" type="double" line="374"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="383">
                &lt;p&gt;
                  From the specified row of Y tau is computed and each element is divided by &apos;max&apos;.
                  See code below:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  for j=row:Y.numCols
                  Y[row][j] = u[row][j] / max
                  tau = tau + u[row][j]u[row][j]
                  end
                  tau = sqrt(tau)
                  if( Y[row][row] &lt; 0 )
                  tau = -tau;
                  &lt;/pre&gt;                
                <param>
                    row Which row in the block will be processed                    
                </param>
                <param>
                    colStart The first column that computation of tau will start at                    
                </param>
                <param>
                    max used to normalize and prevent buffer over flow                    
                </param>
            </javadoc>
            <method name="computeTauAndDivideRow" type="double" line="401">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="colStart" type="int"/>
                    <param name="max" type="double"/>
                </params>
                <declaration name="height" type="int" line="402"/>
                <declaration name="dataY" type="double" line="403"/>
                <declaration name="top" type="double" line="404"/>
                <declaration name="norm2" type="double" line="405"/>
                <declaration name="startJ" type="int" line="406"/>
                <scope line="408">
                    <declaration name="width" type="int" line="409"/>
                    <declaration name="index" type="int" line="410"/>
                    <scope line="411">
                        <scope line="416">
                            <declaration name="val" type="double" line="417"/>
                        </scope>
                    </scope>
                    <scope line="421">
                        <scope line="422">
                            <declaration name="val" type="double" line="423"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="432">
                Finds the element in the column with the largest absolute value. The offset
                  from zero is automatically taken in account based on the column.                
            </javadoc>
            <method name="findMaxCol" type="double" line="436">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                </params>
                <declaration name="width" type="int" line="437"/>
                <declaration name="dataY" type="double" line="438"/>
                <declaration name="max" type="double" line="439"/>
                <scope line="440">
                    <declaration name="height" type="int" line="441"/>
                    <declaration name="index" type="int" line="442"/>
                    <scope line="443">
                        <scope line="445">
                            <declaration name="v" type="double" line="446"/>
                            <scope line="447"/>
                        </scope>
                    </scope>
                    <scope line="452">
                        <scope line="453">
                            <declaration name="v" type="double" line="454"/>
                            <scope line="455"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="463">
                Finds the element in the column with the largest absolute value. The offset
                  from zero is automatically taken in account based on the column.                
            </javadoc>
            <method name="findMaxRow" type="double" line="467">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="colStart" type="int"/>
                </params>
                <declaration name="height" type="int" line="468"/>
                <declaration name="dataY" type="double" line="469"/>
                <declaration name="max" type="double" line="470"/>
                <scope line="471">
                    <declaration name="width" type="int" line="472"/>
                    <declaration name="index" type="int" line="473"/>
                    <scope line="474">
                        <scope line="476">
                            <declaration name="v" type="double" line="477"/>
                            <scope line="478"/>
                        </scope>
                    </scope>
                    <scope line="483">
                        <scope line="484">
                            <declaration name="v" type="double" line="485"/>
                            <scope line="486"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="494">
                &lt;p&gt;
                  Computes W from the householder reflectors stored in the columns of the column block
                  submatrix Y.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Y = v&lt;sup&gt;(1)&lt;/sup&gt;&lt;br&gt;
                  W = -&amp;beta;&lt;sub&gt;1&lt;/sub&gt;v&lt;sup&gt;(1)&lt;/sup&gt;&lt;br&gt;
                  for j=2:r&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;z = -&amp;beta;(I +WY&lt;sup&gt;T&lt;/sup&gt;)v&lt;sup&gt;(j)&lt;/sup&gt; &lt;br&gt;
                  &amp;nbsp;&amp;nbsp;W = [W z]&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;Y = [Y v&lt;sup&gt;(j)&lt;/sup&gt;]&lt;br&gt;
                  end&lt;br&gt;
                  &lt;br&gt;
                  where v&lt;sup&gt;(.)&lt;/sup&gt; are the house holder vectors, and r is the block length.  Note that
                  Y already contains the householder vectors so it does not need to be modified.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Y and W are assumed to have the same number of rows and columns.
                  &lt;/p&gt;                
                <param>
                    Y Input matrix containing householder vectors.  Not modified.                    
                </param>
                <param>
                    W Resulting W matrix. Modified.                    
                </param>
                <param>
                    temp Used internally.  Must have W.numCols elements.                    
                </param>
                <param>
                    beta Beta's for householder vectors.                    
                </param>
                <param>
                    betaIndex Index of first relevant beta.                    
                </param>
            </javadoc>
            <method name="computeW_Column" type="void" line="520">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="W" type="D1Submatrix64F"/>
                    <param name="temp" type="double"/>
                    <param name="beta" type="double"/>
                    <param name="betaIndex" type="int"/>
                </params>
                <declaration name="widthB" type="int" line="521"/>
                <declaration name="min" type="int" line="523"/>
                <scope line="524"/>
            </method>
            <javadoc line="529">
                &lt;p&gt;
                  Sets W to its initial value using the first column of &apos;y&apos; and the value of &apos;b&apos;:
                  &lt;br&gt;
                  W = -&amp;beta;v&lt;br&gt;
                  &lt;br&gt;
                  where v = Y(:,0).
                  &lt;/p&gt;                
                <param>
                    blockLength size of the inner block                    
                </param>
                <param>
                    W Submatrix being initialized.                    
                </param>
                <param>
                    Y Contains householder vector                    
                </param>
                <param>
                    widthB How wide the W block matrix is.                    
                </param>
                <param>
                    b beta                    
                </param>
            </javadoc>
            <method name="initializeW" type="void" line="543">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="W" type="D1Submatrix64F"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="widthB" type="int"/>
                    <param name="b" type="double"/>
                </params>
                <declaration name="dataW" type="double" line="544"/>
                <declaration name="dataY" type="double" line="545"/>
                <scope line="546">
                    <declaration name="heightW" type="int" line="547"/>
                    <declaration name="indexW" type="int" line="548"/>
                    <declaration name="indexY" type="int" line="549"/>
                    <scope line="550">
                        <scope line="554"/>
                    </scope>
                    <scope line="558">
                        <scope line="559"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="565">
                Computes the vector z and inserts it into &apos;W&apos;:&lt;br&gt;
                  &lt;br&gt;
                  z = - &amp;beta;&lt;sub&gt;j&lt;/sub&gt;(V&lt;sup&gt;j&lt;/sup&gt; + Wh)&lt;br&gt;
                  &lt;br&gt;
                  where h is a vector of length &apos;col&apos; and was computed using {@link #computeY_t_V}.
                  V is a column in the Y matrix. Z is a column in the W matrix.  Both Z and V are
                  column &apos;col&apos;.                
            </javadoc>
            <method name="computeZ" type="void" line="574">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="W" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="temp" type="double[]"/>
                    <param name="beta" type="double"/>
                </params>
                <declaration name="width" type="int" line="575"/>
                <declaration name="dataW" type="double" line="576"/>
                <declaration name="dataY" type="double" line="577"/>
                <declaration name="colsW" type="int" line="578"/>
                <declaration name="beta_neg" type="double" line="579"/>
                <scope line="580">
                    <declaration name="heightW" type="int" line="581"/>
                    <declaration name="indexW" type="int" line="582"/>
                    <declaration name="indexZ" type="int" line="583"/>
                    <declaration name="indexV" type="int" line="584"/>
                    <scope line="585">
                        <scope line="586">
                            <declaration name="total" type="double" line="587"/>
                            <scope line="588"/>
                            <scope line="591"/>
                            <scope line="594"/>
                            <scope line="597"/>
                        </scope>
                    </scope>
                    <scope line="602">
                        <declaration name="endZ" type="int" line="603"/>
                        <scope line="604">
                            <declaration name="total" type="double" line="605"/>
                            <scope line="606"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="617">
                Computes Y&lt;sup&gt;T&lt;/sup&gt;v&lt;sup&gt;(j)&lt;/sup&gt;.  Where Y are the columns before &apos;col&apos; and v is the column
                  at &apos;col&apos;.  The zeros and ones are taken in account.  The solution is a vector with &apos;col&apos; elements.
                  width of Y must be along the block of original matrix A                
                <param>
                    temp Temporary storage of least length 'col'                    
                </param>
            </javadoc>
            <method name="computeY_t_V" type="void" line="623">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="col" type="int"/>
                    <param name="temp" type="double[]"/>
                </params>
                <declaration name="widthB" type="int" line="624"/>
                <scope line="625"/>
            </method>
            <javadoc line="629">
                Special multiplication that takes in account the zeros and one in Y, which
                  is the matrix that stores the householder vectors.                
            </javadoc>
            <method name="multAdd_zeros" type="void" line="633">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="C" type="D1Submatrix64F"/>
                </params>
                <declaration name="widthY" type="int" line="634"/>
                <scope line="635">
                    <declaration name="heightY" type="int" line="636"/>
                    <scope line="637">
                        <declaration name="widthB" type="int" line="638"/>
                        <declaration name="indexC" type="int" line="639"/>
                        <scope line="640">
                            <declaration name="indexY" type="int" line="641"/>
                            <declaration name="indexB" type="int" line="642"/>
                            <scope line="643"/>
                            <scope line="646"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="653">
                &lt;p&gt;
                  Inner block mult add operation that takes in account the zeros and on in dataA,
                  which is the top part of the Y block vector that has the householder vectors.&lt;br&gt;
                  &lt;br&gt;
                  C = C + A  B
                  &lt;/p&gt;                
            </javadoc>
            <method name="multBlockAdd_zerosone" type="void" line="661">
                <params>
                    <param name="dataA" type="double[]"/>
                    <param name="dataB" type="double[]"/>
                    <param name="dataC" type="double[]"/>
                    <param name="indexA" type="int"/>
                    <param name="indexB" type="int"/>
                    <param name="indexC" type="int"/>
                    <param name="heightA" type="int"/>
                    <param name="widthA" type="int"/>
                    <param name="widthC" type="int"/>
                </params>
                <scope line="662">
                    <scope line="663">
                        <declaration name="val" type="double" line="664"/>
                        <declaration name="end" type="int" line="665"/>
                        <scope line="666"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="673">
                &lt;p&gt;
                  Performs a matrix multiplication on the block aligned submatrices.  A is
                  assumed to be block column vector that is lower triangular with diagonal elements set to 1.&lt;br&gt;
                  &lt;br&gt;
                  C = A^T  B
                  &lt;/p&gt;                
            </javadoc>
            <method name="multTransA_vecCol" type="void" line="681">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="C" type="D1Submatrix64F"/>
                </params>
                <declaration name="widthA" type="int" line="682"/>
                <scope line="684">
                    <declaration name="widthB" type="int" line="685"/>
                    <declaration name="indexC" type="int" line="686"/>
                    <scope line="687">
                        <declaration name="heightA" type="int" line="688"/>
                        <declaration name="indexA" type="int" line="689"/>
                        <declaration name="indexB" type="int" line="690"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="696">
                Performs a matrix multiplication on an single inner block where A is assumed to be lower triangular with diagonal
                  elements equal to 1.&lt;br&gt;
                  &lt;br&gt;
                  C = A^T  B                
            </javadoc>
            <method name="multTransABlockSet_lowerTriag" type="void" line="702">
                <params>
                    <param name="dataA" type="double[]"/>
                    <param name="dataB" type="double[]"/>
                    <param name="dataC" type="double[]"/>
                    <param name="indexA" type="int"/>
                    <param name="indexB" type="int"/>
                    <param name="indexC" type="int"/>
                    <param name="heightA" type="int"/>
                    <param name="widthA" type="int"/>
                    <param name="widthC" type="int"/>
                </params>
                <scope line="703">
                    <scope line="704">
                        <declaration name="val" type="double" line="705"/>
                        <scope line="706"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>