<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block.decomposition.hessenberg">
        <import package="org.ejml.alg.block.BlockMultiplication"/>
        <import package="org.ejml.alg.block.decomposition.qr.BlockMatrix64HouseholderQR"/>
        <import package="org.ejml.alg.dense.decomposition.hessenberg.TridiagonalSimilarDecomposition"/>
        <import package="org.ejml.data.BlockMatrix64F"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.alg.block.BlockInnerMultiplication.blockMultPlusTransA"/>
        <class name="TridiagonalDecompositionBlockHouseholder" line="10">
            <implements interface="TridiagonalSimilarDecomposition">
                <type_params>
                    <type_param name="BlockMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="10">
                &lt;p&gt;
                  Tridiagonal similar decomposition for block matrices.  Orthogonal matrices are computed using
                  householder vectors.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Based off algorithm in section 2 of J. J. Dongarra, D. C. Sorensen, S. J. Hammarling,
                  &quot;Block Reduction of Matrices to Condensed Forms for Eigenvalue Computations&quot; Journal of
                  Computations and Applied Mathematics 27 (1989) 215-227&lt;b&gt;
                  &lt;br&gt;
                  Computations of Householder reflectors has been modified from what is presented in that paper to how 
                  it is performed in &quot;Fundamentals of Matrix Computations&quot; 2nd ed. by David S. Watkins.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="A" type="BlockMatrix64F" line="26"/>
            <declaration name="V" type="BlockMatrix64F" line="27"/>
            <declaration name="tmp" type="BlockMatrix64F" line="28"/>
            <declaration name="gammas" type="double" line="29"/>
            <declaration name="zerosM" type="DenseMatrix64F" line="30"/>
            <method name="getT" type="BlockMatrix64F" line="31">
                <params>
                    <param name="T" type="BlockMatrix64F"/>
                </params>
                <scope line="32"/>
                <scope line="35"/>
                <scope line="40">
                    <declaration name="d" type="double" line="41"/>
                </scope>
            </method>
            <method name="getQ" type="BlockMatrix64F" line="48">
                <params>
                    <param name="Q" type="BlockMatrix64F"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <declaration name="height" type="int" line="50"/>
                <declaration name="subQ" type="D1Submatrix64F" line="53"/>
                <declaration name="subU" type="D1Submatrix64F" line="54"/>
                <declaration name="subW" type="D1Submatrix64F" line="55"/>
                <declaration name="tmp" type="D1Submatrix64F" line="56"/>
                <declaration name="N" type="int" line="57"/>
                <declaration name="start" type="int" line="58"/>
                <scope line="61">
                    <declaration name="blockSize" type="int" line="62"/>
                    <scope line="66"/>
                    <scope line="72"/>
                </scope>
            </method>
            <method name="copyZeros" type="void" line="92">
                <params>
                    <param name="subU" type="D1Submatrix64F"/>
                </params>
                <declaration name="N" type="int" line="93"/>
                <scope line="94">
                    <scope line="95"/>
                    <scope line="99"/>
                </scope>
            </method>
            <method name="replaceZeros" type="void" line="105">
                <params>
                    <param name="subU" type="D1Submatrix64F"/>
                </params>
                <declaration name="N" type="int" line="106"/>
                <scope line="107">
                    <scope line="108"/>
                    <scope line="111"/>
                </scope>
            </method>
            <method name="getDiagonal" type="void" line="116">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="off" type="double[]"/>
                </params>
                <scope line="118"/>
            </method>
            <method name="decompose" type="boolean" line="123">
                <params>
                    <param name="orig" type="BlockMatrix64F"/>
                </params>
                <declaration name="subA" type="D1Submatrix64F" line="126"/>
                <declaration name="subV" type="D1Submatrix64F" line="127"/>
                <declaration name="subU" type="D1Submatrix64F" line="128"/>
                <declaration name="N" type="int" line="129"/>
                <scope line="130">
                    <declaration name="height" type="int" line="131"/>
                    <scope line="139">
                        <declaration name="before" type="double" line="140"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="149">
                C = C + A^TB                
                <param>
                    blockLength                    
                </param>
                <param>
                    A row block vector                    
                </param>
                <param>
                    B row block vector                    
                </param>
                <param>
                    C                    
                </param>
            </javadoc>
            <method name="multPlusTransA" type="void" line="156">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="C" type="D1Submatrix64F"/>
                </params>
                <declaration name="heightA" type="int" line="157"/>
                <scope line="158">
                    <declaration name="heightC" type="int" line="159"/>
                    <declaration name="indexA" type="int" line="160"/>
                    <scope line="161">
                        <declaration name="widthC" type="int" line="162"/>
                        <declaration name="indexC" type="int" line="163"/>
                        <declaration name="indexB" type="int" line="164"/>
                    </scope>
                </scope>
            </method>
            <method name="init" type="void" line="169">
                <params>
                    <param name="orig" type="BlockMatrix64F"/>
                </params>
                <declaration name="height" type="int" line="171"/>
            </method>
            <method name="inputModified" type="boolean" line="177"/>
        </class>
    </source>