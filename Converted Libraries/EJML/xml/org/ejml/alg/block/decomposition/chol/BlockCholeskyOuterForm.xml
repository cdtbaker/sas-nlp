<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block.decomposition.chol">
        <import package="org.ejml.alg.block.BlockInnerRankUpdate"/>
        <import package="org.ejml.alg.block.BlockMatrixOps"/>
        <import package="org.ejml.alg.block.BlockTriangularSolver"/>
        <import package="org.ejml.data.BlockMatrix64F"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.factory.CholeskyDecomposition"/>
        <class name="BlockCholeskyOuterForm" line="8">
            <implements interface="CholeskyDecomposition">
                <type_params>
                    <type_param name="BlockMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="8">
                &lt;p&gt;
                  Block Cholesky using outer product form.  The original matrix is stored and modified.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Based on the description provided in &quot;Fundamentals of Matrix Computations&quot; 2nd Ed. by David S. Watkins.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="lower" type="boolean" line="18"/>
            <declaration name="T" type="BlockMatrix64F" line="19"/>
            <javadoc line="20">
                Creates a new BlockCholeskyOuterForm                
                <param>
                    lower Should it decompose it into a lower triangular matrix or not.                    
                </param>
            </javadoc>
            <method name="BlockCholeskyOuterForm" type="constructor" line="24">
                <params>
                    <param name="lower" type="boolean"/>
                </params>
            </method>
            <javadoc line="27">
                Decomposes the provided matrix and stores the result in the same matrix.                
                <param>
                    A Matrix that is to be decomposed.  Modified.                    
                </param>
                <return>
                    If it succeeded or not.                    
                </return>
            </javadoc>
            <method name="decompose" type="boolean" line="32">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                </params>
            </method>
            <method name="decomposeLower" type="boolean" line="38">
                <declaration name="blockLength" type="int" line="39"/>
                <declaration name="subA" type="D1Submatrix64F" line="40"/>
                <declaration name="subB" type="D1Submatrix64F" line="41"/>
                <declaration name="subC" type="D1Submatrix64F" line="42"/>
                <scope line="43">
                    <declaration name="widthA" type="int" line="44"/>
                    <scope line="58"/>
                </scope>
            </method>
            <method name="decomposeUpper" type="boolean" line="66">
                <declaration name="blockLength" type="int" line="67"/>
                <declaration name="subA" type="D1Submatrix64F" line="68"/>
                <declaration name="subB" type="D1Submatrix64F" line="69"/>
                <declaration name="subC" type="D1Submatrix64F" line="70"/>
                <scope line="71">
                    <declaration name="widthA" type="int" line="72"/>
                    <scope line="86"/>
                </scope>
            </method>
            <method name="isLower" type="boolean" line="94"/>
            <method name="getT" type="BlockMatrix64F" line="97">
                <params>
                    <param name="T" type="BlockMatrix64F"/>
                </params>
            </method>
            <method name="inputModified" type="boolean" line="102"/>
        </class>
    </source>