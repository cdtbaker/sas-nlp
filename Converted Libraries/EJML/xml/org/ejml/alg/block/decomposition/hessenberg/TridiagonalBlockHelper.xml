<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block.decomposition.hessenberg">
        <import package="org.ejml.alg.block.BlockVectorOps"/>
        <import package="org.ejml.alg.block.decomposition.qr.BlockHouseHolder"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.alg.block.decomposition.qr.BlockHouseHolder.computeHouseHolderRow"/>
        <class name="TridiagonalBlockHelper" line="7">
            <javadoc line="7">
                @author Peter Abeles                
            </javadoc>
            <javadoc line="11">
                &lt;p&gt;
                  Performs a tridiagonal decomposition on the upper row only.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For each row &apos;a&apos; in &apos;A&apos;:
                  Compute &apos;u&apos; the householder reflector.
                  y(:) = Au
                  v(i) = y - (1/2)(y^Tu)u
                  a(i+1) = a(i) - u&amp;gamma;v^T - vu^t
                  &lt;/p&gt;                
                <param>
                    blockLength Size of a block                    
                </param>
                <param>
                    A is the row block being decomposed.  Modified.                    
                </param>
                <param>
                    gammas Householder gammas.                    
                </param>
                <param>
                    V Where computed 'v' are stored in a row block.  Modified.                    
                </param>
            </javadoc>
            <method name="tridiagUpperRow" type="void" line="27">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="gammas" type="double"/>
                    <param name="V" type="D1Submatrix64F"/>
                </params>
                <declaration name="blockHeight" type="int" line="28"/>
                <declaration name="width" type="int" line="30"/>
                <declaration name="num" type="int" line="31"/>
                <declaration name="applyIndex" type="int" line="32"/>
                <scope line="33">
                    <declaration name="gamma" type="double" line="35"/>
                    <scope line="38"/>
                </scope>
            </method>
            <javadoc line="43">
                &lt;p&gt;
                  Computes W from the householder reflectors stored in the columns of the row block
                  submatrix Y.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Y = v&lt;sup&gt;(1)&lt;/sup&gt;&lt;br&gt;
                  W = -&amp;beta;&lt;sub&gt;1&lt;/sub&gt;v&lt;sup&gt;(1)&lt;/sup&gt;&lt;br&gt;
                  for j=2:r&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;z = -&amp;beta;(I +WY&lt;sup&gt;T&lt;/sup&gt;)v&lt;sup&gt;(j)&lt;/sup&gt; &lt;br&gt;
                  &amp;nbsp;&amp;nbsp;W = [W z]&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;Y = [Y v&lt;sup&gt;(j)&lt;/sup&gt;]&lt;br&gt;
                  end&lt;br&gt;
                  &lt;br&gt;
                  where v&lt;sup&gt;(.)&lt;/sup&gt; are the house holder vectors, and r is the block length.  Note that
                  Y already contains the householder vectors so it does not need to be modified.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Y and W are assumed to have the same number of rows and columns.
                  &lt;/p&gt;                
            </javadoc>
            <method name="computeW_row" type="void" line="64">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="W" type="D1Submatrix64F"/>
                    <param name="beta" type="double"/>
                    <param name="betaIndex" type="int"/>
                </params>
                <declaration name="heightY" type="int" line="65"/>
                <declaration name="min" type="int" line="68"/>
                <scope line="69">
                    <declaration name="b" type="double" line="70"/>
                    <scope line="71">
                        <declaration name="yv" type="double" line="72"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="78">
                &lt;p&gt;
                  Given an already computed tridiagonal decomposition, compute the V row block vector.&lt;br&gt;
                  &lt;br&gt;
                  y(:) = Au&lt;br&gt;
                  v(i) = y - (1/2)&amp;gamma;(y^Tu)u
                  &lt;/p&gt;                
            </javadoc>
            <method name="computeV_blockVector" type="void" line="86">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="gammas" type="double"/>
                    <param name="V" type="D1Submatrix64F"/>
                </params>
                <declaration name="blockHeight" type="int" line="87"/>
                <declaration name="width" type="int" line="89"/>
                <declaration name="num" type="int" line="90"/>
                <scope line="91">
                    <declaration name="gamma" type="double" line="92"/>
                </scope>
            </method>
            <javadoc line="97">
                &lt;p&gt;
                  Applies the reflectors that have been computed previously to the specified row.
                  &lt;br&gt;
                  A = A + uv^T + vu^T only along the specified row in A.
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A Contains the reflectors and the row being updated.                    
                </param>
                <param>
                    V Contains previously computed 'v' vectors.                    
                </param>
                <param>
                    row The row of 'A' that is to be updated.                    
                </param>
            </javadoc>
            <method name="applyReflectorsToRow" type="void" line="108">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="V" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                </params>
                <declaration name="height" type="int" line="109"/>
                <declaration name="dataA" type="double" line="110"/>
                <declaration name="dataV" type="double" line="111"/>
                <declaration name="indexU" type="int" line="112"/>
                <scope line="113">
                    <declaration name="width" type="int" line="114"/>
                    <declaration name="u_row" type="double" line="117"/>
                    <declaration name="v_row" type="double" line="118"/>
                    <declaration name="before" type="double" line="119"/>
                </scope>
            </method>
            <javadoc line="126">
                &lt;p&gt;
                  Computes the &apos;y&apos; vector and stores the result in &apos;v&apos;&lt;br&gt;
                  &lt;br&gt;
                  y = -&amp;gamma;(A + UV^T + VU^T)u
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A Contains the reflectors and the row being updated.                    
                </param>
                <param>
                    V Contains previously computed 'v' vectors.                    
                </param>
                <param>
                    row The row of 'A' that is to be updated.                    
                </param>
            </javadoc>
            <method name="computeY" type="void" line="137">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="V" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <scope line="139">
                    <declaration name="dot_v_u" type="double" line="140"/>
                    <declaration name="dot_u_u" type="double" line="141"/>
                </scope>
            </method>
            <javadoc line="147">
                &lt;p&gt;
                  Multiples the appropriate submatrix of A by the specified reflector and stores
                  the result (&apos;y&apos;) in V.&lt;br&gt;
                  &lt;br&gt;
                  y = Au&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A Contains the 'A' matrix and 'u' vector.                    
                </param>
                <param>
                    V Where resulting 'y' row vectors are stored.                    
                </param>
                <param>
                    row row in matrix 'A' that 'u' vector and the row in 'V' that 'y' is stored in.                    
                </param>
            </javadoc>
            <method name="multA_u" type="void" line="159">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="V" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                </params>
                <declaration name="heightMatA" type="int" line="160"/>
                <scope line="161">
                    <declaration name="val" type="double" line="162"/>
                </scope>
            </method>
            <method name="innerProdRowSymm" type="double" line="166">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="rowA" type="int"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="rowB" type="int"/>
                    <param name="zeroOffset" type="int"/>
                </params>
                <declaration name="offset" type="int" line="167"/>
                <scope line="169">
                    <declaration name="total" type="double" line="170"/>
                </scope>
                <scope line="175">
                    <declaration name="total" type="double" line="176"/>
                </scope>
            </method>
            <javadoc line="181">
                &lt;p&gt;
                  Final computation for a single row of &apos;v&apos;:&lt;br&gt;
                  &lt;br&gt;
                  v = y -(1/2)&amp;gamma;(y^Tu)u
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A                    
                </param>
                <param>
                    V                    
                </param>
                <param>
                    row                    
                </param>
                <param>
                    gamma                    
                </param>
            </javadoc>
            <method name="computeRowOfV" type="void" line="193">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="V" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <declaration name="val" type="double" line="194"/>
                <declaration name="before" type="double" line="195"/>
            </method>
        </class>
    </source>