<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block.decomposition.hessenberg">
        <import package="org.ejml.alg.block.BlockVectorOps"/>
        <import package="org.ejml.alg.block.decomposition.qr.BlockHouseHolder"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.alg.block.decomposition.qr.BlockHouseHolder.computeHouseHolderRow"/>
        <class name="TridiagonalBlockHelper" line="29">
            <javadoc line="29">
                @author Peter Abeles                
            </javadoc>
            <javadoc line="34">
                &lt;p&gt;
                  Performs a tridiagonal decomposition on the upper row only.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For each row &apos;a&apos; in &apos;A&apos;:
                  Compute &apos;u&apos; the householder reflector.
                  y(:) = Au
                  v(i) = y - (1/2)(y^Tu)u
                  a(i+1) = a(i) - u&amp;gamma;v^T - vu^t
                  &lt;/p&gt;                
                <param>
                    blockLength Size of a block                    
                </param>
                <param>
                    A is the row block being decomposed.  Modified.                    
                </param>
                <param>
                    gammas Householder gammas.                    
                </param>
                <param>
                    V Where computed 'v' are stored in a row block.  Modified.                    
                </param>
            </javadoc>
            <method name="tridiagUpperRow" type="void" line="56">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="gammas" type="double"/>
                    <param name="V" type="D1Submatrix64F"/>
                </params>
                <comment line="64">
                    step through rows in the block                    
                </comment>
                <comment line="66">
                    compute the new reflector and save it in a row in &apos;A&apos;                    
                </comment>
                <comment line="70">
                    compute y                    
                </comment>
                <comment line="73">
                    compute v from y                    
                </comment>
                <comment line="76">
                    Apply the reflectors to the next row in &apos;A&apos; only                    
                </comment>
                <declaration name="blockHeight" type="int" line="57"/>
                <declaration name="width" type="int" line="60"/>
                <declaration name="num" type="int" line="61"/>
                <declaration name="applyIndex" type="int" line="62"/>
                <scope line="65">
                    <declaration name="gamma" type="double" line="68"/>
                    <scope line="77"/>
                </scope>
            </method>
            <javadoc line="83">
                &lt;p&gt;
                  Computes W from the householder reflectors stored in the columns of the row block
                  submatrix Y.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Y = v&lt;sup&gt;(1)&lt;/sup&gt;&lt;br&gt;
                  W = -&amp;beta;&lt;sub&gt;1&lt;/sub&gt;v&lt;sup&gt;(1)&lt;/sup&gt;&lt;br&gt;
                  for j=2:r&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;z = -&amp;beta;(I +WY&lt;sup&gt;T&lt;/sup&gt;)v&lt;sup&gt;(j)&lt;/sup&gt; &lt;br&gt;
                  &amp;nbsp;&amp;nbsp;W = [W z]&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;Y = [Y v&lt;sup&gt;(j)&lt;/sup&gt;]&lt;br&gt;
                  end&lt;br&gt;
                  &lt;br&gt;
                  where v&lt;sup&gt;(.)&lt;/sup&gt; are the house holder vectors, and r is the block length.  Note that
                  Y already contains the householder vectors so it does not need to be modified.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Y and W are assumed to have the same number of rows and columns.
                  &lt;/p&gt;                
            </javadoc>
            <method name="computeW_row" type="void" line="108">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="Y" type="D1Submatrix64F"/>
                    <param name="W" type="D1Submatrix64F"/>
                    <param name="beta" type="double"/>
                    <param name="betaIndex" type="int"/>
                </params>
                <comment line="113">
                    W = -beta*v(1)                    
                </comment>
                <comment line="118">
                    set up rest of the rows                    
                </comment>
                <comment line="120">
                    w=-beta*(I + W*Y^T)*u                    
                </comment>
                <comment line="123">
                    w = w -beta*W*(Y^T*u)                    
                </comment>
                <comment line="129">
                    w=w -beta*u + stuff above                    
                </comment>
                <declaration name="heightY" type="int" line="110"/>
                <declaration name="min" type="int" line="116"/>
                <scope line="119">
                    <declaration name="b" type="double" line="121"/>
                    <scope line="124">
                        <declaration name="yv" type="double" line="125"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="135">
                &lt;p&gt;
                  Given an already computed tridiagonal decomposition, compute the V row block vector.&lt;br&gt;
                  &lt;br&gt;
                  y(:) = Au&lt;br&gt;
                  v(i) = y - (1/2)&amp;gamma;(y^Tu)u
                  &lt;/p&gt;                
            </javadoc>
            <method name="computeV_blockVector" type="void" line="147">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="gammas" type="double"/>
                    <param name="V" type="D1Submatrix64F"/>
                </params>
                <comment line="157">
                    compute y                    
                </comment>
                <comment line="160">
                    compute v from y                    
                </comment>
                <declaration name="blockHeight" type="int" line="148"/>
                <declaration name="width" type="int" line="151"/>
                <declaration name="num" type="int" line="152"/>
                <scope line="154">
                    <declaration name="gamma" type="double" line="155"/>
                </scope>
            </method>
            <javadoc line="165">
                &lt;p&gt;
                  Applies the reflectors that have been computed previously to the specified row.
                  &lt;br&gt;
                  A = A + uv^T + vu^T only along the specified row in A.
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A Contains the reflectors and the row being updated.                    
                </param>
                <param>
                    V Contains previously computed 'v' vectors.                    
                </param>
                <param>
                    row The row of 'A' that is to be updated.                    
                </param>
            </javadoc>
            <method name="applyReflectorsToRow" type="void" line="181">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="V" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                </params>
                <comment line="189">
                    for each previously computed reflector                    
                </comment>
                <comment line="199">
                    take in account the leading one                    
                </comment>
                <comment line="203">
                    grab only the relevant row from A = A + u*v^T + v*u^T                    
                </comment>
                <declaration name="height" type="int" line="182"/>
                <declaration name="dataA" type="double" line="184"/>
                <declaration name="dataV" type="double" line="185"/>
                <declaration name="indexU" type="int" line="187"/>
                <scope line="190">
                    <declaration name="width" type="int" line="191"/>
                    <declaration name="u_row" type="double" line="196"/>
                    <declaration name="v_row" type="double" line="197"/>
                    <declaration name="before" type="double" line="200"/>
                </scope>
            </method>
            <javadoc line="211">
                &lt;p&gt;
                  Computes the &apos;y&apos; vector and stores the result in &apos;v&apos;&lt;br&gt;
                  &lt;br&gt;
                  y = -&amp;gamma;(A + UV^T + VU^T)u
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A Contains the reflectors and the row being updated.                    
                </param>
                <param>
                    V Contains previously computed 'v' vectors.                    
                </param>
                <param>
                    row The row of 'A' that is to be updated.                    
                </param>
            </javadoc>
            <method name="computeY" type="void" line="228">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="V" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <comment line="229">
                    Elements in &apos;y&apos; before &apos;row&apos; are known to be zero and the element at &apos;row&apos;                    
                </comment>
                <comment line="230">
                    is not used. Thus only elements after row and after are computed.                    
                </comment>
                <comment line="231">
                    y = A*u                    
                </comment>
                <comment line="235">
                    y = y + u_i*v_i^t*u + v_i*u_i^t*u                    
                </comment>
                <comment line="237">
                    v_i^t*u                    
                </comment>
                <comment line="240">
                    u_i^t*u                    
                </comment>
                <comment line="243">
                    y = y + u_i*(v_i^t*u)                    
                </comment>
                <comment line="244">
                    the ones in these &apos;u&apos; are skipped over since the next submatrix of A                    
                </comment>
                <comment line="245">
                    is only updated                    
                </comment>
                <comment line="248">
                    y = y + v_i*(u_i^t*u)                    
                </comment>
                <comment line="249">
                    the 1 in U is taken account above                    
                </comment>
                <comment line="253">
                    y = -gamma*y                    
                </comment>
                <scope line="234">
                    <declaration name="dot_v_u" type="double" line="238"/>
                    <declaration name="dot_u_u" type="double" line="241"/>
                </scope>
            </method>
            <javadoc line="257">
                &lt;p&gt;
                  Multiples the appropriate submatrix of A by the specified reflector and stores
                  the result (&apos;y&apos;) in V.&lt;br&gt;
                  &lt;br&gt;
                  y = Au&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A Contains the 'A' matrix and 'u' vector.                    
                </param>
                <param>
                    V Where resulting 'y' row vectors are stored.                    
                </param>
                <param>
                    row row in matrix 'A' that 'u' vector and the row in 'V' that 'y' is stored in.                    
                </param>
            </javadoc>
            <method name="multA_u" type="void" line="274">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="V" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                </params>
                <declaration name="heightMatA" type="int" line="275"/>
                <scope line="277">
                    <declaration name="val" type="double" line="279"/>
                </scope>
            </method>
            <method name="innerProdRowSymm" type="double" line="289">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="rowA" type="int"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="rowB" type="int"/>
                    <param name="zeroOffset" type="int"/>
                </params>
                <comment line="295">
                    take in account the one in &apos;A&apos;                    
                </comment>
                <comment line="303">
                    take in account the one in &apos;A&apos;                    
                </comment>
                <declaration name="offset" type="int" line="290"/>
                <scope line="294">
                    <declaration name="total" type="double" line="296"/>
                </scope>
                <scope line="302">
                    <declaration name="total" type="double" line="304"/>
                </scope>
            </method>
            <javadoc line="312">
                &lt;p&gt;
                  Final computation for a single row of &apos;v&apos;:&lt;br&gt;
                  &lt;br&gt;
                  v = y -(1/2)&amp;gamma;(y^Tu)u
                  &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    A                    
                </param>
                <param>
                    V                    
                </param>
                <param>
                    row                    
                </param>
                <param>
                    gamma                    
                </param>
            </javadoc>
            <method name="computeRowOfV" type="void" line="330">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="A" type="D1Submatrix64F"/>
                    <param name="V" type="D1Submatrix64F"/>
                    <param name="row" type="int"/>
                    <param name="gamma" type="double"/>
                </params>
                <comment line="331">
                    val=(y^T*u)                    
                </comment>
                <comment line="334">
                    take in account the one                    
                </comment>
                <comment line="338">
                    v = y - (1/2)gamma*val * u                    
                </comment>
                <declaration name="val" type="double" line="332"/>
                <declaration name="before" type="double" line="335"/>
            </method>
        </class>
    </source>