<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block.linsol.qr">
        <import package="org.ejml.alg.block.BlockMatrixOps"/>
        <import package="org.ejml.alg.block.BlockTriangularSolver"/>
        <import package="org.ejml.alg.block.decomposition.qr.BlockMatrix64HouseholderQR"/>
        <import package="org.ejml.data.BlockMatrix64F"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <class name="BlockQrHouseHolderSolver" line="9">
            <implements interface="LinearSolver">
                <type_params>
                    <type_param name="BlockMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="9">
                &lt;p&gt;
                  A solver for {@link BlockMatrix64HouseholderQR}.  Systems are solved for using the standard
                  QR decomposition method, sketched below.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A = QR&lt;br&gt;
                  Ax = b&lt;br&gt;
                  QRx = b &lt;br&gt;
                  Rx = y = Q&lt;sup&gt;T&lt;/sup&gt;b&lt;br&gt;
                  x = R&lt;sup&gt;-1&lt;/sup&gt;y&lt;br&gt;
                  &lt;br&gt;
                  Where A is the m by n matrix being decomposed. Q is an orthogonal matrix. R is upper triangular matrix.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <declaration name="decomp" type="BlockMatrix64HouseholderQR" line="26"/>
            <declaration name="QR" type="BlockMatrix64F" line="27"/>
            <method name="BlockQrHouseHolderSolver" type="constructor" line="28"/>
            <javadoc line="31">
                Computes the QR decomposition of A and store the results in A.                
                <param>
                    A The A matrix in the linear equation. Modified. Reference saved.                    
                </param>
                <return>
                    true if the decomposition was successful.                    
                </return>
            </javadoc>
            <method name="setA" type="boolean" line="36">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                </params>
            </method>
            <javadoc line="42">
                Computes the quality using diagonal elements the triangular R matrix in the QR decomposition.                
                <return>
                    Solutions quality.                    
                </return>
            </javadoc>
            <method name="quality" type="double" line="46"/>
            <method name="solve" type="void" line="49">
                <params>
                    <param name="B" type="BlockMatrix64F"/>
                    <param name="X" type="BlockMatrix64F"/>
                </params>
                <declaration name="M" type="int" line="56"/>
            </method>
            <javadoc line="59">
                Invert by solving for against an identity matrix.                
                <param>
                    A_inv Where the inverted matrix saved. Modified.                    
                </param>
            </javadoc>
            <method name="invert" type="void" line="63">
                <params>
                    <param name="A_inv" type="BlockMatrix64F"/>
                </params>
                <declaration name="M" type="int" line="64"/>
            </method>
            <method name="modifiesA" type="boolean" line="70"/>
            <method name="modifiesB" type="boolean" line="73"/>
        </class>
    </source>