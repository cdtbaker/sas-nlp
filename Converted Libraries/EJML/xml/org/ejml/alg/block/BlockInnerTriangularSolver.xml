<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block">
        <class name="BlockInnerTriangularSolver" line="21">
            <javadoc line="21">
                &lt;p&gt;
                  Contains triangular solvers for inner blocks of a {@link org.ejml.data.BlockMatrix64F}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Algorithm for lower triangular inverse:&lt;br&gt;
                  &lt;pre&gt;
                  for i=1:m
                  for j=1:i-1
                  val = 0
                  for k=j:i-1
                  val = val - L(i,k)  X(k,j)
                  end
                  x(i,j) = val / L(i,i)
                  end
                  x(i,i) = 1 / L(i,i)
                  end
                  &lt;/pre&gt; 
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="47">
                &lt;p&gt;
                  Inverts a square lower triangular matrix:  L = L&lt;sup&gt;-1&lt;/sup&gt;
                  &lt;/p&gt;                
                <param>
                    L Lower triangular matrix being inverted. Not modified.                    
                </param>
                <oaran>
                    K_inv Where the inverse is stored.  Can be the same as L.  Modified.                    
                </oaran>
                <param>
                    m The number of rows and columns.                    
                </param>
                <param>
                    offsetL which index does the L matrix start at.                    
                </param>
                <param>
                    offsetL_inv which index does the L_inv matrix start at.                    
                </param>
            </javadoc>
            <method name="invertLower" type="void" line="64">
                <params>
                    <param name="L" type="double"/>
                    <param name="L_inv" type="double"/>
                    <param name="m" type="int"/>
                    <param name="offsetL" type="int"/>
                    <param name="offsetL_inv" type="int"/>
                </params>
                <scope line="65">
                    <declaration name="L_ii" type="double" line="66"/>
                    <scope line="67">
                        <declaration name="val" type="double" line="68"/>
                        <scope line="69"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="78">
                &lt;p&gt;
                  Inverts a square lower triangular matrix:  L = L&lt;sup&gt;-1&lt;/sup&gt;
                  &lt;/p&gt;                
                <param>
                    L Lower triangular matrix being inverted. Over written with inverted matrix.  Modified.                    
                </param>
                <param>
                    m The number of rows and columns.                    
                </param>
                <param>
                    offsetL which index does the L matrix start at.                    
                </param>
            </javadoc>
            <method name="invertLower" type="void" line="91">
                <params>
                    <param name="L" type="double"/>
                    <param name="m" type="int"/>
                    <param name="offsetL" type="int"/>
                </params>
                <scope line="92">
                    <declaration name="L_ii" type="double" line="93"/>
                    <scope line="94">
                        <declaration name="val" type="double" line="95"/>
                        <scope line="96"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="105">
                &lt;p&gt;
                  Solves for non-singular lower triangular matrices using forward substitution.
                  &lt;br&gt;
                  B = L&lt;sup&gt;-1&lt;/sup&gt;B&lt;br&gt;
                  &lt;br&gt;
                  where B is a (m by n) matrix, L is a lower triangular (m by m) matrix.
                  &lt;/p&gt;                
                <param>
                    L An m by m non-singular lower triangular matrix. Not modified.                    
                </param>
                <param>
                    b An m by n matrix. Modified.                    
                </param>
                <param>
                    m size of the L matrix                    
                </param>
                <param>
                    n number of columns in the B matrix.                    
                </param>
                <param>
                    strideL number of elements that need to be added to go to the next row in L                    
                </param>
                <param>
                    offsetL initial index in L where the matrix starts                    
                </param>
                <param>
                    offsetB initial index in B where the matrix starts                    
                </param>
            </javadoc>
            <method name="solveL" type="void" line="125">
                <params>
                    <param name="L" type="double"/>
                    <param name="b" type="double[]"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="strideL" type="int"/>
                    <param name="offsetL" type="int"/>
                    <param name="offsetB" type="int"/>
                </params>
                <scope line="126">
                    <scope line="127">
                        <declaration name="sum" type="double" line="128"/>
                        <scope line="129"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="137">
                &lt;p&gt;
                  Solves for non-singular transposed lower triangular matrices using backwards substitution:
                  &lt;br&gt;
                  B = L&lt;sup&gt;-T&lt;/sup&gt;B&lt;br&gt;
                  &lt;br&gt;
                  where B is a (m by n) matrix, L is a lower triangular (m by m) matrix.
                  &lt;/p&gt;                
                <param>
                    L An m by m non-singular lower triangular matrix. Not modified.                    
                </param>
                <param>
                    b An m by n matrix. Modified.                    
                </param>
                <param>
                    m size of the L matrix                    
                </param>
                <param>
                    n number of columns in the B matrix.                    
                </param>
                <param>
                    strideL number of elements that need to be added to go to the next row in L                    
                </param>
                <param>
                    offsetL initial index in L where the matrix starts                    
                </param>
                <param>
                    offsetB initial index in B where the matrix starts                    
                </param>
            </javadoc>
            <method name="solveTransL" type="void" line="157">
                <params>
                    <param name="L" type="double"/>
                    <param name="b" type="double[]"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="strideL" type="int"/>
                    <param name="offsetL" type="int"/>
                    <param name="offsetB" type="int"/>
                </params>
                <scope line="158">
                    <scope line="159">
                        <declaration name="sum" type="double" line="160"/>
                        <scope line="161"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="169">
                &lt;p&gt;
                  Solves for non-singular lower triangular matrices using forward substitution.
                  &lt;br&gt;
                  B&lt;sup&gt;T&lt;/sup&gt; = L&lt;sup&gt;-1&lt;/sup&gt;B&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  &lt;br&gt;
                  where B is a (n by m) matrix, L is a lower triangular (m by m) matrix.
                  &lt;/p&gt;                
                <param>
                    L An m by m non-singular lower triangular matrix. Not modified.                    
                </param>
                <param>
                    b An n by m matrix. Modified.                    
                </param>
                <param>
                    m size of the L matrix                    
                </param>
                <param>
                    n number of columns in the B matrix.                    
                </param>
                <param>
                    offsetL initial index in L where the matrix starts                    
                </param>
                <param>
                    offsetB initial index in B where the matrix starts                    
                </param>
            </javadoc>
            <method name="solveLTransB" type="void" line="188">
                <params>
                    <param name="L" type="double"/>
                    <param name="b" type="double[]"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="strideL" type="int"/>
                    <param name="offsetL" type="int"/>
                    <param name="offsetB" type="int"/>
                </params>
                <comment line="190">
                    for( int j = 0; j &lt; n; j++ ) {
                                for( int i = 0; i &lt; m; i++ ) {
                                    double sum = b[offsetB + j*m+i];
                                    for( int k=0; k&lt;i; k++ ) {
                                        sum -= L[offsetL + i*m+k]* b[offsetB + j*m+k];
                                    }
                                    b[offsetB + j*m+i] = sum / L[offsetL + i*m+i];
                                }
                            }                    
                </comment>
                <comment line="206">
                    for( int k=0; k&lt;i; k++ ) {                    
                </comment>
                <scope line="198">
                    <scope line="199">
                        <declaration name="sum" type="double" line="200"/>
                        <declaration name="l" type="int" line="201"/>
                        <declaration name="bb" type="int" line="202"/>
                        <declaration name="endL" type="int" line="203"/>
                        <scope line="204"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="213">
                &lt;p&gt;
                  Solves for non-singular upper triangular matrices using backwards substitution.
                  &lt;br&gt;
                  B = U&lt;sup&gt;-1&lt;/sup&gt;B&lt;br&gt;
                  &lt;br&gt;
                  where B (m by n) is a matrix, U is a (m by m ) upper triangular matrix.&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    U An m by m non-singular upper triangular matrix. Not modified.                    
                </param>
                <param>
                    b An m by n matrix. Modified.                    
                </param>
                <param>
                    m size of the L matrix                    
                </param>
                <paramUn>
                    number of columns in the B matrix.                    
                </paramUn>
                <param>
                    offsetU initial index in L where the matrix starts                    
                </param>
                <param>
                    offsetB initial index in B where the matrix starts                    
                </param>
            </javadoc>
            <method name="solveU" type="void" line="232">
                <params>
                    <param name="U" type="double"/>
                    <param name="b" type="double[]"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="strideU" type="int"/>
                    <param name="offsetU" type="int"/>
                    <param name="offsetB" type="int"/>
                </params>
                <scope line="233">
                    <scope line="234">
                        <declaration name="sum" type="double" line="235"/>
                        <scope line="236"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="244">
                &lt;p&gt;
                  Solves for non-singular upper triangular matrices using forward substitution.
                  &lt;br&gt;
                  B = U&lt;sup&gt;-T&lt;/sup&gt;B&lt;br&gt;
                  &lt;br&gt;
                  where B (m by n) is a matrix, U is a (m by m ) upper triangular matrix.&lt;br&gt;
                  &lt;/p&gt;                
                <param>
                    U An m by m non-singular upper triangular matrix. Not modified.                    
                </param>
                <param>
                    b An m by n matrix. Modified.                    
                </param>
                <param>
                    m size of the L matrix                    
                </param>
                <paramUn>
                    number of columns in the B matrix.                    
                </paramUn>
                <param>
                    offsetU initial index in L where the matrix starts                    
                </param>
                <param>
                    offsetB initial index in B where the matrix starts                    
                </param>
            </javadoc>
            <method name="solveTransU" type="void" line="263">
                <params>
                    <param name="U" type="double"/>
                    <param name="b" type="double[]"/>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="strideU" type="int"/>
                    <param name="offsetU" type="int"/>
                    <param name="offsetB" type="int"/>
                </params>
                <scope line="264">
                    <scope line="265">
                        <declaration name="sum" type="double" line="266"/>
                        <scope line="267"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>