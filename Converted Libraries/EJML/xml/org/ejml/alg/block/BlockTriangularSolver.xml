<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block">
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.alg.block.BlockInnerMultiplication.blockMultMinus"/>
        <class name="BlockTriangularSolver" line="26">
            <javadoc line="26">
                &lt;p&gt;
                  Contains triangular solvers for {@link org.ejml.data.BlockMatrix64F} block aligned sub-matrices.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For a more detailed description of a similar algorithm see:
                  Page 30 in &quot;Fundamentals of Matrix Computations&quot; 2nd Ed. by David S. Watkins
                  or any description of a block triangular solver in any other computational linear algebra book.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="41">
                Inverts an upper or lower triangular block submatrix.                
                <param>
                    blockLength                    
                </param>
                <param>
                    upper Is it upper or lower triangular.                    
                </param>
                <param>
                    T Triangular matrix that is to be inverted.  Must be block aligned.  Not Modified.                    
                </param>
                <param>
                    T_inv Where the inverse is stored.  This can be the same as T.  Modified.                    
                </param>
                <param>
                    temp Work space variable that is size blockLengthblockLength.                    
                </param>
            </javadoc>
            <method name="invert" type="void" line="55">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="upper" type="boolean"/>
                    <param name="T" type="D1Submatrix64F"/>
                    <param name="T_inv" type="D1Submatrix64F"/>
                    <param name="temp" type="double"/>
                </params>
                <declaration name="M" type="int" line="65"/>
                <declaration name="dataT" type="double" line="67"/>
                <declaration name="dataX" type="double" line="68"/>
                <declaration name="offsetT" type="int" line="70"/>
                <scope line="72">
                    <declaration name="heightT" type="int" line="73"/>
                    <declaration name="indexII" type="int" line="75"/>
                    <scope line="77">
                        <declaration name="widthX" type="int" line="78"/>
                        <scope line="80"/>
                        <scope line="84">
                            <declaration name="widthT" type="int" line="85"/>
                            <declaration name="indexL" type="int" line="87"/>
                            <declaration name="indexX" type="int" line="88"/>
                        </scope>
                        <declaration name="indexX" type="int" line="93"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="102">
                Inverts an upper or lower triangular block submatrix.                
                <param>
                    blockLength                    
                </param>
                <param>
                    upper Is it upper or lower triangular.                    
                </param>
                <param>
                    T Triangular matrix that is to be inverted.  Overwritten with solution.  Modified.                    
                </param>
                <param>
                    temp Work space variable that is size blockLengthblockLength.                    
                </param>
            </javadoc>
            <method name="invert" type="void" line="114">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="upper" type="boolean"/>
                    <param name="T" type="D1Submatrix64F"/>
                    <param name="temp" type="double"/>
                </params>
                <declaration name="M" type="int" line="121"/>
                <declaration name="dataT" type="double" line="123"/>
                <declaration name="offsetT" type="int" line="124"/>
                <scope line="126">
                    <declaration name="heightT" type="int" line="127"/>
                    <declaration name="indexII" type="int" line="129"/>
                    <scope line="131">
                        <declaration name="widthX" type="int" line="132"/>
                        <scope line="134"/>
                        <scope line="138">
                            <declaration name="widthT" type="int" line="139"/>
                            <declaration name="indexL" type="int" line="141"/>
                            <declaration name="indexX" type="int" line="142"/>
                        </scope>
                        <declaration name="indexX" type="int" line="147"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="157">
                &lt;p&gt;
                  Performs an in-place solve operation on the provided block aligned sub-matrices.&lt;br&gt;
                  &lt;br&gt;
                  B = T&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
                  &lt;br&gt;
                  where T is a triangular matrix. T or B can be transposed.  T is a square matrix of arbitrary
                  size and B has the same number of rows as T and an arbitrary number of columns.
                  &lt;/p&gt;                
                <param>
                    blockLength Size of the inner blocks.                    
                </param>
                <param>
                    upper If T is upper or lower triangular.                    
                </param>
                <param>
                    T An upper or lower triangular matrix. Not modified.                    
                </param>
                <param>
                    B A matrix whose height is the same as T&apos;s width. Solution is written here. Modified.                    
                </param>
            </javadoc>
            <method name="solve" type="void" line="176">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="upper" type="boolean"/>
                    <param name="T" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="transT" type="boolean"/>
                </params>
                <scope line="178"/>
                <scope line="180"/>
            </method>
            <javadoc line="186">
                &lt;p&gt;
                  Performs an in-place solve operation where T is contained in a single block.&lt;br&gt;
                  &lt;br&gt;
                  B = T&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
                  &lt;br&gt;
                  where T is a triangular matrix contained in an inner block. T or B can be transposed.  T must be a single complete inner block
                  and B is either a column block vector or row block vector.
                  &lt;/p&gt;                
                <param>
                    blockLength Size of the inner blocks in the block matrix.                    
                </param>
                <param>
                    upper If T is upper or lower triangular.                    
                </param>
                <param>
                    T An upper or lower triangular matrix that is contained in an inner block. Not modified.                    
                </param>
                <param>
                    B A block aligned row or column submatrix. Modified.                    
                </param>
                <param>
                    transT If T is transposed or not.                    
                </param>
                <param>
                    transB If B is transposed or not.                    
                </param>
            </javadoc>
            <method name="solveBlock" type="void" line="207">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="upper" type="boolean"/>
                    <param name="T" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="transT" type="boolean"/>
                    <param name="transB" type="boolean"/>
                </params>
                <comment line="212">
                    number of rows in a block.  The submatrix can be smaller than a block                    
                </comment>
                <declaration name="Trows" type="int" line="208"/>
                <declaration name="blockT_rows" type="int" line="212"/>
                <declaration name="blockT_cols" type="int" line="213"/>
                <declaration name="offsetT" type="int" line="215"/>
                <declaration name="dataT" type="double" line="217"/>
                <declaration name="dataB" type="double" line="218"/>
                <scope line="220">
                    <scope line="221">
                        <scope line="222"/>
                        <scope line="224"/>
                    </scope>
                    <scope line="227">
                        <scope line="228"/>
                        <scope line="230">
                            <scope line="231">
                                <declaration name="N" type="int" line="232"/>
                                <declaration name="offsetB" type="int" line="234"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="240">
                    <scope line="244">
                        <scope line="245">
                            <scope line="246">
                                <declaration name="offsetB" type="int" line="247"/>
                                <declaration name="N" type="int" line="249"/>
                            </scope>
                        </scope>
                        <scope line="252">
                            <scope line="253">
                                <declaration name="offsetB" type="int" line="254"/>
                                <declaration name="N" type="int" line="256"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="260">
                        <scope line="261">
                            <scope line="262">
                                <declaration name="offsetB" type="int" line="263"/>
                                <declaration name="N" type="int" line="265"/>
                            </scope>
                        </scope>
                        <scope line="268">
                            <scope line="269">
                                <declaration name="offsetB" type="int" line="270"/>
                                <declaration name="N" type="int" line="272"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="280">
                &lt;p&gt;
                  Solves lower triangular systems:&lt;br&gt;
                  &lt;br&gt;
                  B = L&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
                  &lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt; Reverse or forward substitution is used depending upon L being transposed or not. &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    L Lower triangular with dimensions m by m.  Not modified.                    
                </param>
                <param>
                    B A matrix with dimensions m by n.  Solution is written into here. Modified.                    
                </param>
                <param>
                    transL Is the triangular matrix transposed?                    
                </param>
            </javadoc>
            <method name="solveL" type="void" line="298">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="L" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="transL" type="boolean"/>
                </params>
                <comment line="328">
                    width and height of the inner T(i,i) block                    
                </comment>
                <comment line="337">
                    solve the top row block
                     B(i,:) = T(i,i)^-1 Y(i,:)                    
                </comment>
                <comment line="348">
                    Y[i,:] = Y[i,:] - sum j=1:i-1 { T[i,j] B[j,i] }
                     where i is the next block down
                     The summation is a block inner product                    
                </comment>
                <comment line="355">
                    Tinner.col1 = Tinner.col1;                    
                </comment>
                <comment line="357">
                    Binner.row0 = Binner.row0;                    
                </comment>
                <comment line="366">
                    Tinner.col1 = Tinner.col1;                    
                </comment>
                <comment line="369">
                    Binner.row1 = Binner.row1;                    
                </comment>
                <comment line="375">
                    step through each block column                    
                </comment>
                <comment line="385">
                    Y = Y - T^T * B                    
                </comment>
                <comment line="389">
                    Y = Y - T * B                    
                </comment>
                <declaration name="Y" type="D1Submatrix64F" line="300"/>
                <declaration name="Linner" type="D1Submatrix64F" line="302"/>
                <declaration name="Binner" type="D1Submatrix64F" line="303"/>
                <declaration name="lengthL" type="int" line="305"/>
                <declaration name="startI" type="int" line="307"/>
                <scope line="309"/>
                <scope line="315"/>
                <scope line="320">
                    <scope line="321"/>
                    <scope line="323"/>
                    <declaration name="widthT" type="int" line="328"/>
                    <declaration name="updateY" type="boolean" line="340"/>
                    <scope line="341"/>
                    <scope line="343"/>
                    <scope line="346">
                        <scope line="350"/>
                        <scope line="361"/>
                        <scope line="375">
                            <scope line="383"/>
                            <scope line="386"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="396">
                &lt;p&gt;
                  Solves upper triangular systems:&lt;br&gt;
                  &lt;br&gt;
                  B = R&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
                  &lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;Only the first B.numRows rows in R will be processed.  Lower triangular elements are ignored.&lt;p&gt;
                  &lt;p&gt; Reverse or forward substitution is used depending upon L being transposed or not. &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    R Upper triangular with dimensions m by m.  Not modified.                    
                </param>
                <param>
                    B A matrix with dimensions m by n.  Solution is written into here. Modified.                    
                </param>
                <param>
                    transR Is the triangular matrix transposed?                    
                </param>
            </javadoc>
            <method name="solveR" type="void" line="416">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="R" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="transR" type="boolean"/>
                </params>
                <comment line="451">
                    width and height of the inner T(i,i) block                    
                </comment>
                <comment line="460">
                    solve the top row block
                     B(i,:) = T(i,i)^-1 Y(i,:)                    
                </comment>
                <comment line="471">
                    Y[i,:] = Y[i,:] - sum j=1:i-1 { T[i,j] B[j,i] }
                     where i is the next block down
                     The summation is a block inner product                    
                </comment>
                <comment line="478">
                    Rinner.row1 = Rinner.row1;                    
                </comment>
                <comment line="481">
                    Binner.row1 = Binner.row1;                    
                </comment>
                <comment line="490">
                    Binner.row0 = Binner.row0;                    
                </comment>
                <comment line="497">
                    step through each block column                    
                </comment>
                <comment line="507">
                    Y = Y - T^T * B                    
                </comment>
                <comment line="510">
                    Y = Y - T * B                    
                </comment>
                <declaration name="lengthR" type="int" line="418"/>
                <scope line="419"/>
                <scope line="421"/>
                <declaration name="Y" type="D1Submatrix64F" line="425"/>
                <declaration name="Rinner" type="D1Submatrix64F" line="427"/>
                <declaration name="Binner" type="D1Submatrix64F" line="428"/>
                <declaration name="startI" type="int" line="430"/>
                <scope line="432"/>
                <scope line="435"/>
                <scope line="443">
                    <scope line="444"/>
                    <scope line="446"/>
                    <declaration name="widthT" type="int" line="451"/>
                    <declaration name="updateY" type="boolean" line="463"/>
                    <scope line="464"/>
                    <scope line="466"/>
                    <scope line="469">
                        <scope line="473"/>
                        <scope line="484"/>
                        <scope line="497">
                            <scope line="505"/>
                            <scope line="508"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>