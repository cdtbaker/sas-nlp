<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block">
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.alg.block.BlockInnerMultiplication.blockMultMinus"/>
        <class name="BlockTriangularSolver" line="4">
            <javadoc line="4">
                &lt;p&gt;
                  Contains triangular solvers for {@link org.ejml.data.BlockMatrix64F} block aligned sub-matrices.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For a more detailed description of a similar algorithm see:
                  Page 30 in &quot;Fundamentals of Matrix Computations&quot; 2nd Ed. by David S. Watkins
                  or any description of a block triangular solver in any other computational linear algebra book.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <javadoc line="16">
                Inverts an upper or lower triangular block submatrix.                
                <param>
                    blockLength                    
                </param>
                <param>
                    upper Is it upper or lower triangular.                    
                </param>
                <param>
                    T Triangular matrix that is to be inverted.  Must be block aligned.  Not Modified.                    
                </param>
                <param>
                    T_inv Where the inverse is stored.  This can be the same as T.  Modified.                    
                </param>
                <param>
                    temp Work space variable that is size blockLengthblockLength.                    
                </param>
            </javadoc>
            <method name="invert" type="void" line="24">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="upper" type="boolean"/>
                    <param name="T" type="D1Submatrix64F"/>
                    <param name="T_inv" type="D1Submatrix64F"/>
                    <param name="temp" type="double"/>
                </params>
                <declaration name="M" type="int" line="28"/>
                <declaration name="dataT" type="double" line="29"/>
                <declaration name="dataX" type="double" line="30"/>
                <declaration name="offsetT" type="int" line="31"/>
                <scope line="32">
                    <declaration name="heightT" type="int" line="33"/>
                    <declaration name="indexII" type="int" line="34"/>
                    <scope line="35">
                        <declaration name="widthX" type="int" line="36"/>
                        <scope line="37"/>
                        <scope line="40">
                            <declaration name="widthT" type="int" line="41"/>
                            <declaration name="indexL" type="int" line="42"/>
                            <declaration name="indexX" type="int" line="43"/>
                        </scope>
                        <declaration name="indexX" type="int" line="46"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="53">
                Inverts an upper or lower triangular block submatrix.                
                <param>
                    blockLength                    
                </param>
                <param>
                    upper Is it upper or lower triangular.                    
                </param>
                <param>
                    T Triangular matrix that is to be inverted.  Overwritten with solution.  Modified.                    
                </param>
                <param>
                    temp Work space variable that is size blockLengthblockLength.                    
                </param>
            </javadoc>
            <method name="invert" type="void" line="60">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="upper" type="boolean"/>
                    <param name="T" type="D1Submatrix64F"/>
                    <param name="temp" type="double"/>
                </params>
                <declaration name="M" type="int" line="63"/>
                <declaration name="dataT" type="double" line="64"/>
                <declaration name="offsetT" type="int" line="65"/>
                <scope line="66">
                    <declaration name="heightT" type="int" line="67"/>
                    <declaration name="indexII" type="int" line="68"/>
                    <scope line="69">
                        <declaration name="widthX" type="int" line="70"/>
                        <scope line="71"/>
                        <scope line="74">
                            <declaration name="widthT" type="int" line="75"/>
                            <declaration name="indexL" type="int" line="76"/>
                            <declaration name="indexX" type="int" line="77"/>
                        </scope>
                        <declaration name="indexX" type="int" line="80"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="87">
                &lt;p&gt;
                  Performs an in-place solve operation on the provided block aligned sub-matrices.&lt;br&gt;
                  &lt;br&gt;
                  B = T&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
                  &lt;br&gt;
                  where T is a triangular matrix. T or B can be transposed.  T is a square matrix of arbitrary
                  size and B has the same number of rows as T and an arbitrary number of columns.
                  &lt;/p&gt;                
                <param>
                    blockLength Size of the inner blocks.                    
                </param>
                <param>
                    upper If T is upper or lower triangular.                    
                </param>
                <param>
                    T An upper or lower triangular matrix. Not modified.                    
                </param>
                <param>
                    B A matrix whose height is the same as T's width. Solution is written here. Modified.                    
                </param>
            </javadoc>
            <method name="solve" type="void" line="101">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="upper" type="boolean"/>
                    <param name="T" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="transT" type="boolean"/>
                </params>
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <javadoc line="109">
                &lt;p&gt;
                  Performs an in-place solve operation where T is contained in a single block.&lt;br&gt;
                  &lt;br&gt;
                  B = T&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
                  &lt;br&gt;
                  where T is a triangular matrix contained in an inner block. T or B can be transposed.  T must be a single complete inner block
                  and B is either a column block vector or row block vector.
                  &lt;/p&gt;                
                <param>
                    blockLength Size of the inner blocks in the block matrix.                    
                </param>
                <param>
                    upper If T is upper or lower triangular.                    
                </param>
                <param>
                    T An upper or lower triangular matrix that is contained in an inner block. Not modified.                    
                </param>
                <param>
                    B A block aligned row or column submatrix. Modified.                    
                </param>
                <param>
                    transT If T is transposed or not.                    
                </param>
                <param>
                    transB If B is transposed or not.                    
                </param>
            </javadoc>
            <method name="solveBlock" type="void" line="125">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="upper" type="boolean"/>
                    <param name="T" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="transT" type="boolean"/>
                    <param name="transB" type="boolean"/>
                </params>
                <declaration name="Trows" type="int" line="126"/>
                <declaration name="blockT_rows" type="int" line="128"/>
                <declaration name="blockT_cols" type="int" line="129"/>
                <declaration name="offsetT" type="int" line="130"/>
                <declaration name="dataT" type="double" line="131"/>
                <declaration name="dataB" type="double" line="132"/>
                <scope line="133">
                    <scope line="134">
                        <scope line="135"/>
                        <scope line="138"/>
                    </scope>
                    <scope line="142">
                        <scope line="143"/>
                        <scope line="146">
                            <scope line="147">
                                <declaration name="N" type="int" line="148"/>
                                <declaration name="offsetB" type="int" line="149"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="155">
                    <scope line="157">
                        <scope line="158">
                            <scope line="159">
                                <declaration name="offsetB" type="int" line="160"/>
                                <declaration name="N" type="int" line="161"/>
                            </scope>
                        </scope>
                        <scope line="165">
                            <scope line="166">
                                <declaration name="offsetB" type="int" line="167"/>
                                <declaration name="N" type="int" line="168"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="173">
                        <scope line="174">
                            <scope line="175">
                                <declaration name="offsetB" type="int" line="176"/>
                                <declaration name="N" type="int" line="177"/>
                            </scope>
                        </scope>
                        <scope line="181">
                            <scope line="182">
                                <declaration name="offsetB" type="int" line="183"/>
                                <declaration name="N" type="int" line="184"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="191">
                &lt;p&gt;
                  Solves lower triangular systems:&lt;br&gt;
                  &lt;br&gt;
                  B = L&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
                  &lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt; Reverse or forward substitution is used depending upon L being transposed or not. &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    L Lower triangular with dimensions m by m.  Not modified.                    
                </param>
                <param>
                    B A matrix with dimensions m by n.  Solution is written into here. Modified.                    
                </param>
                <param>
                    transL Is the triangular matrix transposed?                    
                </param>
            </javadoc>
            <method name="solveL" type="void" line="204">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="L" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="transL" type="boolean"/>
                </params>
                <declaration name="Y" type="D1Submatrix64F" line="205"/>
                <declaration name="Linner" type="D1Submatrix64F" line="206"/>
                <declaration name="Binner" type="D1Submatrix64F" line="207"/>
                <declaration name="lengthL" type="int" line="208"/>
                <declaration name="startI" type="int" line="209"/>
                <scope line="210"/>
                <scope line="215"/>
                <scope line="219">
                    <scope line="220"/>
                    <scope line="223"/>
                    <declaration name="widthT" type="int" line="226"/>
                    <declaration name="updateY" type="boolean" line="236"/>
                    <scope line="237"/>
                    <scope line="240"/>
                    <scope line="243">
                        <scope line="244"/>
                        <scope line="252"/>
                        <scope line="260">
                            <scope line="265"/>
                            <scope line="268"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="275">
                &lt;p&gt;
                  Solves upper triangular systems:&lt;br&gt;
                  &lt;br&gt;
                  B = R&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
                  &lt;br&gt;
                  &lt;/p&gt;
                  &lt;p&gt;Only the first B.numRows rows in R will be processed.  Lower triangular elements are ignored.&lt;p&gt;
                  &lt;p&gt; Reverse or forward substitution is used depending upon L being transposed or not. &lt;/p&gt;                
                <param>
                    blockLength                    
                </param>
                <param>
                    R Upper triangular with dimensions m by m.  Not modified.                    
                </param>
                <param>
                    B A matrix with dimensions m by n.  Solution is written into here. Modified.                    
                </param>
                <param>
                    transR Is the triangular matrix transposed?                    
                </param>
            </javadoc>
            <method name="solveR" type="void" line="289">
                <params>
                    <param name="blockLength" type="int"/>
                    <param name="R" type="D1Submatrix64F"/>
                    <param name="B" type="D1Submatrix64F"/>
                    <param name="transR" type="boolean"/>
                </params>
                <declaration name="lengthR" type="int" line="290"/>
                <scope line="291"/>
                <scope line="294"/>
                <declaration name="Y" type="D1Submatrix64F" line="297"/>
                <declaration name="Rinner" type="D1Submatrix64F" line="298"/>
                <declaration name="Binner" type="D1Submatrix64F" line="299"/>
                <declaration name="startI" type="int" line="300"/>
                <scope line="301"/>
                <scope line="305"/>
                <scope line="310">
                    <scope line="311"/>
                    <scope line="314"/>
                    <declaration name="widthT" type="int" line="317"/>
                    <declaration name="updateY" type="boolean" line="327"/>
                    <scope line="328"/>
                    <scope line="331"/>
                    <scope line="334">
                        <scope line="335"/>
                        <scope line="343"/>
                        <scope line="351">
                            <scope line="356"/>
                            <scope line="359"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>