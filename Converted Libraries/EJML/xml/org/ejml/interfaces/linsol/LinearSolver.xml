<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.interfaces.linsol">
        <import package="org.ejml.data.Matrix64F"/>
        <interface name="LinearSolver">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="24">
                &lt;p&gt;
                  An implementation of LinearSolver solves a linear system or inverts a matrix.  It masks more complex
                  implementation details, while giving the programmer control over memory management and performance.
                  To quickly detect nearly singular matrices without computing the SVD the {@link #quality()}function is provided.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A linear system is defined as:
                  AX = B.&lt;br&gt;
                  where A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;, X &amp;isin; &amp;real; &lt;sup&gt;n &amp;times; p&lt;/sup&gt;,
                  B &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; p&lt;/sup&gt;.  Different implementations can solve different
                  types and shapes in input matrices and have different memory and runtime performance.
                  &lt;/p&gt;
                  &lt;p&gt;
                  To solve a system:&lt;br&gt;
                  &lt;ol&gt;
                  &lt;li&gt; Call {@link #setA(org.ejml.data.Matrix64F)}&lt;li&gt; Call {@link #solve(org.ejml.data.Matrix64F,org.ejml.data.Matrix64F)}.
                  &lt;/ol&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  To invert a matrix:&lt;br&gt;
                  &lt;ol&gt;
                  &lt;li&gt; Call {@link #setA(org.ejml.data.Matrix64F)}&lt;li&gt; Call {@link #invert(org.ejml.data.Matrix64F)}.
                  &lt;/ol&gt;
                  A matrix can also be inverted by passing in an identity matrix to solve, but this will be
                  slower and more memory intensive than the specialized invert() function.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;b&gt;IMPORTANT:&lt;/b&gt; Depending upon the implementation, input matrices might be overwritten by
                  the solver.  This
                  reduces memory and computational requirements and give more control to the programmer.  If
                  the input matrices need to be not modified then {@link org.ejml.alg.dense.linsol.LinearSolverSafe} can be used.  The
                  functions {@link #modifiesA()} and {@link #modifiesB()} specify which input matrices are being
                  modified.
                  &lt;/p&gt;                
                <author>
                    Peter Abeles                    
                </author>
            </javadoc>
            <method name="setA" type="boolean" line="71"/>
            <javadoc line="71">
                &lt;p&gt;
                  Specifies the A matrix in the linear equation.  A reference might be saved
                  and it might also be modified depending on the implementation.  If it is modified
                  then {@link #modifiesA()} will return true.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If this value returns true that does not guarantee a valid solution was generated.  This
                  is because some decompositions don&apos;t detect singular matrices.
                  &lt;/p&gt;                
                <param>
                    A The &apos;A&apos; matrix in the linear equation. Might be modified or save the reference.                    
                </param>
                <return>
                    true if it can be processed.                    
                </return>
            </javadoc>
            <method name="quality" type="double" line="88"/>
            <javadoc line="88">
                &lt;p&gt;
                  Returns a very quick to compute measure of how singular the system is.  This measure will
                  be invariant to the scale of the matrix and always be positive, with larger values
                  indicating it is less singular.  If not supported by the solver then the runtime
                  exception IllegalArgumentException is thrown.  This is NOT the matrix&apos;s condition.
                  &lt;p&gt;
                  &lt;p&gt;
                  How this function is implemented is not specified.  One possible implementation is the following:
                  In many decompositions a triangular matrix
                  is extracted.  The determinant of a triangular matrix is easily computed and once normalized
                  to be scale invariant and its absolute value taken it will provide functionality described above.
                  &lt;/p&gt;                
                <return>
                    The quality of the linear system.                    
                </return>
            </javadoc>
            <method name="solve" type="void" line="107"/>
            <javadoc line="107">
                &lt;p&gt;
                  Solves for X in the linear system, AX=B.
                  &lt;/p&gt;
                  &lt;p&gt;
                  In some implementations &apos;B&apos; and &apos;X&apos; can be the same instance of a variable.  Call{@link #modifiesB()} to determine if &apos;B&apos; is modified.
                  &lt;/p&gt;                
                <param>
                    B A matrix &amp;real; &lt;sup&gt;m &amp;times; p&lt;/sup&gt;.  Might be modified.                    
                </param>
                <param>
                    X A matrix &amp;real; &lt;sup&gt;n &amp;times; p&lt;/sup&gt;, where the solution is written to.  Modified.                    
                </param>
            </javadoc>
            <method name="invert" type="void" line="122"/>
            <javadoc line="122">
                Computes the inverse of of the &apos;A&apos; matrix passed into {@link #setA(org.ejml.data.Matrix64F)}and writes the results to the provided matrix.  If &apos;A_inv&apos; needs to be different from &apos;A&apos;
                  is implementation dependent.                
                <param>
                    A_inv Where the inverted matrix saved. Modified.                    
                </param>
            </javadoc>
            <method name="modifiesA" type="boolean" line="131"/>
            <javadoc line="131">
                Returns true if the passed in matrix to {@link #setA(org.ejml.data.Matrix64F)}is modified.                
                <return>
                    true if A is modified in setA().                    
                </return>
            </javadoc>
            <method name="modifiesB" type="boolean" line="139"/>
            <javadoc line="139">
                Returns true if the passed in &apos;B&apos; matrix to {@link #solve(org.ejml.data.Matrix64F,org.ejml.data.Matrix64F)}is modified.                
                <return>
                    true if B is modified in solve(B,X).                    
                </return>
            </javadoc>
        </interface>
    </source>