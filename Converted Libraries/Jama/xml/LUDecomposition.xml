<?xml version="1.0" encoding="UTF-8"?>
    <source package="Jama">
        <class name="LUDecomposition" line="2">
            <implements interface="java.io.Serializable"/>
            <javadoc line="2">
                LU Decomposition.
                  &lt;P&gt;
                  For an m-by-n matrix A with m &gt;= n, the LU decomposition is an m-by-n
                  unit lower triangular matrix L, an n-by-n upper triangular matrix U,
                  and a permutation vector piv of length m so that A(piv,:) = LU.
                  If m &lt; n, then L is m-by-m and U is m-by-n.
                  &lt;P&gt;
                  The LU decompostion with pivoting always exists, even if the matrix is
                  singular, so the constructor will never fail.  The primary use of the
                  LU decomposition is in the solution of square systems of simultaneous
                  linear equations.  This will fail if isNonsingular() returns false.                
            </javadoc>
            <declaration name="LU" type="double[][]" line="16"/>
            <javadoc line="16">
                Array for internal storage of decomposition.                
                <serial>
                    internal array storage.                    
                </serial>
            </javadoc>
            <declaration name="m" type="int" line="21"/>
            <javadoc line="21">
                Row and column dimensions, and pivot sign.                
                <serial>
                    column dimension.                    
                </serial>
                <serial>
                    row dimension.                    
                </serial>
                <serial>
                    pivot sign.                    
                </serial>
            </javadoc>
            <declaration name="piv" type="int[]" line="28"/>
            <javadoc line="28">
                Internal storage of pivot vector.                
                <serial>
                    pivot vector.                    
                </serial>
            </javadoc>
            <javadoc line="33">
                LU Decomposition
                  Structure to access L, U and piv.                
                <param>
                    A Rectangular matrix                    
                </param>
            </javadoc>
            <method name="LUDecomposition" type="constructor" line="38">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <scope line="43"/>
                <declaration name="LUrowi" type="double[]" line="47"/>
                <declaration name="LUcolj" type="double[]" line="48"/>
                <scope line="49">
                    <scope line="50"/>
                    <scope line="53">
                        <declaration name="kmax" type="int" line="55"/>
                        <declaration name="s" type="double" line="56"/>
                        <scope line="57"/>
                    </scope>
                    <declaration name="p" type="int" line="62"/>
                    <scope line="63">
                        <scope line="64"/>
                    </scope>
                    <scope line="68">
                        <scope line="69">
                            <declaration name="t" type="double" line="70"/>
                        </scope>
                        <declaration name="k" type="int" line="74"/>
                    </scope>
                    <scope line="79">
                        <scope line="80"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="86">
                Is the matrix nonsingular?                
                <return>
                    true if U, and hence A, is nonsingular.                    
                </return>
            </javadoc>
            <method name="isNonsingular" type="boolean" line="90">
                <scope line="91"/>
            </method>
            <javadoc line="96">
                Return lower triangular factor                
                <return>
                    L                    
                </return>
            </javadoc>
            <method name="getL" type="Matrix" line="100">
                <declaration name="X" type="Matrix" line="101"/>
                <declaration name="L" type="double[][]" line="102"/>
                <scope line="103">
                    <scope line="104">
                        <scope line="105"/>
                        <scope line="108"/>
                        <scope line="111"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="118">
                Return upper triangular factor                
                <return>
                    U                    
                </return>
            </javadoc>
            <method name="getU" type="Matrix" line="122">
                <declaration name="X" type="Matrix" line="123"/>
                <declaration name="U" type="double[][]" line="124"/>
                <scope line="125">
                    <scope line="126">
                        <scope line="127"/>
                        <scope line="130"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="137">
                Return pivot permutation vector                
                <return>
                    piv                    
                </return>
            </javadoc>
            <method name="getPivot" type="int[]" line="141">
                <declaration name="p" type="int[]" line="142"/>
                <scope line="143"/>
            </method>
            <javadoc line="148">
                Return pivot permutation vector as a one-dimensional double array                
                <return>
                    (double) piv                    
                </return>
            </javadoc>
            <method name="getDoublePivot" type="double[]" line="152">
                <declaration name="vals" type="double[]" line="153"/>
                <scope line="154"/>
            </method>
            <javadoc line="159">
                Determinant                
                <return>
                    det(A)                    
                </return>
                <exception>
                    IllegalArgumentException  Matrix must be square                    
                </exception>
            </javadoc>
            <method name="det" type="double" line="164">
                <scope line="165"/>
                <declaration name="d" type="double" line="168"/>
                <scope line="169"/>
            </method>
            <javadoc line="174">
                Solve AX = B                
                <param>
                    B   A Matrix with as many rows as A and any number of columns.                    
                </param>
                <return>
                    X so that LUX = B(piv,:)                    
                </return>
                <exception>
                    IllegalArgumentException Matrix row dimensions must agree.                    
                </exception>
                <exception>
                    RuntimeException  Matrix is singular.                    
                </exception>
            </javadoc>
            <method name="solve" type="Matrix" line="181">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <scope line="182"/>
                <scope line="185"/>
                <declaration name="nx" type="int" line="188"/>
                <declaration name="Xmat" type="Matrix" line="189"/>
                <declaration name="X" type="double[][]" line="190"/>
                <scope line="191">
                    <scope line="192">
                        <scope line="193"/>
                    </scope>
                </scope>
                <scope line="198">
                    <scope line="199"/>
                    <scope line="202">
                        <scope line="203"/>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="210"/>
        </class>
    </source>