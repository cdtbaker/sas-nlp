<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.Utilities"/>
        <import package="no.uib.cipr.matrix.VectorEntry"/>
        <import package="no.uib.cipr.matrix.VectorTestAbstract"/>
        <class name="SparseVectorTest" line="32">
            <extends class="VectorTestAbstract"/>
            <javadoc line="32">
                Test of SparseVector                
            </javadoc>
            <method name="SparseVectorTest" type="constructor" line="37">
                <params>
                    <param name="arg0" type="String"/>
                </params>
            </method>
            <method name="createPrimary" type="void" line="42">
                <declaration name="n" type="int" line="43"/>
                <declaration name="m" type="int" line="44"/>
            </method>
            <method name="testSparseVectorIndices" type="void" line="49">
                <comment line="51">
                    MTJ subtlety in getIndex() for SparseVector. before calling
                     getIndex(), you must call compact()... implementations may choose to
                     do nothing in this call, but the Intel extended LAPACK
                     implementations (and MTJ&apos;s SparseVector) require it. An alternative
                     to vector.getIndex() is VectorMethods.getIndex(Vector) which will
                     wrap this for you. It can take an arbitrary Vector and if it can be
                     cast to a SparseVector will compact it and use its getIndex() method
                     instead. (just so you&apos;re aware of this). Sam.                    
                </comment>
                <comment line="62">
                    check that &quot;infinite dimensions&quot; doesn&apos;t use infinite memory                    
                </comment>
                <comment line="68">
                    check that creating with double[] with zeros works                    
                </comment>
                <comment line="78">
                    NOTE: must compact before calling getIndex()!!!
                     vector.compact();                    
                </comment>
            </method>
            <method name="testBug27" type="void" line="85">
                <comment line="92">
                    vectorTF.getUsed() returns 5                    
                </comment>
                <declaration name="tfVector" type="double[]" line="86"/>
                <declaration name="dense" type="DenseVector" line="87"/>
                <declaration name="vectorTF" type="SparseVector" line="88"/>
                <scope line="93">
                    <declaration name="ve" type="VectorEntry" line="94"/>
                    <declaration name="index" type="int" line="95"/>
                    <declaration name="value" type="double" line="96"/>
                </scope>
            </method>
            <javadoc line="101">
                Unit test checking that the sparse vector does not end up ever using 
                  more than &quot;size&quot; elements.                
            </javadoc>
            <method name="testOverAllocation" type="void" line="105">
                <comment line="112">
                    Fill with non-zero elements.                    
                </comment>
                <scope line="106">
                    <declaration name="v" type="SparseVector" line="107"/>
                    <scope line="112"/>
                </scope>
            </method>
        </class>
    </source>