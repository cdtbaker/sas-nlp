<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.io.MatrixInfo"/>
        <import package="no.uib.cipr.matrix.io.MatrixSize"/>
        <import package="no.uib.cipr.matrix.io.MatrixVectorReader"/>
        <class name="CompColMatrix" line="40">
            <extends class="AbstractMatrix"/>
            <javadoc line="40">
                Compressed column storage (CCS) matrix                
            </javadoc>
            <declaration name="data" type="double[]" line="45"/>
            <javadoc line="45">
                Matrix data                
            </javadoc>
            <declaration name="columnPointer" type="int[]" line="50"/>
            <javadoc line="50">
                Column indices. These are kept sorted within each row.                
            </javadoc>
            <declaration name="rowIndex" type="int[]" line="55"/>
            <javadoc line="55">
                Indices to the start of each row                
            </javadoc>
            <javadoc line="60">
                Constructor for CompColMatrix                
                <param>
                    rReader to get sparse matrix from                    
                </param>
            </javadoc>
            <method name="CompColMatrix" type="constructor" line="66">
                <params>
                    <param name="r" type="MatrixVectorReader"/>
                </params>
                <comment line="68">
                    Start with a zero-sized matrix                    
                </comment>
                <comment line="71">
                    Get matrix information. Use the header if present, else just assume
                     that the matrix stores real numbers without any symmetry                    
                </comment>
                <comment line="80">
                    Check that the matrix is in an acceptable format                    
                </comment>
                <comment line="91">
                    Resize the matrix to correct size                    
                </comment>
                <comment line="96">
                    Start reading entries                    
                </comment>
                <comment line="103">
                    Shift the indices from 1 based to 0 based                    
                </comment>
                <comment line="107">
                    Find the number of entries on each column                    
                </comment>
                <comment line="115">
                    Allocate some more in case of symmetry                    
                </comment>
                <comment line="129">
                    Create the sparse matrix structure                    
                </comment>
                <comment line="132">
                    Insert the entries                    
                </comment>
                <comment line="136">
                    Put in extra entries from symmetry or skew symmetry                    
                </comment>
                <declaration name="info" type="MatrixInfo" line="72"/>
                <declaration name="size" type="MatrixSize" line="91"/>
                <declaration name="numEntries" type="int" line="96"/>
                <declaration name="row" type="int[]" line="97"/>
                <declaration name="column" type="int[]" line="98"/>
                <declaration name="entry" type="double[]" line="99"/>
                <declaration name="cnz" type="List&amp;lt;Set&amp;lt;Integer&amp;gt;&amp;gt;" line="107"/>
                <declaration name="nz" type="int[][]" line="120"/>
                <scope line="121">
                    <declaration name="j" type="int" line="123"/>
                </scope>
                <scope line="137"/>
                <scope line="142"/>
            </method>
            <javadoc line="148">
                Constructor for CompColMatrix                
                <param>
                    numRowsNumber of rows                    
                </param>
                <param>
                    numColumnsNumber of columns                    
                </param>
                <param>
                    nzThe nonzero column indices on each column                    
                </param>
            </javadoc>
            <method name="CompColMatrix" type="constructor" line="158">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                    <param name="nz" type="int[][]"/>
                </params>
            </method>
            <method name="construct" type="void" line="163">
                <params>
                    <param name="nz" type="int[][]"/>
                </params>
                <declaration name="nnz" type="int" line="164"/>
                <scope line="175">
                    <scope line="178"/>
                </scope>
            </method>
            <method name="construct" type="void" line="190">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="191">
                    <scope line="192">
                        <declaration name="Ac" type="CompColMatrix" line="193"/>
                    </scope>
                    <scope line="202">
                        <declaration name="cnz" type="List&amp;lt;Set&amp;lt;Integer&amp;gt;&amp;gt;" line="204"/>
                        <declaration name="nz" type="int[][]" line="211"/>
                        <scope line="212">
                            <declaration name="j" type="int" line="214"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="223">
                    <declaration name="Ac" type="CompColMatrix" line="224"/>
                </scope>
            </method>
            <javadoc line="231">
                Constructor for CompColMatrix                
                <param>
                    ACopies from this matrix                    
                </param>
                <param>
                    deepTrue if the copy is to be deep. If it is a shallow copy,
                      &lt;code&gt;A&lt;/code&gt; must be a &lt;code&gt;CompColMatrix&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="CompColMatrix" type="constructor" line="240">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="245">
                Constructor for CompColMatrix                
                <param>
                    ACopies from this matrix. The copy will be deep                    
                </param>
            </javadoc>
            <method name="CompColMatrix" type="constructor" line="251">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="255">
                Returns the column pointers                
            </javadoc>
            <method name="getColumnPointers" type="int[]" line="258"/>
            <javadoc line="262">
                Returns the row indices                
            </javadoc>
            <method name="getRowIndices" type="int[]" line="265"/>
            <javadoc line="269">
                Returns the internal data storage                
            </javadoc>
            <method name="getData" type="double[]" line="272"/>
            <method name="multAdd" type="Vector" line="277">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <comment line="287">
                    y = 1/alpha * y                    
                </comment>
                <comment line="290">
                    y = A*x + y                    
                </comment>
                <comment line="295">
                    y = alpha*y = alpha*A*x + y                    
                </comment>
                <declaration name="xd" type="double[]" line="283"/>
            </method>
            <method name="transMult" type="Vector" line="299">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="305"/>
                <declaration name="yd" type="double[]" line="306"/>
                <scope line="308">
                    <declaration name="dot" type="double" line="309"/>
                </scope>
            </method>
            <method name="transMultAdd" type="Vector" line="319">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="325"/>
                <declaration name="yd" type="double[]" line="326"/>
                <scope line="328">
                    <declaration name="dot" type="double" line="329"/>
                </scope>
            </method>
            <method name="set" type="void" line="339">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="342"/>
            </method>
            <method name="add" type="void" line="347">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="350"/>
            </method>
            <method name="get" type="double" line="355">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="index" type="int" line="358"/>
            </method>
            <javadoc line="367">
                Finds the insertion index                
            </javadoc>
            <method name="getIndex" type="int" line="370">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="i" type="int" line="371"/>
            </method>
            <method name="copy" type="CompColMatrix" line="382"/>
            <method name="iterator" type="Iterator&lt;MatrixEntry&gt;" line="387"/>
            <method name="zero" type="CompColMatrix" line="392"/>
            <class name="CompColMatrixIterator" line="397">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="MatrixEntry"/>
                    </type_params>
                </implements>
                <javadoc line="397">
                    Iterator over a compressed column matrix                    
                </javadoc>
                <declaration name="column" type="int" line="402"/>
                <declaration name="entry" type="CompColMatrixEntry" line="404"/>
                <method name="CompColMatrixIterator" type="constructor" line="406">
                    <comment line="408">
                        Find first non-empty column                        
                    </comment>
                </method>
                <javadoc line="411">
                    Locates the first non-empty column, starting at the current. After
                      the new column has been found, the cursor is also updated                    
                </javadoc>
                <method name="nextNonEmptyColumn" type="void" line="415"/>
                <method name="hasNext" type="boolean" line="422"/>
                <method name="next" type="MatrixEntry" line="426">
                    <comment line="430">
                        Next position is in the same column                        
                    </comment>
                    <comment line="434">
                        Next position is at the following (non-empty) column                        
                    </comment>
                    <scope line="434"/>
                </method>
                <method name="remove" type="void" line="442"/>
            </class>
            <class name="CompColMatrixEntry" line="448">
                <implements interface="MatrixEntry"/>
                <javadoc line="448">
                    Entry of a compressed column matrix                    
                </javadoc>
                <declaration name="column" type="int" line="453"/>
                <javadoc line="455">
                    Updates the entry                    
                </javadoc>
                <method name="update" type="void" line="458">
                    <params>
                        <param name="column" type="int"/>
                        <param name="cursor" type="int"/>
                    </params>
                </method>
                <method name="row" type="int" line="463"/>
                <method name="column" type="int" line="467"/>
                <method name="get" type="double" line="471"/>
                <method name="set" type="void" line="475">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>