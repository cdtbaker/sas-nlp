<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.io.Serializable"/>
        <interface name="Vector">
            <implements interface="Iterable">
                <type_params>
                    <type_param name="VectorEntry"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="25">
                Basic vector interface. It holds &lt;code&gt;double&lt;/code&gt;s in an array, and is
                  used alongside &lt;code&gt;Matrix&lt;/code&gt; in numerical computations. Implementing
                  classes decides on the actual storage.
                  &lt;h4&gt;Basic operations&lt;/h4&gt;
                  &lt;p&gt;
                  Use &lt;code&gt;size&lt;/code&gt; to get the vector size. &lt;code&gt;get(int)&lt;/code&gt; gets
                  an element, and there are corresponding &lt;code&gt;set(int,double)&lt;/code&gt; and
                  &lt;code&gt;add(int,double)&lt;/code&gt; methods as well. Note that vector indices are
                  zero-based (typical for Java and C). This means that they range from 0 to
                  &lt;code&gt;size-1&lt;/code&gt;. It is legal to have &lt;code&gt;size&lt;/code&gt; equal zero.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Other basic operations are &lt;code&gt;zero&lt;/code&gt; which zeros all the entries of
                  the vector, which can be cheaper than either zeroing the vector manually, or
                  creating a new vector, and the operation &lt;code&gt;copy&lt;/code&gt; which creates a
                  deep copy of the vector. This copy has separate storage, but starts with the
                  same contents as the current vector.
                  &lt;/p&gt;
                  &lt;h4&gt;Iterators&lt;/h4&gt;
                  &lt;p&gt;
                  The vector interface extends &lt;code&gt;Iterable&lt;/code&gt;, and the iterator
                  returns a &lt;code&gt;VectorEntry&lt;/code&gt; which contains current index and entry
                  value. Note that the iterator may skip non-zero entries. Using an iterator,
                  many simple and efficient algorithms can be created. The iterator also
                  permits changing values in the vector, however only non-zero entries can be
                  changed.
                  &lt;/p&gt;
                  &lt;h4&gt;Basic linear algebra&lt;/h4&gt;
                  &lt;p&gt;
                  A selection of basic linear algebra operations are available. To ensure high
                  efficiency, little or no internal memory allocation is done, and the user is
                  required to supply the output arguments.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The operations available include:
                  &lt;/p&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;i&gt;Additions&lt;/i&gt;&lt;/dt&gt;
                  &lt;dd&gt;Vectors can be added to each other, even if their underlying vector
                  structures are incompatible&lt;/dd&gt;
                  &lt;dt&gt;&lt;i&gt;Scaling&lt;/i&gt;&lt;/dt&gt;
                  &lt;dd&gt;Scalar multiplication (scaling) of a whole vector&lt;/dd&gt;
                  &lt;dt&gt;&lt;i&gt;Norms&lt;/i&gt;&lt;/dt&gt;
                  &lt;dd&gt;Both innerproducts and norms can be computed. Several common norms are
                  supported&lt;/dd&gt;
                  &lt;/dl&gt;                
            </javadoc>
            <method name="size" type="int" line="76"/>
            <javadoc line="76">
                Size of the vector                
            </javadoc>
            <method name="set" type="void" line="81"/>
            <javadoc line="81">
                &lt;code&gt;x(index) = value&lt;/code&gt;                
            </javadoc>
            <method name="add" type="void" line="86"/>
            <javadoc line="86">
                &lt;code&gt;x(index) += value&lt;/code&gt;                
            </javadoc>
            <method name="get" type="double" line="91"/>
            <javadoc line="91">
                Returns &lt;code&gt;x(index)&lt;/code&gt;                
            </javadoc>
            <method name="copy" type="Vector" line="96"/>
            <javadoc line="96">
                Creates a deep copy of the vector                
            </javadoc>
            <method name="zero" type="Vector" line="101"/>
            <javadoc line="101">
                Zeros all the entries in the vector, while preserving any underlying
                  structure                
            </javadoc>
            <method name="scale" type="Vector" line="107"/>
            <javadoc line="107">
                &lt;code&gt;x=alphax&lt;/code&gt;                
                <return>
                    x                    
                </return>
            </javadoc>
            <method name="set" type="Vector" line="114"/>
            <javadoc line="114">
                &lt;code&gt;x=y&lt;/code&gt;                
                <return>
                    x                    
                </return>
            </javadoc>
            <method name="set" type="Vector" line="121"/>
            <javadoc line="121">
                &lt;code&gt;x=alphay&lt;/code&gt;                
                <return>
                    x                    
                </return>
            </javadoc>
            <method name="add" type="Vector" line="128"/>
            <javadoc line="128">
                &lt;code&gt;x = y + x&lt;/code&gt;                
                <return>
                    x                    
                </return>
            </javadoc>
            <method name="add" type="Vector" line="135"/>
            <javadoc line="135">
                &lt;code&gt;x = alphay + x&lt;/code&gt;                
                <return>
                    x                    
                </return>
            </javadoc>
            <method name="dot" type="double" line="142"/>
            <javadoc line="142">
                &lt;code&gt;x&lt;sup&gt;T&lt;/sup&gt;y&lt;/code&gt;                
            </javadoc>
            <method name="norm" type="double" line="147"/>
            <javadoc line="147">
                Computes the given norm of the vector                
                <param>
                    typeThe type of norm to compute                    
                </param>
            </javadoc>
            <declaration name="Norm" type="enum" line="155"/>
            <javadoc line="155">
                Supported vector-norms. The difference between the two 2-norms is that
                  one is fast, but can overflow, while the robust version is overflow
                  resistant, but slower.                
            </javadoc>
            <scope line="160"/>
        </interface>
    </source>