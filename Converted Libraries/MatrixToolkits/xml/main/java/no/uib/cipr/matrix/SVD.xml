<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="SVD" line="26">
            <javadoc line="26">
                Computes singular value decompositions                
            </javadoc>
            <declaration name="work" type="double[]" line="31"/>
            <javadoc line="31">
                Work array                
            </javadoc>
            <declaration name="iwork" type="int[]" line="36"/>
            <javadoc line="36">
                Work array                
            </javadoc>
            <declaration name="m" type="int" line="41"/>
            <javadoc line="41">
                Matrix dimension                
            </javadoc>
            <declaration name="vectors" type="boolean" line="46"/>
            <javadoc line="46">
                Compute the singular vectors fully?                
            </javadoc>
            <declaration name="job" type="JobSVD" line="51"/>
            <javadoc line="51">
                Job to do                
            </javadoc>
            <declaration name="S" type="double[]" line="56"/>
            <javadoc line="56">
                The singular values                
            </javadoc>
            <declaration name="U" type="DenseMatrix" line="61"/>
            <javadoc line="61">
                Singular vectors                
            </javadoc>
            <javadoc line="66">
                Creates an empty SVD which will compute all singular values and vectors                
                <param>
                    mNumber of rows                    
                </param>
                <param>
                    nNumber of columns                    
                </param>
            </javadoc>
            <method name="SVD" type="constructor" line="74">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="78">
                Creates an empty SVD                
                <param>
                    mNumber of rows                    
                </param>
                <param>
                    nNumber of columns                    
                </param>
                <param>
                    vectorsTrue to compute the singular vectors, false for just the
                      singular values                    
                </param>
            </javadoc>
            <method name="SVD" type="constructor" line="89">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                    <param name="vectors" type="boolean"/>
                </params>
                <comment line="95">
                    Allocate space for the decomposition                    
                </comment>
                <comment line="105">
                    Find workspace requirements                    
                </comment>
                <comment line="108">
                    Query optimal workspace                    
                </comment>
                <comment line="116">
                    Allocate workspace                    
                </comment>
                <scope line="96"/>
                <declaration name="worksize" type="double[]" line="108"/>
                <declaration name="info" type="intW" line="109"/>
                <declaration name="lwork" type="int" line="116"/>
                <scope line="117"/>
            </method>
            <javadoc line="137">
                Convenience method for computing a full SVD                
                <param>
                    AMatrix to decompose, not modified                    
                </param>
                <return>
                    Newly allocated factorization                    
                </return>
                <throws>
                    NotConvergedException                    
                </throws>
            </javadoc>
            <method name="factorize" type="SVD" line="145">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="149">
                Computes an SVD                
                <param>
                    AMatrix to decompose. Size must conform, and it will be
                      overwritten on return. Pass a copy to avoid this                    
                </param>
                <return>
                    The current decomposition                    
                </return>
                <throws>
                    NotConvergedException                    
                </throws>
            </javadoc>
            <method name="factor" type="SVD" line="158">
                <params>
                    <param name="A" type="DenseMatrix"/>
                </params>
                <declaration name="info" type="intW" line="164"/>
            </method>
            <javadoc line="179">
                True if singular vectors are stored                
            </javadoc>
            <method name="hasSingularVectors" type="boolean" line="182"/>
            <javadoc line="186">
                Returns the left singular vectors, column-wise. Not available for partial
                  decompositions                
                <return>
                    Matrix of size mm                    
                </return>
            </javadoc>
            <method name="getU" type="DenseMatrix" line="192"/>
            <javadoc line="196">
                Returns the right singular vectors, row-wise. Not available for partial
                  decompositions                
                <return>
                    Matrix of size nn                    
                </return>
            </javadoc>
            <method name="getVt" type="DenseMatrix" line="202"/>
            <javadoc line="206">
                Returns the singular values (stored in descending order)                
                <return>
                    Array of size min(m,n)                    
                </return>
            </javadoc>
            <method name="getS" type="double[]" line="211"/>
        </class>
    </source>