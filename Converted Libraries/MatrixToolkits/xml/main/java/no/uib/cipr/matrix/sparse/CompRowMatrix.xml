<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.io.MatrixInfo"/>
        <import package="no.uib.cipr.matrix.io.MatrixSize"/>
        <import package="no.uib.cipr.matrix.io.MatrixVectorReader"/>
        <import package="com.github.fommil.netlib.BLAS"/>
        <class name="CompRowMatrix" line="42">
            <extends class="AbstractMatrix"/>
            <javadoc line="42">
                Compressed row storage (CRS) matrix                
            </javadoc>
            <declaration name="data" type="double[]" line="47"/>
            <javadoc line="47">
                Matrix data                
            </javadoc>
            <declaration name="columnIndex" type="int[]" line="52"/>
            <javadoc line="52">
                Column indices. These are kept sorted within each row.                
            </javadoc>
            <declaration name="rowPointer" type="int[]" line="57"/>
            <javadoc line="57">
                Indices to the start of each row                
            </javadoc>
            <javadoc line="62">
                Constructor for CompRowMatrix                
                <param>
                    rReader to get sparse matrix from                    
                </param>
            </javadoc>
            <method name="CompRowMatrix" type="constructor" line="68">
                <params>
                    <param name="r" type="MatrixVectorReader"/>
                </params>
                <comment line="70">
                    Start with a zero-sized matrix                    
                </comment>
                <comment line="73">
                    Get matrix information. Use the header if present, else just assume
                     that the matrix stores real numbers without any symmetry                    
                </comment>
                <comment line="82">
                    Check that the matrix is in an acceptable format                    
                </comment>
                <comment line="93">
                    Resize the matrix to correct size                    
                </comment>
                <comment line="98">
                    Start reading entries                    
                </comment>
                <comment line="105">
                    Shift the indices from 1 based to 0 based                    
                </comment>
                <comment line="109">
                    Find the number of entries on each row                    
                </comment>
                <comment line="117">
                    Allocate some more in case of symmetry                    
                </comment>
                <comment line="131">
                    Create the sparse matrix structure                    
                </comment>
                <comment line="134">
                    Insert the entries                    
                </comment>
                <comment line="138">
                    Put in extra entries from symmetry or skew symmetry                    
                </comment>
                <declaration name="info" type="MatrixInfo" line="74"/>
                <declaration name="size" type="MatrixSize" line="93"/>
                <declaration name="numEntries" type="int" line="98"/>
                <declaration name="row" type="int[]" line="99"/>
                <declaration name="column" type="int[]" line="100"/>
                <declaration name="entry" type="double[]" line="101"/>
                <declaration name="rnz" type="List&amp;lt;Set&amp;lt;Integer&amp;gt;&amp;gt;" line="109"/>
                <declaration name="nz" type="int[][]" line="122"/>
                <scope line="123">
                    <declaration name="j" type="int" line="125"/>
                </scope>
                <scope line="139"/>
                <scope line="144"/>
            </method>
            <javadoc line="150">
                Constructor for CompRowMatrix                
                <param>
                    numRowsNumber of rows                    
                </param>
                <param>
                    numColumnsNumber of columns                    
                </param>
                <param>
                    nzThe nonzero column indices on each row                    
                </param>
            </javadoc>
            <method name="CompRowMatrix" type="constructor" line="160">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                    <param name="nz" type="int[][]"/>
                </params>
            </method>
            <method name="construct" type="void" line="165">
                <params>
                    <param name="nz" type="int[][]"/>
                </params>
                <declaration name="nnz" type="int" line="166"/>
                <scope line="177">
                    <scope line="180"/>
                </scope>
            </method>
            <method name="construct" type="void" line="192">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="193">
                    <scope line="194">
                        <declaration name="Ac" type="CompRowMatrix" line="195"/>
                    </scope>
                    <scope line="205">
                        <declaration name="rnz" type="List&amp;lt;Set&amp;lt;Integer&amp;gt;&amp;gt;" line="207"/>
                        <declaration name="nz" type="int[][]" line="214"/>
                        <scope line="215">
                            <declaration name="j" type="int" line="217"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="226">
                    <declaration name="Ac" type="CompRowMatrix" line="227"/>
                </scope>
            </method>
            <javadoc line="234">
                Constructor for CompRowMatrix                
                <param>
                    ACopies from this matrix                    
                </param>
                <param>
                    deepTrue if the copy is to be deep. If it is a shallow copy,
                      &lt;code&gt;A&lt;/code&gt; must be a &lt;code&gt;CompRowMatrix&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="CompRowMatrix" type="constructor" line="243">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="248">
                Constructor for CompRowMatrix                
                <param>
                    ACopies from this matrix. The copy will be deep                    
                </param>
            </javadoc>
            <method name="CompRowMatrix" type="constructor" line="254">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="258">
                Returns the column indices                
            </javadoc>
            <method name="getColumnIndices" type="int[]" line="261"/>
            <javadoc line="265">
                Returns the row pointers                
            </javadoc>
            <method name="getRowPointers" type="int[]" line="268"/>
            <javadoc line="272">
                Returns the internal data storage                
            </javadoc>
            <method name="getData" type="double[]" line="275"/>
            <method name="mult" type="Matrix" line="280">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <comment line="285">
                    optimised a little bit to avoid zeros in rows, but not to
                     exploit sparsity of matrix B                    
                </comment>
                <scope line="286">
                    <scope line="287">
                        <declaration name="dot" type="double" line="288"/>
                        <scope line="289"/>
                        <scope line="292"/>
                    </scope>
                </scope>
            </method>
            <method name="mult" type="Vector" line="301">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <comment line="303">
                    check dimensions                    
                </comment>
                <comment line="305">
                    can&apos;t assume this, unfortunately                    
                </comment>
                <comment line="309">
                    DenseVector optimisations                    
                </comment>
                <comment line="322">
                    use sparsity of matrix (not vector), as get(,) is slow
                     TODO: additional optimisations for mult(ISparseVector, Vector)
                     note that this would require Sparse BLAS, e.g. BLAS_DUSDOT(,,,,)
                     @see http:www.netlib.org/blas/blast-forum/chapter3.pdf                    
                </comment>
                <scope line="307">
                    <declaration name="xd" type="double[]" line="309"/>
                    <scope line="310">
                        <declaration name="dot" type="double" line="311"/>
                        <scope line="312"/>
                        <scope line="315"/>
                    </scope>
                </scope>
                <scope line="325">
                    <declaration name="dot" type="double" line="326"/>
                    <scope line="327"/>
                </scope>
            </method>
            <method name="multAdd" type="Vector" line="336">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="342"/>
                <declaration name="yd" type="double[]" line="343"/>
                <scope line="345">
                    <declaration name="dot" type="double" line="346"/>
                </scope>
            </method>
            <method name="transMult" type="Vector" line="356">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="362"/>
                <declaration name="yd" type="double[]" line="363"/>
            </method>
            <method name="transMultAdd" type="Vector" line="375">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <comment line="385">
                    y = 1/alpha * y                    
                </comment>
                <comment line="388">
                    y = A&apos;x + y                    
                </comment>
                <comment line="393">
                    y = alpha*y = alpha*A&apos;x + y                    
                </comment>
                <declaration name="xd" type="double[]" line="381"/>
                <declaration name="yd" type="double[]" line="382"/>
            </method>
            <method name="set" type="void" line="397">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="400"/>
            </method>
            <method name="add" type="void" line="405">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="408"/>
            </method>
            <method name="get" type="double" line="413">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="index" type="int" line="416"/>
            </method>
            <javadoc line="425">
                Finds the insertion index                
            </javadoc>
            <method name="getIndex" type="int" line="428">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="i" type="int" line="429"/>
            </method>
            <method name="copy" type="CompRowMatrix" line="440"/>
            <method name="iterator" type="Iterator&lt;MatrixEntry&gt;" line="445"/>
            <method name="zero" type="CompRowMatrix" line="450"/>
            <method name="set" type="Matrix" line="456">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <comment line="465">
                    Reallocate matrix structure, if necessary                    
                </comment>
                <declaration name="Bc" type="CompRowMatrix" line="462"/>
                <scope line="466"/>
            </method>
            <class name="CompRowMatrixIterator" line="479">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="MatrixEntry"/>
                    </type_params>
                </implements>
                <javadoc line="479">
                    Iterator over a compressed row matrix                    
                </javadoc>
                <declaration name="row" type="int" line="484"/>
                <declaration name="entry" type="CompRowMatrixEntry" line="486"/>
                <method name="CompRowMatrixIterator" type="constructor" line="488">
                    <comment line="490">
                        Find first non-empty row                        
                    </comment>
                </method>
                <javadoc line="493">
                    Locates the first non-empty row, starting at the current. After the
                      new row has been found, the cursor is also updated                    
                </javadoc>
                <method name="nextNonEmptyRow" type="void" line="497"/>
                <method name="hasNext" type="boolean" line="503"/>
                <method name="next" type="MatrixEntry" line="507">
                    <comment line="511">
                        Next position is in the same row                        
                    </comment>
                    <comment line="515">
                        Next position is at the following (non-empty) row                        
                    </comment>
                    <scope line="515"/>
                </method>
                <method name="remove" type="void" line="523"/>
            </class>
            <class name="CompRowMatrixEntry" line="529">
                <implements interface="MatrixEntry"/>
                <javadoc line="529">
                    Entry of a compressed row matrix                    
                </javadoc>
                <declaration name="row" type="int" line="534"/>
                <javadoc line="536">
                    Updates the entry                    
                </javadoc>
                <method name="update" type="void" line="539">
                    <params>
                        <param name="row" type="int"/>
                        <param name="cursor" type="int"/>
                    </params>
                </method>
                <method name="row" type="int" line="544"/>
                <method name="column" type="int" line="548"/>
                <method name="get" type="double" line="552"/>
                <method name="set" type="void" line="556">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>