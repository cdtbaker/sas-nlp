<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="no.uib.cipr.matrix.Matrix.Norm"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.doubleW"/>
        <import package="org.netlib.util.intW"/>
        <class name="BandCholesky" line="29">
            <javadoc line="29">
                Banded Cholesky decomposition                
            </javadoc>
            <declaration name="n" type="int" line="34"/>
            <javadoc line="34">
                Matrix dimension                
            </javadoc>
            <declaration name="kd" type="int" line="39"/>
            <javadoc line="39">
                Number of bands in the matrix A                
            </javadoc>
            <declaration name="Cl" type="LowerTriangBandMatrix" line="44"/>
            <javadoc line="44">
                Cholesky decomposition of a lower matrix                
            </javadoc>
            <declaration name="Cu" type="UpperTriangBandMatrix" line="49"/>
            <javadoc line="49">
                Cholesky decomposition of an upper matrix                
            </javadoc>
            <declaration name="notspd" type="boolean" line="54"/>
            <javadoc line="54">
                If the matrix is SPD or not                
            </javadoc>
            <declaration name="upper" type="boolean" line="59"/>
            <javadoc line="59">
                True for upper part, else false                
            </javadoc>
            <javadoc line="64">
                Constructor for BandCholesky                
                <param>
                    nMatrix size                    
                </param>
                <param>
                    kdNumber of matrix bands                    
                </param>
                <param>
                    upperTrue for decomposing an upper symmetrical matrix, false for a
                      lower symmetrical matrix                    
                </param>
            </javadoc>
            <method name="BandCholesky" type="constructor" line="75">
                <params>
                    <param name="n" type="int"/>
                    <param name="kd" type="int"/>
                    <param name="upper" type="boolean"/>
                </params>
            </method>
            <javadoc line="86">
                Creates a Cholesky decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Not modified                    
                </param>
                <return>
                    A Cholesky decomposition of the matrix                    
                </return>
            </javadoc>
            <method name="factorize" type="BandCholesky" line="93">
                <params>
                    <param name="A" type="LowerSPDBandMatrix"/>
                </params>
            </method>
            <javadoc line="97">
                Creates a Cholesky decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Not modified                    
                </param>
                <return>
                    A Cholesky decomposition of the matrix                    
                </return>
            </javadoc>
            <method name="factorize" type="BandCholesky" line="104">
                <params>
                    <param name="A" type="UpperSPDBandMatrix"/>
                </params>
            </method>
            <javadoc line="108">
                Creates a Cholesky decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Overwritten on return                    
                </param>
                <return>
                    The current decomposition                    
                </return>
            </javadoc>
            <method name="factor" type="BandCholesky" line="115">
                <params>
                    <param name="A" type="LowerSPDBandMatrix"/>
                </params>
            </method>
            <javadoc line="123">
                Creates a Cholesky decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Overwritten on return                    
                </param>
                <return>
                    The current decomposition                    
                </return>
            </javadoc>
            <method name="factor" type="BandCholesky" line="130">
                <params>
                    <param name="A" type="UpperSPDBandMatrix"/>
                </params>
            </method>
            <method name="decompose" type="BandCholesky" line="138">
                <params>
                    <param name="A" type="AbstractBandMatrix"/>
                </params>
                <declaration name="info" type="intW" line="148"/>
            </method>
            <javadoc line="169">
                Returns the decomposition matrix. Only valid for decomposition of a lower
                  SPD matrix                
            </javadoc>
            <method name="getL" type="LowerTriangBandMatrix" line="173"/>
            <javadoc line="180">
                Returns the decomposition matrix. Only valid for decomposition of a upper
                  SPD matrix                
            </javadoc>
            <method name="getU" type="UpperTriangBandMatrix" line="184"/>
            <javadoc line="191">
                Returns true if the matrix decomposed is symmetrical, positive definite                
            </javadoc>
            <method name="isSPD" type="boolean" line="194"/>
            <javadoc line="198">
                Computes the reciprocal condition number                
                <param>
                    AThe matrix this is a decomposition of                    
                </param>
                <return>
                    The reciprocal condition number. Values close to unity indicate a
                      well-conditioned system, while numbers close to zero do not.                    
                </return>
            </javadoc>
            <method name="rcond" type="double" line="206">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="anorm" type="double" line="212"/>
                <declaration name="work" type="double[]" line="214"/>
                <declaration name="lwork" type="int[]" line="215"/>
                <declaration name="info" type="intW" line="217"/>
                <declaration name="rcond" type="doubleW" line="218"/>
            </method>
            <javadoc line="232">
                Computes &lt;code&gt;A\B&lt;/code&gt;, overwriting &lt;code&gt;B&lt;/code&gt;                
            </javadoc>
            <method name="solve" type="DenseMatrix" line="235">
                <params>
                    <param name="B" type="DenseMatrix"/>
                </params>
                <declaration name="info" type="intW" line="241"/>
            </method>
        </class>
    </source>