<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.VectorEntry"/>
        <class name="ILUT" line="34">
            <implements interface="Preconditioner"/>
            <javadoc line="34">
                ILU preconditioner with fill-in. Uses the dual threshold approach of Saad.                
            </javadoc>
            <declaration name="LU" type="FlexCompRowMatrix" line="39"/>
            <javadoc line="39">
                Factorisation matrix                
            </javadoc>
            <declaration name="L" type="Matrix" line="44"/>
            <javadoc line="44">
                The L and U factors                
            </javadoc>
            <declaration name="y" type="Vector" line="49"/>
            <javadoc line="49">
                Temporary vector for solving the factorised system                
            </javadoc>
            <declaration name="tau" type="double" line="54"/>
            <javadoc line="54">
                Drop-tolerance                
            </javadoc>
            <declaration name="diagind" type="int[]" line="59"/>
            <javadoc line="59">
                Diagonal indices                
            </javadoc>
            <declaration name="lower" type="List&amp;lt;IntDoubleEntry&amp;gt;" line="64"/>
            <javadoc line="64">
                Stores entries in the lower and upper part of the matrix. Used by the
                  dropping rule to determine the largest entries in the two parts of the
                  matrix                
            </javadoc>
            <declaration name="p" type="int" line="71"/>
            <javadoc line="71">
                Number of additional entries to keep in the lower and upper part of the
                  factored matrix. The entries of the original matrix are always kept,
                  unless they numerically too small                
            </javadoc>
            <javadoc line="78">
                Sets up the preconditioner for the given matrix                
                <param>
                    LUMatrix to use internally. For best performance, its non-zero
                      pattern should conform to that of the system matrix                    
                </param>
                <param>
                    tauDrop tolerance                    
                </param>
                <param>
                    pNumber of entries to keep on each row in of the factored
                      matrix. This is in addition to the entries of the original
                      matrix                    
                </param>
            </javadoc>
            <method name="ILUT" type="constructor" line="91">
                <params>
                    <param name="LU" type="FlexCompRowMatrix"/>
                    <param name="tau" type="double"/>
                    <param name="p" type="int"/>
                </params>
                <declaration name="n" type="int" line="100"/>
            </method>
            <javadoc line="107">
                Sets up the preconditioner for the given matrix. Uses a drop-tolerance of
                  10&lt;sup&gt;-6&lt;/sup&gt;, and keeps 50 entries on each row, including the main
                  diagonal and any previous entries in the matrix structure                
                <param>
                    LUMatrix to use internally. For best performance, its non-zero
                      pattern should conform to that of the system matrix                    
                </param>
            </javadoc>
            <method name="ILUT" type="constructor" line="116">
                <params>
                    <param name="LU" type="FlexCompRowMatrix"/>
                </params>
            </method>
            <method name="apply" type="Vector" line="120">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <comment line="122">
                    Ly = b, y = L\b                    
                </comment>
                <comment line="125">
                    Ux = L\b = y                    
                </comment>
            </method>
            <method name="transApply" type="Vector" line="128">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <comment line="130">
                    U&apos;y = b, y = U&apos;\b                    
                </comment>
                <comment line="133">
                    L&apos;x = U&apos;\b = y                    
                </comment>
            </method>
            <method name="setMatrix" type="void" line="136">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <method name="factor" type="void" line="143">
                <comment line="149">
                    Find the indices to the diagonal entries                    
                </comment>
                <comment line="160">
                    Get row i                    
                </comment>
                <comment line="163">
                    Drop tolerance on current row                    
                </comment>
                <comment line="166">
                    Store in dense format                    
                </comment>
                <comment line="171">
                    Get row k                    
                </comment>
                <comment line="183">
                    Check for small elimination entry                    
                </comment>
                <comment line="187">
                    Traverse the sparse row k, reducing row i                    
                </comment>
                <comment line="191">
                    The above has overwritten LUik, so remedy that                    
                </comment>
                <comment line="195">
                    Store back into the LU matrix, dropping as needed                    
                </comment>
                <comment line="198">
                    Update diagonal index on row i if it is outdated                    
                </comment>
                <declaration name="n" type="int" line="144"/>
                <declaration name="LUi" type="double[]" line="146"/>
                <scope line="149">
                    <declaration name="row" type="SparseVector" line="150"/>
                </scope>
                <scope line="157">
                    <declaration name="rowi" type="SparseVector" line="160"/>
                    <declaration name="taui" type="double" line="163"/>
                    <scope line="168">
                        <declaration name="rowk" type="SparseVector" line="171"/>
                        <declaration name="rowIndex" type="int[]" line="172"/>
                        <declaration name="rowUsed" type="int" line="173"/>
                        <declaration name="rowData" type="double[]" line="174"/>
                        <declaration name="LUik" type="double" line="180"/>
                    </scope>
                    <scope line="198"/>
                </scope>
            </method>
            <method name="findDiagonalIndex" type="int" line="210">
                <params>
                    <param name="v" type="SparseVector"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="215">
                Copies the sparse vector into a dense array                
            </javadoc>
            <method name="scatter" type="void" line="218">
                <params>
                    <param name="v" type="SparseVector"/>
                    <param name="z" type="double[]"/>
                </params>
                <declaration name="index" type="int[]" line="219"/>
                <declaration name="used" type="int" line="220"/>
                <declaration name="data" type="double[]" line="221"/>
            </method>
            <javadoc line="227">
                Copies the dense array back into the sparse vector, applying a numerical
                  dropping rule and keeping only a given number of entries                
            </javadoc>
            <method name="gather" type="void" line="231">
                <params>
                    <param name="z" type="double[]"/>
                    <param name="v" type="SparseVector"/>
                    <param name="taui" type="double"/>
                    <param name="d" type="int"/>
                </params>
                <comment line="233">
                    Number of entries in the lower and upper part of the original matrix                    
                </comment>
                <comment line="243">
                    Entries in the L part of the vector                    
                </comment>
                <comment line="249">
                    Entries in the U part of the vector                    
                </comment>
                <comment line="255">
                    Sort in descending order                    
                </comment>
                <comment line="259">
                    Always keep the diagonal                    
                </comment>
                <comment line="262">
                    Keep at most nl+p lower entries                    
                </comment>
                <comment line="268">
                    Keep at most nu+p upper entries                    
                </comment>
                <declaration name="nl" type="int" line="233"/>
                <scope line="234"/>
                <scope line="262">
                    <declaration name="e" type="IntDoubleEntry" line="263"/>
                </scope>
                <scope line="268">
                    <declaration name="e" type="IntDoubleEntry" line="269"/>
                </scope>
            </method>
            <class name="IntDoubleEntry" line="274">
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="IntDoubleEntry"/>
                    </type_params>
                </implements>
                <javadoc line="274">
                    Stores an integer/value pair, sorted by descending order according to the
                      value                    
                </javadoc>
                <declaration name="index" type="int" line="280"/>
                <declaration name="value" type="double" line="282"/>
                <method name="IntDoubleEntry" type="constructor" line="284">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="289">
                    <params>
                        <param name="o" type="IntDoubleEntry"/>
                    </params>
                    <comment line="291">
                        Descending order, so keep the largest entries first                        
                    </comment>
                </method>
                <method name="toString" type="String" line="300"/>
            </class>
            <class name="UnitLowerFlexCompRowMatrix" line="305">
                <extends class="AbstractMatrix"/>
                <javadoc line="305">
                    Unit lower triangular flex-CRS matrix. Only used for triangular solves                    
                </javadoc>
                <declaration name="LU" type="FlexCompRowMatrix" line="310"/>
                <declaration name="diagind" type="int[]" line="312"/>
                <method name="UnitLowerFlexCompRowMatrix" type="constructor" line="314">
                    <params>
                        <param name="LU" type="FlexCompRowMatrix"/>
                        <param name="diagind" type="int[]"/>
                    </params>
                </method>
                <method name="solve" type="Vector" line="321">
                    <params>
                        <param name="b" type="Vector"/>
                        <param name="x" type="Vector"/>
                    </params>
                    <comment line="331">
                        Get row i                        
                    </comment>
                    <comment line="336">
                        xi = bi - sum[j&lt;i] Lij * xj                        
                    </comment>
                    <declaration name="bd" type="double[]" line="325"/>
                    <declaration name="xd" type="double[]" line="326"/>
                    <scope line="328">
                        <declaration name="row" type="SparseVector" line="331"/>
                        <declaration name="index" type="int[]" line="332"/>
                        <declaration name="data" type="double[]" line="333"/>
                        <declaration name="sum" type="double" line="336"/>
                    </scope>
                </method>
                <method name="transSolve" type="Vector" line="347">
                    <params>
                        <param name="b" type="Vector"/>
                        <param name="x" type="Vector"/>
                    </params>
                    <comment line="358">
                        Get row i                        
                    </comment>
                    <comment line="363">
                        At this stage, x[i] is known, so move it over to the right
                         hand side for the remaining equations                        
                    </comment>
                    <declaration name="xd" type="double[]" line="353"/>
                    <scope line="355">
                        <declaration name="row" type="SparseVector" line="358"/>
                        <declaration name="index" type="int[]" line="359"/>
                        <declaration name="data" type="double[]" line="360"/>
                    </scope>
                </method>
            </class>
            <class name="UpperFlexCompRowMatrix" line="374">
                <extends class="AbstractMatrix"/>
                <javadoc line="374">
                    Upper triangular flex-CRS matrix. Only used for triangular solves                    
                </javadoc>
                <declaration name="LU" type="FlexCompRowMatrix" line="379"/>
                <declaration name="diagind" type="int[]" line="381"/>
                <method name="UpperFlexCompRowMatrix" type="constructor" line="383">
                    <params>
                        <param name="LU" type="FlexCompRowMatrix"/>
                        <param name="diagind" type="int[]"/>
                    </params>
                </method>
                <method name="solve" type="Vector" line="390">
                    <params>
                        <param name="b" type="Vector"/>
                        <param name="x" type="Vector"/>
                    </params>
                    <comment line="400">
                        Get row i                        
                    </comment>
                    <comment line="406">
                        xi = (bi - sum[j&gt;i] Uij * xj) / Uii                        
                    </comment>
                    <declaration name="bd" type="double[]" line="394"/>
                    <declaration name="xd" type="double[]" line="395"/>
                    <scope line="397">
                        <declaration name="row" type="SparseVector" line="400"/>
                        <declaration name="index" type="int[]" line="401"/>
                        <declaration name="used" type="int" line="402"/>
                        <declaration name="data" type="double[]" line="403"/>
                        <declaration name="sum" type="double" line="406"/>
                    </scope>
                </method>
                <method name="transSolve" type="Vector" line="417">
                    <params>
                        <param name="b" type="Vector"/>
                        <param name="x" type="Vector"/>
                    </params>
                    <comment line="428">
                        Get row i                        
                    </comment>
                    <comment line="434">
                        Solve for the current entry                        
                    </comment>
                    <comment line="437">
                        Move this known solution over to the right hand side for the
                         remaining equations                        
                    </comment>
                    <declaration name="xd" type="double[]" line="423"/>
                    <scope line="425">
                        <declaration name="row" type="SparseVector" line="428"/>
                        <declaration name="index" type="int[]" line="429"/>
                        <declaration name="used" type="int" line="430"/>
                        <declaration name="data" type="double[]" line="431"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>