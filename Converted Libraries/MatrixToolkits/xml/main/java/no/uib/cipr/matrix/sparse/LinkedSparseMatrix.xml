<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="lombok.AllArgsConstructor"/>
        <import package="lombok.ToString"/>
        <import package="lombok.extern.java.Log"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.io.MatrixInfo"/>
        <import package="no.uib.cipr.matrix.io.MatrixSize"/>
        <import package="no.uib.cipr.matrix.io.MatrixVectorReader"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Iterator"/>
        <class name="LinkedSparseMatrix" line="17">
            <extends class="AbstractMatrix"/>
            <comment line="38">
                java.util.LinkedList is doubly linked and therefore too heavyweight.                
            </comment>
            <comment line="47">
                there is a lot of duplicated code in this class between
                 row and col linkages, but subtle differences make it
                 extremely difficult to factor away.                
            </comment>
            <comment line="253">
                avoids object creation                
            </comment>
            <comment line="365">
                TODO: optimise matrix mults based on RHS Matrix                
            </comment>
            <javadoc line="17">
                A Linked List (with shortcuts to important nodes)
                  implementation of an {@code n x m} Matrix with {@code z} elements that
                  has a typical {@code O(z / m)} insertion / lookup cost
                  and an iterator that traverses columns then rows:
                  a good fit for unstructured sparse matrices. A secondary
                  link maintains fast transpose iteration.
                  &lt;p/&gt;
                  However, memory requirements
                  ({@code 1 instance (8 bytes), 2 int (16 bytes), 2 ref (16 bytes), 1 double (8 bytes) = 48 bytes}per matrix element, plus {@code 8 x numcol + 8 x numrow bytes}s for the cache) are slightly higher
                  than structured sparse matrix storage. Note that on 32 bit JVMs, or on 64 bit JVMs
                  with &lt;a href=&quot;https://wikis.oracle.com/display/HotSpotInternals/CompressedOops&quot;&gt;CompressedOops&lt;/a&gt;
                  enabled, references and ints only cost 4 bytes each, bringing the cost to 28 bytes per element.                
                <author>
                    Sam Halliday                    
                </author>
            </javadoc>
            <class name="Node" line="38">
                <comment line="60">
                    true if node exists, it&apos;s row tail exists, and has this row/col                    
                </comment>
                <comment line="65">
                    true if node exists, it&apos;s col tail exists, and has this row/col                    
                </comment>
                <comment line="141">
                    returns the node that either references this
                     index, or should reference it if inserted.                    
                </comment>
                <comment line="154">
                    helper for findPreceeding                    
                </comment>
                <declaration name="row" type="int" line="41"/>
                <declaration name="val" type="double" line="42"/>
                <declaration name="rowTail" type="Node" line="43"/>
            </class>
            <class name="Linked" line="49">
                <comment line="60">
                    true if node exists, it&apos;s row tail exists, and has this row/col                    
                </comment>
                <comment line="65">
                    true if node exists, it&apos;s col tail exists, and has this row/col                    
                </comment>
                <comment line="141">
                    returns the node that either references this
                     index, or should reference it if inserted.                    
                </comment>
                <comment line="154">
                    helper for findPreceeding                    
                </comment>
                <declaration name="head" type="Node" line="51"/>
                <declaration name="rows" type="Node[]" line="53"/>
                <method name="isHead" type="boolean" line="55">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <method name="isNextByRow" type="boolean" line="60">
                    <params>
                        <param name="node" type="Node"/>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <method name="isNextByCol" type="boolean" line="65">
                    <params>
                        <param name="node" type="Node"/>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <method name="get" type="double" line="69">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                    <scope line="72">
                        <declaration name="node" type="Node" line="73"/>
                    </scope>
                    <scope line="76">
                        <declaration name="node" type="Node" line="77"/>
                    </scope>
                </method>
                <method name="set" type="void" line="84">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                        <param name="val" type="double"/>
                    </params>
                    <scope line="85"/>
                    <scope line="91">
                        <declaration name="prevRow" type="Node" line="92"/>
                        <scope line="95">
                            <declaration name="prevCol" type="Node" line="96"/>
                            <declaration name="nextCol" type="Node" line="97"/>
                        </scope>
                    </scope>
                </method>
                <method name="findNextByCol" type="Node" line="105">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                    <declaration name="cur" type="Node" line="106"/>
                    <scope line="107"/>
                </method>
                <method name="updateCache" type="void" line="114">
                    <params>
                        <param name="inserted" type="Node"/>
                    </params>
                </method>
                <method name="delete" type="void" line="121">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                    <scope line="122"/>
                    <declaration name="precRow" type="Node" line="126"/>
                    <declaration name="precCol" type="Node" line="127"/>
                    <scope line="128"/>
                    <scope line="133"/>
                </method>
                <method name="findPreceedingByRow" type="Node" line="142">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                    <declaration name="last" type="Node" line="143"/>
                    <declaration name="cur" type="Node" line="144"/>
                    <scope line="145"/>
                </method>
                <method name="cachedByRow" type="Node" line="154">
                    <params>
                        <param name="row" type="int"/>
                    </params>
                </method>
                <method name="findPreceedingByCol" type="Node" line="161">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                    <declaration name="last" type="Node" line="162"/>
                    <declaration name="cur" type="Node" line="163"/>
                    <scope line="164"/>
                </method>
                <method name="cachedByCol" type="Node" line="172">
                    <params>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <method name="startOfRow" type="Node" line="179">
                    <params>
                        <param name="row" type="int"/>
                    </params>
                    <declaration name="prec" type="Node" line="181"/>
                </method>
                <method name="startOfCol" type="Node" line="187">
                    <params>
                        <param name="col" type="int"/>
                    </params>
                    <declaration name="prec" type="Node" line="189"/>
                </method>
            </class>
            <declaration name="links" type="Linked" line="196"/>
            <method name="LinkedSparseMatrix" type="constructor" line="198">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                </params>
            </method>
            <method name="LinkedSparseMatrix" type="constructor" line="203">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <method name="LinkedSparseMatrix" type="constructor" line="209">
                <params>
                    <param name="r" type="MatrixVectorReader"/>
                </params>
                <scope line="211">
                    <declaration name="info" type="MatrixInfo" line="212"/>
                    <declaration name="size" type="MatrixSize" line="215"/>
                    <declaration name="nz" type="int" line="220"/>
                    <declaration name="row" type="int[]" line="221"/>
                    <declaration name="column" type="int[]" line="222"/>
                    <declaration name="entry" type="double[]" line="223"/>
                </scope>
                <scope line="229"/>
            </method>
            <method name="zero" type="Matrix" line="236"/>
            <method name="get" type="double" line="242">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="set" type="void" line="247">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <class name="ReusableMatrixEntry" line="253">
                <comment line="60">
                    true if node exists, it&apos;s row tail exists, and has this row/col                    
                </comment>
                <comment line="65">
                    true if node exists, it&apos;s col tail exists, and has this row/col                    
                </comment>
                <comment line="141">
                    returns the node that either references this
                     index, or should reference it if inserted.                    
                </comment>
                <comment line="154">
                    helper for findPreceeding                    
                </comment>
                <implements interface="MatrixEntry"/>
                <declaration name="row" type="int" line="255"/>
                <declaration name="val" type="double" line="256"/>
                <method name="column" type="int" line="259"/>
                <method name="row" type="int" line="264"/>
                <method name="get" type="double" line="269"/>
                <method name="set" type="void" line="274">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="toString" type="String" line="279"/>
            </class>
            <method name="iterator" type="Iterator&lt;MatrixEntry&gt;" line="286">
                <anonymous_class line="287">
                    <declaration name="cur" type="Node" line="288"/>
                    <declaration name="entry" type="ReusableMatrixEntry" line="289"/>
                    <method name="hasNext" type="boolean" line="292"/>
                    <method name="next" type="MatrixEntry" line="297"/>
                    <method name="remove" type="void" line="306"/>
                </anonymous_class>
            </method>
            <method name="scale" type="Matrix" line="313">
                <params>
                    <param name="alpha" type="double"/>
                </params>
            </method>
            <method name="copy" type="Matrix" line="322"/>
            <method name="transpose" type="Matrix" line="327">
                <declaration name="old" type="Linked" line="328"/>
                <declaration name="node" type="Node" line="332"/>
                <scope line="333"/>
            </method>
            <method name="multAdd" type="Vector" line="341">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="node" type="Node" line="344"/>
                <scope line="345"/>
            </method>
            <method name="transMultAdd" type="Vector" line="353">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="node" type="Node" line="356"/>
                <scope line="357"/>
            </method>
            <method name="multAdd" type="Matrix" line="367">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="371">
                    <declaration name="row" type="Node" line="372"/>
                    <scope line="374">
                        <declaration name="node" type="Node" line="375"/>
                        <declaration name="v" type="double" line="376"/>
                        <scope line="377"/>
                    </scope>
                </scope>
            </method>
            <method name="transBmultAdd" type="Matrix" line="388">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="392">
                    <declaration name="row" type="Node" line="393"/>
                    <scope line="395">
                        <declaration name="node" type="Node" line="396"/>
                        <declaration name="v" type="double" line="397"/>
                        <scope line="398"/>
                    </scope>
                </scope>
            </method>
            <method name="transAmultAdd" type="Matrix" line="409">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="413">
                    <declaration name="row" type="Node" line="414"/>
                    <scope line="416">
                        <declaration name="node" type="Node" line="417"/>
                        <declaration name="v" type="double" line="418"/>
                        <scope line="419"/>
                    </scope>
                </scope>
            </method>
            <method name="transABmultAdd" type="Matrix" line="430">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="434">
                    <declaration name="row" type="Node" line="435"/>
                    <scope line="437">
                        <declaration name="node" type="Node" line="438"/>
                        <declaration name="v" type="double" line="439"/>
                        <scope line="440"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>