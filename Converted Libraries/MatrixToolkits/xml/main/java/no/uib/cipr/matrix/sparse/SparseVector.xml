<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.util.Iterator"/>
        <import package="no.uib.cipr.matrix.AbstractVector"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrices"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.VectorEntry"/>
        <class name="SparseVector" line="31">
            <extends class="AbstractVector"/>
            <implements interface="ISparseVector"/>
            <javadoc line="31">
                Sparse vector                
            </javadoc>
            <declaration name="data" type="double[]" line="36"/>
            <javadoc line="36">
                Data                
            </javadoc>
            <declaration name="index" type="int[]" line="41"/>
            <javadoc line="41">
                Indices to data                
            </javadoc>
            <declaration name="used" type="int" line="46"/>
            <javadoc line="46">
                How much has been used                
            </javadoc>
            <javadoc line="51">
                Constructor for SparseVector.                
                <param>
                    sizeSize of the vector                    
                </param>
                <param>
                    nzInitial number of non-zeros                    
                </param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="59">
                <params>
                    <param name="size" type="int"/>
                    <param name="nz" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Constructor for SparseVector, and copies the contents from the supplied
                  vector.                
                <param>
                    xVector to copy from                    
                </param>
                <param>
                    deepTrue if a deep copy is to be made. If the copy is shallow,
                      &lt;code&gt;x&lt;/code&gt; must be a &lt;code&gt;SparseVector&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="75">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="78">
                    <declaration name="nz" type="int" line="79"/>
                </scope>
                <scope line="83">
                    <declaration name="xs" type="SparseVector" line="84"/>
                </scope>
            </method>
            <javadoc line="91">
                Constructor for SparseVector, and copies the contents from the supplied
                  vector. Zero initial pre-allocation                
                <param>
                    xVector to copy from. A deep copy is made                    
                </param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="98">
                <params>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <javadoc line="102">
                Constructor for SparseVector. Zero initial pre-allocation                
                <param>
                    sizeSize of the vector                    
                </param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="108">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="112">
                Constructor for SparseVector                
                <param>
                    sizeSize of the vector                    
                </param>
                <param>
                    indexIndices of the vector                    
                </param>
                <param>
                    dataEntries of the vector                    
                </param>
                <param>
                    deepTrue for a deep copy. For shallow copies, the given indices
                      will be used internally                    
                </param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="125">
                <params>
                    <param name="size" type="int"/>
                    <param name="index" type="int[]"/>
                    <param name="data" type="double[]"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="131"/>
                <scope line="135"/>
            </method>
            <javadoc line="142">
                Constructor for SparseVector                
                <param>
                    sizeSize of the vector                    
                </param>
                <param>
                    indexThe vector indices are copies from this array                    
                </param>
                <param>
                    dataThe vector entries are copies from this array                    
                </param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="152">
                <params>
                    <param name="size" type="int"/>
                    <param name="index" type="int[]"/>
                    <param name="data" type="double[]"/>
                </params>
            </method>
            <method name="set" type="void" line="157">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <comment line="161">
                    TODO: should we check against zero when setting zeros?                    
                </comment>
                <declaration name="i" type="int" line="162"/>
            </method>
            <method name="add" type="void" line="167">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="i" type="int" line="170"/>
            </method>
            <method name="get" type="double" line="175">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="in" type="int" line="178"/>
            </method>
            <javadoc line="184">
                Tries to find the index. If it is not found, a reallocation is done, and
                  a new index is returned.                
            </javadoc>
            <method name="getIndex" type="int" line="188">
                <params>
                    <param name="ind" type="int"/>
                </params>
                <comment line="191">
                    Try to find column index                    
                </comment>
                <comment line="194">
                    Found                    
                </comment>
                <comment line="201">
                    Check available memory                    
                </comment>
                <comment line="204">
                    If zero-length, use new length of 1, else double the bandwidth                    
                </comment>
                <comment line="207">
                    Enforce the maximum size.                    
                </comment>
                <comment line="210">
                    Copy existing data into new arrays                    
                </comment>
                <comment line="217">
                    All ok, make room for insertion                    
                </comment>
                <comment line="221">
                    Put in new structure                    
                </comment>
                <comment line="225">
                    Update pointers                    
                </comment>
                <comment line="229">
                    Return insertion index                    
                </comment>
                <declaration name="i" type="int" line="191"/>
                <declaration name="newIndex" type="int[]" line="197"/>
                <declaration name="newData" type="double[]" line="198"/>
                <scope line="201">
                    <declaration name="newLength" type="int" line="204"/>
                </scope>
            </method>
            <method name="copy" type="SparseVector" line="233"/>
            <method name="zero" type="SparseVector" line="238"/>
            <method name="scale" type="SparseVector" line="245">
                <params>
                    <param name="alpha" type="double"/>
                </params>
                <comment line="247">
                    Quick return if possible                    
                </comment>
            </method>
            <method name="dot" type="double" line="259">
                <params>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yd" type="double[]" line="265"/>
                <declaration name="ret" type="double" line="267"/>
            </method>
            <method name="norm1" type="double" line="274">
                <declaration name="sum" type="double" line="275"/>
            </method>
            <method name="norm2" type="double" line="282">
                <declaration name="norm" type="double" line="283"/>
            </method>
            <method name="norm2_robust" type="double" line="290">
                <declaration name="scale" type="double" line="291"/>
                <scope line="292">
                    <scope line="293">
                        <declaration name="absxi" type="double" line="294"/>
                        <scope line="295"/>
                    </scope>
                </scope>
            </method>
            <method name="normInf" type="double" line="306">
                <declaration name="max" type="double" line="307"/>
            </method>
            <javadoc line="313">
                Returns the internal data                
            </javadoc>
            <method name="getData" type="double[]" line="316"/>
            <javadoc line="320">
                Returns the indices                
            </javadoc>
            <method name="getIndex" type="int[]" line="323">
                <comment line="328">
                    could run compact, or return subarray
                     compact();                    
                </comment>
                <declaration name="indices" type="int[]" line="329"/>
                <scope line="330"/>
            </method>
            <javadoc line="336">
                Number of entries used in the sparse structure                
            </javadoc>
            <method name="getUsed" type="int" line="339"/>
            <javadoc line="343">
                Compacts the vector                
            </javadoc>
            <method name="compact" type="void" line="346">
                <comment line="348">
                    catches zero entries                    
                </comment>
                <comment line="354">
                    Copy only non-zero entries                    
                </comment>
                <declaration name="nz" type="int" line="347"/>
                <scope line="349">
                    <declaration name="newIndex" type="int[]" line="350"/>
                    <declaration name="newData" type="double[]" line="351"/>
                    <scope line="355"/>
                </scope>
            </method>
            <method name="iterator" type="Iterator&lt;VectorEntry&gt;" line="368"/>
            <method name="set" type="Vector" line="373">
                <params>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yc" type="SparseVector" line="379"/>
                <scope line="381"/>
            </method>
            <class name="SparseVectorIterator" line="393">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="VectorEntry"/>
                    </type_params>
                </implements>
                <javadoc line="393">
                    Iterator over a sparse vector                    
                </javadoc>
                <declaration name="cursor" type="int" line="398"/>
                <declaration name="entry" type="SparseVectorEntry" line="400"/>
                <method name="hasNext" type="boolean" line="402"/>
                <method name="next" type="VectorEntry" line="406"/>
                <method name="remove" type="void" line="414"/>
            </class>
            <class name="SparseVectorEntry" line="420">
                <implements interface="VectorEntry"/>
                <javadoc line="420">
                    Entry of a sparse vector                    
                </javadoc>
                <declaration name="cursor" type="int" line="425"/>
                <method name="update" type="void" line="427">
                    <params>
                        <param name="cursor" type="int"/>
                    </params>
                </method>
                <method name="index" type="int" line="431"/>
                <method name="get" type="double" line="435"/>
                <method name="set" type="void" line="439">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>