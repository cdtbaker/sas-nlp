<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="org.eclipse.swt.events.DisposeEvent"/>
        <import package="org.eclipse.swt.events.DisposeListener"/>
        <import package="org.eclipse.swt.graphics.Image"/>
        <import package="org.eclipse.swt.graphics.Rectangle"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.nodes.PImage"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <class name="PSWTImage" line="41">
            <extends class="PNode"/>
            <javadoc line="41">
                &lt;b&gt;PSWTImage&lt;/b&gt; is a wrapper around a org.eclipse.swt.graphics.Image.                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="48"/>
            <declaration name="canvas" type="PSWTCanvas" line="50"/>
            <declaration name="image" type="Image" line="52"/>
            <javadoc line="54">
                Constructs a PSWTImage attached to the provided canvas and with a null
                  image.
                  The developer will need to call setImage for this node to be useful.
                  TODO: determine if canvas is actually necessary                
                <param>
                    canvas canvas to associate with the image node                    
                </param>
            </javadoc>
            <method name="PSWTImage" type="constructor" line="64">
                <params>
                    <param name="canvas" type="PSWTCanvas"/>
                </params>
                <anonymous_class line="66">
                    <method name="widgetDisposed" type="void" line="67">
                        <params>
                            <param name="de" type="DisposeEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="73">
                Constructs a PSWTImage wrapping the provided image.                
                <param>
                    canvas canvas to associate with the image node                    
                </param>
                <param>
                    image image to be wrapped by this PSWTImage                    
                </param>
            </javadoc>
            <method name="PSWTImage" type="constructor" line="79">
                <params>
                    <param name="canvas" type="PSWTCanvas"/>
                    <param name="image" type="Image"/>
                </params>
            </method>
            <javadoc line="84">
                Constructs a PSWTImage wrapping the provided image after loading it from
                  the file.                
                <param>
                    canvas canvas to associate with the image node                    
                </param>
                <param>
                    fileName path to the image, will be loaded and converted to an
                      Image internally                    
                </param>
            </javadoc>
            <method name="PSWTImage" type="constructor" line="92">
                <params>
                    <param name="canvas" type="PSWTCanvas"/>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <javadoc line="97">
                Returns the image that is shown by this node, may be null.                
                <return>
                    the image that is shown by this node                    
                </return>
            </javadoc>
            <method name="getImage" type="Image" line="102"/>
            <javadoc line="106">
                Set the image that is wrapped by this PImage node. This method will also
                  load the image using a MediaTracker before returning. And if the this
                  PImage is accelerated that image will be copied into an accelerated image
                  if needed. Note that this may cause undesired results with images that
                  have transparent regions, for those cases you may want to set the PImage
                  to be not accelerated.                
                <param>
                    filePath path to the file to load as an image                    
                </param>
            </javadoc>
            <method name="setImage" type="void" line="116">
                <params>
                    <param name="filePath" type="String"/>
                </params>
            </method>
            <javadoc line="120">
                Set the image that is wrapped by this PImage node. This method will also
                  load the image using a MediaTracker before returning. And if the this
                  PImage is accelerated that I&apos;m will be copied into an accelerated image
                  if needed. Note that this may cause undesired results with images that
                  have transparent regions, for those cases you may want to set the PImage
                  to be not accelerated.                
                <param>
                    newImage the image that should replace the current one                    
                </param>
            </javadoc>
            <method name="setImage" type="void" line="130">
                <params>
                    <param name="newImage" type="Image"/>
                </params>
                <declaration name="old" type="Image" line="131"/>
                <scope line="134">
                    <declaration name="bounds" type="Rectangle" line="135"/>
                </scope>
            </method>
            <javadoc line="143">
                Subclasses may override this method to provide different image dispose
                  behavior.                
            </javadoc>
            <method name="disposeImage" type="void" line="147">
                <scope line="148"/>
            </method>
            <javadoc line="153">
                {@inheritDoc}                
            </javadoc>
            <method name="paint" type="void" line="154">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="155">
                    <declaration name="r" type="Rectangle" line="156"/>
                    <declaration name="b" type="PBounds" line="157"/>
                    <declaration name="g2" type="SWTGraphics2D" line="158"/>
                    <scope line="160"/>
                    <scope line="163"/>
                </scope>
            </method>
        </class>
    </source>