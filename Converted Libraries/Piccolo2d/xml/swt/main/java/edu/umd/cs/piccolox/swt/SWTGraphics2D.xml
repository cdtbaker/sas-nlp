<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="java.awt.Color"/>
        <import package="java.awt.Composite"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.RenderingHints.Key"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Arc2D"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.RoundRectangle2D"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.BufferedImageOp"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.renderable.RenderableImage"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="org.eclipse.swt.SWT"/>
        <import package="org.eclipse.swt.graphics.Device"/>
        <import package="org.eclipse.swt.graphics.FontData"/>
        <import package="org.eclipse.swt.graphics.GC"/>
        <import package="org.eclipse.swt.graphics.Path"/>
        <import package="org.eclipse.swt.graphics.Transform"/>
        <class name="SWTGraphics2D" line="72">
            <extends class="Graphics2D"/>
            <comment line="138">
                //////////////////                
            </comment>
            <comment line="139">
                GET CLIP                
            </comment>
            <comment line="140">
                //////////////////                
            </comment>
            <comment line="233">
                //////////////                
            </comment>
            <comment line="234">
                COLOR METHODS                
            </comment>
            <comment line="235">
                //////////////                
            </comment>
            <comment line="301">
                //////////////                
            </comment>
            <comment line="302">
                FONT METHODS                
            </comment>
            <comment line="303">
                //////////////                
            </comment>
            <comment line="420">
                /////////////////////////                
            </comment>
            <comment line="421">
                AFFINE TRANSFORM METHODS                
            </comment>
            <comment line="422">
                /////////////////////////                
            </comment>
            <comment line="477">
                SUPPORT METHODS                
            </comment>
            <comment line="478">
                /////////////////////////////                
            </comment>
            <comment line="683">
                **************************************************************************                
            </comment>
            <comment line="684">
                *                
            </comment>
            <comment line="685">
                FOR NOW - ASSUME NO ROTATION ON THE TRANSFORM FOR THE FOLLOWING CALLS!                
            </comment>
            <comment line="686">
                **************************************************************************                
            </comment>
            <comment line="687">
                *                
            </comment>
            <comment line="1292">
                ///////////////////////////////                
            </comment>
            <comment line="1293">
                CURRENTLY UNSUPPORTED METHODS                
            </comment>
            <comment line="1294">
                ///////////////////////////////                
            </comment>
            <comment line="1530">
                ///////////////////////////////                
            </comment>
            <comment line="1531">
                CLEAN-UP METHODS                
            </comment>
            <comment line="1532">
                ///////////////////////////////                
            </comment>
            <javadoc line="72">
                An extension to Graphics2D to support an SWT Piccolo Canvas with little
                  modification to the current Piccolo architecture
                  There is an outstanding SWT bug request #33319 for more efficient
                  polyline/polygon rendering methods. It also appears that most of the code
                  below could be made obselete by bug fix #6490
                  A lot of this may also be duplicated in GEF - the eclipse Graphical Editor
                  Framework                
                <author>
                    Lance Good                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_FONT_SIZE" type="int" line="86"/>
            <declaration name="DEFAULT_STRING_TRANSPARENCY" type="boolean" line="88"/>
            <declaration name="CACHE_COUNT" type="int" line="90"/>
            <javadoc line="90">
                The number of Graphics Contexts active as determined by called to
                  incrementGCCount and decrementGCCount.                
            </javadoc>
            <declaration name="FONT_CACHE" type="HashMap" line="95"/>
            <javadoc line="95">
                Map from font names to Fonts.                
            </javadoc>
            <declaration name="COLOR_CACHE" type="HashMap" line="97"/>
            <javadoc line="97">
                Map from awt colors to swt colors.                
            </javadoc>
            <declaration name="SHAPE_CACHE" type="HashMap" line="99"/>
            <javadoc line="99">
                Map from awt shapess to swt Paths.                
            </javadoc>
            <declaration name="BUFFER" type="BufferedImage" line="101"/>
            <javadoc line="101">
                Buffer used to extract the graphics device.                
            </javadoc>
            <declaration name="TEMP_POINT" type="Point" line="104"/>
            <declaration name="TEMP_RECT" type="Rectangle2D" line="105"/>
            <declaration name="TEMP_LINE_RECT" type="Rectangle2D" line="106"/>
            <declaration name="SWT_RECT" type="org.eclipse.swt.graphics.Rectangle" line="107"/>
            <declaration name="gc" type="GC" line="109"/>
            <javadoc line="109">
                The Underlying GraphicsContext provided by swt.                
            </javadoc>
            <declaration name="device" type="Device" line="111"/>
            <javadoc line="111">
                Device onto which all graphics operations will ultimately take place.                
            </javadoc>
            <declaration name="transform" type="AffineTransform" line="113"/>
            <javadoc line="113">
                The current transform to apply to drawing operations.                
            </javadoc>
            <declaration name="swtTransform" type="Transform" line="115"/>
            <declaration name="curFont" type="org.eclipse.swt.graphics.Font" line="116"/>
            <javadoc line="116">
                The current font to use when drawing text.                
            </javadoc>
            <declaration name="lineWidth" type="double" line="118"/>
            <javadoc line="118">
                The current stroke width to use when drawing lines.                
            </javadoc>
            <javadoc line="121">
                Constructor for SWTGraphics2D.                
                <param>
                    gc The Eclipse Graphics Context onto which all Graphics2D
                      operations are delegating                    
                </param>
                <param>
                    device Device onto which ultimately all gc operations are drawn
                      onto                    
                </param>
            </javadoc>
            <method name="SWTGraphics2D" type="constructor" line="129">
                <params>
                    <param name="gc" type="GC"/>
                    <param name="device" type="Device"/>
                </params>
            </method>
            <javadoc line="141">
                {@inheritDoc}                
            </javadoc>
            <method name="getClipBounds" type="Rectangle" line="142">
                <declaration name="rect" type="org.eclipse.swt.graphics.Rectangle" line="143"/>
                <declaration name="aRect" type="Rectangle" line="144"/>
                <scope line="145"/>
                <scope line="148"/>
            </method>
            <javadoc line="154">
                {@inheritDoc}                
            </javadoc>
            <method name="clipRect" type="void" line="155">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="clip" type="org.eclipse.swt.graphics.Rectangle" line="160"/>
            </method>
            <javadoc line="166">
                {@inheritDoc}                
            </javadoc>
            <method name="setClip" type="void" line="167">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="175">
                This method isn&apos;t really supported by SWT - so will use the shape bounds.                
                <param>
                    s shape of the clipping region to apply to graphics operations                    
                </param>
            </javadoc>
            <method name="clip" type="void" line="180">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <declaration name="clipBds" type="Rectangle2D" line="181"/>
                <declaration name="clip" type="org.eclipse.swt.graphics.Rectangle" line="185"/>
            </method>
            <javadoc line="191">
                This method isn&apos;t really supported by SWT - so will use the shape bounds.                
                <param>
                    clip the desired clipping region's shape, will be simplified to
                      its bounds                    
                </param>
            </javadoc>
            <method name="setClip" type="void" line="197">
                <params>
                    <param name="clip" type="Shape"/>
                </params>
                <scope line="198"/>
                <scope line="201">
                    <declaration name="clipBds" type="Rectangle2D" line="202"/>
                </scope>
            </method>
            <javadoc line="210">
                {@inheritDoc}                
            </javadoc>
            <method name="getClip" type="Shape" line="211">
                <declaration name="rect" type="org.eclipse.swt.graphics.Rectangle" line="212"/>
                <declaration name="aRect" type="Rectangle2D" line="213"/>
                <scope line="214"/>
                <scope line="217"/>
            </method>
            <javadoc line="223">
                Returns a dummy device configuration.                
                <return>
                    a dummy device configuration                    
                </return>
            </javadoc>
            <method name="getDeviceConfiguration" type="GraphicsConfiguration" line="228"/>
            <javadoc line="236">
                {@inheritDoc}                
            </javadoc>
            <method name="getPaint" type="Paint" line="237"/>
            <javadoc line="241">
                {@inheritDoc}                
            </javadoc>
            <method name="setPaint" type="void" line="242">
                <params>
                    <param name="paint" type="Paint"/>
                </params>
                <scope line="243"/>
            </method>
            <javadoc line="248">
                {@inheritDoc}                
            </javadoc>
            <method name="getColor" type="Color" line="249">
                <declaration name="color" type="org.eclipse.swt.graphics.Color" line="250"/>
                <declaration name="awtColor" type="Color" line="251"/>
            </method>
            <javadoc line="255">
                {@inheritDoc}                
            </javadoc>
            <method name="setColor" type="void" line="256">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <declaration name="cachedColor" type="org.eclipse.swt.graphics.Color" line="257"/>
                <scope line="258"/>
            </method>
            <javadoc line="265">
                Sets the foreground color to the provided swt color.                
                <param>
                    foregroundColor new foreground color                    
                </param>
            </javadoc>
            <method name="setColor" type="void" line="270">
                <params>
                    <param name="foregroundColor" type="org.eclipse.swt.graphics.Color"/>
                </params>
            </method>
            <javadoc line="274">
                {@inheritDoc}                
            </javadoc>
            <method name="setBackground" type="void" line="275">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <declaration name="cachedColor" type="org.eclipse.swt.graphics.Color" line="276"/>
                <scope line="277"/>
            </method>
            <javadoc line="284">
                Sets the background color to the provided swt color.                
                <param>
                    backgroundColor new background color                    
                </param>
            </javadoc>
            <method name="setBackground" type="void" line="289">
                <params>
                    <param name="backgroundColor" type="org.eclipse.swt.graphics.Color"/>
                </params>
            </method>
            <javadoc line="293">
                {@inheritDoc}                
            </javadoc>
            <method name="getBackground" type="Color" line="294">
                <declaration name="color" type="org.eclipse.swt.graphics.Color" line="295"/>
                <declaration name="awtColor" type="Color" line="296"/>
            </method>
            <javadoc line="304">
                Returns the current swt font to use when drawing.                
                <return>
                    current swt font                    
                </return>
            </javadoc>
            <method name="getSWTFont" type="org.eclipse.swt.graphics.Font" line="309"/>
            <javadoc line="313">
                Returns the font metrics of the current SWT font.                
                <return>
                    font metrics of the current SWT font                    
                </return>
            </javadoc>
            <method name="getSWTFontMetrics" type="org.eclipse.swt.graphics.FontMetrics" line="318"/>
            <javadoc line="323">
                {@inheritDoc}                
            </javadoc>
            <method name="getFont" type="Font" line="324">
                <scope line="325">
                    <declaration name="style" type="int" line="326"/>
                    <declaration name="fd" type="FontData[]" line="328"/>
                    <scope line="329">
                        <scope line="330"/>
                        <scope line="333"/>
                    </scope>
                </scope>
                <scope line="341"/>
            </method>
            <javadoc line="346">
                {@inheritDoc}                
            </javadoc>
            <method name="setFont" type="void" line="347">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <comment line="348">
                    TODO:  prevent NPE                    
                </comment>
                <declaration name="fontString" type="String" line="349"/>
            </method>
            <javadoc line="355">
                Set the font for this SWTGraphics2D to &lt;code&gt;font&lt;/code&gt;.                
                <param>
                    font font for this SWTGraphics2D                    
                </param>
            </javadoc>
            <method name="setFont" type="void" line="360">
                <params>
                    <param name="font" type="org.eclipse.swt.graphics.Font"/>
                </params>
            </method>
            <javadoc line="364">
                Returns the SWT font matching the given font string.                
                <param>
                    fontString description of the font desired                    
                </param>
                <return>
                    matching font, or null if not found                    
                </return>
            </javadoc>
            <method name="getFont" type="org.eclipse.swt.graphics.Font" line="370">
                <params>
                    <param name="fontString" type="String"/>
                </params>
                <declaration name="cachedFont" type="org.eclipse.swt.graphics.Font" line="371"/>
                <scope line="372">
                    <declaration name="style" type="int" line="373"/>
                    <scope line="374"/>
                    <scope line="377"/>
                    <declaration name="name" type="String" line="381"/>
                    <declaration name="size" type="String" line="382"/>
                    <declaration name="sizeInt" type="int" line="383"/>
                    <scope line="384"/>
                    <scope line="387"/>
                </scope>
            </method>
            <javadoc line="398">
                Deprecated since SWT now handles this.                
                <deprecated>
                                        
                </deprecated>
                <return>
                    font that's been transformed by the current transform                    
                </return>
            </javadoc>
            <method name="getTransformedFont" type="org.eclipse.swt.graphics.Font" line="404">
                <scope line="405">
                    <declaration name="fontData" type="FontData" line="406"/>
                    <declaration name="height" type="int" line="407"/>
                    <declaration name="fontString" type="String" line="412"/>
                </scope>
            </method>
            <javadoc line="423">
                {@inheritDoc}                
            </javadoc>
            <method name="translate" type="void" line="424">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="429">
                {@inheritDoc}                
            </javadoc>
            <method name="translate" type="void" line="430">
                <params>
                    <param name="tx" type="double"/>
                    <param name="ty" type="double"/>
                </params>
            </method>
            <javadoc line="435">
                {@inheritDoc}                
            </javadoc>
            <method name="rotate" type="void" line="436">
                <params>
                    <param name="theta" type="double"/>
                </params>
            </method>
            <javadoc line="441">
                {@inheritDoc}                
            </javadoc>
            <method name="rotate" type="void" line="442">
                <params>
                    <param name="theta" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="447">
                {@inheritDoc}                
            </javadoc>
            <method name="scale" type="void" line="448">
                <params>
                    <param name="sx" type="double"/>
                    <param name="sy" type="double"/>
                </params>
            </method>
            <javadoc line="453">
                {@inheritDoc}                
            </javadoc>
            <method name="shear" type="void" line="454">
                <params>
                    <param name="shx" type="double"/>
                    <param name="shy" type="double"/>
                </params>
            </method>
            <javadoc line="459">
                {@inheritDoc}                
            </javadoc>
            <method name="transform" type="void" line="460">
                <params>
                    <param name="srcTransform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="465">
                {@inheritDoc}                
            </javadoc>
            <method name="setTransform" type="void" line="466">
                <params>
                    <param name="newTransform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="471">
                {@inheritDoc}                
            </javadoc>
            <method name="getTransform" type="AffineTransform" line="472"/>
            <javadoc line="479">
                Updates the SWT transform instance such that it matches AWTs counterpart.                
            </javadoc>
            <method name="updateSWTTransform" type="void" line="482">
                <declaration name="m" type="double[]" line="483"/>
            </method>
            <javadoc line="488">
                Converts a java 2d path iterator to a SWT path.                
                <param>
                    iter specifies the iterator to be converted.                    
                </param>
                <return>
                    the corresponding path object. Must be disposed() when no longer
                      used.                    
                </return>
            </javadoc>
            <method name="pathIterator2Path" type="Path" line="495">
                <params>
                    <param name="iter" type="PathIterator"/>
                </params>
                <comment line="524">
                    log this?                    
                </comment>
                <declaration name="coords" type="float[]" line="496"/>
                <declaration name="path" type="Path" line="498"/>
                <scope line="500">
                    <declaration name="type" type="int" line="501"/>
                </scope>
            </method>
            <javadoc line="532">
                {@inheritDoc}                
            </javadoc>
            <method name="clearRect" type="void" line="533">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="537">
                {@inheritDoc}                
            </javadoc>
            <method name="draw" type="void" line="538">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="539">
                    <declaration name="r2" type="Rectangle2D" line="540"/>
                </scope>
                <scope line="543">
                    <declaration name="e2" type="Ellipse2D" line="544"/>
                </scope>
                <scope line="547">
                    <declaration name="r2" type="RoundRectangle2D" line="548"/>
                </scope>
                <scope line="551">
                    <declaration name="a2" type="Arc2D" line="552"/>
                </scope>
                <scope line="555">
                    <declaration name="p" type="Path" line="556"/>
                    <scope line="557"/>
                </scope>
            </method>
            <javadoc line="565">
                {@inheritDoc}                
            </javadoc>
            <method name="fill" type="void" line="566">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="567">
                    <declaration name="r2" type="Rectangle2D" line="568"/>
                </scope>
                <scope line="571">
                    <declaration name="e2" type="Ellipse2D" line="572"/>
                </scope>
                <scope line="575">
                    <declaration name="r2" type="RoundRectangle2D" line="576"/>
                </scope>
                <scope line="579">
                    <declaration name="a2" type="Arc2D" line="580"/>
                </scope>
                <scope line="583">
                    <declaration name="p" type="Path" line="584"/>
                    <scope line="585"/>
                </scope>
            </method>
            <javadoc line="593">
                {@inheritDoc}                
            </javadoc>
            <method name="drawPolyline" type="void" line="594">
                <params>
                    <param name="xPoints" type="int[]"/>
                    <param name="yPoints" type="int[]"/>
                    <param name="nPoints" type="int"/>
                </params>
                <declaration name="ptArray" type="int[]" line="595"/>
                <scope line="596"/>
            </method>
            <javadoc line="607">
                Draw a polyline from the specified double array of points.                
                <param>
                    pts double array of points                    
                </param>
            </javadoc>
            <method name="drawPolyline" type="void" line="612">
                <params>
                    <param name="pts" type="double[]"/>
                </params>
                <declaration name="intPts" type="int[]" line="613"/>
            </method>
            <javadoc line="617">
                {@inheritDoc}                
            </javadoc>
            <method name="drawPolygon" type="void" line="618">
                <params>
                    <param name="xPoints" type="int[]"/>
                    <param name="yPoints" type="int[]"/>
                    <param name="nPoints" type="int"/>
                </params>
                <declaration name="ptArray" type="int[]" line="619"/>
                <scope line="620"/>
            </method>
            <javadoc line="630">
                Fill a polyline from the specified double array of points.                
                <param>
                    pts double array of points                    
                </param>
            </javadoc>
            <method name="fillPolygon" type="void" line="635">
                <params>
                    <param name="pts" type="double[]"/>
                </params>
                <declaration name="intPts" type="int[]" line="636"/>
            </method>
            <javadoc line="640">
                {@inheritDoc}                
            </javadoc>
            <method name="fillPolygon" type="void" line="641">
                <params>
                    <param name="xPoints" type="int[]"/>
                    <param name="yPoints" type="int[]"/>
                    <param name="nPoints" type="int"/>
                </params>
                <declaration name="ptArray" type="int[]" line="642"/>
                <scope line="643"/>
            </method>
            <javadoc line="653">
                {@inheritDoc}                
            </javadoc>
            <method name="drawLine" type="void" line="654">
                <params>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
            </method>
            <javadoc line="658">
                Draws a line, using the current color, between the points (x1, y1) and
                  (x2, y2) in this graphics context&apos;s coordinate system.                
                <param>
                    x1 the first point's x coordinate.                    
                </param>
                <param>
                    y1 the first point's y coordinate.                    
                </param>
                <param>
                    x2 the second point's x coordinate.                    
                </param>
                <param>
                    y2 the second point's y coordinate.                    
                </param>
            </javadoc>
            <method name="drawLine" type="void" line="667">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                </params>
                <declaration name="transformedX1" type="double" line="670"/>
                <declaration name="transformedY1" type="double" line="671"/>
                <declaration name="transformedX2" type="double" line="674"/>
                <declaration name="transformedY2" type="double" line="675"/>
            </method>
            <javadoc line="688">
                Copies the image to the specified position.                
                <param>
                    img swt image to be copied                    
                </param>
                <param>
                    x x component of position                    
                </param>
                <param>
                    y y component of position                    
                </param>
            </javadoc>
            <method name="copyArea" type="void" line="695">
                <params>
                    <param name="img" type="org.eclipse.swt.graphics.Image"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="702">
                {@inheritDoc}                
            </javadoc>
            <method name="copyArea" type="void" line="703">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
            </method>
            <javadoc line="713">
                Renders the text of the specified String, using the current text
                  attribute state in the Graphics2D context. The baseline of the first
                  character is at position (x, y) in the User Space. The rendering
                  attributes applied include the Clip, Transform, Paint, Font and Composite
                  attributes. For characters in script systems such as Hebrew and Arabic,
                  the glyphs can be rendered from right to left, in which case the
                  coordinate supplied is the location of the leftmost character on the
                  baseline.                
                <param>
                    str the string to be rendered                    
                </param>
                <param>
                    x the x coordinate of the location where the String should be
                      rendered                    
                </param>
                <param>
                    y the y coordinate of the location where the String should be
                      rendered                    
                </param>
                <param>
                    isTransparent whether a background should be painted behind the
                      text                    
                </param>
            </javadoc>
            <method name="drawString" type="void" line="731">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="isTransparent" type="boolean"/>
                </params>
            </method>
            <javadoc line="737">
                {@inheritDoc}                
            </javadoc>
            <method name="drawString" type="void" line="738">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="742">
                Renders the text of the specified String, using the current text
                  attribute state in the Graphics2D context. The baseline of the first
                  character is at position (x, y) in the User Space. The rendering
                  attributes applied include the Clip, Transform, Paint, Font and Composite
                  attributes. For characters in script systems such as Hebrew and Arabic,
                  the glyphs can be rendered from right to left, in which case the
                  coordinate supplied is the location of the leftmost character on the
                  baseline.                
                <param>
                    str the string to be rendered                    
                </param>
                <param>
                    x the x coordinate of the location where the String should be
                      rendered                    
                </param>
                <param>
                    y the y coordinate of the location where the String should be
                      rendered                    
                </param>
            </javadoc>
            <method name="drawString" type="void" line="758">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="762">
                Renders the text of the specified String, using the current text
                  attribute state in the Graphics2D context. The baseline of the first
                  character is at position (x, y) in the User Space. The rendering
                  attributes applied include the Clip, Transform, Paint, Font and Composite
                  attributes. For characters in script systems such as Hebrew and Arabic,
                  the glyphs can be rendered from right to left, in which case the
                  coordinate supplied is the location of the leftmost character on the
                  baseline.                
                <param>
                    str the string to be rendered                    
                </param>
                <param>
                    x the x coordinate of the location where the String should be
                      rendered                    
                </param>
                <param>
                    y the y coordinate of the location where the String should be
                      rendered                    
                </param>
                <param>
                    isTransparent whether a background should be painted behind the
                      text                    
                </param>
            </javadoc>
            <method name="drawString" type="void" line="780">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="isTransparent" type="boolean"/>
                </params>
            </method>
            <javadoc line="784">
                {@inheritDoc}                
            </javadoc>
            <method name="drawString" type="void" line="785">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="789">
                Renders the text of the specified String, using the current text
                  attribute state in the Graphics2D context. The baseline of the first
                  character is at position (x, y) in the User Space. The rendering
                  attributes applied include the Clip, Transform, Paint, Font and Composite
                  attributes. For characters in script systems such as Hebrew and Arabic,
                  the glyphs can be rendered from right to left, in which case the
                  coordinate supplied is the location of the leftmost character on the
                  baseline.                
                <param>
                    str the string to be rendered                    
                </param>
                <param>
                    x the x coordinate of the location where the String should be
                      rendered                    
                </param>
                <param>
                    y the y coordinate of the location where the String should be
                      rendered                    
                </param>
            </javadoc>
            <method name="drawText" type="void" line="805">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="809">
                Renders the text of the specified String, using the current text
                  attribute state in the Graphics2D context. The baseline of the first
                  character is at position (x, y) in the User Space. The rendering
                  attributes applied include the Clip, Transform, Paint, Font and Composite
                  attributes. For characters in script systems such as Hebrew and Arabic,
                  the glyphs can be rendered from right to left, in which case the
                  coordinate supplied is the location of the leftmost character on the
                  baseline.                
                <param>
                    str the string to be rendered                    
                </param>
                <param>
                    x the x coordinate of the location where the String should be
                      rendered                    
                </param>
                <param>
                    y the y coordinate of the location where the String should be
                      rendered                    
                </param>
                <param>
                    flags flags to apply to the string as defined by SWT                    
                </param>
            </javadoc>
            <method name="drawText" type="void" line="826">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="flags" type="int"/>
                </params>
            </method>
            <javadoc line="830">
                Renders the text of the specified String, using the current text
                  attribute state in the Graphics2D context. The baseline of the first
                  character is at position (x, y) in the User Space. The rendering
                  attributes applied include the Clip, Transform, Paint, Font and Composite
                  attributes. For characters in script systems such as Hebrew and Arabic,
                  the glyphs can be rendered from right to left, in which case the
                  coordinate supplied is the location of the leftmost character on the
                  baseline.                
                <param>
                    str the string to be rendered                    
                </param>
                <param>
                    x the x coordinate of the location where the String should be
                      rendered                    
                </param>
                <param>
                    y the y coordinate of the location where the String should be
                      rendered                    
                </param>
                <param>
                    flags flags to apply to the string as defined by SWT                    
                </param>
            </javadoc>
            <method name="drawText" type="void" line="847">
                <params>
                    <param name="str" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="flags" type="int"/>
                </params>
            </method>
            <javadoc line="853">
                {@inheritDoc}                
            </javadoc>
            <method name="drawRect" type="void" line="854">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="858">
                Draws the outline of the specified rectangle. The left and right edges of
                  the rectangle are at x and x + width. The top and bottom edges are at y
                  and y + height. The rectangle is drawn using the graphics context&apos;s
                  current color.                
                <param>
                    x the x coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    y the y coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    width the width of the rectangle to be drawn.                    
                </param>
                <param>
                    height the height of the rectangle to be drawn.                    
                </param>
            </javadoc>
            <method name="drawRect" type="void" line="869">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
            </method>
            <javadoc line="878">
                {@inheritDoc}                
            </javadoc>
            <method name="fillRect" type="void" line="879">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="883">
                Fills the specified rectangle. The left and right edges of the rectangle
                  are at x and x + width - 1. The top and bottom edges are at y and y +
                  height - 1. The resulting rectangle covers an area width pixels wide by
                  height pixels tall. The rectangle is filled using the graphics context&apos;s
                  current color.                
                <param>
                    x the x coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    y the y coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    width the width of the rectangle to be filled.                    
                </param>
                <param>
                    height the height of the rectangle to be filled.                    
                </param>
            </javadoc>
            <method name="fillRect" type="void" line="895">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
            </method>
            <javadoc line="903">
                {@inheritDoc}                
            </javadoc>
            <method name="drawRoundRect" type="void" line="905">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="arcWidth" type="int"/>
                    <param name="arcHeight" type="int"/>
                </params>
            </method>
            <javadoc line="909">
                Draws an outlined round-cornered rectangle using this graphics context&apos;s
                  current color. The left and right edges of the rectangle are at x and x +
                  width, respectively. The top and bottom edges of the rectangle are at y
                  and y + height.                
                <param>
                    x the x coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    y the y coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    width the width of the rectangle to be drawn.                    
                </param>
                <param>
                    height the height of the rectangle to be drawn.                    
                </param>
                <param>
                    arcWidth the horizontal diameter of the arc at the four corners.                    
                </param>
                <param>
                    arcHeight the vertical diameter of the arc at the four corners.                    
                </param>
            </javadoc>
            <method name="drawRoundRect" type="void" line="923">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                    <param name="arcWidth" type="double"/>
                    <param name="arcHeight" type="double"/>
                </params>
                <declaration name="tx" type="double" line="926"/>
                <declaration name="ty" type="double" line="927"/>
                <declaration name="twidth" type="double" line="928"/>
                <declaration name="theight" type="double" line="929"/>
                <declaration name="tarcWidth" type="double" line="933"/>
                <declaration name="tarcHeight" type="double" line="934"/>
            </method>
            <javadoc line="941">
                {@inheritDoc}                
            </javadoc>
            <method name="fillRoundRect" type="void" line="943">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="arcWidth" type="int"/>
                    <param name="arcHeight" type="int"/>
                </params>
            </method>
            <javadoc line="947">
                Fills the specified rounded corner rectangle with the current color. The
                  left and right edges of the rectangle are at x and x + width - 1,
                  respectively. The top and bottom edges of the rectangle are at y and y +
                  height - 1.                
                <param>
                    x the x coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    y the y coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    width the width of the rectangle to be filled.                    
                </param>
                <param>
                    height the height of the rectangle to be filled.                    
                </param>
                <param>
                    arcWidth the horizontal diameter of the arc at the four corners.                    
                </param>
                <param>
                    arcHeight the vertical diameter of the arc at the four corners.                    
                </param>
            </javadoc>
            <method name="fillRoundRect" type="void" line="961">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                    <param name="arcWidth" type="double"/>
                    <param name="arcHeight" type="double"/>
                </params>
                <declaration name="tx" type="double" line="964"/>
                <declaration name="ty" type="double" line="965"/>
                <declaration name="twidth" type="double" line="966"/>
                <declaration name="theight" type="double" line="967"/>
                <declaration name="tarcWidth" type="double" line="971"/>
                <declaration name="tarcHeight" type="double" line="972"/>
            </method>
            <javadoc line="979">
                {@inheritDoc}                
            </javadoc>
            <method name="drawOval" type="void" line="980">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="984">
                Draws the outline of an oval. The result is a circle or ellipse that fits
                  within the rectangle specified by the x, y, width, and height arguments.
                  The oval covers an area that is width + 1 pixels wide and height + 1
                  pixels tall.                
                <param>
                    x the x coordinate of the upper left corner of the oval to be
                      drawn.                    
                </param>
                <param>
                    y the y coordinate of the upper left corner of the oval to be
                      drawn.                    
                </param>
                <param>
                    width the width of the oval to be drawn.                    
                </param>
                <param>
                    height the height of the oval to be drawn.                    
                </param>
            </javadoc>
            <method name="drawOval" type="void" line="997">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
            </method>
            <javadoc line="1006">
                {@inheritDoc}                
            </javadoc>
            <method name="fillOval" type="void" line="1007">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="1011">
                Fills an oval bounded by the specified rectangle with the current color.                
                <param>
                    x the x coordinate of the upper left corner of the oval to be
                      filled.                    
                </param>
                <param>
                    y the y coordinate of the upper left corner of the oval to be
                      filled.                    
                </param>
                <param>
                    width the width of the oval to be filled.                    
                </param>
                <param>
                    height the height of the oval to be filled.                    
                </param>
            </javadoc>
            <method name="fillOval" type="void" line="1021">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
            </method>
            <javadoc line="1029">
                {@inheritDoc}                
            </javadoc>
            <method name="drawArc" type="void" line="1031">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="startAngle" type="int"/>
                    <param name="extent" type="int"/>
                </params>
            </method>
            <javadoc line="1035">
                Draws the outline of a circular or elliptical arc covering the specified
                  rectangle.
                  The resulting arc begins at startAngle and extends for arcAngle degrees,
                  using the current color. Angles are interpreted such that 0 degrees is at
                  the 3 o&apos;clock position. A positive value indicates a counter-clockwise
                  rotation while a negative value indicates a clockwise rotation.
                  The center of the arc is the center of the rectangle whose origin is (x,
                  y) and whose size is specified by the width and height arguments.
                  The resulting arc covers an area width + 1 pixels wide by height + 1
                  pixels tall.
                  The angles are specified relative to the non-square extents of the
                  bounding rectangle such that 45 degrees always falls on the line from the
                  center of the ellipse to the upper right corner of the bounding
                  rectangle. As a result, if the bounding rectangle is noticeably longer in
                  one axis than the other, the angles to the start and end of the arc
                  segment will be skewed farther along the longer axis of the bounds.                
                <param>
                    x the x coordinate of the upper-left corner of the arc to be
                      drawn.                    
                </param>
                <param>
                    y the y coordinate of the upper-left corner of the arc to be
                      drawn.                    
                </param>
                <param>
                    width the width of the arc to be drawn.                    
                </param>
                <param>
                    height the height of the arc to be drawn.                    
                </param>
                <param>
                    startAngle the beginning angle.                    
                </param>
                <param>
                    extent the angular extent of the arc, relative to the start angle.                    
                </param>
            </javadoc>
            <method name="drawArc" type="void" line="1067">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                    <param name="startAngle" type="double"/>
                    <param name="extent" type="double"/>
                </params>
            </method>
            <javadoc line="1076">
                {@inheritDoc}                
            </javadoc>
            <method name="fillArc" type="void" line="1078">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="startAngle" type="int"/>
                    <param name="extent" type="int"/>
                </params>
            </method>
            <javadoc line="1082">
                Draws a filledArc with the options provided.                
                <param>
                    x the x coordinate of the upper-left corner of the arc to be
                      filled.                    
                </param>
                <param>
                    y the y coordinate of the upper-left corner of the arc to be
                      filled.                    
                </param>
                <param>
                    width the width of the arc to be filled.                    
                </param>
                <param>
                    height the height of the arc to be filled.                    
                </param>
                <param>
                    startAngle the beginning angle.                    
                </param>
                <param>
                    extent the angular extent of the arc, relative to the start angle.                    
                </param>
            </javadoc>
            <method name="fillArc" type="void" line="1095">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                    <param name="startAngle" type="double"/>
                    <param name="extent" type="double"/>
                </params>
            </method>
            <javadoc line="1103">
                Draws the provided path.                
                <param>
                    p path to draw                    
                </param>
            </javadoc>
            <method name="drawPath" type="void" line="1108">
                <params>
                    <param name="p" type="Path"/>
                </params>
            </method>
            <javadoc line="1115">
                Draws a filled version of the provided path.                
                <param>
                    p path to draw filled                    
                </param>
            </javadoc>
            <method name="fillPath" type="void" line="1120">
                <params>
                    <param name="p" type="Path"/>
                </params>
            </method>
            <javadoc line="1126">
                Draws the provided image at the position specified.                
                <param>
                    image image to draw                    
                </param>
                <param>
                    x x component of the position                    
                </param>
                <param>
                    y y component of the position                    
                </param>
            </javadoc>
            <method name="drawImage" type="void" line="1133">
                <params>
                    <param name="image" type="org.eclipse.swt.graphics.Image"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="bounds" type="org.eclipse.swt.graphics.Rectangle" line="1134"/>
            </method>
            <javadoc line="1142">
                Draws the source region from the image onto the destination region of the
                  graphics context. Stretching if necessary.                
                <param>
                    image image from which to copy                    
                </param>
                <param>
                    srcX the left of the source region                    
                </param>
                <param>
                    srcY the top of the source region                    
                </param>
                <param>
                    srcW the width of the source region                    
                </param>
                <param>
                    srcH the height of the source region                    
                </param>
                <param>
                    destX the left of the destination region                    
                </param>
                <param>
                    destY the top of the destination region                    
                </param>
                <param>
                    destW the width of the destination region                    
                </param>
                <param>
                    destH the height of the destination region                    
                </param>
            </javadoc>
            <method name="drawImage" type="void" line="1157">
                <params>
                    <param name="image" type="org.eclipse.swt.graphics.Image"/>
                    <param name="srcX" type="int"/>
                    <param name="srcY" type="int"/>
                    <param name="srcW" type="int"/>
                    <param name="srcH" type="int"/>
                    <param name="destX" type="double"/>
                    <param name="destY" type="double"/>
                    <param name="destW" type="double"/>
                    <param name="destH" type="double"/>
                </params>
            </method>
            <javadoc line="1165">
                Sets the line width to use when drawing shapes.                
                <param>
                    lineWidth width of line when drawing shapes                    
                </param>
            </javadoc>
            <method name="setLineWidth" type="void" line="1170">
                <params>
                    <param name="lineWidth" type="double"/>
                </params>
            </method>
            <javadoc line="1174">
                Computes the width of the line after it passes through the current
                  transform.                
                <return>
                    resulting width of line after being transform                    
                </return>
            </javadoc>
            <method name="getTransformedLineWidth" type="int" line="1180"/>
            <javadoc line="1187">
                Fills a gradient rectangle of in the direction specified.                
                <param>
                    x left of resulting rectangle                    
                </param>
                <param>
                    y top of resulting rectangle                    
                </param>
                <param>
                    width width of resulting rectangle                    
                </param>
                <param>
                    height height of resulting rectangle                    
                </param>
                <param>
                    vertical whether the gradient should be drawn vertically or
                      horizontally                    
                </param>
            </javadoc>
            <method name="fillGradientRectangle" type="void" line="1198">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                    <param name="vertical" type="boolean"/>
                </params>
            </method>
            <javadoc line="1206">
                @deprecated since underlying method has been deprecated                
                <param>
                    xOr whether to be in xOr mode                    
                </param>
            </javadoc>
            <method name="setXORMode" type="void" line="1210">
                <params>
                    <param name="xOr" type="boolean"/>
                </params>
            </method>
            <javadoc line="1214">
                Returns the advance width of the character provided in the current font.                
                <param>
                    ch character to calculate the advance width of.                    
                </param>
                <return>
                    advance width of the character in the current font                    
                </return>
            </javadoc>
            <method name="getAdvanceWidth" type="int" line="1221">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <declaration name="scaledFont" type="org.eclipse.swt.graphics.Font" line="1222"/>
                <declaration name="width" type="int" line="1224"/>
            </method>
            <javadoc line="1229">
                Returns the width of the character provided in the current font.                
                <param>
                    ch character to calculate the width of.                    
                </param>
                <return>
                    width of the character in the current font                    
                </return>
            </javadoc>
            <method name="getCharWidth" type="int" line="1236">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <declaration name="scaledFont" type="org.eclipse.swt.graphics.Font" line="1237"/>
                <declaration name="width" type="int" line="1239"/>
            </method>
            <javadoc line="1244">
                Returns the extent of the provided string in the current font.                
                <param>
                    str string to calculate the extent of.                    
                </param>
                <return>
                    extent of the string in the current font                    
                </return>
            </javadoc>
            <method name="stringExtent" type="org.eclipse.swt.graphics.Point" line="1251">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="scaledFont" type="org.eclipse.swt.graphics.Font" line="1252"/>
                <declaration name="extent" type="org.eclipse.swt.graphics.Point" line="1254"/>
            </method>
            <javadoc line="1259">
                Returns the extent of the provided text in the current font.                
                <param>
                    str string to calculate the extent of.                    
                </param>
                <return>
                    extent of the string in the current font                    
                </return>
            </javadoc>
            <method name="textExtent" type="org.eclipse.swt.graphics.Point" line="1266">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="scaledFont" type="org.eclipse.swt.graphics.Font" line="1267"/>
                <declaration name="extent" type="org.eclipse.swt.graphics.Point" line="1269"/>
            </method>
            <javadoc line="1274">
                Returns the extent of the provided text in the current font assuming the
                  flags given.                
                <param>
                    str string to calculate the extent of                    
                </param>
                <param>
                    flags flags to apply to the rendered font before calculation of
                      extent takes place                    
                </param>
                <return>
                    extent of the string in the current font assuming flags provided                    
                </return>
            </javadoc>
            <method name="textExtent" type="org.eclipse.swt.graphics.Point" line="1283">
                <params>
                    <param name="str" type="String"/>
                    <param name="flags" type="int"/>
                </params>
                <declaration name="scaledFont" type="org.eclipse.swt.graphics.Font" line="1284"/>
                <declaration name="extent" type="org.eclipse.swt.graphics.Point" line="1286"/>
            </method>
            <javadoc line="1295">
                {@inheritDoc}                
            </javadoc>
            <method name="drawString" type="void" line="1296">
                <params>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="1299">
                {@inheritDoc}                
            </javadoc>
            <method name="drawString" type="void" line="1300">
                <params>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="1303">
                {@inheritDoc}                
            </javadoc>
            <method name="drawGlyphVector" type="void" line="1304">
                <params>
                    <param name="g" type="GlyphVector"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="1307">
                Returns whether the given rect and shape touch. If onStroke = true then
                  it&apos;ll include the width of the stroke when calculating.                
                <param>
                    rect rect to test                    
                </param>
                <param>
                    s shape to test                    
                </param>
                <param>
                    onStroke whether to consider the width of the stroke                    
                </param>
                <return>
                    true if they touch                    
                </return>
            </javadoc>
            <method name="hit" type="boolean" line="1316">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="s" type="Shape"/>
                    <param name="onStroke" type="boolean"/>
                </params>
            </method>
            <javadoc line="1320">
                {@inheritDoc}                
            </javadoc>
            <method name="setComposite" type="void" line="1321">
                <params>
                    <param name="comp" type="Composite"/>
                </params>
            </method>
            <javadoc line="1324">
                {@inheritDoc}                
            </javadoc>
            <method name="setStroke" type="void" line="1325">
                <params>
                    <param name="s" type="Stroke"/>
                </params>
            </method>
            <javadoc line="1328">
                {@inheritDoc}                
            </javadoc>
            <method name="setRenderingHint" type="void" line="1329">
                <params>
                    <param name="hintKey" type="Key"/>
                    <param name="hintValue" type="Object"/>
                </params>
            </method>
            <javadoc line="1332">
                {@inheritDoc}                
            </javadoc>
            <method name="getRenderingHint" type="Object" line="1333">
                <params>
                    <param name="hintKey" type="Key"/>
                </params>
            </method>
            <javadoc line="1337">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics2D#setRenderingHints(Map)                    
                </see>
            </javadoc>
            <method name="setRenderingHints" type="void" line="1342">
                <params>
                    <param name="hints" type="Map"/>
                </params>
            </method>
            <javadoc line="1345">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics2D#addRenderingHints(Map)                    
                </see>
            </javadoc>
            <method name="addRenderingHints" type="void" line="1350">
                <params>
                    <param name="hints" type="Map"/>
                </params>
            </method>
            <javadoc line="1353">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics2D#getRenderingHints()                    
                </see>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="1358"/>
            <javadoc line="1362">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics2D#getComposite()                    
                </see>
            </javadoc>
            <method name="getComposite" type="Composite" line="1367"/>
            <javadoc line="1371">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics2D#getStroke()                    
                </see>
            </javadoc>
            <method name="getStroke" type="Stroke" line="1376"/>
            <javadoc line="1380">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics2D#getFontRenderContext()                    
                </see>
            </javadoc>
            <method name="getFontRenderContext" type="FontRenderContext" line="1385"/>
            <javadoc line="1389">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics#create()                    
                </see>
            </javadoc>
            <method name="create" type="Graphics" line="1394"/>
            <javadoc line="1398">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics#setPaintMode()                    
                </see>
            </javadoc>
            <method name="setPaintMode" type="void" line="1403"/>
            <javadoc line="1406">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics#setXORMode(Color)                    
                </see>
            </javadoc>
            <method name="setXORMode" type="void" line="1411">
                <params>
                    <param name="c1" type="Color"/>
                </params>
            </method>
            <javadoc line="1414">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics#getFontMetrics(Font)                    
                </see>
            </javadoc>
            <method name="getFontMetrics" type="FontMetrics" line="1419">
                <params>
                    <param name="f" type="Font"/>
                </params>
            </method>
            <javadoc line="1423">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics2D#drawImage(Image,AffineTransform,ImageObserver)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="1428">
                <params>
                    <param name="img" type="Image"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="obs" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1432">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics2D#drawImage(BufferedImage,BufferedImageOp,int,int)                    
                </see>
            </javadoc>
            <method name="drawImage" type="void" line="1438">
                <params>
                    <param name="img" type="BufferedImage"/>
                    <param name="op" type="BufferedImageOp"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="1441">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics2D#drawRenderedImage(RenderedImage,AffineTransform)                    
                </see>
            </javadoc>
            <method name="drawRenderedImage" type="void" line="1447">
                <params>
                    <param name="img" type="RenderedImage"/>
                    <param name="xform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="1450">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics2D#drawRenderableImage(RenderableImage,AffineTransform)                    
                </see>
            </javadoc>
            <method name="drawRenderableImage" type="void" line="1456">
                <params>
                    <param name="img" type="RenderableImage"/>
                    <param name="xform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="1459">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics#drawImage(Image,int,int,ImageObserver)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="1464">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1468">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics#drawImage(Image,int,int,int,int,ImageObserver)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="1475">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1479">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics#drawImage(Image,int,int,Color,ImageObserver)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="1485">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1489">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics#drawImage(Image,int,int,int,int,Color,ImageObserver)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="1496">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1500">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics#drawImage(Image,int,int,int,int,int,int,int,int,ImageObserver)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="1507">
                <params>
                    <param name="img" type="Image"/>
                    <param name="dx1" type="int"/>
                    <param name="dy1" type="int"/>
                    <param name="dx2" type="int"/>
                    <param name="dy2" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1511">
                {@inheritDoc}                
                <see>
                    java.awt.Graphics#drawImage(Image,int,int,int,int,int,int,int,int,Color,ImageObserver)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="1519">
                <params>
                    <param name="img" type="Image"/>
                    <param name="dx1" type="int"/>
                    <param name="dy1" type="int"/>
                    <param name="dx2" type="int"/>
                    <param name="dy2" type="int"/>
                    <param name="sx1" type="int"/>
                    <param name="sy1" type="int"/>
                    <param name="sx2" type="int"/>
                    <param name="sy2" type="int"/>
                    <param name="bgcolor" type="Color"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1523">
                DO NOTHING - DISPOSED IN RENDERING CLASS.                
            </javadoc>
            <method name="dispose" type="void" line="1526"/>
            <javadoc line="1533">
                Increases the number of uses of this graphics 2d object.                
            </javadoc>
            <method name="incrementGCCount" type="void" line="1536"/>
            <javadoc line="1540">
                Decreases the number of uses of this graphics 2d object.                
            </javadoc>
            <method name="decrementGCCount" type="void" line="1543">
                <scope line="1546">
                    <scope line="1547">
                        <declaration name="font" type="org.eclipse.swt.graphics.Font" line="1548"/>
                    </scope>
                    <scope line="1552">
                        <declaration name="color" type="org.eclipse.swt.graphics.Color" line="1553"/>
                    </scope>
                    <scope line="1557">
                        <declaration name="path" type="Path" line="1558"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>