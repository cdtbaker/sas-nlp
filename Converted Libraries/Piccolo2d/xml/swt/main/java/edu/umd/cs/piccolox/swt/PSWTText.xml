<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="org.eclipse.swt.graphics.FontMetrics"/>
        <import package="org.eclipse.swt.graphics.GC"/>
        <import package="org.eclipse.swt.graphics.Point"/>
        <import package="org.eclipse.swt.widgets.Display"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <class name="PSWTText" line="20">
            <extends class="PNode"/>
            <javadoc line="20">
                &lt;b&gt;PSWTText&lt;/b&gt; creates a visual component to support text. Multiple lines
                  can be entered, and basic editing is supported. A caret is drawn, and can be
                  repositioned with mouse clicks. The text object is positioned so that its
                  upper-left corner is at the origin, though this can be changed with the
                  translate methods.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="28"/>
            <declaration name="DEFAULT_GREEK_THRESHOLD" type="double" line="29"/>
            <javadoc line="29">
                Below this magnification render text as &apos;greek&apos;.                
            </javadoc>
            <declaration name="DEFAULT_GREEK_COLOR" type="Color" line="33"/>
            <javadoc line="33">
                Default color of text rendered as &apos;greek&apos;.                
            </javadoc>
            <declaration name="DEFAULT_FONT_NAME" type="String" line="37"/>
            <javadoc line="37">
                Default font name of text.                
            </javadoc>
            <declaration name="DEFAULT_FONT_STYLE" type="int" line="41"/>
            <javadoc line="41">
                Default font style for text.                
            </javadoc>
            <declaration name="DEFAULT_FONT_SIZE" type="int" line="45"/>
            <javadoc line="45">
                Default font size for text.                
            </javadoc>
            <declaration name="DEFAULT_FONT" type="Font" line="49"/>
            <javadoc line="49">
                Default font for text.                
            </javadoc>
            <declaration name="DEFAULT_PEN_COLOR" type="Color" line="53"/>
            <javadoc line="53">
                Default color for text.                
            </javadoc>
            <declaration name="DEFAULT_TEXT" type="String" line="57"/>
            <javadoc line="57">
                Default text when new text area is created.                
            </javadoc>
            <declaration name="DEFAULT_IS_TRANSPARENT" type="boolean" line="61"/>
            <javadoc line="61">
                Default background transparency state.                
            </javadoc>
            <declaration name="DEFAULT_PADDING" type="int" line="65"/>
            <javadoc line="65">
                Default padding.                
            </javadoc>
            <declaration name="transparent" type="boolean" line="69"/>
            <javadoc line="69">
                Whether the text be drawn with a transparent background.                
            </javadoc>
            <declaration name="greekThreshold" type="double" line="73"/>
            <javadoc line="73">
                Below this magnification text is rendered as greek.                
            </javadoc>
            <declaration name="greekColor" type="Color" line="77"/>
            <javadoc line="77">
                Color for greek text.                
            </javadoc>
            <declaration name="penColor" type="Color" line="81"/>
            <javadoc line="81">
                Current pen color.                
            </javadoc>
            <declaration name="font" type="Font" line="85"/>
            <javadoc line="85">
                Current text font.                
            </javadoc>
            <declaration name="padding" type="int" line="89"/>
            <javadoc line="89">
                The amount of padding on each side of the text.                
            </javadoc>
            <declaration name="lines" type="ArrayList" line="93"/>
            <javadoc line="93">
                Each element is one line of text.                
            </javadoc>
            <declaration name="translateX" type="double" line="97"/>
            <javadoc line="97">
                Translation offset X.                
            </javadoc>
            <declaration name="translateY" type="double" line="101"/>
            <javadoc line="101">
                Translation offset Y.                
            </javadoc>
            <javadoc line="105">
                Default constructor for PSWTTest.                
            </javadoc>
            <method name="PSWTText" type="constructor" line="108"/>
            <javadoc line="111">
                PSWTTest constructor with initial text.                
                <param>
                    str The initial text.                    
                </param>
            </javadoc>
            <method name="PSWTText" type="constructor" line="115">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="118">
                PSWTTest constructor with initial text and font.                
                <param>
                    str The initial text.                    
                </param>
                <param>
                    font The font for this PSWTText component.                    
                </param>
            </javadoc>
            <method name="PSWTText" type="constructor" line="123">
                <params>
                    <param name="str" type="String"/>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <javadoc line="128">
                Returns the current pen color.                
                <return>
                    current pen color                    
                </return>
            </javadoc>
            <method name="getPenColor" type="Color" line="132"/>
            <javadoc line="135">
                Sets the current pen color.                
                <param>
                    color use this color.                    
                </param>
            </javadoc>
            <method name="setPenColor" type="void" line="139">
                <params>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <javadoc line="143">
                Returns the current pen paint.                
                <return>
                    the current pen paint                    
                </return>
            </javadoc>
            <method name="getPenPaint" type="Paint" line="147"/>
            <javadoc line="150">
                Sets the current pen paint.                
                <param>
                    aPaint use this paint.                    
                </param>
            </javadoc>
            <method name="setPenPaint" type="void" line="154">
                <params>
                    <param name="aPaint" type="Paint"/>
                </params>
            </method>
            <javadoc line="157">
                Returns the current background color.                
                <return>
                    the current background color                    
                </return>
            </javadoc>
            <method name="getBackgroundColor" type="Color" line="161"/>
            <javadoc line="164">
                Sets the current background color.                
                <param>
                    color use this color.                    
                </param>
            </javadoc>
            <method name="setBackgroundColor" type="void" line="168">
                <params>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <javadoc line="171">
                Sets whether the text should be drawn in transparent mode, i.e., whether
                  the background should be drawn or not.                
                <param>
                    transparent the new transparency of the background                    
                </param>
            </javadoc>
            <method name="setTransparent" type="void" line="176">
                <params>
                    <param name="transparent" type="boolean"/>
                </params>
            </method>
            <javadoc line="179">
                Returns whether the text should be drawn using the transparent mode,
                  i.e., whether the background should be drawn or not.                
                <return>
                    true if background will not be drawn                    
                </return>
            </javadoc>
            <method name="isTransparent" type="boolean" line="184"/>
            <javadoc line="187">
                Returns the current greek threshold. Below this magnification text is
                  rendered as &apos;greek&apos;.                
                <return>
                    magnification at which the text will not be drawn and a blank
                      rectangle will appear instead                    
                </return>
            </javadoc>
            <method name="getGreekThreshold" type="double" line="193"/>
            <javadoc line="196">
                Sets the current greek threshold. Below this magnification text is
                  rendered as &apos;greek&apos;.                
                <param>
                    threshold compared to renderContext magnification.                    
                </param>
            </javadoc>
            <method name="setGreekThreshold" type="void" line="201">
                <params>
                    <param name="threshold" type="double"/>
                </params>
            </method>
            <javadoc line="205">
                Returns the current font.                
                <return>
                    current font in node                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="209"/>
            <javadoc line="212">
                Return the text within this text component. Multiline text is returned as
                  a single string where each line is separated by a newline character.
                  Single line text does not have any newline characters.                
                <return>
                    string containing this node's text                    
                </return>
            </javadoc>
            <method name="getText" type="String" line="218">
                <declaration name="result" type="StringBuffer" line="219"/>
                <declaration name="lineIterator" type="Iterator" line="220"/>
                <scope line="221"/>
                <scope line="225"/>
            </method>
            <javadoc line="230">
                Sets the font for the text.
                  &lt;p&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; Java has a serious bug in that it does not support very
                  small fonts. In particular, fonts that are less than about a pixel high
                  just don&apos;t work. Since in Jazz, it is common to create objects of
                  arbitrary sizes, and then scale them, an application can easily create a
                  text object with a very small font by accident. The workaround for this
                  bug is to create a larger font for the text object, and then scale the
                  node down correspondingly.                
                <param>
                    aFont use this font.                    
                </param>
            </javadoc>
            <method name="setFont" type="void" line="242">
                <params>
                    <param name="aFont" type="Font"/>
                </params>
            </method>
            <javadoc line="246">
                Sets the text of this visual component to str. Multiple lines of text are
                  separated by a newline character.                
                <param>
                    str use this string.                    
                </param>
            </javadoc>
            <method name="setText" type="void" line="251">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="pos" type="int" line="252"/>
                <declaration name="index" type="int" line="253"/>
                <declaration name="done" type="boolean" line="254"/>
                <scope line="256">
                    <scope line="258"/>
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="270">
                Set text translation offset X.                
                <param>
                    x the X translation.                    
                </param>
            </javadoc>
            <method name="setTranslateX" type="void" line="274">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="277">
                Get the X offset translation.                
                <return>
                    the X translation.                    
                </return>
            </javadoc>
            <method name="getTranslateX" type="double" line="281"/>
            <javadoc line="284">
                Set text translation offset Y.                
                <param>
                    y the Y translation.                    
                </param>
            </javadoc>
            <method name="setTranslateY" type="void" line="288">
                <params>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="291">
                Get the Y offset translation.                
                <return>
                    the Y translation.                    
                </return>
            </javadoc>
            <method name="getTranslateY" type="double" line="295"/>
            <javadoc line="298">
                Set the text translation offset to the specified position.                
                <param>
                    x the X component of translation                    
                </param>
                <param>
                    y the Y component of translation                    
                </param>
            </javadoc>
            <method name="setTranslation" type="void" line="303">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="308">
                Set the text translation offset to point p.                
                <param>
                    p The translation offset.                    
                </param>
            </javadoc>
            <method name="setTranslation" type="void" line="312">
                <params>
                    <param name="p" type="Point2D"/>
                </params>
            </method>
            <javadoc line="315">
                Get the text translation offset.                
                <return>
                    The translation offset.                    
                </return>
            </javadoc>
            <method name="getTranslation" type="Point2D" line="319">
                <declaration name="p" type="Point2D" line="320"/>
            </method>
            <javadoc line="323">
                Renders the text object.
                  &lt;p&gt;
                  The transform, clip, and composite will be set appropriately when this
                  object is rendered. It is up to this object to restore the transform,
                  clip, and composite of the Graphics2D if this node changes any of them.
                  However, the color, font, and stroke are unspecified by Jazz. This object
                  should set those things if they are used, but they do not need to be
                  restored.                
                <param>
                    ppc Contains information about current render.                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="334">
                <params>
                    <param name="ppc" type="PPaintContext"/>
                </params>
                <scope line="335"/>
                <declaration name="g2" type="Graphics2D" line="338"/>
                <declaration name="at" type="AffineTransform" line="339"/>
                <declaration name="translated" type="boolean" line="340"/>
                <scope line="341"/>
                <declaration name="renderedFontSize" type="double" line="346"/>
                <scope line="347"/>
                <scope line="350"/>
                <scope line="353"/>
            </method>
            <javadoc line="357">
                Paints this object as greek.                
                <param>
                    ppc The graphics context to paint into.                    
                </param>
            </javadoc>
            <method name="paintAsGreek" type="void" line="361">
                <params>
                    <param name="ppc" type="PPaintContext"/>
                </params>
                <declaration name="g2" type="Graphics2D" line="362"/>
                <scope line="363"/>
            </method>
            <javadoc line="368">
                Paints this object normally (show it&apos;s text). Note that the entire text
                  gets rendered so that it&apos;s upper left corner appears at the origin of
                  this local object.                
                <param>
                    ppc The graphics context to paint into.                    
                </param>
            </javadoc>
            <method name="paintAsText" type="void" line="374">
                <params>
                    <param name="ppc" type="PPaintContext"/>
                </params>
                <declaration name="sg2" type="SWTGraphics2D" line="375"/>
                <scope line="376">
                    <scope line="377"/>
                    <scope line="380"/>
                </scope>
                <declaration name="line" type="String" line="388"/>
                <declaration name="y" type="double" line="389"/>
                <declaration name="fontMetrics" type="FontMetrics" line="390"/>
                <declaration name="lineIterator" type="Iterator" line="391"/>
                <scope line="392">
                    <scope line="394"/>
                </scope>
            </method>
            <javadoc line="401">
                Recalculates this node&apos;s bounding box by examining it&apos;s text content.                
            </javadoc>
            <method name="recomputeBounds" type="void" line="404">
                <declaration name="gc" type="GC" line="405"/>
                <declaration name="newBounds" type="Point" line="406"/>
                <scope line="407"/>
                <scope line="410"/>
            </method>
            <javadoc line="416">
                Determines if this node&apos;s text is essentially empty.                
                <return>
                    true if the text is the empty string                    
                </return>
            </javadoc>
            <method name="isTextEmpty" type="boolean" line="420"/>
            <javadoc line="423">
                Calculates the bounds of the text in the box as measured by the given
                  graphics context and font metrics.                
                <param>
                    gc graphics context from which the measurements are done                    
                </param>
                <return>
                    point representing the dimensions of the text's bounds                    
                </return>
            </javadoc>
            <method name="calculateTextBounds" type="Point" line="429">
                <params>
                    <param name="gc" type="GC"/>
                </params>
                <declaration name="g2" type="SWTGraphics2D" line="430"/>
                <declaration name="fm" type="FontMetrics" line="432"/>
                <declaration name="textBounds" type="Point" line="433"/>
                <declaration name="firstLine" type="boolean" line="434"/>
                <declaration name="lineIterator" type="Iterator" line="435"/>
                <scope line="436">
                    <declaration name="line" type="String" line="437"/>
                    <declaration name="lineBounds" type="Point" line="438"/>
                    <scope line="439"/>
                    <scope line="444"/>
                </scope>
            </method>
            <javadoc line="451">
                {@inheritDoc}                
            </javadoc>
            <method name="internalUpdateBounds" type="void" line="454">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
            </method>
        </class>
    </source>