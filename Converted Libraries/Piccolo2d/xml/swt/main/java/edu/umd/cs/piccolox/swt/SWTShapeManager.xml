<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.util.ArrayList"/>
        <import package="org.eclipse.swt.graphics.Rectangle"/>
        <class name="SWTShapeManager" line="9">
            <javadoc line="9">
                SWT shape manager.                
                <author>
                    Lance Good                    
                </author>
            </javadoc>
            <declaration name="IDENTITY_XFORM" type="AffineTransform" line="14"/>
            <declaration name="aPoint" type="Point2D" line="15"/>
            <declaration name="segList" type="ArrayList" line="16"/>
            <declaration name="pts" type="double[]" line="17"/>
            <javadoc line="18">
                Apply the specified transform to the specified rectangle, modifying the
                  rect.                
                <param>
                    rect The rectangle to be transformed                    
                </param>
                <param>
                    at The transform to use to transform the rectangle                    
                </param>
            </javadoc>
            <method name="transform" type="void" line="24">
                <params>
                    <param name="rect" type="Rectangle2D"/>
                    <param name="at" type="AffineTransform"/>
                </params>
                <declaration name="minX" type="double" line="34"/>
                <declaration name="minY" type="double" line="35"/>
                <declaration name="maxX" type="double" line="36"/>
                <declaration name="maxY" type="double" line="37"/>
                <declaration name="i" type="int" line="38"/>
                <scope line="39">
                    <scope line="40"/>
                    <scope line="43"/>
                    <scope line="46"/>
                    <scope line="49"/>
                </scope>
            </method>
            <javadoc line="55">
                Populates the SWT rectangle with the provided Swing Rectangle2D&apos;s
                  coordinates. Rounding up to the nearest integer.                
                <param>
                    aRect awt rectangle to extract coordinates from                    
                </param>
                <param>
                    sRect swt rectangle to populate                    
                </param>
            </javadoc>
            <method name="awtToSWT" type="void" line="61">
                <params>
                    <param name="aRect" type="Rectangle2D"/>
                    <param name="sRect" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="67">
                Converts the provided shape into an array of point coordinates given as
                  one dimensional array with this format: x1,y1,x2,y3,....                
                <param>
                    shape shape to convert                    
                </param>
                <return>
                    point coordinates given as one dimensional array with this
                      format: x1,y1,x2,y3,...                    
                </return>
            </javadoc>
            <method name="shapeToPolyline" type="double[]" line="74">
                <params>
                    <param name="shape" type="Shape"/>
                </params>
                <declaration name="pi" type="PathIterator" line="77"/>
                <scope line="78">
                    <declaration name="segType" type="int" line="79"/>
                </scope>
                <declaration name="polyObj" type="double[]" line="95"/>
                <scope line="96">
                    <declaration name="p2" type="Point2D" line="97"/>
                </scope>
            </method>
            <javadoc line="103">
                Transforms the given points by the transform provided, leaving the
                  original points untouched.                
                <param>
                    points points to transform                    
                </param>
                <param>
                    at transform to apply                    
                </param>
                <return>
                    transformed coordinates given in format x1,y2,x2,y2,...                    
                </return>
            </javadoc>
            <method name="transform" type="int[]" line="110">
                <params>
                    <param name="points" type="double[]"/>
                    <param name="at" type="AffineTransform"/>
                </params>
                <declaration name="intPts" type="int[]" line="111"/>
                <scope line="112"/>
            </method>
        </class>
    </source>