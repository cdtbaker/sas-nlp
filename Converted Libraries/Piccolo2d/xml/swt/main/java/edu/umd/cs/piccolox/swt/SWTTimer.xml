<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="javax.swing.Timer"/>
        <import package="org.eclipse.swt.widgets.Display"/>
        <class name="SWTTimer" line="6">
            <extends class="Timer"/>
            <javadoc line="6">
                SWT timer.                
                <author>
                    Lance Good                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="11"/>
            <declaration name="notify" type="boolean" line="12"/>
            <declaration name="initialDelay" type="int" line="13"/>
            <declaration name="delay" type="int" line="14"/>
            <declaration name="repeats" type="boolean" line="15"/>
            <declaration name="coalesce" type="boolean" line="16"/>
            <declaration name="doPostEvent" type="Runnable" line="17"/>
            <declaration name="display" type="Display" line="18"/>
            <declaration name="expirationTime" type="long" line="19"/>
            <declaration name="nextTimer" type="SWTTimer" line="20"/>
            <declaration name="running" type="boolean" line="21"/>
            <class name="SWTDoPostEvent" line="22">
                <implements interface="Runnable"/>
                <javadoc line="22">
                    DoPostEvent is a runnable class that fires actionEvents to the listeners
                      on the EventDispatchThread, via invokeLater.                    
                    <see>
                        #post                        
                    </see>
                </javadoc>
                <method name="run" type="void" line="28">
                    <scope line="29">
                        <scope line="31"/>
                    </scope>
                </method>
                <method name="getTimer" type="SWTTimer" line="36"/>
            </class>
            <javadoc line="40">
                Constructor for SWTTimer.                
                <param>
                    display display associated with this timer                    
                </param>
                <param>
                    delay time in milliseconds between firings of this timer                    
                </param>
                <param>
                    listener action listener to fire when the timer fires                    
                </param>
            </javadoc>
            <method name="SWTTimer" type="constructor" line="46">
                <params>
                    <param name="display" type="Display"/>
                    <param name="delay" type="int"/>
                    <param name="listener" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="53">
                Notifies all listeners that have registered interest for notification on
                  this event type.                
                <param>
                    e the action event to fire                    
                </param>
            </javadoc>
            <method name="fireActionPerformed" type="void" line="58">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="59"/>
                <scope line="60">
                    <scope line="61"/>
                </scope>
            </method>
            <javadoc line="66">
                Returns the timer queue.                
            </javadoc>
            <method name="timerQueue" type="SWTTimerQueue" line="69"/>
            <javadoc line="72">
                Sets the &lt;code&gt;Timer&lt;/code&gt;&apos;s delay, the number of milliseconds between
                  successive action events.                
                <param>
                    delay the delay in milliseconds                    
                </param>
                <see>
                    #setInitialDelay                    
                </see>
            </javadoc>
            <method name="setDelay" type="void" line="78">
                <params>
                    <param name="delay" type="int"/>
                </params>
                <scope line="79"/>
                <scope line="82"/>
            </method>
            <javadoc line="86">
                Returns the delay, in milliseconds, between firings of action events.                
                <see>
                    #setDelay                    
                </see>
                <see>
                    #getInitialDelay                    
                </see>
                <return>
                    delay in milliseconds between firings of this timer                    
                </return>
            </javadoc>
            <method name="getDelay" type="int" line="92"/>
            <javadoc line="95">
                Sets the &lt;code&gt;Timer&lt;/code&gt;&apos;s initial delay, which by default is the same
                  as the between-event delay. This is used only for the first action event.
                  Subsequent action events are spaced using the delay property.                
                <param>
                    initialDelay the delay, in milliseconds, between the invocation of
                      the <code>start</code> method and the first action event fired
                      by this timer                    
                </param>
                <see>
                    #setDelay                    
                </see>
            </javadoc>
            <method name="setInitialDelay" type="void" line="104">
                <params>
                    <param name="initialDelay" type="int"/>
                </params>
                <scope line="105"/>
                <scope line="108"/>
            </method>
            <javadoc line="112">
                Returns the &lt;code&gt;Timer&lt;/code&gt;&apos;s initial delay. By default this is the
                  same as the value returned by getDelay.                
                <see>
                    #setInitialDelay                    
                </see>
                <see>
                    #setDelay                    
                </see>
                <return>
                    the initial delay of this timer                    
                </return>
            </javadoc>
            <method name="getInitialDelay" type="int" line="119"/>
            <javadoc line="122">
                If &lt;code&gt;flag&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, instructs the
                  &lt;code&gt;Timer&lt;/code&gt; to send only one action event to its listeners.                
                <param>
                    flag specify <code>false</code> to make the timer stop after
                      sending its first action event                    
                </param>
            </javadoc>
            <method name="setRepeats" type="void" line="128">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="131">
                Returns &lt;code&gt;true&lt;/code&gt; (the default) if the &lt;code&gt;Timer&lt;/code&gt; will
                  send an action event to its listeners multiple times.                
                <see>
                    #setRepeats                    
                </see>
                <return>
                    true if this timer should repeat when completed                    
                </return>
            </javadoc>
            <method name="isRepeats" type="boolean" line="137"/>
            <javadoc line="140">
                Sets whether the &lt;code&gt;Timer&lt;/code&gt; coalesces multiple pending
                  &lt;code&gt;ActionEvent&lt;/code&gt; firings. A busy application may not be able to
                  keep up with a &lt;code&gt;Timer&lt;/code&gt;&apos;s event generation, causing multiple
                  action events to be queued. When processed, the application sends these
                  events one after the other, causing the &lt;code&gt;Timer&lt;/code&gt;&apos;s listeners to
                  receive a sequence of events with no delay between them. Coalescing
                  avoids this situation by reducing multiple pending events to a single
                  event. &lt;code&gt;Timer&lt;/code&gt;s coalesce events by default.                
                <param>
                    flag specify <code>false</code> to turn off coalescing                    
                </param>
            </javadoc>
            <method name="setCoalesce" type="void" line="151">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="152"/>
                <scope line="154"/>
            </method>
            <javadoc line="158">
                Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Timer&lt;/code&gt; coalesces multiple
                  pending action events.                
                <see>
                    #setCoalesce                    
                </see>
                <return>
                    true if this timer coalesces multiple pending action events                    
                </return>
            </javadoc>
            <method name="isCoalesce" type="boolean" line="164"/>
            <javadoc line="167">
                Starts the &lt;code&gt;Timer&lt;/code&gt;, causing it to start sending action events
                  to its listeners.                
                <see>
                    #stop                    
                </see>
            </javadoc>
            <method name="start" type="void" line="172"/>
            <javadoc line="175">
                Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Timer&lt;/code&gt; is running.                
                <see>
                    #start                    
                </see>
                <return>
                    true if this timer is scheduled to run                    
                </return>
            </javadoc>
            <method name="isRunning" type="boolean" line="180"/>
            <javadoc line="183">
                Stops the &lt;code&gt;Timer&lt;/code&gt;, causing it to stop sending action events to
                  its listeners.                
                <see>
                    #start                    
                </see>
            </javadoc>
            <method name="stop" type="void" line="188"/>
            <javadoc line="192">
                Restarts the &lt;code&gt;Timer&lt;/code&gt;, canceling any pending firings and
                  causing it to fire with its initial delay.                
            </javadoc>
            <method name="restart" type="void" line="196"/>
            <javadoc line="200">
                Resets the internal state to indicate this Timer shouldn&apos;t notify any of
                  its listeners. This does not stop a repeatable Timer from firing again,
                  use &lt;code&gt;stop&lt;/code&gt; for that.                
            </javadoc>
            <method name="cancelEventOverride" type="void" line="205"/>
            <method name="postOverride" type="void" line="208">
                <scope line="209"/>
            </method>
            <javadoc line="214">
                @param expirationTime the expirationTime to set                
            </javadoc>
            <method name="setExpirationTime" type="void" line="217">
                <params>
                    <param name="expirationTime" type="long"/>
                </params>
            </method>
            <javadoc line="220">
                @return the expirationTime                
            </javadoc>
            <method name="getExpirationTime" type="long" line="223"/>
            <javadoc line="226">
                @param nextTimer the nextTimer to set                
            </javadoc>
            <method name="setNextTimer" type="void" line="229">
                <params>
                    <param name="nextTimer" type="SWTTimer"/>
                </params>
            </method>
            <javadoc line="232">
                @return the nextTimer                
            </javadoc>
            <method name="getNextTimer" type="SWTTimer" line="235"/>
            <javadoc line="238">
                @param running the running to set                
            </javadoc>
            <method name="setRunning" type="void" line="241">
                <params>
                    <param name="running" type="boolean"/>
                </params>
            </method>
        </class>
    </source>