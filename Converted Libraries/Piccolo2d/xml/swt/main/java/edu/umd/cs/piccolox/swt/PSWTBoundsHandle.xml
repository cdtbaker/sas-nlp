<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="java.awt.Cursor"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="javax.swing.SwingConstants"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <import package="edu.umd.cs.piccolox.util.PBoundsLocator"/>
        <class name="PSWTBoundsHandle" line="47">
            <extends class="PSWTHandle"/>
            <javadoc line="47">
                &lt;b&gt;PSWTBoundsHandle&lt;/b&gt; a handle for resizing the bounds of another node. If a
                  bounds handle is dragged such that the other node&apos;s width or height becomes
                  negative then the each drag handle&apos;s locator assciated with that other node
                  is &quot;flipped&quot; so that they are attached to and dragging a different corner of
                  the nodes bounds.                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <class name="HandleCursorEventHandler" line="58">
                <extends class="PBasicInputEventHandler"/>
                <declaration name="cursorPushed" type="boolean" line="59"/>
                <method name="mouseEntered" type="void" line="61">
                    <params>
                        <param name="aEvent" type="PInputEvent"/>
                    </params>
                    <scope line="62"/>
                </method>
                <method name="mouseExited" type="void" line="68">
                    <params>
                        <param name="aEvent" type="PInputEvent"/>
                    </params>
                    <declaration name="focus" type="PPickPath" line="69"/>
                    <scope line="71"/>
                </method>
                <method name="isNewFocus" type="boolean" line="77">
                    <params>
                        <param name="focus" type="PPickPath"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="81">
                    <params>
                        <param name="event" type="PInputEvent"/>
                    </params>
                    <scope line="82"/>
                </method>
            </class>
            <declaration name="serialVersionUID" type="long" line="89"/>
            <declaration name="handleCursorHandler" type="PBasicInputEventHandler" line="90"/>
            <javadoc line="92">
                Adds bounds handles to all corners and edges of the provided node.                
                <param>
                    node to decorate with bounds handles.                    
                </param>
            </javadoc>
            <method name="addBoundsHandlesTo" type="void" line="97">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="108">
                Adds sticky bounds handles to all corners and edges of the provided node
                  and for display on the provided camera.                
                <param>
                    node to decorate with bounds handles.                    
                </param>
                <param>
                    camera camera onto which the handles should be stuck                    
                </param>
            </javadoc>
            <method name="addStickyBoundsHandlesTo" type="void" line="115">
                <params>
                    <param name="node" type="PNode"/>
                    <param name="camera" type="PCamera"/>
                </params>
            </method>
            <javadoc line="126">
                Removes all bounds handles from the specified node.                
                <param>
                    node node from which to remove bounds handles                    
                </param>
            </javadoc>
            <method name="removeBoundsHandlesFrom" type="void" line="131">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <declaration name="handles" type="ArrayList" line="132"/>
                <declaration name="i" type="Iterator" line="134"/>
                <scope line="135">
                    <declaration name="each" type="PNode" line="136"/>
                    <scope line="137"/>
                </scope>
            </method>
            <javadoc line="144">
                Creates a bounds handle that will use the provided bounds locator to
                  position itself.                
                <param>
                    locator locator to use when positioning this handle                    
                </param>
            </javadoc>
            <method name="PSWTBoundsHandle" type="constructor" line="150">
                <params>
                    <param name="locator" type="PBoundsLocator"/>
                </params>
            </method>
            <javadoc line="154">
                Installs handlers responsible for updating the attached node&apos;s bounds and
                  for updating the cursor when the mous enters a handle.                
            </javadoc>
            <method name="installHandleEventHandlers" type="void" line="158"/>
            <javadoc line="164">
                Return the event handler that is responsible for setting the mouse cursor
                  when it enters/exits this handle.                
                <return>
                    handler responsible for keeping the mouse cursor up to date                    
                </return>
            </javadoc>
            <method name="getHandleCursorEventHandler" type="PBasicInputEventHandler" line="170"/>
            <javadoc line="174">
                Callback invoked when the user has started to drag a handle.                
                <param>
                    aLocalPoint point in the handle&apos;s coordinate system at which the
                      drag was started                    
                </param>
                <param>
                    aEvent Piccolo2d Event representing the start of the drag                    
                </param>
            </javadoc>
            <method name="startHandleDrag" type="void" line="181">
                <params>
                    <param name="aLocalPoint" type="Point2D"/>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
                <declaration name="l" type="PBoundsLocator" line="182"/>
            </method>
            <javadoc line="186">
                Callback invoked when the user is dragging the handle. Updates the
                  associated node appropriately.                
                <param>
                    aLocalDimension magnitude of drag in the handle&apos;s coordinate
                      system                    
                </param>
                <param>
                    aEvent Piccolo2d Event representing the start of the drag                    
                </param>
            </javadoc>
            <method name="dragHandle" type="void" line="194">
                <params>
                    <param name="aLocalDimension" type="PDimension"/>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
                <comment line="245">
                    Leave bounds untouched                    
                </comment>
                <declaration name="l" type="PBoundsLocator" line="195"/>
                <declaration name="n" type="PNode" line="197"/>
                <declaration name="b" type="PBounds" line="198"/>
                <declaration name="parent" type="PNode" line="200"/>
                <scope line="201"/>
                <declaration name="dx" type="double" line="208"/>
                <declaration name="dy" type="double" line="209"/>
                <declaration name="flipX" type="boolean" line="247"/>
                <declaration name="flipY" type="boolean" line="248"/>
                <scope line="250"/>
                <scope line="256"/>
                <scope line="262"/>
            </method>
            <javadoc line="269">
                Callback invoked when the handle stops being dragged.                
                <param>
                    aLocalPoint point in the handle&apos;s coordinate system at which the
                      drag was stopped                    
                </param>
                <param>
                    aEvent Piccolo2d Event representing the stop of the drag                    
                </param>
            </javadoc>
            <method name="endHandleDrag" type="void" line="276">
                <params>
                    <param name="aLocalPoint" type="Point2D"/>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
                <declaration name="l" type="PBoundsLocator" line="277"/>
            </method>
            <javadoc line="281">
                Iterates over all of this node&apos;s handles flipping them if necessary. This
                  is needed since a node can become inverted when it&apos;s width or height
                  becomes negative.                
                <param>
                    flipX whether to allow flipping in the horizontal direction                    
                </param>
                <param>
                    flipY whether to allow flipping in the vertical direction                    
                </param>
            </javadoc>
            <method name="flipSiblingBoundsHandles" type="void" line="289">
                <params>
                    <param name="flipX" type="boolean"/>
                    <param name="flipY" type="boolean"/>
                </params>
                <declaration name="i" type="Iterator" line="290"/>
                <scope line="291">
                    <declaration name="each" type="Object" line="292"/>
                    <scope line="293"/>
                </scope>
            </method>
            <javadoc line="299">
                Flips this particular handle around if needed. This is necessary since a
                  node can become inverted when it&apos;s width or height becomes negative.                
                <param>
                    flipX whether to allow flipping in the horizontal direction                    
                </param>
                <param>
                    flipY whether to allow flipping in the vertical direction                    
                </param>
            </javadoc>
            <method name="flipHandleIfNeeded" type="void" line="306">
                <params>
                    <param name="flipX" type="boolean"/>
                    <param name="flipY" type="boolean"/>
                </params>
                <comment line="386">
                    Do nothing                    
                </comment>
                <comment line="389">
                    reset locator to update layout                    
                </comment>
                <scope line="307"/>
                <declaration name="l" type="PBoundsLocator" line="311"/>
                <scope line="314"/>
                <scope line="320"/>
                <scope line="326"/>
                <scope line="332"/>
                <scope line="338"/>
                <scope line="341"/>
                <scope line="344"/>
                <scope line="350"/>
                <scope line="353"/>
                <scope line="356"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="368"/>
                <scope line="374"/>
                <scope line="377"/>
                <scope line="380"/>
            </method>
            <javadoc line="392">
                Returns an appropriate cursor to display when the mouse is over a handle
                  on the side provided.                
                <param>
                    side value from SwingConstants                    
                </param>
                <return>
                    Appropriate cursor, or null if no appropriate cursor can be found                    
                </return>
            </javadoc>
            <method name="getCursorFor" type="Cursor" line="400">
                <params>
                    <param name="side" type="int"/>
                </params>
            </method>
        </class>
    </source>