<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="org.eclipse.swt.widgets.Display"/>
        <class name="SWTTimerQueue" line="3">
            <implements interface="Runnable"/>
            <javadoc line="3">
                The SWTTimerQueue is a queue of timers. It has been implemented as a linked
                  list of SWTTimer objects.                
                <author>
                    Lance Good                    
                </author>
            </javadoc>
            <declaration name="instance" type="SWTTimerQueue" line="9"/>
            <declaration name="display" type="Display" line="10"/>
            <declaration name="firstTimer" type="SWTTimer" line="11"/>
            <declaration name="running" type="boolean" line="12"/>
            <javadoc line="13">
                Creates a timer queue that will be attached the the provided display.
                  It&apos;s Timers are expected to modify only this display, or none.                
                <param>
                    display the display that will get updated by this queue's timers.                    
                </param>
            </javadoc>
            <method name="SWTTimerQueue" type="constructor" line="18">
                <params>
                    <param name="display" type="Display"/>
                </params>
            </method>
            <javadoc line="22">
                Returns the singleton instance of the SWTTimerQueue. Take note that even
                  when called with different displays it will always return the same result
                  as the first call.                
                <param>
                    display display to associate with this Timer Queue's Activities                    
                </param>
                <return>
                    singleton instance of SWTTimerQueue                    
                </return>
            </javadoc>
            <method name="sharedInstance" type="SWTTimerQueue" line="29">
                <params>
                    <param name="display" type="Display"/>
                </params>
                <scope line="30"/>
            </method>
            <javadoc line="35">
                Starts the timer queue. If it is already running, a RuntimeException will
                  be thrown.                
            </javadoc>
            <method name="start" type="void" line="39">
                <scope line="40"/>
                <anonymous_class line="43">
                    <method name="run" type="void" line="44">
                        <declaration name="timerThread" type="Thread" line="45"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="54">
                Stops the TimerQueue Thread.                
            </javadoc>
            <method name="stop" type="void" line="57"/>
            <javadoc line="61">
                Adds the provided timer to the queue of scheduled timers.                
                <param>
                    timer timer to add                    
                </param>
                <param>
                    expirationTime time at which the timer is to be stopped and
                      removed from the queue. Given in unix time.                    
                </param>
            </javadoc>
            <method name="addTimer" type="void" line="67">
                <params>
                    <param name="timer" type="SWTTimer"/>
                    <param name="expirationTime" type="long"/>
                </params>
                <scope line="68"/>
            </method>
            <javadoc line="75">
                Insert the Timer into the queue in the order they will expire. If
                  multiple timers are set to expire at the same time, it will insert it
                  after the last one; that way they expire in the order they came in.                
                <param>
                    timer timer to insert into the queue                    
                </param>
                <param>
                    expirationTime time in UNIX time at which the new timer should
                      expire                    
                </param>
            </javadoc>
            <method name="insertTimer" type="void" line="83">
                <params>
                    <param name="timer" type="SWTTimer"/>
                    <param name="expirationTime" type="long"/>
                </params>
                <declaration name="previousTimer" type="SWTTimer" line="84"/>
                <scope line="85"/>
                <scope line="88"/>
            </method>
            <javadoc line="93">
                Finds the last timer that will expire before or at the given expiration
                  time. If there are multiple timers expiring at the same time, the last
                  one in the queue will be returned.                
                <param>
                    expirationTime expiration to compare against timers in the queue                    
                </param>
                <return>
                    last timer that will expire before or at the given expiration
                      time                    
                </return>
            </javadoc>
            <method name="findLastTimerExpiringBefore" type="SWTTimer" line="101">
                <params>
                    <param name="expirationTime" type="long"/>
                </params>
                <declaration name="previousTimer" type="SWTTimer" line="102"/>
                <declaration name="nextTimer" type="SWTTimer" line="103"/>
                <scope line="104"/>
            </method>
            <javadoc line="110">
                Removes the provided timer from the Timer Queue. If it is not found, then
                  nothing happens.                
                <param>
                    timer timer to remove from the queue                    
                </param>
            </javadoc>
            <method name="removeTimer" type="void" line="115">
                <params>
                    <param name="timer" type="SWTTimer"/>
                </params>
                <scope line="116"/>
                <scope line="119"/>
                <scope line="122">
                    <declaration name="previousTimer" type="SWTTimer" line="123"/>
                    <scope line="124"/>
                </scope>
            </method>
            <javadoc line="132">
                Finds the timer that immediately precedes the provided timer in the
                  queue.                
                <param>
                    timer to search for                    
                </param>
                <return>
                    timer immediately preceding found timer, or null if not found                    
                </return>
            </javadoc>
            <method name="findLastTimerBefore" type="SWTTimer" line="138">
                <params>
                    <param name="timer" type="SWTTimer"/>
                </params>
                <declaration name="previousTimer" type="SWTTimer" line="139"/>
                <declaration name="currentTimer" type="SWTTimer" line="140"/>
                <scope line="141">
                    <scope line="142"/>
                </scope>
            </method>
            <javadoc line="150">
                Returns true if this timer queue contains the given timer.                
                <param>
                    timer timer being checked                    
                </param>
                <return>
                    true if timer is scheduled in this queue                    
                </return>
            </javadoc>
            <method name="containsTimer" type="boolean" line="155">
                <params>
                    <param name="timer" type="SWTTimer"/>
                </params>
            </method>
            <javadoc line="158">
                If there are a ton of timers, this method may never return. It loops
                  checking to see if the head of the Timer list has expired. If it has, it
                  posts the Timer and reschedules it if necessary.                
                <return>
                    how long the app can take before it should invoke this method
                      again.                    
                </return>
            </javadoc>
            <method name="postExpiredTimers" type="long" line="165">
                <declaration name="timer" type="SWTTimer" line="166"/>
                <declaration name="currentTime" type="long" line="167"/>
                <declaration name="timeToWait" type="long" line="168"/>
                <scope line="169">
                    <scope line="171"/>
                    <scope line="176">
                        <scope line="177"/>
                        <scope line="180"/>
                        <scope line="184"/>
                        <scope line="187"/>
                        <scope line="190"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="197">
                Dispatches work to timers until the queue is told to stop running.                
            </javadoc>
            <method name="run" type="void" line="200">
                <declaration name="timeToWait" type="long" line="201"/>
                <scope line="202">
                    <scope line="203">
                        <scope line="205"/>
                        <scope line="208"/>
                    </scope>
                </scope>
                <scope line="212">
                    <declaration name="timer" type="SWTTimer" line="214"/>
                    <scope line="215"/>
                </scope>
            </method>
            <javadoc line="223">
                Generates a string handy for debugging the contents of the timer queue.                
                <return>
                    String representation of the queue for use in debugging                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="227">
                <declaration name="buf" type="StringBuffer" line="228"/>
                <declaration name="nextTimer" type="SWTTimer" line="229"/>
                <scope line="233">
                    <scope line="236"/>
                </scope>
            </method>
            <class name="SWTTimerQueueRestart" line="243">
                <implements interface="Runnable"/>
                <javadoc line="243">
                    Runnable that will message the shared instance of the Timer Queue to
                      restart.                    
                </javadoc>
                <declaration name="attemptedStart" type="boolean" line="248"/>
                <javadoc line="248">
                    Tracks whether a restart has been attempted.                    
                </javadoc>
                <declaration name="display" type="Display" line="252"/>
                <javadoc line="253">
                    Constructs a QueueRestart Runnable that will message the Timer Queue
                      to Restart.                    
                    <param>
                        display display associated with the SWTTimerQueue                        
                    </param>
                </javadoc>
                <method name="SWTTimerQueueRestart" type="constructor" line="258">
                    <params>
                        <param name="display" type="Display"/>
                    </params>
                </method>
                <javadoc line="261">
                    Attempts to restart the queue associated with the display.                    
                </javadoc>
                <method name="run" type="void" line="264">
                    <scope line="265"/>
                    <declaration name="q" type="SWTTimerQueue" line="268"/>
                    <scope line="269">
                        <scope line="270"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>