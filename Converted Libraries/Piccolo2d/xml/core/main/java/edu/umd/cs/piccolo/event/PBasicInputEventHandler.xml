<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.event">
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <class name="PBasicInputEventHandler" line="36">
            <comment line="134">
                ****************************************************************                
            </comment>
            <comment line="135">
                Event Filter - All this event listener can be associated with a event                
            </comment>
            <comment line="136">
                filter. The filter accepts and rejects events based on their modifier                
            </comment>
            <comment line="137">
                flags and type. If the filter is null (the                
            </comment>
            <comment line="138">
                default case) then it accepts all events.                
            </comment>
            <comment line="139">
                ****************************************************************                
            </comment>
            <implements interface="PInputEventListener"/>
            <javadoc line="36">
                &lt;b&gt;PBasicInputEventHandler&lt;/b&gt; is the standard class in Piccolo that is used
                  to register for mouse and keyboard events on a PNode. Note the events that
                  you get depends on the node that you have registered with. For example you
                  will only get mouse moved events when the mouse is over the node that you
                  have registered with, not when the mouse is over some other node.
                  &lt;P&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="eventFilter" type="PInputEventFilter" line="49"/>
            <javadoc line="51">
                Constructs a PBasicInputEventHandler with a wide open event filter.                
            </javadoc>
            <method name="PBasicInputEventHandler" type="constructor" line="54"/>
            <javadoc line="59">
                Dispatches a generic event to a more specific method. Sparing subclasses
                  from the dispatch logic.                
                <param>
                    event the event to be dispatched                    
                </param>
                <param>
                    type Swing event type of the underlying Swing event                    
                </param>
            </javadoc>
            <method name="processEvent" type="void" line="66">
                <params>
                    <param name="event" type="PInputEvent"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="67"/>
            </method>
            <javadoc line="140">
                Returns true if the event would be dispatched if passed to processEvent.                
                <param>
                    event event being tested for acceptance                    
                </param>
                <param>
                    type Swing event type of underlying swing event                    
                </param>
                <return>
                    true if the event would be dispatched                    
                </return>
            </javadoc>
            <method name="acceptsEvent" type="boolean" line="148">
                <params>
                    <param name="event" type="PInputEvent"/>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="152">
                Returns the event filter responsible for filtering incoming events.                
                <return>
                    this handler's InputEventFilter                    
                </return>
            </javadoc>
            <method name="getEventFilter" type="PInputEventFilter" line="157"/>
            <javadoc line="161">
                Changes this event handler&apos;s filter to the one provided.                
                <param>
                    newEventFilter filter to use for this input event handler                    
                </param>
            </javadoc>
            <method name="setEventFilter" type="void" line="166">
                <params>
                    <param name="newEventFilter" type="PInputEventFilter"/>
                </params>
            </method>
            <javadoc line="170">
                Will get called whenever a key has been pressed down. Subclasses should
                  override this method to implement their own behavior.                
                <param>
                    event the event representing the keystroke                    
                </param>
            </javadoc>
            <method name="keyPressed" type="void" line="176">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="179">
                Will get called whenever a key has been released. Subclasses should
                  override this method to implement their own behavior.                
                <param>
                    event the event representing the keystroke                    
                </param>
            </javadoc>
            <method name="keyReleased" type="void" line="185">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="188">
                Will be called at the end of a full keystroke (down then up). Subclasses
                  should override this method to implement their own behavior.                
                <param>
                    event object which can be queried for the event's details                    
                </param>
            </javadoc>
            <method name="keyTyped" type="void" line="194">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="197">
                Will be called at the end of a full click (mouse pressed followed by
                  mouse released). Subclasses should override this method to implement
                  their own behavior.                
                <param>
                    event object which can be queried for the event's details                    
                </param>
            </javadoc>
            <method name="mouseClicked" type="void" line="204">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="207">
                Will be called when a mouse button is pressed down. Should two buttons be
                  pressed simultaneously, it will dispatch two of these in an unspecified
                  order. Subclasses should override this method to implement their own
                  behavior.                
                <param>
                    event object which can be queried for the event's details                    
                </param>
            </javadoc>
            <method name="mousePressed" type="void" line="215">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="218">
                Will be called when a drag is occurring. This is system dependent.
                  Subclasses should override this method to implement their own behavior.                
                <param>
                    event object which can be queried for the event's details                    
                </param>
            </javadoc>
            <method name="mouseDragged" type="void" line="224">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="227">
                Will be invoked when the mouse enters a specified region. Subclasses
                  should override this method to implement their own behavior.                
                <param>
                    event object which can be queried for the event's details                    
                </param>
            </javadoc>
            <method name="mouseEntered" type="void" line="233">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="236">
                Will be invoked when the mouse leaves a specified region. Subclasses
                  should override this method to implement their own behavior.                
                <param>
                    event object which can be queried for the event's details                    
                </param>
            </javadoc>
            <method name="mouseExited" type="void" line="242">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="245">
                Will be called when the mouse is moved. Subclasses should override this
                  method to implement their own behavior.                
                <param>
                    event object which can be queried for event details                    
                </param>
            </javadoc>
            <method name="mouseMoved" type="void" line="251">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="254">
                Will be called when any mouse button is released. Should two or more
                  buttons be released simultaneously, this method will be called multiple
                  times. Subclasses should override this method to implement their own
                  behavior.                
                <param>
                    event object which can be queried for event details                    
                </param>
            </javadoc>
            <method name="mouseReleased" type="void" line="262">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="265">
                This method is invoked when the mouse wheel is rotated. Subclasses should
                  override this method to implement their own behavior.                
                <param>
                    event an object that can be queries to discover the event's
                      details                    
                </param>
            </javadoc>
            <method name="mouseWheelRotated" type="void" line="272">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="275">
                This method is invoked when the mouse wheel is rotated by a block.
                  Subclasses should override this method to implement their own behavior.                
                <param>
                    event an object that can be queries to discover the event's
                      details                    
                </param>
            </javadoc>
            <method name="mouseWheelRotatedByBlock" type="void" line="282">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="285">
                This method is invoked when a node gains the keyboard focus. Subclasses
                  should override this method to implement their own behavior.                
                <param>
                    event an object that can be queries to discover the event's
                      details                    
                </param>
            </javadoc>
            <method name="keyboardFocusGained" type="void" line="292">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="295">
                This method is invoked when a node loses the keyboard focus. Subclasses
                  should override this method to implement their own behavior.                
                <param>
                    event an object that can be queries to discover the event's
                      details                    
                </param>
            </javadoc>
            <method name="keyboardFocusLost" type="void" line="302">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="305">
                @deprecated see http://code.google.com/p/piccolo2d/issues/detail?id=99                
                <return>
                    empty string since this method is deprecated                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="310"/>
        </class>
    </source>