<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.activities">
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="javax.swing.Timer"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PActivityScheduler" line="10">
            <implements interface="Serializable"/>
            <javadoc line="10">
                &lt;b&gt;PActivityScheduler&lt;/b&gt; is responsible for maintaining a list of
                  activities. It is given a chance to process these activities from the PRoot&apos;s
                  processInputs() method. Most users will not need to use the
                  PActivityScheduler directly, instead you should look at:
                  &lt;ul&gt;
                  &lt;li&gt;PNode.addActivity - to schedule a new activity
                  &lt;li&gt;PActivity.terminate - to terminate a running activity
                  &lt;li&gt;PRoot.processInputs - already calls processActivities for you.
                  &lt;/ul&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="24"/>
            <declaration name="activityTimer" type="Timer" line="25"/>
            <declaration name="root" type="PRoot" line="26"/>
            <declaration name="activities" type="List" line="27"/>
            <declaration name="activitiesChanged" type="boolean" line="28"/>
            <declaration name="animating" type="boolean" line="29"/>
            <declaration name="processingActivities" type="ArrayList" line="30"/>
            <javadoc line="31">
                Constructs an instance of PActivityScheduler. All activities it will
                  schedule will take place on children of the rootNode provided.                
                <param>
                    rootNode root node of all activities to be performed. All nodes
                      being animated should have this node as an ancestor.                    
                </param>
            </javadoc>
            <method name="PActivityScheduler" type="constructor" line="37">
                <params>
                    <param name="rootNode" type="PRoot"/>
                </params>
            </method>
            <javadoc line="42">
                Returns the node from which all activities will be attached.                
                <return>
                    this scheduler's associated root node                    
                </return>
            </javadoc>
            <method name="getRoot" type="PRoot" line="46"/>
            <javadoc line="49">
                Adds the given activity to the scheduler if not already found.                
                <param>
                    activity activity to be scheduled                    
                </param>
            </javadoc>
            <method name="addActivity" type="void" line="53">
                <params>
                    <param name="activity" type="PActivity"/>
                </params>
            </method>
            <javadoc line="56">
                Add this activity to the scheduler. Sometimes it&apos;s useful to make sure
                  that an activity is run after all other activities have been run. To do
                  this set processLast to true when adding the activity.                
                <param>
                    activity activity to be scheduled                    
                </param>
                <param>
                    processLast whether or not this activity should be performed after
                      all other scheduled activities                    
                </param>
            </javadoc>
            <method name="addActivity" type="void" line="64">
                <params>
                    <param name="activity" type="PActivity"/>
                    <param name="processLast" type="boolean"/>
                </params>
                <scope line="65"/>
                <scope line="69"/>
                <scope line="72"/>
                <scope line="76"/>
            </method>
            <javadoc line="80">
                Removes the given activity from the scheduled activities. Does nothing if
                  it&apos;s not found.                
                <param>
                    activity the activity to be removed                    
                </param>
            </javadoc>
            <method name="removeActivity" type="void" line="85">
                <params>
                    <param name="activity" type="PActivity"/>
                </params>
                <scope line="86"/>
                <scope line="91"/>
            </method>
            <javadoc line="95">
                Removes all activities from the list of scheduled activities.                
            </javadoc>
            <method name="removeAllActivities" type="void" line="98"/>
            <javadoc line="103">
                Returns a reference to the current activities list. Handle with care.                
                <return>
                    reference to the current activities list.                    
                </return>
            </javadoc>
            <method name="getActivitiesReference" type="List" line="107"/>
            <javadoc line="110">
                Process all scheduled activities for the given time. Each activity is
                  given one &quot;step&quot;, equivalent to one frame of animation.                
                <param>
                    currentTime the current unix time in milliseconds.                    
                </param>
            </javadoc>
            <method name="processActivities" type="void" line="115">
                <params>
                    <param name="currentTime" type="long"/>
                </params>
                <declaration name="size" type="int" line="116"/>
                <scope line="117">
                    <scope line="119">
                        <declaration name="each" type="PActivity" line="120"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="126">
                Return true if any of the scheduled activities are animations.                
                <return>
                    true if any of the scheduled activities are animations.                    
                </return>
            </javadoc>
            <method name="getAnimating" type="boolean" line="130">
                <scope line="131">
                    <scope line="133">
                        <declaration name="each" type="PActivity" line="134"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="141">
                Starts the current activity timer. Multiple calls to this method are
                  ignored.                
            </javadoc>
            <method name="startActivityTimer" type="void" line="145"/>
            <javadoc line="148">
                Stops the current activity timer.                
            </javadoc>
            <method name="stopActivityTimer" type="void" line="151"/>
            <javadoc line="154">
                Returns the activity timer. Creating it if necessary.                
                <return>
                    a Timer instance.                    
                </return>
            </javadoc>
            <method name="getActivityTimer" type="Timer" line="158">
                <scope line="159">
                    <anonymous_class line="160">
                        <method name="actionPerformed" type="void" line="161">
                            <params>
                                <param name="e" type="ActionEvent"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
        </class>
    </source>