<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.event">
        <import package="java.awt.Cursor"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PComponent"/>
        <import package="edu.umd.cs.piccolo.PInputManager"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <class name="PInputEvent" line="47">
            <comment line="108">
                ****************************************************************
                 Accessing Picked Objects - Methods to access the objects associated
                 with this event.
                 &lt;p&gt;
                 Cameras can view layers that have
                 other cameras on them, so events may be arriving through a stack
                 of many cameras. The getCamera() method returns the bottommost
                 camera on that stack. The getTopCamera method returns the topmost
                 camera on that stack, this is also the camera through which the
                 event originated.
                 ****************************************************************                
            </comment>
            <comment line="193">
                ****************************************************************
                 Basics
                 ****************************************************************                
            </comment>
            <comment line="440">
                ****************************************************************
                 Classification - Methods to distinguish between mouse and key
                 events.
                 ****************************************************************                
            </comment>
            <comment line="513">
                ****************************************************************
                 Coordinate Systems - Methods for getting mouse location data
                 These methods are only designed for use with PInputEvents that
                 return true to the isMouseEvent method.
                 ****************************************************************                
            </comment>
            <javadoc line="47">
                &lt;b&gt;PInputEvent&lt;/b&gt; is used to notify PInputEventListeners of keyboard and
                  mouse input. It has methods for normal event properties such as event
                  modifier keys and event canvas location.
                  &lt;P&gt;
                  In addition is has methods to get the mouse position and delta in a variety
                  of coordinate systems.
                  &lt;P&gt;
                  Last of all it provides access to the dispatch manager that can be queried to
                  find the current mouse over, mouse focus, and keyboard focus.
                  &lt;P&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="inputEvent" type="InputEvent" line="63"/>
            <javadoc line="63">
                The underlying Swing Event.                
            </javadoc>
            <declaration name="pickPath" type="PPickPath" line="66"/>
            <javadoc line="66">
                Path relating to the current mouse event.                
            </javadoc>
            <declaration name="inputManager" type="PInputManager" line="69"/>
            <javadoc line="69">
                Input manager responsible for the creation of this event.                
            </javadoc>
            <declaration name="handled" type="boolean" line="72"/>
            <javadoc line="72">
                Flag used to identify this event as handled.                
            </javadoc>
            <javadoc line="75">
                Create an event with the given inputManager and based on the given swing
                  event.                
                <param>
                    inputManager source of PInputEvent                    
                </param>
                <param>
                    event underlying swing event                    
                </param>
            </javadoc>
            <method name="PInputEvent" type="constructor" line="82">
                <params>
                    <param name="inputManager" type="PInputManager"/>
                    <param name="event" type="InputEvent"/>
                </params>
            </method>
            <javadoc line="87">
                Changes the cursor to the one provided and stores it on the cursor stack
                  for later retrieval.                
                <param>
                    cursor cursor to push on cursor stack                    
                </param>
            </javadoc>
            <method name="pushCursor" type="void" line="93">
                <params>
                    <param name="cursor" type="Cursor"/>
                </params>
                <declaration name="component" type="PComponent" line="94"/>
            </method>
            <javadoc line="98">
                Removes the top most cursor from the cursor stack and sets it as the
                  current cursor.                
            </javadoc>
            <method name="popCursor" type="void" line="102">
                <declaration name="component" type="PComponent" line="103"/>
            </method>
            <javadoc line="119">
                Return the bottom most camera that is currently painting. If you are
                  using internal cameras this may be different then what is returned by
                  getTopCamera.                
                <return>
                    the current PickPath&apos;s bottom camera.                    
                </return>
            </javadoc>
            <method name="getCamera" type="PCamera" line="126"/>
            <javadoc line="130">
                Return the topmost camera this is painting. This is the camera associated
                  with the PCanvas that requested the current repaint.                
                <return>
                    topmost camera on the pick path                    
                </return>
            </javadoc>
            <method name="getTopCamera" type="PCamera" line="136"/>
            <javadoc line="140">
                Get the canvas associated with the top camera. This is the canvas where
                  the originating swing event came from.                
                <return>
                    component attached to the top camera of the current pick path                    
                </return>
            </javadoc>
            <method name="getComponent" type="PComponent" line="146"/>
            <javadoc line="150">
                Return the input manager that dispatched this event. You can use this
                  input manager to find the current mouse focus, mouse over, and key focus
                  nodes. You can also set a new key focus node.                
                <return>
                    input manager that dispatched this event                    
                </return>
            </javadoc>
            <method name="getInputManager" type="PInputManager" line="157"/>
            <javadoc line="161">
                Return the PPickPath associated with this input event.                
                <return>
                    pick path associated with this event (may be null)                    
                </return>
            </javadoc>
            <method name="getPath" type="PPickPath" line="166"/>
            <javadoc line="170">
                Sets the PIckPath associated with this mouse event.                
                <param>
                    path path to associate with this mouse event                    
                </param>
            </javadoc>
            <method name="setPath" type="void" line="175">
                <params>
                    <param name="path" type="PPickPath"/>
                </params>
            </method>
            <javadoc line="179">
                Return the bottom node on the current pickpath, that is the picked node
                  furthest from the root node.                
                <return>
                    the currently picked node of this mouse event                    
                </return>
            </javadoc>
            <method name="getPickedNode" type="PNode" line="185">
                <scope line="186"/>
            </method>
            <javadoc line="196">
                Returns the key code associated with a key event.                
                <return>
                    key code associated with a key event                    
                </return>
            </javadoc>
            <method name="getKeyCode" type="int" line="201">
                <scope line="202">
                    <declaration name="e" type="KeyEvent" line="203"/>
                </scope>
            </method>
            <javadoc line="209">
                Returns the character associated with a key event.                
                <return>
                    char associated with a key event                    
                </return>
            </javadoc>
            <method name="getKeyChar" type="char" line="214">
                <scope line="215">
                    <declaration name="e" type="KeyEvent" line="216"/>
                </scope>
            </method>
            <javadoc line="222">
                Returns the location on the keyboard from which the key stroke
                  originated.                
                <return>
                    location on keyboard from which stroke originated.                    
                </return>
            </javadoc>
            <method name="getKeyLocation" type="int" line="228">
                <scope line="229">
                    <declaration name="e" type="KeyEvent" line="230"/>
                </scope>
            </method>
            <javadoc line="236">
                Returns whether the key event involves the action key.                
                <return>
                    true if key involved is the action key                    
                </return>
            </javadoc>
            <method name="isActionKey" type="boolean" line="241">
                <scope line="242">
                    <declaration name="e" type="KeyEvent" line="243"/>
                </scope>
            </method>
            <javadoc line="249">
                Returns the modifiers provided for the input event by swing.                
                <return>
                    modifier flags for the input event                    
                </return>
            </javadoc>
            <method name="getModifiers" type="int" line="254">
                <scope line="255"/>
            </method>
            <javadoc line="261">
                Returns the extended modifiers provided for the input event by swing.                
                <return>
                    extended modifies of input event                    
                </return>
            </javadoc>
            <method name="getModifiersEx" type="int" line="266">
                <scope line="267"/>
            </method>
            <javadoc line="273">
                Returns the click count of the mouse event.                
                <return>
                    click count of mouse event                    
                </return>
            </javadoc>
            <method name="getClickCount" type="int" line="278">
                <scope line="279"/>
            </method>
            <javadoc line="285">
                Returns the time at which the event was emitted.                
                <return>
                    time at which the vent was emitted                    
                </return>
            </javadoc>
            <method name="getWhen" type="long" line="290">
                <scope line="291"/>
            </method>
            <javadoc line="297">
                Returns whether the alt key is currently down.                
                <return>
                    true if alt key is down                    
                </return>
            </javadoc>
            <method name="isAltDown" type="boolean" line="302">
                <scope line="303"/>
            </method>
            <javadoc line="309">
                Returns whether the control key is currently down.                
                <return>
                    true if control key is down                    
                </return>
            </javadoc>
            <method name="isControlDown" type="boolean" line="314">
                <scope line="315"/>
            </method>
            <javadoc line="321">
                Returns whether the meta key is currently down.                
                <return>
                    true if meta key is down                    
                </return>
            </javadoc>
            <method name="isMetaDown" type="boolean" line="326">
                <scope line="327"/>
            </method>
            <javadoc line="333">
                Returns whether the shift key is currently down.                
                <return>
                    true if shift key is down                    
                </return>
            </javadoc>
            <method name="isShiftDown" type="boolean" line="338">
                <scope line="339"/>
            </method>
            <javadoc line="345">
                Returns whether the mouse event involves the left mouse button.                
                <return>
                    true if left mouse button is involved the mouse event                    
                </return>
            </javadoc>
            <method name="isLeftMouseButton" type="boolean" line="350">
                <scope line="351"/>
            </method>
            <javadoc line="357">
                Returns whether the mouse event involves the middle mouse button.                
                <return>
                    true if middle mouse button is involved the mouse event                    
                </return>
            </javadoc>
            <method name="isMiddleMouseButton" type="boolean" line="362">
                <scope line="363"/>
            </method>
            <javadoc line="369">
                Returns whether the mouse event involves the right mouse button.                
                <return>
                    true if right mouse button is involved the mouse event                    
                </return>
            </javadoc>
            <method name="isRightMouseButton" type="boolean" line="374">
                <scope line="375"/>
            </method>
            <javadoc line="381">
                Return true if another event handler has already handled this event.
                  Event handlers should use this as a hint before handling the event
                  themselves and possibly reject events that have already been handled.                
                <return>
                    true if event has been marked as handled                    
                </return>
            </javadoc>
            <method name="isHandled" type="boolean" line="388"/>
            <javadoc line="392">
                Set that this event has been handled by an event handler. This is a
                  relaxed for of consuming events. The event will continue to get
                  dispatched to event handlers even after it is marked as handled, but
                  other event handlers that might conflict are expected to ignore events
                  that have already been handled.                
                <param>
                    handled whether the event is marked                    
                </param>
            </javadoc>
            <method name="setHandled" type="void" line="401">
                <params>
                    <param name="handled" type="boolean"/>
                </params>
            </method>
            <javadoc line="405">
                Returns the mouse button value of the underlying mouse event.                
                <return>
                    button value of underlying mouse event                    
                </return>
            </javadoc>
            <method name="getButton" type="int" line="410">
                <scope line="411"/>
            </method>
            <javadoc line="417">
                Returns the current value of the wheel rotation on Mouse Wheel Rotation
                  events.                
                <return>
                    wheel rotation value                    
                </return>
            </javadoc>
            <method name="getWheelRotation" type="int" line="423">
                <scope line="424"/>
            </method>
            <javadoc line="430">
                Returns the underlying swing event that this PInputEvent is wrapping.                
                <return>
                    underlying swing event                    
                </return>
            </javadoc>
            <method name="getSourceSwingEvent" type="InputEvent" line="435"/>
            <javadoc line="444">
                Returns whether the underlying event is a KeyEvent.                
                <return>
                    true if is key event                    
                </return>
            </javadoc>
            <method name="isKeyEvent" type="boolean" line="449"/>
            <javadoc line="453">
                Returns whether the underlying event is a MouseEvent.                
                <return>
                    true if is mouse event                    
                </return>
            </javadoc>
            <method name="isMouseEvent" type="boolean" line="458"/>
            <javadoc line="462">
                Returns whether the underlying event is a Mouse Wheel Event.                
                <return>
                    true if is a mouse wheel event                    
                </return>
            </javadoc>
            <method name="isMouseWheelEvent" type="boolean" line="468"/>
            <javadoc line="472">
                Returns whether the underlying event is a Focus Event.                
                <return>
                    true if is focus event                    
                </return>
            </javadoc>
            <method name="isFocusEvent" type="boolean" line="477"/>
            <javadoc line="481">
                Returns whether the underlying event is a mouse entered or exited event.                
                <return>
                    true if is a mouse entered or exited event                    
                </return>
            </javadoc>
            <method name="isMouseEnteredOrMouseExited" type="boolean" line="486">
                <scope line="487"/>
            </method>
            <javadoc line="493">
                Returns whether or not this event is a popup menu trigger event for the
                  platform. Must not be called if this event isn&apos;t a mouse event.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: Popup menus are triggered differently on different systems.
                  Therefore, &lt;code&gt;isPopupTrigger&lt;/code&gt; should be checked in both
                  &lt;code&gt;mousePressed&lt;/code&gt; and &lt;code&gt;mouseReleased&lt;/code&gt; for proper
                  cross-platform functionality.                
                <return>
                    boolean, true if this event triggers a popup menu for this
                      platform                    
                </return>
            </javadoc>
            <method name="isPopupTrigger" type="boolean" line="505">
                <scope line="506"/>
            </method>
            <javadoc line="518">
                Return the mouse position in PCanvas coordinates.                
                <return>
                    mouse position in PCanvas coordinates                    
                </return>
            </javadoc>
            <method name="getCanvasPosition" type="Point2D" line="523"/>
            <javadoc line="527">
                Return the delta between the last and current mouse position in PCanvas
                  coordinates.                
                <return>
                    delta between last and current mouse position as measured by the
                      PCanvas                    
                </return>
            </javadoc>
            <method name="getCanvasDelta" type="PDimension" line="534">
                <declaration name="last" type="Point2D" line="535"/>
                <declaration name="current" type="Point2D" line="536"/>
            </method>
            <javadoc line="540">
                Return the mouse position relative to a given node on the pick path.                
                <param>
                    nodeOnPath node on the current PPickPath                    
                </param>
                <return>
                    mouse position relative to the provided node on pick path                    
                </return>
            </javadoc>
            <method name="getPositionRelativeTo" type="Point2D" line="547">
                <params>
                    <param name="nodeOnPath" type="PNode"/>
                </params>
                <scope line="548"/>
                <declaration name="r" type="Point2D" line="551"/>
            </method>
            <javadoc line="555">
                Return the delta between the last and current mouse positions relative to
                  a given node on the pick path.                
                <param>
                    nodeOnPath node from which to measure                    
                </param>
                <return>
                    delta between current mouse position and a given node on the pick
                      path                    
                </return>
            </javadoc>
            <method name="getDeltaRelativeTo" type="PDimension" line="563">
                <params>
                    <param name="nodeOnPath" type="PNode"/>
                </params>
                <scope line="564"/>
                <declaration name="r" type="PDimension" line="567"/>
            </method>
            <javadoc line="571">
                Return the mouse position transformed through the view transform of the
                  bottom camera.                
                <return>
                    mouse position as measured by the bottom camera                    
                </return>
            </javadoc>
            <method name="getPosition" type="Point2D" line="577">
                <scope line="578"/>
                <declaration name="r" type="Point2D" line="581"/>
            </method>
            <javadoc line="586">
                Return the delta between the last and current mouse positions transformed
                  through the view transform of the bottom camera.                
                <return>
                    delta between last and current mouse position as measured by the
                      bottom camera                    
                </return>
            </javadoc>
            <method name="getDelta" type="PDimension" line="593">
                <scope line="594"/>
                <declaration name="r" type="PDimension" line="597"/>
            </method>
            <javadoc line="602">
                Returns a string representation of this object for debugging purposes.                
                <return>
                    string representation of this object                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="607">
                <declaration name="result" type="StringBuffer" line="608"/>
                <scope line="612"/>
            </method>
        </class>
    </source>