<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PObjectOutputStream"/>
        <class name="PLayer" line="40">
            <extends class="PNode"/>
            <comment line="95">
                ****************************************************************
                 Cameras - Maintain the list of cameras that are viewing this
                 layer.
                 ****************************************************************                
            </comment>
            <comment line="183">
                ****************************************************************
                 Camera Repaint Notifications - Layer nodes must forward their
                 repaints to each camera that is viewing them so that the camera
                 views will also get repainted.
                 ****************************************************************                
            </comment>
            <comment line="221">
                ****************************************************************
                 Serialization - Layers conditionally serialize their cameras.
                 This means that only the camera references that were unconditionally
                 (using writeObject) serialized by someone else will be restored
                 when the layer is unserialized.
                 ****************************************************************                
            </comment>
            <javadoc line="40">
                &lt;b&gt;PLayer&lt;/b&gt; is a node that can be viewed directly by multiple camera nodes.
                  Generally child nodes are added to a layer to give the viewing cameras
                  something to look at.
                  &lt;P&gt;
                  A single layer node may be viewed through multiple cameras with each camera
                  using its own view transform. This means that any node (since layers can have
                  children) may be visible through multiple cameras at the same time.
                  &lt;p&gt;                
                <see>
                    PCamera                    
                </see>
                <see>
                    edu.umd.cs.piccolo.event.PInputEvent                    
                </see>
                <see>
                    edu.umd.cs.piccolo.util.PPickPath                    
                </see>
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="57"/>
            <javadoc line="57">
                Allows for future serialization code to understand versioned binary
                  formats.                
            </javadoc>
            <declaration name="PROPERTY_CAMERAS" type="String" line="63"/>
            <javadoc line="63">
                The property name that identifies a change in the set of this layer&apos;s
                  cameras (see {@link #getCamera getCamera}, {@link #getCameraCountgetCameraCount}, {@link #getCamerasReference getCamerasReference}). In
                  any property change event the new value will be a reference to the list
                  of cameras, but old value will always be null.                
            </javadoc>
            <declaration name="PROPERTY_CODE_CAMERAS" type="int" line="72"/>
            <javadoc line="72">
                The property code that identifies a change in the set of this layer&apos;s
                  cameras (see {@link #getCamera getCamera}, {@link #getCameraCountgetCameraCount}, {@link #getCamerasReference getCamerasReference}). In
                  any property change event the new value will be a reference to the list
                  of cameras, but old value will always be null.                
            </javadoc>
            <declaration name="cameras" type="List" line="81"/>
            <javadoc line="81">
                Cameras which are registered as viewers of this PLayer.                
            </javadoc>
            <javadoc line="86">
                Creates a PLayer without any cameras attached to it.                
            </javadoc>
            <method name="PLayer" type="constructor" line="89"/>
            <javadoc line="99">
                Get the list of cameras viewing this layer.                
                <return>
                    direct reference to registered cameras                    
                </return>
            </javadoc>
            <method name="getCamerasReference" type="List" line="104"/>
            <javadoc line="108">
                Get the number of cameras viewing this layer.                
                <return>
                    the number of cameras attached to this layer                    
                </return>
            </javadoc>
            <method name="getCameraCount" type="int" line="113">
                <scope line="114"/>
            </method>
            <javadoc line="120">
                Get the camera in this layer&apos;s camera list at the specified index.                
                <param>
                    index index of camera to fetch                    
                </param>
                <return>
                    camera at the given index                    
                </return>
            </javadoc>
            <method name="getCamera" type="PCamera" line="126">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="130">
                Add a camera to this layer&apos;s camera list. This method it called
                  automatically when a layer is added to a camera.                
                <param>
                    camera the camera to add to this layer                    
                </param>
            </javadoc>
            <method name="addCamera" type="void" line="136">
                <params>
                    <param name="camera" type="PCamera"/>
                </params>
            </method>
            <javadoc line="140">
                Add a camera to this layer&apos;s camera list at the specified index. This
                  method it called automatically when a layer is added to a camera.                
                <param>
                    index index at which the camera should be inserted                    
                </param>
                <param>
                    camera Camera to add to layer                    
                </param>
            </javadoc>
            <method name="addCamera" type="void" line="147">
                <params>
                    <param name="index" type="int"/>
                    <param name="camera" type="PCamera"/>
                </params>
            </method>
            <javadoc line="153">
                Remove the camera from this layer&apos;s camera list.                
                <param>
                    camera the camera to remove from the layer, does nothing if not
                      found                    
                </param>
                <return>
                    camera that was passed in                    
                </return>
            </javadoc>
            <method name="removeCamera" type="PCamera" line="160">
                <params>
                    <param name="camera" type="PCamera"/>
                </params>
                <scope line="161"/>
            </method>
            <javadoc line="168">
                Remove the camera at the given index from this layer&apos;s camera list.                
                <param>
                    index the index of the camera we wish to remove                    
                </param>
                <return>
                    camera that was removed                    
                </return>
            </javadoc>
            <method name="removeCamera" type="PCamera" line="175">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="result" type="PCamera" line="176"/>
            </method>
            <javadoc line="188">
                Override repaints and forward them to the cameras that are viewing this
                  layer.                
                <param>
                    localBounds bounds flagged as needing repainting                    
                </param>
                <param>
                    repaintSource the source of the repaint notification                    
                </param>
            </javadoc>
            <method name="repaintFrom" type="void" line="195">
                <params>
                    <param name="localBounds" type="PBounds"/>
                    <param name="repaintSource" type="PNode"/>
                </params>
                <scope line="196"/>
                <scope line="202"/>
            </method>
            <javadoc line="207">
                Dispatches repaint notification to all registered cameras.                
                <param>
                    parentBounds bounds needing repainting in parent coordinate system                    
                </param>
            </javadoc>
            <method name="notifyCameras" type="void" line="212">
                <params>
                    <param name="parentBounds" type="PBounds"/>
                </params>
                <declaration name="count" type="int" line="213"/>
                <scope line="214">
                    <declaration name="each" type="PCamera" line="215"/>
                </scope>
            </method>
            <javadoc line="227">
                Write this layer and all its children out to the given stream. Note that
                  the layer writes out any cameras that are viewing it conditionally, so
                  they will only get written out if someone else writes them
                  unconditionally.                
                <param>
                    out object to which the layer should be streamed                    
                </param>
                <throws>
                    IOException may occur while serializing to stream                    
                </throws>
            </javadoc>
            <method name="writeObject" type="void" line="236">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="237"/>
                <declaration name="count" type="int" line="242"/>
                <scope line="243"/>
            </method>
            <javadoc line="250">
                Deserializes PLayer from the provided ObjectInputStream.                
                <param>
                    in stream from which PLayer should be read                    
                </param>
                <throws>
                    IOException since it involves quite a bit of IO                    
                </throws>
                <throws>
                    ClassNotFoundException may occur is serialized stream has been
                      renamed after serialization                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="259">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <scope line="264">
                    <declaration name="each" type="Object" line="265"/>
                    <scope line="266">
                        <scope line="267"/>
                        <scope line="270"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>