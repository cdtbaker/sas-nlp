<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.nodes">
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.MediaTracker"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="javax.imageio.ImageIO"/>
        <import package="javax.swing.ImageIcon"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <class name="PImage" line="17">
            <extends class="PNode"/>
            <javadoc line="17">
                &lt;b&gt;PImage&lt;/b&gt; is a wrapper around a java.awt.Image. If this node is copied or
                  serialized that image will be converted into a BufferedImage if it is not
                  already one.
                  &lt;P&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="26"/>
            <javadoc line="26">
                Allows for future serialization code to understand versioned binary
                  formats.                
            </javadoc>
            <declaration name="PROPERTY_IMAGE" type="String" line="31"/>
            <javadoc line="31">
                The property name that identifies a change of this node&apos;s image (see{@link #getImage getImage}). Both old and new value will be set correctly
                  to Image objects in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_IMAGE" type="int" line="36"/>
            <javadoc line="36">
                The property code that identifies a change of this node&apos;s image (see{@link #getImage getImage}). Both old and new value will be set correctly
                  to Image objects in any property change event.                
            </javadoc>
            <declaration name="image" type="Image" line="41"/>
            <javadoc line="42">
                Constructs a PImage without a java.awt.Image attached.                
            </javadoc>
            <method name="PImage" type="constructor" line="45"/>
            <javadoc line="47">
                Construct a new PImage by loading the given fileName and wrapping the
                  resulting java.awt.Image.                
                <param>
                    fileName of the image to wrap                    
                </param>
            </javadoc>
            <method name="PImage" type="constructor" line="52">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <javadoc line="55">
                Construct a new PImage wrapping the given java.awt.Image.                
                <param>
                    image image that this PImage will wrap                    
                </param>
            </javadoc>
            <method name="PImage" type="constructor" line="59">
                <params>
                    <param name="image" type="Image"/>
                </params>
            </method>
            <javadoc line="62">
                Construct a new PImage by loading the given url and wrapping the
                  resulting java.awt.Image. If the url is &lt;code&gt;null&lt;/code&gt;, create an
                  empty PImage; this behaviour is useful when fetching resources that may
                  be missing.                
                <param>
                    url URL of image resource to load                    
                </param>
            </javadoc>
            <method name="PImage" type="constructor" line="69">
                <params>
                    <param name="url" type="java.net.URL"/>
                </params>
                <scope line="70"/>
            </method>
            <javadoc line="74">
                Returns the image that is shown by this node, or null if none.                
                <return>
                    java.awt.Image being wrapped by this node                    
                </return>
            </javadoc>
            <method name="getImage" type="Image" line="78"/>
            <javadoc line="81">
                Set the image that is wrapped by this PImage node. This method will also
                  load the image using a MediaTracker before returning.                
                <param>
                    fileName file to be wrapped by this PImage                    
                </param>
            </javadoc>
            <method name="setImage" type="void" line="86">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <javadoc line="89">
                Set the image that is wrapped by this PImage node. This method will also
                  load the image using a MediaTracker before returning.                
                <param>
                    newImage image to be displayed by this PImage                    
                </param>
            </javadoc>
            <method name="setImage" type="void" line="94">
                <params>
                    <param name="newImage" type="Image"/>
                </params>
                <declaration name="oldImage" type="Image" line="95"/>
                <scope line="96"/>
                <scope line="99"/>
                <scope line="102"/>
            </method>
            <javadoc line="108">
                Ensures the image is loaded enough (loading is fine).                
                <param>
                    newImage to check                    
                </param>
                <return>
                    image or null if not loaded enough.                    
                </return>
            </javadoc>
            <method name="getLoadedImage" type="Image" line="113">
                <params>
                    <param name="newImage" type="Image"/>
                </params>
                <declaration name="imageLoader" type="ImageIcon" line="114"/>
            </method>
            <javadoc line="123">
                Renders the wrapped Image, stretching it appropriately if the bounds of
                  this PImage doesn&apos;t match the bounds of the image.                
                <param>
                    paintContext context into which the rendering will occur                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="128">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="129"/>
                <declaration name="iw" type="double" line="132"/>
                <declaration name="ih" type="double" line="133"/>
                <declaration name="b" type="PBounds" line="134"/>
                <declaration name="g2" type="Graphics2D" line="135"/>
                <scope line="136"/>
                <scope line="143"/>
            </method>
            <javadoc line="147">
                Serializes this PImage to the stream provided. The java.awt.Image wrapped
                  by this PImage is converted into a BufferedImage when serialized.                
                <param>
                    out stream into which serialized object will be serialized                    
                </param>
                <throws>
                    IOException if error occurs while writing to the output stream                    
                </throws>
            </javadoc>
            <method name="writeObject" type="void" line="153">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="bufferedImage" type="BufferedImage" line="155"/>
                <scope line="156"/>
            </method>
            <javadoc line="160">
                Deserializes a PImage from the input stream provided.                
                <param>
                    in stream from which the PImage should be read                    
                </param>
                <throws>
                    IOException if problem occurs while reading from input stream                    
                </throws>
                <throws>
                    ClassNotFoundException occurs is no mapping from the bytes in the
                      stream can be found to classes available                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="167">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="171">
                Converts the provided image into a BufferedImage. If alwaysCreateCopy is
                  false then if the image is already a buffered image it will not be copied
                  and instead the original image will just be returned.                
                <param>
                    image the image to be converted                    
                </param>
                <param>
                    alwaysCreateCopy if true, will create a copy even if image is
                      already a BufferedImage                    
                </param>
                <return>
                    a BufferedImage equivalent to the Image provided                    
                </return>
            </javadoc>
            <method name="toBufferedImage" type="BufferedImage" line="180">
                <params>
                    <param name="image" type="Image"/>
                    <param name="alwaysCreateCopy" type="boolean"/>
                </params>
                <scope line="181"/>
                <scope line="184"/>
                <declaration name="result" type="BufferedImage" line="187"/>
                <scope line="188"/>
                <scope line="191">
                    <declaration name="graphicsConfiguration" type="GraphicsConfiguration" line="192"/>
                </scope>
                <declaration name="g2" type="Graphics2D" line="195"/>
            </method>
        </class>
    </source>