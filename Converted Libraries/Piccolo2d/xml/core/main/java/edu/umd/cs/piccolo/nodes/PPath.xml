<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.nodes">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.RoundRectangle2D"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PPath" line="20">
            <extends class="PNode"/>
            <javadoc line="20">
                &lt;b&gt;PPath&lt;/b&gt; is a wrapper around a java.awt.geom.GeneralPath. The setBounds
                  method works by scaling the path to fit into the specified bounds. This
                  normally works well, but if the specified base bounds get too small then it
                  is impossible to expand the path shape again since all its numbers have
                  tended to zero, so application code may need to take this into consideration.
                  &lt;P&gt;
                  One option that applications have is to call &lt;code&gt;startResizeBounds&lt;/code&gt;
                  before starting an interaction that may make the bounds very small, and
                  calling &lt;code&gt;endResizeBounds&lt;/code&gt; when this interaction is finished. When
                  this is done PPath will use a copy of the original path to do the resizing so
                  the numbers in the path wont loose resolution.
                  &lt;P&gt;
                  This class also provides methods for constructing common shapes using a
                  general path.
                  &lt;P&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="40"/>
            <javadoc line="40">
                Allows for future serialization code to understand versioned binary
                  formats.                
            </javadoc>
            <declaration name="PROPERTY_STROKE_PAINT" type="String" line="45"/>
            <javadoc line="45">
                The property name that identifies a change of this node&apos;s stroke paint
                  (see {@link #getStrokePaint getStrokePaint}). Both old and new value will
                  be set correctly to Paint objects in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_STROKE_PAINT" type="int" line="51"/>
            <javadoc line="51">
                The property code that identifies a change of this node&apos;s stroke paint
                  (see {@link #getStrokePaint getStrokePaint}). Both old and new value will
                  be set correctly to Paint objects in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_STROKE" type="String" line="57"/>
            <javadoc line="57">
                The property name that identifies a change of this node&apos;s stroke (see{@link #getStroke getStroke}). Both old and new value will be set
                  correctly to Stroke objects in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_STROKE" type="int" line="62"/>
            <javadoc line="62">
                The property code that identifies a change of this node&apos;s stroke (see{@link #getStroke getStroke}). Both old and new value will be set
                  correctly to Stroke objects in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_PATH" type="String" line="67"/>
            <javadoc line="67">
                The property name that identifies a change of this node&apos;s path (see{@link #getPathReference getPathReference}). In any property change event
                  the new value will be a reference to this node&apos;s path, but old value will
                  always be null.                
            </javadoc>
            <declaration name="PROPERTY_CODE_PATH" type="int" line="73"/>
            <javadoc line="73">
                The property code that identifies a change of this node&apos;s path (see{@link #getPathReference getPathReference}). In any property change event
                  the new value will be a reference to this node&apos;s path, but old value will
                  always be null.                
            </javadoc>
            <declaration name="TEMP_RECTANGLE" type="Rectangle2D.Float" line="79"/>
            <declaration name="TEMP_ROUNDRECTANGLE" type="RoundRectangle2D.Float" line="80"/>
            <declaration name="TEMP_ELLIPSE" type="Ellipse2D.Float" line="81"/>
            <declaration name="TEMP_TRANSFORM" type="PAffineTransform" line="82"/>
            <declaration name="DEFAULT_STROKE" type="BasicStroke" line="83"/>
            <declaration name="DEFAULT_STROKE_PAINT" type="Color" line="84"/>
            <declaration name="path" type="GeneralPath" line="85"/>
            <declaration name="resizePath" type="GeneralPath" line="86"/>
            <declaration name="stroke" type="Stroke" line="87"/>
            <declaration name="updatingBoundsFromPath" type="boolean" line="88"/>
            <declaration name="strokePaint" type="Paint" line="89"/>
            <javadoc line="90">
                Creates a PPath object in the shape of a rectangle.                
                <param>
                    x left of the rectangle                    
                </param>
                <param>
                    y top of the rectangle                    
                </param>
                <param>
                    width width of the rectangle                    
                </param>
                <param>
                    height height of the rectangle                    
                </param>
                <return>
                    created rectangle                    
                </return>
            </javadoc>
            <method name="createRectangle" type="PPath" line="98">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
                <declaration name="result" type="PPath" line="100"/>
            </method>
            <javadoc line="104">
                Creates a PPath object in the shape of a rounded rectangle.                
                <param>
                    x left of the rectangle                    
                </param>
                <param>
                    y top of the rectangle                    
                </param>
                <param>
                    width width of the rectangle                    
                </param>
                <param>
                    height height of the rectangle                    
                </param>
                <param>
                    arcWidth the arc width at the corners of the rectangle                    
                </param>
                <param>
                    arcHeight the arc height at the corners of the rectangle                    
                </param>
                <return>
                    created rounded rectangle                    
                </return>
            </javadoc>
            <method name="createRoundRectangle" type="PPath" line="114">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                    <param name="arcWidth" type="float"/>
                    <param name="arcHeight" type="float"/>
                </params>
                <declaration name="result" type="PPath" line="116"/>
            </method>
            <javadoc line="120">
                Creates a PPath object in the shape of an ellipse.                
                <param>
                    x left of the ellipse                    
                </param>
                <param>
                    y top of the ellipse                    
                </param>
                <param>
                    width width of the ellipse                    
                </param>
                <param>
                    height height of the ellipse                    
                </param>
                <return>
                    created ellipse                    
                </return>
            </javadoc>
            <method name="createEllipse" type="PPath" line="128">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
                <declaration name="result" type="PPath" line="130"/>
            </method>
            <javadoc line="134">
                Creates a PPath in the shape of a line.                
                <param>
                    x1 x component of the first point                    
                </param>
                <param>
                    y1 y component of the first point                    
                </param>
                <param>
                    x2 x component of the second point                    
                </param>
                <param>
                    y2 y component of the second point                    
                </param>
                <return>
                    created line                    
                </return>
            </javadoc>
            <method name="createLine" type="PPath" line="142">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                </params>
                <declaration name="result" type="PPath" line="143"/>
            </method>
            <javadoc line="149">
                Creates a PPath for the poly-line for the given points.                
                <param>
                    points array of points for the point lines                    
                </param>
                <return>
                    created poly-line for the given points                    
                </return>
            </javadoc>
            <method name="createPolyline" type="PPath" line="154">
                <params>
                    <param name="points" type="Point2D[]"/>
                </params>
                <declaration name="result" type="PPath" line="155"/>
            </method>
            <javadoc line="160">
                Creates a PPath for the poly-line for the given points.                
                <param>
                    xp array of x components of the points of the poly-lines                    
                </param>
                <param>
                    yp array of y components of the points of the poly-lines                    
                </param>
                <return>
                    created poly-line for the given points                    
                </return>
            </javadoc>
            <method name="createPolyline" type="PPath" line="166">
                <params>
                    <param name="xp" type="float[]"/>
                    <param name="yp" type="float[]"/>
                </params>
                <declaration name="result" type="PPath" line="167"/>
            </method>
            <javadoc line="172">
                Creates an empty PPath with the default paint and stroke.                
            </javadoc>
            <method name="PPath" type="constructor" line="175"/>
            <javadoc line="180">
                Creates an PPath in the given shape with the default paint and stroke.                
                <param>
                    aShape the desired shape                    
                </param>
            </javadoc>
            <method name="PPath" type="constructor" line="184">
                <params>
                    <param name="aShape" type="Shape"/>
                </params>
            </method>
            <javadoc line="187">
                Construct this path with the given shape and stroke. This method may be
                  used to optimize the creation of a large number of PPaths. Normally
                  PPaths have a default stroke of width one, but when a path has a non null
                  stroke it takes significantly longer to compute its bounds. This method
                  allows you to override that default stroke before the bounds are ever
                  calculated, so if you pass in a null stroke here you won&apos;t ever have to
                  pay that bounds calculation price if you don&apos;t need to.                
                <param>
                    aShape desired shape or null if you desire an empty path                    
                </param>
                <param>
                    aStroke desired stroke                    
                </param>
            </javadoc>
            <method name="PPath" type="constructor" line="198">
                <params>
                    <param name="aShape" type="Shape"/>
                    <param name="aStroke" type="Stroke"/>
                </params>
                <scope line="201"/>
            </method>
            <javadoc line="205">
                Returns the stroke paint of the PPath.                
                <return>
                    stroke paint of the PPath                    
                </return>
            </javadoc>
            <method name="getStrokePaint" type="Paint" line="209"/>
            <javadoc line="212">
                Sets the stroke paint of the path.                
                <param>
                    newStrokePaint the paint to use as this path's stroke paint                    
                </param>
            </javadoc>
            <method name="setStrokePaint" type="void" line="216">
                <params>
                    <param name="newStrokePaint" type="Paint"/>
                </params>
                <declaration name="oldStrokePaint" type="Paint" line="217"/>
            </method>
            <javadoc line="222">
                Returns the stroke to use when drawing the path.                
                <return>
                    current stroke of path                    
                </return>
            </javadoc>
            <method name="getStroke" type="Stroke" line="226"/>
            <javadoc line="229">
                Sets the stroke to use when drawing the path.                
                <param>
                    aStroke stroke to use when drawing the path                    
                </param>
            </javadoc>
            <method name="setStroke" type="void" line="233">
                <params>
                    <param name="aStroke" type="Stroke"/>
                </params>
                <declaration name="old" type="Stroke" line="234"/>
            </method>
            <javadoc line="240">
                Stores the original size of the path before resizing started.                
            </javadoc>
            <method name="startResizeBounds" type="void" line="243"/>
            <javadoc line="246">
                Clears the size of the path before resizing.                
            </javadoc>
            <method name="endResizeBounds" type="void" line="249"/>
            <javadoc line="252">
                Set the bounds of this path. This method works by scaling the path to fit
                  into the specified bounds. This normally works well, but if the specified
                  base bounds get too small then it is impossible to expand the path shape
                  again since all its numbers have tended to zero, so application code may
                  need to take this into consideration.                
                <param>
                    x new left position of bounds                    
                </param>
                <param>
                    y new top position of bounds                    
                </param>
                <param>
                    width the new width of the bounds                    
                </param>
                <param>
                    height the new height of the bounds                    
                </param>
            </javadoc>
            <method name="internalUpdateBounds" type="void" line="263">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
                <scope line="264"/>
                <scope line="267"/>
                <declaration name="pathBounds" type="Rectangle2D" line="271"/>
                <declaration name="pathStrokeBounds" type="Rectangle2D" line="272"/>
                <declaration name="strokeOutset" type="double" line="273"/>
                <declaration name="adjustedX" type="double" line="274"/>
                <declaration name="adjustedY" type="double" line="275"/>
                <declaration name="adjustedWidth" type="double" line="276"/>
                <declaration name="adjustedHeight" type="double" line="277"/>
                <declaration name="scaleX" type="double" line="278"/>
                <scope line="279"/>
                <scope line="282"/>
                <declaration name="scaleY" type="double" line="285"/>
                <scope line="286"/>
                <scope line="289"/>
            </method>
            <javadoc line="298">
                Returns true if path crosses the provided bounds. Takes visibility of
                  path into account.                
                <param>
                    aBounds bounds being tested for intersection                    
                </param>
                <return>
                    true if path visibly crosses bounds                    
                </return>
            </javadoc>
            <method name="intersects" type="boolean" line="304">
                <params>
                    <param name="aBounds" type="Rectangle2D"/>
                </params>
                <scope line="305">
                    <scope line="306"/>
                    <scope line="309"/>
                </scope>
            </method>
            <javadoc line="315">
                Calculates the path&apos;s bounds taking stroke into account.                
                <return>
                    bounds of the path taking stroke width into account                    
                </return>
            </javadoc>
            <method name="getPathBoundsWithStroke" type="Rectangle2D" line="319">
                <scope line="320"/>
                <scope line="323"/>
            </method>
            <javadoc line="327">
                Recomputes the bounds taking stroke into account.                
            </javadoc>
            <method name="updateBoundsFromPath" type="void" line="330">
                <scope line="332"/>
                <scope line="335">
                    <declaration name="b" type="Rectangle2D" line="336"/>
                </scope>
            </method>
            <javadoc line="341">
                Paints the path in the provided paintContext. Can perform very
                  differently depending on whether the path is being drawn using its stroke
                  or its paint.
                  It both are provided to the path, fun ensues.                
                <param>
                    paintContext context in which painting is occurring                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="348">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <declaration name="p" type="Paint" line="349"/>
                <declaration name="g2" type="Graphics2D" line="350"/>
                <scope line="351"/>
                <scope line="355"/>
            </method>
            <javadoc line="361">
                Provides direct access to the underlying GeneralPath object.                
                <return>
                    underlying GeneralPath                    
                </return>
            </javadoc>
            <method name="getPathReference" type="GeneralPath" line="365"/>
            <javadoc line="368">
                Appends a &quot;move&quot; operation to the end of the path.                
                <param>
                    x the x component of the point to move to                    
                </param>
                <param>
                    y the y component of the point to move to                    
                </param>
            </javadoc>
            <method name="moveTo" type="void" line="373">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="379">
                Draws a line from the last point in the path to point provided.                
                <param>
                    x the x component of the point                    
                </param>
                <param>
                    y the y component of the point                    
                </param>
            </javadoc>
            <method name="lineTo" type="void" line="384">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                </params>
            </method>
            <javadoc line="390">
                Adds a curved segment, defined by two new points, to the path by drawing
                  a Quadratic curve that intersects both the current coordinates and the
                  coordinates (x2, y2), using the specified point (x1, y1) as a quadratic
                  parametric control point.                
                <param>
                    x1 x component of quadratic parametric control point                    
                </param>
                <param>
                    y1 y component of quadratic parametric control point                    
                </param>
                <param>
                    x2 x component of point through which quad curve will pass                    
                </param>
                <param>
                    y2 y component of point through which quad curve will pass                    
                </param>
            </javadoc>
            <method name="quadTo" type="void" line="400">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                </params>
            </method>
            <javadoc line="406">
                Adds a curved segment, defined by three new points, to the path by
                  drawing a B&amp;#233;zier curve that intersects both the current coordinates and
                  the coordinates (x3, y3), using the specified points (x1, y1) and (x2,
                  y2) as B&amp;#233;zier control points.                
                <param>
                    x1 x component of first B&#233;zier control point                    
                </param>
                <param>
                    y1 y component of first B&#233;zier control point                    
                </param>
                <param>
                    x2 x component of second B&#233;zier control point                    
                </param>
                <param>
                    y2 y component of second B&#233;zier control point                    
                </param>
                <param>
                    x3 x component of point through which curve must pass                    
                </param>
                <param>
                    y3 y component of point through which curve must pass                    
                </param>
            </javadoc>
            <method name="curveTo" type="void" line="418">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                    <param name="x3" type="float"/>
                    <param name="y3" type="float"/>
                </params>
            </method>
            <javadoc line="424">
                Appends the provided shape to the end of this path, it may conditionally
                  connect them together if they are disjoint.                
                <param>
                    aShape shape to append                    
                </param>
                <param>
                    connect whether to perform a lineTo operation to the beginning of
                      the shape before appending                    
                </param>
            </javadoc>
            <method name="append" type="void" line="431">
                <params>
                    <param name="aShape" type="Shape"/>
                    <param name="connect" type="boolean"/>
                </params>
            </method>
            <javadoc line="437">
                Replaces this PPath&apos;s path with the one provided.                
                <param>
                    aShape shape to replace the current one with                    
                </param>
            </javadoc>
            <method name="setPathTo" type="void" line="441">
                <params>
                    <param name="aShape" type="Shape"/>
                </params>
            </method>
            <javadoc line="445">
                Resets the path to a rectangle with the dimensions and position provided.                
                <param>
                    x left of the rectangle                    
                </param>
                <param>
                    y top of te rectangle                    
                </param>
                <param>
                    width width of the rectangle                    
                </param>
                <param>
                    height height of the rectangle                    
                </param>
            </javadoc>
            <method name="setPathToRectangle" type="void" line="452">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
            </method>
            <javadoc line="456">
                Resets the path to an ellipse positioned at the coordinate provided with
                  the dimensions provided.                
                <param>
                    x left of the ellipse                    
                </param>
                <param>
                    y top of the ellipse                    
                </param>
                <param>
                    width width of the ellipse                    
                </param>
                <param>
                    height height of the ellipse                    
                </param>
            </javadoc>
            <method name="setPathToEllipse" type="void" line="464">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
            </method>
            <javadoc line="468">
                Sets the path to a sequence of segments described by the points.                
                <param>
                    points points to that lie along the generated path                    
                </param>
            </javadoc>
            <method name="setPathToPolyline" type="void" line="472">
                <params>
                    <param name="points" type="Point2D[]"/>
                </params>
                <scope line="475"/>
            </method>
            <javadoc line="482">
                Sets the path to a sequence of segments described by the point components
                  provided.                
                <param>
                    xp the x components of the points along the path                    
                </param>
                <param>
                    yp the y components of the points along the path                    
                </param>
            </javadoc>
            <method name="setPathToPolyline" type="void" line="488">
                <params>
                    <param name="xp" type="float[]"/>
                    <param name="yp" type="float[]"/>
                </params>
                <scope line="491"/>
            </method>
            <javadoc line="498">
                Marks the path as closed. Making changes to it impossible.                
            </javadoc>
            <method name="closePath" type="void" line="501"/>
            <javadoc line="507">
                Empties the path.                
            </javadoc>
            <method name="reset" type="void" line="510"/>
            <javadoc line="516">
                Writes this PPath object to the output stream provided. Necessary since
                  stroke and path are not serializable by default.                
                <param>
                    out output stream into which objects are to be serialized                    
                </param>
                <throws>
                    IOException if serialiazing to output stream fails                    
                </throws>
            </javadoc>
            <method name="writeObject" type="void" line="522">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="527">
                Deserializes a PPath object from the provided input stream. This method
                  is required since Strokes and GeneralPaths are not serializable by
                  default.                
                <param>
                    in stream from which to read this PPath's state                    
                </param>
                <throws>
                    IOException when exception occurs reading from input stream                    
                </throws>
                <throws>
                    ClassNotFoundException                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="535">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>