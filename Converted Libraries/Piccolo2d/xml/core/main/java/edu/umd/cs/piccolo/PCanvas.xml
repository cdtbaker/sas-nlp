<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo">
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Cursor"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.KeyEventPostProcessor"/>
        <import package="java.awt.KeyboardFocusManager"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.awt.event.HierarchyEvent"/>
        <import package="java.awt.event.HierarchyListener"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseListener"/>
        <import package="java.awt.event.MouseMotionListener"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <import package="java.awt.event.MouseWheelListener"/>
        <import package="javax.swing.FocusManager"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.RepaintManager"/>
        <import package="javax.swing.Timer"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventListener"/>
        <import package="edu.umd.cs.piccolo.event.PPanEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PZoomEventHandler"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDebug"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PStack"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PCanvas" line="31">
            <extends class="JComponent"/>
            <implements interface="PComponent"/>
            <javadoc line="31">
                &lt;b&gt;PCanvas&lt;/b&gt; is a simple Swing component that can be used to embed Piccolo
                  into a Java Swing application. Canvases view the Piccolo scene graph through
                  a camera. The canvas manages screen updates coming from this camera, and
                  forwards swing mouse and keyboard events to the camera.
                  &lt;P&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="41"/>
            <javadoc line="41">
                Allows for future serialization code to understand versioned binary
                  formats.                
            </javadoc>
            <declaration name="INTERATING_CHANGED_NOTIFICATION" type="String" line="46"/>
            <javadoc line="46">
                @deprecated this is a typo and clients should change their code to
                  reflect the correct spelling                
            </javadoc>
            <declaration name="INTERACTING_CHANGED_NOTIFICATION" type="String" line="51"/>
            <javadoc line="51">
                The property name that identifies a change in the interacting state.                
                <since>
                    1.3                    
                </since>
                <deprecated>
                    in favor of PROPERTY_INTERACTING                    
                </deprecated>
            </javadoc>
            <declaration name="PROPERTY_INTERACTING" type="String" line="57"/>
            <javadoc line="57">
                The property name that identifies a change in the interacting state.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="CURRENT_ZCANVAS" type="PCanvas" line="62"/>
            <javadoc line="62">
                Used as a public global to track the current canvas.                
                <deprecated>
                    since it falsely assumes that there is only one PCanvas per
                      program                    
                </deprecated>
            </javadoc>
            <declaration name="camera" type="PCamera" line="68"/>
            <javadoc line="68">
                The camera though which this Canvas is viewing.                
            </javadoc>
            <declaration name="cursorStack" type="PStack" line="72"/>
            <javadoc line="72">
                Stack of cursors used to keep track of cursors as they change through
                  interactions.                
            </javadoc>
            <declaration name="interacting" type="int" line="77"/>
            <javadoc line="77">
                Whether the canvas is considered to be interacting, will probably mean
                  worse render quality.                
            </javadoc>
            <declaration name="normalRenderQuality" type="int" line="82"/>
            <javadoc line="82">
                The render quality to use when the scene is not being interacted or
                  animated.                
            </javadoc>
            <declaration name="animatingRenderQuality" type="int" line="87"/>
            <javadoc line="87">
                The quality to use while the scene is being animated.                
            </javadoc>
            <declaration name="interactingRenderQuality" type="int" line="91"/>
            <javadoc line="91">
                The quality to use while the scene is being interacted with.                
            </javadoc>
            <declaration name="panEventHandler" type="PPanEventHandler" line="95"/>
            <javadoc line="95">
                The one and only pan handler.                
            </javadoc>
            <declaration name="zoomEventHandler" type="PZoomEventHandler" line="99"/>
            <javadoc line="99">
                The one and only ZoomEventHandler.                
            </javadoc>
            <declaration name="paintingImmediately" type="boolean" line="103"/>
            <declaration name="animatingOnLastPaint" type="boolean" line="104"/>
            <javadoc line="104">
                Used to track whether the last paint operation was during an animation.                
            </javadoc>
            <declaration name="mouseListener" type="MouseListener" line="108"/>
            <javadoc line="108">
                The mouse listener that is registered for large scale mouse events.                
            </javadoc>
            <declaration name="keyEventPostProcessor" type="KeyEventPostProcessor" line="112"/>
            <javadoc line="112">
                Remembers the key processor.                
            </javadoc>
            <declaration name="mouseWheelListener" type="MouseWheelListener" line="116"/>
            <javadoc line="116">
                The mouse wheel listeners that&apos;s registered to receive wheel events.                
            </javadoc>
            <declaration name="mouseMotionListener" type="MouseMotionListener" line="120"/>
            <javadoc line="120">
                The mouse listener that is registered to receive small scale mouse events
                  (like motion).                
            </javadoc>
            <declaration name="ALL_BUTTONS_MASK" type="int" line="125"/>
            <javadoc line="126">
                Construct a canvas with the basic scene graph consisting of a root,
                  camera, and layer. Zooming and panning are automatically installed.                
            </javadoc>
            <method name="PCanvas" type="constructor" line="130">
                <anonymous_class line="141">
                    <method name="hierarchyChanged" type="void" line="142">
                        <params>
                            <param name="e" type="HierarchyEvent"/>
                        </params>
                        <scope line="143">
                            <scope line="144"/>
                            <scope line="147"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="155">
                Creates and returns a basic Scene Graph.                
                <return>
                    a built PCamera scene                    
                </return>
            </javadoc>
            <method name="createDefaultCamera" type="PCamera" line="159"/>
            <javadoc line="162">
                Get the pan event handler associated with this canvas. This event handler
                  is set up to get events from the camera associated with this canvas by
                  default.                
                <return>
                    the current pan event handler, may be null                    
                </return>
            </javadoc>
            <method name="getPanEventHandler" type="PPanEventHandler" line="168"/>
            <javadoc line="171">
                Set the pan event handler associated with this canvas.                
                <param>
                    handler the new zoom event handler                    
                </param>
            </javadoc>
            <method name="setPanEventHandler" type="void" line="175">
                <params>
                    <param name="handler" type="PPanEventHandler"/>
                </params>
                <scope line="176"/>
                <scope line="180"/>
            </method>
            <javadoc line="184">
                Get the zoom event handler associated with this canvas. This event
                  handler is set up to get events from the camera associated with this
                  canvas by default.                
                <return>
                    the current zoom event handler, may be null                    
                </return>
            </javadoc>
            <method name="getZoomEventHandler" type="PZoomEventHandler" line="190"/>
            <javadoc line="193">
                Set the zoom event handler associated with this canvas.                
                <param>
                    handler the new zoom event handler                    
                </param>
            </javadoc>
            <method name="setZoomEventHandler" type="void" line="197">
                <params>
                    <param name="handler" type="PZoomEventHandler"/>
                </params>
                <scope line="198"/>
                <scope line="202"/>
            </method>
            <javadoc line="206">
                Return the camera associated with this canvas. All input events from this
                  canvas go through this camera. And this is the camera that paints this
                  canvas.                
                <return>
                    camera through which this PCanvas views the scene                    
                </return>
            </javadoc>
            <method name="getCamera" type="PCamera" line="212"/>
            <javadoc line="215">
                Set the camera associated with this canvas. All input events from this
                  canvas go through this camera. And this is the camera that paints this
                  canvas.                
                <param>
                    newCamera the camera which this PCanvas should view the scene                    
                </param>
            </javadoc>
            <method name="setCamera" type="void" line="221">
                <params>
                    <param name="newCamera" type="PCamera"/>
                </params>
                <scope line="222"/>
                <scope line="226"/>
            </method>
            <javadoc line="231">
                Return root for this canvas.                
                <return>
                    the root PNode at the "bottom" of the scene                    
                </return>
            </javadoc>
            <method name="getRoot" type="PRoot" line="235"/>
            <javadoc line="238">
                Return layer for this canvas.                
                <return>
                    the first layer attached to this camera                    
                </return>
            </javadoc>
            <method name="getLayer" type="PLayer" line="242"/>
            <javadoc line="245">
                Add an input listener to the camera associated with this canvas.                
                <param>
                    listener listener to register for event notifications                    
                </param>
            </javadoc>
            <method name="addInputEventListener" type="void" line="249">
                <params>
                    <param name="listener" type="PInputEventListener"/>
                </params>
            </method>
            <javadoc line="252">
                Remove an input listener to the camera associated with this canvas.                
                <param>
                    listener listener to unregister from event notifications                    
                </param>
            </javadoc>
            <method name="removeInputEventListener" type="void" line="256">
                <params>
                    <param name="listener" type="PInputEventListener"/>
                </params>
            </method>
            <javadoc line="259">
                Return true if this canvas has been marked as interacting, or whether
                  it&apos;s root is interacting. If so the canvas will normally render at a
                  lower quality that is faster.                
                <return>
                    whether the canvas has been flagged as being interacted with                    
                </return>
            </javadoc>
            <method name="getInteracting" type="boolean" line="265"/>
            <javadoc line="268">
                Return true if any activities that respond with true to the method
                  isAnimating were run in the last PRoot.processInputs() loop. This values
                  is used by this canvas to determine the render quality to use for the
                  next paint.                
                <return>
                    whether the PCanvas is currently being animated                    
                </return>
            </javadoc>
            <method name="getAnimating" type="boolean" line="275"/>
            <javadoc line="278">
                Set if this canvas is interacting. If so the canvas will normally render
                  at a lower quality that is faster. Also repaints the canvas if the render
                  quality should change.                
                <param>
                    isInteracting whether the PCanvas should be considered interacting                    
                </param>
            </javadoc>
            <method name="setInteracting" type="void" line="284">
                <params>
                    <param name="isInteracting" type="boolean"/>
                </params>
                <declaration name="wasInteracting" type="boolean" line="285"/>
                <scope line="286"/>
                <scope line="289"/>
                <scope line="292">
                    <declaration name="nextRenderQuality" type="int" line="293"/>
                    <scope line="294"/>
                    <scope line="297"/>
                </scope>
                <declaration name="newInteracting" type="boolean" line="301"/>
                <scope line="302"/>
            </method>
            <javadoc line="306">
                Set the render quality that should be used when rendering this canvas
                  when it is not interacting or animating. The default value is
                  PPaintContext. HIGH_QUALITY_RENDERING.                
                <param>
                    defaultRenderQuality supports PPaintContext.HIGH_QUALITY_RENDERING
                      or PPaintContext.LOW_QUALITY_RENDERING                    
                </param>
            </javadoc>
            <method name="setDefaultRenderQuality" type="void" line="313">
                <params>
                    <param name="defaultRenderQuality" type="int"/>
                </params>
            </method>
            <javadoc line="317">
                Set the render quality that should be used when rendering this canvas
                  when it is animating. The default value is
                  PPaintContext.LOW_QUALITY_RENDERING.                
                <param>
                    animatingRenderQuality supports
                      PPaintContext.HIGH_QUALITY_RENDERING or
                      PPaintContext.LOW_QUALITY_RENDERING                    
                </param>
            </javadoc>
            <method name="setAnimatingRenderQuality" type="void" line="325">
                <params>
                    <param name="animatingRenderQuality" type="int"/>
                </params>
                <scope line="327"/>
            </method>
            <javadoc line="331">
                Set the render quality that should be used when rendering this canvas
                  when it is interacting. The default value is
                  PPaintContext.LOW_QUALITY_RENDERING.                
                <param>
                    interactingRenderQuality supports
                      PPaintContext.HIGH_QUALITY_RENDERING or
                      PPaintContext.LOW_QUALITY_RENDERING                    
                </param>
            </javadoc>
            <method name="setInteractingRenderQuality" type="void" line="339">
                <params>
                    <param name="interactingRenderQuality" type="int"/>
                </params>
                <scope line="341"/>
            </method>
            <javadoc line="345">
                Set the canvas cursor, and remember the previous cursor on the cursor
                  stack.                
                <param>
                    cursor the cursor to push onto the cursor stack                    
                </param>
            </javadoc>
            <method name="pushCursor" type="void" line="350">
                <params>
                    <param name="cursor" type="Cursor"/>
                </params>
            </method>
            <javadoc line="354">
                Pop the cursor on top of the cursorStack and set it as the canvas cursor.                
            </javadoc>
            <method name="popCursor" type="void" line="357">
                <scope line="358"/>
            </method>
            <declaration name="isButton1Pressed" type="boolean" line="362"/>
            <javadoc line="362">
                Tracks whether button1 of the mouse is down.                
            </javadoc>
            <declaration name="isButton2Pressed" type="boolean" line="366"/>
            <javadoc line="366">
                Tracks whether button2 of the mouse is down.                
            </javadoc>
            <declaration name="isButton3Pressed" type="boolean" line="370"/>
            <javadoc line="370">
                Tracks whether button3 of the mouse is down.                
            </javadoc>
            <javadoc line="374">
                Override setEnabled to install/remove canvas input sources as needed.                
                <param>
                    enabled new enable status of the Pcanvas                    
                </param>
            </javadoc>
            <method name="setEnabled" type="void" line="378">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
                <scope line="380"/>
                <scope line="383"/>
            </method>
            <javadoc line="387">
                This method installs mouse and key listeners on the canvas that forward
                  those events to piccolo.                
            </javadoc>
            <method name="installInputSources" type="void" line="391">
                <scope line="392"/>
                <scope line="396"/>
                <scope line="400"/>
                <scope line="404"/>
            </method>
            <javadoc line="409">
                This method removes mouse and key listeners on the canvas that forward
                  those events to piccolo.                
            </javadoc>
            <method name="removeInputSources" type="void" line="413"/>
            <javadoc line="423">
                Sends the given input event with the given type to the current
                  InputManager.                
                <param>
                    event event to dispatch                    
                </param>
                <param>
                    type type of event being dispatched                    
                </param>
            </javadoc>
            <method name="sendInputEventToInputManager" type="void" line="429">
                <params>
                    <param name="event" type="InputEvent"/>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="432">
                Updates the bounds of the component and updates the camera accordingly.                
                <param>
                    x left of bounds                    
                </param>
                <param>
                    y top of bounds                    
                </param>
                <param>
                    width width of bounds                    
                </param>
                <param>
                    height height of bounds                    
                </param>
            </javadoc>
            <method name="setBounds" type="void" line="439">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="443">
                {@inheritDoc}                
            </javadoc>
            <method name="repaint" type="void" line="446">
                <params>
                    <param name="bounds" type="PBounds"/>
                </params>
            </method>
            <declaration name="repaintBounds" type="PBounds" line="452"/>
            <javadoc line="453">
                {@inheritDoc}                
            </javadoc>
            <method name="paintComponent" type="void" line="456">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="g2" type="Graphics2D" line="458"/>
                <scope line="459"/>
                <scope line="463"/>
                <declaration name="paintContext" type="PPaintContext" line="466"/>
                <scope line="467">
                    <scope line="468"/>
                    <scope line="471"/>
                </scope>
                <scope line="475"/>
                <scope line="479"/>
            </method>
            <javadoc line="486">
                If not painting immediately, send paint notification to RepaintManager,
                  otherwise does nothing.                
            </javadoc>
            <method name="paintImmediately" type="void" line="490">
                <scope line="491"/>
            </method>
            <javadoc line="498">
                Helper for creating a timer. It&apos;s an extension point for subclasses to
                  install their own timers.                
                <param>
                    delay the number of milliseconds to wait before invoking the
                      listener                    
                </param>
                <param>
                    listener the listener to invoke after the delay                    
                </param>
                <return>
                    the created Timer                    
                </return>
            </javadoc>
            <method name="createTimer" type="Timer" line="506">
                <params>
                    <param name="delay" type="int"/>
                    <param name="listener" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="509">
                Returns the quality to use when not animating or interacting.                
                <since>
                    1.3                    
                </since>
                <deprecated>
                    in favor or getNormalRenderQuality                    
                </deprecated>
                <return>
                    the render quality to use when not animating or interacting                    
                </return>
            </javadoc>
            <method name="getDefaultRenderQuality" type="int" line="515"/>
            <javadoc line="518">
                Returns the quality to use when not animating or interacting.                
                <since>
                    1.3                    
                </since>
                <return>
                    the render quality to use when not animating or interacting                    
                </return>
            </javadoc>
            <method name="getNormalRenderQuality" type="int" line="523"/>
            <javadoc line="526">
                Returns the quality to use when animating.                
                <since>
                    1.3                    
                </since>
                <return>
                    Returns the quality to use when animating                    
                </return>
            </javadoc>
            <method name="getAnimatingRenderQuality" type="int" line="531"/>
            <javadoc line="534">
                Returns the quality to use when interacting.                
                <since>
                    1.3                    
                </since>
                <return>
                    Returns the quality to use when interacting                    
                </return>
            </javadoc>
            <method name="getInteractingRenderQuality" type="int" line="539"/>
            <javadoc line="542">
                Returns the input event listeners registered to receive input events.                
                <since>
                    1.3                    
                </since>
                <return>
                    array or input event listeners                    
                </return>
            </javadoc>
            <method name="getInputEventListeners" type="PInputEventListener[]" line="547"/>
            <javadoc line="550">
                Prints the entire scene regardless of what the viewable area is.                
                <param>
                    graphics Graphics context onto which to paint the scene for printing                    
                </param>
            </javadoc>
            <method name="printAll" type="void" line="554">
                <params>
                    <param name="graphics" type="Graphics"/>
                </params>
                <scope line="555"/>
                <declaration name="g2" type="Graphics2D" line="558"/>
                <declaration name="clippingRect" type="PBounds" line="559"/>
                <declaration name="originalCameraBounds" type="PBounds" line="561"/>
                <declaration name="layerBounds" type="PBounds" line="562"/>
                <declaration name="clipRatio" type="double" line="564"/>
                <declaration name="nodeRatio" type="double" line="565"/>
                <declaration name="scale" type="double" line="566"/>
                <scope line="567"/>
                <scope line="570"/>
                <declaration name="pc" type="PPaintContext" line="575"/>
            </method>
            <class name="MouseMotionInputSourceListener" line="580">
                <implements interface="MouseMotionListener"/>
                <javadoc line="581">
                    {@inheritDoc}                    
                </javadoc>
                <method name="mouseDragged" type="void" line="584">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="587">
                    {@inheritDoc}                    
                </javadoc>
                <method name="mouseMoved" type="void" line="590">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="MouseEventInputSource" line="594">
                <implements interface="MouseListener"/>
                <javadoc line="595">
                    {@inheritDoc}                    
                </javadoc>
                <method name="mouseClicked" type="void" line="598">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="601">
                    {@inheritDoc}                    
                </javadoc>
                <method name="mouseEntered" type="void" line="604">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="simulated" type="MouseEvent" line="605"/>
                    <scope line="606"/>
                    <scope line="609"/>
                </method>
                <javadoc line="615">
                    {@inheritDoc}                    
                </javadoc>
                <method name="mouseExited" type="void" line="618">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="simulated" type="MouseEvent" line="619"/>
                    <scope line="620"/>
                    <scope line="623"/>
                </method>
                <javadoc line="629">
                    {@inheritDoc}                    
                </javadoc>
                <method name="mousePressed" type="void" line="632">
                    <params>
                        <param name="rawEvent" type="MouseEvent"/>
                    </params>
                    <declaration name="shouldBalanceEvent" type="boolean" line="634"/>
                    <declaration name="event" type="MouseEvent" line="635"/>
                    <scope line="638"/>
                    <scope line="644"/>
                    <scope line="650"/>
                    <scope line="658"/>
                </method>
                <javadoc line="663">
                    {@inheritDoc}                    
                </javadoc>
                <method name="mouseReleased" type="void" line="666">
                    <params>
                        <param name="rawEvent" type="MouseEvent"/>
                    </params>
                    <declaration name="shouldBalanceEvent" type="boolean" line="667"/>
                    <declaration name="event" type="MouseEvent" line="668"/>
                    <scope line="671"/>
                    <scope line="677"/>
                    <scope line="683"/>
                    <scope line="691"/>
                </method>
                <method name="copyButtonsFromModifiers" type="MouseEvent" line="696">
                    <params>
                        <param name="rawEvent" type="MouseEvent"/>
                        <param name="eventType" type="int"/>
                    </params>
                    <scope line="697"/>
                    <declaration name="newButton" type="int" line="700"/>
                    <scope line="701"/>
                    <scope line="704"/>
                    <scope line="707"/>
                </method>
                <method name="hasButtonModifier" type="boolean" line="712">
                    <params>
                        <param name="event" type="MouseEvent"/>
                        <param name="buttonMask" type="int"/>
                    </params>
                </method>
                <method name="buildRetypedMouseEvent" type="MouseEvent" line="715">
                    <params>
                        <param name="e" type="MouseEvent"/>
                        <param name="newType" type="int"/>
                    </params>
                </method>
                <method name="buildModifiedMouseEvent" type="MouseEvent" line="718">
                    <params>
                        <param name="e" type="MouseEvent"/>
                        <param name="newType" type="int"/>
                        <param name="newButton" type="int"/>
                    </params>
                </method>
                <method name="sendRetypedMouseEventToInputManager" type="void" line="721">
                    <params>
                        <param name="e" type="MouseEvent"/>
                        <param name="newType" type="int"/>
                    </params>
                    <declaration name="retypedEvent" type="MouseEvent" line="722"/>
                </method>
            </class>
            <method name="isAnyButtonDown" type="boolean" line="726">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
            </method>
            <class name="KeyEventInputSourceListener" line="729">
                <implements interface="KeyEventPostProcessor"/>
                <javadoc line="729">
                    Class responsible for sending key events to the the InputManager.                    
                </javadoc>
                <javadoc line="733">
                    {@inheritDoc}                    
                </javadoc>
                <method name="postProcessKeyEvent" type="boolean" line="736">
                    <params>
                        <param name="keyEvent" type="KeyEvent"/>
                    </params>
                    <declaration name="owner" type="Component" line="737"/>
                    <scope line="738">
                        <scope line="739"/>
                    </scope>
                </method>
            </class>
            <class name="MouseWheelInputSourceListener" line="748">
                <implements interface="MouseWheelListener"/>
                <javadoc line="748">
                    Class responsible for sending mouse events to the the InputManager.                    
                </javadoc>
                <javadoc line="752">
                    {@inheritDoc}                    
                </javadoc>
                <method name="mouseWheelMoved" type="void" line="755">
                    <params>
                        <param name="e" type="MouseWheelEvent"/>
                    </params>
                    <scope line="757"/>
                </method>
            </class>
        </class>
    </source>