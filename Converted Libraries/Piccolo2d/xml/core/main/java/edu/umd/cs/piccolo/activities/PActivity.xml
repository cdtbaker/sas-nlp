<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.activities">
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PActivity" line="33">
            <comment line="126">
                ****************************************************************                
            </comment>
            <comment line="127">
                Basics                
            </comment>
            <comment line="128">
                ****************************************************************                
            </comment>
            <comment line="221">
                ****************************************************************                
            </comment>
            <comment line="222">
                Stepping                
            </comment>
            <comment line="223">
                ****************************************************************                
            </comment>
            <comment line="300">
                ****************************************************************                
            </comment>
            <comment line="301">
                Controlling                
            </comment>
            <comment line="302">
                ****************************************************************                
            </comment>
            <javadoc line="33">
                &lt;b&gt;PActivity&lt;/b&gt; controls some time dependent aspect of Piccolo, such as
                  animation. Once created activities must be scheduled with the
                  PActivityScheduler managed by the PRoot to run. They are automatically
                  removed from the scheduler when the animation has finished.
                  &lt;P&gt;
                  See the PNode.animate() methods for an example of how to set up and run
                  different activities.
                  &lt;P&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="TERMINATE_WITHOUT_FINISHING" type="int" line="47"/>
            <javadoc line="47">
                Parameter for terminate that signifies that activity should bail out
                  immediately without flagging activity as finished.                
            </javadoc>
            <declaration name="TERMINATE_AND_FINISH" type="int" line="53"/>
            <javadoc line="53">
                Parameter for terminate that signifies that activity should bail out
                  immediately, but flag activity as finished.                
            </javadoc>
            <declaration name="TERMINATE_AND_FINISH_IF_STEPPING" type="int" line="59"/>
            <javadoc line="59">
                Parameter for terminate that signifies that activity should bail out
                  immediately, if currently active.                
            </javadoc>
            <declaration name="scheduler" type="PActivityScheduler" line="65"/>
            <javadoc line="65">
                Activity scheduler that this activity is bound to.                
            </javadoc>
            <declaration name="startTime" type="long" line="68"/>
            <javadoc line="68">
                Time at which this activity should start in PRoot global time.                
            </javadoc>
            <declaration name="duration" type="long" line="71"/>
            <javadoc line="71">
                Duration in milliseconds that this activity should last.                
            </javadoc>
            <declaration name="stepRate" type="long" line="74"/>
            <javadoc line="74">
                How many milliseconds should pass between steps.                
            </javadoc>
            <declaration name="delegate" type="PActivityDelegate" line="77"/>
            <declaration name="stepping" type="boolean" line="79"/>
            <javadoc line="79">
                Whether this activity is currently active.                
            </javadoc>
            <declaration name="nextStepTime" type="long" line="82"/>
            <javadoc line="82">
                Next time at which step should occur.                
            </javadoc>
            <javadoc line="85">
                Constructs a new PActivity.                
                <param>
                    aDuration the amount of time that this activity should take to
                      complete, -1 for infinite.                    
                </param>
            </javadoc>
            <method name="PActivity" type="constructor" line="91">
                <params>
                    <param name="aDuration" type="long"/>
                </params>
            </method>
            <javadoc line="95">
                Constructs a new PActivity.                
                <param>
                    aDuration the amount of time that this activity should take to
                      complete, -1 for infinite.                    
                </param>
                <param>
                    aStepRate the maximum rate that this activity should receive step
                      events.                    
                </param>
            </javadoc>
            <method name="PActivity" type="constructor" line="103">
                <params>
                    <param name="aDuration" type="long"/>
                    <param name="aStepRate" type="long"/>
                </params>
            </method>
            <javadoc line="107">
                Constructs a new PActivity.                
                <param>
                    aDuration the amount of time that this activity should take to
                      complete, -1 for infinite.                    
                </param>
                <param>
                    aStepRate the maximum rate that this activity should receive step
                      events.                    
                </param>
                <param>
                    aStartTime the time (relative to System.currentTimeMillis()) that
                      this activity should start.                    
                </param>
            </javadoc>
            <method name="PActivity" type="constructor" line="117">
                <params>
                    <param name="aDuration" type="long"/>
                    <param name="aStepRate" type="long"/>
                    <param name="aStartTime" type="long"/>
                </params>
            </method>
            <javadoc line="129">
                Return the time that this activity should start running in PRoot global
                  time. When this time is reached (or soon after) this activity will have
                  its startStepping() method called.                
                <return>
                    time at which this activity should start in PRoot global time.                    
                </return>
            </javadoc>
            <method name="getStartTime" type="long" line="136"/>
            <javadoc line="140">
                Set the time that this activity should start running in PRoot global
                  time. When this time is reached (or soon after) this activity will have
                  its startStepping() method called.                
                <param>
                    aTriggerTime time at which you want this activity to begin in
                      PRoot global time                    
                </param>
            </javadoc>
            <method name="setStartTime" type="void" line="148">
                <params>
                    <param name="aTriggerTime" type="long"/>
                </params>
            </method>
            <javadoc line="152">
                Return the amount of time that this activity should delay between steps.                
                <return>
                    the desired milliseconds between steps                    
                </return>
            </javadoc>
            <method name="getStepRate" type="long" line="157"/>
            <javadoc line="161">
                Set the amount of time that this activity should delay between steps.                
                <param>
                    aStepRate desired step rate in milliseconds between steps                    
                </param>
            </javadoc>
            <method name="setStepRate" type="void" line="166">
                <params>
                    <param name="aStepRate" type="long"/>
                </params>
            </method>
            <javadoc line="170">
                Gets the next step time desired for this activity. Exists since some
                  steps might eat into the step rate otherwise.                
                <return>
                    next calculated step time                    
                </return>
            </javadoc>
            <method name="getNextStepTime" type="long" line="176"/>
            <javadoc line="180">
                Return the amount of time that this activity should take to complete,
                  after the startStepping method is called.                
                <return>
                    time that this activity should take to complete                    
                </return>
            </javadoc>
            <method name="getDuration" type="long" line="186"/>
            <javadoc line="190">
                Set the amount of time that this activity should take to complete, after
                  the startStepping method is called.                
                <param>
                    aDuration desired duration this activity should take (-1 for
                      infinite) once it begins stepping                    
                </param>
            </javadoc>
            <method name="setDuration" type="void" line="197">
                <params>
                    <param name="aDuration" type="long"/>
                </params>
            </method>
            <javadoc line="201">
                Returns the activity scheduler associated with this activity.                
                <return>
                    associated scheduler                    
                </return>
            </javadoc>
            <method name="getActivityScheduler" type="PActivityScheduler" line="206"/>
            <javadoc line="210">
                Informs the activity of the scheduler that will be responsible for
                  scheduling it.                
                <param>
                    aScheduler scheduler to associate with this activity                    
                </param>
            </javadoc>
            <method name="setActivityScheduler" type="void" line="216">
                <params>
                    <param name="aScheduler" type="PActivityScheduler"/>
                </params>
            </method>
            <javadoc line="224">
                Return true if this activity is stepping.                
                <return>
                    whether this activity is stepping                    
                </return>
            </javadoc>
            <method name="isStepping" type="boolean" line="229"/>
            <javadoc line="233">
                Return true if this activity is performing an animation. This is used by
                  the PCanvas to determine if it should set the render quality to
                  PCanvas.animatingRenderQuality or not for each frame it renders.                
                <return>
                    whether this activity is an animation, subclasses can override
                      this.                    
                </return>
            </javadoc>
            <method name="isAnimation" type="boolean" line="241"/>
            <javadoc line="245">
                This method is called right before an activity is scheduled to start
                  running. After this method is called step() will be called until the
                  activity finishes.                
            </javadoc>
            <method name="activityStarted" type="void" line="250">
                <scope line="251"/>
            </method>
            <javadoc line="256">
                This is the method that most activities override to perform their
                  behavior. It will be called repeatedly when the activity is running.                
                <param>
                    elapsedTime the amount of time that has passed relative to the
                      activities startTime.                    
                </param>
            </javadoc>
            <method name="activityStep" type="void" line="263">
                <params>
                    <param name="elapsedTime" type="long"/>
                </params>
                <scope line="264"/>
            </method>
            <javadoc line="269">
                This method is called after an activity is has finished running and the
                  activity has been removed from the PActivityScheduler queue.                
            </javadoc>
            <method name="activityFinished" type="void" line="273">
                <scope line="274"/>
            </method>
            <javadoc line="279">
                Get the delegate for this activity. The delegate is notified when the
                  activity starts and stops stepping.                
                <return>
                    delegate of this activity, may be null                    
                </return>
            </javadoc>
            <method name="getDelegate" type="PActivityDelegate" line="285"/>
            <javadoc line="289">
                Set the delegate for this activity. The delegate is notified when the
                  activity starts and stops stepping.                
                <param>
                    delegate delegate that should be informed of activity events                    
                </param>
            </javadoc>
            <method name="setDelegate" type="void" line="295">
                <params>
                    <param name="delegate" type="PActivityDelegate"/>
                </params>
            </method>
            <javadoc line="303">
                Schedules this activity to start after the first activity has finished.
                  Note that no link is created between these activities, if the startTime
                  or duration of the first activity is later changed this activities start
                  time will not be updated to reflect that change.                
                <param>
                    first activity after which this activity should be scheduled                    
                </param>
            </javadoc>
            <method name="startAfter" type="void" line="311">
                <params>
                    <param name="first" type="PActivity"/>
                </params>
            </method>
            <javadoc line="315">
                Stop this activity immediately, and remove it from the activity
                  scheduler. The default termination behavior is call activityFinished if
                  the activity is currently stepping. Use terminate(terminationBehavior)
                  use a different termination behavior.                
            </javadoc>
            <method name="terminate" type="void" line="321"/>
            <javadoc line="325">
                Stop this activity immediately, and remove it from the activity
                  scheduler. The termination behavior determines when and if
                  activityStarted and activityFinished get called. The possible termination
                  behaviors are as follow:
                  TERMINATE_WITHOUT_FINISHING - The method activityFinished will never get
                  called and so the activity will be terminated midway.
                  TERMINATE_AND_FINISH - The method activityFinished will always get
                  called. And so the activity will always end in it&apos;s completed state. If
                  the activity has not yet started the method activityStarted will also be
                  called. TERMINATE_AND_FINISH_IF_STEPPING - The method activityFinished
                  will only be called if the activity has previously started.                
                <param>
                    terminationBehavior behavior to use regarding delegate
                      notification and event firing                    
                </param>
            </javadoc>
            <method name="terminate" type="void" line="342">
                <params>
                    <param name="terminationBehavior" type="int"/>
                </params>
                <scope line="343"/>
                <scope line="353"/>
                <scope line="357"/>
                <scope line="365"/>
            </method>
            <javadoc line="375">
                The activity scheduler calls this method and it is here that the activity
                  decides if it should do a step or not for the given time.                
                <param>
                    currentTime in global root time                    
                </param>
                <return>
                    number of milliseconds in global root time before processStep
                      should be called again, -1 if never                    
                </return>
            </javadoc>
            <method name="processStep" type="long" line="383">
                <params>
                    <param name="currentTime" type="long"/>
                </params>
                <comment line="384">
                    if before start time                    
                </comment>
                <comment line="389">
                    if past stop time                    
                </comment>
                <comment line="404">
                    else should be stepping                    
                </comment>
                <scope line="385"/>
                <scope line="390">
                    <scope line="391"/>
                    <scope line="396"/>
                </scope>
                <scope line="405"/>
                <scope line="410"/>
            </method>
            <javadoc line="418">
                Return the time when this activity should finish running. At this time
                  (or soon after) the stoppedStepping method will be called                
                <return>
                    time at which this activity should be stopped                    
                </return>
            </javadoc>
            <method name="getStopTime" type="long" line="424">
                <scope line="425"/>
            </method>
            <javadoc line="431">
                @deprecated see http://code.google.com/p/piccolo2d/issues/detail?id=99                
                <return>
                    string representation of this activity                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="436"/>
            <interface name="PActivityDelegate">
                <javadoc line="440">
                    &lt;b&gt;PActivityDelegate&lt;/b&gt; is used by classes to learn about and act on the
                      different states that a PActivity goes through, such as when the activity
                      starts and stops stepping.                    
                </javadoc>
                <method name="activityStarted" type="void" line="446"/>
                <javadoc line="446">
                    Gets called when the activity starts.                    
                    <param>
                        activity activity that started                        
                    </param>
                </javadoc>
                <method name="activityStepped" type="void" line="453"/>
                <javadoc line="453">
                    Gets called for each step of the activity.                    
                    <param>
                        activity activity that is stepping                        
                    </param>
                </javadoc>
                <method name="activityFinished" type="void" line="460"/>
                <javadoc line="460">
                    Gets called when the activity finishes.                    
                    <param>
                        activity activity that finished                        
                    </param>
                </javadoc>
            </interface>
        </class>
    </source>