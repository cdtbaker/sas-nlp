<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Dimension2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="edu.umd.cs.piccolo.activities.PTransformActivity"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDebug"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PObjectOutputStream"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PCamera" line="24">
            <extends class="PNode"/>
            <javadoc line="24">
                &lt;b&gt;PCamera&lt;/b&gt; represents a viewport onto a list of layer nodes. Each camera
                  maintains a view transform through which it views these layers. Translating
                  and scaling this view transform is how zooming and panning are implemented.
                  &lt;p&gt;
                  Cameras are also the point through which all PInputEvents enter Piccolo. The
                  canvas coordinate system and the local coordinate system of the topmost
                  camera should always be the same.
                  &lt;/p&gt;                
                <see>
                    PLayer                    
                </see>
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="38"/>
            <javadoc line="38">
                Default serial version UID.                
            </javadoc>
            <declaration name="PROPERTY_LAYERS" type="String" line="42"/>
            <javadoc line="42">
                The property name that identifies a change in the set of this camera&apos;s
                  layers (see {@link #getLayer getLayer}, {@link #getLayerCountgetLayerCount}, {@link #getLayersReference getLayersReference}). A
                  property change event&apos;s new value will be a reference to the list of this
                  nodes layers, but old value will always be null.                
            </javadoc>
            <declaration name="PROPERTY_CODE_LAYERS" type="int" line="49"/>
            <javadoc line="49">
                The property code that identifies a change in the set of this camera&apos;s
                  layers (see {@link #getLayer getLayer}, {@link #getLayerCountgetLayerCount}, {@link #getLayersReference getLayersReference}). A
                  property change event&apos;s new value will be a reference to the list of this
                  nodes layers, but old value will always be null.                
            </javadoc>
            <declaration name="PROPERTY_VIEW_TRANSFORM" type="String" line="56"/>
            <javadoc line="56">
                The property name that identifies a change in this camera&apos;s view
                  transform (see {@link #getViewTransform getViewTransform},{@link #getViewTransformReference getViewTransformReference}). A property
                  change event&apos;s new value will be a reference to the view transform, but
                  old value will always be null.                
            </javadoc>
            <declaration name="PROPERTY_CODE_VIEW_TRANSFORM" type="int" line="63"/>
            <javadoc line="63">
                The property code that identifies a change in this camera&apos;s view
                  transform (see {@link #getViewTransform getViewTransform},{@link #getViewTransformReference getViewTransformReference}). A property
                  change event&apos;s new value will be a reference to the view transform, but
                  old value will always be null.                
            </javadoc>
            <declaration name="VIEW_CONSTRAINT_NONE" type="int" line="70"/>
            <javadoc line="70">
                Denotes that the view has no constraints.                
            </javadoc>
            <declaration name="VIEW_CONSTRAINT_ALL" type="int" line="74"/>
            <javadoc line="74">
                Enforces that the view be able to see all nodes in the scene.                
            </javadoc>
            <declaration name="VIEW_CONSTRAINT_CENTER" type="int" line="78"/>
            <javadoc line="78">
                Constrains the the view to be centered on the scene&apos;s full bounds.                
            </javadoc>
            <declaration name="component" type="PComponent" line="82"/>
            <javadoc line="82">
                Component which receives repaint notification from this camera.                
            </javadoc>
            <declaration name="layers" type="List" line="86"/>
            <javadoc line="86">
                List of layers viewed by this camera.                
            </javadoc>
            <declaration name="viewTransform" type="PAffineTransform" line="90"/>
            <javadoc line="90">
                Transform applied to layers before they are rendered. This transform
                  differs from the transform applied to the children of this PCamera
                  (sticky objects).                
            </javadoc>
            <declaration name="viewConstraint" type="int" line="96"/>
            <javadoc line="96">
                Constraints to apply to the viewing area.                
            </javadoc>
            <declaration name="TEMP_REPAINT_RECT" type="PBounds" line="100"/>
            <javadoc line="100">
                Temporary bounds used as an optimization during repaint.                
            </javadoc>
            <javadoc line="104">
                Create a new camera with an empy list of layers.                
            </javadoc>
            <method name="PCamera" type="constructor" line="107"/>
            <javadoc line="113">
                Return the component for this camera, or &lt;code&gt;null&lt;/code&gt; if no
                  component has been associated with this camera, as may be the case for
                  internal cameras.                
                <return>
                    the component for this camera, or <code>null</code> if no such
                      component exists                    
                </return>
            </javadoc>
            <method name="getComponent" type="PComponent" line="120"/>
            <javadoc line="123">
                Set the component for this camera to &lt;code&gt;component&lt;/code&gt;. The
                  component, if non-null, receives repaint notification from this camera.                
                <param>
                    component component for this camera                    
                </param>
            </javadoc>
            <method name="setComponent" type="void" line="128">
                <params>
                    <param name="component" type="PComponent"/>
                </params>
            </method>
            <javadoc line="132">
                Repaint this camera and forward the repaint request to the component
                  for this camera, if it is non-null.                
                <param>
                    localBounds bounds that require repainting, in local coordinates                    
                </param>
                <param>
                    sourceNode node from which the repaint message originates, may
                      be the camera itself                    
                </param>
            </javadoc>
            <method name="repaintFrom" type="void" line="139">
                <params>
                    <param name="localBounds" type="PBounds"/>
                    <param name="sourceNode" type="PNode"/>
                </params>
                <scope line="140">
                    <scope line="141"/>
                    <scope line="144"/>
                </scope>
            </method>
            <javadoc line="150">
                Repaint from one of the camera&apos;s layers. The repaint region needs to be
                  transformed from view to local in this case. Unlike most repaint methods
                  in Piccolo2D this one must not modify the &lt;code&gt;viewBounds&lt;/code&gt;
                  parameter.                
                <since>
                    1.3                    
                </since>
                <param>
                    viewBounds bounds that require repainting, in view coordinates                    
                </param>
                <param>
                    repaintedLayer layer dispatching the repaint notification                    
                </param>
            </javadoc>
            <method name="repaintFromLayer" type="void" line="159">
                <params>
                    <param name="viewBounds" type="PBounds"/>
                    <param name="repaintedLayer" type="PLayer"/>
                </params>
                <scope line="162"/>
            </method>
            <javadoc line="167">
                @deprecated by {@link #repaintFromLayer(PBounds,PLayer)}. Will be removed
                  in version 2.0.                
                <param>
                    viewBounds bounds that require repainting, in view coordinates                    
                </param>
                <param>
                    repaintedLayer layer dispatching the repaint notification                    
                </param>
            </javadoc>
            <method name="repaintFromLayer" type="void" line="173">
                <params>
                    <param name="viewBounds" type="PBounds"/>
                    <param name="repaintedLayer" type="PNode"/>
                </params>
            </method>
            <javadoc line="176">
                Return a reference to the list of layers viewed by this camera.                
                <return>
                    the list of layers viewed by this camera                    
                </return>
            </javadoc>
            <method name="getLayersReference" type="List" line="180"/>
            <javadoc line="183">
                Return the number of layers in the list of layers viewed by this camera.                
                <return>
                    the number of layers in the list of layers viewed by this camera                    
                </return>
            </javadoc>
            <method name="getLayerCount" type="int" line="187"/>
            <javadoc line="190">
                Return the layer at the specified position in the list of layers viewed by this camera.                
                <param>
                    index index of the layer to return                    
                </param>
                <return>
                    the layer at the specified position in the list of layers viewed by this camera                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is out of range
                      (<code>index &lt; 0 || index &gt;= getLayerCount()</code>)                    
                </throws>
            </javadoc>
            <method name="getLayer" type="PLayer" line="197">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="200">
                Return the index of the first occurrence of the specified layer in the
                  list of layers viewed by this camera, or &lt;code&gt;-1&lt;/code&gt; if the list of layers
                  viewed by this camera does not contain the specified layer.                
                <param>
                    layer layer to search for                    
                </param>
                <return>
                    the index of the first occurrence of the specified layer in the
                      list of layers viewed by this camera, or <code>-1</code> if the list of
                      layers viewed by this camera does not contain the specified layer                    
                </return>
            </javadoc>
            <method name="indexOfLayer" type="int" line="209">
                <params>
                    <param name="layer" type="PLayer"/>
                </params>
            </method>
            <javadoc line="212">
                Inserts the specified layer at the end of the list of layers viewed by this camera.
                  Layers may be viewed by multiple cameras at once.                
                <param>
                    layer layer to add                    
                </param>
            </javadoc>
            <method name="addLayer" type="void" line="217">
                <params>
                    <param name="layer" type="PLayer"/>
                </params>
            </method>
            <javadoc line="220">
                Inserts the specified layer at the specified position in the list of layers viewed by this camera.
                  Layers may be viewed by multiple cameras at once.                
                <param>
                    index index at which the specified layer is to be inserted                    
                </param>
                <param>
                    layer layer to add                    
                </param>
                <throws>
                    IndexOutOfBoundsException if the specified index is out of range
                      (<code>index &lt; 0 || index &gt;= getLayerCount()</code>)                    
                </throws>
            </javadoc>
            <method name="addLayer" type="void" line="228">
                <params>
                    <param name="index" type="int"/>
                    <param name="layer" type="PLayer"/>
                </params>
            </method>
            <javadoc line="234">
                Removes the first occurrence of the specified layer from the list of
                  layers viewed by this camera, if it is present.                
                <param>
                    layer layer to be removed                    
                </param>
                <return>
                    the specified layer                    
                </return>
            </javadoc>
            <method name="removeLayer" type="PLayer" line="240">
                <params>
                    <param name="layer" type="PLayer"/>
                </params>
                <scope line="242"/>
            </method>
            <javadoc line="248">
                Removes the element at the specified position from the list of layers
                  viewed by this camera.                
                <param>
                    index index of the layer to remove                    
                </param>
                <return>
                    the layer previously at the specified position                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the specified index is out of range
                      (<code>index &lt; 0 || index &gt;= getLayerCount()</code>)                    
                </throws>
            </javadoc>
            <method name="removeLayer" type="PLayer" line="256">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="layer" type="PLayer" line="257"/>
            </method>
            <javadoc line="263">
                Return the union of the full bounds of each layer in the list of layers
                  viewed by this camera, or empty bounds if the list of layers viewed by
                  this camera is empty.                
                <return>
                    the union of the full bounds of each layer in the list of layers
                      viewed by this camera, or empty bounds if the list of layers viewed
                      by this camera is empty                    
                </return>
            </javadoc>
            <method name="getUnionOfLayerFullBounds" type="PBounds" line="271">
                <declaration name="result" type="PBounds" line="272"/>
                <declaration name="size" type="int" line="273"/>
                <scope line="274">
                    <declaration name="each" type="PLayer" line="275"/>
                </scope>
            </method>
            <javadoc line="280">
                Paint this camera and then paint this camera&apos;s view through its view
                  transform.                
                <param>
                    paintContext context in which painting occurs                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="285">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
            </method>
            <javadoc line="294">
                Paint all the layers in the list of layers viewed by this camera. This method
                  is called after the view transform and clip have been applied to the
                  specified paint context.                
                <param>
                    paintContext context in which painting occurs                    
                </param>
            </javadoc>
            <method name="paintCameraView" type="void" line="300">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <declaration name="size" type="int" line="301"/>
                <scope line="302">
                    <declaration name="each" type="PLayer" line="303"/>
                </scope>
            </method>
            <javadoc line="307">
                Renders debug info onto the newly painted scene. Things like full bounds
                  and bounds are painted as filled and outlines.                
                <param>
                    paintContext context in which painting occurs                    
                </param>
            </javadoc>
            <method name="paintDebugInfo" type="void" line="312">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="313">
                    <declaration name="g2" type="Graphics2D" line="314"/>
                    <declaration name="nodes" type="ArrayList" line="317"/>
                    <declaration name="nodeBounds" type="PBounds" line="318"/>
                    <declaration name="boundsColor" type="Color" line="319"/>
                    <declaration name="fullBoundsColor" type="Color" line="320"/>
                    <declaration name="size" type="int" line="321"/>
                    <scope line="322"/>
                    <declaration name="i" type="Iterator" line="325"/>
                    <scope line="326">
                        <declaration name="each" type="PNode" line="327"/>
                        <scope line="328">
                            <scope line="331">
                                <scope line="334"/>
                            </scope>
                        </scope>
                        <scope line="340">
                            <scope line="343">
                                <scope line="344"/>
                                <scope line="348"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="357">
                {@inheritDoc}&lt;p&gt;
                  Pushes this camera onto the specified paint context so that it
                  can be accessed later by {@link PPaintContext#getCamera}.
                  &lt;/p&gt;                
            </javadoc>
            <method name="fullPaint" type="void" line="363">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
            </method>
            <javadoc line="368">
                Generate and return a PPickPath for the point x,y specified in the local
                  coord system of this camera. Picking is done with a rectangle, halo
                  specifies how large that rectangle will be.                
                <param>
                    x the x coordinate of the pick path given in local coordinates                    
                </param>
                <param>
                    y the y coordinate of the pick path given in local coordinates                    
                </param>
                <param>
                    halo the distance from the x,y coordinate that is considered for
                      inclusion in the pick path                    
                </param>
                <return>
                    the picked path                    
                </return>
            </javadoc>
            <method name="pick" type="PPickPath" line="378">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="halo" type="double"/>
                </params>
                <declaration name="b" type="PBounds" line="379"/>
                <declaration name="result" type="PPickPath" line="380"/>
                <scope line="382"/>
            </method>
            <javadoc line="388">
                {@inheritDoc}&lt;p&gt;
                  After the direct children of this camera have been given a chance to be
                  picked all of the layers in the list of layers viewed by this camera are
                  given a chance to be picked.
                  &lt;/p&gt;                
                <return>
                    true if any of the layers in the list of layers viewed by this
                      camera were picked                    
                </return>
            </javadoc>
            <method name="pickAfterChildren" type="boolean" line="397">
                <params>
                    <param name="pickPath" type="PPickPath"/>
                </params>
                <scope line="398">
                    <scope line="400"/>
                </scope>
            </method>
            <javadoc line="408">
                Try to pick all of the layers in the list of layers viewed by this
                  camera. This method is called after the view transform has been applied
                  to the specified pick path.                
                <param>
                    pickPath pick path                    
                </param>
                <return>
                    true if any of the layers in the list of layers viewed by this
                      camera were picked                    
                </return>
            </javadoc>
            <method name="pickCameraView" type="boolean" line="416">
                <params>
                    <param name="pickPath" type="PPickPath"/>
                </params>
                <declaration name="size" type="int" line="417"/>
                <scope line="418">
                    <declaration name="each" type="PLayer" line="419"/>
                    <scope line="420"/>
                </scope>
            </method>
            <javadoc line="426">
                Return the bounds of this camera in the view coordinate system.                
                <return>
                    the bounds of this camera in the view coordinate system                    
                </return>
            </javadoc>
            <method name="getViewBounds" type="PBounds" line="430"/>
            <javadoc line="433">
                Animates the camera&apos;s view so that the given bounds (in camera layer&apos;s
                  coordinate system) are centered within the cameras view bounds. Use this
                  method to point the camera at a given location.                
                <param>
                    centerBounds the targetBounds                    
                </param>
            </javadoc>
            <method name="setViewBounds" type="void" line="439">
                <params>
                    <param name="centerBounds" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="442">
                Return the scale applied by the view transform to the list of layers
                  viewed by this camera.                
                <return>
                    the scale applied by the view transform to the list of layers
                      viewed by this camera                    
                </return>
            </javadoc>
            <method name="getViewScale" type="double" line="448"/>
            <javadoc line="451">
                Scale the view transform applied to the list of layers viewed by this
                  camera by &lt;code&gt;scale&lt;/code&gt; about the point &lt;code&gt;[0, 0]&lt;/code&gt;.                
                <param>
                    scale view transform scale                    
                </param>
            </javadoc>
            <method name="scaleView" type="void" line="456">
                <params>
                    <param name="scale" type="double"/>
                </params>
            </method>
            <javadoc line="459">
                Scale the view transform applied to the list of layers viewed by this
                  camera by &lt;code&gt;scale&lt;/code&gt; about the specified point
                  &lt;code&gt;[x, y]&lt;/code&gt;.                
                <param>
                    scale view transform scale                    
                </param>
                <param>
                    x scale about point, x coordinate                    
                </param>
                <param>
                    y scale about point, y coordinate                    
                </param>
            </javadoc>
            <method name="scaleViewAboutPoint" type="void" line="467">
                <params>
                    <param name="scale" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="473">
                Set the scale applied by the view transform to the list of layers
                  viewed by this camera to &lt;code&gt;scale&lt;/code&gt;.                
                <param>
                    scale view transform scale                    
                </param>
            </javadoc>
            <method name="setViewScale" type="void" line="478">
                <params>
                    <param name="scale" type="double"/>
                </params>
            </method>
            <javadoc line="481">
                Translate the view transform applied to the list of layers viewed by this
                  camera by &lt;code&gt;[dx, dy]&lt;/code&gt;.                
                <param>
                    dx translate delta x                    
                </param>
                <param>
                    dy translate delta y                    
                </param>
            </javadoc>
            <method name="translateView" type="void" line="487">
                <params>
                    <param name="dx" type="double"/>
                    <param name="dy" type="double"/>
                </params>
            </method>
            <javadoc line="493">
                Set the offset for the view transform applied to the list of layers
                  viewed by this camera to &lt;code&gt;[x, y]&lt;/code&gt;.                
                <param>
                    x offset x                    
                </param>
                <param>
                    y offset y                    
                </param>
            </javadoc>
            <method name="setViewOffset" type="void" line="499">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="505">
                Return a copy of the view transform applied to the list of layers
                  viewed by this camera.                
                <return>
                    a copy of the view transform applied to the list of layers
                      viewed by this camera                    
                </return>
            </javadoc>
            <method name="getViewTransform" type="PAffineTransform" line="511"/>
            <javadoc line="514">
                Return a reference to the view transform applied to the list of layers
                  viewed by this camera.                
                <return>
                    the view transform applied to the list of layers
                      viewed by this camera                    
                </return>
            </javadoc>
            <method name="getViewTransformReference" type="PAffineTransform" line="520"/>
            <javadoc line="523">
                Set the view transform applied to the list of layers
                  viewed by this camera to &lt;code&gt;viewTransform&lt;/code&gt;.                
                <param>
                    viewTransform  view transform applied to the list of layers
                      viewed by this camera                    
                </param>
            </javadoc>
            <method name="setViewTransform" type="void" line="529">
                <params>
                    <param name="viewTransform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="535">
                Animate the camera&apos;s view from its current transform when the activity
                  starts to a new transform that centers the given bounds in the camera
                  layer&apos;s coordinate system into the cameras view bounds. If the duration is
                  0 then the view will be transformed immediately, and null will be
                  returned. Else a new PTransformActivity will get returned that is set to
                  animate the camera&apos;s view transform to the new bounds. If shouldScale is
                  true, then the camera will also scale its view so that the given bounds
                  fit fully within the cameras view bounds, else the camera will maintain
                  its original scale.                
                <param>
                    centerBounds the bounds which the animation will pace at the
                      center of the view                    
                </param>
                <param>
                    shouldScaleToFit whether the camera should scale the view while
                      animating to it                    
                </param>
                <param>
                    duration how many milliseconds the animations should take                    
                </param>
                <return>
                    the scheduled PTransformActivity                    
                </return>
            </javadoc>
            <method name="animateViewToCenterBounds" type="PTransformActivity" line="552">
                <params>
                    <param name="centerBounds" type="Rectangle2D"/>
                    <param name="shouldScaleToFit" type="boolean"/>
                    <param name="duration" type="long"/>
                </params>
                <declaration name="viewBounds" type="PBounds" line="553"/>
                <declaration name="delta" type="PDimension" line="554"/>
                <declaration name="newTransform" type="PAffineTransform" line="555"/>
                <scope line="557">
                    <declaration name="s" type="double" line="558"/>
                    <scope line="559"/>
                </scope>
            </method>
            <javadoc line="565">
                Pan the camera&apos;s view from its current transform when the activity starts
                  to a new transform so that the view bounds will contain (if possible,
                  intersect if not possible) the new bounds in the camera layers coordinate
                  system. If the duration is 0 then the view will be transformed
                  immediately, and null will be returned. Else a new PTransformActivity
                  will get returned that is set to animate the camera&apos;s view transform to
                  the new bounds.                
                <param>
                    panToBounds the bounds to which the view will animate to                    
                </param>
                <param>
                    duration the duration of the animation given in milliseconds                    
                </param>
                <return>
                    the scheduled PTransformActivity                    
                </return>
            </javadoc>
            <method name="animateViewToPanToBounds" type="PTransformActivity" line="577">
                <params>
                    <param name="panToBounds" type="Rectangle2D"/>
                    <param name="duration" type="long"/>
                </params>
                <declaration name="viewBounds" type="PBounds" line="578"/>
                <declaration name="delta" type="PDimension" line="579"/>
                <scope line="580">
                    <scope line="581"/>
                    <scope line="584">
                        <declaration name="at" type="AffineTransform" line="585"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="592">
                Pan the camera&apos;s view from its current transform when the activity starts
                  to a new transform so that the view bounds will contain (if possible,
                  intersect if not possible) the new bounds in the camera layers coordinate
                  system. If the duration is 0 then the view will be transformed
                  immediately, and null will be returned. Else a new PTransformActivity
                  will get returned that is set to animate the camera&apos;s view transform to
                  the new bounds.                
                <deprecated>
                    Renamed to animateViewToPanToBounds                    
                </deprecated>
                <param>
                    includeBounds the bounds to which the view will animate to                    
                </param>
                <param>
                    duration the duration of the animation given in milliseconds                    
                </param>
                <return>
                    the scheduled PTransformActivity                    
                </return>
            </javadoc>
            <method name="animateViewToIncludeBounds" type="PTransformActivity" line="605">
                <params>
                    <param name="includeBounds" type="Rectangle2D"/>
                    <param name="duration" type="long"/>
                </params>
            </method>
            <javadoc line="608">
                Animate the cameras view transform from its current value when the
                  activity starts to the new destination transform value.                
                <param>
                    destination the transform to which the view should be transformed
                      into                    
                </param>
                <param>
                    duration the duraiton in milliseconds the animation should take                    
                </param>
                <return>
                    the scheduled PTransformActivity                    
                </return>
            </javadoc>
            <method name="animateViewToTransform" type="PTransformActivity" line="616">
                <params>
                    <param name="destination" type="AffineTransform"/>
                    <param name="duration" type="long"/>
                </params>
                <scope line="617"/>
                <anonymous_class line="621">
                    <javadoc line="622">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="setTransform" type="void" line="625">
                        <params>
                            <param name="aTransform" type="AffineTransform"/>
                        </params>
                    </method>
                    <javadoc line="628">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getSourceMatrix" type="void" line="631">
                        <params>
                            <param name="aSource" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="t" type="PTransformActivity.Target" line="621"/>
                <declaration name="transformActivity" type="PTransformActivity" line="636"/>
                <declaration name="r" type="PRoot" line="637"/>
                <scope line="638"/>
            </method>
            <javadoc line="643">
                Return the constraint applied to the view. The view constraint will be one of {@link #VIEW_CONSTRAINT_NONE},{@link #VIEW_CONSTRAINT_CENTER}, or {@link #VIEW_CONSTRAINT_CENTER}. Defaults to {@link #VIEW_CONSTRAINT_NONE}.                
                <return>
                    the view constraint being applied to the view                    
                </return>
            </javadoc>
            <method name="getViewConstraint" type="int" line="647"/>
            <javadoc line="650">
                Set the view constraint to apply to the view to &lt;code&gt;viewConstraint&lt;/code&gt;. The view constraint must be one of{@link #VIEW_CONSTRAINT_NONE}, {@link #VIEW_CONSTRAINT_CENTER}, or {@link #VIEW_CONSTRAINT_CENTER}.                
                <param>
                    viewConstraint constraint to apply to the view                    
                </param>
                <throws>
                    IllegalArgumentException if <code>viewConstraint</code> is not one of {@link #VIEW_CONSTRAINT_NONE},{@link #VIEW_CONSTRAINT_CENTER}, or {@link #VIEW_CONSTRAINT_CENTER}                    
                </throws>
            </javadoc>
            <method name="setViewConstraint" type="void" line="655">
                <params>
                    <param name="viewConstraint" type="int"/>
                </params>
                <scope line="656"/>
            </method>
            <javadoc line="662">
                Transforms the view so that it conforms to the given constraint.                
            </javadoc>
            <method name="applyViewConstraints" type="void" line="665">
                <scope line="666"/>
                <declaration name="viewBounds" type="PBounds" line="669"/>
                <declaration name="layerBounds" type="PBounds" line="670"/>
                <scope line="671"/>
                <declaration name="constraintDelta" type="PDimension" line="674"/>
            </method>
            <javadoc line="677">
                Convert the point from the camera&apos;s view coordinate system to the
                  camera&apos;s local coordinate system. The given point is modified by this.                
                <param>
                    viewPoint the point to transform to the local coordinate system
                      from the view's coordinate system                    
                </param>
                <return>
                    the transformed point                    
                </return>
            </javadoc>
            <method name="viewToLocal" type="Point2D" line="684">
                <params>
                    <param name="viewPoint" type="Point2D"/>
                </params>
            </method>
            <javadoc line="687">
                Convert the dimension from the camera&apos;s view coordinate system to the
                  camera&apos;s local coordinate system. The given dimension is modified by
                  this.                
                <param>
                    viewDimension the dimension to transform from the view system to
                      the local coordinate system                    
                </param>
                <return>
                    returns the transformed dimension                    
                </return>
            </javadoc>
            <method name="viewToLocal" type="Dimension2D" line="695">
                <params>
                    <param name="viewDimension" type="Dimension2D"/>
                </params>
            </method>
            <javadoc line="698">
                Convert the rectangle from the camera&apos;s view coordinate system to the
                  camera&apos;s local coordinate system. The given rectangle is modified by this
                  method.                
                <param>
                    viewRectangle the rectangle to transform from view to local
                      coordinate System                    
                </param>
                <return>
                    the transformed rectangle                    
                </return>
            </javadoc>
            <method name="viewToLocal" type="Rectangle2D" line="706">
                <params>
                    <param name="viewRectangle" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="709">
                Convert the point from the camera&apos;s local coordinate system to the
                  camera&apos;s view coordinate system. The given point is modified by this
                  method.                
                <param>
                    localPoint point to transform from local to view coordinate system                    
                </param>
                <return>
                    the transformed point                    
                </return>
            </javadoc>
            <method name="localToView" type="Point2D" line="716">
                <params>
                    <param name="localPoint" type="Point2D"/>
                </params>
            </method>
            <javadoc line="719">
                Convert the dimension from the camera&apos;s local coordinate system to the
                  camera&apos;s view coordinate system. The given dimension is modified by this
                  method.                
                <param>
                    localDimension the dimension to transform from local to view
                      coordinate systems                    
                </param>
                <return>
                    the transformed dimension                    
                </return>
            </javadoc>
            <method name="localToView" type="Dimension2D" line="727">
                <params>
                    <param name="localDimension" type="Dimension2D"/>
                </params>
            </method>
            <javadoc line="730">
                Convert the rectangle from the camera&apos;s local coordinate system to the
                  camera&apos;s view coordinate system. The given rectangle is modified by this
                  method.                
                <param>
                    localRectangle the rectangle to transform from local to view
                      coordinate system                    
                </param>
                <return>
                    the transformed rectangle                    
                </return>
            </javadoc>
            <method name="localToView" type="Rectangle2D" line="738">
                <params>
                    <param name="localRectangle" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="741">
                Write this camera and all its children out to the given stream. Note that
                  the cameras layers are written conditionally, so they will only get
                  written out if someone else writes them unconditionally.                
                <param>
                    out the PObjectOutputStream to which this camera should be
                      serialized                    
                </param>
                <throws>
                    IOException if an error occured writing to the output stream                    
                </throws>
            </javadoc>
            <method name="writeObject" type="void" line="749">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="750"/>
                <declaration name="count" type="int" line="754"/>
                <scope line="755"/>
            </method>
            <javadoc line="761">
                Deserializes this PCamera from the ObjectInputStream.                
                <param>
                    in the source ObjectInputStream                    
                </param>
                <throws>
                    IOException when error occurs during read                    
                </throws>
                <throws>
                    ClassNotFoundException if the stream attempts to deserialize a
                      missing class                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="768">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <scope line="771">
                    <declaration name="each" type="Object" line="772"/>
                    <scope line="773">
                        <scope line="774"/>
                        <scope line="777"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>