<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.util">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <class name="PUtil" line="17">
            <javadoc line="17">
                &lt;b&gt;PUtil&lt;/b&gt; util methods for the Piccolo framework.
                  &lt;P&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_ACTIVITY_STEP_RATE" type="long" line="24"/>
            <javadoc line="24">
                PActivities are broken into steps, this is how many milliseconds should
                  pass between steps.                
            </javadoc>
            <declaration name="ACTIVITY_SCHEDULER_FRAME_DELAY" type="int" line="29"/>
            <javadoc line="29">
                Rate in milliseconds at which the activity timer will get invoked.                
            </javadoc>
            <declaration name="NULL_ITERATOR" type="Iterator" line="33"/>
            <javadoc line="33">
                An iterator that iterates over an empty collection.                
            </javadoc>
            <declaration name="PATH_TERMINATOR" type="int" line="37"/>
            <javadoc line="37">
                Used when persisting paths to an object stream. Used to mark the end of
                  the path.                
            </javadoc>
            <declaration name="NULL_ENUMERATION" type="Enumeration" line="42"/>
            <javadoc line="42">
                A utility enumeration with no elements.                
            </javadoc>
            <anonymous_class line="45">
                <method name="hasMoreElements" type="boolean" line="46"/>
                <method name="nextElement" type="Object" line="49"/>
            </anonymous_class>
            <declaration name="NULL_OUTPUT_STREAM" type="OutputStream" line="54"/>
            <javadoc line="54">
                @deprecated This has been moved into a private static class of
                  PObjectOutputStream                
            </javadoc>
            <anonymous_class line="58">
                <method name="close" type="void" line="59"/>
                <method name="flush" type="void" line="61"/>
                <method name="write" type="void" line="63">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="write" type="void" line="65">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="67">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="71">
                Creates the simplest possible scene graph. 1 Camera, 1 Layer, 1 Root                
                <return>
                    a basic scene with 1 camera, layer and root                    
                </return>
            </javadoc>
            <method name="createBasicScenegraph" type="PCamera" line="75">
                <declaration name="root" type="PRoot" line="76"/>
                <declaration name="layer" type="PLayer" line="77"/>
                <declaration name="camera" type="PCamera" line="78"/>
            </method>
            <javadoc line="84">
                Serializes the given stroke object to the object output stream provided.
                  By default strokes are not serializable. This method solves that problem.                
                <param>
                    stroke stroke to be serialize                    
                </param>
                <param>
                    out stream to which the stroke is to be serialized                    
                </param>
                <throws>
                    IOException can occur if exception occurs with underlying output
                      stream                    
                </throws>
            </javadoc>
            <method name="writeStroke" type="void" line="92">
                <params>
                    <param name="stroke" type="Stroke"/>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="93"/>
                <scope line="98"/>
                <scope line="103"/>
            </method>
            <method name="writeBasicStroke" type="void" line="107">
                <params>
                    <param name="basicStroke" type="BasicStroke"/>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="dash" type="float[]" line="108"/>
                <scope line="109"/>
                <scope line="112">
                    <scope line="114"/>
                </scope>
            </method>
            <javadoc line="124">
                Reconstitutes a stroke from the provided Object Input Stream. According
                  to the scheme found in writeStroke. By default strokes are not
                  serializable.                
                <param>
                    in stream from which Stroke is to be read                    
                </param>
                <return>
                    a stroke object                    
                </return>
                <throws>
                    IOException occurs if an exception occurs reading from in stream                    
                </throws>
                <throws>
                    ClassNotFoundException should never happen, but can if somehow
                      the stroke class is not on the classpath                    
                </throws>
            </javadoc>
            <method name="readStroke" type="Stroke" line="134">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="wroteStroke" type="boolean" line="135"/>
                <scope line="136"/>
                <declaration name="serializedStroke" type="boolean" line="139"/>
                <scope line="140"/>
            </method>
            <method name="readBasicStroke" type="Stroke" line="145">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="dash" type="float[]" line="146"/>
                <declaration name="dashLength" type="int" line="147"/>
                <scope line="148">
                    <scope line="150"/>
                </scope>
                <declaration name="lineWidth" type="float" line="154"/>
                <declaration name="endCap" type="int" line="155"/>
                <declaration name="lineJoin" type="int" line="156"/>
                <declaration name="miterLimit" type="float" line="157"/>
                <declaration name="dashPhase" type="float" line="158"/>
            </method>
            <javadoc line="161">
                Reads a path from the provided inputStream in accordance with the
                  serialization policy defined in writePath.                
                <param>
                    in stream from which to read the path.                    
                </param>
                <return>
                    reconstituted path                    
                </return>
                <throws>
                    IOException if an unknown path type is read from the stream                    
                </throws>
                <throws>
                    ClassNotFoundException should never happen, but can if somehow
                      the classpath is seriously messed up                    
                </throws>
            </javadoc>
            <method name="readPath" type="GeneralPath" line="170">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="path" type="GeneralPath" line="171"/>
                <scope line="172">
                    <declaration name="segType" type="int" line="173"/>
                </scope>
            </method>
            <javadoc line="197">
                Serializes the given path to the provided Object Output Stream.                
                <param>
                    path path to be serialized                    
                </param>
                <param>
                    out stream to which the path should be serialized                    
                </param>
                <throws>
                    IOException if unknown path segment type is encountered, or an
                      exception occurs writing to the output stream                    
                </throws>
            </javadoc>
            <method name="writePath" type="void" line="204">
                <params>
                    <param name="path" type="GeneralPath"/>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="i" type="PathIterator" line="205"/>
                <declaration name="data" type="float[]" line="206"/>
                <scope line="207"/>
            </method>
        </class>
    </source>