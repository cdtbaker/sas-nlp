<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.nodes">
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="javax.swing.JLabel"/>
        <import package="javax.swing.plaf.basic.BasicHTML"/>
        <import package="javax.swing.text.Position"/>
        <import package="javax.swing.text.View"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <class name="PHtmlView" line="14">
            <extends class="PNode"/>
            <javadoc line="14">
                PHtmlView is a Piccolo node for rendering HTML text. It uses a JLabel under
                  the hood so you have the same restrictions regarding HTML as you have when
                  using standard Swing components (HTML 3.2 + subset of CSS 1.0).                
                <since>
                    1.3                    
                </since>
                <author>
                    Chris Malley (cmal...@pixelzoom.com)                    
                </author>
                <author>
                    Sam Reid                    
                </author>
                <author>
                    Allain Lalonde                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="24"/>
            <javadoc line="24">
                Default serial version UID.                
            </javadoc>
            <declaration name="DEFAULT_FONT" type="Font" line="28"/>
            <javadoc line="28">
                Default font if not otherwise specified in the HTML text, 12 point
                  &lt;code&gt;&quot;SansSerif&quot;&lt;/code&gt;.                
            </javadoc>
            <declaration name="DEFAULT_TEXT_COLOR" type="Color" line="33"/>
            <javadoc line="33">
                Default text color if not otherwise specified in the HTML text,
                  &lt;code&gt;Color.BLACK&lt;/code&gt;.                
            </javadoc>
            <declaration name="PROPERTY_FONT" type="String" line="38"/>
            <javadoc line="38">
                The property name that identifies a change of this node&apos;s font (see{@link #getFont getFont}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_FONT" type="int" line="43"/>
            <javadoc line="43">
                The property code that identifies a change of this node&apos;s font (see{@link #getFont getFont}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_TEXT" type="String" line="48"/>
            <javadoc line="48">
                The property name that identifies a change of this node&apos;s HTML text (see{@link #getText getText}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_TEXT" type="int" line="53"/>
            <javadoc line="53">
                The property code that identifies a change of this node&apos;s HTML text (see{@link #getText getText}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_TEXT_COLOR" type="String" line="58"/>
            <javadoc line="58">
                The property name that identifies a change of this node&apos;s HTML text color
                  (see {@link #getTextColor getTextColor}). Both old and new value will be set
                  in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_TEXT_COLOR" type="int" line="64"/>
            <javadoc line="64">
                The property code that identifies a change of this node&apos;s HTML text color
                  (see {@link #getTextColor getTextColor}). Both old and new value will be set
                  in any property change event.                
            </javadoc>
            <declaration name="label" type="JLabel" line="70"/>
            <javadoc line="70">
                Underlying JLabel used to handle the rendering logic.                
            </javadoc>
            <declaration name="htmlView" type="View" line="74"/>
            <javadoc line="74">
                Object that encapsulates the HTML rendering logic.                
            </javadoc>
            <javadoc line="78">
                Create an empty HTML text node with the default font and text color.                
            </javadoc>
            <method name="PHtmlView" type="constructor" line="81"/>
            <javadoc line="84">
                Create a HTML text node with the specified HTML text and the default font
                  and text color.                
                <param>
                    text HTML text for this HTML text node                    
                </param>
            </javadoc>
            <method name="PHtmlView" type="constructor" line="89">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="92">
                Create a HTML text node with the specified HTML text, font, and text
                  color. The font and text color are used to render the HTML text if not
                  otherwise specified via CSS.                
                <param>
                    text HTML text for this HTML text node                    
                </param>
                <param>
                    font font for this HTML text node                    
                </param>
                <param>
                    textColor text color for this HTML text node                    
                </param>
            </javadoc>
            <method name="PHtmlView" type="constructor" line="100">
                <params>
                    <param name="text" type="String"/>
                    <param name="font" type="Font"/>
                    <param name="textColor" type="Color"/>
                </params>
            </method>
            <javadoc line="107">
                Return the HTML text for this HTML text node.                
                <return>
                    the HTML text for this HTML text node                    
                </return>
            </javadoc>
            <method name="getText" type="String" line="111"/>
            <javadoc line="114">
                Set the HTML text for this HTML text node to &lt;code&gt;text&lt;/code&gt;.
                  &lt;p&gt;
                  This is a &lt;b&gt;bound&lt;/b&gt; property.
                  &lt;/p&gt;                
                <param>
                    text HTML text for this HTML text node                    
                </param>
            </javadoc>
            <method name="setText" type="void" line="121">
                <params>
                    <param name="text" type="String"/>
                </params>
                <declaration name="oldText" type="String" line="122"/>
                <scope line="123"/>
                <scope line="126"/>
            </method>
            <javadoc line="132">
                Return the font for this HTML text node. This font is used to render the
                  HTML text if not otherwise specified via CSS. Defaults to{@link #DEFAULT_FONT}.                
                <return>
                    the font for this HTML text node                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="137"/>
            <javadoc line="140">
                Set the font for this HTML text node to &lt;code&gt;font&lt;/code&gt;. This font is
                  used to render the HTML text if not otherwise specified via CSS.
                  &lt;p&gt;
                  This is a &lt;b&gt;bound&lt;/b&gt; property.
                  &lt;/p&gt;                
                <param>
                    font font for this HTML text node                    
                </param>
            </javadoc>
            <method name="setFont" type="void" line="148">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <declaration name="oldFont" type="Font" line="149"/>
            </method>
            <javadoc line="154">
                Return the text color for this HTML text node. This text color is used to
                  render the HTML text if not otherwise specified via CSS. Defaults to{@link #DEFAULT_TEXT_COLOR}.                
                <return>
                    the text color for this HTML text node                    
                </return>
            </javadoc>
            <method name="getTextColor" type="Color" line="159"/>
            <javadoc line="162">
                Set the text color for this HTML text node to &lt;code&gt;textColor&lt;/code&gt;.
                  This text color is used to render the HTML text if not otherwise
                  specified via CSS.
                  This is a &lt;b&gt;bound&lt;/b&gt; property.                
                <param>
                    textColor text color for this HTML text node                    
                </param>
            </javadoc>
            <method name="setTextColor" type="void" line="169">
                <params>
                    <param name="textColor" type="Color"/>
                </params>
                <declaration name="oldColor" type="Color" line="170"/>
            </method>
            <javadoc line="175">
                Applies all properties to the underlying JLabel, creates an htmlView and
                  updates bounds.                
            </javadoc>
            <method name="update" type="void" line="179">
                <declaration name="htmlContent" type="String" line="180"/>
                <scope line="181"/>
            </method>
            <javadoc line="188">
                Resizes the height to be as tall as its rendered html. Takes wrapping
                  into account.                
            </javadoc>
            <method name="fitHeightToHtmlContent" type="void" line="192">
                <scope line="193">
                    <declaration name="wrapHeight" type="float" line="195"/>
                    <scope line="197"/>
                </scope>
            </method>
            <javadoc line="204">
                {@inheritDoc}                
            </javadoc>
            <method name="setBounds" type="boolean" line="207">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
                <declaration name="boundsChanged" type="boolean" line="208"/>
            </method>
            <javadoc line="212">
                {@inheritDoc}                
            </javadoc>
            <method name="setBounds" type="boolean" line="215">
                <params>
                    <param name="newBounds" type="Rectangle2D"/>
                </params>
                <declaration name="boundsChanged" type="boolean" line="216"/>
            </method>
            <javadoc line="220">
                {@inheritDoc}&lt;p&gt;
                  The HTML text is painted last, so it will appear on top of any child
                  nodes.
                  &lt;/p&gt;                
            </javadoc>
            <method name="paint" type="void" line="226">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <declaration name="g2" type="Graphics2D" line="229"/>
            </method>
            <javadoc line="233">
                Return the address specified in the HTML link at the specified point in
                  this node&apos;s local coordinate system, if any.                
                <param>
                    point point in this node's local coordinate system                    
                </param>
                <return>
                    the address specified in the HTML link at the specified point in
                      this node's local coordinate system, or <code>null</code> if no
                      such HTML link exists                    
                </return>
            </javadoc>
            <method name="getLinkAddressAt" type="String" line="241">
                <params>
                    <param name="point" type="Point2D"/>
                </params>
            </method>
            <javadoc line="244">
                Return the address specified in the HTML link at the specified x and y
                  coordinates in this node&apos;s local coordinate system, if any.                
                <param>
                    x x coordinate in this node's local coordinate system                    
                </param>
                <param>
                    y y coordinate in this node's local coordinate system                    
                </param>
                <return>
                    the address specified in the HTML link at the specified x and y
                      coordinates in this node's local coordinate system, or
                      <code>null</code> if no such HTML link exists                    
                </return>
            </javadoc>
            <method name="getLinkAddressAt" type="String" line="253">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="position" type="int" line="254"/>
                <declaration name="text" type="String" line="255"/>
                <declaration name="address" type="String" line="256"/>
                <declaration name="currentPos" type="int" line="257"/>
                <scope line="258">
                    <scope line="260"/>
                    <declaration name="tagStart" type="int" line="263"/>
                    <declaration name="tagEnd" type="int" line="264"/>
                    <scope line="265"/>
                    <declaration name="tag" type="String" line="269"/>
                    <scope line="271"/>
                    <scope line="274"/>
                </scope>
            </method>
            <javadoc line="280">
                Return the index into the raw text at the specified x and y coordinates
                  in this node&apos;s local coordinate system.                
                <param>
                    x x coordinate in this node's local coordinate system                    
                </param>
                <param>
                    y y coordinate in this node's local coordinate system                    
                </param>
                <return>
                    the index into the raw text at the specified x and y coordinates
                      in this node's local coordinate system                    
                </return>
            </javadoc>
            <method name="pointToModelIndex" type="int" line="288">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="biasReturn" type="Position.Bias[]" line="289"/>
            </method>
            <javadoc line="292">
                Starting from the startPos, find the position at which the given tag
                  ends. Returns &lt;code&gt;-1&lt;/code&gt; if the end of the string was encountered
                  before the end of the tag was encountered.                
                <param>
                    text HTML text being searched                    
                </param>
                <param>
                    startPos where in the string to start searching for ">"                    
                </param>
                <return>
                    index after the ">" character                    
                </return>
            </javadoc>
            <method name="findTagEnd" type="int" line="300">
                <params>
                    <param name="text" type="String"/>
                    <param name="startPos" type="int"/>
                </params>
                <declaration name="currentPos" type="int" line="301"/>
                <scope line="303">
                    <scope line="304"/>
                    <scope line="307"/>
                </scope>
                <scope line="312"/>
            </method>
            <javadoc line="317">
                Given a tag, extracts the value of the href attribute or returns null if
                  none was found.                
                <param>
                    tag from which to extract the href value                    
                </param>
                <return>
                    href value without quotes or <code>null</code> if not found                    
                </return>
            </javadoc>
            <method name="extractHref" type="String" line="323">
                <params>
                    <param name="tag" type="String"/>
                </params>
                <declaration name="currentPos" type="int" line="324"/>
                <declaration name="href" type="String" line="325"/>
                <scope line="326">
                    <scope line="328"/>
                </scope>
            </method>
            <javadoc line="334">
                Starting at the character after the equal sign of an href=..., it extract
                  the value. Handles single, double, and no quotes.                
                <param>
                    tag tag                    
                </param>
                <param>
                    startPos start position                    
                </param>
                <return>
                    value of href or null if not found.                    
                </return>
            </javadoc>
            <method name="extractHrefValue" type="String" line="341">
                <params>
                    <param name="tag" type="String"/>
                    <param name="startPos" type="int"/>
                </params>
                <declaration name="currentPos" type="int" line="342"/>
                <scope line="343">
                    <declaration name="startHref" type="int" line="344"/>
                    <scope line="346"/>
                </scope>
                <scope line="351">
                    <declaration name="startHref" type="int" line="352"/>
                    <scope line="354"/>
                </scope>
                <scope line="359">
                    <declaration name="startHref" type="int" line="360"/>
                    <scope line="361">
                        <scope line="362"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="370">
                Given the position in a string returns whether it points to the equal
                  sign of an href attribute.                
                <param>
                    tag html code of the tag                    
                </param>
                <param>
                    equalPos the index of the assignment                    
                </param>
                <return>
                    true if to left of assignment is href                    
                </return>
            </javadoc>
            <method name="isHrefAttributeAssignment" type="boolean" line="377">
                <params>
                    <param name="tag" type="String"/>
                    <param name="equalPos" type="int"/>
                </params>
            </method>
        </class>
    </source>