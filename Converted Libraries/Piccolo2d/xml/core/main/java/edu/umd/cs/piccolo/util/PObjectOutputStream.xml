<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.util">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.HashMap"/>
        <class name="PObjectOutputStream" line="7">
            <extends class="ObjectOutputStream"/>
            <javadoc line="7">
                &lt;b&gt;PObjectOutputStream&lt;/b&gt; is an extension of ObjectOutputStream to handle
                  optional elements. This is similar to the concept of Java&apos;s
                  &quot;weak references&quot;, but applied to object serialization rather than garbage
                  collection. Here, PObjectOutputStream provides a method,
                  &lt;code&gt;writeConditionalObject&lt;/code&gt;, which only serializes the specified
                  object to the stream if there is a strong reference (if it has been written
                  somewhere else using writeObject()) to that object elsewhere in the stream.
                  &lt;p&gt;
                  To discover strong references to objects, PObjectOutputStream uses a
                  two-phase writing process. First, a &quot;discovery&quot; phase is used to find out
                  what objects are about to be serialized. This works by effectively
                  serializing the object graph to /dev/null, recording which objects are
                  unconditionally written using the standard writeObject method. Then, in the
                  second &quot;write&quot; phase, ObjectOutputStream actually serializes the data to the
                  output stream. During this phase, calls to writeConditionalObject() will only
                  write the specified object if the object was found to be serialized during
                  the discovery stage. If the object was not recorded during the discovery
                  stage, a an optional null (the default) is unconditionally written in place
                  of the object. To skip writting out the null use
                  &lt;code&gt;writeConditionalObject(object, false)&lt;/code&gt;
                  &lt;p&gt;
                  By careful implementation of readObject and writeObject methods, streams
                  serialized using PObjectOutputStream can be deserialized using the standard
                  ObjectInputStream.
                  &lt;p&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jon Meyer                    
                </author>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="writingRoot" type="boolean" line="38"/>
            <declaration name="unconditionallyWritten" type="HashMap" line="39"/>
            <javadoc line="40">
                Transform the given object into an array of bytes.                
                <param>
                    object the object to be transformed                    
                </param>
                <return>
                    array of bytes representing the given object                    
                </return>
                <throws>
                    IOException when serialization system throws one                    
                </throws>
            </javadoc>
            <method name="toByteArray" type="byte[]" line="46">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <declaration name="out" type="ByteArrayOutputStream" line="47"/>
                <declaration name="zout" type="PObjectOutputStream" line="48"/>
            </method>
            <javadoc line="52">
                Constructs a PObjectOutputStream that wraps the provided OutputStream.                
                <param>
                    out underlying outputstream that will receive the serialized
                      objects                    
                </param>
                <throws>
                    IOException when underlying subsystem throws one                    
                </throws>
            </javadoc>
            <method name="PObjectOutputStream" type="constructor" line="58">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="62">
                Writes the provided object to the underlying stream like an ordination
                  ObjectOutputStream except that it does not record duplicates at all.                
                <param>
                    object object to be serialized                    
                </param>
                <throws>
                    IOException when underlying subsystem throws one                    
                </throws>
            </javadoc>
            <method name="writeObjectTree" type="void" line="68">
                <params>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <javadoc line="74">
                Writes the given object, but only if it was not in the object tree
                  multiple times.                
                <param>
                    object object to write to the stream.                    
                </param>
                <throws>
                    IOException when underlying subsystem throws one                    
                </throws>
            </javadoc>
            <method name="writeConditionalObject" type="void" line="80">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="81"/>
                <scope line="84"/>
                <scope line="87"/>
            </method>
            <javadoc line="91">
                Resets the ObjectOutputStream clearing any memory about objects already
                  being written while it&apos;s at it.                
                <throws>
                    IOException when underlying subsystem throws one                    
                </throws>
            </javadoc>
            <method name="reset" type="void" line="96"/>
            <javadoc line="100">
                Performs a scan of objects that can be serialized once.                
                <param>
                    aRoot Object from which to start the scan                    
                </param>
                <throws>
                    IOException when serialization fails                    
                </throws>
            </javadoc>
            <method name="recordUnconditionallyWritten" type="void" line="105">
                <params>
                    <param name="aRoot" type="Object"/>
                </params>
                <class name="ZMarkObjectOutputStream" line="106">
                    <extends class="PObjectOutputStream"/>
                    <method name="ZMarkObjectOutputStream" type="constructor" line="107"/>
                    <method name="replaceObject" type="Object" line="111">
                        <params>
                            <param name="object" type="Object"/>
                        </params>
                    </method>
                    <method name="writeConditionalObject" type="void" line="115">
                        <params>
                            <param name="object" type="Object"/>
                        </params>
                    </method>
                </class>
            </method>
            <declaration name="NULL_OUTPUT_STREAM" type="OutputStream" line="120"/>
            <anonymous_class line="120">
                <method name="close" type="void" line="121"/>
                <method name="flush" type="void" line="123"/>
                <method name="write" type="void" line="125">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="write" type="void" line="127">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="129">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
        </class>
    </source>