<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.util">
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="javax.swing.SwingUtilities"/>
        <class name="PDebug" line="6">
            <javadoc line="6">
                &lt;b&gt;PDebug&lt;/b&gt; is used to set framework wide debugging flags.
                  &lt;P&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="debugRegionManagement" type="boolean" line="13"/>
            <javadoc line="13">
                Set to true to display clip bounds boxes.                
            </javadoc>
            <declaration name="debugPaintCalls" type="boolean" line="17"/>
            <javadoc line="17">
                Set to true if you want to display common errors with painting and
                  threading.                
            </javadoc>
            <declaration name="debugPrintFrameRate" type="boolean" line="22"/>
            <javadoc line="22">
                Set to true to display frame rate in the console.                
            </javadoc>
            <declaration name="debugPrintUsedMemory" type="boolean" line="26"/>
            <javadoc line="26">
                Set to true to display used memory in console.                
            </javadoc>
            <declaration name="debugBounds" type="boolean" line="30"/>
            <javadoc line="30">
                Displays bounding boxes around nodes. Used in PCamera.                
            </javadoc>
            <declaration name="debugFullBounds" type="boolean" line="34"/>
            <javadoc line="34">
                Displays a tint to all shapes within a bounding box.                
            </javadoc>
            <declaration name="debugThreads" type="boolean" line="38"/>
            <javadoc line="38">
                Whether to complain whenever common threading issues occur.                
            </javadoc>
            <declaration name="printResultsFrameRate" type="int" line="42"/>
            <javadoc line="42">
                How often in frames result info should be printed to the console.                
            </javadoc>
            <declaration name="debugPaintColor" type="int" line="46"/>
            <declaration name="framesProcessed" type="long" line="47"/>
            <declaration name="startProcessingOutputTime" type="long" line="48"/>
            <declaration name="startProcessingInputTime" type="long" line="49"/>
            <declaration name="processOutputTime" type="long" line="50"/>
            <declaration name="processInputTime" type="long" line="51"/>
            <declaration name="processingOutput" type="boolean" line="52"/>
            <method name="PDebug" type="constructor" line="53"/>
            <javadoc line="56">
                Generates a color for use while debugging.                
                <return>
                    a color for use while debugging.                    
                </return>
            </javadoc>
            <method name="getDebugPaintColor" type="Color" line="60">
                <declaration name="color" type="int" line="61"/>
            </method>
            <javadoc line="64">
                Checks that process inputs is being doing from the Swing Dispatch Thread.                
            </javadoc>
            <method name="scheduleProcessInputs" type="void" line="67">
                <scope line="68"/>
            </method>
            <javadoc line="72">
                Ensures that painting is not invalidating paint regions and that it&apos;s
                  being called from the dispatch thread.                
            </javadoc>
            <method name="processRepaint" type="void" line="76">
                <scope line="77"/>
                <scope line="80"/>
            </method>
            <javadoc line="84">
                Returns whether output is being processed.                
                <return>
                    whether output is being processed                    
                </return>
            </javadoc>
            <method name="getProcessingOutput" type="boolean" line="88"/>
            <javadoc line="91">
                Records that processing of ouptut has begun.                
            </javadoc>
            <method name="startProcessingOutput" type="void" line="94"/>
            <javadoc line="98">
                Flags processing of output as finished. Updates all stats in the process.                
                <param>
                    g graphics context in which processing has finished                    
                </param>
            </javadoc>
            <method name="endProcessingOutput" type="void" line="102">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="105">
                    <scope line="106"/>
                    <scope line="113"/>
                </scope>
                <scope line="117">
                    <declaration name="g2" type="Graphics2D" line="118"/>
                </scope>
            </method>
            <javadoc line="124">
                Records that processing of input has started.                
            </javadoc>
            <method name="startProcessingInput" type="void" line="127"/>
            <javadoc line="130">
                Records that processing of input has finished.                
            </javadoc>
            <method name="endProcessingInput" type="void" line="133"/>
            <javadoc line="136">
                Return how many frames are processed and painted per second. Note that
                  since piccolo doesn&apos;t paint continuously this rate will be slow unless
                  you are interacting with the system or have activities scheduled.                
                <return>
                    frame rate achieved                    
                </return>
            </javadoc>
            <method name="getTotalFPS" type="double" line="142">
                <scope line="143"/>
                <scope line="146"/>
            </method>
            <javadoc line="150">
                Return the frames per second used to process input events and activities.                
                <return>
                    # of frames per second that were allocated to processing input                    
                </return>
            </javadoc>
            <method name="getInputFPS" type="double" line="154">
                <scope line="155"/>
                <scope line="158"/>
            </method>
            <javadoc line="162">
                Return the frames per seconds used to paint graphics to the screen.                
                <return>
                    # of frames per second that were used up to processing output                    
                </return>
            </javadoc>
            <method name="getOutputFPS" type="double" line="166">
                <scope line="167"/>
                <scope line="170"/>
            </method>
            <javadoc line="174">
                Return the number of frames that have been processed since the last time
                  resetFPSTiming was called.                
                <return>
                    total number of frames processed                    
                </return>
            </javadoc>
            <method name="getFramesProcessed" type="long" line="179"/>
            <javadoc line="182">
                Reset the variables used to track FPS. If you reset seldom they you will
                  get good average FPS values, if you reset more often only the frames
                  recorded after the last reset will be taken into consideration.                
            </javadoc>
            <method name="resetFPSTiming" type="void" line="187"/>
            <javadoc line="192">
                Returns an approximation of the amount of memory that is being used.
                  Not that this call might affecting timings.                
                <return>
                    approximate # of bytes of memory used                    
                </return>
            </javadoc>
            <method name="getApproximateUsedMemory" type="long" line="197">
                <declaration name="totalMemory" type="long" line="200"/>
                <declaration name="free" type="long" line="201"/>
            </method>
        </class>
    </source>