<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.util">
        <import package="java.awt.geom.Dimension2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.util.HashMap"/>
        <import package="javax.swing.event.EventListenerList"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventListener"/>
        <class name="PPickPath" line="43">
            <comment line="120">
                ****************************************************************                
            </comment>
            <comment line="121">
                Picked Nodes                
            </comment>
            <comment line="122">
                ****************************************************************                
            </comment>
            <comment line="153">
                ****************************************************************                
            </comment>
            <comment line="154">
                Iterating over picked nodes.                
            </comment>
            <comment line="155">
                ****************************************************************                
            </comment>
            <comment line="242">
                ****************************************************************                
            </comment>
            <comment line="243">
                Path Transform                
            </comment>
            <comment line="244">
                ****************************************************************                
            </comment>
            <comment line="352">
                ****************************************************************                
            </comment>
            <comment line="353">
                Transforming Geometry - Methods to transform geometry through                
            </comment>
            <comment line="354">
                this path.                
            </comment>
            <comment line="355">
                &lt;p&gt;                
            </comment>
            <comment line="356">
                Note that this is different that just using the                
            </comment>
            <comment line="357">
                PNode.localToGlobal (an other coord system transform methods).                
            </comment>
            <comment line="358">
                The PNode coord system transform methods always go directly up                
            </comment>
            <comment line="359">
                through their parents. The PPickPath coord system transform                
            </comment>
            <comment line="360">
                methods go up through the list of picked nodes instead. And since                
            </comment>
            <comment line="361">
                cameras can pick their layers in addition to their children these                
            </comment>
            <comment line="362">
                two paths may be different.                
            </comment>
            <comment line="363">
                ****************************************************************                
            </comment>
            <implements interface="PInputEventListener"/>
            <javadoc line="43">
                &lt;b&gt;PPickPath&lt;/b&gt; represents a ordered list of nodes that have been picked.
                  The topmost ancestor node is the first node in the list (and should be a
                  camera), the bottommost child node is at the end of the list. It is this
                  bottom node that is given first chance to handle events, and that any active
                  event handlers usually manipulate.
                  &lt;p&gt;
                  Note that because of layers (which can be picked by multiple camera&apos;s) the
                  ordered list of nodes in a pick path do not all share a parent child
                  relationship with the nodes in the list next to them. This means that the
                  normal localToGlobal methods don&apos;t work when trying to transform geometry up
                  and down the pick path, instead you should use the pick paths canvasToLocal
                  methods to get the mouse event points into your local coord system.
                  &lt;p&gt;
                  Note that PInputEvent wraps most of the useful PPickPath methods, so often
                  you can use a PInputEvent directly instead of having to access its pick path.
                  &lt;p&gt;                
                <see>
                    edu.umd.cs.piccolo.event.PInputEvent                    
                </see>
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="CURRENT_PICK_PATH" type="PPickPath" line="66"/>
            <javadoc line="66">
                Global pick path.                
            </javadoc>
            <declaration name="PTS" type="double[]" line="69"/>
            <javadoc line="69">
                Used when calculating the scale.                
            </javadoc>
            <declaration name="nodeStack" type="PStack" line="72"/>
            <javadoc line="72">
                Stack of nodes representing all picked nodes.                
            </javadoc>
            <declaration name="topCamera" type="PCamera" line="75"/>
            <declaration name="transformStack" type="PStack" line="76"/>
            <declaration name="pickBoundsStack" type="PStack" line="77"/>
            <declaration name="bottomCamera" type="PCamera" line="78"/>
            <declaration name="excludedNodes" type="HashMap" line="79"/>
            <javadoc line="81">
                Creates a pick pack originating from the provided camera and with the
                  given screen pick bounds.                
                <param>
                    camera camera from which the pickpath originates                    
                </param>
                <param>
                    aScreenPickBounds bounds of pick area                    
                </param>
            </javadoc>
            <method name="PPickPath" type="constructor" line="88">
                <params>
                    <param name="camera" type="PCamera"/>
                    <param name="aScreenPickBounds" type="PBounds"/>
                </params>
            </method>
            <javadoc line="99">
                Returns the bounds of the entire PickPath taken as a whole.                
                <return>
                    bounds of the entire PickPath                    
                </return>
            </javadoc>
            <method name="getPickBounds" type="PBounds" line="104"/>
            <javadoc line="108">
                Determines if the passed node has been excluded from being a member of
                  the pickpath.                
                <param>
                    node node being tested                    
                </param>
                <return>
                    true if node is acceptable to the path                    
                </return>
            </javadoc>
            <method name="acceptsNode" type="boolean" line="115">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="123">
                Pushes the provided node to the top of the pick path.                
                <param>
                    node node to be added to the pick path                    
                </param>
            </javadoc>
            <method name="pushNode" type="void" line="128">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="132">
                Removes the topmost node from the node stack.                
                <param>
                    node completely unused in this method, but is passed in so that
                      subclasses may be informed of it.                    
                </param>
            </javadoc>
            <method name="popNode" type="void" line="138">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="142">
                Get the bottom node on the pick path node stack. That is the last node to
                  be picked.                
                <return>
                    the bottom node on the pick path                    
                </return>
            </javadoc>
            <method name="getPickedNode" type="PNode" line="148"/>
            <javadoc line="156">
                Return the next node that will be picked after the current picked node.
                  For instance of you have two overlapping children nodes then the topmost
                  child will always be picked first, use this method to find the covered
                  child. Return the camera when no more visual will be picked.                
                <return>
                    next node to picked after the picked node                    
                </return>
            </javadoc>
            <method name="nextPickedNode" type="PNode" line="164">
                <comment line="174">
                    exclude current picked node                    
                </comment>
                <comment line="179">
                    reset path state                    
                </comment>
                <comment line="187">
                    pick again                    
                </comment>
                <comment line="190">
                    make sure top camera is pushed.                    
                </comment>
                <declaration name="picked" type="PNode" line="165"/>
                <scope line="167"/>
                <scope line="170"/>
                <declaration name="screenPickBounds" type="Object" line="177"/>
                <scope line="191"/>
            </method>
            <javadoc line="199">
                Get the top camera on the pick path. This is the camera that originated
                  the pick action.                
                <return>
                    the topmost camera of this pick pack                    
                </return>
            </javadoc>
            <method name="getTopCamera" type="PCamera" line="205"/>
            <javadoc line="209">
                Get the bottom camera on the pick path. This may be different then the
                  top camera if internal cameras are in use.                
                <return>
                    the camera closest to the picked node                    
                </return>
            </javadoc>
            <method name="getBottomCamera" type="PCamera" line="215">
                <scope line="216"/>
            </method>
            <method name="calculateBottomCamera" type="PCamera" line="222">
                <scope line="223">
                    <declaration name="each" type="PNode" line="224"/>
                    <scope line="225"/>
                </scope>
            </method>
            <javadoc line="232">
                Returns a reference to the node stack. Be Careful!                
                <return>
                    the node stack                    
                </return>
            </javadoc>
            <method name="getNodeStackReference" type="PStack" line="237"/>
            <javadoc line="245">
                Returns the resulting scale of applying the transforms of the entire pick
                  path. In essence it gives you the scale at which interaction is
                  occurring.                
                <return>
                    scale at which interaction is occurring.                    
                </return>
            </javadoc>
            <method name="getScale" type="double" line="252">
                <comment line="253">
                    x1, y1, x2, y3                    
                </comment>
                <declaration name="count" type="int" line="259"/>
                <scope line="260">
                    <declaration name="each" type="PAffineTransform" line="261"/>
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="270">
                Adds the transform to the pick path&apos;s transform. This is used when
                  determining the context of the current interaction.                
                <param>
                    transform transform to be added to applied to the pickpath.                    
                </param>
            </javadoc>
            <method name="pushTransform" type="void" line="276">
                <params>
                    <param name="transform" type="PAffineTransform"/>
                </params>
                <scope line="278">
                    <declaration name="newPickBounds" type="Rectangle2D" line="279"/>
                </scope>
            </method>
            <javadoc line="285">
                Pops the top most transform from the pick path.                
                <param>
                    transform unused in this method                    
                </param>
            </javadoc>
            <method name="popTransform" type="void" line="290">
                <params>
                    <param name="transform" type="PAffineTransform"/>
                </params>
                <scope line="292"/>
            </method>
            <javadoc line="297">
                Calculates the context at which the given node is being interacted with.                
                <param>
                    nodeOnPath a node currently on the pick path. An exception will be
                      thrown if the node cannot be found.                    
                </param>
                <return>
                    Transform at which the given node is being interacted with.                    
                </return>
            </javadoc>
            <method name="getPathTransformTo" type="PAffineTransform" line="305">
                <params>
                    <param name="nodeOnPath" type="PNode"/>
                </params>
                <declaration name="aTransform" type="PAffineTransform" line="306"/>
                <declaration name="count" type="int" line="308"/>
                <scope line="309">
                    <declaration name="each" type="PTuple" line="310"/>
                    <scope line="311"/>
                    <scope line="314"/>
                </scope>
            </method>
            <javadoc line="322">
                Process Events - Give each node in the pick path, starting at the bottom
                  most one, a chance to handle the event.                
                <param>
                    event event to be processed                    
                </param>
                <param>
                    eventType the type of event being processed                    
                </param>
            </javadoc>
            <method name="processEvent" type="void" line="329">
                <params>
                    <param name="event" type="PInputEvent"/>
                    <param name="eventType" type="int"/>
                </params>
                <scope line="332">
                    <declaration name="each" type="PNode" line="333"/>
                    <declaration name="list" type="EventListenerList" line="335"/>
                    <scope line="337">
                        <declaration name="listeners" type="Object[]" line="338"/>
                        <scope line="340">
                            <declaration name="listener" type="PInputEventListener" line="341"/>
                            <scope line="343"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="364">
                Convert the given point from the canvas coordinates, down through the
                  pick path (and through any camera view transforms applied to the path) to
                  the local coordinates of the given node.                
                <param>
                    canvasPoint point to be transformed                    
                </param>
                <param>
                    nodeOnPath node into which the point is to be transformed
                      iteratively through the pick path                    
                </param>
                <return>
                    transformed canvasPoint in local coordinates of the picked node                    
                </return>
            </javadoc>
            <method name="canvasToLocal" type="Point2D" line="375">
                <params>
                    <param name="canvasPoint" type="Point2D"/>
                    <param name="nodeOnPath" type="PNode"/>
                </params>
            </method>
            <javadoc line="379">
                Convert the given dimension from the canvas coordinates, down through the
                  pick path (and through any camera view transforms applied to the path) to
                  the local coordinates of the given node.                
                <param>
                    canvasDimension dimension to be transformed                    
                </param>
                <param>
                    nodeOnPath node into which the dimension is to be transformed
                      iteratively through the stack                    
                </param>
                <return>
                    transformed canvasDimension in local coordinates of the picked
                      node                    
                </return>
            </javadoc>
            <method name="canvasToLocal" type="Dimension2D" line="391">
                <params>
                    <param name="canvasDimension" type="Dimension2D"/>
                    <param name="nodeOnPath" type="PNode"/>
                </params>
            </method>
            <javadoc line="395">
                Convert the given rectangle from the canvas coordinates, down through the
                  pick path (and through any camera view transforms applied to the path) to
                  the local coordinates of the given node.                
                <param>
                    canvasRectangle rectangle to be transformed                    
                </param>
                <param>
                    nodeOnPath node into which the rectangle is to be transformed
                      iteratively through the stack                    
                </param>
                <return>
                    transformed canvasRectangle in local coordinates of the picked
                      node                    
                </return>
            </javadoc>
            <method name="canvasToLocal" type="Rectangle2D" line="406">
                <params>
                    <param name="canvasRectangle" type="Rectangle2D"/>
                    <param name="nodeOnPath" type="PNode"/>
                </params>
            </method>
            <class name="PTuple" line="410">
                <javadoc line="410">
                    Used to associated nodes with their transforms on the transform stack.                    
                </javadoc>
                <declaration name="node" type="PNode" line="414"/>
                <declaration name="transform" type="PAffineTransform" line="415"/>
                <method name="PTuple" type="constructor" line="417">
                    <params>
                        <param name="n" type="PNode"/>
                        <param name="t" type="PAffineTransform"/>
                    </params>
                </method>
            </class>
        </class>
    </source>