<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.nodes">
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.font.LineBreakMeasurer"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.AttributedString"/>
        <import package="java.util.ArrayList"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <class name="PText" line="46">
            <extends class="PNode"/>
            <javadoc line="46">
                &lt;b&gt;PText&lt;/b&gt; is a multi-line text node. The text will flow to base on the
                  width of the node&apos;s bounds.                
                <version>
                    1.1                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <javadoc line="55">
                Allows for future serialization code to understand versioned binary
                  formats.                
            </javadoc>
            <declaration name="PROPERTY_TEXT" type="String" line="61"/>
            <javadoc line="61">
                The property name that identifies a change of this node&apos;s text (see{@link #getText getText}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_TEXT" type="int" line="68"/>
            <javadoc line="68">
                The property code that identifies a change of this node&apos;s text (see{@link #getText getText}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_FONT" type="String" line="75"/>
            <javadoc line="75">
                The property name that identifies a change of this node&apos;s font (see{@link #getFont getFont}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_FONT" type="int" line="82"/>
            <javadoc line="82">
                The property code that identifies a change of this node&apos;s font (see{@link #getFont getFont}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_TEXT_PAINT" type="String" line="89"/>
            <javadoc line="89">
                The property name that identifies a change of this node&apos;s text paint (see{@link #getTextPaint getTextPaint}). Both old and new value will be set
                  in any property change event.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="PROPERTY_CODE_TEXT_PAINT" type="int" line="98"/>
            <javadoc line="98">
                The property code that identifies a change of this node&apos;s text paint (see{@link #getTextPaint getTextPaint}). Both old and new value will be set
                  in any property change event.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_FONT" type="Font" line="107"/>
            <javadoc line="107">
                Default font, 12 point &lt;code&gt;&quot;SansSerif&quot;&lt;/code&gt;. Will be made final in
                  version 2.0.                
            </javadoc>
            <declaration name="DEFAULT_GREEK_THRESHOLD" type="double" line="115"/>
            <javadoc line="115">
                Default greek threshold, &lt;code&gt;5.5d&lt;/code&gt;. Will be made final in version
                  2.0.                
            </javadoc>
            <declaration name="DEFAULT_HORIZONTAL_ALIGNMENT" type="float" line="121"/>
            <javadoc line="121">
                Default horizontal alignment, &lt;code&gt;Component.LEFT_ALIGNMENT&lt;/code&gt;.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_TEXT" type="String" line="128"/>
            <javadoc line="128">
                Default text, &lt;code&gt;&quot;&quot;&lt;/code&gt;.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_TEXT_PAINT" type="Paint" line="135"/>
            <javadoc line="135">
                Default text paint, &lt;code&gt;Color.BLACK&lt;/code&gt;.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="EMPTY_TEXT_LAYOUT_ARRAY" type="TextLayout[]" line="142"/>
            <javadoc line="142">
                Empty text layout array.                
            </javadoc>
            <declaration name="text" type="String" line="145"/>
            <javadoc line="145">
                Text for this text node.                
            </javadoc>
            <declaration name="textPaint" type="Paint" line="148"/>
            <javadoc line="148">
                Text paint for this text node.                
            </javadoc>
            <declaration name="font" type="Font" line="151"/>
            <javadoc line="151">
                Font for this text node.                
            </javadoc>
            <declaration name="greekThreshold" type="double" line="154"/>
            <javadoc line="154">
                Greek threshold in screen font size for this text node. Will be made
                  private in version 2.0.                
            </javadoc>
            <declaration name="horizontalAlignment" type="float" line="160"/>
            <javadoc line="160">
                Horizontal alignment for this text node.                
            </javadoc>
            <declaration name="constrainHeightToTextHeight" type="boolean" line="163"/>
            <javadoc line="163">
                True if this text node should constrain its height to the height of its
                  text.                
            </javadoc>
            <declaration name="constrainWidthToTextWidth" type="boolean" line="169"/>
            <javadoc line="169">
                True if this text node should constrain its height to the height of its
                  text.                
            </javadoc>
            <declaration name="lines" type="TextLayout[]" line="175"/>
            <javadoc line="175">
                One or more lines of text layout.                
            </javadoc>
            <javadoc line="178">
                Create a new text node with no text (&lt;code&gt;&quot;&quot;&lt;/code&gt;).                
            </javadoc>
            <method name="PText" type="constructor" line="181"/>
            <javadoc line="186">
                Create a new text node with the specified text.                
                <param>
                    text text for this text node                    
                </param>
            </javadoc>
            <method name="PText" type="constructor" line="191">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="196">
                @deprecated by {@link #getHorizontalAlignment()}                
                <return>
                    the horizontal alignment value of this node                    
                </return>
            </javadoc>
            <method name="getJustification" type="float" line="201"/>
            <javadoc line="205">
                @deprecated by {@link #setHorizontalAlignment(float)}                
                <param>
                    justification horizontal alignment value to assign to this node                    
                </param>
            </javadoc>
            <method name="setJustification" type="void" line="210">
                <params>
                    <param name="justification" type="float"/>
                </params>
            </method>
            <javadoc line="214">
                Return the horizontal alignment for this text node. The horizontal
                  alignment will be one of &lt;code&gt;Component.LEFT_ALIGNMENT&lt;/code&gt;,
                  &lt;code&gt;Component.CENTER_ALIGNMENT&lt;/code&gt;, or
                  &lt;code&gt;Component.RIGHT_ALIGNMENT&lt;/code&gt;. Defaults to{@link #DEFAULT_HORIZONTAL_ALIGNMENT}.                
                <since>
                    1.3                    
                </since>
                <return>
                    the horizontal alignment for this text node                    
                </return>
            </javadoc>
            <method name="getHorizontalAlignment" type="float" line="224"/>
            <javadoc line="228">
                Set the horizontal alignment for this text node to
                  &lt;code&gt;horizontalAlignment&lt;/code&gt;.                
                <since>
                    1.3                    
                </since>
                <param>
                    horizontalAlignment horizontal alignment, must be one of
                      <code>Component.LEFT_ALIGNMENT</code>,
                      <code>Component.CENTER_ALIGNMENT</code>, or
                      <code>Component.RIGHT_ALIGNMENT</code>                    
                </param>
            </javadoc>
            <method name="setHorizontalAlignment" type="void" line="238">
                <params>
                    <param name="horizontalAlignment" type="float"/>
                </params>
                <scope line="239"/>
            </method>
            <javadoc line="246">
                Return true if the specified horizontal alignment is one of
                  &lt;code&gt;Component.LEFT_ALIGNMENT&lt;/code&gt;,
                  &lt;code&gt;Component.CENTER_ALIGNMENT&lt;/code&gt;, or
                  &lt;code&gt;Component.RIGHT_ALIGNMENT&lt;/code&gt;.                
                <param>
                    horizontalAlignment horizontal alignment                    
                </param>
                <return>
                    true if the specified horizontal alignment is one of
                      <code>Component.LEFT_ALIGNMENT</code>,
                      <code>Component.CENTER_ALIGNMENT</code>, or
                      <code>Component.RIGHT_ALIGNMENT</code>                    
                </return>
            </javadoc>
            <method name="validHorizontalAlignment" type="boolean" line="258">
                <params>
                    <param name="horizontalAlignment" type="float"/>
                </params>
            </method>
            <javadoc line="263">
                Return the paint used to paint this node&apos;s text.                
                <return>
                    the paint used to paint this node's text                    
                </return>
            </javadoc>
            <method name="getTextPaint" type="Paint" line="268"/>
            <javadoc line="272">
                Set the paint used to paint this node&apos;s text to &lt;code&gt;textPaint&lt;/code&gt;.
                  &lt;p&gt;
                  This is a &lt;b&gt;bound&lt;/b&gt; property.
                  &lt;/p&gt;                
                <param>
                    textPaint text paint                    
                </param>
            </javadoc>
            <method name="setTextPaint" type="void" line="281">
                <params>
                    <param name="textPaint" type="Paint"/>
                </params>
                <scope line="282"/>
                <declaration name="oldTextPaint" type="Paint" line="285"/>
            </method>
            <javadoc line="291">
                Return true if this text node should constrain its width to the width of
                  its text. Defaults to &lt;code&gt;true&lt;/code&gt;.                
                <return>
                    true if this text node should constrain its width to the width of
                      its text                    
                </return>
            </javadoc>
            <method name="isConstrainWidthToTextWidth" type="boolean" line="298"/>
            <javadoc line="302">
                Set to &lt;code&gt;true&lt;/code&gt; if this text node should constrain its width to
                  the width of its text.                
                <param>
                    constrainWidthToTextWidth true if this text node should constrain
                      its width to the width of its text                    
                </param>
            </javadoc>
            <method name="setConstrainWidthToTextWidth" type="void" line="309">
                <params>
                    <param name="constrainWidthToTextWidth" type="boolean"/>
                </params>
            </method>
            <javadoc line="314">
                Return true if this text node should constrain its height to the height
                  of its text. Defaults to &lt;code&gt;true&lt;/code&gt;.                
                <return>
                    true if this text node should constrain its height to the height
                      of its text                    
                </return>
            </javadoc>
            <method name="isConstrainHeightToTextHeight" type="boolean" line="321"/>
            <javadoc line="325">
                Set to &lt;code&gt;true&lt;/code&gt; if this text node should constrain its height to
                  the height of its text.                
                <param>
                    constrainHeightToTextHeight true if this text node should
                      constrain its height to the width of its text                    
                </param>
            </javadoc>
            <method name="setConstrainHeightToTextHeight" type="void" line="332">
                <params>
                    <param name="constrainHeightToTextHeight" type="boolean"/>
                </params>
            </method>
            <javadoc line="337">
                Return the greek threshold in screen font size. When the screen font size
                  will be below this threshold the text is rendered as &apos;greek&apos; instead of
                  drawing the text glyphs. Defaults to {@link #DEFAULT_GREEK_THRESHOLD}.                
                <see>
                    PText#paintGreek(PPaintContext)                    
                </see>
                <return>
                    the current greek threshold in screen font size                    
                </return>
            </javadoc>
            <method name="getGreekThreshold" type="double" line="345"/>
            <javadoc line="349">
                Set the greek threshold in screen font size to
                  &lt;code&gt;greekThreshold&lt;/code&gt;. When the screen font size will be below this
                  threshold the text is rendered as &apos;greek&apos; instead of drawing the text
                  glyphs.                
                <see>
                    PText#paintGreek(PPaintContext)                    
                </see>
                <param>
                    greekThreshold greek threshold in screen font size                    
                </param>
            </javadoc>
            <method name="setGreekThreshold" type="void" line="358">
                <params>
                    <param name="greekThreshold" type="double"/>
                </params>
            </method>
            <javadoc line="363">
                Return the text for this text node. Defaults to {@link #DEFAULT_TEXT}.                
                <return>
                    the text for this text node                    
                </return>
            </javadoc>
            <method name="getText" type="String" line="368"/>
            <javadoc line="372">
                Set the text for this node to &lt;code&gt;text&lt;/code&gt;. The text will be broken
                  up into multiple lines based on the size of the text and the bounds width
                  of this node.
                  &lt;p&gt;
                  This is a &lt;b&gt;bound&lt;/b&gt; property.
                  &lt;/p&gt;                
                <param>
                    newText text for this text node                    
                </param>
            </javadoc>
            <method name="setText" type="void" line="383">
                <params>
                    <param name="newText" type="String"/>
                </params>
                <scope line="384"/>
                <declaration name="oldText" type="String" line="388"/>
                <scope line="389"/>
                <scope line="392"/>
            </method>
            <javadoc line="401">
                Return the font for this text node. Defaults to {@link #DEFAULT_FONT}.                
                <return>
                    the font for this text node                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="406"/>
            <javadoc line="410">
                Set the font for this text node to &lt;code&gt;font&lt;/code&gt;. Note that in
                  Piccolo if you want to change the size of a text object it&apos;s often a
                  better idea to scale the PText node instead of changing the font size to
                  get that same effect. Using very large font sizes can slow performance.
                  &lt;p&gt;
                  This is a &lt;b&gt;bound&lt;/b&gt; property.
                  &lt;/p&gt;                
                <param>
                    font font for this text node                    
                </param>
            </javadoc>
            <method name="setFont" type="void" line="422">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <scope line="423"/>
                <declaration name="oldFont" type="Font" line="426"/>
                <scope line="427"/>
                <scope line="430"/>
            </method>
            <javadoc line="440">
                Compute the bounds of the text wrapped by this node. The text layout is
                  wrapped based on the bounds of this node.                
            </javadoc>
            <method name="recomputeLayout" type="void" line="444">
                <declaration name="linesList" type="ArrayList" line="445"/>
                <declaration name="textWidth" type="double" line="446"/>
                <declaration name="textHeight" type="double" line="447"/>
                <scope line="449">
                    <declaration name="atString" type="AttributedString" line="450"/>
                    <declaration name="itr" type="AttributedCharacterIterator" line="452"/>
                    <declaration name="measurer" type="LineBreakMeasurer" line="453"/>
                    <declaration name="availableWidth" type="float" line="454"/>
                    <scope line="455"/>
                    <scope line="458"/>
                    <declaration name="nextLineBreakOffset" type="int" line="462"/>
                    <scope line="463"/>
                    <scope line="466"/>
                    <scope line="470">
                        <declaration name="aTextLayout" type="TextLayout" line="471"/>
                        <scope line="473">
                            <scope line="475"/>
                            <scope line="478"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="492">
                    <declaration name="newWidth" type="double" line="493"/>
                    <declaration name="newHeight" type="double" line="494"/>
                    <scope line="496"/>
                    <scope line="500"/>
                </scope>
            </method>
            <javadoc line="508">
                Compute the next layout using the specified line break measurer,
                  available width, and next line break offset.                
                <param>
                    lineBreakMeasurer line break measurer                    
                </param>
                <param>
                    availableWidth available width                    
                </param>
                <param>
                    nextLineBreakOffset next line break offset                    
                </param>
                <return>
                    the next layout computed using the specified line break measurer,
                      available width, and next line break offset                    
                </return>
            </javadoc>
            <method name="computeNextLayout" type="TextLayout" line="519">
                <params>
                    <param name="lineBreakMeasurer" type="LineBreakMeasurer"/>
                    <param name="availableWidth" type="float"/>
                    <param name="nextLineBreakOffset" type="int"/>
                </params>
            </method>
            <javadoc line="523">
                Paint greek with the specified paint context.                
                <since>
                    1.3                    
                </since>
                <param>
                    paintContext paint context                    
                </param>
            </javadoc>
            <method name="paintGreek" type="void" line="529">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <comment line="531">
                    empty                    
                </comment>
            </method>
            <javadoc line="533">
                Paint text with the specified paint context.                
                <since>
                    1.3                    
                </since>
                <param>
                    paintContext paint context                    
                </param>
            </javadoc>
            <method name="paintText" type="void" line="539">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <declaration name="x" type="float" line="540"/>
                <declaration name="y" type="float" line="541"/>
                <declaration name="bottomY" type="float" line="542"/>
                <declaration name="g2" type="Graphics2D" line="544"/>
                <scope line="546"/>
                <scope line="554">
                    <declaration name="tl" type="TextLayout" line="555"/>
                    <scope line="558"/>
                    <declaration name="offset" type="float" line="562"/>
                </scope>
            </method>
            <javadoc line="570">
                {@inheritDoc}                
            </javadoc>
            <method name="paint" type="void" line="571">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="573"/>
                <declaration name="screenFontSize" type="float" line="576"/>
                <scope line="577"/>
            </method>
            <javadoc line="583">
                {@inheritDoc}                
            </javadoc>
            <method name="internalUpdateBounds" type="void" line="584">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
            </method>
        </class>
    </source>