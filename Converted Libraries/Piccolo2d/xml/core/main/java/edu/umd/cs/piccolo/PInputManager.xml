<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo">
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventListener"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <class name="PInputManager" line="12">
            <extends class="PBasicInputEventHandler"/>
            <implements interface="PRoot.InputSource"/>
            <javadoc line="12">
                &lt;b&gt;PInputManager&lt;/b&gt; is responsible for dispatching PInputEvents to node&apos;s
                  event listeners. Events are dispatched from PRoot&apos;s processInputs method.
                  &lt;P&gt;                
                <see>
                    edu.umd.cs.piccolo.event.PInputEvent                    
                </see>
                <see>
                    PRoot                    
                </see>
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="lastCanvasPosition" type="Point2D" line="22"/>
            <javadoc line="22">
                Records the last known mouse position on the canvas.                
            </javadoc>
            <declaration name="currentCanvasPosition" type="Point2D" line="26"/>
            <javadoc line="26">
                Records the current known mouse position on the canvas.                
            </javadoc>
            <declaration name="nextInput" type="InputEvent" line="30"/>
            <javadoc line="30">
                The next InputEvent that needs to be processed.                
            </javadoc>
            <declaration name="nextType" type="int" line="34"/>
            <javadoc line="34">
                The type of the next InputEvent that needs to be processed.                
            </javadoc>
            <declaration name="nextInputSource" type="PCamera" line="38"/>
            <javadoc line="38">
                The Input Source the next event to process came from.                
            </javadoc>
            <declaration name="mouseFocus" type="PPickPath" line="42"/>
            <javadoc line="42">
                The current mouse focus.                
            </javadoc>
            <declaration name="previousMouseFocus" type="PPickPath" line="46"/>
            <javadoc line="46">
                The previous mouse focus.                
            </javadoc>
            <declaration name="mouseOver" type="PPickPath" line="50"/>
            <javadoc line="50">
                Tracks where the mouse is right now on the canvas.                
            </javadoc>
            <declaration name="previousMouseOver" type="PPickPath" line="54"/>
            <javadoc line="54">
                Tracks the previous location of the mouse on the canvas.                
            </javadoc>
            <declaration name="keyboardFocus" type="PInputEventListener" line="58"/>
            <javadoc line="58">
                Tracks the input event listener that should receive keyboard events.                
            </javadoc>
            <declaration name="buttonsPressed" type="int" line="62"/>
            <javadoc line="62">
                Tracks the number mouse buttons currently pressed.                
            </javadoc>
            <javadoc line="66">
                Creates a PInputManager and sets positions (last, current) to the origin
                  (0,0).                
            </javadoc>
            <method name="PInputManager" type="constructor" line="70"/>
            <javadoc line="74">
                Return the node that currently has the keyboard focus. This node receives
                  the key events.                
                <return>
                    the current keyboard focus                    
                </return>
            </javadoc>
            <method name="getKeyboardFocus" type="PInputEventListener" line="79"/>
            <javadoc line="82">
                Set the node that should receive key events.                
                <param>
                    eventHandler sets the keyboard event focus, may be null                    
                </param>
            </javadoc>
            <method name="setKeyboardFocus" type="void" line="86">
                <params>
                    <param name="eventHandler" type="PInputEventListener"/>
                </params>
                <declaration name="focusEvent" type="PInputEvent" line="87"/>
                <scope line="88"/>
                <scope line="92"/>
            </method>
            <javadoc line="96">
                Return the current Pick Path under the mouse focus. This will return the
                  path that received the current mouse pressed event, or null if the mouse
                  is not pressed. The mouse focus gets mouse dragged events even what the
                  mouse is not over the mouse focus.                
                <return>
                    the current Pick Path under the mouse focus                    
                </return>
            </javadoc>
            <method name="getMouseFocus" type="PPickPath" line="103"/>
            <javadoc line="106">
                Sets the current Pick Path under the mouse focus. The mouse focus gets
                  mouse dragged events even when the mouse is not over the mouse focus.                
                <param>
                    path the new mouse focus                    
                </param>
            </javadoc>
            <method name="setMouseFocus" type="void" line="111">
                <params>
                    <param name="path" type="PPickPath"/>
                </params>
            </method>
            <javadoc line="115">
                Return the node the the mouse is currently over.                
                <return>
                    the path over which the mouse currently is                    
                </return>
            </javadoc>
            <method name="getMouseOver" type="PPickPath" line="119"/>
            <javadoc line="122">
                Records the path which is directly below the mouse.                
                <param>
                    path path over which the mouse has been moved                    
                </param>
            </javadoc>
            <method name="setMouseOver" type="void" line="126">
                <params>
                    <param name="path" type="PPickPath"/>
                </params>
            </method>
            <javadoc line="129">
                Returns the position on the Canvas of the last event.                
                <return>
                    position of last canvas event                    
                </return>
            </javadoc>
            <method name="getLastCanvasPosition" type="Point2D" line="133"/>
            <javadoc line="136">
                Returns the position of the current canvas event.                
                <return>
                    position of current canvas event                    
                </return>
            </javadoc>
            <method name="getCurrentCanvasPosition" type="Point2D" line="140"/>
            <javadoc line="143">
                {@inheritDoc}                
            </javadoc>
            <method name="keyPressed" type="void" line="146">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="149">
                {@inheritDoc}                
            </javadoc>
            <method name="keyReleased" type="void" line="152">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="155">
                {@inheritDoc}                
            </javadoc>
            <method name="keyTyped" type="void" line="158">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="161">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseClicked" type="void" line="164">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="167">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseWheelRotated" type="void" line="170">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="174">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseWheelRotatedByBlock" type="void" line="177">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="181">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseDragged" type="void" line="184">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="188">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseEntered" type="void" line="191">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="194">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseExited" type="void" line="197">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="200">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseMoved" type="void" line="203">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="207">
                {@inheritDoc}                
            </javadoc>
            <method name="mousePressed" type="void" line="210">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <scope line="211"/>
                <scope line="216"/>
            </method>
            <javadoc line="220">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseReleased" type="void" line="223">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <scope line="227"/>
                <scope line="230"/>
            </method>
            <javadoc line="234">
                Fires events whenever the mouse moves from PNode to PNode.                
                <param>
                    event to check to see if the top node has changed.                    
                </param>
            </javadoc>
            <method name="checkForMouseEnteredAndExited" type="void" line="238">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <declaration name="currentNode" type="PNode" line="239"/>
                <declaration name="previousNode" type="PNode" line="240"/>
                <scope line="241"/>
            </method>
            <javadoc line="247">
                Returns picked node on pickPath if pickPath is not null, or null.                
                <param>
                    pickPath from which to extract picked node                    
                </param>
                <return>
                    the picked node or null if pickPath is null                    
                </return>
            </javadoc>
            <method name="getPickedNode" type="PNode" line="252">
                <params>
                    <param name="pickPath" type="PPickPath"/>
                </params>
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <javadoc line="260">
                {@inheritDoc}                
            </javadoc>
            <method name="processInput" type="void" line="263">
                <scope line="264"/>
                <declaration name="e" type="PInputEvent" line="267"/>
                <declaration name="newCurrentCanvasPosition" type="Point2D" line="268"/>
                <declaration name="newLastCanvasPosition" type="Point2D" line="269"/>
                <scope line="270">
                    <scope line="271">
                        <declaration name="aPickPath" type="PPickPath" line="272"/>
                    </scope>
                    <scope line="278">
                        <declaration name="aPickPath" type="PPickPath" line="281"/>
                    </scope>
                </scope>
                <scope line="288"/>
            </method>
            <javadoc line="293">
                Flags the given event as needing to be processed.                
                <param>
                    event the event to be processed                    
                </param>
                <param>
                    type type of event to be processed                    
                </param>
                <param>
                    camera camera from which the event was dispatched                    
                </param>
            </javadoc>
            <method name="processEventFromCamera" type="void" line="299">
                <params>
                    <param name="event" type="InputEvent"/>
                    <param name="type" type="int"/>
                    <param name="camera" type="PCamera"/>
                </params>
            </method>
            <javadoc line="305">
                Dispatches the given event to the listener, or does nothing if listener
                  is null.                
                <param>
                    event event to be dispatched                    
                </param>
                <param>
                    type type of event to dispatch                    
                </param>
                <param>
                    listener target of dispatch                    
                </param>
            </javadoc>
            <method name="dispatchEventToListener" type="void" line="312">
                <params>
                    <param name="event" type="PInputEvent"/>
                    <param name="type" type="int"/>
                    <param name="listener" type="PInputEventListener"/>
                </params>
                <scope line="313"/>
            </method>
        </class>
    </source>