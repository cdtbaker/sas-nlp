<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.event">
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="edu.umd.cs.piccolo.activities.PActivity"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PDragSequenceEventHandler" line="37">
            <extends class="PBasicInputEventHandler"/>
            <comment line="116">
                ****************************************************************                
            </comment>
            <comment line="117">
                Dragging - Methods to indicate the stages of the drag sequence.                
            </comment>
            <comment line="118">
                ****************************************************************                
            </comment>
            <comment line="174">
                ****************************************************************                
            </comment>
            <comment line="175">
                Drag Activity - Used for scheduling an activity during a drag                
            </comment>
            <comment line="176">
                sequence. For example zooming and auto panning are implemented                
            </comment>
            <comment line="177">
                using this.                
            </comment>
            <comment line="178">
                ****************************************************************                
            </comment>
            <javadoc line="37">
                &lt;b&gt;PDragSequenceEventHandler&lt;/b&gt; is designed to support mouse pressed,
                  dragged, and released interaction sequences. Support is also provided for
                  running a continuous activity during the drag sequence.
                  &lt;P&gt;
                  PDragSequenceEventHandler should be subclassed by a concrete event handler
                  that implements a particular interaction. See PPanEventHandler,
                  PZoomEventHandler, and PDragEventHandler for examples.
                  &lt;P&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="minDragStartDistance" type="double" line="52"/>
            <declaration name="isDragging" type="boolean" line="53"/>
            <declaration name="mousePressedCanvasPoint" type="Point2D" line="54"/>
            <declaration name="dragActivity" type="PActivity" line="55"/>
            <declaration name="dragEvent" type="PInputEvent" line="56"/>
            <declaration name="sequenceInitiatedButton" type="int" line="57"/>
            <javadoc line="59">
                Constructs a drag sequence event handler instance.                
            </javadoc>
            <method name="PDragSequenceEventHandler" type="constructor" line="60"/>
            <javadoc line="63">
                Returns true if this event handler is in the process of handling a drag.                
                <return>
                    true if handling a drag                    
                </return>
            </javadoc>
            <method name="isDragging" type="boolean" line="68"/>
            <javadoc line="72">
                Used to inform this handler that it is in the process of handling a drag.                
                <param>
                    isDragging true if handler is processing a drag                    
                </param>
            </javadoc>
            <method name="setIsDragging" type="void" line="77">
                <params>
                    <param name="isDragging" type="boolean"/>
                </params>
            </method>
            <javadoc line="81">
                Returns the minimum distance (in screen coordinates) before a pressed
                  mouse movement is registered as a drag event. The smaller this value the
                  more clicks will be incorrectly recognized as drag events.                
                <return>
                    minimum distance a pressed mouse must move before it is
                      registered as a drag                    
                </return>
            </javadoc>
            <method name="getMinDragStartDistance" type="double" line="89"/>
            <javadoc line="93">
                Set the minimum distance that the mouse should be dragged (in screen
                  coordinates) before a new drag sequence is initiate.                
                <param>
                    minDistance in screen coordinates                    
                </param>
            </javadoc>
            <method name="setMinDragStartDistance" type="void" line="99">
                <params>
                    <param name="minDistance" type="double"/>
                </params>
            </method>
            <javadoc line="103">
                Return the point in canvas coordinates where the mouse was last pressed.                
                <return>
                    point in canvas coordinates of last mouse press                    
                </return>
            </javadoc>
            <method name="getMousePressedCanvasPoint" type="Point2D" line="108">
                <scope line="109"/>
            </method>
            <javadoc line="119">
                Subclasses should override this method to get notified of the start of a
                  new drag sequence. Note that that overriding methods must still call
                  super.startDrag() for correct behavior.                
                <param>
                    event event that started the drag sequence                    
                </param>
            </javadoc>
            <method name="startDrag" type="void" line="126">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="133">
                Subclasses should override this method to get notified of the drag events
                  in a drag sequence. Note that that overriding methods must still call
                  super.startDrag() for correct behavior.                
                <param>
                    event event that caused the drag                    
                </param>
            </javadoc>
            <method name="drag" type="void" line="140">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="144">
                Subclasses should override this method to get notified of the end event
                  in a drag sequence. Note that that overriding methods must still call
                  super.startDrag() for correct behavior.                
                <param>
                    event event that ended the drag sequence                    
                </param>
            </javadoc>
            <method name="endDrag" type="void" line="151">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="158">
                Returns true if the provided event represents a valid start for a drag
                  sequence.
                  Subclasses should override this method to add criteria for the start of a
                  drag sequence. Subclasses are still responsible for calling
                  super.shouldStartDragInteraction()                
                <param>
                    event event being tested                    
                </param>
                <return>
                    true if provided event is a good start to a drag sequence                    
                </return>
            </javadoc>
            <method name="shouldStartDragInteraction" type="boolean" line="169">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="179">
                Returns the scheduled activity that&apos;s updating the scene as a result to
                  the current drag activity (if any).                
                <return>
                    scheduled activity that's updating the scene as a result to the
                      drag activity                    
                </return>
            </javadoc>
            <method name="getDragActivity" type="PActivity" line="186"/>
            <javadoc line="190">
                Schedules the &quot;infinite&quot; drag activity so that auto-panning and zooming
                  will continue to update the scene even if there are no further drag
                  events fired. For example, if the mouse is dragged to the right while
                  pressing the right mouse button and then paused for a while, the scene
                  should continue to zoom in.                
                <param>
                    event the event that's responsible for the start of the activity                    
                </param>
            </javadoc>
            <method name="startDragActivity" type="void" line="199">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <anonymous_class line="201">
                    <method name="activityStarted" type="void" line="202">
                        <params>
                            <param name="activity" type="PActivity"/>
                        </params>
                    </method>
                    <method name="activityStepped" type="void" line="206">
                        <params>
                            <param name="activity" type="PActivity"/>
                        </params>
                    </method>
                    <method name="activityFinished" type="void" line="210">
                        <params>
                            <param name="activity" type="PActivity"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="218">
                Stops the activity responsible for updating the scene.                
                <param>
                    event The event responsible for stopping the drag activity                    
                </param>
            </javadoc>
            <method name="stopDragActivity" type="void" line="223">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="228">
                Subclasses override this method to get notified when the drag activity
                  starts stepping.                
                <param>
                    event the event responsible for the first step in the drag
                      activity                    
                </param>
            </javadoc>
            <method name="dragActivityFirstStep" type="void" line="235">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="238">
                During a drag sequence an activity is scheduled that runs continuously
                  while the drag sequence is active. This can be used to support some
                  additional behavior that is not driven directly by mouse events. For
                  example PZoomEventHandler uses it for zooming and PPanEventHandler uses
                  it for auto panning.                
                <param>
                    event the event encapsulating the callback context for the
                      activity step                    
                </param>
            </javadoc>
            <method name="dragActivityStep" type="void" line="248">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="251">
                Subclasses should override this method to get notified when the drag
                  activity stops stepping.                
                <param>
                    aEvent the event responsible for ending the activity                    
                </param>
            </javadoc>
            <method name="dragActivityFinalStep" type="void" line="257">
                <params>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="260">
                Subclasses should not override this method, instead they should
                  override the appropriate drag callbacks.                
                <param>
                    event The event to be queried about the details of the mouse press                    
                </param>
            </javadoc>
            <method name="mousePressed" type="void" line="266">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <scope line="269">
                    <scope line="273"/>
                </scope>
            </method>
            <javadoc line="279">
                Subclasses should not override this method, instead they should
                  override the appropriate drag method.                
                <param>
                    event The event to be queried about the details of the mouse press                    
                </param>
            </javadoc>
            <method name="mouseDragged" type="void" line="285">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <scope line="288">
                    <scope line="289">
                        <scope line="290"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="299">
                Subclasses should not override this method, instead they should
                  override the appropriate drag method.                
                <param>
                    event The event to be queried about the details of the mouse release                    
                </param>
            </javadoc>
            <method name="mouseReleased" type="void" line="305">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <scope line="307">
                    <scope line="308"/>
                </scope>
            </method>
        </class>
    </source>