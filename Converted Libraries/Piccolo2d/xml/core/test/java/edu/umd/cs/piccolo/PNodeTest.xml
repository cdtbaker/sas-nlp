<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo">
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ListIterator"/>
        <import package="javax.swing.text.MutableAttributeSet"/>
        <import package="junit.framework.TestCase"/>
        <import package="edu.umd.cs.piccolo.activities.PActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PColorActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PInterpolatingActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PTransformActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PColorActivity.Target"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransformException"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PNodeFilter"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PNodeTest" line="65">
            <extends class="TestCase"/>
            <javadoc line="65">
                Unit test for PNode.                
            </javadoc>
            <declaration name="mockListener" type="MockPropertyChangeListener" line="70"/>
            <declaration name="node" type="PNode" line="71"/>
            <method name="PNodeTest" type="constructor" line="73">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="setUp" type="void" line="77"/>
            <method name="testCenterBaseBoundsOnPoint" type="void" line="82"/>
            <method name="testClientProperties" type="void" line="89">
                <declaration name="n" type="PNode" line="90"/>
            </method>
            <method name="testFullScale" type="void" line="100">
                <declaration name="aParent" type="PNode" line="101"/>
                <declaration name="aNode" type="PNode" line="102"/>
            </method>
            <method name="testReparent" type="void" line="118">
                <declaration name="aParent" type="PNode" line="119"/>
                <declaration name="aNode" type="PNode" line="120"/>
            </method>
            <method name="testFindIntersectingNodes" type="void" line="138">
                <declaration name="n" type="PNode" line="139"/>
                <declaration name="c" type="PNode" line="140"/>
                <declaration name="found" type="ArrayList" line="147"/>
                <declaration name="rect2d" type="Rectangle2D" line="148"/>
                <declaration name="bounds" type="PBounds" line="155"/>
            </method>
            <method name="testRemoveNonexistantListener" type="void" line="162">
                <declaration name="n" type="PNode" line="163"/>
            </method>
            <method name="testAddChildHandleDuplicates" type="void" line="167">
                <declaration name="parent" type="PNode" line="168"/>
            </method>
            <method name="testAddChildCanSpecifyAnIndexAndDoesntReplace" type="void" line="175">
                <declaration name="parent" type="PNode" line="176"/>
            </method>
            <method name="testAddChildWithIndexMovesChildAround" type="void" line="183">
                <declaration name="parent" type="PNode" line="184"/>
            </method>
            <method name="testCloneCopiesAllProperties" type="void" line="200">
                <declaration name="clonedNode" type="PNode" line="210"/>
            </method>
            <method name="testCloneCopiesTransforms" type="void" line="225">
                <declaration name="clonedNode" type="PNode" line="230"/>
            </method>
            <method name="testCloneDoesNotCopyEventListeners" type="void" line="238">
                <anonymous_class line="239"/>
                <declaration name="clonedNode" type="PNode" line="241"/>
            </method>
            <method name="testCloneClonesChildrenAswell" type="void" line="246">
                <declaration name="child" type="PNode" line="247"/>
                <declaration name="clonedNode" type="PNode" line="250"/>
            </method>
            <method name="testCloneDoesNotCopyParent" type="void" line="256">
                <declaration name="child" type="PNode" line="257"/>
                <declaration name="clonedChild" type="PNode" line="260"/>
            </method>
            <method name="testLocalToGlobal" type="void" line="265">
                <comment line="272">
                    bounds                    
                </comment>
                <comment line="290">
                    dimensions                    
                </comment>
                <declaration name="aParent" type="PNode" line="266"/>
                <declaration name="aChild" type="PNode" line="267"/>
                <declaration name="bnds" type="PBounds" line="273"/>
                <declaration name="dim" type="PDimension" line="291"/>
            </method>
            <method name="testToString" type="void" line="302">
                <declaration name="a" type="PNode" line="303"/>
                <declaration name="b" type="PNode" line="304"/>
                <declaration name="c" type="PNode" line="305"/>
                <declaration name="d" type="PNode" line="306"/>
                <declaration name="e" type="PNode" line="307"/>
                <declaration name="f" type="PNode" line="308"/>
            </method>
            <method name="testRecursiveLayout" type="void" line="322">
                <anonymous_class line="323">
                    <declaration name="serialVersionUID" type="long" line="324"/>
                    <javadoc line="324">
                                                
                    </javadoc>
                    <method name="layoutChildren" type="void" line="329">
                        <scope line="330"/>
                    </method>
                </anonymous_class>
                <declaration name="layoutNode1" type="PNode" line="323"/>
                <anonymous_class line="336">
                    <declaration name="serialVersionUID" type="long" line="337"/>
                    <javadoc line="337">
                                                
                    </javadoc>
                    <method name="layoutChildren" type="void" line="342">
                        <scope line="343"/>
                    </method>
                </anonymous_class>
                <declaration name="layoutNode2" type="PNode" line="336"/>
                <declaration name="n" type="PNode" line="351"/>
            </method>
            <method name="testAnimateToBoundsWithDuration0IsImmediate" type="void" line="361">
                <declaration name="activity" type="PActivity" line="364"/>
                <declaration name="resultBounds" type="PBounds" line="367"/>
            </method>
            <method name="testAnimateToBoundsHasProperSetup" type="void" line="374">
                <declaration name="activity" type="PInterpolatingActivity" line="376"/>
            </method>
            <method name="testAnimateTransformToBoundsWithDuration0IsImmediate" type="void" line="384">
                <declaration name="activity" type="PActivity" line="386"/>
                <declaration name="transform" type="PAffineTransform" line="390"/>
            </method>
            <method name="testAnimateTransformToBoundsHasProperSetup" type="void" line="394">
                <declaration name="activity" type="PTransformActivity" line="396"/>
                <declaration name="resultTransform" type="double[]" line="403"/>
            </method>
            <method name="testAnimateToPositionScaleRotationWithDuration0IsImmediate" type="void" line="413">
                <declaration name="activity" type="PActivity" line="415"/>
                <declaration name="resultTransform" type="PAffineTransform" line="419"/>
                <declaration name="expected" type="PAffineTransform" line="421"/>
            </method>
            <method name="testAnimateToPositionScaleRotationHasProperSetup" type="void" line="429">
                <declaration name="activity" type="PTransformActivity" line="431"/>
                <declaration name="resultTransform" type="double[]" line="438"/>
                <declaration name="expected" type="PAffineTransform" line="440"/>
            </method>
            <method name="testAnimateToColorWithDuration0IsImmediate" type="void" line="453">
                <declaration name="activity" type="PActivity" line="456"/>
            </method>
            <method name="testAnimateToColorHasProperSetup" type="void" line="463">
                <comment line="471">
                    assertEquals(Color.BLACK, activity.getDestinationColor());                    
                </comment>
                <declaration name="activity" type="PInterpolatingActivity" line="465"/>
            </method>
            <method name="testAddActivityAddsActivityToScheduler" type="void" line="475">
                <declaration name="canvas" type="PCanvas" line="476"/>
                <declaration name="activity" type="PColorActivity" line="480"/>
            </method>
            <method name="buildTestActivity" type="PColorActivity" line="487">
                <anonymous_class line="488">
                    <method name="getColor" type="Color" line="490"/>
                    <method name="setColor" type="void" line="494">
                        <params>
                            <param name="color" type="Color"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="testTarget" type="Target" line="488"/>
                <declaration name="activity" type="PColorActivity" line="499"/>
            </method>
            <method name="testAnimateToTransparencyWithDuration0IsImmediate" type="void" line="503">
                <declaration name="activity" type="PActivity" line="506"/>
            </method>
            <method name="testAnimateToTransparencyHasProperSetup" type="void" line="513">
                <declaration name="activity" type="PInterpolatingActivity" line="514"/>
            </method>
            <method name="testGetClientPropertiesShouldReturnSetEvenIfNonePresent" type="void" line="524">
                <declaration name="properties" type="MutableAttributeSet" line="525"/>
            </method>
            <method name="testGetClientPropertiesShouldReturnSameCollectionAlways" type="void" line="530">
                <declaration name="properties1" type="MutableAttributeSet" line="531"/>
                <declaration name="properties2" type="MutableAttributeSet" line="532"/>
            </method>
            <method name="testGetClientPropertyKeysEnumerationShouldReturnEnumarationOnNewNode" type="void" line="536">
                <declaration name="enumeration" type="Enumeration" line="537"/>
            </method>
            <method name="testGetClientPropertyKeysEnumerationShouldReturnCorrectEnumWhenPropertiesExist" type="void" line="542">
                <declaration name="enumeration" type="Enumeration" line="544"/>
            </method>
            <method name="testGetAttributeReturnsNullWhenMissing" type="void" line="551"/>
            <method name="testGetAttributeReturnsValueWhenPresent" type="void" line="555"/>
            <method name="testGetAttributeReturnsDefaultWhenProvided" type="void" line="560"/>
            <method name="testGetAttributeReturnsValueIfFoundWhenDefaultProvided" type="void" line="564"/>
            <method name="testGetBooleanAttributeReturnsDefaultWhenProvided" type="void" line="569"/>
            <method name="testGetBooleanAttributeReturnsValueIfFoundWhenDefaultProvided" type="void" line="573"/>
            <method name="testGetIntegerAttributeReturnsDefaultWhenProvided" type="void" line="578"/>
            <method name="testGetIntegerAttributeReturnsValueIfFoundWhenDefaultProvided" type="void" line="582"/>
            <method name="testGetDoubleAttributeReturnsDefaultWhenProvided" type="void" line="587"/>
            <method name="testGetDoubleAttributeReturnsValueIfFoundWhenDefaultProvided" type="void" line="591"/>
            <method name="testGetAddClienProperty" type="void" line="596"/>
            <method name="testGetClientPropertyKeysIteratorIsNotNullOnEmptyClientProperties" type="void" line="602">
                <declaration name="iterator" type="Iterator" line="603"/>
            </method>
            <method name="testGetClientPropertyKeysIteratorReturnsValidIteraotOnPropertiesExist" type="void" line="608">
                <declaration name="iterator" type="Iterator" line="611"/>
            </method>
            <method name="testLocalToParentModifiesGivenPoint" type="void" line="620">
                <declaration name="parent" type="PNode" line="621"/>
                <declaration name="point" type="Point2D" line="626"/>
            </method>
            <method name="testLocalToParentDoesWorkWithOrphanChildWhenTransformed" type="void" line="632">
                <declaration name="point" type="Point2D" line="635"/>
            </method>
            <method name="testLocalToParentDoesNothingWithOrphanChildWhenNotTransformed" type="void" line="641">
                <declaration name="point" type="Point2D" line="642"/>
            </method>
            <method name="testParentToLocalModifiesGivenPoint" type="void" line="648">
                <declaration name="parent" type="PNode" line="649"/>
                <declaration name="point" type="Point2D" line="654"/>
            </method>
            <method name="testParentToLocalTransformsOrphanChildWhenTransformed" type="void" line="660">
                <declaration name="aChild" type="PNode" line="661"/>
                <declaration name="point" type="Point2D" line="664"/>
            </method>
            <method name="testGlobalToLocalWorksUnTransformedNodes" type="void" line="670">
                <declaration name="parent" type="PNode" line="671"/>
                <declaration name="point" type="Point2D" line="674"/>
            </method>
            <method name="testRemoveEventListener" type="void" line="680">
                <declaration name="eventListener" type="PBasicInputEventHandler" line="681"/>
            </method>
            <method name="testAddPropertyChangeListener" type="void" line="689"/>
            <method name="testAddPropertyChangeListenerForPropertyName" type="void" line="695"/>
            <method name="testRemovePropertyChangeListener" type="void" line="701"/>
            <method name="testRemovePropertyChangeListenerForPropertyName" type="void" line="708"/>
            <method name="testPropertyChangesCascadeToParent" type="void" line="715">
                <declaration name="aParent" type="PNode" line="716"/>
                <declaration name="aChild" type="PNode" line="719"/>
                <declaration name="propEvent" type="PropertyChangeEvent" line="725"/>
            </method>
            <method name="testStartEndResizeBoundsCanBeCalledWithoutResizes" type="void" line="730"/>
            <method name="testSetXModifiesBounds" type="void" line="735"/>
            <method name="testSetYModifiesBounds" type="void" line="740"/>
            <method name="testSetHeightModifiesBounds" type="void" line="745"/>
            <method name="testSetWidthModifiesBounds" type="void" line="750"/>
            <method name="testResetBoundsDoesSo" type="void" line="755">
                <declaration name="zeroBounds" type="PBounds" line="759"/>
            </method>
            <method name="testCenterBoundsOnPointWorksAsExpected" type="void" line="763">
                <declaration name="expected" type="PBounds" line="767"/>
            </method>
            <method name="testCenterFullBoundsOnPointWorksAsExpected" type="void" line="771">
                <declaration name="aParent" type="PNode" line="772"/>
                <declaration name="expected" type="PBounds" line="776"/>
            </method>
            <method name="buildComplexSquareNode" type="PNode" line="780">
                <declaration name="aParent" type="PNode" line="781"/>
                <declaration name="child1" type="PNode" line="784"/>
                <declaration name="child2" type="PNode" line="788"/>
            </method>
            <method name="testGetUnionOfChildrenBoundsAcceptsNull" type="void" line="795">
                <declaration name="node" type="PNode" line="796"/>
                <declaration name="union" type="PBounds" line="798"/>
            </method>
            <method name="testGetGlobalFullBoundsIsSameWhenNoTransforms" type="void" line="804">
                <declaration name="parent" type="PNode" line="805"/>
                <declaration name="child" type="PNode" line="806"/>
                <declaration name="grandChild" type="PNode" line="808"/>
                <declaration name="globalFullBounds" type="PBounds" line="813"/>
            </method>
            <method name="testChildBoundsStayVolatile" type="void" line="819"/>
            <method name="testRotatingChangesRotation" type="void" line="824"/>
            <method name="testSetRotationIsNotCummulative" type="void" line="829"/>
            <method name="testRotateAboutPointDoesNotAffectBounds" type="void" line="835">
                <comment line="837">
                    It&apos;s top center point                    
                </comment>
            </method>
            <method name="testRotateAboutPointVersion1AffectsTransformAsItShould" type="void" line="841">
                <comment line="843">
                    It&apos;s top center point                    
                </comment>
                <declaration name="expectedTransform" type="PAffineTransform" line="845"/>
            </method>
            <method name="testRotateAboutPointVersion2AffectsTransformAsItShould" type="void" line="852">
                <comment line="854">
                    It&apos;s top                    
                </comment>
                <comment line="855">
                    center                    
                </comment>
                <comment line="856">
                    point                    
                </comment>
                <declaration name="expectedTransform" type="PAffineTransform" line="858"/>
            </method>
            <method name="testScaleAboutPointWorksAsExpected" type="void" line="865">
                <declaration name="expectedTransform" type="PAffineTransform" line="868"/>
            </method>
            <method name="testRotateInPlaneLeavesFullBoundsUntouched" type="void" line="875">
                <declaration name="boundsBefore" type="PBounds" line="877"/>
            </method>
            <method name="testSetGlobalScaleTakesParentsScaleIntoAccount" type="void" line="883">
                <declaration name="aParent" type="PNode" line="884"/>
                <declaration name="aChild" type="PNode" line="887"/>
            </method>
            <method name="testOffsetDoesNotTakeBoundsIntoAccount" type="void" line="895"/>
            <method name="testTransformByIsCummulative" type="void" line="902"/>
            <method name="testLerp" type="void" line="909"/>
            <method name="testAnimateToRelativePositionResultsInProperTransform" type="void" line="915">
                <declaration name="canvas" type="PCanvas" line="916"/>
                <declaration name="A" type="PNode" line="917"/>
                <declaration name="B" type="PNode" line="920"/>
                <declaration name="srcPt" type="Point2D" line="925"/>
                <declaration name="destPt" type="Point2D" line="926"/>
                <declaration name="expectedTransform" type="PAffineTransform" line="929"/>
            </method>
            <method name="testGetInverseTransformWorks" type="void" line="935">
                <declaration name="expectedTransform" type="PAffineTransform" line="939"/>
            </method>
            <method name="testGetInverseTransformThrowsExceptionWhenTransformIsNotInvertible" type="void" line="945">
                <comment line="953">
                    expected                    
                </comment>
                <scope line="948"/>
                <scope line="952"/>
            </method>
            <method name="testSetVisibleIsRespectedOnPaint" type="void" line="957">
                <declaration name="paintCounts" type="int[]" line="958"/>
                <anonymous_class line="960">
                    <declaration name="serialVersionUID" type="long" line="961"/>
                    <javadoc line="961">
                                                
                    </javadoc>
                    <method name="paint" type="void" line="966">
                        <params>
                            <param name="pc" type="PPaintContext"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="node" type="PNode" line="960"/>
                <declaration name="canvas" type="PCanvas" line="973"/>
                <declaration name="img" type="BufferedImage" line="975"/>
                <declaration name="g" type="Graphics" line="976"/>
            </method>
            <method name="testSetTransparency1MeansInvisible" type="void" line="993">
                <declaration name="node" type="PNode" line="994"/>
                <declaration name="canvas" type="PCanvas" line="999"/>
                <declaration name="img" type="BufferedImage" line="1001"/>
                <declaration name="g" type="Graphics" line="1002"/>
            </method>
            <method name="buildCanvasContainingNode" type="PCanvas" line="1014">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <declaration name="canvas" type="PCanvas" line="1015"/>
            </method>
            <method name="testPaintColourIsRespectedOnPaint" type="void" line="1021">
                <declaration name="img" type="BufferedImage" line="1022"/>
                <declaration name="g" type="Graphics" line="1023"/>
                <declaration name="canvas" type="PCanvas" line="1028"/>
            </method>
            <method name="testToImageReturnsValidImage" type="void" line="1034">
                <comment line="1038">
                    Really don&apos;t like casting here, but... without changing the                    
                </comment>
                <comment line="1039">
                    interface, I don&apos;t see a choice                    
                </comment>
                <declaration name="img" type="BufferedImage" line="1040"/>
            </method>
            <method name="testToImageUsesFullBoundsWhenConvertingImage" type="void" line="1050">
                <comment line="1068">
                    This line fails if PNode.toImage uses getWidth() rather than getFullBounds().getWidth()                    
                </comment>
                <declaration name="child1" type="PNode" line="1052"/>
                <declaration name="child2" type="PNode" line="1057"/>
                <declaration name="image" type="BufferedImage" line="1062"/>
            </method>
            <method name="testToImageWillAcceptBackgroundPaint" type="void" line="1072">
                <declaration name="img" type="BufferedImage" line="1075"/>
            </method>
            <method name="testToImageResultsInDesiredSizeImage" type="void" line="1079">
                <declaration name="img" type="BufferedImage" line="1082"/>
            </method>
            <method name="testToImageWithBackgroundColorGivenReturnsValidImage" type="void" line="1087">
                <declaration name="img" type="BufferedImage" line="1091"/>
            </method>
            <method name="testToImageScalesNodeAsBigAsCanBe" type="void" line="1096">
                <declaration name="img" type="BufferedImage" line="1100"/>
            </method>
            <method name="testToImageScalesAccordingToExactFitStrategy" type="void" line="1110">
                <declaration name="img" type="BufferedImage" line="1114"/>
            </method>
            <method name="testToImageScalesAccordingToAspectCoverStrategy" type="void" line="1124">
                <declaration name="blueSquare" type="PNode" line="1128"/>
                <declaration name="greenSquare" type="PNode" line="1133"/>
                <declaration name="img" type="BufferedImage" line="1138"/>
            </method>
            <method name="testGetPickableShouldDefaultToTrue" type="void" line="1157"/>
            <method name="testSetPickableFiresPropertyChange" type="void" line="1161"/>
            <method name="testChildrenShouldBePickableByDefault" type="void" line="1167"/>
            <method name="testSetChildrenPickableFiresPropertyChange" type="void" line="1171"/>
            <method name="testByDefaultNodesShouldNotPickThemselvesBeforeTheirChildren" type="void" line="1177">
                <declaration name="canvas" type="PCanvas" line="1178"/>
                <declaration name="pickPath" type="PPickPath" line="1179"/>
            </method>
            <method name="testfullPickReturnsTrueWhenOverlapsWithChildNode" type="void" line="1183">
                <declaration name="canvas" type="PCanvas" line="1184"/>
                <declaration name="child" type="PNode" line="1187"/>
                <declaration name="pickPath" type="PPickPath" line="1191"/>
            </method>
            <method name="testfullPickReturnsFalseWhenNotOverlappingWithChildNode" type="void" line="1196">
                <declaration name="canvas" type="PCanvas" line="1197"/>
                <declaration name="child" type="PNode" line="1200"/>
                <declaration name="pickPath" type="PPickPath" line="1204"/>
            </method>
            <method name="testAddChildrenAddsAllChildren" type="void" line="1209">
                <declaration name="newChildren" type="Collection" line="1210"/>
            </method>
            <method name="testRemoveChildrenWorks" type="void" line="1220">
                <declaration name="newChildren" type="Collection" line="1221"/>
            </method>
            <method name="testGetAllNodesUnrollsTheNodeGraph" type="void" line="1232">
                <declaration name="newChildren" type="Collection" line="1233"/>
            </method>
            <method name="testRemoveAllChildrenDoesntCrashWhenNoChidlren" type="void" line="1243">
                <comment line="1246">
                    And now for the case when there once was a child                    
                </comment>
            </method>
            <method name="testRemoveFromParentDoesSo" type="void" line="1252">
                <declaration name="parent" type="PNode" line="1253"/>
            </method>
            <method name="testReplaceWithSwapsParents" type="void" line="1261">
                <declaration name="parent" type="PNode" line="1262"/>
                <declaration name="newNode" type="PNode" line="1265"/>
            </method>
            <method name="testGetChildrenIteratorReturnsIteratorEvenWithNoChildren" type="void" line="1272">
                <declaration name="iterator" type="ListIterator" line="1273"/>
            </method>
            <method name="testGetChildrenIteratorReturnsValidIteratorWhenHasChildren" type="void" line="1278">
                <declaration name="child" type="PNode" line="1279"/>
                <declaration name="iterator" type="ListIterator" line="1282"/>
            </method>
            <method name="testGetAllNodesDoesntIgnoreFilter" type="void" line="1289">
                <anonymous_class line="1290">
                    <method name="accept" type="boolean" line="1292">
                        <params>
                            <param name="aNode" type="PNode"/>
                        </params>
                    </method>
                    <method name="acceptChildrenOf" type="boolean" line="1296">
                        <params>
                            <param name="aNode" type="PNode"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="nullFilter" type="PNodeFilter" line="1290"/>
                <declaration name="nodes" type="Collection" line="1304"/>
            </method>
            <method name="testAncestryMethods" type="void" line="1309">
                <declaration name="child" type="PNode" line="1310"/>
                <declaration name="grandChild" type="PNode" line="1313"/>
                <declaration name="unrelated" type="PNode" line="1316"/>
            </method>
            <method name="testMoveToBackMovesNodeToBeFirstChild" type="void" line="1327">
                <declaration name="parent" type="PNode" line="1328"/>
            </method>
            <method name="testMoveToFrontMovesNodeToBeLastChild" type="void" line="1336">
                <declaration name="parent" type="PNode" line="1337"/>
            </method>
            <method name="testMoveInBackOfMovesNodeToBeforeSibling" type="void" line="1345">
                <declaration name="parent" type="PNode" line="1346"/>
                <declaration name="sibling" type="PNode" line="1347"/>
            </method>
            <method name="testMoveInFrontOfMovesNodeToAfterSibling" type="void" line="1358">
                <declaration name="parent" type="PNode" line="1359"/>
                <declaration name="sibling" type="PNode" line="1360"/>
            </method>
            <method name="testMoveInFrontOfDoesNothingIfNotSibling" type="void" line="1371">
                <declaration name="parent" type="PNode" line="1372"/>
                <declaration name="stranger" type="PNode" line="1373"/>
            </method>
            <method name="testMoveInBackOfDoesNothingIfNotSibling" type="void" line="1383">
                <declaration name="parent" type="PNode" line="1384"/>
                <declaration name="stranger" type="PNode" line="1385"/>
            </method>
            <method name="testIsDescendentOfRootHandlesOrphans" type="void" line="1395">
                <declaration name="orphan" type="PNode" line="1396"/>
            </method>
            <method name="testIsDescendentOfRootHandlesDescendentsOfRoot" type="void" line="1403">
                <declaration name="canvas" type="PCanvas" line="1404"/>
            </method>
            <method name="testGetGlobalRationTakesParentsIntoAccount" type="void" line="1410">
                <declaration name="parent" type="PNode" line="1411"/>
            </method>
            <method name="testSetGlobalRationTakesParentsIntoAccount" type="void" line="1420">
                <declaration name="parent" type="PNode" line="1421"/>
            </method>
            <method name="testSetGlobalRationWorksWhenNoParent" type="void" line="1430"/>
            <method name="testSetOccludedPersistes" type="void" line="1436"/>
            <method name="testHiddenNodesAreNotPickable" type="void" line="1441">
                <declaration name="canvas" type="PCanvas" line="1442"/>
                <declaration name="node1" type="PNode" line="1445"/>
                <declaration name="node2" type="PNode" line="1450"/>
                <declaration name="layer2" type="PLayer" line="1453"/>
                <declaration name="path" type="PPickPath" line="1458"/>
            </method>
        </class>
    </source>