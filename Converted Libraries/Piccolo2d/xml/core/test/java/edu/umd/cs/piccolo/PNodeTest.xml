<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo">
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ListIterator"/>
        <import package="javax.swing.text.MutableAttributeSet"/>
        <import package="junit.framework.TestCase"/>
        <import package="edu.umd.cs.piccolo.activities.PActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PColorActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PInterpolatingActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PTransformActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PColorActivity.Target"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransformException"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PNodeFilter"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PNodeTest" line="33">
            <extends class="TestCase"/>
            <javadoc line="33">
                Unit test for PNode.                
            </javadoc>
            <declaration name="mockListener" type="MockPropertyChangeListener" line="37"/>
            <declaration name="node" type="PNode" line="38"/>
            <method name="PNodeTest" type="constructor" line="39">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="setUp" type="void" line="42"/>
            <method name="testCenterBaseBoundsOnPoint" type="void" line="46"/>
            <method name="testClientProperties" type="void" line="52">
                <declaration name="n" type="PNode" line="53"/>
            </method>
            <method name="testFullScale" type="void" line="61">
                <declaration name="aParent" type="PNode" line="62"/>
                <declaration name="aNode" type="PNode" line="63"/>
            </method>
            <method name="testReparent" type="void" line="73">
                <declaration name="aParent" type="PNode" line="74"/>
                <declaration name="aNode" type="PNode" line="75"/>
            </method>
            <method name="testFindIntersectingNodes" type="void" line="88">
                <declaration name="n" type="PNode" line="89"/>
                <declaration name="c" type="PNode" line="90"/>
                <declaration name="found" type="ArrayList" line="95"/>
                <declaration name="rect2d" type="Rectangle2D" line="96"/>
                <declaration name="bounds" type="PBounds" line="101"/>
            </method>
            <method name="testRemoveNonexistantListener" type="void" line="106">
                <declaration name="n" type="PNode" line="107"/>
            </method>
            <method name="testAddChildHandleDuplicates" type="void" line="110">
                <declaration name="parent" type="PNode" line="111"/>
            </method>
            <method name="testAddChildCanSpecifyAnIndexAndDoesntReplace" type="void" line="117">
                <declaration name="parent" type="PNode" line="118"/>
            </method>
            <method name="testAddChildWithIndexMovesChildAround" type="void" line="124">
                <declaration name="parent" type="PNode" line="125"/>
            </method>
            <method name="testCloneCopiesAllProperties" type="void" line="136">
                <declaration name="clonedNode" type="PNode" line="145"/>
            </method>
            <method name="testCloneCopiesTransforms" type="void" line="157">
                <declaration name="clonedNode" type="PNode" line="161"/>
            </method>
            <method name="testCloneDoesNotCopyEventListeners" type="void" line="167">
                <anonymous_class line="168"/>
                <declaration name="clonedNode" type="PNode" line="171"/>
            </method>
            <method name="testCloneClonesChildrenAswell" type="void" line="174">
                <declaration name="child" type="PNode" line="175"/>
                <declaration name="clonedNode" type="PNode" line="177"/>
            </method>
            <method name="testCloneDoesNotCopyParent" type="void" line="181">
                <declaration name="child" type="PNode" line="182"/>
                <declaration name="clonedChild" type="PNode" line="184"/>
            </method>
            <method name="testLocalToGlobal" type="void" line="187">
                <declaration name="aParent" type="PNode" line="188"/>
                <declaration name="aChild" type="PNode" line="189"/>
                <declaration name="bnds" type="PBounds" line="192"/>
                <declaration name="dim" type="PDimension" line="205"/>
            </method>
            <method name="testToString" type="void" line="213">
                <declaration name="a" type="PNode" line="214"/>
                <declaration name="b" type="PNode" line="215"/>
                <declaration name="c" type="PNode" line="216"/>
                <declaration name="d" type="PNode" line="217"/>
                <declaration name="e" type="PNode" line="218"/>
                <declaration name="f" type="PNode" line="219"/>
            </method>
            <method name="testRecursiveLayout" type="void" line="229">
                <anonymous_class line="230">
                    <declaration name="serialVersionUID" type="long" line="231"/>
                    <javadoc line="231">
                                                
                    </javadoc>
                    <method name="layoutChildren" type="void" line="234">
                        <scope line="235"/>
                    </method>
                </anonymous_class>
                <declaration name="layoutNode1" type="PNode" line="230"/>
                <anonymous_class line="241">
                    <declaration name="serialVersionUID" type="long" line="242"/>
                    <javadoc line="242">
                                                
                    </javadoc>
                    <method name="layoutChildren" type="void" line="245">
                        <scope line="246"/>
                    </method>
                </anonymous_class>
                <declaration name="layoutNode2" type="PNode" line="241"/>
                <declaration name="n" type="PNode" line="253"/>
            </method>
            <method name="testAnimateToBoundsWithDuration0IsImmediate" type="void" line="259">
                <declaration name="activity" type="PActivity" line="261"/>
                <declaration name="resultBounds" type="PBounds" line="263"/>
            </method>
            <method name="testAnimateToBoundsHasProperSetup" type="void" line="269">
                <declaration name="activity" type="PInterpolatingActivity" line="271"/>
            </method>
            <method name="testAnimateTransformToBoundsWithDuration0IsImmediate" type="void" line="277">
                <declaration name="activity" type="PActivity" line="279"/>
                <declaration name="transform" type="PAffineTransform" line="281"/>
            </method>
            <method name="testAnimateTransformToBoundsHasProperSetup" type="void" line="284">
                <declaration name="activity" type="PTransformActivity" line="286"/>
                <declaration name="resultTransform" type="double[]" line="291"/>
            </method>
            <method name="testAnimateToPositionScaleRotationWithDuration0IsImmediate" type="void" line="299">
                <declaration name="activity" type="PActivity" line="301"/>
                <declaration name="resultTransform" type="PAffineTransform" line="303"/>
                <declaration name="expected" type="PAffineTransform" line="304"/>
            </method>
            <method name="testAnimateToPositionScaleRotationHasProperSetup" type="void" line="310">
                <declaration name="activity" type="PTransformActivity" line="312"/>
                <declaration name="resultTransform" type="double[]" line="317"/>
                <declaration name="expected" type="PAffineTransform" line="318"/>
            </method>
            <method name="testAnimateToColorWithDuration0IsImmediate" type="void" line="329">
                <declaration name="activity" type="PActivity" line="331"/>
            </method>
            <method name="testAnimateToColorHasProperSetup" type="void" line="335">
                <declaration name="activity" type="PInterpolatingActivity" line="337"/>
            </method>
            <method name="testAddActivityAddsActivityToScheduler" type="void" line="344">
                <declaration name="canvas" type="PCanvas" line="345"/>
                <declaration name="activity" type="PColorActivity" line="348"/>
            </method>
            <method name="buildTestActivity" type="PColorActivity" line="352">
                <anonymous_class line="353">
                    <method name="getColor" type="Color" line="354"/>
                    <method name="setColor" type="void" line="357">
                        <params>
                            <param name="color" type="Color"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="testTarget" type="Target" line="353"/>
                <declaration name="activity" type="PColorActivity" line="361"/>
            </method>
            <method name="testAnimateToTransparencyWithDuration0IsImmediate" type="void" line="364">
                <declaration name="activity" type="PActivity" line="366"/>
            </method>
            <method name="testAnimateToTransparencyHasProperSetup" type="void" line="370">
                <declaration name="activity" type="PInterpolatingActivity" line="371"/>
            </method>
            <method name="testGetClientPropertiesShouldReturnSetEvenIfNonePresent" type="void" line="378">
                <declaration name="properties" type="MutableAttributeSet" line="379"/>
            </method>
            <method name="testGetClientPropertiesShouldReturnSameCollectionAlways" type="void" line="383">
                <declaration name="properties1" type="MutableAttributeSet" line="384"/>
                <declaration name="properties2" type="MutableAttributeSet" line="385"/>
            </method>
            <method name="testGetClientPropertyKeysEnumerationShouldReturnEnumarationOnNewNode" type="void" line="388">
                <declaration name="enumeration" type="Enumeration" line="389"/>
            </method>
            <method name="testGetClientPropertyKeysEnumerationShouldReturnCorrectEnumWhenPropertiesExist" type="void" line="393">
                <declaration name="enumeration" type="Enumeration" line="395"/>
            </method>
            <method name="testGetAttributeReturnsNullWhenMissing" type="void" line="401"/>
            <method name="testGetAttributeReturnsValueWhenPresent" type="void" line="404"/>
            <method name="testGetAttributeReturnsDefaultWhenProvided" type="void" line="408"/>
            <method name="testGetAttributeReturnsValueIfFoundWhenDefaultProvided" type="void" line="411"/>
            <method name="testGetBooleanAttributeReturnsDefaultWhenProvided" type="void" line="415"/>
            <method name="testGetBooleanAttributeReturnsValueIfFoundWhenDefaultProvided" type="void" line="418"/>
            <method name="testGetIntegerAttributeReturnsDefaultWhenProvided" type="void" line="422"/>
            <method name="testGetIntegerAttributeReturnsValueIfFoundWhenDefaultProvided" type="void" line="425"/>
            <method name="testGetDoubleAttributeReturnsDefaultWhenProvided" type="void" line="429"/>
            <method name="testGetDoubleAttributeReturnsValueIfFoundWhenDefaultProvided" type="void" line="432"/>
            <method name="testGetAddClienProperty" type="void" line="436"/>
            <method name="testGetClientPropertyKeysIteratorIsNotNullOnEmptyClientProperties" type="void" line="441">
                <declaration name="iterator" type="Iterator" line="442"/>
            </method>
            <method name="testGetClientPropertyKeysIteratorReturnsValidIteraotOnPropertiesExist" type="void" line="446">
                <declaration name="iterator" type="Iterator" line="449"/>
            </method>
            <method name="testLocalToParentModifiesGivenPoint" type="void" line="457">
                <declaration name="parent" type="PNode" line="458"/>
                <declaration name="point" type="Point2D" line="461"/>
            </method>
            <method name="testLocalToParentDoesWorkWithOrphanChildWhenTransformed" type="void" line="466">
                <declaration name="point" type="Point2D" line="468"/>
            </method>
            <method name="testLocalToParentDoesNothingWithOrphanChildWhenNotTransformed" type="void" line="473">
                <declaration name="point" type="Point2D" line="474"/>
            </method>
            <method name="testParentToLocalModifiesGivenPoint" type="void" line="479">
                <declaration name="parent" type="PNode" line="480"/>
                <declaration name="point" type="Point2D" line="483"/>
            </method>
            <method name="testParentToLocalTransformsOrphanChildWhenTransformed" type="void" line="488">
                <declaration name="aChild" type="PNode" line="489"/>
                <declaration name="point" type="Point2D" line="491"/>
            </method>
            <method name="testGlobalToLocalWorksUnTransformedNodes" type="void" line="496">
                <declaration name="parent" type="PNode" line="497"/>
                <declaration name="point" type="Point2D" line="499"/>
            </method>
            <method name="testRemoveEventListener" type="void" line="504">
                <declaration name="eventListener" type="PBasicInputEventHandler" line="505"/>
            </method>
            <method name="testAddPropertyChangeListener" type="void" line="511"/>
            <method name="testAddPropertyChangeListenerForPropertyName" type="void" line="516"/>
            <method name="testRemovePropertyChangeListener" type="void" line="521"/>
            <method name="testRemovePropertyChangeListenerForPropertyName" type="void" line="527"/>
            <method name="testPropertyChangesCascadeToParent" type="void" line="533">
                <declaration name="aParent" type="PNode" line="534"/>
                <declaration name="aChild" type="PNode" line="536"/>
                <declaration name="propEvent" type="PropertyChangeEvent" line="541"/>
            </method>
            <method name="testStartEndResizeBoundsCanBeCalledWithoutResizes" type="void" line="545"/>
            <method name="testSetXModifiesBounds" type="void" line="549"/>
            <method name="testSetYModifiesBounds" type="void" line="553"/>
            <method name="testSetHeightModifiesBounds" type="void" line="557"/>
            <method name="testSetWidthModifiesBounds" type="void" line="561"/>
            <method name="testResetBoundsDoesSo" type="void" line="565">
                <declaration name="zeroBounds" type="PBounds" line="568"/>
            </method>
            <method name="testCenterBoundsOnPointWorksAsExpected" type="void" line="571">
                <declaration name="expected" type="PBounds" line="574"/>
            </method>
            <method name="testCenterFullBoundsOnPointWorksAsExpected" type="void" line="577">
                <declaration name="aParent" type="PNode" line="578"/>
                <declaration name="expected" type="PBounds" line="580"/>
            </method>
            <method name="buildComplexSquareNode" type="PNode" line="583">
                <declaration name="aParent" type="PNode" line="584"/>
                <declaration name="child1" type="PNode" line="586"/>
                <declaration name="child2" type="PNode" line="589"/>
            </method>
            <method name="testGetUnionOfChildrenBoundsAcceptsNull" type="void" line="594">
                <declaration name="node" type="PNode" line="595"/>
                <declaration name="union" type="PBounds" line="596"/>
            </method>
            <method name="testGetGlobalFullBoundsIsSameWhenNoTransforms" type="void" line="600">
                <declaration name="parent" type="PNode" line="601"/>
                <declaration name="child" type="PNode" line="602"/>
                <declaration name="grandChild" type="PNode" line="604"/>
                <declaration name="globalFullBounds" type="PBounds" line="608"/>
            </method>
            <method name="testChildBoundsStayVolatile" type="void" line="612"/>
            <method name="testRotatingChangesRotation" type="void" line="616"/>
            <method name="testSetRotationIsNotCummulative" type="void" line="620"/>
            <method name="testRotateAboutPointDoesNotAffectBounds" type="void" line="625"/>
            <method name="testRotateAboutPointVersion1AffectsTransformAsItShould" type="void" line="630">
                <declaration name="expectedTransform" type="PAffineTransform" line="633"/>
            </method>
            <method name="testRotateAboutPointVersion2AffectsTransformAsItShould" type="void" line="638">
                <declaration name="expectedTransform" type="PAffineTransform" line="641"/>
            </method>
            <method name="testScaleAboutPointWorksAsExpected" type="void" line="646">
                <declaration name="expectedTransform" type="PAffineTransform" line="649"/>
            </method>
            <method name="testRotateInPlaneLeavesFullBoundsUntouched" type="void" line="654">
                <declaration name="boundsBefore" type="PBounds" line="656"/>
            </method>
            <method name="testSetGlobalScaleTakesParentsScaleIntoAccount" type="void" line="660">
                <declaration name="aParent" type="PNode" line="661"/>
                <declaration name="aChild" type="PNode" line="663"/>
            </method>
            <method name="testOffsetDoesNotTakeBoundsIntoAccount" type="void" line="668"/>
            <method name="testTransformByIsCummulative" type="void" line="674"/>
            <method name="testLerp" type="void" line="679"/>
            <method name="testAnimateToRelativePositionResultsInProperTransform" type="void" line="684">
                <declaration name="canvas" type="PCanvas" line="685"/>
                <declaration name="A" type="PNode" line="686"/>
                <declaration name="B" type="PNode" line="689"/>
                <declaration name="srcPt" type="Point2D" line="693"/>
                <declaration name="destPt" type="Point2D" line="694"/>
                <declaration name="expectedTransform" type="PAffineTransform" line="696"/>
            </method>
            <method name="testGetInverseTransformWorks" type="void" line="700">
                <declaration name="expectedTransform" type="PAffineTransform" line="703"/>
            </method>
            <method name="testGetInverseTransformThrowsExceptionWhenTransformIsNotInvertible" type="void" line="708">
                <scope line="710"/>
                <scope line="714"/>
            </method>
            <method name="testSetVisibleIsRespectedOnPaint" type="void" line="717">
                <declaration name="paintCounts" type="int[]" line="718"/>
                <anonymous_class line="719">
                    <declaration name="serialVersionUID" type="long" line="720"/>
                    <javadoc line="720">
                                                
                    </javadoc>
                    <method name="paint" type="void" line="723">
                        <params>
                            <param name="pc" type="PPaintContext"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="node" type="PNode" line="719"/>
                <declaration name="canvas" type="PCanvas" line="730"/>
                <declaration name="img" type="BufferedImage" line="731"/>
                <declaration name="g" type="Graphics" line="732"/>
            </method>
            <method name="testSetTransparency1MeansInvisible" type="void" line="744">
                <declaration name="node" type="PNode" line="745"/>
                <declaration name="canvas" type="PCanvas" line="749"/>
                <declaration name="img" type="BufferedImage" line="750"/>
                <declaration name="g" type="Graphics" line="751"/>
            </method>
            <method name="buildCanvasContainingNode" type="PCanvas" line="759">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <declaration name="canvas" type="PCanvas" line="760"/>
            </method>
            <method name="testPaintColourIsRespectedOnPaint" type="void" line="765">
                <declaration name="img" type="BufferedImage" line="766"/>
                <declaration name="g" type="Graphics" line="767"/>
                <declaration name="canvas" type="PCanvas" line="770"/>
            </method>
            <method name="testToImageReturnsValidImage" type="void" line="774">
                <declaration name="img" type="BufferedImage" line="777"/>
            </method>
            <method name="testToImageUsesFullBoundsWhenConvertingImage" type="void" line="785">
                <declaration name="child1" type="PNode" line="787"/>
                <declaration name="child2" type="PNode" line="791"/>
                <declaration name="image" type="BufferedImage" line="795"/>
            </method>
            <method name="testToImageWillAcceptBackgroundPaint" type="void" line="802">
                <declaration name="img" type="BufferedImage" line="804"/>
            </method>
            <method name="testToImageResultsInDesiredSizeImage" type="void" line="807">
                <declaration name="img" type="BufferedImage" line="809"/>
            </method>
            <method name="testToImageWithBackgroundColorGivenReturnsValidImage" type="void" line="813">
                <declaration name="img" type="BufferedImage" line="816"/>
            </method>
            <method name="testToImageScalesNodeAsBigAsCanBe" type="void" line="820">
                <declaration name="img" type="BufferedImage" line="823"/>
            </method>
            <method name="testToImageScalesAccordingToExactFitStrategy" type="void" line="831">
                <declaration name="img" type="BufferedImage" line="834"/>
            </method>
            <method name="testToImageScalesAccordingToAspectCoverStrategy" type="void" line="840">
                <declaration name="blueSquare" type="PNode" line="843"/>
                <declaration name="greenSquare" type="PNode" line="847"/>
                <declaration name="img" type="BufferedImage" line="851"/>
            </method>
            <method name="testGetPickableShouldDefaultToTrue" type="void" line="865"/>
            <method name="testSetPickableFiresPropertyChange" type="void" line="868"/>
            <method name="testChildrenShouldBePickableByDefault" type="void" line="873"/>
            <method name="testSetChildrenPickableFiresPropertyChange" type="void" line="876"/>
            <method name="testByDefaultNodesShouldNotPickThemselvesBeforeTheirChildren" type="void" line="881">
                <declaration name="canvas" type="PCanvas" line="882"/>
                <declaration name="pickPath" type="PPickPath" line="883"/>
            </method>
            <method name="testfullPickReturnsTrueWhenOverlapsWithChildNode" type="void" line="886">
                <declaration name="canvas" type="PCanvas" line="887"/>
                <declaration name="child" type="PNode" line="889"/>
                <declaration name="pickPath" type="PPickPath" line="892"/>
            </method>
            <method name="testfullPickReturnsFalseWhenNotOverlappingWithChildNode" type="void" line="896">
                <declaration name="canvas" type="PCanvas" line="897"/>
                <declaration name="child" type="PNode" line="899"/>
                <declaration name="pickPath" type="PPickPath" line="902"/>
            </method>
            <method name="testAddChildrenAddsAllChildren" type="void" line="906">
                <declaration name="newChildren" type="Collection" line="907"/>
            </method>
            <method name="testRemoveChildrenWorks" type="void" line="914">
                <declaration name="newChildren" type="Collection" line="915"/>
            </method>
            <method name="testGetAllNodesUnrollsTheNodeGraph" type="void" line="924">
                <declaration name="newChildren" type="Collection" line="925"/>
            </method>
            <method name="testRemoveAllChildrenDoesntCrashWhenNoChidlren" type="void" line="932"/>
            <method name="testRemoveFromParentDoesSo" type="void" line="938">
                <declaration name="parent" type="PNode" line="939"/>
            </method>
            <method name="testReplaceWithSwapsParents" type="void" line="944">
                <declaration name="parent" type="PNode" line="945"/>
                <declaration name="newNode" type="PNode" line="947"/>
            </method>
            <method name="testGetChildrenIteratorReturnsIteratorEvenWithNoChildren" type="void" line="952">
                <declaration name="iterator" type="ListIterator" line="953"/>
            </method>
            <method name="testGetChildrenIteratorReturnsValidIteratorWhenHasChildren" type="void" line="957">
                <declaration name="child" type="PNode" line="958"/>
                <declaration name="iterator" type="ListIterator" line="960"/>
            </method>
            <method name="testGetAllNodesDoesntIgnoreFilter" type="void" line="966">
                <anonymous_class line="967">
                    <method name="accept" type="boolean" line="968">
                        <params>
                            <param name="aNode" type="PNode"/>
                        </params>
                    </method>
                    <method name="acceptChildrenOf" type="boolean" line="971">
                        <params>
                            <param name="aNode" type="PNode"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="nullFilter" type="PNodeFilter" line="967"/>
                <declaration name="nodes" type="Collection" line="979"/>
            </method>
            <method name="testAncestryMethods" type="void" line="983">
                <declaration name="child" type="PNode" line="984"/>
                <declaration name="grandChild" type="PNode" line="986"/>
                <declaration name="unrelated" type="PNode" line="988"/>
            </method>
            <method name="testMoveToBackMovesNodeToBeFirstChild" type="void" line="996">
                <declaration name="parent" type="PNode" line="997"/>
            </method>
            <method name="testMoveToFrontMovesNodeToBeLastChild" type="void" line="1004">
                <declaration name="parent" type="PNode" line="1005"/>
            </method>
            <method name="testMoveInBackOfMovesNodeToBeforeSibling" type="void" line="1012">
                <declaration name="parent" type="PNode" line="1013"/>
                <declaration name="sibling" type="PNode" line="1014"/>
            </method>
            <method name="testMoveInFrontOfMovesNodeToAfterSibling" type="void" line="1022">
                <declaration name="parent" type="PNode" line="1023"/>
                <declaration name="sibling" type="PNode" line="1024"/>
            </method>
            <method name="testMoveInFrontOfDoesNothingIfNotSibling" type="void" line="1032">
                <declaration name="parent" type="PNode" line="1033"/>
                <declaration name="stranger" type="PNode" line="1034"/>
            </method>
            <method name="testMoveInBackOfDoesNothingIfNotSibling" type="void" line="1041">
                <declaration name="parent" type="PNode" line="1042"/>
                <declaration name="stranger" type="PNode" line="1043"/>
            </method>
            <method name="testIsDescendentOfRootHandlesOrphans" type="void" line="1050">
                <declaration name="orphan" type="PNode" line="1051"/>
            </method>
            <method name="testIsDescendentOfRootHandlesDescendentsOfRoot" type="void" line="1056">
                <declaration name="canvas" type="PCanvas" line="1057"/>
            </method>
            <method name="testGetGlobalRationTakesParentsIntoAccount" type="void" line="1061">
                <declaration name="parent" type="PNode" line="1062"/>
            </method>
            <method name="testSetGlobalRationTakesParentsIntoAccount" type="void" line="1068">
                <declaration name="parent" type="PNode" line="1069"/>
            </method>
            <method name="testSetGlobalRationWorksWhenNoParent" type="void" line="1075"/>
            <method name="testSetOccludedPersistes" type="void" line="1079"/>
            <method name="testHiddenNodesAreNotPickable" type="void" line="1083">
                <declaration name="canvas" type="PCanvas" line="1084"/>
                <declaration name="node1" type="PNode" line="1087"/>
                <declaration name="node2" type="PNode" line="1091"/>
                <declaration name="layer2" type="PLayer" line="1093"/>
                <declaration name="path" type="PPickPath" line="1097"/>
            </method>
        </class>
    </source>