<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo">
        <import package="java.awt.event.ActionListener"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.swing.Timer"/>
        <import package="edu.umd.cs.piccolo.activities.PActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PActivityScheduler"/>
        <import package="edu.umd.cs.piccolo.util.PDebug"/>
        <import package="edu.umd.cs.piccolo.util.PNodeFilter"/>
        <class name="PRoot" line="44">
            <extends class="PNode"/>
            <comment line="138">
                ****************************************************************
                 Activities
                 ****************************************************************                
            </comment>
            <comment line="299">
                ****************************************************************
                 UI Loop - Methods for running the main UI loop of Piccolo2D.
                 ****************************************************************                
            </comment>
            <javadoc line="44">
                &lt;b&gt;PRoot&lt;/b&gt; serves as the top node in Piccolo2D&apos;s runtime structure. The
                  PRoot responsible for running the main UI loop that processes input from
                  activities and external events.
                  &lt;P&gt;                
                <version>
                    1.1                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <javadoc line="55">
                Allows for future serialization code to understand versioned binary
                  formats.                
            </javadoc>
            <declaration name="PROPERTY_INPUT_SOURCES" type="String" line="61"/>
            <javadoc line="61">
                The property name that identifies a change in the set of this root&apos;s
                  input sources (see {@link InputSource InputSource}). In any property
                  change event the new value will be a reference to the list of this root&apos;s
                  input sources, but old value will always be null.                
            </javadoc>
            <declaration name="PROPERTY_CODE_INPUT_SOURCES" type="int" line="69"/>
            <javadoc line="69">
                The property code that identifies a change in the set of this root&apos;s
                  input sources (see {@link InputSource InputSource}). In any property
                  change event the new value will be a reference to the list of this root&apos;s
                  input sources, but old value will always be null.                
            </javadoc>
            <declaration name="PROPERTY_INTERACTING_CHANGED" type="String" line="77"/>
            <javadoc line="77">
                The property name that identifies a change in this node&apos;s interacting
                  state.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="PROPERTY_CODE_INTERACTING_CHANGED" type="int" line="85"/>
            <javadoc line="85">
                The property code that identifies a change in this node&apos;s interacting
                  state.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="processingInputs" type="boolean" line="93"/>
            <javadoc line="93">
                Whether this not is currently processing inputs.                
            </javadoc>
            <declaration name="processInputsScheduled" type="boolean" line="96"/>
            <javadoc line="96">
                Whether this node needs to have its inputs processed.                
            </javadoc>
            <declaration name="interacting" type="int" line="99"/>
            <javadoc line="99">
                The number of interactions this node is currently participating in.                
            </javadoc>
            <declaration name="defaultInputManager" type="PInputManager" line="102"/>
            <javadoc line="102">
                The singleton instance of the default input manager.                
            </javadoc>
            <declaration name="inputSources" type="List" line="107"/>
            <javadoc line="107">
                The Input Sources that are registered to this node.                
            </javadoc>
            <declaration name="globalTime" type="long" line="110"/>
            <javadoc line="110">
                Used to provide a consistent clock time to activities as they are being
                  processed.
                  Should it happen that an activity step take longer than a millisecond,
                  the next step will be unaffected by the change in clock had it used
                  System.currentMillis().                
            </javadoc>
            <declaration name="activityScheduler" type="PActivityScheduler" line="120"/>
            <javadoc line="120">
                Object responsible for scheduling activities, regardless of where in the
                  scene they take place.                
            </javadoc>
            <javadoc line="126">
                Construct a new PRoot(). Note the PCanvas already creates a basic scene
                  graph for you so often you will not need to construct your own roots.                
            </javadoc>
            <method name="PRoot" type="constructor" line="130"/>
            <javadoc line="141">
                Add an activity to the activity scheduler associated with this root.
                  Activities are given a chance to run during each call to the roots
                  &lt;code&gt;processInputs&lt;/code&gt; method. When the activity has finished running
                  it will automatically get removed.                
                <param>
                    activity Activity that should be scheduled                    
                </param>
                <return>
                    whether it has been scheduled (always true)                    
                </return>
            </javadoc>
            <method name="addActivity" type="boolean" line="150">
                <params>
                    <param name="activity" type="PActivity"/>
                </params>
            </method>
            <javadoc line="155">
                Get the activity scheduler associated with this root.                
                <return>
                    associated scheduler                    
                </return>
            </javadoc>
            <method name="getActivityScheduler" type="PActivityScheduler" line="160"/>
            <javadoc line="164">
                Wait for all scheduled activities to finish before returning from this
                  method. This will freeze out user input, and so it is generally
                  recommended that you use PActivities.setTriggerTime() to offset
                  activities instead of using this method.                
            </javadoc>
            <method name="waitForActivities" type="void" line="170">
                <declaration name="cameraWithCanvas" type="PNodeFilter" line="171"/>
                <scope line="173">
                    <declaration name="i" type="Iterator" line="175"/>
                    <scope line="176">
                        <declaration name="each" type="PCamera" line="177"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="183">
                Since getRoot is handled recursively, and root is the lowest point in the
                  hierarchy, simply returns itself.                
                <return>
                    itself                    
                </return>
            </javadoc>
            <method name="getRoot" type="PRoot" line="189"/>
            <javadoc line="193">
                Get the default input manager to be used when processing input events.
                  PCanvas&apos;s use this method when they forward new swing input events to the
                  PInputManager.                
                <return>
                    a singleton instance of PInputManager                    
                </return>
            </javadoc>
            <method name="getDefaultInputManager" type="PInputManager" line="200">
                <scope line="201"/>
            </method>
            <javadoc line="208">
                Return true if this root has been marked as interacting. If so the root
                  will normally render at a lower quality that is faster.                
                <since>
                    1.3                    
                </since>
                <return>
                    true if this root has user interaction taking place                    
                </return>
            </javadoc>
            <method name="getInteracting" type="boolean" line="215"/>
            <javadoc line="219">
                Set if this root is interacting. If so the root will normally render at a
                  lower quality that is faster. Also repaints the root if the the
                  interaction has ended.
                  &lt;p/&gt;
                  This has similar functionality to the setInteracting method on Canvas,
                  but this is the appropriate place to mark interactions that may occur in
                  multiple canvases if this Root is shared.                
                <since>
                    1.3                    
                </since>
                <param>
                    isInteracting True if this root has user interaction taking place                    
                </param>
                <see>
                    PCanvas#setInteracting(boolean)                    
                </see>
            </javadoc>
            <method name="setInteracting" type="void" line="232">
                <params>
                    <param name="isInteracting" type="boolean"/>
                </params>
                <comment line="244">
                    force all the child cameras to repaint                    
                </comment>
                <declaration name="wasInteracting" type="boolean" line="233"/>
                <scope line="235"/>
                <scope line="238"/>
                <scope line="242">
                    <scope line="244">
                        <declaration name="child" type="PNode" line="245"/>
                        <scope line="246"/>
                    </scope>
                </scope>
                <scope line="252"/>
            </method>
            <javadoc line="258">
                Advanced. If you want to add additional input sources to the roots UI
                  process you can do that here. You will seldom do this unless you are
                  making additions to the Piccolo2D framework.                
                <param>
                    inputSource An input source that should be added                    
                </param>
            </javadoc>
            <method name="addInputSource" type="void" line="265">
                <params>
                    <param name="inputSource" type="InputSource"/>
                </params>
            </method>
            <javadoc line="270">
                Advanced. If you want to remove the default input source from the roots
                  UI process you can do that here. You will seldom do this unless you are
                  making additions to the Piccolo2D framework.                
                <param>
                    inputSource input source that should no longer be asked about
                      input events                    
                </param>
            </javadoc>
            <method name="removeInputSource" type="void" line="278">
                <params>
                    <param name="inputSource" type="InputSource"/>
                </params>
                <scope line="279"/>
            </method>
            <javadoc line="284">
                Returns a new timer. This method allows subclasses, such as PSWTRoot to
                  create custom timers that will be used transparently by the Piccolo2D
                  framework.                
                <param>
                    delay # of milliseconds before action listener is invoked                    
                </param>
                <param>
                    listener listener to be invoked after delay                    
                </param>
                <return>
                    A new Timer                    
                </return>
            </javadoc>
            <method name="createTimer" type="Timer" line="294">
                <params>
                    <param name="delay" type="int"/>
                    <param name="listener" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="302">
                Get the global Piccolo2D time. This is set to System.currentTimeMillis()
                  at the beginning of the roots &lt;code&gt;processInputs&lt;/code&gt; method.
                  Activities should usually use this global time instead of System.
                  currentTimeMillis() so that multiple activities will be synchronized.                
                <return>
                    time as recorded at the beginning of activity scheduling                    
                </return>
            </javadoc>
            <method name="getGlobalTime" type="long" line="310"/>
            <javadoc line="314">
                This is the heartbeat of the Piccolo2D framework. Pending input events
                  are processed. Activities are given a chance to run, and the bounds
                  caches and any paint damage is validated.                
            </javadoc>
            <method name="processInputs" type="void" line="319">
                <scope line="324">
                    <declaration name="inputSourceIterator" type="Iterator" line="325"/>
                    <scope line="326">
                        <declaration name="each" type="InputSource" line="327"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="340">
                {@inheritDoc}                
            </javadoc>
            <method name="setFullBoundsInvalid" type="void" line="341">
                <params>
                    <param name="fullLayoutInvalid" type="boolean"/>
                </params>
            </method>
            <javadoc line="346">
                {@inheritDoc}                
            </javadoc>
            <method name="setChildBoundsInvalid" type="void" line="347">
                <params>
                    <param name="childLayoutInvalid" type="boolean"/>
                </params>
            </method>
            <javadoc line="352">
                {@inheritDoc}                
            </javadoc>
            <method name="setPaintInvalid" type="void" line="353">
                <params>
                    <param name="paintInvalid" type="boolean"/>
                </params>
            </method>
            <javadoc line="358">
                {@inheritDoc}                
            </javadoc>
            <method name="setChildPaintInvalid" type="void" line="359">
                <params>
                    <param name="childPaintInvalid" type="boolean"/>
                </params>
            </method>
            <javadoc line="364">
                Schedule process inputs if needed.                
            </javadoc>
            <method name="scheduleProcessInputsIfNeeded" type="void" line="367">
                <comment line="369">
                    The reason for the special case here (when not in the event dispatch
                     thread) is that the SwingUtilitiles.invokeLater code below only
                     invokes later with respect to the event dispatch thread, it will
                     invoke concurrently with other threads.                    
                </comment>
                <comment line="376">
                    Piccolo2D is not thread safe and should almost always be called
                     from the Swing event dispatch thread. It should only reach this
                     point when a new canvas is being created.                    
                </comment>
                <scope line="374"/>
                <scope line="386">
                    <anonymous_class line="389">
                        <method name="run" type="void" line="390"/>
                    </anonymous_class>
                </scope>
            </method>
            <class name="CameraWithCanvasFilter" line="398">
                <implements interface="PNodeFilter"/>
                <method name="accept" type="boolean" line="399">
                    <params>
                        <param name="aNode" type="PNode"/>
                    </params>
                </method>
                <method name="acceptChildrenOf" type="boolean" line="403">
                    <params>
                        <param name="aNode" type="PNode"/>
                    </params>
                </method>
            </class>
            <interface name="InputSource">
                <javadoc line="408">
                    This interfaces is for advanced use only. If you want to implement a
                      different kind of input framework then Piccolo2D provides you can hook it
                      in here.                    
                </javadoc>
                <method name="processInput" type="void" line="414"/>
                <javadoc line="414">
                    Causes the system to process any pending Input Events.                    
                </javadoc>
            </interface>
        </class>
    </source>