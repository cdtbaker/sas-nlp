<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.nodes">
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="javax.swing.JLabel"/>
        <import package="javax.swing.plaf.basic.BasicHTML"/>
        <import package="javax.swing.text.Position"/>
        <import package="javax.swing.text.View"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <class name="PHtmlView" line="46">
            <extends class="PNode"/>
            <javadoc line="46">
                PHtmlView is a Piccolo node for rendering HTML text. It uses a JLabel under
                  the hood so you have the same restrictions regarding HTML as you have when
                  using standard Swing components (HTML 3.2 + subset of CSS 1.0).                
                <since>
                    1.3                    
                </since>
                <author>
                    Chris Malley (cmal...@pixelzoom.com)                    
                </author>
                <author>
                    Sam Reid                    
                </author>
                <author>
                    Allain Lalonde                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="58"/>
            <javadoc line="58">
                Default serial version UID.                
            </javadoc>
            <declaration name="DEFAULT_FONT" type="Font" line="61"/>
            <javadoc line="61">
                Default font if not otherwise specified in the HTML text, 12 point
                  &lt;code&gt;&quot;SansSerif&quot;&lt;/code&gt;.                
            </javadoc>
            <declaration name="DEFAULT_TEXT_COLOR" type="Color" line="69"/>
            <javadoc line="69">
                Default text color if not otherwise specified in the HTML text,
                  &lt;code&gt;Color.BLACK&lt;/code&gt;.                
            </javadoc>
            <declaration name="PROPERTY_FONT" type="String" line="75"/>
            <javadoc line="75">
                The property name that identifies a change of this node&apos;s font (see{@link #getFont getFont}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_FONT" type="int" line="82"/>
            <javadoc line="82">
                The property code that identifies a change of this node&apos;s font (see{@link #getFont getFont}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_TEXT" type="String" line="89"/>
            <javadoc line="89">
                The property name that identifies a change of this node&apos;s HTML text (see{@link #getText getText}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_TEXT" type="int" line="96"/>
            <javadoc line="96">
                The property code that identifies a change of this node&apos;s HTML text (see{@link #getText getText}). Both old and new value will be set in any
                  property change event.                
            </javadoc>
            <declaration name="PROPERTY_TEXT_COLOR" type="String" line="103"/>
            <javadoc line="103">
                The property name that identifies a change of this node&apos;s HTML text color
                  (see {@link #getTextColor getTextColor}). Both old and new value will be set
                  in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_TEXT_COLOR" type="int" line="110"/>
            <javadoc line="110">
                The property code that identifies a change of this node&apos;s HTML text color
                  (see {@link #getTextColor getTextColor}). Both old and new value will be set
                  in any property change event.                
            </javadoc>
            <declaration name="label" type="JLabel" line="117"/>
            <javadoc line="117">
                Underlying JLabel used to handle the rendering logic.                
            </javadoc>
            <declaration name="htmlView" type="View" line="120"/>
            <javadoc line="120">
                Object that encapsulates the HTML rendering logic.                
            </javadoc>
            <javadoc line="123">
                Create an empty HTML text node with the default font and text color.                
            </javadoc>
            <method name="PHtmlView" type="constructor" line="126"/>
            <javadoc line="130">
                Create a HTML text node with the specified HTML text and the default font
                  and text color.                
                <param>
                    text HTML text for this HTML text node                    
                </param>
            </javadoc>
            <method name="PHtmlView" type="constructor" line="136">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="140">
                Create a HTML text node with the specified HTML text, font, and text
                  color. The font and text color are used to render the HTML text if not
                  otherwise specified via CSS.                
                <param>
                    text HTML text for this HTML text node                    
                </param>
                <param>
                    font font for this HTML text node                    
                </param>
                <param>
                    textColor text color for this HTML text node                    
                </param>
            </javadoc>
            <method name="PHtmlView" type="constructor" line="149">
                <params>
                    <param name="text" type="String"/>
                    <param name="font" type="Font"/>
                    <param name="textColor" type="Color"/>
                </params>
            </method>
            <javadoc line="157">
                Return the HTML text for this HTML text node.                
                <return>
                    the HTML text for this HTML text node                    
                </return>
            </javadoc>
            <method name="getText" type="String" line="162"/>
            <javadoc line="166">
                Set the HTML text for this HTML text node to &lt;code&gt;text&lt;/code&gt;.
                  &lt;p&gt;
                  This is a &lt;b&gt;bound&lt;/b&gt; property.
                  &lt;/p&gt;                
                <param>
                    text HTML text for this HTML text node                    
                </param>
            </javadoc>
            <method name="setText" type="void" line="175">
                <params>
                    <param name="text" type="String"/>
                </params>
                <declaration name="oldText" type="String" line="176"/>
                <scope line="178"/>
                <scope line="182"/>
            </method>
            <javadoc line="190">
                Return the font for this HTML text node. This font is used to render the
                  HTML text if not otherwise specified via CSS. Defaults to{@link #DEFAULT_FONT}.                
                <return>
                    the font for this HTML text node                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="197"/>
            <javadoc line="201">
                Set the font for this HTML text node to &lt;code&gt;font&lt;/code&gt;. This font is
                  used to render the HTML text if not otherwise specified via CSS.
                  &lt;p&gt;
                  This is a &lt;b&gt;bound&lt;/b&gt; property.
                  &lt;/p&gt;                
                <param>
                    font font for this HTML text node                    
                </param>
            </javadoc>
            <method name="setFont" type="void" line="211">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <declaration name="oldFont" type="Font" line="212"/>
            </method>
            <javadoc line="218">
                Return the text color for this HTML text node. This text color is used to
                  render the HTML text if not otherwise specified via CSS. Defaults to{@link #DEFAULT_TEXT_COLOR}.                
                <return>
                    the text color for this HTML text node                    
                </return>
            </javadoc>
            <method name="getTextColor" type="Color" line="225"/>
            <javadoc line="229">
                Set the text color for this HTML text node to &lt;code&gt;textColor&lt;/code&gt;.
                  This text color is used to render the HTML text if not otherwise
                  specified via CSS.
                  This is a &lt;b&gt;bound&lt;/b&gt; property.                
                <param>
                    textColor text color for this HTML text node                    
                </param>
            </javadoc>
            <method name="setTextColor" type="void" line="238">
                <params>
                    <param name="textColor" type="Color"/>
                </params>
                <declaration name="oldColor" type="Color" line="239"/>
            </method>
            <javadoc line="245">
                Applies all properties to the underlying JLabel, creates an htmlView and
                  updates bounds.                
            </javadoc>
            <method name="update" type="void" line="249">
                <declaration name="htmlContent" type="String" line="250"/>
                <scope line="251"/>
            </method>
            <javadoc line="261">
                Resizes the height to be as tall as its rendered html. Takes wrapping
                  into account.                
            </javadoc>
            <method name="fitHeightToHtmlContent" type="void" line="265">
                <scope line="266">
                    <declaration name="wrapHeight" type="float" line="269"/>
                    <scope line="272"/>
                </scope>
            </method>
            <javadoc line="280">
                {@inheritDoc}                
            </javadoc>
            <method name="setBounds" type="boolean" line="281">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
                <declaration name="boundsChanged" type="boolean" line="282"/>
            </method>
            <javadoc line="287">
                {@inheritDoc}                
            </javadoc>
            <method name="setBounds" type="boolean" line="288">
                <params>
                    <param name="newBounds" type="Rectangle2D"/>
                </params>
                <declaration name="boundsChanged" type="boolean" line="289"/>
            </method>
            <javadoc line="294">
                {@inheritDoc}&lt;p&gt;
                  The HTML text is painted last, so it will appear on top of any child
                  nodes.
                  &lt;/p&gt;                
            </javadoc>
            <method name="paint" type="void" line="302">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <declaration name="g2" type="Graphics2D" line="305"/>
            </method>
            <javadoc line="310">
                Return the address specified in the HTML link at the specified point in
                  this node&apos;s local coordinate system, if any.                
                <param>
                    point point in this node&apos;s local coordinate system                    
                </param>
                <return>
                    the address specified in the HTML link at the specified point in
                      this node&apos;s local coordinate system, or &lt;code&gt;null&lt;/code&gt; if no
                      such HTML link exists                    
                </return>
            </javadoc>
            <method name="getLinkAddressAt" type="String" line="319">
                <params>
                    <param name="point" type="Point2D"/>
                </params>
            </method>
            <javadoc line="323">
                Return the address specified in the HTML link at the specified x and y
                  coordinates in this node&apos;s local coordinate system, if any.                
                <param>
                    x x coordinate in this node&apos;s local coordinate system                    
                </param>
                <param>
                    y y coordinate in this node&apos;s local coordinate system                    
                </param>
                <return>
                    the address specified in the HTML link at the specified x and y
                      coordinates in this node&apos;s local coordinate system, or
                      &lt;code&gt;null&lt;/code&gt; if no such HTML link exists                    
                </return>
            </javadoc>
            <method name="getLinkAddressAt" type="String" line="333">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="position" type="int" line="334"/>
                <declaration name="text" type="String" line="336"/>
                <declaration name="address" type="String" line="338"/>
                <declaration name="currentPos" type="int" line="340"/>
                <scope line="341">
                    <scope line="343"/>
                    <declaration name="tagStart" type="int" line="347"/>
                    <declaration name="tagEnd" type="int" line="348"/>
                    <scope line="350"/>
                    <declaration name="tag" type="String" line="356"/>
                    <scope line="360"/>
                    <scope line="363"/>
                </scope>
            </method>
            <javadoc line="371">
                Return the index into the raw text at the specified x and y coordinates
                  in this node&apos;s local coordinate system.                
                <param>
                    x x coordinate in this node&apos;s local coordinate system                    
                </param>
                <param>
                    y y coordinate in this node&apos;s local coordinate system                    
                </param>
                <return>
                    the index into the raw text at the specified x and y coordinates
                      in this node&apos;s local coordinate system                    
                </return>
            </javadoc>
            <method name="pointToModelIndex" type="int" line="380">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="biasReturn" type="Position.Bias[]" line="381"/>
            </method>
            <javadoc line="385">
                Starting from the startPos, find the position at which the given tag
                  ends. Returns &lt;code&gt;-1&lt;/code&gt; if the end of the string was encountered
                  before the end of the tag was encountered.                
                <param>
                    text HTML text being searched                    
                </param>
                <param>
                    startPos where in the string to start searching for &quot;&gt;&quot;                    
                </param>
                <return>
                    index after the &quot;&gt;&quot; character                    
                </return>
            </javadoc>
            <method name="findTagEnd" type="int" line="394">
                <params>
                    <param name="text" type="String"/>
                    <param name="startPos" type="int"/>
                </params>
                <declaration name="currentPos" type="int" line="395"/>
                <scope line="399">
                    <scope line="400"/>
                    <scope line="403"/>
                </scope>
                <scope line="409"/>
            </method>
            <javadoc line="416">
                Given a tag, extracts the value of the href attribute or returns null if
                  none was found.                
                <param>
                    tag from which to extract the href value                    
                </param>
                <return>
                    href value without quotes or &lt;code&gt;null&lt;/code&gt; if not found                    
                </return>
            </javadoc>
            <method name="extractHref" type="String" line="423">
                <params>
                    <param name="tag" type="String"/>
                </params>
                <declaration name="currentPos" type="int" line="424"/>
                <declaration name="href" type="String" line="426"/>
                <scope line="428">
                    <scope line="430"/>
                </scope>
            </method>
            <javadoc line="437">
                Starting at the character after the equal sign of an href=..., it extract
                  the value. Handles single, double, and no quotes.                
                <param>
                    tag tag                    
                </param>
                <param>
                    startPos start position                    
                </param>
                <return>
                    value of href or null if not found.                    
                </return>
            </javadoc>
            <method name="extractHrefValue" type="String" line="445">
                <params>
                    <param name="tag" type="String"/>
                    <param name="startPos" type="int"/>
                </params>
                <declaration name="currentPos" type="int" line="446"/>
                <scope line="448">
                    <declaration name="startHref" type="int" line="449"/>
                    <scope line="451"/>
                </scope>
                <scope line="456">
                    <declaration name="startHref" type="int" line="457"/>
                    <scope line="459"/>
                </scope>
                <scope line="464">
                    <declaration name="startHref" type="int" line="465"/>
                    <scope line="467">
                        <scope line="468"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="476">
                Given the position in a string returns whether it points to the equal
                  sign of an href attribute.                
                <param>
                    tag html code of the tag                    
                </param>
                <param>
                    equalPos the index of the assignment                    
                </param>
                <return>
                    true if to left of assignment is href                    
                </return>
            </javadoc>
            <method name="isHrefAttributeAssignment" type="boolean" line="484">
                <params>
                    <param name="tag" type="String"/>
                    <param name="equalPos" type="int"/>
                </params>
            </method>
        </class>
    </source>