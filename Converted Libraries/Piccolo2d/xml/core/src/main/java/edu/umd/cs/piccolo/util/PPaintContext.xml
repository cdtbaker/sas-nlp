<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.util">
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.Composite"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <class name="PPaintContext" line="43">
            <javadoc line="43">
                &lt;b&gt;PPaintContext&lt;/b&gt; is used by piccolo nodes to paint themselves on the
                  screen. PPaintContext wraps a Graphics2D to implement painting.
                  &lt;P&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="LOW_QUALITY_RENDERING" type="int" line="52"/>
            <javadoc line="52">
                Used for lowering quality of rendering when requested.                
            </javadoc>
            <declaration name="HIGH_QUALITY_RENDERING" type="int" line="55"/>
            <javadoc line="55">
                Used for improving quality of rendering when requested.                
            </javadoc>
            <declaration name="RENDER_QUALITY_LOW_FRC" type="FontRenderContext" line="58"/>
            <javadoc line="58">
                Font context to use while in low quality rendering.                
            </javadoc>
            <declaration name="RENDER_QUALITY_HIGH_FRC" type="FontRenderContext" line="61"/>
            <javadoc line="61">
                Font context to use while in high quality rendering.                
            </javadoc>
            <declaration name="CURRENT_PAINT_CONTEXT" type="PPaintContext" line="64"/>
            <javadoc line="64">
                @deprecated will disappear as soon as possible Global for accessing the
                  current paint context while painting.                
            </javadoc>
            <declaration name="PTS" type="double[]" line="70"/>
            <javadoc line="70">
                Used while calculating scale at which rendering is occurring.                
            </javadoc>
            <declaration name="graphics" type="Graphics2D" line="73"/>
            <javadoc line="73">
                PaintContext is associated with this graphics context.                
            </javadoc>
            <declaration name="compositeStack" type="PStack" line="76"/>
            <javadoc line="76">
                Used while computing transparency.                
            </javadoc>
            <declaration name="clipStack" type="PStack" line="79"/>
            <javadoc line="79">
                Used to optimize clipping region.                
            </javadoc>
            <declaration name="localClipStack" type="PStack" line="82"/>
            <javadoc line="82">
                Tracks clipping region in local coordinate system.                
            </javadoc>
            <declaration name="cameraStack" type="PStack" line="85"/>
            <javadoc line="85">
                Stack of cameras through which the node being painted is being viewed.                
            </javadoc>
            <declaration name="transformStack" type="PStack" line="88"/>
            <javadoc line="88">
                Stack of transforms being applied to the drawing context.                
            </javadoc>
            <declaration name="renderQuality" type="int" line="91"/>
            <javadoc line="91">
                The current render quality that all rendering should be done in.                
            </javadoc>
            <javadoc line="94">
                Creates a PPaintContext associated with the given graphics context.                
                <param>
                    graphics graphics context to associate with this paint context                    
                </param>
            </javadoc>
            <method name="PPaintContext" type="constructor" line="99">
                <params>
                    <param name="graphics" type="Graphics2D"/>
                </params>
                <declaration name="clip" type="Shape" line="108"/>
                <scope line="109"/>
            </method>
            <javadoc line="119">
                Returns the graphics context associated with this paint context.                
                <return>
                    graphics context associated with this paint context                    
                </return>
            </javadoc>
            <method name="getGraphics" type="Graphics2D" line="124"/>
            <javadoc line="128">
                Returns the clipping region in the local coordinate system applied by
                  graphics.                
                <return>
                    clipping region in the local coordinate system applied by
                      graphics                    
                </return>
            </javadoc>
            <method name="getLocalClip" type="Rectangle2D" line="135"/>
            <javadoc line="139">
                Returns scale of the current graphics context. By calculating how a unit
                  segment gets transformed after transforming it by the graphics context&apos;s
                  transform.                
                <return>
                    scale of the current graphics context&apos;s transformation                    
                </return>
            </javadoc>
            <method name="getScale" type="double" line="146">
                <comment line="148">
                    x1, y1, x2, y2                    
                </comment>
            </method>
            <javadoc line="156">
                Pushes the camera onto the camera stack.                
                <param>
                    aCamera camera to push onto the stack                    
                </param>
            </javadoc>
            <method name="pushCamera" type="void" line="161">
                <params>
                    <param name="aCamera" type="PCamera"/>
                </params>
            </method>
            <javadoc line="165">
                @deprecated in favor of popCamera()                
                <param>
                    aCamera absolute not used in any way                    
                </param>
            </javadoc>
            <method name="popCamera" type="void" line="170">
                <params>
                    <param name="aCamera" type="PCamera"/>
                </params>
            </method>
            <javadoc line="174">
                Removes the camera at the top of the camera stack.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="popCamera" type="void" line="179"/>
            <javadoc line="183">
                Returns the camera at the top of the camera stack, or null if stack is
                  empty.                
                <return>
                    topmost camera on camera stack or null if stack is empty                    
                </return>
            </javadoc>
            <method name="getCamera" type="PCamera" line="189"/>
            <javadoc line="193">
                Pushes the given clip to the pain context.                
                <param>
                    clip clip to be pushed                    
                </param>
            </javadoc>
            <method name="pushClip" type="void" line="198">
                <params>
                    <param name="clip" type="Shape"/>
                </params>
                <declaration name="currentClip" type="Shape" line="199"/>
                <declaration name="newLocalClip" type="Rectangle2D" line="202"/>
            </method>
            <javadoc line="207">
                Removes the topmost clipping region from the clipping stack.                
                <param>
                    clip not used in this method                    
                </param>
            </javadoc>
            <method name="popClip" type="void" line="212">
                <params>
                    <param name="clip" type="Shape"/>
                </params>
                <declaration name="newClip" type="Shape" line="213"/>
            </method>
            <javadoc line="218">
                Pushes the provided transparency onto the transparency stack if
                  necessary. If the transparency is fully opaque, then it does nothing.                
                <param>
                    transparency transparency to be pushed onto the transparency stack                    
                </param>
            </javadoc>
            <method name="pushTransparency" type="void" line="224">
                <params>
                    <param name="transparency" type="float"/>
                </params>
                <scope line="225"/>
                <declaration name="current" type="Composite" line="228"/>
                <declaration name="currentAlaph" type="float" line="229"/>
                <scope line="232"/>
                <declaration name="newComposite" type="AlphaComposite" line="235"/>
            </method>
            <javadoc line="240">
                Removes the topmost transparency if the given transparency is not opaque
                  (1f).                
                <param>
                    transparency transparency to be popped                    
                </param>
            </javadoc>
            <method name="popTransparency" type="void" line="246">
                <params>
                    <param name="transparency" type="float"/>
                </params>
                <scope line="247"/>
                <declaration name="c" type="Composite" line="250"/>
            </method>
            <javadoc line="254">
                Pushed the provided transform onto the transform stack if it is not null.                
                <param>
                    transform will be pushed onto the transform stack if not null                    
                </param>
            </javadoc>
            <method name="pushTransform" type="void" line="259">
                <params>
                    <param name="transform" type="PAffineTransform"/>
                </params>
                <scope line="260">
                    <declaration name="newLocalClip" type="Rectangle2D" line="261"/>
                </scope>
            </method>
            <javadoc line="269">
                Pops the topmost Transform from the top of the transform if the passed in
                  transform is not null.                
                <param>
                    transform transform that should be at the top of the stack                    
                </param>
            </javadoc>
            <method name="popTransform" type="void" line="275">
                <params>
                    <param name="transform" type="PAffineTransform"/>
                </params>
                <scope line="276"/>
            </method>
            <javadoc line="282">
                Return the render quality used by this paint context.                
                <return>
                    the current render quality                    
                </return>
            </javadoc>
            <method name="getRenderQuality" type="int" line="287"/>
            <javadoc line="291">
                Set the rendering hints for this paint context. The render quality is
                  most often set by the rendering PCanvas. Use PCanvas.setRenderQuality()
                  and PCanvas.setInteractingRenderQuality() to set these values.                
                <param>
                    requestedQuality supports PPaintContext.HIGH_QUALITY_RENDERING or
                      PPaintContext.LOW_QUALITY_RENDERING                    
                </param>
            </javadoc>
            <method name="setRenderQuality" type="void" line="299">
                <params>
                    <param name="requestedQuality" type="int"/>
                </params>
            </method>
            <method name="setRenderQualityToLow" type="void" line="316"/>
            <method name="setRenderQualityToHigh" type="void" line="323"/>
        </class>
    </source>