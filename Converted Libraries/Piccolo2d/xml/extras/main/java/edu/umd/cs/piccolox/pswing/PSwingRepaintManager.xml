<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.pswing">
        <import package="java.awt.Component"/>
        <import package="java.util.Vector"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.RepaintManager"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <class name="PSwingRepaintManager" line="39">
            <extends class="RepaintManager"/>
            <comment line="77">
                The components that are currently painting                
            </comment>
            <comment line="78">
                This needs to be a vector for thread safety                
            </comment>
            <javadoc line="39">
                This RepaintManager replaces the default Swing implementation, and is used to
                  repaint dirty regions of PSwing components and make sure the PSwings have
                  the appropriate size.
                  &lt;p&gt;
                  This is an internal class used by Piccolo to support Swing components in
                  Piccolo. This should not be instantiated, though all the public methods of
                  javax.swing.RepaintManager may still be called and perform in the expected
                  manner.
                  &lt;/p&gt;
                  &lt;p&gt;
                  PBasicRepaint Manager is an extension of RepaintManager that traps those
                  repaints called by the Swing components that have been added to the PCanvas
                  and passes these repaints to the PSwing rather than up the
                  component hierarchy as usually happens.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Also traps invalidate calls made by the Swing components added to the PCanvas
                  to reshape the corresponding PSwing.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Also keeps a list of PSwings that are painting. This disables repaint until
                  the component has finished painting. This is to address a problem introduced
                  by Swing&apos;s CellRendererPane which is itself a work-around. The problem is
                  that JTable&apos;s, JTree&apos;s, and JList&apos;s cell renderers need to be validated
                  before repaint. Since we have to repaint the entire Swing component hierarchy
                  (in the case of a PSwing), this causes an infinite loop. So we introduce the
                  restriction that no repaints can be triggered by a call to paint.
                  &lt;/p&gt;                
                <author>
                    Benjamin B. Bederson                    
                </author>
                <author>
                    Lance E. Good                    
                </author>
                <author>
                    Sam R. Reid                    
                </author>
                <author>
                    Chris Malley (cmalley@pixelzoom.com)                    
                </author>
            </javadoc>
            <declaration name="paintingComponents" type="Vector" line="78"/>
            <javadoc line="80">
                Locks repaint for a particular (Swing) component displayed by PCanvas.                
                <param>
                    c The component for which the repaint is to be locked                    
                </param>
            </javadoc>
            <method name="lockRepaint" type="void" line="85">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="89">
                Unlocks repaint for a particular (Swing) component displayed by PCanvas.                
                <param>
                    c The component for which the repaint is to be unlocked                    
                </param>
            </javadoc>
            <method name="unlockRepaint" type="void" line="94">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="98">
                Returns true if repaint is currently locked for a component and false
                  otherwise.                
                <param>
                    c The component for which the repaint status is desired                    
                </param>
                <return>
                    Whether the component is currently painting                    
                </return>
            </javadoc>
            <method name="isPainting" type="boolean" line="105">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="109">
                This is the method &quot;repaint&quot; now calls in the Swing components.
                  Overridden to capture repaint calls from those Swing components which are
                  being used as Piccolo visual components and to call the Piccolo repaint
                  mechanism rather than the traditional Component hierarchy repaint
                  mechanism. Otherwise, behaves like the superclass.                
                <param>
                    component Component to be repainted                    
                </param>
                <param>
                    x X coordinate of the dirty region in the component                    
                </param>
                <param>
                    y Y coordinate of the dirty region in the component                    
                </param>
                <param>
                    width Width of the dirty region in the component                    
                </param>
                <param>
                    height Height of the dirty region in the component                    
                </param>
            </javadoc>
            <method name="addDirtyRegion" type="void" line="122">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <comment line="128">
                    We have to check to see if the PCanvas (ie. the SwingWrapper) is in the components ancestry. If so, we will                    
                </comment>
                <comment line="129">
                    want to capture that repaint. However, we also will need to translate the repaint request since the component                    
                </comment>
                <comment line="130">
                    may be offset inside another component.                    
                </comment>
                <comment line="138">
                    Adds to the offset since the component is nested                    
                </comment>
                <comment line="144">
                    Now we check to see if we should capture the repaint and act accordingly                    
                </comment>
                <comment line="150">
                    Schedule a repaint for the dirty part of the PSwing                    
                </comment>
                <declaration name="captureRepaint" type="boolean" line="123"/>
                <declaration name="childComponent" type="JComponent" line="124"/>
                <declaration name="captureX" type="int" line="125"/>
                <declaration name="captureY" type="int" line="126"/>
                <scope line="131">
                    <scope line="132"/>
                    <scope line="137"/>
                </scope>
                <scope line="145">
                    <scope line="146">
                        <declaration name="repaintW" type="double" line="147"/>
                        <declaration name="repaintH" type="double" line="148"/>
                    </scope>
                </scope>
                <scope line="154"/>
            </method>
            <javadoc line="159">
                This is the method &quot;invalidate&quot; calls in the Swing components. Overridden
                  to capture invalidation calls from those Swing components being used as
                  Piccolo visual components and to update Piccolo&apos;s visual component
                  wrapper bounds (these are stored separately from the Swing component).
                  Otherwise, behaves like the superclass.                
                <param>
                    invalidComponent The Swing component that needs validation                    
                </param>
            </javadoc>
            <method name="addInvalidComponent" type="void" line="168">
                <params>
                    <param name="invalidComponent" type="JComponent"/>
                </params>
                <scope line="169"/>
                <scope line="172"/>
            </method>
            <javadoc line="178">
                Obtains the PSwing associated with the specified component.                
                <param>
                    component the component for which to return the associated PSwing                    
                </param>
                <return>
                    the associated PSwing                    
                </return>
            </javadoc>
            <method name="getPSwing" type="PSwing" line="183">
                <params>
                    <param name="component" type="JComponent"/>
                </params>
            </method>
        </class>
    </source>