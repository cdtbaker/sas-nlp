<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.util">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Stroke"/>
        <import package="java.io.ObjectStreamException"/>
        <import package="java.io.Serializable"/>
        <class name="PFixedWidthStroke" line="6">
            <extends class="PSemanticStroke"/>
            <implements interface="Serializable"/>
            <javadoc line="6">
                &lt;b&gt;PFixedWidthStroke&lt;/b&gt; is the same as {@link BasicStroke} except that
                  PFixedWidthStroke has a fixed width on the screen so that even when the
                  canvas view is zooming its width stays the same in canvas coordinates.
                  &lt;p&gt;{@link #createStrokedShape(Shape)} checks if the scale has changed since the
                  last usage and if that&apos;s the case calls {@link #newStroke(float)} to get a
                  new {@link Stroke} instance to delegate to.
                  &lt;p&gt;
                  &lt;b&gt;CAUTION!&lt;/b&gt; this implementation falls short for large scaling factors -
                  the effective miterlimit might drop below 1.0 which isn&apos;t permitted by{@link BasicStroke} and therefore limited to a minimal 1.0 by this
                  implementation. A more sophisticated implementation might use the approach
                  mentioned at http://code.google.com/p/piccolo2d/issues/detail?id=49
                  &lt;p&gt;
                  &lt;b&gt;CAUTION!&lt;/b&gt; after extreme scaling this implementation seems to change to
                  internal state of the base stroke. Try PathExample with extreme zoom in and
                  zoom back to the original scale. The pickable circles disappear. Strange!                
                <see>
                    edu.umd.cs.piccolo.nodes.PPath                    
                </see>
                <see>
                    BasicStroke                    
                </see>
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_MITER_LIMIT" type="float" line="28"/>
            <declaration name="DEFAULT_STROKE" type="BasicStroke" line="29"/>
            <declaration name="serialVersionUID" type="long" line="30"/>
            <declaration name="dash" type="float[]" line="31"/>
            <declaration name="tmpDash" type="float[]" line="32"/>
            <javadoc line="33">
                Constructs a simple PFixedWidthStroke with the default stroke.                
            </javadoc>
            <method name="PFixedWidthStroke" type="constructor" line="36"/>
            <javadoc line="39">
                Making this constructor public would break encapsulation. Users don&apos;t
                  need to know that they are dealing with an adapter to an underlying
                  stroke.                
                <param>
                    stroke stroke being used by this PFixedWithStroke                    
                </param>
            </javadoc>
            <method name="PFixedWidthStroke" type="constructor" line="45">
                <params>
                    <param name="stroke" type="BasicStroke"/>
                </params>
                <scope line="48"/>
                <scope line="51"/>
            </method>
            <javadoc line="55">
                Constructs a simple PFixedWidthStroke with the width provided.                
                <param>
                    width desired width of the stroke                    
                </param>
            </javadoc>
            <method name="PFixedWidthStroke" type="constructor" line="59">
                <params>
                    <param name="width" type="float"/>
                </params>
            </method>
            <javadoc line="62">
                Constructs a PFixedWidthStroke with the stroke properties provided.                
                <param>
                    width width of stroke                    
                </param>
                <param>
                    cap cap to use in stroke                    
                </param>
                <param>
                    join join to use in stroke                    
                </param>
            </javadoc>
            <method name="PFixedWidthStroke" type="constructor" line="68">
                <params>
                    <param name="width" type="float"/>
                    <param name="cap" type="int"/>
                    <param name="join" type="int"/>
                </params>
            </method>
            <javadoc line="71">
                Constructs a PFixedWidthStroke with the stroke properties provided.                
                <param>
                    width width of stroke                    
                </param>
                <param>
                    cap cap to use in stroke                    
                </param>
                <param>
                    join join to use in stroke                    
                </param>
                <param>
                    miterlimit miter limit of stroke                    
                </param>
            </javadoc>
            <method name="PFixedWidthStroke" type="constructor" line="78">
                <params>
                    <param name="width" type="float"/>
                    <param name="cap" type="int"/>
                    <param name="join" type="int"/>
                    <param name="miterlimit" type="float"/>
                </params>
            </method>
            <javadoc line="81">
                Constructs a PFixedWidthStroke with the stroke properties provided.                
                <param>
                    width width of stroke                    
                </param>
                <param>
                    cap cap to use in stroke                    
                </param>
                <param>
                    join join to use in stroke                    
                </param>
                <param>
                    miterlimit miter limit of stroke                    
                </param>
                <param>
                    dash array of dash lengths                    
                </param>
                <param>
                    dashPhase phase to use when rendering dashes                    
                </param>
            </javadoc>
            <method name="PFixedWidthStroke" type="constructor" line="90">
                <params>
                    <param name="width" type="float"/>
                    <param name="cap" type="int"/>
                    <param name="join" type="int"/>
                    <param name="miterlimit" type="float"/>
                    <param name="dash" type="float[]"/>
                    <param name="dashPhase" type="float"/>
                </params>
            </method>
            <javadoc line="93">
                Throws an exception since PFixedWidthStrokes are not serializable.                
                <return>
                    never returns anything                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="97"/>
            <javadoc line="100">
                Returns the array representing the lengths of the dash segments.
                  Alternate entries in the array represent the user space lengths of the
                  opaque and transparent segments of the dashes. As the pen moves along the
                  outline of the Shape to be stroked, the user space distance that the pen
                  travels is accumulated. The distance value is used to index into the dash
                  array. The pen is opaque when its current cumulative distance maps to an
                  even element of the dash array and transparent otherwise.                
                <return>
                    the dash array                    
                </return>
            </javadoc>
            <method name="getDashArray" type="float[]" line="110"/>
            <javadoc line="113">
                Returns the current dash phase. The dash phase is a distance specified in
                  user coordinates that represents an offset into the dashing pattern. In
                  other words, the dash phase defines the point in the dashing pattern that
                  will correspond to the beginning of the stroke.                
                <return>
                    the dash phase as a float value.                    
                </return>
            </javadoc>
            <method name="getDashPhase" type="float" line="120"/>
            <javadoc line="123">
                Returns the end cap style.                
                <return>
                    the end cap style of this BasicStroke as one of the static int values that define possible end cap styles.                    
                </return>
            </javadoc>
            <method name="getEndCap" type="int" line="127"/>
            <javadoc line="130">
                Returns the line join style.                
                <return>
                    the line join style of the <code>PFixedWidthStroke</code> as one
                      of the static <code>int</code> values that define possible line
                      join styles.                    
                </return>
            </javadoc>
            <method name="getLineJoin" type="int" line="136"/>
            <javadoc line="139">
                Returns the line width. Line width is represented in user space, which is
                  the default-coordinate space used by Java 2D. See the Graphics2D class
                  comments for more information on the user space coordinate system.                
                <return>
                    the line width of this BasicStroke.                    
                </return>
            </javadoc>
            <method name="getLineWidth" type="float" line="145"/>
            <javadoc line="148">
                Returns the miter limit of this node.                
                <return>
                    the limit of miter joins of the PFixedWidthStroke                    
                </return>
            </javadoc>
            <method name="getMiterLimit" type="float" line="152"/>
            <javadoc line="155">
                Returns a stroke equivalent to this one, but scaled by the scale
                  provided.                
                <param>
                    activeScale scale to apply to the new stoke                    
                </param>
                <return>
                    scaled stroke                    
                </return>
            </javadoc>
            <method name="newStroke" type="Stroke" line="161">
                <params>
                    <param name="activeScale" type="float"/>
                </params>
                <scope line="162">
                    <scope line="163"/>
                </scope>
                <declaration name="ml" type="float" line="167"/>
                <declaration name="sanitizedMiterLimit" type="float" line="168"/>
                <scope line="169"/>
                <scope line="172"/>
            </method>
            <javadoc line="177">
                Is it really necessary to implement {@link Serializable}?                
                <throws>
                    ObjectStreamException doesn't actually throw this at all, why's
                      this here?                    
                </throws>
                <return>
                    the resolved stroke                    
                </return>
            </javadoc>
            <method name="readResolve" type="Object" line="183"/>
        </class>
    </source>