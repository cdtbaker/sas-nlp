<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.nodes">
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <class name="PComposite" line="34">
            <extends class="PNode"/>
            <comment line="46">
                public boolean setBounds(double x, double y, double width, double height)
                 { PBounds childBounds = getUnionOfChildrenBounds(null);
                
                 double dx = x - childBounds.x; double dy = y - childBounds.y; double sx =
                 width  childBounds.width; double sy = height  childBounds.height;
                 double scale = sx &gt; sy ? sx : sy;
                
                 Iterator i = getChildrenIterator(); while (i.hasNext()) { PNode each =
                 (PNode) i.next(); each.offset(dx, dy); each.scaleAboutPoint(scale,
                 each.getBoundsReference().x, each.getBoundsReference().y); }
                
                 return super.setBounds(x, y, width, height); }
                
                 protected void layoutChildren() {
                 getBoundsReference().setRect(getUnionOfChildrenBounds(null)); }                
            </comment>
            <javadoc line="34">
                &lt;b&gt;PComposite&lt;/b&gt; is a simple node that makes a group of nodes appear to be a
                  single node when picking and interacting. There is also partial (commented
                  out) support for resizing the child node to fit when this nodes bounds are
                  set.                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="63"/>
            <javadoc line="63">
                                
            </javadoc>
            <javadoc line="68">
                Return true if this node or any pickable descendants are picked. If a
                  pick occurs the pickPath is modified so that this node is always returned
                  as the picked node, event if it was a descendant node that initially
                  reported the pick.                
                <param>
                    pickPath the pick path to add the nodes to if they are picked                    
                </param>
                <return>
                    true if this node or one of its descendants was picked                    
                </return>
            </javadoc>
            <method name="fullPick" type="boolean" line="77">
                <params>
                    <param name="pickPath" type="PPickPath"/>
                </params>
                <comment line="82">
                    this code won&apos;t work with internal cameras, because it doesn&apos;t
                     pop the cameras view transform.                    
                </comment>
                <scope line="78">
                    <declaration name="picked" type="PNode" line="79"/>
                    <scope line="83"/>
                </scope>
            </method>
        </class>
    </source>