<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swing">
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javax.swing.ScrollPaneConstants"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <class name="PDefaultScrollDirector" line="18">
            <implements interface="PScrollDirector"/>
            <implements interface="PropertyChangeListener"/>
            <javadoc line="18">
                The default scroll director implementation. This default implementation
                  follows the widely accepted model of scrolling - namely the scrollbars
                  control the movement of the window over the document rather than the movement
                  of the document under the window.                
                <author>
                    Lance Good                    
                </author>
            </javadoc>
            <declaration name="viewPort" type="PViewport" line="26"/>
            <javadoc line="26">
                The viewport that signals this scroll director.                
            </javadoc>
            <declaration name="scrollPane" type="PScrollPane" line="30"/>
            <javadoc line="30">
                The scrollpane that contains the viewport.                
            </javadoc>
            <declaration name="view" type="PCanvas" line="34"/>
            <javadoc line="34">
                The canvas that this class directs.                
            </javadoc>
            <declaration name="camera" type="PCamera" line="38"/>
            <javadoc line="38">
                The canvas&apos; camera.                
            </javadoc>
            <declaration name="root" type="PRoot" line="42"/>
            <javadoc line="42">
                The canvas&apos; root.                
            </javadoc>
            <declaration name="scrollInProgress" type="boolean" line="46"/>
            <javadoc line="46">
                Flag to indicate when scrolling is currently in progress.                
            </javadoc>
            <javadoc line="50">
                The default constructor.                
            </javadoc>
            <method name="PDefaultScrollDirector" type="constructor" line="53"/>
            <javadoc line="55">
                Installs the scroll director and adds the appropriate listeners.                
                <param>
                    targetViewPort viewport on which this director directs                    
                </param>
                <param>
                    targetView PCanvas that the viewport looks at                    
                </param>
            </javadoc>
            <method name="install" type="void" line="60">
                <params>
                    <param name="targetViewPort" type="PViewport"/>
                    <param name="targetView" type="PCanvas"/>
                </params>
                <scope line="64"/>
                <scope line="68"/>
                <scope line="71"/>
                <scope line="74"/>
            </method>
            <javadoc line="78">
                Uninstall the scroll director from the viewport.                
            </javadoc>
            <method name="unInstall" type="void" line="81">
                <scope line="84"/>
                <scope line="87"/>
            </method>
            <javadoc line="93">
                Get the View position given the specified camera bounds.                
                <param>
                    viewBounds The bounds for which the view position will be computed                    
                </param>
                <return>
                    The view position                    
                </return>
            </javadoc>
            <method name="getViewPosition" type="Point" line="98">
                <params>
                    <param name="viewBounds" type="Rectangle2D"/>
                </params>
                <declaration name="pos" type="Point" line="99"/>
                <scope line="100">
                    <declaration name="layerBounds" type="PBounds" line="101"/>
                    <declaration name="layers" type="List" line="102"/>
                    <scope line="103">
                        <declaration name="layer" type="PLayer" line="104"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="113">
                Get the size of the view based on the specified camera bounds.                
                <param>
                    viewBounds The view bounds for which the view size will be
                      computed                    
                </param>
                <return>
                    The view size                    
                </return>
            </javadoc>
            <method name="getViewSize" type="Dimension" line="119">
                <params>
                    <param name="viewBounds" type="Rectangle2D"/>
                </params>
                <declaration name="size" type="Dimension" line="120"/>
                <scope line="121">
                    <declaration name="bounds" type="PBounds" line="122"/>
                    <declaration name="layers" type="List" line="123"/>
                    <scope line="124">
                        <declaration name="layer" type="PLayer" line="125"/>
                    </scope>
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="136">
                Set the view position in a manner consistent with standardized scrolling.                
                <param>
                    x The new x position                    
                </param>
                <param>
                    y The new y position                    
                </param>
            </javadoc>
            <method name="setViewPosition" type="void" line="141">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="142"/>
                <declaration name="layerBounds" type="PBounds" line="146"/>
                <declaration name="layers" type="List" line="147"/>
                <scope line="148">
                    <declaration name="layer" type="PLayer" line="149"/>
                </scope>
                <declaration name="at" type="PAffineTransform" line="152"/>
                <declaration name="viewBounds" type="PBounds" line="154"/>
                <declaration name="newPoint" type="Point2D" line="156"/>
                <declaration name="newX" type="double" line="158"/>
                <declaration name="newY" type="double" line="159"/>
            </method>
            <javadoc line="164">
                Invoked when the camera&apos;s view changes, or the bounds of the root or
                  camera changes.                
                <param>
                    pce property change event to examine                    
                </param>
            </javadoc>
            <method name="propertyChange" type="void" line="169">
                <params>
                    <param name="pce" type="PropertyChangeEvent"/>
                </params>
                <declaration name="isRelevantViewEvent" type="boolean" line="170"/>
                <declaration name="isRelevantBoundsEvent" type="boolean" line="171"/>
                <scope line="172">
                    <scope line="173"/>
                    <scope line="176"/>
                </scope>
            </method>
            <method name="isBoundsChangedEvent" type="boolean" line="181">
                <params>
                    <param name="pce" type="PropertyChangeEvent"/>
                </params>
            </method>
            <javadoc line="184">
                Should the ScrollPane be revalidated. This occurs when either the scroll
                  bars are showing and should be remove or are not showing and should be
                  added.                
                <return>
                    Whether the scroll pane should be revalidated                    
                </return>
            </javadoc>
            <method name="shouldRevalidateScrollPane" type="boolean" line="190">
                <scope line="191">
                    <scope line="192"/>
                    <declaration name="layerBounds" type="PBounds" line="195"/>
                    <declaration name="layers" type="List" line="196"/>
                    <scope line="197">
                        <declaration name="layer" type="PLayer" line="198"/>
                    </scope>
                    <declaration name="cameraBounds" type="PBounds" line="202"/>
                    <declaration name="layerWidth" type="int" line="204"/>
                    <declaration name="layerHeight" type="int" line="205"/>
                    <declaration name="cameraWidth" type="int" line="206"/>
                    <declaration name="cameraHeight" type="int" line="207"/>
                    <scope line="208"/>
                </scope>
            </method>
        </class>
    </source>