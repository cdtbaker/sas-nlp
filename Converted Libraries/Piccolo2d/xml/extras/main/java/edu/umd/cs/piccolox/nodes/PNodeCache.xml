<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.nodes">
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.geom.Dimension2D"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <class name="PNodeCache" line="10">
            <extends class="PNode"/>
            <javadoc line="10">
                &lt;b&gt;PNodeCache&lt;/b&gt; caches a visual representation of it&apos;s children into an
                  image and uses this cached image for painting instead of painting it&apos;s
                  children directly. This is intended to be used in two ways.
                  &lt;p&gt;
                  First it can be used as a simple optimization technique. If a node has many
                  descendents it may be faster to paint the cached image representation instead
                  of painting each node.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Second PNodeCache provides a place where &quot;image&quot; effects such as blurring and
                  drop shadows can be added to the Piccolo scene graph. This can be done by
                  overriding the method createImageCache and returing an image with the desired
                  effect applied.
                  &lt;/p&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="29"/>
            <declaration name="imageCache" type="Image" line="30"/>
            <declaration name="validatingCache" type="boolean" line="31"/>
            <javadoc line="32">
                Override this method to customize the image cache creation process. For
                  example if you want to create a shadow effect you would do that here.
                  Fill in the cacheOffsetRef if needed to make your image cache line up
                  with the nodes children.                
                <param>
                    cacheOffsetRef output parameter that can be changed to make the
                      cached offset line up with the node's children                    
                </param>
                <return>
                    an image representing this node                    
                </return>
            </javadoc>
            <method name="createImageCache" type="Image" line="41">
                <params>
                    <param name="cacheOffsetRef" type="Dimension2D"/>
                </params>
            </method>
            <javadoc line="44">
                Returns an image that is a cached representation of its children.                
                <return>
                    image representation of its children                    
                </return>
            </javadoc>
            <method name="getImageCache" type="Image" line="48">
                <scope line="49">
                    <declaration name="cacheOffsetRef" type="PDimension" line="50"/>
                    <declaration name="b" type="PBounds" line="54"/>
                </scope>
            </method>
            <javadoc line="60">
                Clears the cache, forcing it to be recalculated on the next call to
                  getImageCache.                
            </javadoc>
            <method name="invalidateCache" type="void" line="64"/>
            <javadoc line="67">
                Intercepts the normal invalidatePaint mechanism so that the node will not
                  be repainted unless it&apos;s cache has been invalidated.                
            </javadoc>
            <method name="invalidatePaint" type="void" line="71">
                <scope line="72"/>
            </method>
            <javadoc line="76">
                Handles a repaint event issued from a node in this node&apos;s tree.                
                <param>
                    localBounds local bounds of this node that need repainting                    
                </param>
                <param>
                    childOrThis the node that emitted the repaint notification                    
                </param>
            </javadoc>
            <method name="repaintFrom" type="void" line="81">
                <params>
                    <param name="localBounds" type="PBounds"/>
                    <param name="childOrThis" type="PNode"/>
                </params>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Repaints this node, using the cached result if possible.                
                <param>
                    paintContext context in which painting should occur                    
                </param>
            </javadoc>
            <method name="fullPaint" type="void" line="91">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="92"/>
                <scope line="95">
                    <declaration name="g2" type="Graphics2D" line="96"/>
                </scope>
            </method>
            <javadoc line="100">
                By always returning false, makes the PNodeCache instance NOT pickable.                
                <param>
                    pickPath path which this node is being tested for inclusion                    
                </param>
                <return>
                    always returns false                    
                </return>
            </javadoc>
            <method name="pickAfterChildren" type="boolean" line="105">
                <params>
                    <param name="pickPath" type="PPickPath"/>
                </params>
            </method>
        </class>
    </source>