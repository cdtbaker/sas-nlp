<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.nodes">
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <class name="PClip" line="10">
            <extends class="PPath"/>
            <javadoc line="10">
                &lt;b&gt;PClip&lt;/b&gt; is a simple node that applies a clip before rendering or picking
                  its children. PClip is a subclass of PPath, the clip applies is the
                  GeneralPath wrapped by its super class. See piccolo2d/examples ClipExample.                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="18"/>
            <javadoc line="19">
                Computes the full bounds and stores them in dstBounds, if dstBounds is
                  null, create a new Bounds and returns it.                
                <param>
                    dstBounds output parameter where computed bounds will be stored                    
                </param>
                <return>
                    the computed full bounds                    
                </return>
            </javadoc>
            <method name="computeFullBounds" type="PBounds" line="25">
                <params>
                    <param name="dstBounds" type="PBounds"/>
                </params>
                <declaration name="result" type="PBounds" line="26"/>
                <scope line="27"/>
                <scope line="30"/>
            </method>
            <javadoc line="38">
                Callback that receives notification of repaint requests from nodes in
                  this node&apos;s tree.                
                <param>
                    localBounds region in local coordinations the needs repainting                    
                </param>
                <param>
                    childOrThis the node that emitted the repaint notification                    
                </param>
            </javadoc>
            <method name="repaintFrom" type="void" line="44">
                <params>
                    <param name="localBounds" type="PBounds"/>
                    <param name="childOrThis" type="PNode"/>
                </params>
                <scope line="45"/>
                <scope line="49"/>
            </method>
            <javadoc line="53">
                Paint&apos;s this node as a solid rectangle if paint is provided, clipping
                  appropriately.                
                <param>
                    paintContext context into which this node will be painted                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="58">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <declaration name="p" type="Paint" line="59"/>
                <scope line="60">
                    <declaration name="g2" type="Graphics2D" line="61"/>
                </scope>
            </method>
            <javadoc line="67">
                Paints a border around this node if it has a stroke and stroke paint
                  provided.                
                <param>
                    paintContext context into which the border will be drawn                    
                </param>
            </javadoc>
            <method name="paintAfterChildren" type="void" line="72">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="74">
                    <declaration name="g2" type="Graphics2D" line="75"/>
                </scope>
            </method>
            <javadoc line="81">
                Try to pick this node and all of its descendants if they are visible in
                  the clipping region.                
                <param>
                    pickPath the pick path to add the node to if its picked                    
                </param>
                <return>
                    true if this node or one of its descendants was picked.                    
                </return>
            </javadoc>
            <method name="fullPick" type="boolean" line="87">
                <params>
                    <param name="pickPath" type="PPickPath"/>
                </params>
                <scope line="88">
                    <scope line="91"/>
                    <scope line="94">
                        <declaration name="count" type="int" line="95"/>
                        <scope line="96">
                            <declaration name="each" type="PNode" line="97"/>
                            <scope line="98"/>
                        </scope>
                    </scope>
                    <scope line="103"/>
                </scope>
            </method>
        </class>
    </source>