<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.nodes">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <import package="edu.umd.cs.piccolox.util.LineShape"/>
        <class name="PLine" line="49">
            <extends class="PNode"/>
            <javadoc line="49">
                &lt;b&gt;PLine&lt;/b&gt; a class for drawing multisegment lines.                
                <author>
                    Hallvard Traetteberg.                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="56"/>
            <declaration name="TEMP_TRANSFORM" type="PAffineTransform" line="57"/>
            <declaration name="DEFAULT_STROKE" type="BasicStroke" line="58"/>
            <declaration name="DEFAULT_STROKE_PAINT" type="Color" line="59"/>
            <declaration name="lineShape" type="LineShape" line="61"/>
            <declaration name="stroke" type="Stroke" line="62"/>
            <declaration name="strokePaint" type="Paint" line="63"/>
            <javadoc line="65">
                Constructs a new PLine with an empty LineShape.                
            </javadoc>
            <method name="PLine" type="constructor" line="68"/>
            <javadoc line="72">
                Constructs a PLine object for displaying the provided line.                
                <param>
                    lineShape will be displayed by this PLine                    
                </param>
            </javadoc>
            <method name="PLine" type="constructor" line="77">
                <params>
                    <param name="lineShape" type="LineShape"/>
                </params>
                <scope line="81"/>
                <scope line="84"/>
            </method>
            <javadoc line="89">
                Constructs a PLine for the given lineShape and the given stroke.                
                <param>
                    line line to be wrapped by this PLine                    
                </param>
                <param>
                    aStroke stroke to use when drawling the line                    
                </param>
            </javadoc>
            <method name="PLine" type="constructor" line="95">
                <params>
                    <param name="line" type="LineShape"/>
                    <param name="aStroke" type="Stroke"/>
                </params>
            </method>
            <javadoc line="100">
                Returns the paint to be used while drawing the line.                
                <return>
                    paint used when drawing the line                    
                </return>
            </javadoc>
            <method name="getStrokePaint" type="Paint" line="105"/>
            <javadoc line="109">
                Changes the paint to be used while drawing the line.                
                <param>
                    newStrokePaint paint to use when drawing the line                    
                </param>
            </javadoc>
            <method name="setStrokePaint" type="void" line="114">
                <params>
                    <param name="newStrokePaint" type="Paint"/>
                </params>
                <declaration name="oldPaint" type="Paint" line="115"/>
            </method>
            <javadoc line="121">
                Returns the stroke that will be used when drawing the line.                
                <return>
                    stroke used to draw the line                    
                </return>
            </javadoc>
            <method name="getStroke" type="Stroke" line="126"/>
            <javadoc line="130">
                Sets stroke to use when drawing the line.                
                <param>
                    newStroke stroke to use when drawing the line                    
                </param>
            </javadoc>
            <method name="setStroke" type="void" line="135">
                <params>
                    <param name="newStroke" type="Stroke"/>
                </params>
                <declaration name="oldStroke" type="Stroke" line="136"/>
            </method>
            <javadoc line="143">
                {@inheritDoc}                
            </javadoc>
            <method name="setBounds" type="boolean" line="144">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
                <scope line="145"/>
                <declaration name="lineBounds" type="Rectangle2D" line="149"/>
                <declaration name="lineStrokeBounds" type="Rectangle2D" line="150"/>
                <declaration name="strokeOutset" type="double" line="151"/>
                <declaration name="adjustedX" type="double" line="155"/>
                <declaration name="adjustedY" type="double" line="156"/>
                <declaration name="adjustedWidth" type="double" line="157"/>
                <declaration name="adjustedHeight" type="double" line="158"/>
            </method>
            <javadoc line="169">
                {@inheritDoc}                
            </javadoc>
            <method name="intersects" type="boolean" line="170">
                <params>
                    <param name="aBounds" type="Rectangle2D"/>
                </params>
                <scope line="171">
                    <scope line="172"/>
                    <scope line="175"/>
                </scope>
            </method>
            <javadoc line="182">
                Calculates the bounds of the line taking stroke width into account.                
                <return>
                    rectangle representing the bounds of the line taking stroke width
                      into account                    
                </return>
            </javadoc>
            <method name="getLineBoundsWithStroke" type="Rectangle2D" line="188">
                <scope line="189"/>
                <scope line="192"/>
            </method>
            <javadoc line="197">
                Recalculates the bounds when a change to the underlying line occurs.                
            </javadoc>
            <method name="updateBoundsFromLine" type="void" line="200">
                <scope line="201"/>
                <scope line="204">
                    <declaration name="b" type="Rectangle2D" line="205"/>
                </scope>
            </method>
            <javadoc line="210">
                Paints the PLine in the provided context if it has both a stroke and a
                  stroke paint assigned.                
                <param>
                    paintContext the context into which the line should be drawn                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="216">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <declaration name="g2" type="Graphics2D" line="217"/>
                <scope line="219"/>
            </method>
            <javadoc line="226">
                Returns a reference to the underlying line shape. Be careful!                
                <return>
                    direct reference to the underlying line shape                    
                </return>
            </javadoc>
            <method name="getLineReference" type="LineShape" line="231"/>
            <javadoc line="235">
                Returns the number of points in the line.                
                <return>
                    number of points in the line                    
                </return>
            </javadoc>
            <method name="getPointCount" type="int" line="240"/>
            <javadoc line="244">
                Returns the point at the provided index. If dst is not null, it will
                  populate it with the point&apos;s coordinates rather than create a new point.                
                <param>
                    pointIndex index of desired point in line                    
                </param>
                <param>
                    dst point to populate, may be null                    
                </param>
                <return>
                    the desired point, or dst populate with its coordinates                    
                </return>
            </javadoc>
            <method name="getPoint" type="Point2D" line="252">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="dst" type="Point2D"/>
                </params>
                <declaration name="result" type="Point2D" line="253"/>
                <scope line="254"/>
                <scope line="257"/>
            </method>
            <javadoc line="263">
                Fires appropriate change events, updates line bounds and flags the PLine
                  as requiring a repaint.                
            </javadoc>
            <method name="lineChanged" type="void" line="267"/>
            <javadoc line="273">
                Changes the point at the provided index.                
                <param>
                    pointIndex index of point to change                    
                </param>
                <param>
                    x x component to assign to the point                    
                </param>
                <param>
                    y y component to assign to the point                    
                </param>
            </javadoc>
            <method name="setPoint" type="void" line="280">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="285">
                Inserts a point at the provided index.                
                <param>
                    pointIndex index at which to add the point                    
                </param>
                <param>
                    x x component of new point                    
                </param>
                <param>
                    y y component of new point                    
                </param>
            </javadoc>
            <method name="addPoint" type="void" line="292">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="297">
                Removes points from the line.                
                <param>
                    startIndex index from which to remove the points                    
                </param>
                <param>
                    numberOfPoints number of points to remove                    
                </param>
            </javadoc>
            <method name="removePoints" type="void" line="303">
                <params>
                    <param name="startIndex" type="int"/>
                    <param name="numberOfPoints" type="int"/>
                </params>
            </method>
            <javadoc line="308">
                Removes all points from the underlying line.                
            </javadoc>
            <method name="removeAllPoints" type="void" line="311"/>
            <method name="writeObject" type="void" line="316">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="321">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>