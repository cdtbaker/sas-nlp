<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.event">
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="javax.swing.JTextPane"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.swing.border.CompoundBorder"/>
        <import package="javax.swing.border.EmptyBorder"/>
        <import package="javax.swing.border.LineBorder"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.event.DocumentListener"/>
        <import package="javax.swing.text.Document"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="javax.swing.text.SimpleAttributeSet"/>
        <import package="javax.swing.text.StyleConstants"/>
        <import package="javax.swing.text.StyledDocument"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventFilter"/>
        <import package="edu.umd.cs.piccolox.nodes.PStyledText"/>
        <class name="PStyledTextEventHandler" line="63">
            <extends class="PBasicInputEventHandler"/>
            <javadoc line="63">
                @author Lance Good                
            </javadoc>
            <declaration name="TEXT_EDIT_PADDING" type="int" line="67"/>
            <declaration name="canvas" type="PCanvas" line="69"/>
            <javadoc line="69">
                Canvas onto which this event handler is attached.                
            </javadoc>
            <declaration name="editor" type="JTextComponent" line="72"/>
            <javadoc line="72">
                Editor used to edit a PStyledText&apos;s content when it is in edit mode.                
            </javadoc>
            <declaration name="docListener" type="DocumentListener" line="75"/>
            <javadoc line="75">
                A listener that will handle programatic changes to the underlying
                  document and update the view accordingly.                
            </javadoc>
            <declaration name="editedText" type="PStyledText" line="81"/>
            <javadoc line="81">
                The Styled text being edited.                
            </javadoc>
            <javadoc line="84">
                Basic constructor for PStyledTextEventHandler.                
                <param>
                    canvas canvas to which this handler will be attached                    
                </param>
            </javadoc>
            <method name="PStyledTextEventHandler" type="constructor" line="89">
                <params>
                    <param name="canvas" type="PCanvas"/>
                </params>
                <declaration name="filter" type="PInputEventFilter" line="90"/>
            </method>
            <javadoc line="97">
                Constructor for PStyledTextEventHandler that allows an editor to be
                  specified.                
                <param>
                    canvas canvas to which this handler will be attached                    
                </param>
                <param>
                    editor component to display when editing a PStyledText node                    
                </param>
            </javadoc>
            <method name="PStyledTextEventHandler" type="constructor" line="104">
                <params>
                    <param name="canvas" type="PCanvas"/>
                    <param name="editor" type="JTextComponent"/>
                </params>
            </method>
            <javadoc line="111">
                Installs the editor onto the canvas. Making it the editor that will be
                  used whenever a PStyledText node needs editing.                
                <param>
                    newEditor component responsible for a PStyledText node while it is
                      being edited.                    
                </param>
            </javadoc>
            <method name="initEditor" type="void" line="118">
                <params>
                    <param name="newEditor" type="JTextComponent"/>
                </params>
            </method>
            <javadoc line="128">
                Creates a default editor component to be used when editing a PStyledText
                  node.                
                <return>
                    a freshly created JTextComponent subclass that can be used to
                      edit PStyledText nodes                    
                </return>
            </javadoc>
            <method name="createDefaultEditor" type="JTextComponent" line="135"/>
            <javadoc line="139">
                Returns a document listener that will reshape the editor whenever a
                  change occurs to its attached document.                
                <return>
                    a DocumentListener                    
                </return>
            </javadoc>
            <method name="createDocumentListener" type="DocumentListener" line="145">
                <anonymous_class line="146">
                    <method name="removeUpdate" type="void" line="147">
                        <params>
                            <param name="e" type="DocumentEvent"/>
                        </params>
                    </method>
                    <method name="insertUpdate" type="void" line="151">
                        <params>
                            <param name="e" type="DocumentEvent"/>
                        </params>
                    </method>
                    <method name="changedUpdate" type="void" line="155">
                        <params>
                            <param name="e" type="DocumentEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="161">
                Creates a PStyledText instance and attaches a simple document to it. If
                  possible, it configures its font information too.                
                <return>
                    a new PStyledText instance                    
                </return>
            </javadoc>
            <method name="createText" type="PStyledText" line="167">
                <declaration name="newText" type="PStyledText" line="168"/>
                <declaration name="doc" type="Document" line="170"/>
                <scope line="171">
                    <declaration name="eFont" type="Font" line="172"/>
                    <declaration name="sas" type="SimpleAttributeSet" line="173"/>
                </scope>
            </method>
            <method name="missingFontFamilyOrSize" type="boolean" line="184">
                <params>
                    <param name="doc" type="Document"/>
                </params>
            </method>
            <javadoc line="189">
                A callback that is invoked any time the mouse is pressed on the canvas.
                  If the press occurs directly on the canvas, it create a new PStyledText
                  instance and puts it in editing mode. If the click is on a node, it marks
                  changes it to editing mode.                
                <param>
                    event mouse click event that can be queried                    
                </param>
            </javadoc>
            <method name="mousePressed" type="void" line="197">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <declaration name="pickedNode" type="PNode" line="198"/>
                <scope line="202"/>
                <scope line="206"/>
                <scope line="209">
                    <declaration name="newText" type="PStyledText" line="210"/>
                    <declaration name="pInsets" type="Insets" line="211"/>
                </scope>
            </method>
            <javadoc line="217">
                Begins editing the provided text node as a result of the provided event.
                  Will swap out the text node for an editor.                
                <param>
                    event the event responsible for starting the editing                    
                </param>
                <param>
                    text text node being edited                    
                </param>
            </javadoc>
            <method name="startEditing" type="void" line="224">
                <params>
                    <param name="event" type="PInputEvent"/>
                    <param name="text" type="PStyledText"/>
                </params>
                <comment line="226">
                    Get the node&apos;s top right hand corner                    
                </comment>
                <comment line="232">
                    Update the editor to edit the specified node                    
                </comment>
                <declaration name="pInsets" type="Insets" line="226"/>
                <declaration name="nodePt" type="Point2D" line="227"/>
                <declaration name="bInsets" type="Insets" line="235"/>
            </method>
            <javadoc line="247">
                Stops editing the current text node.                
                <param>
                    event the event responsible for stopping the editing                    
                </param>
            </javadoc>
            <method name="stopEditing" type="void" line="252">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <scope line="253"/>
                <scope line="260"/>
                <scope line="263"/>
                <scope line="267"/>
            </method>
            <javadoc line="277">
                Intercepts Piccolo2D events and dispatches the underlying swing one to
                  the current editor.                
                <param>
                    event the swing event being intercepted                    
                </param>
            </javadoc>
            <method name="dispatchEventToEditor" type="void" line="283">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <comment line="285">
                    We have to nest the mouse press in two invoke laters so that it is
                     fired so that the component has been completely validated at the new
                     size and the mouse event has the correct offset                    
                </comment>
                <anonymous_class line="287">
                    <method name="run" type="void" line="288">
                        <anonymous_class line="289">
                            <method name="run" type="void" line="290">
                                <declaration name="me" type="MouseEvent" line="291"/>
                            </method>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="302">
                Adjusts the shape of the editor to fit the current document.                
            </javadoc>
            <method name="reshapeEditor" type="void" line="305">
                <scope line="306">
                    <declaration name="prefSize" type="Dimension" line="307"/>
                    <declaration name="textInsets" type="Insets" line="309"/>
                    <declaration name="editorInsets" type="Insets" line="310"/>
                    <declaration name="width" type="int" line="312"/>
                    <scope line="313"/>
                    <scope line="316"/>
                    <declaration name="height" type="int" line="324"/>
                    <scope line="325"/>
                    <scope line="328"/>
                </scope>
            </method>
            <javadoc line="337">
                Sometimes we need to invoke this later because the document events seem
                  to get fired before the text is actually incorporated into the document.                
            </javadoc>
            <method name="reshapeEditorLater" type="void" line="341">
                <anonymous_class line="342">
                    <method name="run" type="void" line="343"/>
                </anonymous_class>
            </method>
            <class name="DefaultTextEditor" line="349">
                <extends class="JTextPane"/>
                <declaration name="serialVersionUID" type="long" line="350"/>
                <method name="DefaultTextEditor" type="constructor" line="352">
                    <declaration name="padding" type="EmptyBorder" line="353"/>
                </method>
                <javadoc line="358">
                    Set some rendering hints - if we don&apos;t then the rendering can be
                      inconsistent. Also, Swing doesn&apos;t work correctly with fractional
                      metrics.                    
                </javadoc>
                <method name="paint" type="void" line="363">
                    <params>
                        <param name="graphics" type="Graphics"/>
                    </params>
                    <scope line="364"/>
                    <declaration name="g2" type="Graphics2D" line="368"/>
                </method>
            </class>
        </class>
    </source>