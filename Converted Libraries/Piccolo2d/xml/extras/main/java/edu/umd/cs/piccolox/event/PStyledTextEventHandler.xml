<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.event">
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="javax.swing.JTextPane"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.swing.border.CompoundBorder"/>
        <import package="javax.swing.border.EmptyBorder"/>
        <import package="javax.swing.border.LineBorder"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.event.DocumentListener"/>
        <import package="javax.swing.text.Document"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="javax.swing.text.SimpleAttributeSet"/>
        <import package="javax.swing.text.StyleConstants"/>
        <import package="javax.swing.text.StyledDocument"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventFilter"/>
        <import package="edu.umd.cs.piccolox.nodes.PStyledText"/>
        <class name="PStyledTextEventHandler" line="31">
            <extends class="PBasicInputEventHandler"/>
            <javadoc line="31">
                @author Lance Good                
            </javadoc>
            <declaration name="TEXT_EDIT_PADDING" type="int" line="35"/>
            <declaration name="canvas" type="PCanvas" line="36"/>
            <javadoc line="36">
                Canvas onto which this event handler is attached.                
            </javadoc>
            <declaration name="editor" type="JTextComponent" line="40"/>
            <javadoc line="40">
                Editor used to edit a PStyledText&apos;s content when it is in edit mode.                
            </javadoc>
            <declaration name="docListener" type="DocumentListener" line="44"/>
            <javadoc line="44">
                A listener that will handle programatic changes to the underlying
                  document and update the view accordingly.                
            </javadoc>
            <declaration name="editedText" type="PStyledText" line="49"/>
            <javadoc line="49">
                The Styled text being edited.                
            </javadoc>
            <javadoc line="53">
                Basic constructor for PStyledTextEventHandler.                
                <param>
                    canvas canvas to which this handler will be attached                    
                </param>
            </javadoc>
            <method name="PStyledTextEventHandler" type="constructor" line="57">
                <params>
                    <param name="canvas" type="PCanvas"/>
                </params>
                <declaration name="filter" type="PInputEventFilter" line="58"/>
            </method>
            <javadoc line="64">
                Constructor for PStyledTextEventHandler that allows an editor to be
                  specified.                
                <param>
                    canvas canvas to which this handler will be attached                    
                </param>
                <param>
                    editor component to display when editing a PStyledText node                    
                </param>
            </javadoc>
            <method name="PStyledTextEventHandler" type="constructor" line="70">
                <params>
                    <param name="canvas" type="PCanvas"/>
                    <param name="editor" type="JTextComponent"/>
                </params>
            </method>
            <javadoc line="75">
                Installs the editor onto the canvas. Making it the editor that will be
                  used whenever a PStyledText node needs editing.                
                <param>
                    newEditor component responsible for a PStyledText node while it is
                      being edited.                    
                </param>
            </javadoc>
            <method name="initEditor" type="void" line="81">
                <params>
                    <param name="newEditor" type="JTextComponent"/>
                </params>
            </method>
            <javadoc line="88">
                Creates a default editor component to be used when editing a PStyledText
                  node.                
                <return>
                    a freshly created JTextComponent subclass that can be used to
                      edit PStyledText nodes                    
                </return>
            </javadoc>
            <method name="createDefaultEditor" type="JTextComponent" line="94"/>
            <javadoc line="97">
                Returns a document listener that will reshape the editor whenever a
                  change occurs to its attached document.                
                <return>
                    a DocumentListener                    
                </return>
            </javadoc>
            <method name="createDocumentListener" type="DocumentListener" line="102">
                <anonymous_class line="103">
                    <method name="removeUpdate" type="void" line="104">
                        <params>
                            <param name="e" type="DocumentEvent"/>
                        </params>
                    </method>
                    <method name="insertUpdate" type="void" line="107">
                        <params>
                            <param name="e" type="DocumentEvent"/>
                        </params>
                    </method>
                    <method name="changedUpdate" type="void" line="110">
                        <params>
                            <param name="e" type="DocumentEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="116">
                Creates a PStyledText instance and attaches a simple document to it. If
                  possible, it configures its font information too.                
                <return>
                    a new PStyledText instance                    
                </return>
            </javadoc>
            <method name="createText" type="PStyledText" line="121">
                <declaration name="newText" type="PStyledText" line="122"/>
                <declaration name="doc" type="Document" line="123"/>
                <scope line="124">
                    <declaration name="eFont" type="Font" line="125"/>
                    <declaration name="sas" type="SimpleAttributeSet" line="126"/>
                </scope>
            </method>
            <method name="missingFontFamilyOrSize" type="boolean" line="134">
                <params>
                    <param name="doc" type="Document"/>
                </params>
            </method>
            <javadoc line="137">
                A callback that is invoked any time the mouse is pressed on the canvas.
                  If the press occurs directly on the canvas, it create a new PStyledText
                  instance and puts it in editing mode. If the click is on a node, it marks
                  changes it to editing mode.                
                <param>
                    event mouse click event that can be queried                    
                </param>
            </javadoc>
            <method name="mousePressed" type="void" line="144">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <declaration name="pickedNode" type="PNode" line="145"/>
                <scope line="147"/>
                <scope line="150"/>
                <scope line="153">
                    <declaration name="newText" type="PStyledText" line="154"/>
                    <declaration name="pInsets" type="Insets" line="155"/>
                </scope>
            </method>
            <javadoc line="160">
                Begins editing the provided text node as a result of the provided event.
                  Will swap out the text node for an editor.                
                <param>
                    event the event responsible for starting the editing                    
                </param>
                <param>
                    text text node being edited                    
                </param>
            </javadoc>
            <method name="startEditing" type="void" line="166">
                <params>
                    <param name="event" type="PInputEvent"/>
                    <param name="text" type="PStyledText"/>
                </params>
                <declaration name="pInsets" type="Insets" line="167"/>
                <declaration name="nodePt" type="Point2D" line="168"/>
                <declaration name="bInsets" type="Insets" line="173"/>
            </method>
            <javadoc line="182">
                Stops editing the current text node.                
                <param>
                    event the event responsible for stopping the editing                    
                </param>
            </javadoc>
            <method name="stopEditing" type="void" line="186">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <scope line="187"/>
                <scope line="192"/>
                <scope line="195"/>
                <scope line="198"/>
            </method>
            <javadoc line="206">
                Intercepts Piccolo2D events and dispatches the underlying swing one to
                  the current editor.                
                <param>
                    event the swing event being intercepted                    
                </param>
            </javadoc>
            <method name="dispatchEventToEditor" type="void" line="211">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <anonymous_class line="212">
                    <method name="run" type="void" line="213">
                        <anonymous_class line="214">
                            <method name="run" type="void" line="215">
                                <declaration name="me" type="MouseEvent" line="216"/>
                            </method>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="225">
                Adjusts the shape of the editor to fit the current document.                
            </javadoc>
            <method name="reshapeEditor" type="void" line="228">
                <scope line="229">
                    <declaration name="prefSize" type="Dimension" line="230"/>
                    <declaration name="textInsets" type="Insets" line="231"/>
                    <declaration name="editorInsets" type="Insets" line="232"/>
                    <declaration name="width" type="int" line="233"/>
                    <scope line="234"/>
                    <scope line="237"/>
                    <declaration name="height" type="int" line="243"/>
                    <scope line="244"/>
                    <scope line="247"/>
                </scope>
            </method>
            <javadoc line="254">
                Sometimes we need to invoke this later because the document events seem
                  to get fired before the text is actually incorporated into the document.                
            </javadoc>
            <method name="reshapeEditorLater" type="void" line="258">
                <anonymous_class line="259">
                    <method name="run" type="void" line="260"/>
                </anonymous_class>
            </method>
            <class name="DefaultTextEditor" line="266">
                <extends class="JTextPane"/>
                <declaration name="serialVersionUID" type="long" line="267"/>
                <method name="DefaultTextEditor" type="constructor" line="268">
                    <declaration name="padding" type="EmptyBorder" line="269"/>
                </method>
                <javadoc line="272">
                    Set some rendering hints - if we don&apos;t then the rendering can be
                      inconsistent. Also, Swing doesn&apos;t work correctly with fractional
                      metrics.                    
                </javadoc>
                <method name="paint" type="void" line="277">
                    <params>
                        <param name="graphics" type="Graphics"/>
                    </params>
                    <scope line="278"/>
                    <declaration name="g2" type="Graphics2D" line="281"/>
                </method>
            </class>
        </class>
    </source>