<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swing">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.FlowLayout"/>
        <import package="java.awt.LayoutManager"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.JPanel"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <class name="SwingLayoutNode" line="14">
            <extends class="PNode"/>
            <javadoc line="14">
                Uses Swing layout managers to position PNodes.                
                <author>
                    Sam Reid                    
                </author>
                <author>
                    Chris Malley (cmalley@pixelzoom.com)                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="20"/>
            <declaration name="DEFAULT_ANCHOR" type="Anchor" line="21"/>
            <declaration name="container" type="Container" line="22"/>
            <javadoc line="22">
                Container for ProxyComponents.                
            </javadoc>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="26"/>
            <declaration name="defaultAnchor" type="Anchor" line="27"/>
            <javadoc line="27">
                Anchor to use when adding child nodes and they don&apos;t specify one.                
            </javadoc>
            <javadoc line="31">
                Construct a SwingLayoutNode that uses FlowLayout.                
            </javadoc>
            <method name="SwingLayoutNode" type="constructor" line="34"/>
            <javadoc line="37">
                Constructs a SwingLayoutNode that uses the provided LayoutManager to
                  layout its children.                
                <param>
                    layoutManager LayoutManager to use for laying out children. Must
                      not be null.                    
                </param>
            </javadoc>
            <method name="SwingLayoutNode" type="constructor" line="43">
                <params>
                    <param name="layoutManager" type="LayoutManager"/>
                </params>
            </method>
            <javadoc line="46">
                Constructs a SwingLayoutNode that lays out its children as though they
                  were children of the provided Container.
                  Whatever LayoutManager is being used by the container will be used when
                  laying out nodes.                
                <param>
                    container Container in which child nodes will effectively be laid
                      out                    
                </param>
            </javadoc>
            <method name="SwingLayoutNode" type="constructor" line="54">
                <params>
                    <param name="container" type="Container"/>
                </params>
                <anonymous_class line="56">
                    <method name="propertyChange" type="void" line="57">
                        <params>
                            <param name="event" type="PropertyChangeEvent"/>
                        </params>
                        <declaration name="propertyName" type="String" line="58"/>
                        <scope line="59"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="67">
                Sets the default anchor. If no anchor is specified when a node is added,
                  then the default anchor determines where the node is positioned in the
                  space allocated by the Swing layout manager.                
                <param>
                    anchor anchor to use when a node is added but its anchor is not
                      specified                    
                </param>
            </javadoc>
            <method name="setAnchor" type="void" line="74">
                <params>
                    <param name="anchor" type="Anchor"/>
                </params>
            </method>
            <javadoc line="77">
                Returns the anchor being used by this LayoutManager.                
                <return>
                    anchor currently being used when laying out children.                    
                </return>
            </javadoc>
            <method name="getAnchor" type="Anchor" line="81"/>
            <javadoc line="84">
                Some Swing layout managers (like BoxLayout) require a reference to the
                  proxy Container.
                  For example: &lt;code&gt;
                  SwingLayoutNode layoutNode = new SwingLayoutNode();
                  layoutNode.setLayout( new BoxLayout( layoutNode.getContainer(), BoxLayout.Y_AXIS ) );
                  &lt;/code&gt;                
                <return>
                    container in which children will logically be laid out in                    
                </return>
            </javadoc>
            <method name="getContainer" type="Container" line="93"/>
            <javadoc line="96">
                Adds a child at the specified index. Like Swing, bad things can happen if
                  the type of the constraints isn&apos;t compatible with the layout manager.                
                <param>
                    index 0 based index at which to add the child                    
                </param>
                <param>
                    child child to be added                    
                </param>
                <param>
                    constraints constraints the layout manager uses when laying out
                      the child                    
                </param>
                <param>
                    childAnchor specifies the location from which layout takes place                    
                </param>
            </javadoc>
            <method name="addChild" type="void" line="105">
                <params>
                    <param name="index" type="int"/>
                    <param name="child" type="PNode"/>
                    <param name="constraints" type="Object"/>
                    <param name="childAnchor" type="Anchor"/>
                </params>
            </method>
            <javadoc line="109">
                {@inheritDoc}                
            </javadoc>
            <method name="addChild" type="void" line="112">
                <params>
                    <param name="index" type="int"/>
                    <param name="child" type="PNode"/>
                </params>
            </method>
            <javadoc line="115">
                Adds a child at the specified index. Like Swing, bad things can happen if
                  the type of the constraints isn&apos;t compatible with the layout manager.                
                <param>
                    index 0 based index at which to add the child                    
                </param>
                <param>
                    child child to be added                    
                </param>
                <param>
                    constraints constraints the layout manager uses when laying out
                      the child                    
                </param>
            </javadoc>
            <method name="addChild" type="void" line="123">
                <params>
                    <param name="index" type="int"/>
                    <param name="child" type="PNode"/>
                    <param name="constraints" type="Object"/>
                </params>
            </method>
            <javadoc line="126">
                Adds a child at the specified index.                
                <param>
                    index 0 based index at which to add the child                    
                </param>
                <param>
                    child child to be added                    
                </param>
                <param>
                    anchor specifies the location from which layout takes place                    
                </param>
            </javadoc>
            <method name="addChild" type="void" line="132">
                <params>
                    <param name="index" type="int"/>
                    <param name="child" type="PNode"/>
                    <param name="anchor" type="Anchor"/>
                </params>
            </method>
            <javadoc line="135">
                Adds a child to the end of the node list.                
                <param>
                    child child to be added                    
                </param>
                <param>
                    constraints constraints the layout manager uses when laying out
                      the child                    
                </param>
                <param>
                    anchor specifies the location from which layout takes place                    
                </param>
            </javadoc>
            <method name="addChild" type="void" line="142">
                <params>
                    <param name="child" type="PNode"/>
                    <param name="constraints" type="Object"/>
                    <param name="anchor" type="Anchor"/>
                </params>
                <declaration name="index" type="int" line="143"/>
                <scope line="144"/>
            </method>
            <javadoc line="149">
                Adds a child to the end of the node list.                
                <param>
                    child child to be added                    
                </param>
            </javadoc>
            <method name="addChild" type="void" line="153">
                <params>
                    <param name="child" type="PNode"/>
                </params>
            </method>
            <javadoc line="156">
                Adds a child to the end of the node list and specifies the given
                  constraints.                
                <param>
                    child child to be added                    
                </param>
                <param>
                    constraints constraints the layout manager uses when laying out
                      the child                    
                </param>
            </javadoc>
            <method name="addChild" type="void" line="163">
                <params>
                    <param name="child" type="PNode"/>
                    <param name="constraints" type="Object"/>
                </params>
            </method>
            <javadoc line="166">
                Adds a child to the end of the node list.                
                <param>
                    child child to be added                    
                </param>
                <param>
                    anchor specifies the location from which layout takes place                    
                </param>
            </javadoc>
            <method name="addChild" type="void" line="171">
                <params>
                    <param name="child" type="PNode"/>
                    <param name="anchor" type="Anchor"/>
                </params>
            </method>
            <javadoc line="174">
                Adds a collection of nodes to the end of the list.                
                <param>
                    nodes nodes to add to the end of the list                    
                </param>
                <param>
                    constraints constraints the layout manager uses when laying out
                      the child                    
                </param>
                <param>
                    anchor specifies the location from which layout takes place                    
                </param>
            </javadoc>
            <method name="addChildren" type="void" line="181">
                <params>
                    <param name="nodes" type="Collection"/>
                    <param name="constraints" type="Object"/>
                    <param name="anchor" type="Anchor"/>
                </params>
                <declaration name="i" type="Iterator" line="182"/>
                <scope line="183">
                    <declaration name="each" type="PNode" line="184"/>
                </scope>
            </method>
            <javadoc line="188">
                {@inheritDoc}                
            </javadoc>
            <method name="addChildren" type="void" line="191">
                <params>
                    <param name="nodes" type="Collection"/>
                </params>
            </method>
            <javadoc line="194">
                Adds a collection of nodes to the end of the list.                
                <param>
                    nodes nodes to add to the end of the list                    
                </param>
                <param>
                    constraints constraints the layout manager uses when laying out
                      the child                    
                </param>
            </javadoc>
            <method name="addChildren" type="void" line="200">
                <params>
                    <param name="nodes" type="Collection"/>
                    <param name="constraints" type="Object"/>
                </params>
            </method>
            <javadoc line="203">
                Adds a collection of nodes to the end of the list.                
                <param>
                    nodes nodes to add to the end of the list                    
                </param>
                <param>
                    anchor specifies the location from which layout takes place                    
                </param>
            </javadoc>
            <method name="addChildren" type="void" line="208">
                <params>
                    <param name="nodes" type="Collection"/>
                    <param name="anchor" type="Anchor"/>
                </params>
            </method>
            <javadoc line="211">
                Removes a node at a specified index.                
                <param>
                    index 0 based index of the child to be removed                    
                </param>
            </javadoc>
            <method name="removeChild" type="PNode" line="215">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="node" type="PNode" line="216"/>
            </method>
            <javadoc line="220">
                PNode.removeAllChildren does not call removeChild, it manipulates an
                  internal data structure. So we must override this in a more careful (and
                  less efficient) manner.                
            </javadoc>
            <method name="removeAllChildren" type="void" line="225">
                <declaration name="i" type="Iterator" line="226"/>
                <scope line="227"/>
            </method>
            <javadoc line="231">
                Adds a proxy component for a node.                
                <param>
                    node node for which to add the proxy component                    
                </param>
                <param>
                    constraints Constraints to apply when laying out the component                    
                </param>
                <param>
                    anchor relative anchor point of the underyling proxy component on
                      its container                    
                </param>
            </javadoc>
            <method name="addProxyComponent" type="void" line="238">
                <params>
                    <param name="node" type="PNode"/>
                    <param name="constraints" type="Object"/>
                    <param name="anchor" type="Anchor"/>
                </params>
                <declaration name="component" type="ProxyComponent" line="239"/>
            </method>
            <javadoc line="244">
                Removes a proxy component for a node. Does nothing if the node is not a
                  child of the layout.                
                <param>
                    node node from which the proxy container should be removed from.                    
                </param>
            </javadoc>
            <method name="removeProxyComponent" type="void" line="249">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <scope line="250">
                    <declaration name="component" type="ProxyComponent" line="251"/>
                    <scope line="252"/>
                </scope>
            </method>
            <javadoc line="259">
                Finds the component that is serving as the proxy for a specific node.
                  Returns null if not found.                
            </javadoc>
            <method name="getComponentForNode" type="ProxyComponent" line="263">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <declaration name="nodeComponent" type="ProxyComponent" line="264"/>
                <declaration name="components" type="Component[]" line="265"/>
                <scope line="266">
                    <scope line="267">
                        <scope line="268">
                            <declaration name="n" type="ProxyComponent" line="269"/>
                            <scope line="270"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="278">
                Helper to figure out if the given property name relates to layout.                
                <param>
                    propertyName name of property being tested                    
                </param>
                <return>
                    true property name relates to layout.                    
                </return>
            </javadoc>
            <method name="isLayoutProperty" type="boolean" line="283">
                <params>
                    <param name="propertyName" type="String"/>
                </params>
            </method>
            <javadoc line="286">
                Updates the Proxy Container&apos;s layout.                
            </javadoc>
            <method name="updateContainerLayout" type="void" line="289"/>
            <class name="ProxyComponent" line="294">
                <extends class="JComponent"/>
                <javadoc line="294">
                    JComponent that acts as a proxy for a PNode. Provides the PNode&apos;s bounds
                      info for all bounds-related requests.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="299"/>
                <declaration name="node" type="PNode" line="300"/>
                <declaration name="anchor" type="Anchor" line="301"/>
                <method name="ProxyComponent" type="constructor" line="302">
                    <params>
                        <param name="node" type="PNode"/>
                        <param name="anchor" type="Anchor"/>
                    </params>
                </method>
                <javadoc line="306">
                    Returns the associated PNode.                    
                    <return>
                        associated PNode                        
                    </return>
                </javadoc>
                <method name="getNode" type="PNode" line="310"/>
                <javadoc line="313">
                    Report the node&apos;s dimensions as the ProxyComponent&apos;s preferred size.                    
                </javadoc>
                <method name="getPreferredSize" type="Dimension" line="316">
                    <declaration name="w" type="double" line="317"/>
                    <declaration name="h" type="double" line="318"/>
                </method>
                <method name="roundUp" type="int" line="321">
                    <params>
                        <param name="val" type="double"/>
                    </params>
                </method>
                <javadoc line="324">
                    Return the PNode size as the minimum dimension; required by layouts
                      such as BoxLayout.                    
                    <return>
                        the minimum size for this component                        
                    </return>
                </javadoc>
                <method name="getMinimumSize" type="Dimension" line="329"/>
                <javadoc line="332">
                    Sets the bounds of the ProxyComponent and positions the node in the
                      area (x,y,w,h) allocated by the layout manager.                    
                </javadoc>
                <method name="setBounds" type="void" line="336">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <scope line="337"/>
                </method>
            </class>
            <interface name="Anchor">
                <javadoc line="343">
                    Determines where nodes are anchored in the area allocated by the Swing
                      layout manager. Predefined anchor names are similar to GridBagConstraint
                      anchors and have the same semantics.                    
                </javadoc>
                <method name="positionNode" type="void" line="349"/>
                <javadoc line="349">
                    Positions the node in the bounds defined.                    
                    <param>
                        node node to be laid out                        
                    </param>
                    <param>
                        x left of bounds                        
                    </param>
                    <param>
                        y top of bounds                        
                    </param>
                    <param>
                        width width of bounds                        
                    </param>
                    <param>
                        height height of bounds                        
                    </param>
                </javadoc>
                <declaration name="CENTER" type="Anchor" line="358"/>
                <javadoc line="358">
                    Anchors the node&apos;s center as the point used when laying it out.                    
                </javadoc>
                <anonymous_class line="361">
                    <javadoc line="362">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="positionNode" type="void" line="365">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                            <param name="w" type="double"/>
                            <param name="h" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="NORTH" type="Anchor" line="370"/>
                <javadoc line="370">
                    Anchors the node&apos;s top center as the point used when laying it out.                    
                </javadoc>
                <anonymous_class line="373">
                    <javadoc line="374">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="positionNode" type="void" line="377">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                            <param name="w" type="double"/>
                            <param name="h" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="NORTHEAST" type="Anchor" line="382"/>
                <javadoc line="382">
                    Anchors the node&apos;s top right as the point used when laying it out.                    
                </javadoc>
                <anonymous_class line="385">
                    <javadoc line="386">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="positionNode" type="void" line="389">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                            <param name="w" type="double"/>
                            <param name="h" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="EAST" type="Anchor" line="394"/>
                <javadoc line="394">
                    Anchors the node&apos;s middle right as the point used when laying it out.                    
                </javadoc>
                <anonymous_class line="397">
                    <javadoc line="398">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="positionNode" type="void" line="401">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                            <param name="w" type="double"/>
                            <param name="h" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="SOUTHEAST" type="Anchor" line="406"/>
                <javadoc line="406">
                    Anchors the node&apos;s bottom right as the point used when laying it out.                    
                </javadoc>
                <anonymous_class line="409">
                    <javadoc line="410">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="positionNode" type="void" line="413">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                            <param name="w" type="double"/>
                            <param name="h" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="SOUTH" type="Anchor" line="418"/>
                <javadoc line="418">
                    Anchors the node&apos;s center bottom as the point used when laying it
                      out.                    
                </javadoc>
                <anonymous_class line="422">
                    <javadoc line="423">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="positionNode" type="void" line="426">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                            <param name="w" type="double"/>
                            <param name="h" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="SOUTHWEST" type="Anchor" line="431"/>
                <javadoc line="431">
                    Anchors the node&apos;s bottom left as the point used when laying it out.                    
                </javadoc>
                <anonymous_class line="434">
                    <javadoc line="435">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="positionNode" type="void" line="438">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                            <param name="w" type="double"/>
                            <param name="h" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="WEST" type="Anchor" line="443"/>
                <javadoc line="443">
                    Anchors the node&apos;s middle left as the point used when laying it out.                    
                </javadoc>
                <anonymous_class line="446">
                    <javadoc line="447">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="positionNode" type="void" line="450">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                            <param name="w" type="double"/>
                            <param name="h" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="NORTHWEST" type="Anchor" line="455"/>
                <javadoc line="455">
                    Anchors the node&apos;s top left as the point used when laying it out.                    
                </javadoc>
                <anonymous_class line="458">
                    <javadoc line="459">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="positionNode" type="void" line="462">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="y" type="double"/>
                            <param name="w" type="double"/>
                            <param name="h" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <class name="AbstractAnchor" line="467">
                    <implements interface="Anchor"/>
                    <javadoc line="468">
                        Returns the x at which the given node would need to be placed so
                          that its center was in the middle of the horizontal segment
                          defined by x and width.                        
                        <param>
                            node node which is being analyzed                            
                        </param>
                        <param>
                            x x component of horizontal line segment                            
                        </param>
                        <param>
                            width width of horizontal line segment                            
                        </param>
                        <return>
                            x at which node would need to be placed so that its
                              center matched the center of the line segment                            
                        </return>
                    </javadoc>
                    <method name="centerX" type="double" line="478">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="width" type="double"/>
                        </params>
                    </method>
                    <javadoc line="481">
                        Returns the y at which the given node would need to be placed so
                          that its center was in the middle of the vertical segment defined
                          by y and h.                        
                        <param>
                            node node which is being analyzed                            
                        </param>
                        <param>
                            y y component of horizontal line segment                            
                        </param>
                        <param>
                            height height of vertical line segment                            
                        </param>
                        <return>
                            y at which node would need to be placed so that its
                              center matched the center of the line segment                            
                        </return>
                    </javadoc>
                    <method name="centerY" type="double" line="491">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="y" type="double"/>
                            <param name="height" type="double"/>
                        </params>
                    </method>
                    <javadoc line="494">
                        Returns the y at which the given node would need to be placed so
                          that its top was against the top of the vertical segment defined.                        
                        <param>
                            node node which is being analyzed                            
                        </param>
                        <param>
                            y y component of horizontal line segment                            
                        </param>
                        <param>
                            height height of vertical line segment                            
                        </param>
                        <return>
                            y at which node would need to be placed so that its top
                              matched the start of the line segment (y)                            
                        </return>
                    </javadoc>
                    <method name="north" type="double" line="503">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="y" type="double"/>
                            <param name="height" type="double"/>
                        </params>
                    </method>
                    <javadoc line="506">
                        Returns the y at which the given node would need to be placed so
                          that its bottom was against the bottom of the vertical range
                          defined.                        
                        <param>
                            node node which is being analyzed                            
                        </param>
                        <param>
                            y y component of vertical range                            
                        </param>
                        <param>
                            height height of vertical range                            
                        </param>
                        <return>
                            y at which node would need to be placed so that its
                              bottom matched the bottom of the range                            
                        </return>
                    </javadoc>
                    <method name="south" type="double" line="516">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="y" type="double"/>
                            <param name="height" type="double"/>
                        </params>
                    </method>
                    <javadoc line="519">
                        Returns the x at which the given node would need to be placed so
                          that its right side was against the right side of the horizontal
                          range defined.                        
                        <param>
                            node node which is being analyzed                            
                        </param>
                        <param>
                            x x component of horizontal range                            
                        </param>
                        <param>
                            width width of horizontal range                            
                        </param>
                        <return>
                            x at which node would need to be placed so that its right
                              side touched the right side of the range defined.                            
                        </return>
                    </javadoc>
                    <method name="east" type="double" line="529">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="width" type="double"/>
                        </params>
                    </method>
                    <javadoc line="532">
                        Returns the x at which the given node would need to be placed so
                          that its left side was against the left side of the horizontal
                          range defined.                        
                        <param>
                            node node which is being analyzed                            
                        </param>
                        <param>
                            x x component of horizontal range                            
                        </param>
                        <param>
                            width width of horizontal range                            
                        </param>
                        <return>
                            x at which node would need to be placed so that its left
                              side touched the left side of the range defined (x)                            
                        </return>
                    </javadoc>
                    <method name="west" type="double" line="542">
                        <params>
                            <param name="node" type="PNode"/>
                            <param name="x" type="double"/>
                            <param name="width" type="double"/>
                        </params>
                    </method>
                </class>
            </interface>
        </class>
    </source>