<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.pswing">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventListener"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransformException"/>
        <class name="PSwingEventHandler" line="51">
            <implements interface="PInputEventListener"/>
            <javadoc line="51">
                Event handler to send MousePressed, MouseReleased, MouseMoved, MouseClicked,
                  and MouseDragged events on Swing components within a PCanvas.                
                <author>
                    Ben Bederson                    
                </author>
                <author>
                    Lance Good                    
                </author>
                <author>
                    Sam Reid                    
                </author>
            </javadoc>
            <declaration name="listenNode" type="PNode" line="60"/>
            <javadoc line="60">
                Used to listen for events.                
            </javadoc>
            <declaration name="active" type="boolean" line="63"/>
            <javadoc line="63">
                Tracks whether this event handler is active.                
            </javadoc>
            <declaration name="previousComponent" type="Component" line="66"/>
            <javadoc line="66">
                The previous component - used to generate mouseEntered and mouseExited
                  events.                
            </javadoc>
            <declaration name="prevPoint" type="Point2D" line="72"/>
            <javadoc line="72">
                Previous point used for mouseEntered and exited events.                
            </javadoc>
            <declaration name="previousOffset" type="Point2D" line="75"/>
            <javadoc line="75">
                Previous offset used for mouseEntered and exited events.                
            </javadoc>
            <declaration name="recursing" type="boolean" line="78"/>
            <javadoc line="78">
                Used to avoid accidental recursive handling.                
            </javadoc>
            <declaration name="leftButtonData" type="ButtonData" line="81"/>
            <javadoc line="81">
                Used for tracking the left button&apos;s state.                
            </javadoc>
            <declaration name="middleButtonData" type="ButtonData" line="84"/>
            <javadoc line="84">
                Used for tracking the middle button&apos;s state.                
            </javadoc>
            <declaration name="rightButtonData" type="ButtonData" line="87"/>
            <javadoc line="87">
                Used for tracking the right button&apos;s state.                
            </javadoc>
            <declaration name="canvas" type="PSwingCanvas" line="90"/>
            <javadoc line="90">
                The Canvas in which all this pswing activity is taking place.                
            </javadoc>
            <javadoc line="93">
                Constructs a new PSwingEventHandler for the given canvas, and a node that
                  will receive the mouse events.                
                <param>
                    canvas the canvas associated with this PSwingEventHandler.                    
                </param>
                <param>
                    listenNode the node the mouse listeners will be attached to.                    
                </param>
            </javadoc>
            <method name="PSwingEventHandler" type="constructor" line="100">
                <params>
                    <param name="canvas" type="PSwingCanvas"/>
                    <param name="listenNode" type="PNode"/>
                </params>
            </method>
            <javadoc line="105">
                Constructs a new PSwingEventHandler for the given canvas.                
                <param>
                    canvas to associate this event handler to                    
                </param>
            </javadoc>
            <method name="PSwingEventHandler" type="constructor" line="110">
                <params>
                    <param name="canvas" type="PSwingCanvas"/>
                </params>
            </method>
            <javadoc line="114">
                Sets whether this event handler can fire events.                
                <param>
                    active true if this event handler can fire events                    
                </param>
            </javadoc>
            <method name="setActive" type="void" line="119">
                <params>
                    <param name="active" type="boolean"/>
                </params>
                <scope line="120">
                    <scope line="121"/>
                </scope>
                <scope line="126"/>
            </method>
            <javadoc line="132">
                Returns if this event handler is active.                
                <return>
                    true if can fire events                    
                </return>
            </javadoc>
            <method name="isActive" type="boolean" line="137"/>
            <javadoc line="141">
                Finds the best visible component or subcomponent at the specified
                  location.                
                <param>
                    component component to test children or self for                    
                </param>
                <param>
                    x x component of location                    
                </param>
                <param>
                    y y component of location                    
                </param>
                <return>
                    the component or subcomponent at the specified location.                    
                </return>
            </javadoc>
            <method name="findShowingComponentAt" type="Component" line="150">
                <params>
                    <param name="component" type="Component"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="151"/>
                <scope line="155">
                    <declaration name="contain" type="Container" line="156"/>
                    <declaration name="child" type="Component" line="157"/>
                    <scope line="158"/>
                </scope>
            </method>
            <method name="findShowingChildAt" type="Component" line="165">
                <params>
                    <param name="container" type="Container"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="children" type="Component[]" line="166"/>
                <scope line="168">
                    <declaration name="child" type="Component" line="169"/>
                    <scope line="170">
                        <declaration name="p" type="Point" line="171"/>
                        <scope line="172"/>
                        <scope line="175"/>
                        <scope line="178"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="187">
                Determines if any Swing components in Piccolo2D should receive the given
                  MouseEvent and forwards the event to that component. However,
                  mouseEntered and mouseExited are independent of the buttons. Also, notice
                  the notes on mouseEntered and mouseExited.                
                <param>
                    pSwingMouseEvent event being dispatched                    
                </param>
                <param>
                    aEvent Piccolo2D event translation of the pSwingMouseEvent                    
                </param>
            </javadoc>
            <method name="dispatchEvent" type="void" line="196">
                <params>
                    <param name="pSwingMouseEvent" type="PSwingEvent"/>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
                <comment line="216">
                    This is only partially fixed to find the deepest
                     component at pt. It needs to do something like
                     package private method:
                     Container.getMouseEventTarget(int,int,boolean)                    
                </comment>
                <comment line="222">
                    We found the right component - but we need to
                     get the offset to put the event in the component&apos;s
                     coordinates                    
                </comment>
                <comment line="229">
                    Mouse Pressed gives focus - effects Mouse Drags and
                     Mouse Releases                    
                </comment>
                <comment line="244">
                    This first case we don&apos;t want to give events to just
                     any Swing component - but to the one that got the
                     original mousePressed                    
                </comment>
                <comment line="280">
                    Now we need to check if an exit or enter event needs to
                     be dispatched - this code is independent of the mouseButtons.
                     I tested in normal Swing to see the correct behavior.                    
                </comment>
                <comment line="284">
                    This means mouseExited                    
                </comment>
                <comment line="286">
                    This shouldn&apos;t happen - since we&apos;re only getting node events                    
                </comment>
                <comment line="296">
                    This means mouseExited prevComponent and mouseEntered comp                    
                </comment>
                <comment line="307">
                    This means mouseEntered                    
                </comment>
                <declaration name="mEvent" type="MouseEvent" line="197"/>
                <declaration name="pickedNode" type="PNode" line="198"/>
                <declaration name="currentNode" type="PNode" line="199"/>
                <declaration name="comp" type="Component" line="201"/>
                <declaration name="point" type="Point" line="202"/>
                <declaration name="offset" type="Point" line="204"/>
                <scope line="206">
                    <declaration name="swing" type="PSwing" line="208"/>
                    <declaration name="grabNode" type="PNode" line="209"/>
                    <scope line="224"/>
                    <scope line="230">
                        <scope line="231"/>
                        <scope line="234"/>
                        <scope line="237"/>
                    </scope>
                </scope>
                <scope line="246">
                    <scope line="247"/>
                    <scope line="251"/>
                    <scope line="255"/>
                </scope>
                <scope line="259">
                    <declaration name="tempEvent" type="MouseEvent" line="260"/>
                    <declaration name="e2" type="PSwingEvent" line="264"/>
                </scope>
                <scope line="267">
                    <declaration name="mWEvent" type="MouseWheelEvent" line="268"/>
                    <declaration name="tempEvent" type="MouseWheelEvent" line="270"/>
                    <declaration name="e2" type="PSwingMouseWheelEvent" line="275"/>
                </scope>
                <scope line="282">
                    <scope line="286">
                        <declaration name="tempEvent" type="MouseEvent" line="287"/>
                        <declaration name="e2" type="PSwingEvent" line="289"/>
                    </scope>
                    <scope line="296">
                        <declaration name="tempEvent" type="MouseEvent" line="297"/>
                        <declaration name="e2" type="PSwingEvent" line="298"/>
                    </scope>
                </scope>
                <scope line="306">
                    <declaration name="tempEvent" type="MouseEvent" line="307"/>
                    <declaration name="e2" type="PSwingEvent" line="308"/>
                </scope>
                <scope line="314"/>
            </method>
            <method name="extractSwingOffset" type="Point" line="319">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="swing" type="PSwing"/>
                </params>
                <declaration name="offsetX" type="int" line="320"/>
                <declaration name="offsetY" type="int" line="321"/>
                <scope line="323"/>
            </method>
            <method name="isRightMouseButtonOnComponent" type="boolean" line="331">
                <params>
                    <param name="mEvent" type="MouseEvent"/>
                </params>
            </method>
            <method name="isMiddleMouseButtonOnComponent" type="boolean" line="335">
                <params>
                    <param name="mEvent" type="MouseEvent"/>
                </params>
            </method>
            <method name="isLeftMouseButtonOnComponent" type="boolean" line="339">
                <params>
                    <param name="mEvent" type="MouseEvent"/>
                </params>
            </method>
            <method name="isMousePress" type="boolean" line="343">
                <params>
                    <param name="pSwingMouseEvent" type="PSwingEvent"/>
                </params>
            </method>
            <method name="isWheelEvent" type="boolean" line="347">
                <params>
                    <param name="pSwingMouseEvent" type="PSwingEvent"/>
                </params>
            </method>
            <method name="isPressOrClickOrMove" type="boolean" line="351">
                <params>
                    <param name="pSwingMouseEvent" type="PSwingEvent"/>
                </params>
            </method>
            <method name="isDragOrRelease" type="boolean" line="356">
                <params>
                    <param name="pSwingMouseEvent" type="PSwingEvent"/>
                </params>
            </method>
            <method name="createEnterEvent" type="MouseEvent" line="361">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="e1" type="MouseEvent"/>
                    <param name="offX" type="int"/>
                    <param name="offY" type="int"/>
                </params>
            </method>
            <method name="createExitEvent" type="MouseEvent" line="366">
                <params>
                    <param name="e1" type="MouseEvent"/>
                </params>
            </method>
            <method name="handleButton" type="void" line="372">
                <params>
                    <param name="e1" type="PSwingEvent"/>
                    <param name="aEvent" type="PInputEvent"/>
                    <param name="buttonData" type="ButtonData"/>
                </params>
                <comment line="376">
                    TODO: this probably won&apos;t handle viewing through multiple
                     cameras.                    
                </comment>
                <comment line="391">
                    buttonData.getPSwing().repaint(); //Experiment with SliderExample
                     (from Martin) suggests this line is unnecessary, and a serious
                     problem in performance.                    
                </comment>
                <declaration name="m1" type="MouseEvent" line="373"/>
                <scope line="374">
                    <declaration name="pt" type="Point2D" line="378"/>
                    <declaration name="tempEvent" type="MouseEvent" line="380"/>
                    <declaration name="e2" type="PSwingEvent" line="384"/>
                </scope>
                <scope line="387"/>
                <scope line="394"/>
            </method>
            <method name="involvesSceneNode" type="boolean" line="399">
                <params>
                    <param name="buttonData" type="ButtonData"/>
                </params>
            </method>
            <method name="dispatchEvent" type="void" line="403">
                <params>
                    <param name="target" type="Component"/>
                    <param name="event" type="PSwingEvent"/>
                </params>
                <anonymous_class line="404">
                    <method name="run" type="void" line="405"/>
                </anonymous_class>
            </method>
            <javadoc line="411">
                Transforms the given point from camera coordinates to the node&apos;s local
                  system.                
                <param>
                    camera camera from which coordinates are measured                    
                </param>
                <param>
                    pt point to transform (will be modified)                    
                </param>
                <param>
                    node node from which local coordinates are measured                    
                </param>
            </javadoc>
            <method name="cameraToLocal" type="void" line="419">
                <params>
                    <param name="camera" type="PCamera"/>
                    <param name="pt" type="Point2D"/>
                    <param name="node" type="PNode"/>
                </params>
                <scope line="420">
                    <scope line="421">
                        <declaration name="inverse" type="AffineTransform" line="422"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="430">
                Returns true if the provided layer has a PLayer ancestor.                
                <param>
                    node node being tested                    
                </param>
                <return>
                    true if node is a descendant of a PLayer                    
                </return>
            </javadoc>
            <method name="descendsFromLayer" type="boolean" line="437">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <declaration name="searchNode" type="PNode" line="438"/>
                <scope line="439">
                    <scope line="441"/>
                </scope>
            </method>
            <javadoc line="448">
                Returns the inverse transform for the provided transform. Throws
                  exception if transform is non invertible.                
                <param>
                    transform transform to invert                    
                </param>
                <return>
                    inverted transform                    
                </return>
            </javadoc>
            <method name="invertTransform" type="AffineTransform" line="455">
                <params>
                    <param name="transform" type="PAffineTransform"/>
                </params>
                <scope line="456"/>
                <scope line="459"/>
            </method>
            <javadoc line="464">
                Process a Piccolo2D event and (if active) dispatch the corresponding
                  Swing event.                
                <param>
                    aEvent Piccolo2D event being tested for dispatch to swing                    
                </param>
                <param>
                    type is not used in this method                    
                </param>
            </javadoc>
            <method name="processEvent" type="void" line="471">
                <params>
                    <param name="aEvent" type="PInputEvent"/>
                    <param name="type" type="int"/>
                </params>
                <scope line="472"/>
                <declaration name="sourceSwingEvent" type="InputEvent" line="476"/>
                <scope line="477"/>
            </method>
            <method name="processMouseEvent" type="void" line="485">
                <params>
                    <param name="aEvent" type="PInputEvent"/>
                    <param name="swingMouseEvent" type="MouseEvent"/>
                </params>
                <scope line="486">
                    <declaration name="pSwingMouseEvent" type="PSwingEvent" line="488"/>
                    <scope line="492"/>
                </scope>
            </method>
            <class name="ButtonData" line="499">
                <javadoc line="499">
                    Internal Utility class for handling button interactivity.                    
                </javadoc>
                <declaration name="focusNode" type="PNode" line="503"/>
                <declaration name="focusComponent" type="Component" line="504"/>
                <declaration name="focusOffX" type="int" line="505"/>
                <declaration name="focusOffY" type="int" line="506"/>
                <method name="setState" type="void" line="508">
                    <params>
                        <param name="visualNode" type="PNode"/>
                        <param name="comp" type="Component"/>
                        <param name="offX" type="int"/>
                        <param name="offY" type="int"/>
                    </params>
                </method>
                <method name="getFocusedComponent" type="Component" line="515"/>
                <method name="getPNode" type="PNode" line="519"/>
                <method name="getOffsetX" type="int" line="523"/>
                <method name="getOffsetY" type="int" line="527"/>
                <method name="mouseReleased" type="void" line="531"/>
            </class>
        </class>
    </source>