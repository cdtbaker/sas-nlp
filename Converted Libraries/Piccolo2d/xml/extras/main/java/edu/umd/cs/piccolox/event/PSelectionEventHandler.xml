<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.event">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PDragSequenceEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PNodeFilter"/>
        <import package="edu.umd.cs.piccolox.handles.PBoundsHandle"/>
        <class name="PSelectionEventHandler" line="56">
            <extends class="PDragSequenceEventHandler"/>
            <comment line="402">
                //////////////////////////////////////////////////////
                 The overridden methods from PDragSequenceEventHandler                
            </comment>
            <comment line="476">
                //////////////////////////
                 Additional methods                
            </comment>
            <javadoc line="56">
                &lt;code&gt;PSelectionEventHandler&lt;/code&gt; provides standard interaction for
                  selection. Clicking selects the object under the cursor. Shift-clicking
                  allows multiple objects to be selected. Dragging offers marquee selection.
                  Pressing the delete key deletes the selection by default.                
                <version>
                    1.0                    
                </version>
                <author>
                    Ben Bederson                    
                </author>
            </javadoc>
            <declaration name="SELECTION_CHANGED_NOTIFICATION" type="String" line="66"/>
            <javadoc line="66">
                Notification name that identifies a change in the selection. Used with
                  PNotificationCenter.                
            </javadoc>
            <declaration name="DASH_WIDTH" type="int" line="72"/>
            <javadoc line="72">
                The default dash width when displaying selection rectangle.                
            </javadoc>
            <declaration name="NUM_STROKES" type="int" line="75"/>
            <declaration name="selection" type="HashMap" line="77"/>
            <javadoc line="77">
                The current selection.                
            </javadoc>
            <declaration name="selectableParents" type="List" line="79"/>
            <javadoc line="79">
                List of nodes whose children can be selected.                
            </javadoc>
            <declaration name="marquee" type="PPath" line="82"/>
            <declaration name="marqueeParent" type="PNode" line="83"/>
            <javadoc line="83">
                Node that marquee is added to as a child.                
            </javadoc>
            <declaration name="presspt" type="Point2D" line="86"/>
            <declaration name="canvasPressPt" type="Point2D" line="87"/>
            <declaration name="strokeNum" type="float" line="88"/>
            <declaration name="strokes" type="Stroke[]" line="89"/>
            <declaration name="allItems" type="HashMap" line="91"/>
            <javadoc line="91">
                Used within drag handler temporarily.                
            </javadoc>
            <declaration name="unselectList" type="ArrayList" line="94"/>
            <javadoc line="94">
                Used within drag handler temporarily.                
            </javadoc>
            <declaration name="marqueeMap" type="HashMap" line="96"/>
            <declaration name="pressNode" type="PNode" line="98"/>
            <javadoc line="98">
                Node pressed on (or null if none).                
            </javadoc>
            <declaration name="deleteKeyActive" type="boolean" line="101"/>
            <javadoc line="101">
                True if DELETE key should delete selection.                
            </javadoc>
            <declaration name="marqueePaint" type="Paint" line="104"/>
            <javadoc line="104">
                Paint applied when drawing the marquee.                
            </javadoc>
            <declaration name="marqueePaintTransparency" type="float" line="107"/>
            <javadoc line="107">
                How transparent the marquee should be.                
            </javadoc>
            <javadoc line="110">
                Creates a selection event handler.                
                <param>
                    marqueeParent The node to which the event handler dynamically adds
                      a marquee (temporarily) to represent the area being selected.                    
                </param>
                <param>
                    selectableParent The node whose children will be selected by this
                      event handler.                    
                </param>
            </javadoc>
            <method name="PSelectionEventHandler" type="constructor" line="118">
                <params>
                    <param name="marqueeParent" type="PNode"/>
                    <param name="selectableParent" type="PNode"/>
                </params>
            </method>
            <javadoc line="125">
                Creates a selection event handler.                
                <param>
                    marqueeParent The node to which the event handler dynamically adds
                      a marquee (temporarily) to represent the area being selected.                    
                </param>
                <param>
                    selectableParents A list of nodes whose children will be selected
                      by this event handler.                    
                </param>
            </javadoc>
            <method name="PSelectionEventHandler" type="constructor" line="133">
                <params>
                    <param name="marqueeParent" type="PNode"/>
                    <param name="selectableParents" type="List"/>
                </params>
            </method>
            <javadoc line="139">
                Initializes the PSelectionEventHandler with a marquee stroke.                
            </javadoc>
            <method name="init" type="void" line="142">
                <declaration name="dash" type="float[]" line="143"/>
                <scope line="148"/>
            </method>
            <javadoc line="158">
                Marks all items as selected.                
                <param>
                    items collection of items to be selected                    
                </param>
            </javadoc>
            <method name="select" type="void" line="163">
                <params>
                    <param name="items" type="Collection"/>
                </params>
                <declaration name="changes" type="boolean" line="164"/>
                <declaration name="itemIt" type="Iterator" line="165"/>
                <scope line="166">
                    <declaration name="node" type="PNode" line="167"/>
                </scope>
                <scope line="170"/>
            </method>
            <javadoc line="175">
                Marks all keys as selected.                
                <param>
                    items map where keys are to be selected                    
                </param>
            </javadoc>
            <method name="select" type="void" line="180">
                <params>
                    <param name="items" type="Map"/>
                </params>
            </method>
            <javadoc line="184">
                Select the passed node if not already selected.                
                <param>
                    node node to be selected                    
                </param>
                <return>
                    true if node was not already selected                    
                </return>
            </javadoc>
            <method name="internalSelect" type="boolean" line="190">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <scope line="191"/>
            </method>
            <javadoc line="200">
                Dispatches a selection changed notification to the PNodificationCenter.                
            </javadoc>
            <method name="postSelectionChanged" type="void" line="203"/>
            <javadoc line="207">
                Selected the provided node if not already selected.                
                <param>
                    node node to be selected                    
                </param>
            </javadoc>
            <method name="select" type="void" line="212">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <scope line="213"/>
            </method>
            <javadoc line="218">
                Adds bound handles to the provided node.                
                <param>
                    node node to be decorated                    
                </param>
            </javadoc>
            <method name="decorateSelectedNode" type="void" line="223">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="227">
                Removes all nodes provided from the selection.                
                <param>
                    items items to remove form the selection                    
                </param>
            </javadoc>
            <method name="unselect" type="void" line="232">
                <params>
                    <param name="items" type="Collection"/>
                </params>
                <declaration name="changes" type="boolean" line="233"/>
                <declaration name="itemIt" type="Iterator" line="234"/>
                <scope line="235">
                    <declaration name="node" type="PNode" line="236"/>
                </scope>
                <scope line="239"/>
            </method>
            <javadoc line="244">
                Removes provided selection node if not already selected.                
                <param>
                    node node to remove from selection                    
                </param>
                <return>
                    true on success                    
                </return>
            </javadoc>
            <method name="internalUnselect" type="boolean" line="251">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <scope line="252"/>
            </method>
            <javadoc line="261">
                Removes node from selection.                
                <param>
                    node node to be removed from selection                    
                </param>
            </javadoc>
            <method name="unselect" type="void" line="266">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <scope line="267"/>
            </method>
            <javadoc line="272">
                Removes bounds handles from node.                
                <param>
                    node to have handles removed from                    
                </param>
            </javadoc>
            <method name="undecorateSelectedNode" type="void" line="277">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="281">
                Empties the selection.                
            </javadoc>
            <method name="unselectAll" type="void" line="284">
                <comment line="286">
                    Because unselect() removes from selection, we need to
                     take a copy of it first so it isn&apos;t changed while we&apos;re iterating                    
                </comment>
                <declaration name="sel" type="ArrayList" line="287"/>
            </method>
            <javadoc line="291">
                Returns true is provided node is selected.                
                <param>
                    node - node to be tested                    
                </param>
                <return>
                    true if succeeded                    
                </return>
            </javadoc>
            <method name="isSelected" type="boolean" line="297">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="301">
                Returns a copy of the currently selected nodes.                
                <return>
                    copy of selection                    
                </return>
            </javadoc>
            <method name="getSelection" type="Collection" line="306"/>
            <javadoc line="310">
                Gets a reference to the currently selected nodes. You should not modify
                  or store this collection.                
                <return>
                    direct reference to selection                    
                </return>
            </javadoc>
            <method name="getSelectionReference" type="Collection" line="316"/>
            <javadoc line="320">
                Determine if the specified node can be selected (i.e., if it is a child
                  of the one the list of nodes that can be selected).                
                <param>
                    node node being tested                    
                </param>
                <return>
                    true if node can be selected                    
                </return>
            </javadoc>
            <method name="isSelectable" type="boolean" line="327">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <declaration name="selectable" type="boolean" line="328"/>
                <declaration name="parentsIt" type="Iterator" line="330"/>
                <scope line="331">
                    <declaration name="parent" type="PNode" line="332"/>
                    <scope line="333"/>
                    <scope line="337">
                        <scope line="338">
                            <declaration name="layer" type="PLayer" line="339"/>
                            <scope line="340"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="351">
                Flags the node provided as a selectable parent. This makes it possible to
                  select its children.                
                <param>
                    node to flag as selectable                    
                </param>
            </javadoc>
            <method name="addSelectableParent" type="void" line="357">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="361">
                Removes the node provided from the set of selectable parents. This makes
                  its impossible to select its children.                
                <param>
                    node to remove from selectable parents                    
                </param>
            </javadoc>
            <method name="removeSelectableParent" type="void" line="367">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="371">
                Sets the node provided as the only selectable parent.                
                <param>
                    node node to become the 1 and only selectable parent                    
                </param>
            </javadoc>
            <method name="setSelectableParent" type="void" line="376">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="381">
                Sets the collection of selectable parents as the only parents that are
                  selectable.                
                <param>
                    c nodes to become selectable parents.                    
                </param>
            </javadoc>
            <method name="setSelectableParents" type="void" line="387">
                <params>
                    <param name="c" type="Collection"/>
                </params>
            </method>
            <javadoc line="392">
                Returns all selectable parents.                
                <return>
                    selectable parents                    
                </return>
            </javadoc>
            <method name="getSelectableParents" type="Collection" line="397"/>
            <javadoc line="405">
                Overrides method in PDragSequenceEventHandler so that, selections have
                  marquees.                
                <param>
                    e the event that started the drag                    
                </param>
            </javadoc>
            <method name="startDrag" type="void" line="411">
                <params>
                    <param name="e" type="PInputEvent"/>
                </params>
                <scope line="416">
                    <scope line="419"/>
                    <scope line="422"/>
                </scope>
                <scope line="426">
                    <scope line="427"/>
                    <scope line="430"/>
                </scope>
            </method>
            <javadoc line="436">
                Updates the marquee to the new bounds caused by the drag.                
                <param>
                    event drag event                    
                </param>
            </javadoc>
            <method name="drag" type="void" line="441">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <scope line="444">
                    <scope line="447"/>
                    <scope line="450"/>
                </scope>
                <scope line="454"/>
            </method>
            <javadoc line="459">
                Ends the selection marquee when the drag is ended.                
                <param>
                    event the event responsible for ending the drag                    
                </param>
            </javadoc>
            <method name="endDrag" type="void" line="464">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <scope line="467"/>
                <scope line="470"/>
            </method>
            <javadoc line="479">
                Used to test whether the event is one that changes the selection.                
                <param>
                    pie The event under test                    
                </param>
                <return>
                    true if event changes the selection                    
                </return>
            </javadoc>
            <method name="isOptionSelection" type="boolean" line="485">
                <params>
                    <param name="pie" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="489">
                Tests the input event to see if it is selecting a new node.                
                <param>
                    pie event under test                    
                </param>
                <return>
                    true if there is no current selection                    
                </return>
            </javadoc>
            <method name="isMarqueeSelection" type="boolean" line="495">
                <params>
                    <param name="pie" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="499">
                Starts a selection based on the provided event.                
                <param>
                    pie event used to populate the selection                    
                </param>
            </javadoc>
            <method name="initializeSelection" type="void" line="504">
                <params>
                    <param name="pie" type="PInputEvent"/>
                </params>
                <scope line="508"/>
            </method>
            <javadoc line="513">
                Creates an empty marquee child for use in displaying the marquee around
                  the selection.                
                <param>
                    event event responsible for the initialization                    
                </param>
            </javadoc>
            <method name="initializeMarquee" type="void" line="519">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="530">
                Invoked when the marquee is being used to extend the selection.                
                <param>
                    event event causing the option selection                    
                </param>
            </javadoc>
            <method name="startOptionMarqueeSelection" type="void" line="535">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="538">
                Invoked at the start of the selection. Removes any selections.                
                <param>
                    event event causing a new marquee selection                    
                </param>
            </javadoc>
            <method name="startMarqueeSelection" type="void" line="543">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="547">
                If the pressed node is not selected unselect all nodes and select the
                  pressed node if it allows it.                
                <param>
                    pie event that started the selection                    
                </param>
            </javadoc>
            <method name="startStandardSelection" type="void" line="553">
                <params>
                    <param name="pie" type="PInputEvent"/>
                </params>
                <comment line="555">
                    Option indicator not down - clear selection, and start fresh                    
                </comment>
                <scope line="555"/>
                <scope line="561"/>
            </method>
            <javadoc line="566">
                Toggle the current selection on the node that was just pressed, but leave
                  the rest of the selected nodes unchanged.                
                <param>
                    pie event responsible for the change in selection                    
                </param>
            </javadoc>
            <method name="startStandardOptionSelection" type="void" line="572">
                <params>
                    <param name="pie" type="PInputEvent"/>
                </params>
                <scope line="573">
                    <scope line="574"/>
                    <scope line="577"/>
                </scope>
            </method>
            <javadoc line="583">
                Updates the marquee rectangle as the result of a drag.                
                <param>
                    pie event responsible for the change in the marquee                    
                </param>
            </javadoc>
            <method name="updateMarquee" type="void" line="588">
                <params>
                    <param name="pie" type="PInputEvent"/>
                </params>
                <declaration name="b" type="PBounds" line="589"/>
                <scope line="591"/>
                <scope line="595"/>
                <declaration name="filter" type="PNodeFilter" line="607"/>
                <declaration name="parentsIt" type="Iterator" line="608"/>
                <scope line="609">
                    <declaration name="parent" type="PNode" line="610"/>
                    <declaration name="items" type="Collection" line="612"/>
                    <scope line="613">
                        <scope line="615"/>
                    </scope>
                    <scope line="619"/>
                    <declaration name="itemsIt" type="Iterator" line="623"/>
                    <scope line="624"/>
                </scope>
            </method>
            <javadoc line="630">
                Sets the selection to be all nodes under the marquee.                
                <param>
                    pie event responsible for the new selection                    
                </param>
            </javadoc>
            <method name="computeMarqueeSelection" type="void" line="635">
                <params>
                    <param name="pie" type="PInputEvent"/>
                </params>
                <comment line="638">
                    Make just the items in the list selected
                     Do this efficiently by first unselecting things not in the list                    
                </comment>
                <comment line="649">
                    Then select the rest                    
                </comment>
                <declaration name="selectionEn" type="Iterator" line="639"/>
                <scope line="640">
                    <declaration name="node" type="PNode" line="641"/>
                    <scope line="642"/>
                </scope>
                <scope line="650">
                    <declaration name="node" type="PNode" line="651"/>
                    <scope line="652"/>
                    <scope line="655"/>
                </scope>
            </method>
            <javadoc line="663">
                Extends the selection to include all nodes under the marquee.                
                <param>
                    pie event responsible for the change in selection                    
                </param>
            </javadoc>
            <method name="computeOptionMarqueeSelection" type="void" line="668">
                <params>
                    <param name="pie" type="PInputEvent"/>
                </params>
                <comment line="681">
                    Then select the rest                    
                </comment>
                <declaration name="selectionEn" type="Iterator" line="670"/>
                <scope line="671">
                    <declaration name="node" type="PNode" line="672"/>
                    <scope line="673"/>
                </scope>
                <scope line="682">
                    <declaration name="node" type="PNode" line="683"/>
                    <scope line="684"/>
                    <scope line="687"/>
                </scope>
            </method>
            <javadoc line="695">
                Creates a node filter that will filter all nodes not touching the bounds
                  provided.                
                <param>
                    bounds will be used to filter matches                    
                </param>
                <return>
                    newly created filter                    
                </return>
            </javadoc>
            <method name="createNodeFilter" type="PNodeFilter" line="703">
                <params>
                    <param name="bounds" type="PBounds"/>
                </params>
            </method>
            <javadoc line="707">
                Returns the bounds of the current selection marquee.                
                <return>
                    bounds of current selection marquee                    
                </return>
            </javadoc>
            <method name="getMarqueeBounds" type="PBounds" line="712">
                <scope line="713"/>
            </method>
            <javadoc line="719">
                Drag selected nodes.                
                <param>
                    e event responsible for the drag                    
                </param>
            </javadoc>
            <method name="dragStandardSelection" type="void" line="724">
                <params>
                    <param name="e" type="PInputEvent"/>
                </params>
                <comment line="726">
                    There was a press node, so drag selection                    
                </comment>
                <declaration name="d" type="PDimension" line="726"/>
                <declaration name="gDist" type="PDimension" line="729"/>
                <declaration name="selectionEn" type="Iterator" line="730"/>
                <scope line="731">
                    <declaration name="node" type="PNode" line="732"/>
                </scope>
            </method>
            <javadoc line="740">
                Removes marquee and clears selection.                
                <param>
                    e event responsible for the end of the selection                    
                </param>
            </javadoc>
            <method name="endMarqueeSelection" type="void" line="745">
                <params>
                    <param name="e" type="PInputEvent"/>
                </params>
                <comment line="747">
                    Remove marquee                    
                </comment>
            </method>
            <javadoc line="753">
                Ends the &quot;pressed&quot; state of the previously pressed node (if any).                
                <param>
                    e event responsible for the end in the selection                    
                </param>
            </javadoc>
            <method name="endStandardSelection" type="void" line="758">
                <params>
                    <param name="e" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="762">
                This gets called continuously during the drag, and is used to animate the
                  marquee.                
                <param>
                    aEvent event responsible for this step in the drag sequence                    
                </param>
            </javadoc>
            <method name="dragActivityStep" type="void" line="768">
                <params>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
                <comment line="772">
                    Increment by                    
                </comment>
                <comment line="773">
                    partial steps to
                     slow down animation                    
                </comment>
                <scope line="769">
                    <declaration name="origStrokeNum" type="float" line="770"/>
                    <scope line="774"/>
                </scope>
            </method>
            <javadoc line="780">
                Delete selection when delete key is pressed (if enabled).                
                <param>
                    e the key press event                    
                </param>
            </javadoc>
            <method name="keyPressed" type="void" line="785">
                <params>
                    <param name="e" type="PInputEvent"/>
                </params>
                <scope line="786">
                    <declaration name="selectionEn" type="Iterator" line="787"/>
                    <scope line="788">
                        <declaration name="node" type="PNode" line="789"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="796">
                Returns whether the delete key is a supported action.                
                <return>
                    true if delete is allowed                    
                </return>
            </javadoc>
            <method name="getSupportDeleteKey" type="boolean" line="801"/>
            <javadoc line="805">
                Returns whether the delete key is a supported action.                
                <return>
                    true if delete is allowed                    
                </return>
            </javadoc>
            <method name="isDeleteKeyActive" type="boolean" line="810"/>
            <javadoc line="814">
                Specifies if the DELETE key should delete the selection.                
                <param>
                    deleteKeyActive state to set for the delete action true = enabled                    
                </param>
            </javadoc>
            <method name="setDeleteKeyActive" type="void" line="819">
                <params>
                    <param name="deleteKeyActive" type="boolean"/>
                </params>
            </method>
            <class name="BoundsFilter" line="823">
                <implements interface="PNodeFilter"/>
                <javadoc line="823">
                    Class used to filter nodes that intersect with the marquee&apos;s bounds.                    
                </javadoc>
                <declaration name="localBounds" type="PBounds" line="827"/>
                <declaration name="bounds" type="PBounds" line="828"/>
                <javadoc line="830">
                    Constructs a BoundsFilter for the given bounds.                    
                    <param>
                        bounds bounds to be used when testing nodes for intersection                        
                    </param>
                </javadoc>
                <method name="BoundsFilter" type="constructor" line="835">
                    <params>
                        <param name="bounds" type="PBounds"/>
                    </params>
                </method>
                <javadoc line="839">
                    Returns true if the node is an acceptable selection.                    
                    <param>
                        node node being tested                        
                    </param>
                    <return>
                        true if node is an acceptable selection                        
                    </return>
                </javadoc>
                <method name="accept" type="boolean" line="845">
                    <params>
                        <param name="node" type="PNode"/>
                    </params>
                    <declaration name="boundsIntersects" type="boolean" line="849"/>
                    <declaration name="isMarquee" type="boolean" line="850"/>
                </method>
                <javadoc line="855">
                    Returns whether this filter should accept all children of a node.                    
                    <param>
                        node node being tested                        
                    </param>
                    <return>
                        true if selection should accept children children of the node                        
                    </return>
                </javadoc>
                <method name="acceptChildrenOf" type="boolean" line="861">
                    <params>
                        <param name="node" type="PNode"/>
                    </params>
                </method>
                <javadoc line="865">
                    Tests a node to see if it&apos;s a layer that has an attached camera.                    
                    <param>
                        node node being tested                        
                    </param>
                    <return>
                        true if node is a layer with a camera attached                        
                    </return>
                </javadoc>
                <method name="isCameraLayer" type="boolean" line="871">
                    <params>
                        <param name="node" type="PNode"/>
                    </params>
                    <scope line="872">
                        <scope line="873">
                            <declaration name="parent" type="PNode" line="874"/>
                            <scope line="875"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="884">
                Indicates the color used to paint the marquee.                
                <return>
                    the paint for interior of the marquee                    
                </return>
            </javadoc>
            <method name="getMarqueePaint" type="Paint" line="889"/>
            <javadoc line="893">
                Sets the color used to paint the marquee.                
                <param>
                    paint the paint color                    
                </param>
            </javadoc>
            <method name="setMarqueePaint" type="void" line="898">
                <params>
                    <param name="paint" type="Paint"/>
                </params>
            </method>
            <javadoc line="902">
                Indicates the transparency level for the interior of the marquee.                
                <return>
                    Returns the marquee paint transparency, zero to one                    
                </return>
            </javadoc>
            <method name="getMarqueePaintTransparency" type="float" line="907"/>
            <javadoc line="911">
                Sets the transparency level for the interior of the marquee.                
                <param>
                    marqueePaintTransparency The marquee paint transparency to set.                    
                </param>
            </javadoc>
            <method name="setMarqueePaintTransparency" type="void" line="916">
                <params>
                    <param name="marqueePaintTransparency" type="float"/>
                </params>
            </method>
        </class>
    </source>