<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.nodes">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.LineBreakMeasurer"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="java.awt.geom.Line2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.AttributedString"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.StringTokenizer"/>
        <import package="javax.swing.text.AttributeSet"/>
        <import package="javax.swing.text.BadLocationException"/>
        <import package="javax.swing.text.DefaultStyledDocument"/>
        <import package="javax.swing.text.Document"/>
        <import package="javax.swing.text.Element"/>
        <import package="javax.swing.text.StyleConstants"/>
        <import package="javax.swing.text.StyleContext"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <class name="PStyledText" line="28">
            <extends class="PNode"/>
            <javadoc line="28">
                @author Lance Good                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="32"/>
            <declaration name="SWING_FRC" type="FontRenderContext" line="33"/>
            <javadoc line="33">
                Font rendering context used for all PStyledText instances.                
            </javadoc>
            <declaration name="paintLine" type="Line2D" line="37"/>
            <javadoc line="37">
                Used while painting underlines.                
            </javadoc>
            <declaration name="document" type="Document" line="41"/>
            <javadoc line="41">
                Underlying document used to handle the complexities involved with
                  arbitrary text and formatting.                
            </javadoc>
            <declaration name="stringContents" type="ArrayList" line="46"/>
            <javadoc line="46">
                String contents of the document.                
            </javadoc>
            <declaration name="lines" type="LineInfo[]" line="50"/>
            <javadoc line="50">
                Tracks the information about line metrics within the document.                
            </javadoc>
            <declaration name="editing" type="boolean" line="54"/>
            <javadoc line="54">
                Whether this node is currently being edited.                
            </javadoc>
            <declaration name="insets" type="Insets" line="58"/>
            <javadoc line="58">
                Insets represent how far away from the bounding box text will be drawn.                
            </javadoc>
            <declaration name="constrainHeightToTextHeight" type="boolean" line="62"/>
            <javadoc line="62">
                Whether width will be forced to match containing text&apos;s height.                
            </javadoc>
            <declaration name="constrainWidthToTextWidth" type="boolean" line="66"/>
            <javadoc line="66">
                Whether width will be forced to match containing text&apos;s width.                
            </javadoc>
            <javadoc line="70">
                Constructs an empty PStyledText element.                
            </javadoc>
            <method name="PStyledText" type="constructor" line="73"/>
            <javadoc line="75">
                Controls whether this node changes its width to fit the width of its
                  text. If flag is true it does; if flag is false it doesn&apos;t                
                <param>
                    constrainWidthToTextWidth whether node's width should be
                      constrained to the width of its text                    
                </param>
            </javadoc>
            <method name="setConstrainWidthToTextWidth" type="void" line="81">
                <params>
                    <param name="constrainWidthToTextWidth" type="boolean"/>
                </params>
            </method>
            <javadoc line="85">
                Controls whether this node changes its height to fit the height of its
                  text. If flag is true it does; if flag is false it doesn&apos;t                
                <param>
                    constrainHeightToTextHeight whether node's height should be
                      constrained to the height of its text                    
                </param>
            </javadoc>
            <method name="setConstrainHeightToTextHeight" type="void" line="91">
                <params>
                    <param name="constrainHeightToTextHeight" type="boolean"/>
                </params>
            </method>
            <javadoc line="95">
                Controls whether this node changes its width to fit the width of its
                  text. If flag is true it does; if flag is false it doesn&apos;t                
                <return>
                    true if node is constrained to the width of its text                    
                </return>
            </javadoc>
            <method name="getConstrainWidthToTextWidth" type="boolean" line="100"/>
            <javadoc line="103">
                Controls whether this node changes its height to fit the height of its
                  text. If flag is true it does; if flag is false it doesn&apos;t                
                <return>
                    true if node is constrained to the height of its text                    
                </return>
            </javadoc>
            <method name="getConstrainHeightToTextHeight" type="boolean" line="108"/>
            <javadoc line="111">
                Get the document for this PStyledText. Document is used as the node&apos;s
                  model.                
                <return>
                    internal document used as a model of this PStyledText                    
                </return>
            </javadoc>
            <method name="getDocument" type="Document" line="116"/>
            <javadoc line="119">
                Set the document on this PStyledText. Document is used as the node&apos;s
                  model.                
                <param>
                    document to be used as the model for this PStyledText                    
                </param>
            </javadoc>
            <method name="setDocument" type="void" line="124">
                <params>
                    <param name="document" type="Document"/>
                </params>
            </method>
            <javadoc line="128">
                Enforce that the current display matches the styling of the underlying
                  document as closely as possible.                
            </javadoc>
            <method name="syncWithDocument" type="void" line="132">
                <declaration name="documentString" type="String" line="134"/>
                <scope line="135"/>
                <scope line="138"/>
                <declaration name="pEnds" type="ArrayList" line="141"/>
                <declaration name="styleContext" type="StyleContext" line="142"/>
                <declaration name="pos" type="int" line="143"/>
                <declaration name="paragraphRange" type="RunInfo" line="144"/>
                <declaration name="attributedString" type="AttributedString" line="145"/>
                <declaration name="contentIterator" type="Iterator" line="146"/>
                <declaration name="paragraphIterator" type="Iterator" line="147"/>
                <scope line="148">
                    <declaration name="curElement" type="Element" line="152"/>
                    <declaration name="rootElement" type="Element" line="153"/>
                    <scope line="154">
                        <declaration name="attributes" type="AttributeSet" line="156"/>
                        <declaration name="foreground" type="Color" line="157"/>
                        <declaration name="font" type="Font" line="159"/>
                    </scope>
                    <scope line="165">
                        <scope line="166">
                            <declaration name="attributes" type="AttributeSet" line="168"/>
                            <declaration name="foreground" type="Color" line="169"/>
                            <declaration name="font" type="Font" line="171"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="182">
                Returns the first leaf encountered by drilling into the document for the
                  given position.                
                <param>
                    pos position under which we're trying to find a leaf                    
                </param>
                <param>
                    rootElement top most element in the document tree                    
                </param>
                <return>
                    Leaf element that corresponds to the position provided in the
                      document                    
                </return>
            </javadoc>
            <method name="drillDownFromRoot" type="Element" line="190">
                <params>
                    <param name="pos" type="int"/>
                    <param name="rootElement" type="Element"/>
                </params>
                <declaration name="curElement" type="Element" line="191"/>
                <scope line="192"/>
            </method>
            <method name="applyFontAttribute" type="void" line="197">
                <params>
                    <param name="paragraphRange" type="RunInfo"/>
                    <param name="attributedString" type="AttributedString"/>
                    <param name="curElement" type="Element"/>
                    <param name="font" type="Font"/>
                </params>
                <scope line="198"/>
            </method>
            <method name="applyStrikeThroughAttribute" type="void" line="202">
                <params>
                    <param name="paragraphRange" type="RunInfo"/>
                    <param name="attributedString" type="AttributedString"/>
                    <param name="curElement" type="Element"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <declaration name="strikethrough" type="boolean" line="203"/>
                <scope line="204"/>
            </method>
            <method name="applyUnderlineAttribute" type="void" line="208">
                <params>
                    <param name="paragraphRange" type="RunInfo"/>
                    <param name="attributedString" type="AttributedString"/>
                    <param name="curElement" type="Element"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <declaration name="underline" type="boolean" line="209"/>
                <scope line="210"/>
            </method>
            <method name="applyBackgroundAttribute" type="void" line="214">
                <params>
                    <param name="style" type="StyleContext"/>
                    <param name="paragraphRange" type="RunInfo"/>
                    <param name="attributedString" type="AttributedString"/>
                    <param name="curElement" type="Element"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <scope line="215">
                    <declaration name="background" type="Color" line="216"/>
                </scope>
            </method>
            <method name="extractFont" type="Font" line="220">
                <params>
                    <param name="style" type="StyleContext"/>
                    <param name="pos" type="int"/>
                    <param name="rootElement" type="Element"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <declaration name="font" type="Font" line="221"/>
                <scope line="222"/>
                <scope line="225">
                    <scope line="226"/>
                    <scope line="229"/>
                </scope>
            </method>
            <method name="extractFontFromDefaultStyledDocument" type="Font" line="235">
                <params>
                    <param name="styledDocument" type="DefaultStyledDocument"/>
                    <param name="style" type="StyleContext"/>
                    <param name="pos" type="int"/>
                    <param name="rootElement" type="Element"/>
                </params>
                <declaration name="font" type="Font" line="236"/>
                <scope line="237">
                    <scope line="239"/>
                </scope>
            </method>
            <method name="extractParagraphRanges" type="ArrayList" line="245">
                <params>
                    <param name="documentString" type="String"/>
                </params>
                <declaration name="paragraphRanges" type="ArrayList" line="246"/>
                <declaration name="pos" type="int" line="247"/>
                <declaration name="tokenizer" type="StringTokenizer" line="248"/>
                <declaration name="lastNewLine" type="boolean" line="249"/>
                <scope line="250">
                    <declaration name="token" type="String" line="251"/>
                    <scope line="252">
                        <scope line="253"/>
                    </scope>
                    <scope line="260"/>
                    <scope line="265"/>
                </scope>
                <scope line="272"/>
            </method>
            <javadoc line="278">
                Compute the bounds of the text wrapped by this node. The text layout is
                  wrapped based on the bounds of this node. If the shrinkBoundsToFit
                  parameter is true then after the text has been laid out the bounds of
                  this node are shrunk to fit around those text bounds.                
            </javadoc>
            <method name="recomputeLayout" type="void" line="284">
                <scope line="285"/>
                <declaration name="linesList" type="ArrayList" line="288"/>
                <declaration name="textWidth" type="double" line="289"/>
                <declaration name="textHeight" type="double" line="290"/>
                <declaration name="contentIterator" type="Iterator" line="291"/>
                <scope line="292">
                    <declaration name="ats" type="AttributedString" line="293"/>
                    <declaration name="itr" type="AttributedCharacterIterator" line="294"/>
                    <declaration name="measurer" type="LineBreakMeasurer" line="295"/>
                    <declaration name="breakList" type="ArrayList" line="296"/>
                    <declaration name="lineInfo" type="LineInfo" line="300"/>
                    <declaration name="newLine" type="boolean" line="301"/>
                    <declaration name="lineWidth" type="double" line="302"/>
                    <scope line="303">
                        <declaration name="aTextLayout" type="TextLayout" line="304"/>
                        <scope line="305">
                            <declaration name="lineHeight" type="double" line="307"/>
                        </scope>
                        <declaration name="lineEnd" type="int" line="313"/>
                        <scope line="314"/>
                        <declaration name="sInfo" type="SegmentInfo" line="319"/>
                        <declaration name="metrics" type="FontMetrics" line="325"/>
                    </scope>
                    <declaration name="lineHeight" type="double" line="333"/>
                </scope>
            </method>
            <javadoc line="340">
                @param lineInfo                
                <return>
                                        
                </return>
            </javadoc>
            <method name="calculateLineHeightFromLineInfo" type="double" line="344">
                <params>
                    <param name="lineInfo" type="LineInfo"/>
                </params>
                <declaration name="lineHeight" type="double" line="345"/>
                <scope line="346"/>
                <scope line="349"/>
            </method>
            <method name="constrainDimensionsIfNeeded" type="void" line="354">
                <params>
                    <param name="textWidth" type="double"/>
                    <param name="textHeight" type="double"/>
                </params>
                <scope line="355"/>
                <declaration name="newWidth" type="double" line="358"/>
                <declaration name="newHeight" type="double" line="359"/>
                <scope line="360"/>
                <scope line="363"/>
            </method>
            <method name="extractLineBreaks" type="ArrayList" line="368">
                <params>
                    <param name="itr" type="AttributedCharacterIterator"/>
                    <param name="measurer" type="LineBreakMeasurer"/>
                </params>
                <declaration name="breakList" type="ArrayList" line="369"/>
                <scope line="371">
                    <scope line="372"/>
                    <scope line="375"/>
                </scope>
            </method>
            <javadoc line="382">
                Get the height of the font at the beginning of the document.                
                <return>
                    height of font at the start of the document.                    
                </return>
            </javadoc>
            <method name="getInitialFontHeight" type="double" line="386">
                <declaration name="rootElement" type="Element" line="387"/>
                <declaration name="curElement" type="Element" line="388"/>
                <declaration name="context" type="StyleContext" line="389"/>
                <declaration name="font" type="Font" line="390"/>
                <declaration name="curFM" type="FontMetrics" line="391"/>
            </method>
            <javadoc line="394">
                {@inheritDoc}                
            </javadoc>
            <method name="paint" type="void" line="397">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="398"/>
                <declaration name="x" type="float" line="401"/>
                <declaration name="y" type="float" line="402"/>
                <declaration name="bottomY" type="float" line="403"/>
                <declaration name="g2" type="Graphics2D" line="404"/>
                <scope line="405"/>
                <declaration name="curX" type="float" line="409"/>
                <declaration name="lineInfo" type="LineInfo" line="410"/>
                <scope line="411">
                    <scope line="415"/>
                    <scope line="418">
                        <declaration name="sInfo" type="SegmentInfo" line="419"/>
                        <declaration name="width" type="float" line="420"/>
                        <scope line="421"/>
                        <scope line="428"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="437">
                {@inheritDoc}                
            </javadoc>
            <method name="fullPaint" type="void" line="440">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="441"/>
            </method>
            <javadoc line="445">
                Set whether this node is current in editing mode.                
                <param>
                    editing value to set editing flag                    
                </param>
            </javadoc>
            <method name="setEditing" type="void" line="449">
                <params>
                    <param name="editing" type="boolean"/>
                </params>
            </method>
            <javadoc line="452">
                Whether node is currently in editing state.                
                <return>
                    true if node is currently editing                    
                </return>
            </javadoc>
            <method name="isEditing" type="boolean" line="456"/>
            <javadoc line="459">
                Set the insets of the text.                
                <param>
                    insets desired insets                    
                </param>
            </javadoc>
            <method name="setInsets" type="void" line="463">
                <params>
                    <param name="insets" type="Insets"/>
                </params>
                <scope line="464"/>
            </method>
            <javadoc line="472">
                Get the insets of the text.                
                <return>
                    current text insets                    
                </return>
            </javadoc>
            <method name="getInsets" type="Insets" line="476"/>
            <javadoc line="479">
                {@inheritDoc}                
            </javadoc>
            <method name="setBounds" type="boolean" line="482">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
                <scope line="483"/>
            </method>
            <class name="RunInfo" line="489">
                <javadoc line="489">
                    Simple class to represent an range within the document.                    
                </javadoc>
                <declaration name="startIndex" type="int" line="493"/>
                <declaration name="endIndex" type="int" line="494"/>
                <javadoc line="495">
                    Constructs a RunInfo representing the range within the document from
                      runStart to runLimit.                    
                    <param>
                        runStart starting index of the range                        
                    </param>
                    <param>
                        runLimit ending index of the range                        
                    </param>
                </javadoc>
                <method name="RunInfo" type="constructor" line="501">
                    <params>
                        <param name="runStart" type="int"/>
                        <param name="runLimit" type="int"/>
                    </params>
                </method>
                <javadoc line="505">
                    Returns whether the run is empty.                    
                    <return>
                        true is run is empty                        
                    </return>
                </javadoc>
                <method name="isEmpty" type="boolean" line="509"/>
                <javadoc line="512">
                    Returns the length of the run.                    
                    <return>
                        length of run                        
                    </return>
                </javadoc>
                <method name="length" type="int" line="516"/>
            </class>
            <class name="LineInfo" line="520">
                <javadoc line="520">
                    The info for rendering and computing the bounds of a line.                    
                </javadoc>
                <declaration name="segments" type="List" line="524"/>
                <javadoc line="524">
                    Segments which make up this line&apos;s formatting segments.                    
                </javadoc>
                <declaration name="maxAscent" type="double" line="528"/>
                <javadoc line="528">
                    Maximum of the line segments&apos; ascents.                    
                </javadoc>
                <declaration name="maxDescent" type="double" line="532"/>
                <javadoc line="532">
                    Maximum of the line segments&apos; descents.                    
                </javadoc>
                <declaration name="leading" type="double" line="536"/>
                <javadoc line="536">
                    Leading space at front of line segment.                    
                </javadoc>
                <javadoc line="540">
                    Creates a LineInfo that contains no segments.                    
                </javadoc>
                <method name="LineInfo" type="constructor" line="543"/>
            </class>
            <class name="SegmentInfo" line="547">
                <javadoc line="547">
                    Encapsulates information about a particular LineSegment.                    
                </javadoc>
                <declaration name="layout" type="TextLayout" line="551"/>
                <javadoc line="551">
                    Text Layout applied to the segment.                    
                </javadoc>
                <declaration name="font" type="Font" line="555"/>
                <javadoc line="555">
                    Font being used to render the segment.                    
                </javadoc>
                <declaration name="foreground" type="Color" line="559"/>
                <javadoc line="559">
                    Foreground (text) color of the segment.                    
                </javadoc>
                <declaration name="background" type="Color" line="563"/>
                <javadoc line="563">
                    Background color of the segment.                    
                </javadoc>
                <declaration name="underline" type="Boolean" line="567"/>
                <javadoc line="567">
                    Whether the segment is underlined.                    
                </javadoc>
                <javadoc line="571">
                    Construct a segment with null properties.                    
                </javadoc>
                <method name="SegmentInfo" type="constructor" line="574"/>
                <javadoc line="576">
                    Applies this particular SegmentInfo&apos;s font to the graphics object
                      passed in.                    
                    <param>
                        g2 will have the font of this segment applied                        
                    </param>
                </javadoc>
                <method name="applyFont" type="void" line="581">
                    <params>
                        <param name="g2" type="Graphics2D"/>
                    </params>
                    <scope line="582"/>
                </method>
            </class>
        </class>
    </source>