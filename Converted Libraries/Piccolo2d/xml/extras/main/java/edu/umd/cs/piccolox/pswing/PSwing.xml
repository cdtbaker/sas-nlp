<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.pswing">
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.RepaintManager"/>
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.event.ContainerAdapter"/>
        <import package="java.awt.event.ContainerEvent"/>
        <import package="java.awt.event.ContainerListener"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <class name="PSwing" line="30">
            <extends class="PNode"/>
            <implements interface="Serializable"/>
            <implements interface="PropertyChangeListener"/>
            <javadoc line="30">
                &lt;b&gt;PSwing&lt;/b&gt; is used to add Swing Components to a Piccolo2D canvas.
                  &lt;p&gt;
                  Example: adding a swing JButton to a PCanvas:
                  &lt;pre&gt;
                  PSwingCanvas canvas = new PSwingCanvas();
                  JButton button = new JButton(&amp;quot;Button&amp;quot;);
                  swing = new PSwing(canvas, button);
                  canvas.getLayer().addChild(swing);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  NOTE: PSwing has the current limitation that it does not listen for Container
                  events. This is only an issue if you create a PSwing and later add Swing
                  components to the PSwing&apos;s component hierarchy that do not have double
                  buffering turned off or have a smaller font size than the minimum font size
                  of the original PSwing&apos;s component hierarchy.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For instance, the following bit of code will give unexpected results:
                  &lt;pre&gt;
                  JPanel panel = new JPanel();
                  PSwing swing = new PSwing(panel);
                  JPanel newChild = new JPanel();
                  newChild.setDoubleBuffered(true);
                  panel.add(newChild);
                  &lt;/pre&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  NOTE: PSwing cannot be correctly interacted with through multiple cameras.
                  There is no support for it yet.
                  &lt;/p&gt;
                  &lt;p&gt;
                  NOTE: PSwing is java.io.Serializable.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; Serialized objects of this class will not be compatible with
                  future Piccolo releases. The current serialization support is appropriate for
                  short term storage or RMI between applications running the same version of
                  Piccolo. A future release of Piccolo will provide support for long term
                  persistence.
                  &lt;/p&gt;                
                <author>
                    Sam R. Reid                    
                </author>
                <author>
                    Chris Malley (cmalley@pixelzoom.com)                    
                </author>
                <author>
                    Benjamin B. Bederson                    
                </author>
                <author>
                    Lance E. Good                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="77"/>
            <javadoc line="77">
                Default serial version UID.                
            </javadoc>
            <declaration name="PSWING_PROPERTY" type="String" line="81"/>
            <javadoc line="81">
                Key for this object in the Swing component&apos;s client properties.                
            </javadoc>
            <declaration name="TEMP_REPAINT_BOUNDS2" type="PBounds" line="85"/>
            <javadoc line="85">
                Temporary repaint bounds.                
            </javadoc>
            <declaration name="BUFFER_BACKGROUND_COLOR" type="Color" line="89"/>
            <javadoc line="89">
                For use when buffered painting is enabled.                
            </javadoc>
            <declaration name="IDENTITY_TRANSFORM" type="AffineTransform" line="93"/>
            <declaration name="DEFAULT_GREEK_THRESHOLD" type="double" line="94"/>
            <javadoc line="94">
                Default Greek threshold, &lt;code&gt;0.3d&lt;/code&gt;.                
            </javadoc>
            <declaration name="greekThreshold" type="double" line="98"/>
            <javadoc line="98">
                The cutoff at which the Swing component is rendered greek.                
            </javadoc>
            <declaration name="component" type="JComponent" line="102"/>
            <javadoc line="102">
                Swing component for this Swing node.                
            </javadoc>
            <declaration name="useBufferedPainting" type="boolean" line="106"/>
            <javadoc line="106">
                Whether or not to use buffered painting.                
                <see>
                    #paint(java.awt.Graphics2D)                    
                </see>
            </javadoc>
            <declaration name="buffer" type="BufferedImage" line="111"/>
            <javadoc line="111">
                Used when buffered painting is enabled.                
            </javadoc>
            <declaration name="minFontSize" type="double" line="115"/>
            <javadoc line="115">
                Minimum font size.                
            </javadoc>
            <declaration name="defaultStroke" type="Stroke" line="119"/>
            <javadoc line="119">
                Default stroke, &lt;code&gt;new BasicStroke()&lt;/code&gt;. Cannot be made static
                  because BasicStroke is not serializable.  Should not be null.                
            </javadoc>
            <declaration name="DEFAULT_FONT" type="Font" line="124"/>
            <javadoc line="124">
                Default font, 12 point &lt;code&gt;&quot;SansSerif&quot;&lt;/code&gt;. Will be made final in
                  version 2.0.                
            </javadoc>
            <declaration name="canvas" type="PSwingCanvas" line="129"/>
            <javadoc line="129">
                Swing canvas for this swing node.                
            </javadoc>
            <declaration name="listeningTo" type="ArrayList" line="133"/>
            <javadoc line="133">
                Used to keep track of which nodes we&apos;ve attached listeners to since no
                  built in support in PNode.                
            </javadoc>
            <declaration name="parentListener" type="PropertyChangeListener" line="138"/>
            <javadoc line="138">
                The parent listener for camera/canvas changes.                
            </javadoc>
            <anonymous_class line="141">
                <javadoc line="142">
                    {@inheritDoc}                    
                </javadoc>
                <method name="propertyChange" type="void" line="145">
                    <params>
                        <param name="evt" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="parent" type="PNode" line="146"/>
                    <scope line="148"/>
                    <scope line="151"/>
                </method>
                <javadoc line="155">
                    Clear out all the listeners registered to make sure there are no
                      stray references.                    
                    <param>
                        fromParent Parent to start with for clearing listeners                        
                    </param>
                </javadoc>
                <method name="clearListeners" type="void" line="160">
                    <params>
                        <param name="fromParent" type="PNode"/>
                    </params>
                    <scope line="161"/>
                </method>
            </anonymous_class>
            <declaration name="doubleBufferRemover" type="ContainerListener" line="169"/>
            <javadoc line="169">
                Listens to container nodes for changes to its contents. Any additions
                  will automatically have double buffering turned off.                
            </javadoc>
            <anonymous_class line="173">
                <method name="componentAdded" type="void" line="174">
                    <params>
                        <param name="event" type="ContainerEvent"/>
                    </params>
                    <declaration name="childComponent" type="Component" line="175"/>
                    <scope line="176"/>
                </method>
                <javadoc line="180">
                    Disables double buffering on every component in the hierarchy of the
                      targetComponent.
                      I&apos;m assuming that the intent of the is method is that it should be
                      called explicitly by anyone making changes to the hierarchy of the
                      Swing component graph.                    
                </javadoc>
                <method name="disableDoubleBuffering" type="void" line="187">
                    <params>
                        <param name="targetComponent" type="JComponent"/>
                    </params>
                    <scope line="189">
                        <declaration name="c" type="Component" line="190"/>
                        <scope line="191"/>
                    </scope>
                </method>
            </anonymous_class>
            <javadoc line="198">
                Create a new visual component wrapper for the specified Swing component.                
                <param>
                    component Swing component to be wrapped                    
                </param>
            </javadoc>
            <method name="PSwing" type="constructor" line="202">
                <params>
                    <param name="component" type="JComponent"/>
                </params>
            </method>
            <javadoc line="210">
                @deprecated by {@link #PSwing(JComponent)}                
                <param>
                    swingCanvas canvas on which the PSwing node will be embedded                    
                </param>
                <param>
                    component not used                    
                </param>
            </javadoc>
            <method name="PSwing" type="constructor" line="215">
                <params>
                    <param name="swingCanvas" type="PSwingCanvas"/>
                    <param name="component" type="JComponent"/>
                </params>
            </method>
            <javadoc line="218">
                If true {@link PSwing} will paint the {@link JComponent} to a buffer with no graphics
                  transformations applied and then paint the buffer to the target transformed
                  graphics context. On some platforms (such as Mac OS X) rendering {@link JComponent}s to
                  a transformed context is slow. Enabling buffered painting gives a significant performance
                  boost on these platforms; however, at the expense of a lower-quality drawing result at larger
                  scales.                
                <since>
                    1.3.1                    
                </since>
                <param>
                    useBufferedPainting true if this {@link PSwing} should use buffered painting                    
                </param>
            </javadoc>
            <method name="setUseBufferedPainting" type="void" line="228">
                <params>
                    <param name="useBufferedPainting" type="boolean"/>
                </params>
            </method>
            <method name="isUseBufferedPainting" type="boolean" line="231"/>
            <javadoc line="234">
                Ensures the bounds of the underlying component are accurate, and sets the
                  bounds of this PNode.                
            </javadoc>
            <method name="updateBounds" type="void" line="238">
                <scope line="239"/>
            </method>
            <javadoc line="244">
                Since the parent ChildWrapper has no layout manager, it is the responsibility of this PSwing
                  to make sure the component has its bounds set properly, otherwise it will not be drawn properly.
                  This method sets the bounds of the component to be equal to its preferred size.                
            </javadoc>
            <method name="updateComponentSize" type="void" line="249"/>
            <javadoc line="252">
                Determines whether the component should be resized, based on whether its actual width and height
                  differ from its preferred width and height.                
                <return>
                    true if the component should be resized.                    
                </return>
            </javadoc>
            <method name="componentNeedsResizing" type="boolean" line="257"/>
            <javadoc line="260">
                Paints the PSwing on the specified renderContext.  Also determines if
                  the Swing component should be rendered normally or as a filled rectangle (greeking).
                  &lt;p/&gt;
                  The transform, clip, and composite will be set appropriately when this
                  object is rendered. It is up to this object to restore the transform,
                  clip, and composite of the Graphics2D if this node changes any of them.
                  However, the color, font, and stroke are unspecified by Piccolo. This
                  object should set those things if they are used, but they do not need to
                  be restored.                
                <param>
                    renderContext Contains information about current render.                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="272">
                <params>
                    <param name="renderContext" type="PPaintContext"/>
                </params>
                <scope line="273"/>
                <declaration name="g2" type="Graphics2D" line="277"/>
                <declaration name="originalStroke" type="Stroke" line="278"/>
                <declaration name="originalFont" type="Font" line="279"/>
                <scope line="282"/>
                <scope line="285"/>
            </method>
            <javadoc line="291">
                Return true if this Swing node should render as greek given the specified
                  paint context.                
                <param>
                    paintContext paint context                    
                </param>
                <return>
                    true if this Swing node should render as greek given the
                      specified paint context                    
                </return>
            </javadoc>
            <method name="shouldRenderGreek" type="boolean" line="298">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
            </method>
            <javadoc line="301">
                Paints the Swing component as greek.  This method assumes that the stroke has been set beforehand.                
                <param>
                    g2 The graphics used to render the filled rectangle                    
                </param>
            </javadoc>
            <method name="paintAsGreek" type="void" line="305">
                <params>
                    <param name="g2" type="Graphics2D"/>
                </params>
                <declaration name="originalColor" type="Color" line="306"/>
                <scope line="307"/>
                <scope line="311"/>
            </method>
            <javadoc line="317">
                {@inheritDoc}                
            </javadoc>
            <method name="setVisible" type="void" line="320">
                <params>
                    <param name="visible" type="boolean"/>
                </params>
                <scope line="322"/>
            </method>
            <javadoc line="326">
                Remove from the SwingWrapper; throws an exception if no canvas is
                  associated with this PSwing.                
            </javadoc>
            <method name="removeFromSwingWrapper" type="void" line="330">
                <scope line="331"/>
            </method>
            <method name="isComponentSwingWrapped" type="boolean" line="335"/>
            <javadoc line="338">
                Renders the wrapped component to the graphics context provided.                
                <param>
                    g2 graphics context for rendering the JComponent                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="342">
                <params>
                    <param name="g2" type="Graphics2D"/>
                </params>
                <scope line="343"/>
                <declaration name="manager" type="PSwingRepaintManager" line="346"/>
                <declaration name="oldHints" type="RenderingHints" line="348"/>
                <scope line="349">
                    <declaration name="bufferedGraphics" type="Graphics2D" line="350"/>
                </scope>
                <scope line="354"/>
            </method>
            <method name="getBufferedGraphics" type="Graphics2D" line="361">
                <params>
                    <param name="source" type="Graphics2D"/>
                </params>
                <declaration name="bufferedGraphics" type="Graphics2D" line="362"/>
                <scope line="363"/>
                <scope line="367"/>
            </method>
            <javadoc line="375">
                Tells whether the buffer for the image of the Swing components
                  is currently valid.                
                <return>
                    true if the buffer is currently valid                    
                </return>
            </javadoc>
            <method name="isBufferValid" type="boolean" line="380"/>
            <javadoc line="383">
                Repaints the specified portion of this visual component. Note that the
                  input parameter may be modified as a result of this call.                
                <param>
                    repaintBounds bounds that need repainting                    
                </param>
            </javadoc>
            <method name="repaint" type="void" line="388">
                <params>
                    <param name="repaintBounds" type="PBounds"/>
                </params>
                <declaration name="sh" type="Shape" line="389"/>
            </method>
            <javadoc line="393">
                Returns the Swing component that this visual component wraps.                
                <return>
                    The Swing component wrapped by this PSwing node                    
                </return>
            </javadoc>
            <method name="getComponent" type="JComponent" line="397"/>
            <javadoc line="400">
                We need to turn off double buffering of Swing components within Piccolo
                  since all components contained within a native container use the same
                  buffer for double buffering. With normal Swing widgets this is fine, but
                  for Swing components within Piccolo this causes problems. This function
                  recurses the component tree rooted at c, and turns off any double
                  buffering in use. It also updates the minimum font size based on the font
                  size of c and adds a property change listener to listen for changes to
                  the font.                
                <param>
                    c The Component to be recursively unDoubleBuffered                    
                </param>
            </javadoc>
            <method name="initializeComponent" type="void" line="411">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="412"/>
                <scope line="416"/>
                <scope line="420"/>
            </method>
            <method name="initializeChildren" type="void" line="424">
                <params>
                    <param name="c" type="Container"/>
                </params>
                <declaration name="children" type="Component[]" line="425"/>
                <scope line="426">
                    <scope line="427"/>
                </scope>
            </method>
            <javadoc line="432">
                Listens for changes in font on components rooted at this PSwing.                
                <param>
                    evt property change event representing the change in font                    
                </param>
            </javadoc>
            <method name="propertyChange" type="void" line="436">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <declaration name="source" type="Component" line="437"/>
                <scope line="438"/>
            </method>
            <method name="readObject" type="void" line="442">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="446">
                Attaches a listener to the specified node and all its parents to listen
                  for a change in the PSwingCanvas. Only PROPERTY_PARENT listeners are
                  added so this code wouldn&apos;t handle if a PLayer were viewed by a different
                  PCamera since that constitutes a child change.                
                <param>
                    node The child node at which to begin a parent-based traversal for
                      adding listeners.                    
                </param>
            </javadoc>
            <method name="listenForCanvas" type="void" line="454">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <declaration name="p" type="PNode" line="455"/>
                <scope line="456">
                    <declaration name="parent" type="PNode" line="458"/>
                    <scope line="459">
                        <declaration name="player" type="PLayer" line="460"/>
                        <scope line="461">
                            <declaration name="cam" type="PCamera" line="462"/>
                            <scope line="463"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="472">
                Attach a property change listener to the specified node, if one has not
                  already been attached.                
                <param>
                    node the node to listen to for parent/pcamera/pcanvas changes                    
                </param>
            </javadoc>
            <method name="listenToNode" type="void" line="477">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <scope line="478"/>
            </method>
            <javadoc line="483">
                Determine whether this PSwing is already listening to the specified node
                  for camera/canvas changes.                
                <param>
                    node the node to check                    
                </param>
                <return>
                    true if this PSwing is already listening to the specified node
                      for camera/canvas changes                    
                </return>
            </javadoc>
            <method name="isListeningTo" type="boolean" line="490">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <scope line="491">
                    <declaration name="pNode" type="PNode" line="492"/>
                    <scope line="493"/>
                </scope>
            </method>
            <javadoc line="499">
                Removes this PSwing from previous PSwingCanvas (if any), and ensure that
                  this PSwing is attached to the new PSwingCanvas.                
                <param>
                    newCanvas the new PSwingCanvas (may be null)                    
                </param>
            </javadoc>
            <method name="updateCanvas" type="void" line="504">
                <params>
                    <param name="newCanvas" type="PSwingCanvas"/>
                </params>
                <scope line="505"/>
                <scope line="508"/>
                <scope line="511"/>
                <scope line="514"/>
            </method>
            <javadoc line="524">
                Return the Greek threshold scale. When the scale will be below this
                  threshold the Swing component is rendered as &apos;Greek&apos; instead of painting
                  the Swing component. Defaults to {@link #DEFAULT_GREEK_THRESHOLD}.                
                <see>
                    PSwing#paintAsGreek(Graphics2D)                    
                </see>
                <return>
                    the current Greek threshold scale                    
                </return>
            </javadoc>
            <method name="getGreekThreshold" type="double" line="531"/>
            <javadoc line="534">
                Set the Greek threshold in scale to &lt;code&gt;greekThreshold&lt;/code&gt;. When the
                  scale will be below this threshold the Swing component is rendered as
                  &apos;Greek&apos; instead of painting the Swing component..                
                <see>
                    PSwing#paintAsGreek(Graphics2D)                    
                </see>
                <param>
                    greekThreshold Greek threshold in scale                    
                </param>
            </javadoc>
            <method name="setGreekThreshold" type="void" line="541">
                <params>
                    <param name="greekThreshold" type="double"/>
                </params>
            </method>
        </class>
    </source>