<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.event">
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <class name="PNotificationCenter" line="13">
            <javadoc line="13">
                &lt;b&gt;PNotificationCenter&lt;/b&gt; provides a way for objects that don&apos;t know about
                  each other to communicate. It receives PNotification objects and broadcasts
                  them to all interested listeners. Unlike standard Java events, the event
                  listeners don&apos;t need to know about the event source, and the event source
                  doesn&apos;t need to maintain the list of listeners.
                  &lt;p&gt;
                  Listeners of the notifications center are held by weak references. So the
                  notification center will not create garbage collection problems as standard
                  java event listeners do.
                  &lt;/p&gt;                
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="NULL_MARKER" type="Object" line="27"/>
            <javadoc line="27">
                Used as a place holder for null names or objects.                
            </javadoc>
            <declaration name="DEFAULT_CENTER" type="PNotificationCenter" line="31"/>
            <javadoc line="31">
                Singleton instance of the notification center.                
            </javadoc>
            <declaration name="listenersMap" type="HashMap" line="35"/>
            <javadoc line="35">
                A map of listeners keyed by NotificationKey objects.                
            </javadoc>
            <declaration name="keyQueue" type="ReferenceQueue" line="39"/>
            <javadoc line="39">
                A queue of NotificationKeys that are available to be garbage collected.                
            </javadoc>
            <javadoc line="43">
                Singleton accessor for the PNotificationCenter.                
                <return>
                    singleton instance of PNotificationCenter                    
                </return>
            </javadoc>
            <method name="defaultCenter" type="PNotificationCenter" line="47">
                <scope line="48"/>
            </method>
            <method name="PNotificationCenter" type="constructor" line="53"/>
            <javadoc line="57">
                Registers the &apos;listener&apos; to receive notifications with the name
                  &apos;notificationName&apos; and/or containing &apos;object&apos;. When a matching
                  notification is posted the callBackMethodName message will be sent to the
                  listener with a single PNotification argument. If notificationName is
                  null then the listener will receive all notifications with an object
                  matching &apos;object&apos;. If &apos;object&apos; is null the listener will receive all
                  notifications with the name &apos;notificationName&apos;.                
                <param>
                    listener object to be notified of notifications                    
                </param>
                <param>
                    callbackMethodName method to be invoked on the listener                    
                </param>
                <param>
                    notificationName name of notifications to filter on                    
                </param>
                <param>
                    object source of notification messages that this listener is
                      interested in                    
                </param>
                <return>
                    true if listener has been added                    
                </return>
            </javadoc>
            <method name="addListener" type="boolean" line="72">
                <params>
                    <param name="listener" type="Object"/>
                    <param name="callbackMethodName" type="String"/>
                    <param name="notificationName" type="String"/>
                    <param name="object" type="Object"/>
                </params>
                <declaration name="name" type="Object" line="74"/>
                <declaration name="sanitizedObject" type="Object" line="75"/>
                <declaration name="method" type="Method" line="76"/>
                <scope line="77"/>
                <declaration name="key" type="NotificationKey" line="80"/>
                <declaration name="notificationTarget" type="NotificationTarget" line="81"/>
                <declaration name="list" type="List" line="82"/>
                <scope line="83"/>
                <scope line="87"/>
            </method>
            <method name="extractCallbackMethod" type="Method" line="92">
                <params>
                    <param name="listener" type="Object"/>
                    <param name="methodName" type="String"/>
                </params>
                <declaration name="method" type="Method" line="93"/>
                <scope line="94">
                    <declaration name="classes" type="Class[]" line="95"/>
                </scope>
                <scope line="99"/>
                <declaration name="modifiers" type="int" line="102"/>
                <scope line="103"/>
            </method>
            <javadoc line="108">
                Sanitizes the object reference by returning NULL_MARKER if the object is
                  null.                
                <param>
                    object object to sanitize                    
                </param>
                <return>
                    NULL_MARKER is object is null, otherwise object                    
                </return>
            </javadoc>
            <method name="nullify" type="Object" line="114">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="115"/>
            </method>
            <javadoc line="120">
                Removes the listener so that it no longer receives notfications from this
                  notification center.                
                <param>
                    listener listener to be removed from this notification center                    
                </param>
            </javadoc>
            <method name="removeListener" type="void" line="125">
                <params>
                    <param name="listener" type="Object"/>
                </params>
                <declaration name="i" type="Iterator" line="127"/>
                <scope line="128"/>
            </method>
            <javadoc line="132">
                Unregisters the listener as a listener for the specified kind of
                  notification.
                  If listener is null all listeners matching notificationName and object
                  are removed.
                  If notificationName is null the listener will be removed from all
                  notifications containing the object.
                  If the object is null then the listener will be removed from all
                  notifications matching notficationName.                
                <param>
                    listener listener to be removed                    
                </param>
                <param>
                    notificationName name of notifications or null for all                    
                </param>
                <param>
                    object notification source or null for all                    
                </param>
            </javadoc>
            <method name="removeListener" type="void" line="145">
                <params>
                    <param name="listener" type="Object"/>
                    <param name="notificationName" type="String"/>
                    <param name="object" type="Object"/>
                </params>
                <declaration name="keys" type="List" line="147"/>
                <declaration name="it" type="Iterator" line="148"/>
                <scope line="149"/>
            </method>
            <javadoc line="153">
                Post a new notification with notificationName and object. The object is
                  typically the object posting the notification. The object may be null.                
                <param>
                    notificationName name of notification to post                    
                </param>
                <param>
                    object source of the notification, null signifies unknown                    
                </param>
            </javadoc>
            <method name="postNotification" type="void" line="159">
                <params>
                    <param name="notificationName" type="String"/>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <javadoc line="162">
                Creates a notification with the name notificationName, associates it with
                  the object, and posts it to this notification center. The object is
                  typically the object posting the notification. It may be null.                
                <param>
                    notificationName name of notification being posted                    
                </param>
                <param>
                    object source of the notification, may be null                    
                </param>
                <param>
                    properties properties associated with the notification                    
                </param>
            </javadoc>
            <method name="postNotification" type="void" line="170">
                <params>
                    <param name="notificationName" type="String"/>
                    <param name="object" type="Object"/>
                    <param name="properties" type="Map"/>
                </params>
            </method>
            <javadoc line="173">
                Post the notification to this notification center. Most often clients
                  will instead use one of this classes convenience postNotifcations
                  methods.                
                <param>
                    notification notification to be dispatched to appropriate
                      listeners                    
                </param>
            </javadoc>
            <method name="postNotification" type="void" line="180">
                <params>
                    <param name="notification" type="PNotification"/>
                </params>
                <declaration name="mergedListeners" type="List" line="181"/>
                <declaration name="name" type="Object" line="182"/>
                <declaration name="object" type="Object" line="183"/>
                <scope line="184"/>
                <scope line="189"/>
                <scope line="192"/>
            </method>
            <javadoc line="198">
                Adds all listeners that are registered to receive notifications to the
                  end of the list provided.                
                <param>
                    notificationName name of the notification being emitted                    
                </param>
                <param>
                    object source of the notification                    
                </param>
                <param>
                    listeners list to append listeners to                    
                </param>
            </javadoc>
            <method name="fillWithMatchingListeners" type="void" line="205">
                <params>
                    <param name="notificationName" type="Object"/>
                    <param name="object" type="Object"/>
                    <param name="listeners" type="List"/>
                </params>
                <declaration name="key" type="Object" line="206"/>
                <declaration name="globalListeners" type="List" line="207"/>
                <scope line="208"/>
            </method>
            <method name="dispatchNotifications" type="void" line="212">
                <params>
                    <param name="notification" type="PNotification"/>
                    <param name="listeners" type="List"/>
                </params>
                <declaration name="listener" type="NotificationTarget" line="213"/>
                <declaration name="listenerIterator" type="Iterator" line="214"/>
                <scope line="215">
                    <scope line="217"/>
                    <scope line="220"/>
                </scope>
            </method>
            <method name="notifyListener" type="void" line="225">
                <params>
                    <param name="notification" type="PNotification"/>
                    <param name="listener" type="NotificationTarget"/>
                </params>
                <scope line="226">
                    <declaration name="objects" type="Object[]" line="227"/>
                </scope>
                <scope line="231"/>
                <scope line="234"/>
            </method>
            <javadoc line="238">
                Returns a list of keys with the given name and object.                
                <param>
                    name name of key                    
                </param>
                <param>
                    object key associated with the object                    
                </param>
                <return>
                    list of matching keys                    
                </return>
            </javadoc>
            <method name="matchingKeys" type="List" line="244">
                <params>
                    <param name="name" type="String"/>
                    <param name="object" type="Object"/>
                </params>
                <declaration name="result" type="List" line="245"/>
                <declaration name="searchKey" type="NotificationKey" line="246"/>
                <declaration name="it" type="Iterator" line="247"/>
                <scope line="248">
                    <declaration name="key" type="NotificationKey" line="249"/>
                    <scope line="250"/>
                </scope>
            </method>
            <javadoc line="256">
                Removes the given listener from receiving notifications with the given
                  key.                
                <param>
                    listener the listener being unregistered                    
                </param>
                <param>
                    key the key that identifies the listener                    
                </param>
            </javadoc>
            <method name="removeListener" type="void" line="262">
                <params>
                    <param name="listener" type="Object"/>
                    <param name="key" type="Object"/>
                </params>
                <scope line="263"/>
                <declaration name="list" type="List" line="267"/>
                <scope line="268"/>
                <declaration name="it" type="Iterator" line="271"/>
                <scope line="272">
                    <declaration name="observer" type="Object" line="273"/>
                    <scope line="274"/>
                </scope>
                <scope line="278"/>
            </method>
            <javadoc line="282">
                Iterates over available keys in the key queue and removes the queue from
                  the listener map.                
            </javadoc>
            <method name="processKeyQueue" type="void" line="286">
                <declaration name="key" type="NotificationKey" line="287"/>
                <scope line="288"/>
            </method>
            <class name="NotificationKey" line="292">
                <extends class="WeakReference"/>
                <javadoc line="292">
                    Represents a notification type from a particular object.                    
                </javadoc>
                <declaration name="name" type="Object" line="296"/>
                <declaration name="hashCode" type="int" line="297"/>
                <javadoc line="298">
                    Creates a notification key with the provided name associated to the
                      object given.                    
                    <param>
                        name name of notification                        
                    </param>
                    <param>
                        object associated object                        
                    </param>
                </javadoc>
                <method name="NotificationKey" type="constructor" line="304">
                    <params>
                        <param name="name" type="Object"/>
                        <param name="object" type="Object"/>
                    </params>
                </method>
                <javadoc line="309">
                    Creates a notification key with the provided name associated with the
                      provided object.                    
                    <param>
                        name name of notification                        
                    </param>
                    <param>
                        object associated object                        
                    </param>
                    <param>
                        queue ReferenceQueue in which this NotificationKey will be
                          appended once it has been cleared to be garbage collected                        
                    </param>
                </javadoc>
                <method name="NotificationKey" type="constructor" line="317">
                    <params>
                        <param name="name" type="Object"/>
                        <param name="object" type="Object"/>
                        <param name="queue" type="ReferenceQueue"/>
                    </params>
                </method>
                <javadoc line="322">
                    Returns name of notification this key represents.                    
                    <return>
                        name of notification                        
                    </return>
                </javadoc>
                <method name="name" type="Object" line="326"/>
                <javadoc line="329">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hashCode" type="int" line="332"/>
                <javadoc line="335">
                    Two keys are equal if they have the same name and are associated with
                      the same object and conform to all other equals rules.                    
                    <param>
                        anObject object being tested for equivalence to this
                          NotificationKey                        
                    </param>
                    <return>
                        true if this object is logically equivalent to the one passed
                          in                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="343">
                    <params>
                        <param name="anObject" type="Object"/>
                    </params>
                    <scope line="344"/>
                    <scope line="347"/>
                    <declaration name="key" type="NotificationKey" line="350"/>
                    <scope line="351"/>
                    <declaration name="object" type="Object" line="354"/>
                </method>
                <javadoc line="357">
                    Returns a nice string representation of this notification key.                    
                    <return>
                        string representation of this notification key                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="361"/>
            </class>
            <class name="NotificationTarget" line="365">
                <extends class="WeakReference"/>
                <javadoc line="365">
                    A NotificationTarget is a method on a particular object that can be
                      invoked.                    
                </javadoc>
                <declaration name="hashCode" type="int" line="370"/>
                <javadoc line="370">
                    Cached hashcode value computed at construction time.                    
                </javadoc>
                <declaration name="method" type="Method" line="374"/>
                <javadoc line="374">
                    Method to be invoked on the object.                    
                </javadoc>
                <javadoc line="378">
                    Creates a notification target representing the method on the
                      particular object provided.                    
                    <param>
                        object object on which method can be invoked                        
                    </param>
                    <param>
                        method method to be invoked                        
                    </param>
                </javadoc>
                <method name="NotificationTarget" type="constructor" line="384">
                    <params>
                        <param name="object" type="Object"/>
                        <param name="method" type="Method"/>
                    </params>
                </method>
                <javadoc line="389">
                    Returns the method that will be invoked on the listener object.                    
                    <return>
                        method to be invoked with notification is to be dispatched                        
                    </return>
                </javadoc>
                <method name="getMethod" type="Method" line="393"/>
                <javadoc line="396">
                    Returns hash code for this notification target.                    
                    <return>
                        hash code                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="400"/>
                <javadoc line="403">
                    Returns true if this object is logically equivalent to the one passed
                      in. For this to happen they must have the same method and object.                    
                    <param>
                        object object being tested for logical equivalency to this one                        
                    </param>
                    <return>
                        true if logically equivalent                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="409">
                    <params>
                        <param name="object" type="Object"/>
                    </params>
                    <scope line="410"/>
                    <scope line="413"/>
                    <declaration name="target" type="NotificationTarget" line="416"/>
                    <scope line="417"/>
                    <declaration name="o" type="Object" line="420"/>
                </method>
                <javadoc line="423">
                    Returns a string representation of this NotificationTarget for
                      debugging purposes.                    
                    <return>
                        string representation                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="428"/>
            </class>
        </class>
    </source>