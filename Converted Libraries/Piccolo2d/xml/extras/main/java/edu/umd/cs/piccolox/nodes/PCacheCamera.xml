<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.nodes">
        <import package="java.awt.Color"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <import package="edu.umd.cs.piccolo.activities.PTransformActivity"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PCacheCamera" line="16">
            <extends class="PCamera"/>
            <javadoc line="16">
                An extension to PCamera that provides a fast image based
                  animationToCenterBounds method.                
                <author>
                    Lance Good                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="22"/>
            <declaration name="paintBuffer" type="BufferedImage" line="23"/>
            <declaration name="imageAnimate" type="boolean" line="24"/>
            <declaration name="imageAnimateBounds" type="PBounds" line="25"/>
            <javadoc line="26">
                Get the buffer used to provide fast image based animation.                
                <return>
                    buffered image used to provide fast image based animation                    
                </return>
            </javadoc>
            <method name="getPaintBuffer" type="BufferedImage" line="30">
                <declaration name="fRef" type="PBounds" line="31"/>
                <scope line="32"/>
            </method>
            <method name="isBufferSmallerThanBounds" type="boolean" line="37">
                <params>
                    <param name="bounds" type="PBounds"/>
                </params>
            </method>
            <method name="buildPaintBuffer" type="BufferedImage" line="40">
                <params>
                    <param name="fRef" type="PBounds"/>
                </params>
                <declaration name="newBufferWidth" type="int" line="41"/>
                <declaration name="newBufferHeight" type="int" line="42"/>
                <scope line="43"/>
                <scope line="46"/>
            </method>
            <javadoc line="50">
                Caches the information necessary to animate from the current view bounds
                  to the specified centerBounds.                
            </javadoc>
            <method name="cacheViewBounds" type="AffineTransform" line="54">
                <params>
                    <param name="centerBounds" type="Rectangle2D"/>
                    <param name="scaleToFit" type="boolean"/>
                </params>
                <declaration name="viewBounds" type="PBounds" line="55"/>
                <declaration name="imageBounds" type="PBounds" line="56"/>
                <declaration name="buffer" type="BufferedImage" line="60"/>
                <declaration name="fPaint" type="Paint" line="61"/>
                <scope line="62"/>
                <declaration name="delta" type="PDimension" line="68"/>
                <declaration name="newTransform" type="PAffineTransform" line="69"/>
                <scope line="71">
                    <declaration name="s" type="double" line="72"/>
                </scope>
            </method>
            <javadoc line="77">
                Turns off the fast image animation and does any other applicable cleanup.                
            </javadoc>
            <method name="clearViewCache" type="void" line="80"/>
            <javadoc line="84">
                Mimics the standard animateViewToCenterBounds but uses a cached image for
                  performance rather than re-rendering the scene at each step.                
                <param>
                    centerBounds bounds to which the view should be centered                    
                </param>
                <param>
                    shouldScaleToFit whether the camera should scale to fit the bounds
                      so the cover as large a portion of the canvas without changing
                      the aspect ratio                    
                </param>
                <param>
                    duration milliseconds the animation should last                    
                </param>
                <return>
                    the scheduled activity, null if duration was 0                    
                </return>
            </javadoc>
            <method name="animateStaticViewToCenterBoundsFast" type="PTransformActivity" line="94">
                <params>
                    <param name="centerBounds" type="Rectangle2D"/>
                    <param name="shouldScaleToFit" type="boolean"/>
                    <param name="duration" type="long"/>
                </params>
                <scope line="95"/>
                <declaration name="newViewTransform" type="AffineTransform" line="98"/>
            </method>
            <javadoc line="101">
                This copies the behavior of the standard animateViewToTransform but
                  clears the cache when it is done.                
                <param>
                    dest the resulting transform that the view should be
                      applying when the animation is complete                    
                </param>
                <param>
                    duration length in milliseconds that the animation should last                    
                </param>
                <return>
                    the scheduled PTransformActivity, null if duration was 0                    
                </return>
            </javadoc>
            <method name="animateStaticViewToTransformFast" type="PTransformActivity" line="109">
                <params>
                    <param name="dest" type="AffineTransform"/>
                    <param name="duration" type="long"/>
                </params>
                <scope line="110"/>
                <anonymous_class line="114">
                    <method name="setTransform" type="void" line="115">
                        <params>
                            <param name="aTransform" type="AffineTransform"/>
                        </params>
                    </method>
                    <method name="getSourceMatrix" type="void" line="118">
                        <params>
                            <param name="aSource" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="t" type="PTransformActivity.Target" line="114"/>
                <anonymous_class line="123">
                    <method name="activityFinished" type="void" line="124"/>
                </anonymous_class>
                <declaration name="ta" type="PTransformActivity" line="123"/>
                <declaration name="r" type="PRoot" line="131"/>
                <scope line="132"/>
            </method>
            <javadoc line="137">
                Overrides the camera&apos;s full paint method to do the fast rendering when
                  possible.                
                <param>
                    paintContext Paint Contex in which the painting is done                    
                </param>
            </javadoc>
            <method name="fullPaint" type="void" line="142">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="143">
                    <declaration name="fRef" type="PBounds" line="144"/>
                    <declaration name="viewBounds" type="PBounds" line="145"/>
                    <declaration name="scale" type="double" line="146"/>
                    <declaration name="xOffset" type="double" line="147"/>
                    <declaration name="yOffset" type="double" line="148"/>
                    <declaration name="scaleW" type="double" line="149"/>
                    <declaration name="scaleH" type="double" line="150"/>
                </scope>
                <scope line="153"/>
            </method>
        </class>
    </source>