<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.nodes">
        <import package="java.awt.Color"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <import package="edu.umd.cs.piccolo.activities.PTransformActivity"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PCacheCamera" line="47">
            <extends class="PCamera"/>
            <javadoc line="47">
                An extension to PCamera that provides a fast image based
                  animationToCenterBounds method.                
                <author>
                    Lance Good                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <declaration name="paintBuffer" type="BufferedImage" line="56"/>
            <declaration name="imageAnimate" type="boolean" line="57"/>
            <declaration name="imageAnimateBounds" type="PBounds" line="58"/>
            <javadoc line="60">
                Get the buffer used to provide fast image based animation.                
                <return>
                    buffered image used to provide fast image based animation                    
                </return>
            </javadoc>
            <method name="getPaintBuffer" type="BufferedImage" line="65">
                <declaration name="fRef" type="PBounds" line="66"/>
                <scope line="67"/>
            </method>
            <method name="isBufferSmallerThanBounds" type="boolean" line="73">
                <params>
                    <param name="bounds" type="PBounds"/>
                </params>
            </method>
            <method name="buildPaintBuffer" type="BufferedImage" line="77">
                <params>
                    <param name="fRef" type="PBounds"/>
                </params>
                <declaration name="newBufferWidth" type="int" line="78"/>
                <declaration name="newBufferHeight" type="int" line="79"/>
                <scope line="81"/>
                <scope line="84"/>
            </method>
            <javadoc line="90">
                Caches the information necessary to animate from the current view bounds
                  to the specified centerBounds.                
            </javadoc>
            <method name="cacheViewBounds" type="AffineTransform" line="94">
                <params>
                    <param name="centerBounds" type="Rectangle2D"/>
                    <param name="scaleToFit" type="boolean"/>
                </params>
                <comment line="98">
                    Initialize the image to the union of the current and destination
                     bounds                    
                </comment>
                <comment line="107">
                    Now create the actual cache image that we will use to animate fast                    
                </comment>
                <comment line="116">
                    Do this after the painting above!                    
                </comment>
                <comment line="119">
                    Return the bounds to the previous viewbounds                    
                </comment>
                <comment line="122">
                    The code below is just copied from animateViewToCenterBounds to
                     create the correct transform to center the specified bounds                    
                </comment>
                <declaration name="viewBounds" type="PBounds" line="95"/>
                <declaration name="imageBounds" type="PBounds" line="99"/>
                <declaration name="buffer" type="BufferedImage" line="108"/>
                <declaration name="fPaint" type="Paint" line="109"/>
                <scope line="110"/>
                <declaration name="delta" type="PDimension" line="124"/>
                <declaration name="newTransform" type="PAffineTransform" line="125"/>
                <scope line="128">
                    <declaration name="s" type="double" line="129"/>
                </scope>
            </method>
            <javadoc line="137">
                Turns off the fast image animation and does any other applicable cleanup.                
            </javadoc>
            <method name="clearViewCache" type="void" line="140"/>
            <javadoc line="145">
                Mimics the standard animateViewToCenterBounds but uses a cached image for
                  performance rather than re-rendering the scene at each step.                
                <param>
                    centerBounds bounds to which the view should be centered                    
                </param>
                <param>
                    shouldScaleToFit whether the camera should scale to fit the bounds
                      so the cover as large a portion of the canvas without changing
                      the aspect ratio                    
                </param>
                <param>
                    duration milliseconds the animation should last                    
                </param>
                <return>
                    the scheduled activity, null if duration was 0                    
                </return>
            </javadoc>
            <method name="animateStaticViewToCenterBoundsFast" type="PTransformActivity" line="157">
                <params>
                    <param name="centerBounds" type="Rectangle2D"/>
                    <param name="shouldScaleToFit" type="boolean"/>
                    <param name="duration" type="long"/>
                </params>
                <scope line="158"/>
                <declaration name="newViewTransform" type="AffineTransform" line="162"/>
            </method>
            <javadoc line="167">
                This copies the behavior of the standard animateViewToTransform but
                  clears the cache when it is done.                
                <param>
                    dest the resulting transform that the view should be
                      applying when the animation is complete                    
                </param>
                <param>
                    duration length in milliseconds that the animation should last                    
                </param>
                <return>
                    the scheduled PTransformActivity, null if duration was 0                    
                </return>
            </javadoc>
            <method name="animateStaticViewToTransformFast" type="PTransformActivity" line="176">
                <params>
                    <param name="dest" type="AffineTransform"/>
                    <param name="duration" type="long"/>
                </params>
                <scope line="177"/>
                <anonymous_class line="182">
                    <method name="setTransform" type="void" line="183">
                        <params>
                            <param name="aTransform" type="AffineTransform"/>
                        </params>
                    </method>
                    <method name="getSourceMatrix" type="void" line="187">
                        <params>
                            <param name="aSource" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="t" type="PTransformActivity.Target" line="182"/>
                <anonymous_class line="192">
                    <method name="activityFinished" type="void" line="193"/>
                </anonymous_class>
                <declaration name="ta" type="PTransformActivity" line="192"/>
                <declaration name="r" type="PRoot" line="200"/>
                <scope line="201"/>
            </method>
            <javadoc line="208">
                Overrides the camera&apos;s full paint method to do the fast rendering when
                  possible.                
                <param>
                    paintContext Paint Contex in which the painting is done                    
                </param>
            </javadoc>
            <method name="fullPaint" type="void" line="214">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="215">
                    <declaration name="fRef" type="PBounds" line="216"/>
                    <declaration name="viewBounds" type="PBounds" line="217"/>
                    <declaration name="scale" type="double" line="218"/>
                    <declaration name="xOffset" type="double" line="219"/>
                    <declaration name="yOffset" type="double" line="220"/>
                    <declaration name="scaleW" type="double" line="221"/>
                    <declaration name="scaleH" type="double" line="222"/>
                </scope>
                <scope line="227"/>
            </method>
        </class>
    </source>