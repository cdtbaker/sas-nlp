<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.handles">
        <import package="java.awt.Cursor"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="javax.swing.SwingConstants"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <import package="edu.umd.cs.piccolox.util.PBoundsLocator"/>
        <class name="PBoundsHandle" line="47">
            <extends class="PHandle"/>
            <javadoc line="47">
                &lt;b&gt;PBoundsHandle&lt;/b&gt; a handle for resizing the bounds of another node. If a
                  bounds handle is dragged such that the other node&apos;s width or height becomes
                  negative then the each drag handle&apos;s locator assciated with that other node
                  is &quot;flipped&quot; so that they are attached to and dragging a different corner of
                  the nodes bounds.                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="58"/>
            <declaration name="handleCursorHandler" type="PBasicInputEventHandler" line="60"/>
            <javadoc line="60">
                Event handler responsible for changing the mouse when it enters the
                  handle.                
            </javadoc>
            <javadoc line="66">
                Adds bounds handles to the corners and edges of the provided node.                
                <param>
                    node node to be extended with bounds handles                    
                </param>
            </javadoc>
            <method name="addBoundsHandlesTo" type="void" line="71">
                <params>
                    <param name="node" type="PNode"/>
                </params>
            </method>
            <javadoc line="82">
                Adds stick handles (always visible regardless of scale since they are
                  attached to the camera) to the node provided.                
                <param>
                    node node being extended with bounds handles                    
                </param>
                <param>
                    camera camera onto which handles will appear                    
                </param>
            </javadoc>
            <method name="addStickyBoundsHandlesTo" type="void" line="89">
                <params>
                    <param name="node" type="PNode"/>
                    <param name="camera" type="PCamera"/>
                </params>
            </method>
            <javadoc line="100">
                Removes all bounds from the node provided.                
                <param>
                    node node having its handles removed from                    
                </param>
            </javadoc>
            <method name="removeBoundsHandlesFrom" type="void" line="105">
                <params>
                    <param name="node" type="PNode"/>
                </params>
                <declaration name="handles" type="ArrayList" line="106"/>
                <declaration name="i" type="Iterator" line="108"/>
                <scope line="109">
                    <declaration name="each" type="PNode" line="110"/>
                    <scope line="111"/>
                </scope>
            </method>
            <javadoc line="118">
                Creates a bounds handle that will be attached to the provided locator.                
                <param>
                    locator locator used to position the node                    
                </param>
            </javadoc>
            <method name="PBoundsHandle" type="constructor" line="123">
                <params>
                    <param name="locator" type="PBoundsLocator"/>
                </params>
            </method>
            <javadoc line="127">
                Installs the handlers to this particular bounds handle.                
            </javadoc>
            <method name="installHandleEventHandlers" type="void" line="130"/>
            <javadoc line="136">
                Return the event handler that is responsible for setting the mouse cursor
                  when it enters/exits this handle.                
                <return>
                    current handler responsible for changing the mouse cursor                    
                </return>
            </javadoc>
            <method name="getHandleCursorEventHandler" type="PBasicInputEventHandler" line="142"/>
            <javadoc line="146">
                Is invoked when the a drag starts on this handle.                
                <param>
                    aLocalPoint point in the handle's coordinate system that is
                      pressed                    
                </param>
                <param>
                    aEvent event representing the start of the drag                    
                </param>
            </javadoc>
            <method name="startHandleDrag" type="void" line="153">
                <params>
                    <param name="aLocalPoint" type="Point2D"/>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
                <declaration name="l" type="PBoundsLocator" line="154"/>
            </method>
            <javadoc line="158">
                Is invoked when the handle is being dragged.                
                <param>
                    aLocalDimension dimension representing the magnitude of the handle
                      drag                    
                </param>
                <param>
                    aEvent event responsible for the call                    
                </param>
            </javadoc>
            <method name="dragHandle" type="void" line="165">
                <params>
                    <param name="aLocalDimension" type="PDimension"/>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
                <declaration name="l" type="PBoundsLocator" line="166"/>
                <declaration name="n" type="PNode" line="168"/>
                <declaration name="b" type="PBounds" line="169"/>
                <declaration name="parent" type="PNode" line="171"/>
                <scope line="172"/>
                <declaration name="dx" type="double" line="179"/>
                <declaration name="dy" type="double" line="180"/>
                <declaration name="flipX" type="boolean" line="218"/>
                <declaration name="flipY" type="boolean" line="219"/>
                <scope line="221"/>
                <scope line="227"/>
                <scope line="233"/>
            </method>
            <javadoc line="240">
                Call back invoked when the drag is finished.                
                <param>
                    aLocalPoint point on the handle where the drag was ended                    
                </param>
                <param>
                    aEvent event responsible for the end of the drag                    
                </param>
            </javadoc>
            <method name="endHandleDrag" type="void" line="246">
                <params>
                    <param name="aLocalPoint" type="Point2D"/>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
                <declaration name="l" type="PBoundsLocator" line="247"/>
            </method>
            <javadoc line="251">
                Moves locators around so that they are still logically positioned.
                  This is needed when a node is resized until its width or height is
                  negative.                
                <param>
                    flipX whether to allow flipping along the x direction                    
                </param>
                <param>
                    flipY whether to allow flipping along the y direction                    
                </param>
            </javadoc>
            <method name="flipSiblingBoundsHandles" type="void" line="260">
                <params>
                    <param name="flipX" type="boolean"/>
                    <param name="flipY" type="boolean"/>
                </params>
                <declaration name="i" type="Iterator" line="261"/>
                <scope line="262">
                    <declaration name="each" type="Object" line="263"/>
                    <scope line="264"/>
                </scope>
            </method>
            <javadoc line="270">
                Flips this bounds around if it needs to be. This is required when a node
                  is resized until either its height or width is negative.                
                <param>
                    flipX whether to allow flipping along the x direction                    
                </param>
                <param>
                    flipY whether to allow flipping along the y direction                    
                </param>
            </javadoc>
            <method name="flipHandleIfNeeded" type="void" line="277">
                <params>
                    <param name="flipX" type="boolean"/>
                    <param name="flipY" type="boolean"/>
                </params>
                <comment line="361">
                    reset locator to update layout                    
                </comment>
                <declaration name="l" type="PBoundsLocator" line="278"/>
                <scope line="280"/>
                <scope line="286"/>
                <scope line="292"/>
                <scope line="298"/>
                <scope line="304"/>
                <scope line="310"/>
                <scope line="313"/>
                <scope line="316"/>
                <scope line="322"/>
                <scope line="325"/>
                <scope line="328"/>
                <scope line="334"/>
                <scope line="337"/>
                <scope line="340"/>
                <scope line="346"/>
                <scope line="349"/>
                <scope line="352"/>
            </method>
            <javadoc line="365">
                Returns an appropriate handle for the given side of a node.                
                <param>
                    side side given as SwingConstants values.                    
                </param>
                <return>
                    Appropriate cursor, or null if none can be identified.                    
                </return>
            </javadoc>
            <method name="getCursorFor" type="Cursor" line="372">
                <params>
                    <param name="side" type="int"/>
                </params>
            </method>
            <class name="MouseCursorUpdateHandler" line="402">
                <extends class="PBasicInputEventHandler"/>
                <declaration name="cursorPushed" type="boolean" line="403"/>
                <method name="MouseCursorUpdateHandler" type="constructor" line="405"/>
                <javadoc line="409">
                    When mouse is entered, push appropriate mouse cursor on cursor stack.                    
                    <param>
                        aEvent the mouse entered event                        
                    </param>
                </javadoc>
                <method name="mouseEntered" type="void" line="414">
                    <params>
                        <param name="aEvent" type="PInputEvent"/>
                    </params>
                    <scope line="415"/>
                </method>
                <javadoc line="421">
                    When mouse leaves, pop cursor from stack.                    
                    <param>
                        aEvent the mouse exited event                        
                    </param>
                </javadoc>
                <method name="mouseExited" type="void" line="426">
                    <params>
                        <param name="aEvent" type="PInputEvent"/>
                    </params>
                    <scope line="427">
                        <declaration name="focus" type="PPickPath" line="428"/>
                        <scope line="430"/>
                    </scope>
                </method>
                <javadoc line="437">
                    If mouse is released, cursor should pop as well.                    
                    <param>
                        event the mouse released event                        
                    </param>
                </javadoc>
                <method name="mouseReleased" type="void" line="442">
                    <params>
                        <param name="event" type="PInputEvent"/>
                    </params>
                    <scope line="443"/>
                </method>
            </class>
        </class>
    </source>