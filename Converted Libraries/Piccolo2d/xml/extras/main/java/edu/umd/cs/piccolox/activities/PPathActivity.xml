<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.activities">
        <import package="edu.umd.cs.piccolo.activities.PInterpolatingActivity"/>
        <class name="PPathActivity" line="3">
            <extends class="PInterpolatingActivity"/>
            <javadoc line="3">
                &lt;b&gt;PPathActivity&lt;/b&gt; is the abstract base class for all path activity
                  interpolators. Path activities interpolate between multiple states over the
                  duration of the activity.
                  &lt;p&gt;
                  Knots are used to determine when in time the activity should move from state
                  to state. Knot values should be increasing in value from 0 to 1 inclusive.
                  This class is based on the Java 3D PathInterpolator object, see that class
                  documentation for more information on the basic concepts used in this classes
                  design.
                  &lt;/p&gt;
                  &lt;p&gt;
                  See PPositionPathActivity for a concrete path activity that will animate
                  through a list of points.
                  &lt;/p&gt;                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="knots" type="float[]" line="22"/>
            <javadoc line="22">
                The &quot;knots&quot; that define this path&apos;s activity timing through its activity
                  and should be an monotonously increasing array starting where each value
                  is &gt;=0 and ending at 1f.                
            </javadoc>
            <javadoc line="28">
                Constructs a PPathActivity that will last the specified duration, will
                  animate every stepRate and will progress according to the knots provided.                
                <param>
                    duration duration in milliseconds that this activity should last                    
                </param>
                <param>
                    stepRate interval in milliseconds between animation steps                    
                </param>
                <param>
                    knots array defining the speed of the animation alongs it's
                      animation                    
                </param>
            </javadoc>
            <method name="PPathActivity" type="constructor" line="36">
                <params>
                    <param name="duration" type="long"/>
                    <param name="stepRate" type="long"/>
                    <param name="knots" type="float[]"/>
                </params>
            </method>
            <javadoc line="39">
                Constructs a PPathActivity that will repeat the specified number of
                  times, last the specified duration, will animate every stepRate and will
                  progress according to the knots provided.                
                <param>
                    duration duration in milliseconds that this activity should last                    
                </param>
                <param>
                    stepRate interval in milliseconds between animation steps                    
                </param>
                <param>
                    knots array defining the speed of the animation alongs it's
                      animation                    
                </param>
                <param>
                    loopCount # of times activity should repeat                    
                </param>
                <param>
                    mode controls easing of the activity                    
                </param>
            </javadoc>
            <method name="PPathActivity" type="constructor" line="50">
                <params>
                    <param name="duration" type="long"/>
                    <param name="stepRate" type="long"/>
                    <param name="loopCount" type="int"/>
                    <param name="mode" type="int"/>
                    <param name="knots" type="float[]"/>
                </params>
            </method>
            <javadoc line="54">
                Returns the number of knots that define the timing of this activity.                
                <return>
                    # of knots                    
                </return>
            </javadoc>
            <method name="getKnotsLength" type="int" line="58"/>
            <javadoc line="61">
                Changes the knots that define the timing of this activity.                
                <param>
                    newKnots the new knots to assign to this activity                    
                </param>
            </javadoc>
            <method name="setKnots" type="void" line="65">
                <params>
                    <param name="newKnots" type="float[]"/>
                </params>
                <scope line="66"/>
                <scope line="69"/>
            </method>
            <javadoc line="73">
                Return the knots that define the timing of this activity.                
                <return>
                    new knots                    
                </return>
            </javadoc>
            <method name="getKnots" type="float[]" line="77">
                <scope line="78"/>
            </method>
            <javadoc line="83">
                Changes the knot at the given index.                
                <param>
                    index index of knot to change                    
                </param>
                <param>
                    knot new value to assign to the knot                    
                </param>
            </javadoc>
            <method name="setKnot" type="void" line="88">
                <params>
                    <param name="index" type="int"/>
                    <param name="knot" type="float"/>
                </params>
            </method>
            <javadoc line="91">
                Returns the value of the knot at the given index.                
                <param>
                    index index of desired knot                    
                </param>
                <return>
                    value of knot at given index                    
                </return>
            </javadoc>
            <method name="getKnot" type="float" line="96">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Sets the target&apos;s value taking knot timing into account.                
                <param>
                    zeroToOne how much of this activity has elapsed 0=none,
                      1=completed                    
                </param>
            </javadoc>
            <method name="setRelativeTargetValue" type="void" line="104">
                <params>
                    <param name="zeroToOne" type="float"/>
                </params>
                <declaration name="currentKnotIndex" type="int" line="105"/>
                <scope line="106"/>
                <declaration name="startKnot" type="int" line="109"/>
                <declaration name="endKnot" type="int" line="110"/>
                <scope line="111"/>
                <scope line="114"/>
                <declaration name="currentRange" type="float" line="117"/>
                <declaration name="currentPointOnRange" type="float" line="118"/>
                <declaration name="normalizedPointOnRange" type="float" line="119"/>
                <scope line="120"/>
            </method>
            <method name="setRelativeTargetValue" type="void" line="125"/>
            <javadoc line="125">
                An abstract method that allows subclasses to define what target value
                  matches the given progress and knots.                
                <param>
                    zeroToOne how far between the knots the activity is                    
                </param>
                <param>
                    startKnot knot that defines the start of this particular interpolation                    
                </param>
                <param>
                    endKnot knot that defines the end of this particular interpolation                    
                </param>
            </javadoc>
        </class>
    </source>