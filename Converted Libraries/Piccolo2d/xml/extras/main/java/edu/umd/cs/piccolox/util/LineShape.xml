<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.util">
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <class name="LineShape" line="39">
            <implements interface="Shape"/>
            <implements interface="MutablePoints"/>
            <javadoc line="39">
                A shape that can be used to represent hand drawn lines.                
            </javadoc>
            <declaration name="points" type="MutablePoints" line="43"/>
            <declaration name="bounds" type="Rectangle2D" line="44"/>
            <javadoc line="46">
                Constructs a LineShape from a list of mutable points.                
                <param>
                    points points to use when constructing LineShape                    
                </param>
            </javadoc>
            <method name="LineShape" type="constructor" line="51">
                <params>
                    <param name="points" type="MutablePoints"/>
                </params>
            </method>
            <javadoc line="55">
                Changes the LineShape so that it&apos;s composed of the given points.                
                <param>
                    points new Points to use as this shape's path                    
                </param>
            </javadoc>
            <method name="setPoints" type="void" line="60">
                <params>
                    <param name="points" type="MutablePoints"/>
                </params>
                <scope line="61"/>
                <scope line="64"/>
            </method>
            <javadoc line="69">
                Returns the number points in this LineShape.                
                <return>
                    # of points in this line shape                    
                </return>
            </javadoc>
            <method name="getPointCount" type="int" line="74"/>
            <javadoc line="78">
                Returns the x component of the point at the given index.                
                <param>
                    pointIndex index of desired point                    
                </param>
                <return>
                    x component of indexed point                    
                </return>
            </javadoc>
            <method name="getX" type="double" line="85">
                <params>
                    <param name="pointIndex" type="int"/>
                </params>
            </method>
            <javadoc line="89">
                Returns the y component of the point at the given index.                
                <param>
                    pointIndex index of desired point                    
                </param>
                <return>
                    y component of indexed point                    
                </return>
            </javadoc>
            <method name="getY" type="double" line="96">
                <params>
                    <param name="pointIndex" type="int"/>
                </params>
            </method>
            <javadoc line="100">
                Copies the point at the given index into the destination point.                
                <param>
                    pointIndex the index of the desired point                    
                </param>
                <param>
                    destinationPoint the point into which to load the values, or null
                      if a new point is desired                    
                </param>
                <return>
                    destinationPoint or new one if null was provided                    
                </return>
            </javadoc>
            <method name="getPoint" type="Point2D" line="109">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="destinationPoint" type="Point2D"/>
                </params>
            </method>
            <javadoc line="113">
                Computes the bounds of this LineShape and stores them in the provided
                  rectangle.                
                <param>
                    dst rectangle to populate with this LineShape's bounds                    
                </param>
                <return>
                    the bounds                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle2D" line="120">
                <params>
                    <param name="dst" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="125">
                Recalculates the bounds of this LineShape.                
            </javadoc>
            <method name="updateBounds" type="void" line="128"/>
            <javadoc line="133">
                Sets the coordinate of the point at the given index.                
                <param>
                    pointIndex index of the point to change                    
                </param>
                <param>
                    x x component to assign to the point                    
                </param>
                <param>
                    y y component to assign to the point                    
                </param>
            </javadoc>
            <method name="setPoint" type="void" line="140">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="145">
                Adds a point with the given coordinates at the desired index.                
                <param>
                    pointIndex Index at which to add the point                    
                </param>
                <param>
                    x x component of the new point                    
                </param>
                <param>
                    y y component of the new point                    
                </param>
            </javadoc>
            <method name="addPoint" type="void" line="152">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="157">
                Removes n points from the LineShape starting at the provided index.                
                <param>
                    pointIndex Starting index from which points are being removed                    
                </param>
                <param>
                    num The number of sequential points to remove                    
                </param>
            </javadoc>
            <method name="removePoints" type="void" line="163">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="num" type="int"/>
                </params>
            </method>
            <javadoc line="168">
                Applies the given transform to all points in this LineShape.                
                <param>
                    transform Transform to apply                    
                </param>
            </javadoc>
            <method name="transformPoints" type="void" line="173">
                <params>
                    <param name="transform" type="AffineTransform"/>
                </params>
                <declaration name="newPoints" type="XYArray" line="174"/>
            </method>
            <javadoc line="180">
                Returns the current points of this LineShape as a simple Rectangle.                
                <return>
                    bounds of this LineShape                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="185"/>
            <javadoc line="190">
                Returns the current bounds in Rectangle2D format.                
                <return>
                    bounds of LineShape as a Rectangle2D                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="195"/>
            <javadoc line="199">
                Returns whether the given coordinates are on the line defined by (x1,y1)
                  and (x2,y2) within the given distance.                
                <param>
                    x x component of point being tested                    
                </param>
                <param>
                    y y component of point being tested                    
                </param>
                <param>
                    x1 x component of start point of line segment                    
                </param>
                <param>
                    y1 y component of start point of line segment                    
                </param>
                <param>
                    x2 x component of end point of line segment                    
                </param>
                <param>
                    y2 y component of end point of line segment                    
                </param>
                <param>
                    min whether the point should be constrained to "after" the start
                      of the segment                    
                </param>
                <param>
                    max whether the point should be constrained to "before" the end of
                      the segment                    
                </param>
                <param>
                    distance distance from line acceptable as "touching"                    
                </param>
                <return>
                    whether the point (x,y) is near enough to the given line                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="217">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                    <param name="min" type="boolean"/>
                    <param name="max" type="boolean"/>
                    <param name="distance" type="double"/>
                </params>
                <comment line="222">
                    If line is a point then bail out                    
                </comment>
                <comment line="230">
                    distance along segment as a ratio or the (x1,y1)-&gt;(x2,y2) vector                    
                </comment>
                <comment line="239">
                    Point is not &quot;beside&quot; the segment and it&apos;s been disallowed, bail.                    
                </comment>
                <declaration name="dx" type="double" line="218"/>
                <declaration name="dy" type="double" line="219"/>
                <scope line="222"/>
                <declaration name="dx2" type="double" line="226"/>
                <declaration name="dy2" type="double" line="227"/>
                <declaration name="p" type="double" line="230"/>
                <scope line="231"/>
                <scope line="234"/>
                <scope line="239"/>
                <declaration name="len" type="double" line="246"/>
            </method>
            <javadoc line="250">
                Returns true if the given coordinates are within d units from any segment
                  of the LineShape.                
                <param>
                    x x component of point being tested                    
                </param>
                <param>
                    y y component of point being tested                    
                </param>
                <param>
                    d acceptable distance                    
                </param>
                <return>
                    true if point is close enough to the LineShape                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="259">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="d" type="double"/>
                </params>
                <declaration name="x1" type="double" line="260"/>
                <scope line="261"/>
                <scope line="266">
                    <scope line="271"/>
                </scope>
            </method>
            <javadoc line="278">
                Returns true if point is within 2 pixels of any line segment of this
                  LineShape.                
                <param>
                    x x component of point being tested                    
                </param>
                <param>
                    y y component of point being tested                    
                </param>
                <return>
                    true if point is within 2 pixels of any of this LineShape's
                      segments                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="287">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="291">
                Returns true if point is within 2 pixels of any line segment of this
                  LineShape.                
                <param>
                    p point being tested                    
                </param>
                <return>
                    true if point is within 2 pixels of any of this LineShape's
                      segments                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="299">
                <params>
                    <param name="p" type="Point2D"/>
                </params>
            </method>
            <javadoc line="303">
                Returns true if the two segments defined by (x1,y1)-&gt;(x2,y2) and
                  (x3,y3)-&gt;(x4,y4) intersect. Optional fields allow for consideration of
                  extending the segments to infinity at either end.                
                <param>
                    x1 segment 1's start x component                    
                </param>
                <param>
                    y1 segment 1's start y component                    
                </param>
                <param>
                    x2 segment 1's end x component                    
                </param>
                <param>
                    y2 segment 1's end y component                    
                </param>
                <param>
                    x3 segment 2's start x component                    
                </param>
                <param>
                    y3 segment 2's start y component                    
                </param>
                <param>
                    x4 segment 2's end x component                    
                </param>
                <param>
                    y4 segment 2's end y component                    
                </param>
                <param>
                    min1 whether the second segment is acceptable if it passes
                      "before the start of the first segment"                    
                </param>
                <param>
                    max1 whether the second segment is acceptable if it passes
                      "after the end of the first segment"                    
                </param>
                <param>
                    min2 whether the first segment is acceptable if it passes
                      "before the start of the second segment"                    
                </param>
                <param>
                    max2 whether the first segment is acceptable if it passes
                      "after the start of the second segment"                    
                </param>
                <return>
                    true if line segments intersect                    
                </return>
            </javadoc>
            <method name="intersects" type="boolean" line="328">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                    <param name="x3" type="double"/>
                    <param name="y3" type="double"/>
                    <param name="x4" type="double"/>
                    <param name="y4" type="double"/>
                    <param name="min1" type="boolean"/>
                    <param name="max1" type="boolean"/>
                    <param name="min2" type="boolean"/>
                    <param name="max2" type="boolean"/>
                </params>
                <declaration name="dx1" type="double" line="329"/>
                <declaration name="d" type="double" line="330"/>
                <scope line="332"/>
                <scope line="337"/>
                <scope line="342"/>
                <scope line="347"/>
                <scope line="352"/>
            </method>
            <javadoc line="358">
                Returns true if any segment crosses an edge of the rectangle.                
                <param>
                    x left of rectangle to be tested                    
                </param>
                <param>
                    y top of rectangle to be tested                    
                </param>
                <param>
                    w width of rectangle to be tested                    
                </param>
                <param>
                    h height of rectangle to be tested                    
                </param>
                <return>
                    true if rectangle intersects                    
                </return>
            </javadoc>
            <method name="intersects" type="boolean" line="368">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <declaration name="x1" type="double" line="369"/>
                <scope line="370"/>
                <scope line="375">
                    <scope line="383"/>
                </scope>
            </method>
            <javadoc line="390">
                Returns true if any segment crosses an edge of the rectangle.                
                <param>
                    r rectangle to be tested                    
                </param>
                <return>
                    true if rectangle intersects                    
                </return>
            </javadoc>
            <method name="intersects" type="boolean" line="396">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="400">
                Whether the LineShape contains the rectangle defined.                
                <param>
                    x left of defined rectangle                    
                </param>
                <param>
                    y top of defined rectangle                    
                </param>
                <param>
                    width width of defined rectangle                    
                </param>
                <param>
                    height height of defined rectangle                    
                </param>
                <return>
                    true if rectangle is contained                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="409">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
            </method>
            <javadoc line="413">
                Whether the LineShape contains the rectangle.                
                <param>
                    r rectangle being tested                    
                </param>
                <return>
                    true if rectangle is contained                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="419">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="423">
                Returns an iterator that can be used to iterate of the segments of this
                  LineShape. Optionally applying the given transform before returning it.                
                <param>
                    at optional transform to apply to segment before returning it. May
                      be null                    
                </param>
                <return>
                    iterator for iterating segments of this LineShape                    
                </return>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="431">
                <params>
                    <param name="at" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="435">
                Returns an iterator that can be used to iterate of the segments of this
                  LineShape. Optionally applying the given transform before returning it.                
                <param>
                    at optional transform to apply to segment before returning it. May
                      be null                    
                </param>
                <param>
                    flatness ignored completely                    
                </param>
                <return>
                    iterator for iterating segments of this LineShape                    
                </return>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="444">
                <params>
                    <param name="at" type="AffineTransform"/>
                    <param name="flatness" type="double"/>
                </params>
            </method>
            <class name="LinePathIterator" line="448">
                <implements interface="PathIterator"/>
                <declaration name="points" type="Points" line="450"/>
                <declaration name="trans" type="AffineTransform" line="451"/>
                <declaration name="i" type="int" line="452"/>
                <javadoc line="454">
                    Constructs a LinePathIterator for the given points and with an
                      optional transform.                    
                    <param>
                        points points to be iterated                        
                    </param>
                    <param>
                        trans optional iterator to apply to paths before returning
                          them                        
                    </param>
                </javadoc>
                <method name="LinePathIterator" type="constructor" line="462">
                    <params>
                        <param name="points" type="Points"/>
                        <param name="trans" type="AffineTransform"/>
                    </params>
                </method>
                <javadoc line="467">
                    Returns the winding rule being applied when selecting next paths.                    
                    <return>
                        GeneralPath.WIND_EVEN_ODD since that's the only policy
                          supported                        
                    </return>
                </javadoc>
                <method name="getWindingRule" type="int" line="473"/>
                <javadoc line="477">
                    Returns true if there are no more paths to iterate over.                    
                    <return>
                        true if iteration is done                        
                    </return>
                </javadoc>
                <method name="isDone" type="boolean" line="482"/>
                <javadoc line="486">
                    Moves to the next path.                    
                </javadoc>
                <method name="next" type="void" line="489"/>
                <declaration name="tempPoint" type="Point2D" line="493"/>
                <method name="currentSegment" type="void" line="495">
                    <scope line="497"/>
                </method>
                <javadoc line="502">
                    Populates the given array with the current segment and returns the
                      type of segment.                    
                    <param>
                        coords array to be populated                        
                    </param>
                    <return>
                        type of segment SEG_MOVETO or SEG_LINETO                        
                    </return>
                </javadoc>
                <method name="currentSegment" type="int" line="510">
                    <params>
                        <param name="coords" type="float[]"/>
                    </params>
                    <scope line="514"/>
                    <scope line="517"/>
                </method>
                <javadoc line="522">
                    Populates the given array with the current segment and returns the
                      type of segment.                    
                    <param>
                        coords array to be populated                        
                    </param>
                    <return>
                        type of segment SEG_MOVETO or SEG_LINETO                        
                    </return>
                </javadoc>
                <method name="currentSegment" type="int" line="530">
                    <params>
                        <param name="coords" type="double[]"/>
                    </params>
                    <scope line="534"/>
                    <scope line="537"/>
                </method>
            </class>
        </class>
    </source>