<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.util">
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <class name="LineShape" line="9">
            <implements interface="Shape"/>
            <implements interface="MutablePoints"/>
            <javadoc line="9">
                A shape that can be used to represent hand drawn lines.                
            </javadoc>
            <declaration name="points" type="MutablePoints" line="13"/>
            <declaration name="bounds" type="Rectangle2D" line="14"/>
            <javadoc line="15">
                Constructs a LineShape from a list of mutable points.                
                <param>
                    points points to use when constructing LineShape                    
                </param>
            </javadoc>
            <method name="LineShape" type="constructor" line="19">
                <params>
                    <param name="points" type="MutablePoints"/>
                </params>
            </method>
            <javadoc line="22">
                Changes the LineShape so that it&apos;s composed of the given points.                
                <param>
                    points new Points to use as this shape's path                    
                </param>
            </javadoc>
            <method name="setPoints" type="void" line="26">
                <params>
                    <param name="points" type="MutablePoints"/>
                </params>
                <scope line="27"/>
                <scope line="30"/>
            </method>
            <javadoc line="34">
                Returns the number points in this LineShape.                
                <return>
                    # of points in this line shape                    
                </return>
            </javadoc>
            <method name="getPointCount" type="int" line="38"/>
            <javadoc line="41">
                Returns the x component of the point at the given index.                
                <param>
                    pointIndex index of desired point                    
                </param>
                <return>
                    x component of indexed point                    
                </return>
            </javadoc>
            <method name="getX" type="double" line="46">
                <params>
                    <param name="pointIndex" type="int"/>
                </params>
            </method>
            <javadoc line="49">
                Returns the y component of the point at the given index.                
                <param>
                    pointIndex index of desired point                    
                </param>
                <return>
                    y component of indexed point                    
                </return>
            </javadoc>
            <method name="getY" type="double" line="54">
                <params>
                    <param name="pointIndex" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                Copies the point at the given index into the destination point.                
                <param>
                    pointIndex the index of the desired point                    
                </param>
                <param>
                    destinationPoint the point into which to load the values, or null
                      if a new point is desired                    
                </param>
                <return>
                    destinationPoint or new one if null was provided                    
                </return>
            </javadoc>
            <method name="getPoint" type="Point2D" line="64">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="destinationPoint" type="Point2D"/>
                </params>
            </method>
            <javadoc line="67">
                Computes the bounds of this LineShape and stores them in the provided
                  rectangle.                
                <param>
                    dst rectangle to populate with this LineShape's bounds                    
                </param>
                <return>
                    the bounds                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle2D" line="73">
                <params>
                    <param name="dst" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="77">
                Recalculates the bounds of this LineShape.                
            </javadoc>
            <method name="updateBounds" type="void" line="80"/>
            <javadoc line="84">
                Sets the coordinate of the point at the given index.                
                <param>
                    pointIndex index of the point to change                    
                </param>
                <param>
                    x x component to assign to the point                    
                </param>
                <param>
                    y y component to assign to the point                    
                </param>
            </javadoc>
            <method name="setPoint" type="void" line="90">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="94">
                Adds a point with the given coordinates at the desired index.                
                <param>
                    pointIndex Index at which to add the point                    
                </param>
                <param>
                    x x component of the new point                    
                </param>
                <param>
                    y y component of the new point                    
                </param>
            </javadoc>
            <method name="addPoint" type="void" line="100">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="104">
                Removes n points from the LineShape starting at the provided index.                
                <param>
                    pointIndex Starting index from which points are being removed                    
                </param>
                <param>
                    num The number of sequential points to remove                    
                </param>
            </javadoc>
            <method name="removePoints" type="void" line="109">
                <params>
                    <param name="pointIndex" type="int"/>
                    <param name="num" type="int"/>
                </params>
            </method>
            <javadoc line="113">
                Applies the given transform to all points in this LineShape.                
                <param>
                    transform Transform to apply                    
                </param>
            </javadoc>
            <method name="transformPoints" type="void" line="117">
                <params>
                    <param name="transform" type="AffineTransform"/>
                </params>
                <declaration name="newPoints" type="XYArray" line="118"/>
            </method>
            <javadoc line="123">
                Returns the current points of this LineShape as a simple Rectangle.                
                <return>
                    bounds of this LineShape                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="127"/>
            <javadoc line="130">
                Returns the current bounds in Rectangle2D format.                
                <return>
                    bounds of LineShape as a Rectangle2D                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="134"/>
            <javadoc line="137">
                Returns whether the given coordinates are on the line defined by (x1,y1)
                  and (x2,y2) within the given distance.                
                <param>
                    x x component of point being tested                    
                </param>
                <param>
                    y y component of point being tested                    
                </param>
                <param>
                    x1 x component of start point of line segment                    
                </param>
                <param>
                    y1 y component of start point of line segment                    
                </param>
                <param>
                    x2 x component of end point of line segment                    
                </param>
                <param>
                    y2 y component of end point of line segment                    
                </param>
                <param>
                    min whether the point should be constrained to "after" the start
                      of the segment                    
                </param>
                <param>
                    max whether the point should be constrained to "before" the end of
                      the segment                    
                </param>
                <param>
                    distance distance from line acceptable as "touching"                    
                </param>
                <return>
                    whether the point (x,y) is near enough to the given line                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="153">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                    <param name="min" type="boolean"/>
                    <param name="max" type="boolean"/>
                    <param name="distance" type="double"/>
                </params>
                <declaration name="dx" type="double" line="154"/>
                <declaration name="dy" type="double" line="155"/>
                <scope line="156"/>
                <declaration name="dx2" type="double" line="159"/>
                <declaration name="dy2" type="double" line="160"/>
                <declaration name="p" type="double" line="161"/>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168"/>
                <declaration name="len" type="double" line="173"/>
            </method>
            <javadoc line="176">
                Returns true if the given coordinates are within d units from any segment
                  of the LineShape.                
                <param>
                    x x component of point being tested                    
                </param>
                <param>
                    y y component of point being tested                    
                </param>
                <param>
                    d acceptable distance                    
                </param>
                <return>
                    true if point is close enough to the LineShape                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="184">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="d" type="double"/>
                </params>
                <declaration name="x1" type="double" line="185"/>
                <scope line="186"/>
                <scope line="191">
                    <scope line="196"/>
                </scope>
            </method>
            <javadoc line="202">
                Returns true if point is within 2 pixels of any line segment of this
                  LineShape.                
                <param>
                    x x component of point being tested                    
                </param>
                <param>
                    y y component of point being tested                    
                </param>
                <return>
                    true if point is within 2 pixels of any of this LineShape's
                      segments                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="210">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="213">
                Returns true if point is within 2 pixels of any line segment of this
                  LineShape.                
                <param>
                    p point being tested                    
                </param>
                <return>
                    true if point is within 2 pixels of any of this LineShape's
                      segments                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="220">
                <params>
                    <param name="p" type="Point2D"/>
                </params>
            </method>
            <javadoc line="223">
                Returns true if the two segments defined by (x1,y1)-&gt;(x2,y2) and
                  (x3,y3)-&gt;(x4,y4) intersect. Optional fields allow for consideration of
                  extending the segments to infinity at either end.                
                <param>
                    x1 segment 1's start x component                    
                </param>
                <param>
                    y1 segment 1's start y component                    
                </param>
                <param>
                    x2 segment 1's end x component                    
                </param>
                <param>
                    y2 segment 1's end y component                    
                </param>
                <param>
                    x3 segment 2's start x component                    
                </param>
                <param>
                    y3 segment 2's start y component                    
                </param>
                <param>
                    x4 segment 2's end x component                    
                </param>
                <param>
                    y4 segment 2's end y component                    
                </param>
                <param>
                    min1 whether the second segment is acceptable if it passes
                      "before the start of the first segment"                    
                </param>
                <param>
                    max1 whether the second segment is acceptable if it passes
                      "after the end of the first segment"                    
                </param>
                <param>
                    min2 whether the first segment is acceptable if it passes
                      "before the start of the second segment"                    
                </param>
                <param>
                    max2 whether the first segment is acceptable if it passes
                      "after the start of the second segment"                    
                </param>
                <return>
                    true if line segments intersect                    
                </return>
            </javadoc>
            <method name="intersects" type="boolean" line="245">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                    <param name="x3" type="double"/>
                    <param name="y3" type="double"/>
                    <param name="x4" type="double"/>
                    <param name="y4" type="double"/>
                    <param name="min1" type="boolean"/>
                    <param name="max1" type="boolean"/>
                    <param name="min2" type="boolean"/>
                    <param name="max2" type="boolean"/>
                </params>
                <declaration name="dx1" type="double" line="246"/>
                <declaration name="d" type="double" line="247"/>
                <scope line="248"/>
                <scope line="253"/>
                <scope line="258"/>
                <scope line="263"/>
                <scope line="268"/>
            </method>
            <javadoc line="273">
                Returns true if any segment crosses an edge of the rectangle.                
                <param>
                    x left of rectangle to be tested                    
                </param>
                <param>
                    y top of rectangle to be tested                    
                </param>
                <param>
                    w width of rectangle to be tested                    
                </param>
                <param>
                    h height of rectangle to be tested                    
                </param>
                <return>
                    true if rectangle intersects                    
                </return>
            </javadoc>
            <method name="intersects" type="boolean" line="281">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <declaration name="x1" type="double" line="282"/>
                <scope line="283"/>
                <scope line="288">
                    <scope line="293"/>
                </scope>
            </method>
            <javadoc line="299">
                Returns true if any segment crosses an edge of the rectangle.                
                <param>
                    r rectangle to be tested                    
                </param>
                <return>
                    true if rectangle intersects                    
                </return>
            </javadoc>
            <method name="intersects" type="boolean" line="304">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="307">
                Whether the LineShape contains the rectangle defined.                
                <param>
                    x left of defined rectangle                    
                </param>
                <param>
                    y top of defined rectangle                    
                </param>
                <param>
                    width width of defined rectangle                    
                </param>
                <param>
                    height height of defined rectangle                    
                </param>
                <return>
                    true if rectangle is contained                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="315">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
            </method>
            <javadoc line="318">
                Whether the LineShape contains the rectangle.                
                <param>
                    r rectangle being tested                    
                </param>
                <return>
                    true if rectangle is contained                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="323">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="326">
                Returns an iterator that can be used to iterate of the segments of this
                  LineShape. Optionally applying the given transform before returning it.                
                <param>
                    at optional transform to apply to segment before returning it. May
                      be null                    
                </param>
                <return>
                    iterator for iterating segments of this LineShape                    
                </return>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="333">
                <params>
                    <param name="at" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="336">
                Returns an iterator that can be used to iterate of the segments of this
                  LineShape. Optionally applying the given transform before returning it.                
                <param>
                    at optional transform to apply to segment before returning it. May
                      be null                    
                </param>
                <param>
                    flatness ignored completely                    
                </param>
                <return>
                    iterator for iterating segments of this LineShape                    
                </return>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="344">
                <params>
                    <param name="at" type="AffineTransform"/>
                    <param name="flatness" type="double"/>
                </params>
            </method>
            <class name="LinePathIterator" line="347">
                <implements interface="PathIterator"/>
                <declaration name="points" type="Points" line="348"/>
                <declaration name="trans" type="AffineTransform" line="349"/>
                <declaration name="i" type="int" line="350"/>
                <javadoc line="351">
                    Constructs a LinePathIterator for the given points and with an
                      optional transform.                    
                    <param>
                        points points to be iterated                        
                    </param>
                    <param>
                        trans optional iterator to apply to paths before returning
                          them                        
                    </param>
                </javadoc>
                <method name="LinePathIterator" type="constructor" line="358">
                    <params>
                        <param name="points" type="Points"/>
                        <param name="trans" type="AffineTransform"/>
                    </params>
                </method>
                <javadoc line="362">
                    Returns the winding rule being applied when selecting next paths.                    
                    <return>
                        GeneralPath.WIND_EVEN_ODD since that's the only policy
                          supported                        
                    </return>
                </javadoc>
                <method name="getWindingRule" type="int" line="367"/>
                <javadoc line="370">
                    Returns true if there are no more paths to iterate over.                    
                    <return>
                        true if iteration is done                        
                    </return>
                </javadoc>
                <method name="isDone" type="boolean" line="374"/>
                <javadoc line="377">
                    Moves to the next path.                    
                </javadoc>
                <method name="next" type="void" line="380"/>
                <declaration name="tempPoint" type="Point2D" line="383"/>
                <method name="currentSegment" type="void" line="384">
                    <scope line="386"/>
                </method>
                <javadoc line="390">
                    Populates the given array with the current segment and returns the
                      type of segment.                    
                    <param>
                        coords array to be populated                        
                    </param>
                    <return>
                        type of segment SEG_MOVETO or SEG_LINETO                        
                    </return>
                </javadoc>
                <method name="currentSegment" type="int" line="396">
                    <params>
                        <param name="coords" type="float[]"/>
                    </params>
                    <scope line="400"/>
                    <scope line="403"/>
                </method>
                <javadoc line="407">
                    Populates the given array with the current segment and returns the
                      type of segment.                    
                    <param>
                        coords array to be populated                        
                    </param>
                    <return>
                        type of segment SEG_MOVETO or SEG_LINETO                        
                    </return>
                </javadoc>
                <method name="currentSegment" type="int" line="413">
                    <params>
                        <param name="coords" type="double[]"/>
                    </params>
                    <scope line="417"/>
                    <scope line="420"/>
                </method>
            </class>
        </class>
    </source>