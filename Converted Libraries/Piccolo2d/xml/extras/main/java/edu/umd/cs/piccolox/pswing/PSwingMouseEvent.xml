<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.pswing">
        <import package="java.awt.Component"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseListener"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.io.Serializable"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <class name="PSwingMouseEvent" line="42">
            <extends class="MouseEvent"/>
            <implements interface="Serializable"/>
            <implements interface="PSwingEvent"/>
            <javadoc line="42">
                &lt;b&gt;PMouseEvent&lt;/b&gt; is an event which indicates that a mouse action occurred
                  in a node.
                  &lt;p&gt;
                  This low-level event is generated by a node object for:
                  &lt;ul&gt;
                  &lt;li&gt;Mouse Events
                  &lt;ul&gt;
                  &lt;li&gt;a mouse button is pressed&lt;/li&gt;
                  &lt;li&gt;a mouse button is released&lt;/li&gt;
                  &lt;li&gt;a mouse button is clicked (pressed and released)&lt;/li&gt;
                  &lt;li&gt;the mouse cursor enters a node&lt;/li&gt;
                  &lt;li&gt;the mouse cursor exits a node&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  A PMouseEvent object is passed to every &lt;code&gt;PMouseListener&lt;/code&gt; or
                  &lt;code&gt;PMouseAdapter&lt;/code&gt; object which registered to receive the
                  &quot;interesting&quot; mouse events using the component&apos;s
                  &lt;code&gt;addMouseListener&lt;/code&gt; method. (&lt;code&gt;PMouseAdapter&lt;/code&gt; objects
                  implement the &lt;code&gt;PMouseListener&lt;/code&gt; interface.) Each such listener
                  object gets a &lt;code&gt;PMouseEvent&lt;/code&gt; containing the mouse event.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; Serialized objects of this class will not be compatible with
                  future Piccolo2d releases. The current serialization support is appropriate
                  for short term storage or RMI between applications running the same version
                  of Piccolo2d. A future release of Piccolo2d will provide support for long
                  term persistence.
                  &lt;/p&gt;                
                <author>
                    Benjamin B. Bederson                    
                </author>
                <author>
                    Sam R. Reid                    
                </author>
                <author>
                    Lance E. Good                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="80"/>
            <declaration name="id" type="int" line="81"/>
            <declaration name="event" type="PInputEvent" line="82"/>
            <javadoc line="84">
                Constructs a new PMouse event from a Java MouseEvent.                
                <param>
                    id The event type (MOUSE_PRESSED, MOUSE_RELEASED, MOUSE_CLICKED,
                      MOUSE_ENTERED, MOUSE_EXITED)                    
                </param>
                <param>
                    swingEvent The original swing mouse event when in MOUSE_RELEASED
                      events.                    
                </param>
                <param>
                    piccoloEvent used to query about the event's Piccolo context                    
                </param>
            </javadoc>
            <method name="PSwingMouseEvent" type="constructor" line="93">
                <params>
                    <param name="id" type="int"/>
                    <param name="swingEvent" type="MouseEvent"/>
                    <param name="piccoloEvent" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="100">
                Creates and returns a new PMouse event from a Java MouseEvent.                
                <param>
                    id The event type (MOUSE_PRESSED, MOUSE_RELEASED, MOUSE_CLICKED,
                      MOUSE_ENTERED, MOUSE_EXITED, MOUSE_MOVED, MOUSE_DRAGGED)                    
                </param>
                <param>
                    swingEvent The original swing mouse event when in
                      MOUSE_DRAGGED and MOUSE_RELEASED events.                    
                </param>
                <param>
                    pEvent used to query about the event's Piccolo2d context                    
                </param>
                <return>
                    the constructed PSwingEvent                    
                </return>
            </javadoc>
            <method name="createMouseEvent" type="PSwingEvent" line="111">
                <params>
                    <param name="id" type="int"/>
                    <param name="swingEvent" type="MouseEvent"/>
                    <param name="pEvent" type="PInputEvent"/>
                </params>
                <scope line="112"/>
                <scope line="116"/>
                <scope line="119"/>
                <scope line="122"/>
            </method>
            <javadoc line="127">
                Returns the x,y position of the event in the local coordinate system of
                  the node the event occurred on.                
                <return>
                    a Point2D object containing the x and y coordinates local to the
                      node.                    
                </return>
            </javadoc>
            <method name="getLocalPoint" type="Point2D" line="134"/>
            <javadoc line="138">
                Returns the horizontal x position of the event in the local coordinate
                  system of the node the event occurred on.                
                <return>
                    x a double indicating horizontal position local to the node.                    
                </return>
            </javadoc>
            <method name="getLocalX" type="double" line="144"/>
            <javadoc line="148">
                Returns the vertical y position of the event in the local coordinate
                  system of the node the event occurred on.                
                <return>
                    y a double indicating vertical position local to the node.                    
                </return>
            </javadoc>
            <method name="getLocalY" type="double" line="154"/>
            <javadoc line="158">
                Determine the event type.                
                <return>
                    the id                    
                </return>
            </javadoc>
            <method name="getID" type="int" line="163"/>
            <javadoc line="167">
                Determine the node the event originated at. If an event percolates up the
                  tree and is handled by an event listener higher up in the tree than the
                  original node that generated the event, this returns the original node.
                  For mouse drag and release events, this is the node that the original
                  matching press event went to - in other words, the event is &apos;grabbed&apos; by
                  the originating node.                
                <return>
                    the node                    
                </return>
            </javadoc>
            <method name="getNode" type="PNode" line="177"/>
            <javadoc line="181">
                Determine the path the event took from the PCanvas down to the visual
                  component.                
                <return>
                    the path                    
                </return>
            </javadoc>
            <method name="getPath" type="PPickPath" line="187"/>
            <javadoc line="191">
                Determine the node the event originated at. If an event percolates up the
                  tree and is handled by an event listener higher up in the tree than the
                  original node that generated the event, this returns the original node.
                  For mouse drag and release events, this is the node that the original
                  matching press event went to - in other words, the event is &apos;grabbed&apos; by
                  the originating node.                
                <return>
                    the node                    
                </return>
            </javadoc>
            <method name="getGrabNode" type="PNode" line="201"/>
            <javadoc line="205">
                Return the path from the PCanvas down to the currently grabbed object.                
                <return>
                    the path                    
                </return>
            </javadoc>
            <method name="getGrabPath" type="PPickPath" line="210"/>
            <javadoc line="214">
                Get the current node that is under the cursor. This may return a
                  different result then getGrabNode() when in a MOUSE_RELEASED or
                  MOUSE_DRAGGED event.                
                <return>
                    the current node.                    
                </return>
            </javadoc>
            <method name="getCurrentNode" type="PNode" line="221"/>
            <javadoc line="225">
                Get the path from the PCanvas down to the visual component currently
                  under the mouse.This may give a different result then getGrabPath()
                  durring a MOUSE_DRAGGED or MOUSE_RELEASED operation.                
                <return>
                    the current path.                    
                </return>
            </javadoc>
            <method name="getCurrentPath" type="PPickPath" line="232"/>
            <javadoc line="236">
                Calls appropriate method on the listener based on this events ID.                
                <param>
                    listener the MouseListener or MouseMotionListener to dispatch to.                    
                </param>
            </javadoc>
            <method name="dispatchTo" type="void" line="241">
                <params>
                    <param name="listener" type="Object"/>
                </params>
                <declaration name="mouseListener" type="MouseListener" line="242"/>
            </method>
            <javadoc line="264">
                Set the souce of this event. As the event is fired up the tree the source
                  of the event will keep changing to reflect the scenegraph object that is
                  firing the event.                
                <param>
                    newSource the currently reported source of the event (will change
                      as event is bubbled up)                    
                </param>
            </javadoc>
            <method name="setSource" type="void" line="272">
                <params>
                    <param name="newSource" type="Object"/>
                </params>
            </method>
            <javadoc line="276">
                Returns this PSwingMouseEvent&apos;s MouseEvent.                
                <return>
                    underlying mouse event of this PSwingMouseEvent                    
                </return>
            </javadoc>
            <method name="asMouseEvent" type="MouseEvent" line="281"/>
        </class>
    </source>