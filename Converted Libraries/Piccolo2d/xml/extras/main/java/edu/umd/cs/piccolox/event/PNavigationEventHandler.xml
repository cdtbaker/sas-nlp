<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.event">
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.activities.PActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PTransformActivity"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventFilter"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <class name="PNavigationEventHandler" line="21">
            <extends class="PBasicInputEventHandler"/>
            <javadoc line="21">
                &lt;b&gt;PNavigationEventHandler&lt;/b&gt; implements simple focus based navigation. Uses
                  mouse button one or the arrow keys to set a new focus. Animates the canvas
                  view to keep the focus node on the screen and at 100 percent scale with
                  minimal view movement.                
                <version>
                    1.0                    
                </version>
                <author>
                    Jesse Grosjean                    
                </author>
            </javadoc>
            <declaration name="SCALING_THRESHOLD" type="double" line="30"/>
            <javadoc line="30">
                Minum size under which two scales are considered the same.                
            </javadoc>
            <declaration name="NAVIGATION_DURATION" type="int" line="34"/>
            <javadoc line="34">
                Amount of time it takes to animation view from one location to another.                
            </javadoc>
            <declaration name="NORTH" type="int" line="38"/>
            <javadoc line="38">
                The UP direction on the screen.                
            </javadoc>
            <declaration name="SOUTH" type="int" line="42"/>
            <javadoc line="42">
                The DOWN direction on the screen.                
            </javadoc>
            <declaration name="EAST" type="int" line="46"/>
            <javadoc line="46">
                The RIGHT direction on the screen.                
            </javadoc>
            <declaration name="WEST" type="int" line="50"/>
            <javadoc line="50">
                The LEFT direction on the screen.                
            </javadoc>
            <declaration name="IN" type="int" line="54"/>
            <javadoc line="54">
                The IN direction on the scene.                
            </javadoc>
            <declaration name="OUT" type="int" line="58"/>
            <javadoc line="58">
                The OUT direction on the scene.                
            </javadoc>
            <declaration name="NODE_TO_GLOBAL_NODE_CENTER_MAPPING" type="Hashtable" line="62"/>
            <declaration name="focusNode" type="PNode" line="63"/>
            <declaration name="navigationActivity" type="PTransformActivity" line="64"/>
            <javadoc line="65">
                Constructs a Navigation Event Handler that will only accepts left mouse
                  clicks.                
            </javadoc>
            <method name="PNavigationEventHandler" type="constructor" line="69"/>
            <javadoc line="73">
                Processes key pressed events.                
                <param>
                    event event representing the key press                    
                </param>
            </javadoc>
            <method name="keyPressed" type="void" line="77">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <declaration name="oldLocation" type="PNode" line="78"/>
                <scope line="88"/>
                <scope line="91"/>
                <scope line="97"/>
                <scope line="100"/>
                <scope line="106"/>
            </method>
            <javadoc line="110">
                Animates the camera to the node that has been pressed.                
                <param>
                    event event representing the mouse press                    
                </param>
            </javadoc>
            <method name="mousePressed" type="void" line="114">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <scope line="116"/>
            </method>
            <javadoc line="121">
                Moves the focus in the downward direction. Animating the camera
                  accordingly.                
                <param>
                    event ignored                    
                </param>
            </javadoc>
            <method name="moveFocusDown" type="void" line="126">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="129">
                Moves the focus &quot;into&quot; the scene. So smaller nodes appear larger on
                  screen. Animates the camera accordingly.                
                <param>
                    event ignored                    
                </param>
            </javadoc>
            <method name="moveFocusIn" type="void" line="134">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="137">
                Moves the focus in the left direction. Animating the camera accordingly.                
                <param>
                    event ignored                    
                </param>
            </javadoc>
            <method name="moveFocusLeft" type="void" line="141">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="144">
                Moves the focus &quot;out&quot; of scene. So larger nodes appear smaller on screen.
                  Animates the camera accordingly.                
                <param>
                    event ignored                    
                </param>
            </javadoc>
            <method name="moveFocusOut" type="void" line="149">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="152">
                Moves the focus in the right direction. Animating the camera accordingly.                
                <param>
                    event ignored                    
                </param>
            </javadoc>
            <method name="moveFocusRight" type="void" line="156">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="159">
                Moves the focus in the up direction. Animating the camera accordingly.                
                <param>
                    event ignored                    
                </param>
            </javadoc>
            <method name="moveFocusUp" type="void" line="163">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="166">
                Moves the focus to the nearest node in the direction specified. Animating
                  the camera appropriately.                
                <param>
                    direction one of NORTH, SOUTH, EAST, WEST, IN, OUT                    
                </param>
            </javadoc>
            <method name="moveFocusInDirection" type="void" line="171">
                <params>
                    <param name="direction" type="int"/>
                </params>
                <declaration name="n" type="PNode" line="172"/>
                <scope line="173"/>
            </method>
            <javadoc line="177">
                Moves the focus to the mouse under the mouse. Animating the camera
                  appropriately.                
                <param>
                    event mouse event                    
                </param>
            </javadoc>
            <method name="moveFocusToMouseOver" type="void" line="182">
                <params>
                    <param name="event" type="PInputEvent"/>
                </params>
                <declaration name="focus" type="PNode" line="183"/>
                <scope line="184"/>
            </method>
            <javadoc line="188">
                Returns the nearest node in the given direction.                
                <param>
                    direction direction in which to look the nearest node                    
                </param>
                <return>
                    nearest node in the given direction                    
                </return>
            </javadoc>
            <method name="getNeighborInDirection" type="PNode" line="193">
                <params>
                    <param name="direction" type="int"/>
                </params>
                <scope line="194"/>
                <declaration name="highlightCenter" type="Point2D" line="198"/>
                <declaration name="l" type="List" line="200"/>
                <declaration name="i" type="Iterator" line="202"/>
                <scope line="203">
                    <declaration name="each" type="PNode" line="204"/>
                    <scope line="205"/>
                </scope>
            </method>
            <javadoc line="211">
                Returns all pickable nodes that are 1 hop away from the currently focused
                  node. This includes, parent, children, and siblings.                
                <return>
                    list of nodes that are 1 hop away from the current focusNode                    
                </return>
            </javadoc>
            <method name="getNeighbors" type="List" line="216">
                <declaration name="result" type="ArrayList" line="217"/>
                <scope line="218"/>
                <declaration name="focusParent" type="PNode" line="221"/>
                <declaration name="i" type="Iterator" line="222"/>
                <scope line="223">
                    <declaration name="each" type="PNode" line="224"/>
                    <scope line="225"/>
                </scope>
            </method>
            <javadoc line="233">
                Returns true if the given node is a neighbor in the given direction
                  relative to the current focus.                
                <param>
                    node the node being tested                    
                </param>
                <param>
                    direction the direction in which we're testing                    
                </param>
                <return>
                    true if node is a neighbor in the direction provided                    
                </return>
            </javadoc>
            <method name="nodeIsNeighborInDirection" type="boolean" line="240">
                <params>
                    <param name="node" type="PNode"/>
                    <param name="direction" type="int"/>
                </params>
                <scope line="247"/>
                <declaration name="highlightCenter" type="Point2D" line="251"/>
                <declaration name="nodeCenter" type="Point2D" line="252"/>
                <declaration name="ytest1" type="double" line="253"/>
                <declaration name="ytest2" type="double" line="254"/>
            </method>
            <javadoc line="268">
                Modifies the array so that it&apos;s sorted in ascending order based on the
                  distance from the given point.                
                <param>
                    nodes list of nodes to be sorted                    
                </param>
                <param>
                    point point from which distance is being computed                    
                </param>
            </javadoc>
            <method name="sortNodesByDistanceFromPoint" type="void" line="274">
                <params>
                    <param name="nodes" type="List"/>
                    <param name="point" type="Point2D"/>
                </params>
                <anonymous_class line="275">
                    <method name="compare" type="int" line="276">
                        <params>
                            <param name="o1" type="Object"/>
                            <param name="o2" type="Object"/>
                        </params>
                    </method>
                    <method name="compare" type="int" line="279">
                        <params>
                            <param name="each1" type="PNode"/>
                            <param name="each2" type="PNode"/>
                        </params>
                        <declaration name="center1" type="Point2D" line="280"/>
                        <declaration name="center2" type="Point2D" line="281"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="289">
                Animates the camera&apos;s view transform into the provided one over the
                  duration provided.                
                <param>
                    camera camera being animated                    
                </param>
                <param>
                    targetTransform the transform to which the camera's transform will
                      be animated                    
                </param>
                <param>
                    duration the number of milliseconds the animation should last                    
                </param>
                <return>
                    an activity object that represents the animation                    
                </return>
            </javadoc>
            <method name="animateCameraViewTransformTo" type="PActivity" line="298">
                <params>
                    <param name="camera" type="PCamera"/>
                    <param name="targetTransform" type="AffineTransform"/>
                    <param name="duration" type="int"/>
                </params>
                <declaration name="wasOldAnimation" type="boolean" line="299"/>
                <scope line="300"/>
                <scope line="304"/>
                <declaration name="source" type="AffineTransform" line="308"/>
                <scope line="309"/>
            </method>
            <javadoc line="316">
                Animates the Camera&apos;s view so that it contains the new focus node.                
                <param>
                    camera The camera to be animated                    
                </param>
                <param>
                    newFocus the node that will gain focus                    
                </param>
                <param>
                    duration number of milliseconds that animation should last for                    
                </param>
                <return>
                    an activity object representing the scheduled animation                    
                </return>
            </javadoc>
            <method name="directCameraViewToFocus" type="PActivity" line="323">
                <params>
                    <param name="camera" type="PCamera"/>
                    <param name="newFocus" type="PNode"/>
                    <param name="duration" type="int"/>
                </params>
                <declaration name="originalViewTransform" type="AffineTransform" line="325"/>
                <declaration name="d" type="PDimension" line="326"/>
                <declaration name="scaleFactor" type="double" line="328"/>
                <declaration name="scalePoint" type="Point2D" line="329"/>
                <scope line="330"/>
                <declaration name="resultingTransform" type="AffineTransform" line="334"/>
            </method>
            <javadoc line="338">
                Instantaneously transforms the provided camera so that it does not
                  contain any extra white space.                
                <param>
                    camera the camera to be transformed                    
                </param>
            </javadoc>
            <method name="fillViewWhiteSpace" type="void" line="343">
                <params>
                    <param name="camera" type="PCamera"/>
                </params>
                <declaration name="rootBounds" type="PBounds" line="344"/>
                <scope line="345"/>
                <declaration name="dx" type="double" line="350"/>
                <declaration name="dy" type="double" line="351"/>
                <declaration name="viewBounds" type="PBounds" line="352"/>
                <scope line="353"/>
                <scope line="356"/>
            </method>
        </class>
    </source>