<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.print.PageFormat"/>
        <import package="java.awt.print.Printable"/>
        <import package="java.awt.print.PrinterException"/>
        <import package="java.awt.print.PrinterJob"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javax.swing.ButtonGroup"/>
        <import package="javax.swing.JButton"/>
        <import package="javax.swing.JOptionPane"/>
        <import package="javax.swing.JPanel"/>
        <import package="javax.swing.JToggleButton"/>
        <import package="javax.swing.JToolBar"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <import package="edu.umd.cs.piccolox.swing.PDefaultScrollDirector"/>
        <import package="edu.umd.cs.piccolox.swing.PScrollDirector"/>
        <import package="edu.umd.cs.piccolox.swing.PScrollPane"/>
        <import package="edu.umd.cs.piccolox.swing.PViewport"/>
        <class name="PrintExample" line="33">
            <extends class="PFrame"/>
            <javadoc line="33">
                Adding print action to scrolling example.                
                <author>
                    Lance Good                    
                </author>
                <author>
                    Ben Bederson                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <method name="PrintExample" type="constructor" line="40"/>
            <method name="PrintExample" type="constructor" line="43">
                <params>
                    <param name="aCanvas" type="PCanvas"/>
                </params>
            </method>
            <method name="initialize" type="void" line="46">
                <declaration name="canvas" type="PCanvas" line="47"/>
                <declaration name="scrollPane" type="PScrollPane" line="48"/>
                <declaration name="viewport" type="PViewport" line="49"/>
                <declaration name="windowSD" type="PScrollDirector" line="50"/>
                <declaration name="documentSD" type="PScrollDirector" line="51"/>
                <declaration name="toolBar" type="JToolBar" line="53"/>
                <declaration name="window" type="JToggleButton" line="54"/>
                <declaration name="document" type="JToggleButton" line="55"/>
                <declaration name="print" type="JButton" line="56"/>
                <declaration name="bg" type="ButtonGroup" line="57"/>
                <anonymous_class line="66">
                    <method name="actionPerformed" type="void" line="67">
                        <params>
                            <param name="ae" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="75">
                    <method name="actionPerformed" type="void" line="76">
                        <params>
                            <param name="ae" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="84">
                    <method name="actionPerformed" type="void" line="85">
                        <params>
                            <param name="ae" type="ActionEvent"/>
                        </params>
                        <scope line="86"/>
                        <scope line="89"/>
                    </method>
                </anonymous_class>
                <declaration name="contentPane" type="JPanel" line="95"/>
            </method>
            <method name="addBackgroundShapes" type="void" line="102">
                <params>
                    <param name="canvas" type="PCanvas"/>
                </params>
                <scope line="103">
                    <declaration name="x" type="int" line="104"/>
                    <declaration name="y" type="int" line="105"/>
                    <scope line="106">
                        <declaration name="path" type="PPath" line="107"/>
                    </scope>
                    <scope line="112">
                        <declaration name="path" type="PPath" line="113"/>
                    </scope>
                </scope>
            </method>
            <class name="DocumentScrollDirector" line="120">
                <extends class="PDefaultScrollDirector"/>
                <javadoc line="120">
                    A modified scroll director that performs document based scroling rather
                      than window based scrolling (ie. the scrollbars act in the inverse
                      direction as normal)                    
                </javadoc>
                <javadoc line="126">
                    Get the View position given the specified camera bounds - modified
                      such that:
                      Rather than finding the distance from the upper left corner of the
                      window to the upper left corner of the document - we instead find the
                      distance from the lower right corner of the window to the upper left
                      corner of the document THEN we subtract that value from total
                      document width so that the position is inverted                    
                    <param>
                        viewBounds The bounds for which the view position will be
                          computed                        
                    </param>
                    <return>
                        The view position                        
                    </return>
                </javadoc>
                <method name="getViewPosition" type="Point" line="138">
                    <params>
                        <param name="viewBounds" type="Rectangle2D"/>
                    </params>
                    <declaration name="pos" type="Point" line="139"/>
                    <scope line="140">
                        <declaration name="layerBounds" type="PBounds" line="141"/>
                        <declaration name="layers" type="java.util.List" line="142"/>
                        <scope line="143">
                            <declaration name="layer" type="PLayer" line="144"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="153">
                    We do the same thing we did in getViewPosition above to flip the
                      document-window position relationship                    
                    <param>
                        x The new x position                        
                    </param>
                    <param>
                        y The new y position                        
                    </param>
                </javadoc>
                <method name="setViewPosition" type="void" line="159">
                    <params>
                        <param name="x" type="double"/>
                        <param name="y" type="double"/>
                    </params>
                    <declaration name="layerBounds" type="PBounds" line="163"/>
                    <declaration name="layers" type="List" line="164"/>
                    <scope line="165">
                        <declaration name="layer" type="PLayer" line="166"/>
                    </scope>
                    <declaration name="at" type="PAffineTransform" line="169"/>
                    <declaration name="viewBounds" type="PBounds" line="171"/>
                    <declaration name="newPoint" type="Point2D" line="173"/>
                    <declaration name="newX" type="double" line="175"/>
                    <declaration name="newY" type="double" line="176"/>
                </method>
            </class>
            <javadoc line="182">
                Print the canvas.                
                <throws>
                    PrinterException                    
                </throws>
            </javadoc>
            <method name="print" type="void" line="186">
                <declaration name="printJob" type="PrinterJob" line="187"/>
                <anonymous_class line="188">
                    <method name="print" type="int" line="189">
                        <params>
                            <param name="graphics" type="Graphics"/>
                            <param name="pageFormat" type="PageFormat"/>
                            <param name="pageIndex" type="int"/>
                        </params>
                        <scope line="190"/>
                        <scope line="193">
                            <declaration name="g2" type="Graphics2D" line="194"/>
                        </scope>
                    </method>
                </anonymous_class>
                <scope line="202"/>
            </method>
            <method name="main" type="void" line="206">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
        </class>
    </source>