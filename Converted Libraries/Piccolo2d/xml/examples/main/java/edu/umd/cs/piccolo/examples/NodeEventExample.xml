<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.Color"/>
        <import package="java.awt.geom.Dimension2D"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <class name="NodeEventExample" line="42">
            <extends class="PFrame"/>
            <javadoc line="42">
                This example shows how to make a node handle events.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="47"/>
            <javadoc line="47">
                                
            </javadoc>
            <method name="NodeEventExample" type="constructor" line="52"/>
            <method name="NodeEventExample" type="constructor" line="56">
                <params>
                    <param name="aCanvas" type="PCanvas"/>
                </params>
            </method>
            <method name="initialize" type="void" line="60">
                <comment line="63">
                    create a new node and override some of the event handling                    
                </comment>
                <comment line="64">
                    methods so that the node changes to orange when the mouse (Button 1)                    
                </comment>
                <comment line="65">
                    is pressed on the node, and changes back to green when the mouse                    
                </comment>
                <comment line="66">
                    is released. Also when the mouse is dragged the node updates its                    
                </comment>
                <comment line="67">
                    position so that the node is &quot;dragged&quot;. Note that this only serves                    
                </comment>
                <comment line="68">
                    as a simple example, most of the time dragging nodes is best done                    
                </comment>
                <comment line="69">
                    with the PDragEventHandler, but this shows another way to do it.                    
                </comment>
                <comment line="70">
                                        
                </comment>
                <comment line="71">
                    Note that each of these methods marks the event as handled. This is                    
                </comment>
                <comment line="72">
                    so that when the node is being dragged the zoom and pan event handles                    
                </comment>
                <comment line="73">
                    (that are installed by default) do not also operate, but they will                    
                </comment>
                <comment line="74">
                    still respond to events that are not handled by the node. (try to                    
                </comment>
                <comment line="75">
                    uncomment the aEvent.setHandled() calls and see what happens.                    
                </comment>
                <comment line="97">
                    Note this slows things down a lot, comment it out to see how the                    
                </comment>
                <comment line="98">
                    normal speed of things is.                    
                </comment>
                <comment line="99">
                                        
                </comment>
                <comment line="100">
                    For fun the coords of each event that the node handles are                    
                </comment>
                <comment line="101">
                    printed out. This can help to understand how coordinate systems                    
                </comment>
                <comment line="102">
                    work. Notice that when the example first starts all the values                    
                </comment>
                <comment line="103">
                    for (canvas, global, and local) are equal. But once you drag the                    
                </comment>
                <comment line="104">
                    node then the local coordinates become different then the screen                    
                </comment>
                <comment line="105">
                    and global coordinates. When you pan or zoom then the screen                    
                </comment>
                <comment line="106">
                    coordinates become different from the global coordinates.                    
                </comment>
                <comment line="109">
                    System.out.println(&quot;Global Location: &quot; +                    
                </comment>
                <comment line="110">
                    aEvent.getGlobalLocation());                    
                </comment>
                <comment line="113">
                    System.out.println(&quot;Global Delta: &quot; +                    
                </comment>
                <comment line="114">
                    aEvent.getGlobalDelta());                    
                </comment>
                <comment line="121">
                    By default the filter accepts all events, but here we constrain the                    
                </comment>
                <comment line="122">
                    kinds of events that aNode receives to button 1 events. Comment this                    
                </comment>
                <comment line="123">
                    line out and then you will be able to drag the node with any mouse                    
                </comment>
                <comment line="124">
                    button.                    
                </comment>
                <comment line="125">
                    aNode.setEventFilter(new PInputEventFilter(InputEvent.BUTTON1_MASK));                    
                </comment>
                <comment line="127">
                    add another node to the canvas that does not handle events as a                    
                </comment>
                <comment line="128">
                    reference point, so that we can make sure that our green node is                    
                </comment>
                <comment line="129">
                    getting dragged.                    
                </comment>
                <declaration name="layer" type="PLayer" line="61"/>
                <declaration name="aNode" type="PNode" line="76"/>
                <anonymous_class line="77">
                    <method name="mousePressed" type="void" line="78">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                    </method>
                    <method name="mouseDragged" type="void" line="84">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                        <declaration name="delta" type="Dimension2D" line="85"/>
                    </method>
                    <method name="mouseReleased" type="void" line="91">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                    </method>
                    <method name="printEventCoords" type="void" line="107">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                        <comment line="109">
                            System.out.println(&quot;Global Location: &quot; +                            
                        </comment>
                        <comment line="110">
                            aEvent.getGlobalLocation());                            
                        </comment>
                        <comment line="113">
                            System.out.println(&quot;Global Delta: &quot; +                            
                        </comment>
                        <comment line="114">
                            aEvent.getGlobalDelta());                            
                        </comment>
                    </method>
                </anonymous_class>
            </method>
            <method name="main" type="void" line="134">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
        </class>
    </source>