<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.Color"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Random"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PDragSequenceEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <class name="GraphEditorExample" line="13">
            <extends class="PFrame"/>
            <javadoc line="13">
                Create a simple graph with some random nodes and connected edges. An event
                  handler allows users to drag nodes around, keeping the edges connected.
                  ported from .NET GraphEditorExample by Sun Hongmei.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="19"/>
            <javadoc line="19">
                                
            </javadoc>
            <method name="GraphEditorExample" type="constructor" line="22"/>
            <method name="GraphEditorExample" type="constructor" line="25">
                <params>
                    <param name="aCanvas" type="PCanvas"/>
                </params>
            </method>
            <method name="initialize" type="void" line="28">
                <declaration name="numNodes" type="int" line="29"/>
                <declaration name="numEdges" type="int" line="30"/>
                <declaration name="nodeLayer" type="PLayer" line="31"/>
                <declaration name="edgeLayer" type="PLayer" line="32"/>
                <declaration name="rnd" type="Random" line="34"/>
                <declaration name="tmp" type="ArrayList" line="35"/>
                <scope line="36">
                    <declaration name="x" type="float" line="37"/>
                    <declaration name="y" type="float" line="38"/>
                    <declaration name="path" type="PPath" line="39"/>
                </scope>
                <scope line="44">
                    <declaration name="n1" type="int" line="45"/>
                    <declaration name="n2" type="int" line="46"/>
                    <declaration name="node1" type="PNode" line="47"/>
                    <declaration name="node2" type="PNode" line="48"/>
                    <declaration name="bound1" type="Point2D.Double" line="49"/>
                    <declaration name="bound2" type="Point2D.Double" line="50"/>
                    <declaration name="edge" type="PPath" line="51"/>
                </scope>
            </method>
            <method name="main" type="void" line="66">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
            <class name="NodeDragHandler" line="69">
                <extends class="PDragSequenceEventHandler"/>
                <method name="NodeDragHandler" type="constructor" line="70"/>
                <method name="mouseEntered" type="void" line="73">
                    <params>
                        <param name="e" type="PInputEvent"/>
                    </params>
                    <scope line="74"/>
                </method>
                <method name="mouseExited" type="void" line="78">
                    <params>
                        <param name="e" type="PInputEvent"/>
                    </params>
                    <scope line="79"/>
                </method>
                <method name="drag" type="void" line="83">
                    <params>
                        <param name="e" type="PInputEvent"/>
                    </params>
                    <declaration name="node" type="PNode" line="84"/>
                    <declaration name="edges" type="ArrayList" line="86"/>
                    <declaration name="i" type="int" line="87"/>
                    <scope line="88">
                        <declaration name="edge" type="PPath" line="89"/>
                        <declaration name="nodes" type="ArrayList" line="90"/>
                        <declaration name="node1" type="PNode" line="91"/>
                        <declaration name="node2" type="PNode" line="92"/>
                        <declaration name="bound1" type="Point2D.Double" line="94"/>
                        <declaration name="bound2" type="Point2D.Double" line="95"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>