<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <import package="edu.umd.cs.piccolo.event.PDragSequenceEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.nodes.PText"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <import package="edu.umd.cs.piccolox.handles.PBoundsHandle"/>
        <import package="edu.umd.cs.piccolox.nodes.PLens"/>
        <class name="LensExample" line="49">
            <extends class="PFrame"/>
            <javadoc line="49">
                This example shows one way to create and use lens&apos;s in Piccolo.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="54"/>
            <javadoc line="54">
                                
            </javadoc>
            <method name="LensExample" type="constructor" line="59"/>
            <method name="LensExample" type="constructor" line="63">
                <params>
                    <param name="aCanvas" type="PCanvas"/>
                </params>
            </method>
            <method name="initialize" type="void" line="67">
                <comment line="70">
                    viewed by the PCanvas camera, the lens is added to this layer.                    
                </comment>
                <comment line="72">
                    viewed by both the lens camera and the PCanvas camera                    
                </comment>
                <comment line="74">
                    viewed by only the lens camera                    
                </comment>
                <comment line="88">
                    Create an event handler that draws squiggles on the first layer of                    
                </comment>
                <comment line="89">
                    the bottom most camera.                    
                </comment>
                <comment line="99">
                    add squiggles to the first layer of the bottom camera. In the                    
                </comment>
                <comment line="100">
                    case of the lens these squiggles will be added to the layer                    
                </comment>
                <comment line="101">
                    that is only visible by the lens,                    
                </comment>
                <comment line="102">
                    In the case of the canvas camera the squiggles will be added                    
                </comment>
                <comment line="103">
                    to the shared layer viewed by both the canvas camera and the                    
                </comment>
                <comment line="104">
                    lens.                    
                </comment>
                <comment line="125">
                    add the squiggle event handler to both the lens and the                    
                </comment>
                <comment line="126">
                    canvas camera.                    
                </comment>
                <comment line="130">
                    make sure that the event handler consumes events so that it doesn&apos;t                    
                </comment>
                <comment line="131">
                    conflic with other event handlers or with itself (since its added to                    
                </comment>
                <comment line="132">
                    two event sources).                    
                </comment>
                <comment line="135">
                    remove default event handlers, not really nessessary since the                    
                </comment>
                <comment line="136">
                    squiggleEventHandler consumes everything anyway, but still good to                    
                </comment>
                <comment line="137">
                    do.                    
                </comment>
                <comment line="141">
                    create a node that is viewed both by the main camera and by the                    
                </comment>
                <comment line="142">
                    lens. Note that in its paint method it checks to see which camera                    
                </comment>
                <comment line="143">
                    is painting it, and if its the lens uses a different color.                    
                </comment>
                <declaration name="root" type="PRoot" line="68"/>
                <declaration name="camera" type="PCamera" line="69"/>
                <declaration name="mainLayer" type="PLayer" line="71"/>
                <declaration name="sharedLayer" type="PLayer" line="73"/>
                <declaration name="lensOnlyLayer" type="PLayer" line="75"/>
                <declaration name="lens" type="PLens" line="81"/>
                <anonymous_class line="90">
                    <declaration name="squiggle" type="PPath" line="91"/>
                    <method name="startDrag" type="void" line="93">
                        <params>
                            <param name="e" type="PInputEvent"/>
                        </params>
                        <comment line="99">
                            add squiggles to the first layer of the bottom camera. In the                            
                        </comment>
                        <comment line="100">
                            case of the lens these squiggles will be added to the layer                            
                        </comment>
                        <comment line="101">
                            that is only visible by the lens,                            
                        </comment>
                        <comment line="102">
                            In the case of the canvas camera the squiggles will be added                            
                        </comment>
                        <comment line="103">
                            to the shared layer viewed by both the canvas camera and the                            
                        </comment>
                        <comment line="104">
                            lens.                            
                        </comment>
                        <declaration name="p" type="Point2D" line="95"/>
                    </method>
                    <method name="drag" type="void" line="108">
                        <params>
                            <param name="e" type="PInputEvent"/>
                        </params>
                    </method>
                    <method name="endDrag" type="void" line="113">
                        <params>
                            <param name="e" type="PInputEvent"/>
                        </params>
                    </method>
                    <method name="updateSquiggle" type="void" line="119">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                        <declaration name="p" type="Point2D" line="120"/>
                    </method>
                </anonymous_class>
                <declaration name="squiggleEventHandler" type="PDragSequenceEventHandler" line="90"/>
                <anonymous_class line="144">
                    <declaration name="serialVersionUID" type="long" line="145"/>
                    <javadoc line="145">
                                                
                    </javadoc>
                    <method name="paint" type="void" line="150">
                        <params>
                            <param name="paintContext" type="PPaintContext"/>
                        </params>
                        <scope line="151">
                            <declaration name="g2" type="Graphics2D" line="152"/>
                        </scope>
                        <scope line="156"/>
                    </method>
                </anonymous_class>
                <declaration name="sharedNode" type="PNode" line="144"/>
                <declaration name="label" type="PText" line="166"/>
            </method>
            <method name="main" type="void" line="175">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
        </class>
    </source>