<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <import package="edu.umd.cs.piccolox.handles.PBoundsHandle"/>
        <import package="edu.umd.cs.piccolox.handles.PHandle"/>
        <import package="edu.umd.cs.piccolox.util.PNodeLocator"/>
        <class name="HandleExample" line="44">
            <extends class="PFrame"/>
            <javadoc line="44">
                This example show how to add the default handles to a node, and also how to
                  create your own custom handles.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="50"/>
            <javadoc line="50">
                                
            </javadoc>
            <method name="HandleExample" type="constructor" line="55"/>
            <method name="HandleExample" type="constructor" line="59">
                <params>
                    <param name="aCanvas" type="PCanvas"/>
                </params>
            </method>
            <method name="initialize" type="void" line="63">
                <comment line="66">
                    add another node the the root as a reference point so that we can                    
                </comment>
                <comment line="67">
                    tell that our node is getting dragged, as opposed the the canvas                    
                </comment>
                <comment line="68">
                    view being panned.                    
                </comment>
                <comment line="73">
                    tell the node to show its default handles.                    
                </comment>
                <comment line="76">
                    The default PBoundsHandle implementation doesn&apos;t work well with                    
                </comment>
                <comment line="77">
                    PPaths that have strokes. The reason for this is that the default                    
                </comment>
                <comment line="78">
                    PBoundsHandle modifies the bounds of an PNode, but when adding                    
                </comment>
                <comment line="79">
                    handles to a PPath we really want it to be modifying the underlying                    
                </comment>
                <comment line="80">
                    geometry of the PPath, the shape without the stroke. The solution is                    
                </comment>
                <comment line="81">
                    that we need to create handles specific to PPaths that locate                    
                </comment>
                <comment line="82">
                    themselves on the paths internal geometry, not the external bounds                    
                </comment>
                <comment line="83">
                    geometry...                    
                </comment>
                <comment line="88">
                    Here we create our own custom handle. This handle is located in the                    
                </comment>
                <comment line="89">
                    center of its parent node and you can use it to drag the parent                    
                </comment>
                <comment line="90">
                    around. This handle also updates its color when the is                    
                </comment>
                <comment line="91">
                    pressed/released in it.                    
                </comment>
                <comment line="98">
                    the default locator locates the center of a node.                    
                </comment>
                <comment line="115">
                    make this handle appear a bit different then the default handle                    
                </comment>
                <comment line="116">
                    appearance.                    
                </comment>
                <comment line="120">
                    also add our new custom handle to the node.                    
                </comment>
                <declaration name="n" type="PPath" line="64"/>
                <anonymous_class line="92">
                    <declaration name="serialVersionUID" type="long" line="93"/>
                    <javadoc line="93">
                                                
                    </javadoc>
                    <method name="dragHandle" type="void" line="99">
                        <params>
                            <param name="aLocalDimension" type="PDimension"/>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="h" type="PHandle" line="92"/>
                <anonymous_class line="105">
                    <method name="mousePressed" type="void" line="106">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                    </method>
                    <method name="mouseReleased" type="void" line="110">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="main" type="void" line="124">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
        </class>
    </source>