<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <import package="edu.umd.cs.piccolox.handles.PBoundsHandle"/>
        <import package="edu.umd.cs.piccolox.handles.PHandle"/>
        <import package="edu.umd.cs.piccolox.util.PNodeLocator"/>
        <class name="HandleExample" line="44">
            <extends class="PFrame"/>
            <javadoc line="44">
                This example show how to add the default handles to a node, and also how to
                  create your own custom handles.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="50"/>
            <javadoc line="50">
                                
            </javadoc>
            <method name="HandleExample" type="constructor" line="55"/>
            <method name="HandleExample" type="constructor" line="59">
                <params>
                    <param name="aCanvas" type="PCanvas"/>
                </params>
            </method>
            <method name="initialize" type="void" line="63">
                <comment line="67">
                    add another node the the root as a reference point so that we can
                     tell that our node is getting dragged, as opposed the the canvas
                     view being panned.                    
                </comment>
                <comment line="74">
                    tell the node to show its default handles.                    
                </comment>
                <comment line="77">
                    The default PBoundsHandle implementation doesn&apos;t work well with
                     PPaths that have strokes. The reason for this is that the default
                     PBoundsHandle modifies the bounds of an PNode, but when adding
                     handles to a PPath we really want it to be modifying the underlying
                     geometry of the PPath, the shape without the stroke. The solution is
                     that we need to create handles specific to PPaths that locate
                     themselves on the paths internal geometry, not the external bounds
                     geometry...                    
                </comment>
                <comment line="89">
                    Here we create our own custom handle. This handle is located in the
                     center of its parent node and you can use it to drag the parent
                     around. This handle also updates its color when the is
                     pressed/released in it.                    
                </comment>
                <comment line="99">
                    the default locator locates the center of a node.                    
                </comment>
                <comment line="116">
                    make this handle appear a bit different then the default handle
                     appearance.                    
                </comment>
                <comment line="121">
                    also add our new custom handle to the node.                    
                </comment>
                <declaration name="n" type="PPath" line="64"/>
                <anonymous_class line="92">
                    <declaration name="serialVersionUID" type="long" line="93"/>
                    <javadoc line="93">
                                                
                    </javadoc>
                    <method name="dragHandle" type="void" line="99">
                        <params>
                            <param name="aLocalDimension" type="PDimension"/>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="h" type="PHandle" line="92"/>
                <anonymous_class line="105">
                    <method name="mousePressed" type="void" line="106">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                    </method>
                    <method name="mouseReleased" type="void" line="110">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="main" type="void" line="124">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
        </class>
    </source>