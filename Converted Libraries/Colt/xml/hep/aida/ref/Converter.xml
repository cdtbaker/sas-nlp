<?xml version="1.0" encoding="UTF-8"?>
    <source package="hep.aida.ref">
        <import package="hep.aida.IAxis"/>
        <import package="hep.aida.IHistogram1D"/>
        <import package="hep.aida.IHistogram2D"/>
        <import package="hep.aida.IHistogram3D"/>
        <class name="Converter" line="8">
            <javadoc line="8">
                Histogram conversions, for example to String and XML format; 
                  This class requires the Colt distribution, whereas the rest of the package is entirelly stand-alone.                
            </javadoc>
            <javadoc line="14">
                Creates a new histogram converter.                
            </javadoc>
            <method name="Converter" type="constructor" line="17"/>
            <javadoc line="18">
                Returns all edges of the given axis.                
            </javadoc>
            <method name="edges" type="double[]" line="22">
                <params>
                    <param name="axis" type="IAxis"/>
                </params>
                <declaration name="b" type="int" line="23"/>
                <declaration name="bounds" type="double[]" line="24"/>
            </method>
            <method name="form" type="String" line="30">
                <params>
                    <param name="formatter" type="cern.colt.matrix.impl.Former"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="33">
                Returns an array[h.xAxis().bins()]; ignoring extra bins.                
            </javadoc>
            <method name="toArrayErrors" type="double[]" line="37">
                <params>
                    <param name="h" type="IHistogram1D"/>
                </params>
                <declaration name="xBins" type="int" line="38"/>
                <declaration name="array" type="double[]" line="39"/>
                <scope line="40"/>
            </method>
            <javadoc line="45">
                Returns an array[h.xAxis().bins()][h.yAxis().bins()]; ignoring extra bins.                
            </javadoc>
            <method name="toArrayErrors" type="double[][]" line="49">
                <params>
                    <param name="h" type="IHistogram2D"/>
                </params>
                <declaration name="xBins" type="int" line="50"/>
                <declaration name="yBins" type="int" line="51"/>
                <declaration name="array" type="double[][]" line="52"/>
                <scope line="53">
                    <scope line="54"/>
                </scope>
            </method>
            <javadoc line="60">
                Returns an array[h.xAxis().bins()]; ignoring extra bins.                
            </javadoc>
            <method name="toArrayHeights" type="double[]" line="64">
                <params>
                    <param name="h" type="IHistogram1D"/>
                </params>
                <declaration name="xBins" type="int" line="65"/>
                <declaration name="array" type="double[]" line="66"/>
                <scope line="67"/>
            </method>
            <javadoc line="72">
                Returns an array[h.xAxis().bins()][h.yAxis().bins()]; ignoring extra bins.                
            </javadoc>
            <method name="toArrayHeights" type="double[][]" line="76">
                <params>
                    <param name="h" type="IHistogram2D"/>
                </params>
                <declaration name="xBins" type="int" line="77"/>
                <declaration name="yBins" type="int" line="78"/>
                <declaration name="array" type="double[][]" line="79"/>
                <scope line="80">
                    <scope line="81"/>
                </scope>
            </method>
            <javadoc line="87">
                Returns an array[h.xAxis().bins()][h.yAxis().bins()][h.zAxis().bins()]; ignoring extra bins.                
            </javadoc>
            <method name="toArrayHeights" type="double[][][]" line="91">
                <params>
                    <param name="h" type="IHistogram3D"/>
                </params>
                <declaration name="xBins" type="int" line="92"/>
                <declaration name="yBins" type="int" line="93"/>
                <declaration name="zBins" type="int" line="94"/>
                <declaration name="array" type="double[][][]" line="95"/>
                <scope line="96">
                    <scope line="97">
                        <scope line="98"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="105">
                Returns a string representation of the specified array.  The string
                  representation consists of a list of the arrays&apos;s elements, enclosed in square brackets
                  (&lt;tt&gt;&quot;[]&quot;&lt;/tt&gt;).  Adjacent elements are separated by the characters
                  &lt;tt&gt;&quot;, &quot;&lt;/tt&gt; (comma and space).                
                <return>
                    a string representation of the specified array.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="112">
                <params>
                    <param name="array" type="double[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="113"/>
                <declaration name="maxIndex" type="int" line="115"/>
                <scope line="116"/>
            </method>
            <javadoc line="124">
                Returns a string representation of the given argument.                
            </javadoc>
            <method name="toString" type="String" line="128">
                <params>
                    <param name="axis" type="IAxis"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="129"/>
            </method>
            <javadoc line="135">
                Returns a string representation of the given argument.                
            </javadoc>
            <method name="toString" type="String" line="139">
                <params>
                    <param name="h" type="IHistogram1D"/>
                </params>
                <comment line="140">
                    &quot;X&quot;;                    
                </comment>
                <comment line="142">
                    {hep.aida.bin.BinFunctions1D.sum};                    
                </comment>
                <comment line="144">
                    String format = &quot;%1.2G&quot;;                    
                </comment>
                <comment line="165">
                    cern.colt.matrix.DoubleMatrix2D errors = new cern.colt.matrix.impl.DenseDoubleMatrix2D(1,h.xAxis().bins());                    
                </comment>
                <comment line="166">
                    errors.viewRow(0).assign(toArrayErrors(h));                    
                </comment>
                <comment line="172">
                    + sep +
                    &quot;Errors:&quot; + sep +
                    new cern.colt.matrix.doublealgo.Formatter().toTitleString(
                    errors,yEdges,xEdges,rowAxisName,columnAxisName,null,aggr);                    
                </comment>
                <declaration name="columnAxisName" type="String" line="140"/>
                <declaration name="rowAxisName" type="String" line="141"/>
                <declaration name="aggr" type="hep.aida.bin.BinFunction1D[]" line="142"/>
                <declaration name="format" type="String" line="143"/>
                <declaration name="f" type="cern.colt.matrix.impl.Former" line="146"/>
                <declaration name="sep" type="String" line="147"/>
                <declaration name="minMaxBins" type="int[]" line="148"/>
                <declaration name="title" type="String" line="149"/>
                <declaration name="xEdges" type="String[]" line="158"/>
                <declaration name="yEdges" type="String[]" line="161"/>
                <declaration name="heights" type="cern.colt.matrix.DoubleMatrix2D" line="163"/>
            </method>
            <javadoc line="179">
                Returns a string representation of the given argument.                
            </javadoc>
            <method name="toString" type="String" line="183">
                <params>
                    <param name="h" type="IHistogram2D"/>
                </params>
                <comment line="188">
                    String format = &quot;%1.2G&quot;;                    
                </comment>
                <comment line="214">
                    keep coord. system                    
                </comment>
                <comment line="217">
                    keep the histo coord. system                    
                </comment>
                <comment line="218">
                    heights = heights.viewPart(1,1,heights.rows()-2,heights.columns()-2); // ignore under&amp;overflows                    
                </comment>
                <comment line="220">
                    cern.colt.matrix.DoubleMatrix2D errors = new cern.colt.matrix.impl.DenseDoubleMatrix2D(toArrayErrors(h));                    
                </comment>
                <comment line="221">
                    errors = errors.viewDice().viewRowFlip(); // keep the histo coord system                    
                </comment>
                <comment line="222">
                    //errors = errors.viewPart(1,1,errors.rows()-2,errors.columns()-2); // ignore under&amp;overflows                    
                </comment>
                <comment line="228">
                    + sep +
                    &quot;Errors:&quot; + sep +
                    new cern.colt.matrix.doublealgo.Formatter().toTitleString(
                    errors,yEdges,xEdges,rowAxisName,columnAxisName,null,aggr);                    
                </comment>
                <declaration name="columnAxisName" type="String" line="184"/>
                <declaration name="rowAxisName" type="String" line="185"/>
                <declaration name="aggr" type="hep.aida.bin.BinFunction1D[]" line="186"/>
                <declaration name="format" type="String" line="187"/>
                <declaration name="f" type="cern.colt.matrix.impl.Former" line="190"/>
                <declaration name="sep" type="String" line="191"/>
                <declaration name="minMaxBins" type="int[]" line="192"/>
                <declaration name="title" type="String" line="193"/>
                <declaration name="xEdges" type="String[]" line="209"/>
                <declaration name="yEdges" type="String[]" line="212"/>
                <declaration name="heights" type="cern.colt.matrix.DoubleMatrix2D" line="216"/>
            </method>
            <javadoc line="235">
                Returns a string representation of the given argument.                
            </javadoc>
            <method name="toString" type="String" line="239">
                <params>
                    <param name="h" type="IHistogram3D"/>
                </params>
                <comment line="245">
                    String format = &quot;%1.2G&quot;;                    
                </comment>
                <comment line="277">
                    keep coord. system                    
                </comment>
                <comment line="281">
                    keep coord. system                    
                </comment>
                <comment line="284">
                    keep the histo coord. system                    
                </comment>
                <comment line="285">
                    heights = heights.viewPart(1,1,heights.rows()-2,heights.columns()-2); // ignore under&amp;overflows                    
                </comment>
                <comment line="287">
                    cern.colt.matrix.DoubleMatrix2D errors = new cern.colt.matrix.impl.DenseDoubleMatrix2D(toArrayErrors(h));                    
                </comment>
                <comment line="288">
                    errors = errors.viewDice().viewRowFlip(); // keep the histo coord system                    
                </comment>
                <comment line="289">
                    //errors = errors.viewPart(1,1,errors.rows()-2,errors.columns()-2); // ignore under&amp;overflows                    
                </comment>
                <comment line="295">
                    + sep +
                    &quot;Errors:&quot; + sep +
                    new cern.colt.matrix.doublealgo.Formatter().toTitleString(
                    errors,yEdges,xEdges,rowAxisName,columnAxisName,null,aggr);                    
                </comment>
                <declaration name="columnAxisName" type="String" line="240"/>
                <declaration name="rowAxisName" type="String" line="241"/>
                <declaration name="sliceAxisName" type="String" line="242"/>
                <declaration name="aggr" type="hep.aida.bin.BinFunction1D[]" line="243"/>
                <declaration name="format" type="String" line="244"/>
                <declaration name="f" type="cern.colt.matrix.impl.Former" line="247"/>
                <declaration name="sep" type="String" line="248"/>
                <declaration name="minMaxBins" type="int[]" line="249"/>
                <declaration name="title" type="String" line="250"/>
                <declaration name="xEdges" type="String[]" line="272"/>
                <declaration name="yEdges" type="String[]" line="275"/>
                <declaration name="zEdges" type="String[]" line="279"/>
                <declaration name="heights" type="cern.colt.matrix.DoubleMatrix3D" line="283"/>
            </method>
            <javadoc line="302">
                Returns a XML representation of the given argument.                
            </javadoc>
            <method name="toXML" type="String" line="306">
                <params>
                    <param name="h" type="IHistogram1D"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="307"/>
                <declaration name="sep" type="String" line="308"/>
                <scope line="317"/>
                <scope line="330"/>
                <scope line="333"/>
            </method>
            <javadoc line="343">
                Returns a XML representation of the given argument.                
            </javadoc>
            <method name="toXML" type="String" line="347">
                <params>
                    <param name="h" type="IHistogram2D"/>
                </params>
                <comment line="373">
                    out.append(&quot;&lt;statistics&gt;&quot;); out.append(sep);                    
                </comment>
                <comment line="374">
                    out.append(&quot;&lt;statistic name=\&quot;Entries\&quot; value=\&quot;&quot;+h.entries()+&quot;\&quot;/&gt;&quot;); out.append(sep);                    
                </comment>
                <comment line="375">
                    out.append(&quot;&lt;statistic name=\&quot;MeanX\&quot; value=\&quot;&quot;+h.meanX()+&quot;\&quot;/&gt;&quot;); out.append(sep);                    
                </comment>
                <comment line="376">
                    out.append(&quot;&lt;statistic name=\&quot;RmsX\&quot; value=\&quot;&quot;+h.rmsX()+&quot;\&quot;/&gt;&quot;); out.append(sep);                    
                </comment>
                <comment line="377">
                    out.append(&quot;&lt;statistic name=\&quot;MeanY\&quot; value=\&quot;&quot;+h.meanY()+&quot;\&quot;/&gt;&quot;); out.append(sep);                    
                </comment>
                <comment line="378">
                    out.append(&quot;&lt;statistic name=\&quot;RmsY\&quot; value=\&quot;&quot;+h.rmsY()+&quot;\&quot;/&gt;&quot;); out.append(sep);                    
                </comment>
                <comment line="379">
                    out.append(&quot;&lt;/statistics&gt;&quot;); out.append(sep);                    
                </comment>
                <declaration name="out" type="StringBuffer" line="348"/>
                <declaration name="sep" type="String" line="349"/>
                <scope line="359"/>
            </method>
        </class>
    </source>