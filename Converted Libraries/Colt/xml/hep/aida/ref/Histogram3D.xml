<?xml version="1.0" encoding="UTF-8"?>
    <source package="hep.aida.ref">
        <import package="hep.aida.IAxis"/>
        <import package="hep.aida.IHistogram2D"/>
        <import package="hep.aida.IHistogram3D"/>
        <class name="Histogram3D" line="5">
            <extends class="AbstractHistogram3D"/>
            <implements interface="IHistogram3D"/>
            <javadoc line="5">
                A reference implementation of hep.aida.IHistogram3D.
                  The goal is to provide a clear implementation rather than the most efficient implementation.
                  However, performance seems fine - filling 3  10^5 points/sec, both using FixedAxis or VariableAxis.                
                <author>
                    Wolfgang Hoschek, Tony Johnson, and others.                    
                </author>
                <version>
                    1.0, 23/03/2000                    
                </version>
            </javadoc>
            <declaration name="heights" type="double[][][]" line="13"/>
            <declaration name="errors" type="double[][][]" line="14"/>
            <declaration name="entries" type="int[][][]" line="15"/>
            <declaration name="nEntry" type="int" line="16"/>
            <declaration name="sumWeight" type="double" line="17"/>
            <declaration name="sumWeightSquared" type="double" line="18"/>
            <declaration name="meanX" type="double" line="19"/>
            <declaration name="meanY" type="double" line="20"/>
            <declaration name="meanZ" type="double" line="21"/>
            <javadoc line="22">
                Creates a variable-width histogram.
                  Example: &lt;tt&gt;xEdges = (0.2, 1.0, 5.0, 6.0), yEdges = (-5, 0, 7), zEdges = (-5, 0, 7)&lt;/tt&gt; yields 322 in-range bins.                
                <param>
                    title The histogram title.                    
                </param>
                <param>
                    xEdges the bin boundaries the x-axis shall have;
                      must be sorted ascending and must not contain multiple identical elements.                    
                </param>
                <param>
                    yEdges the bin boundaries the y-axis shall have;
                      must be sorted ascending and must not contain multiple identical elements.                    
                </param>
                <param>
                    zEdges the bin boundaries the z-axis shall have;
                      must be sorted ascending and must not contain multiple identical elements.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>xEdges.length < 1 || yEdges.length < 1|| zEdges.length < 1</tt>.                    
                </throws>
            </javadoc>
            <method name="Histogram3D" type="constructor" line="34">
                <params>
                    <param name="title" type="String"/>
                    <param name="xEdges" type="double[]"/>
                    <param name="yEdges" type="double[]"/>
                    <param name="zEdges" type="double[]"/>
                </params>
            </method>
            <javadoc line="37">
                Creates a fixed-width histogram.                
                <param>
                    title The histogram title.                    
                </param>
                <param>
                    xBins The number of bins on the X axis.                    
                </param>
                <param>
                    xMin The minimum value on the X axis.                    
                </param>
                <param>
                    xMax The maximum value on the X axis.                    
                </param>
                <param>
                    yBins The number of bins on the Y axis.                    
                </param>
                <param>
                    yMin The minimum value on the Y axis.                    
                </param>
                <param>
                    yMax The maximum value on the Y axis.                    
                </param>
                <param>
                    zBins The number of bins on the Z axis.                    
                </param>
                <param>
                    zMin The minimum value on the Z axis.                    
                </param>
                <param>
                    zMax The maximum value on the Z axis.                    
                </param>
            </javadoc>
            <method name="Histogram3D" type="constructor" line="50">
                <params>
                    <param name="title" type="String"/>
                    <param name="xBins" type="int"/>
                    <param name="xMin" type="double"/>
                    <param name="xMax" type="double"/>
                    <param name="yBins" type="int"/>
                    <param name="yMin" type="double"/>
                    <param name="yMax" type="double"/>
                    <param name="zBins" type="int"/>
                    <param name="zMin" type="double"/>
                    <param name="zMax" type="double"/>
                </params>
            </method>
            <javadoc line="53">
                Creates a histogram with the given axis binning.                
                <param>
                    title The histogram title.                    
                </param>
                <param>
                    xAxis The x-axis description to be used for binning.                    
                </param>
                <param>
                    yAxis The y-axis description to be used for binning.                    
                </param>
                <param>
                    zAxis The z-axis description to be used for binning.                    
                </param>
            </javadoc>
            <method name="Histogram3D" type="constructor" line="60">
                <params>
                    <param name="title" type="String"/>
                    <param name="xAxis" type="IAxis"/>
                    <param name="yAxis" type="IAxis"/>
                    <param name="zAxis" type="IAxis"/>
                </params>
                <declaration name="xBins" type="int" line="65"/>
                <declaration name="yBins" type="int" line="66"/>
                <declaration name="zBins" type="int" line="67"/>
            </method>
            <method name="allEntries" type="int" line="72"/>
            <method name="binEntries" type="int" line="75">
                <params>
                    <param name="indexX" type="int"/>
                    <param name="indexY" type="int"/>
                    <param name="indexZ" type="int"/>
                </params>
            </method>
            <method name="binError" type="double" line="78">
                <params>
                    <param name="indexX" type="int"/>
                    <param name="indexY" type="int"/>
                    <param name="indexZ" type="int"/>
                </params>
            </method>
            <method name="binHeight" type="double" line="81">
                <params>
                    <param name="indexX" type="int"/>
                    <param name="indexY" type="int"/>
                    <param name="indexZ" type="int"/>
                </params>
            </method>
            <method name="equivalentBinEntries" type="double" line="84"/>
            <method name="fill" type="void" line="87">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                </params>
                <declaration name="xBin" type="int" line="88"/>
                <declaration name="yBin" type="int" line="89"/>
                <declaration name="zBin" type="int" line="90"/>
            </method>
            <method name="fill" type="void" line="104">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="z" type="double"/>
                    <param name="weight" type="double"/>
                </params>
                <declaration name="xBin" type="int" line="105"/>
                <declaration name="yBin" type="int" line="106"/>
                <declaration name="zBin" type="int" line="107"/>
            </method>
            <javadoc line="121">
                The precise meaning of the arguments to the public slice
                  methods is somewhat ambiguous, so we define this internal
                  slice method and clearly specify its arguments.
                  &lt;p&gt;
                  &lt;b&gt;Note 0&lt;/b&gt;indexX1 and indexX2 use our INTERNAL bin numbering scheme
                  &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexX1 and indexX2 INCLUSIVE
                  &lt;b&gt;Note 2&lt;/b&gt;indexX1 and indexX2 may include the use of under and over flow bins
                  &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)                
            </javadoc>
            <method name="internalSliceXY" type="IHistogram2D" line="131">
                <params>
                    <param name="title" type="String"/>
                    <param name="indexZ1" type="int"/>
                    <param name="indexZ2" type="int"/>
                </params>
                <declaration name="xBins" type="int" line="133"/>
                <declaration name="yBins" type="int" line="134"/>
                <declaration name="sliceEntries" type="int[][]" line="135"/>
                <declaration name="sliceHeights" type="double[][]" line="136"/>
                <declaration name="sliceErrors" type="double[][]" line="137"/>
                <scope line="138">
                    <scope line="139">
                        <scope line="140"/>
                    </scope>
                </scope>
                <declaration name="result" type="Histogram2D" line="147"/>
            </method>
            <javadoc line="151">
                The precise meaning of the arguments to the public slice
                  methods is somewhat ambiguous, so we define this internal
                  slice method and clearly specify its arguments.
                  &lt;p&gt;
                  &lt;b&gt;Note 0&lt;/b&gt;indexY1 and indexY2 use our INTERNAL bin numbering scheme
                  &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexY1 and indexY2 INCLUSIVE
                  &lt;b&gt;Note 2&lt;/b&gt;indexY1 and indexY2 may include the use of under and over flow bins
                  &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)                
            </javadoc>
            <method name="internalSliceXZ" type="IHistogram2D" line="161">
                <params>
                    <param name="title" type="String"/>
                    <param name="indexY1" type="int"/>
                    <param name="indexY2" type="int"/>
                </params>
                <declaration name="xBins" type="int" line="163"/>
                <declaration name="zBins" type="int" line="164"/>
                <declaration name="sliceEntries" type="int[][]" line="165"/>
                <declaration name="sliceHeights" type="double[][]" line="166"/>
                <declaration name="sliceErrors" type="double[][]" line="167"/>
                <scope line="168">
                    <scope line="169">
                        <scope line="170"/>
                    </scope>
                </scope>
                <declaration name="result" type="Histogram2D" line="177"/>
            </method>
            <javadoc line="181">
                The precise meaning of the arguments to the public slice
                  methods is somewhat ambiguous, so we define this internal
                  slice method and clearly specify its arguments.
                  &lt;p&gt;
                  &lt;b&gt;Note 0&lt;/b&gt;indexX1 and indexX2 use our INTERNAL bin numbering scheme
                  &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexX1 and indexX2 INCLUSIVE
                  &lt;b&gt;Note 2&lt;/b&gt;indexX1 and indexX2 may include the use of under and over flow bins
                  &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)                
            </javadoc>
            <method name="internalSliceYZ" type="IHistogram2D" line="191">
                <params>
                    <param name="title" type="String"/>
                    <param name="indexX1" type="int"/>
                    <param name="indexX2" type="int"/>
                </params>
                <declaration name="yBins" type="int" line="193"/>
                <declaration name="zBins" type="int" line="194"/>
                <declaration name="sliceEntries" type="int[][]" line="195"/>
                <declaration name="sliceHeights" type="double[][]" line="196"/>
                <declaration name="sliceErrors" type="double[][]" line="197"/>
                <scope line="198">
                    <scope line="199">
                        <scope line="200"/>
                    </scope>
                </scope>
                <declaration name="result" type="Histogram2D" line="207"/>
            </method>
            <method name="meanX" type="double" line="211"/>
            <method name="meanY" type="double" line="214"/>
            <method name="meanZ" type="double" line="217"/>
            <method name="reset" type="void" line="220">
                <scope line="221"/>
            </method>
            <method name="rmsX" type="double" line="236"/>
            <method name="rmsY" type="double" line="239"/>
            <method name="rmsZ" type="double" line="242"/>
            <method name="sumAllBinHeights" type="double" line="245"/>
        </class>
    </source>