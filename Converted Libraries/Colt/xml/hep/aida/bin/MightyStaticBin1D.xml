<?xml version="1.0" encoding="UTF-8"?>
    <source package="hep.aida.bin">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.jet.stat.Descriptive"/>
        <class name="MightyStaticBin1D" line="4">
            <extends class="StaticBin1D"/>
            <javadoc line="4">
                Static and the same as its superclass, except that it can do more: Additionally computes moments of arbitrary integer order, harmonic mean, geometric mean, etc.
                  Constructors need to be told what functionality is required for the given use case.
                  Only maintains aggregate measures (incrementally) - the added elements themselves are not kept.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    0.9, 03-Jul-99                    
                </version>
            </javadoc>
            <declaration name="hasSumOfLogarithms" type="boolean" line="12"/>
            <declaration name="sumOfLogarithms" type="double" line="13"/>
            <declaration name="hasSumOfInversions" type="boolean" line="14"/>
            <declaration name="sumOfInversions" type="double" line="15"/>
            <declaration name="sumOfPowers" type="double[]" line="16"/>
            <javadoc line="17">
                Constructs and returns an empty bin with limited functionality but good performance; equivalent to &lt;tt&gt;MightyStaticBin1D(false,false,4)&lt;/tt&gt;.                
            </javadoc>
            <method name="MightyStaticBin1D" type="constructor" line="20"/>
            <javadoc line="23">
                Constructs and returns an empty bin with the given capabilities.                
                <param>
                    hasSumOfLogarithms  Tells whether {@link #sumOfLogarithms()} can return meaningful results.
                      Set this parameter to <tt>false</tt> if measures of sum of logarithms, geometric mean and product are not required.
                      <p>                    
                </param>
                <param>
                    hasSumOfInversions  Tells whether {@link #sumOfInversions()} can return meaningful results.
                      Set this parameter to <tt>false</tt> if measures of sum of inversions, harmonic mean and sumOfPowers(-1) are not required.
                      <p>                    
                </param>
                <param>
                    maxOrderForSumOfPowers  The maximum order <tt>k</tt> for which {@link #sumOfPowers(int)} can return meaningful results.
                      Set this parameter to at least 3 if the skew is required, to at least 4 if the kurtosis is required.
                      In general, if moments are required set this parameter at least as large as the largest required moment.
                      This method always substitutes <tt>Math.max(2,maxOrderForSumOfPowers)</tt> for the parameter passed in.
                      Thus, <tt>sumOfPowers(0..2)</tt> always returns meaningful results.                    
                </param>
                <see>
                    #hasSumOfPowers(int)                    
                </see>
                <see>
                    #moment(int,double)                    
                </see>
            </javadoc>
            <method name="MightyStaticBin1D" type="constructor" line="39">
                <params>
                    <param name="hasSumOfLogarithms" type="boolean"/>
                    <param name="hasSumOfInversions" type="boolean"/>
                    <param name="maxOrderForSumOfPowers" type="int"/>
                </params>
            </method>
            <javadoc line="45">
                Adds the part of the specified list between indexes &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) to the receiver.                
                <param>
                    list the list of which elements shall be added.                    
                </param>
                <param>
                    from the index of the first element to be added (inclusive).                    
                </param>
                <param>
                    to the index of the last element to be added (inclusive).                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>list.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=list.size())</tt>.                    
                </throws>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="52">
                <params>
                    <param name="list" type="DoubleArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <scope line="54"/>
                <scope line="57"/>
                <scope line="60"/>
            </method>
            <javadoc line="64">
                Resets the values of all measures.                
            </javadoc>
            <method name="clearAllMeasures" type="void" line="67">
                <scope line="71">
                    <scope line="72"/>
                </scope>
            </method>
            <javadoc line="77">
                Returns a deep copy of the receiver.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="81">
                <declaration name="clone" type="MightyStaticBin1D" line="82"/>
            </method>
            <javadoc line="86">
                Computes the deviations from the receiver&apos;s measures to another bin&apos;s measures.                
                <param>
                    other the other bin to compare with                    
                </param>
                <return>
                    a summary of the deviations.                    
                </return>
            </javadoc>
            <method name="compareWith" type="String" line="91">
                <params>
                    <param name="other" type="AbstractBin1D"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="92"/>
                <scope line="93">
                    <declaration name="m" type="MightyStaticBin1D" line="94"/>
                </scope>
            </method>
            <javadoc line="103">
                Returns the geometric mean, which is &lt;tt&gt;Product( x[i] )&lt;sup&gt;1.0/size()&lt;/sup&gt;&lt;/tt&gt;.
                  This method tries to avoid overflows at the expense of an equivalent but somewhat inefficient definition:
                  &lt;tt&gt;geoMean = exp( Sum( Log(x[i]) ) / size())&lt;/tt&gt;.
                  Note that for a geometric mean to be meaningful, the minimum of the data sequence must not be less or equal to zero.                
                <return>
                    the geometric mean; <tt>Double.NaN</tt> if <tt>!hasSumOfLogarithms()</tt>.                    
                </return>
            </javadoc>
            <method name="geometricMean" type="double" line="110"/>
            <javadoc line="113">
                Returns the maximum order &lt;tt&gt;k&lt;/tt&gt; for which sums of powers are retrievable, as specified upon instance construction.                
                <see>
                    #hasSumOfPowers(int)                    
                </see>
                <see>
                    #sumOfPowers(int)                    
                </see>
            </javadoc>
            <method name="getMaxOrderForSumOfPowers" type="int" line="118"/>
            <javadoc line="122">
                Returns the minimum order &lt;tt&gt;k&lt;/tt&gt; for which sums of powers are retrievable, as specified upon instance construction.                
                <see>
                    #hasSumOfPowers(int)                    
                </see>
                <see>
                    #sumOfPowers(int)                    
                </see>
            </javadoc>
            <method name="getMinOrderForSumOfPowers" type="int" line="127">
                <declaration name="minOrder" type="int" line="128"/>
            </method>
            <javadoc line="132">
                Returns the harmonic mean, which is &lt;tt&gt;size() / Sum( 1/x[i] )&lt;/tt&gt;.
                  Remember: If the receiver contains at least one element of &lt;tt&gt;0.0&lt;/tt&gt;, the harmonic mean is &lt;tt&gt;0.0&lt;/tt&gt;.                
                <return>
                    the harmonic mean; <tt>Double.NaN</tt> if <tt>!hasSumOfInversions()</tt>.                    
                </return>
                <see>
                    #hasSumOfInversions()                    
                </see>
            </javadoc>
            <method name="harmonicMean" type="double" line="138"/>
            <javadoc line="141">
                Returns whether &lt;tt&gt;sumOfInversions()&lt;/tt&gt; can return meaningful results.                
                <return>
                    <tt>false</tt> if the bin was constructed with insufficient parametrization, <tt>true</tt> otherwise.
                      See the constructors for proper parametrization.                    
                </return>
            </javadoc>
            <method name="hasSumOfInversions" type="boolean" line="146"/>
            <javadoc line="149">
                Tells whether &lt;tt&gt;sumOfLogarithms()&lt;/tt&gt; can return meaningful results.                
                <return>
                    <tt>false</tt> if the bin was constructed with insufficient parametrization, <tt>true</tt> otherwise.
                      See the constructors for proper parametrization.                    
                </return>
            </javadoc>
            <method name="hasSumOfLogarithms" type="boolean" line="154"/>
            <javadoc line="157">
                Tells whether &lt;tt&gt;sumOfPowers(k)&lt;/tt&gt; can return meaningful results.
                  Defined as &lt;tt&gt;hasSumOfPowers(k) &lt;==&gt; getMinOrderForSumOfPowers() &lt;= k &amp;&amp; k &lt;= getMaxOrderForSumOfPowers()&lt;/tt&gt;.
                  A return value of &lt;tt&gt;true&lt;/tt&gt; implies that &lt;tt&gt;hasSumOfPowers(k-1) .. hasSumOfPowers(0)&lt;/tt&gt; will also return &lt;tt&gt;true&lt;/tt&gt;.
                  See the constructors for proper parametrization.
                  &lt;p&gt;
                  &lt;b&gt;Details&lt;/b&gt;: 
                  &lt;tt&gt;hasSumOfPowers(0..2)&lt;/tt&gt; will always yield &lt;tt&gt;true&lt;/tt&gt;.
                  &lt;tt&gt;hasSumOfPowers(-1) &lt;==&gt; hasSumOfInversions()&lt;/tt&gt;.                
                <return>
                    <tt>false</tt> if the bin was constructed with insufficient parametrization, <tt>true</tt> otherwise.                    
                </return>
                <see>
                    #getMinOrderForSumOfPowers()                    
                </see>
                <see>
                    #getMaxOrderForSumOfPowers()                    
                </see>
            </javadoc>
            <method name="hasSumOfPowers" type="boolean" line="170">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="173">
                Returns the kurtosis (aka excess), which is &lt;tt&gt;-3 + moment(4,mean()) / standardDeviation()&lt;sup&gt;4&lt;/sup&gt;&lt;/tt&gt;.                
                <return>
                    the kurtosis; <tt>Double.NaN</tt> if <tt>!hasSumOfPowers(4)</tt>.                    
                </return>
                <see>
                    #hasSumOfPowers(int)                    
                </see>
            </javadoc>
            <method name="kurtosis" type="double" line="178"/>
            <javadoc line="181">
                Returns the moment of &lt;tt&gt;k&lt;/tt&gt;-th order with value &lt;tt&gt;c&lt;/tt&gt;,
                  which is &lt;tt&gt;Sum( (x[i]-c)&lt;sup&gt;k&lt;/sup&gt; ) / size()&lt;/tt&gt;.                
                <param>
                    k the order; must be greater than or equal to zero.                    
                </param>
                <param>
                    c any number.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>k < 0</tt>.                    
                </throws>
                <return>
                    <tt>Double.NaN</tt> if <tt>!hasSumOfPower(k)</tt>.                    
                </return>
            </javadoc>
            <method name="moment" type="double" line="189">
                <params>
                    <param name="k" type="int"/>
                    <param name="c" type="double"/>
                </params>
                <declaration name="maxOrder" type="int" line="192"/>
                <declaration name="sumOfPows" type="DoubleArrayList" line="193"/>
            </method>
            <javadoc line="200">
                Returns the product, which is &lt;tt&gt;Prod( x[i] )&lt;/tt&gt;.
                  In other words: &lt;tt&gt;x[0]x[1]...x[size()-1]&lt;/tt&gt;.                
                <return>
                    the product; <tt>Double.NaN</tt> if <tt>!hasSumOfLogarithms()</tt>.                    
                </return>
                <see>
                    #hasSumOfLogarithms()                    
                </see>
            </javadoc>
            <method name="product" type="double" line="206"/>
            <javadoc line="209">
                Sets the range of orders in which sums of powers are to be computed.
                  In other words, &lt;tt&gt;sumOfPower(k)&lt;/tt&gt; will return &lt;tt&gt;Sum( x[i]^k )&lt;/tt&gt; if &lt;tt&gt;min_k &lt;= k &lt;= max_k || 0 &lt;= k &lt;= 2&lt;/tt&gt;
                  and throw an exception otherwise.                
                <see>
                    #isLegalOrder(int)                    
                </see>
                <see>
                    #sumOfPowers(int)                    
                </see>
                <see>
                    #getRangeForSumOfPowers()                    
                </see>
            </javadoc>
            <method name="setMaxOrderForSumOfPowers" type="void" line="217">
                <params>
                    <param name="max_k" type="int"/>
                </params>
                <scope line="218"/>
                <scope line="221"/>
            </method>
            <javadoc line="225">
                Returns the skew, which is &lt;tt&gt;moment(3,mean()) / standardDeviation()&lt;sup&gt;3&lt;/sup&gt;&lt;/tt&gt;.                
                <return>
                    the skew; <tt>Double.NaN</tt> if <tt>!hasSumOfPowers(3)</tt>.                    
                </return>
                <see>
                    #hasSumOfPowers(int)                    
                </see>
            </javadoc>
            <method name="skew" type="double" line="230"/>
            <javadoc line="233">
                Returns the sum of inversions, which is &lt;tt&gt;Sum( 1 / x[i] )&lt;/tt&gt;.                
                <return>
                    the sum of inversions; <tt>Double.NaN</tt> if <tt>!hasSumOfInversions()</tt>.                    
                </return>
                <see>
                    #hasSumOfInversions()                    
                </see>
            </javadoc>
            <method name="sumOfInversions" type="double" line="238"/>
            <javadoc line="242">
                Returns the sum of logarithms, which is &lt;tt&gt;Sum( Log(x[i]) )&lt;/tt&gt;.                
                <return>
                    the sum of logarithms; <tt>Double.NaN</tt> if <tt>!hasSumOfLogarithms()</tt>.                    
                </return>
                <see>
                    #hasSumOfLogarithms()                    
                </see>
            </javadoc>
            <method name="sumOfLogarithms" type="double" line="247"/>
            <javadoc line="251">
                Returns the &lt;tt&gt;k-th&lt;/tt&gt; order sum of powers, which is &lt;tt&gt;Sum( x[i]&lt;sup&gt;k&lt;/sup&gt; )&lt;/tt&gt;.                
                <param>
                    k the order of the powers.                    
                </param>
                <return>
                    the sum of powers; <tt>Double.NaN</tt> if <tt>!hasSumOfPowers(k)</tt>.                    
                </return>
                <see>
                    #hasSumOfPowers(int)                    
                </see>
            </javadoc>
            <method name="sumOfPowers" type="double" line="257">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="265">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="268">
                <declaration name="buf" type="StringBuffer" line="269"/>
                <scope line="270"/>
                <scope line="274"/>
                <declaration name="maxOrder" type="int" line="278"/>
                <declaration name="maxPrintOrder" type="int" line="279"/>
                <scope line="280">
                    <scope line="281"/>
                    <scope line="284"/>
                    <scope line="287"/>
                    <scope line="290"/>
                    <scope line="293"/>
                </scope>
            </method>
            <javadoc line="299">
                @throws IllegalOperationException if &lt;tt&gt;! isLegalOrder(k)&lt;/tt&gt;.                
            </javadoc>
            <method name="xcheckOrder" type="void" line="302">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="304">
                Returns whether two bins are equal; 
                  They are equal if the other object is of the same class or a subclass of this class and both have the same size, minimum, maximum, sum, sumOfSquares, sumOfInversions and sumOfLogarithms.                
            </javadoc>
            <method name="xequals" type="boolean" line="308">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <declaration name="other" type="MightyStaticBin1D" line="310"/>
            </method>
            <javadoc line="313">
                Tells whether &lt;tt&gt;sumOfPowers(fromK) .. sumOfPowers(toK)&lt;/tt&gt; can return meaningful results.                
                <return>
                    <tt>false</tt> if the bin was constructed with insufficient parametrization, <tt>true</tt> otherwise.
                      See the constructors for proper parametrization.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>fromK > toK</tt>.                    
                </throws>
            </javadoc>
            <method name="xhasSumOfPowers" type="boolean" line="319">
                <params>
                    <param name="fromK" type="int"/>
                    <param name="toK" type="int"/>
                </params>
            </method>
            <javadoc line="323">
                Returns &lt;tt&gt;getMinOrderForSumOfPowers() &lt;= k &amp;&amp; k &lt;= getMaxOrderForSumOfPowers()&lt;/tt&gt;.                
            </javadoc>
            <method name="xisLegalOrder" type="boolean" line="326">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
        </class>
    </source>