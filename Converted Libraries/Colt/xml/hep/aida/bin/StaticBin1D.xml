<?xml version="1.0" encoding="UTF-8"?>
    <source package="hep.aida.bin">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.jet.stat.Descriptive"/>
        <class name="StaticBin1D" line="4">
            <extends class="AbstractBin1D"/>
            <javadoc line="4">
                1-dimensional non-rebinnable bin consuming &lt;tt&gt;double&lt;/tt&gt; elements;
                  Efficiently computes basic statistics of data sequences.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  The data streamed into a &lt;tt&gt;SimpleBin1D&lt;/tt&gt; is not preserved!
                  As a consequence infinitely many elements can be added to this bin.
                  As a further consequence this bin cannot compute more than basic statistics.
                  It is also not rebinnable.
                  If these drawbacks matter, consider to use a {@link DynamicBin1D}, 
                  which overcomes them at the expense of increased memory requirements.
                  &lt;p&gt;
                  This class is fully thread safe (all public methods are synchronized).
                  Thus, you can have one or more threads adding to the bin as well as one or more threads reading and viewing the statistics of the bin &lt;i&gt;while it is filled&lt;/i&gt;.
                  For high performance, add data in large chunks (buffers) via method &lt;tt&gt;addAllOf&lt;/tt&gt; rather than piecewise via method &lt;tt&gt;add&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Implementation&lt;/b&gt;:
                  Incremental maintainance. Performance linear in the number of elements added.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    0.9, 03-Jul-99                    
                </version>
            </javadoc>
            <declaration name="size" type="int" line="26"/>
            <javadoc line="26">
                The number of elements consumed by incremental parameter maintainance.                
            </javadoc>
            <declaration name="min" type="double" line="30"/>
            <declaration name="max" type="double" line="31"/>
            <declaration name="sum" type="double" line="32"/>
            <declaration name="sum_xx" type="double" line="33"/>
            <declaration name="arguments" type="double[]" line="34"/>
            <javadoc line="34">
                Function arguments used by method addAllOf(...)
                  For memory tuning only. Avoids allocating a new array of arguments each time addAllOf(...) is called.
                  Each bin does not need its own set of argument vars since they are declared as &quot;static&quot;.
                  addAllOf(...) of this class uses only 4 entries.
                  Subclasses computing additional incremental statistics may need more arguments.
                  So, to be on the safe side we allocate space for 20 args.
                  Be sure you access this arguments only in synchronized blocks like
                  synchronized (arguments) { do it }
                  By the way, the whole fuss would be unnecessary if Java would know INOUT parameters (call by reference).                
            </javadoc>
            <javadoc line="46">
                Constructs and returns an empty bin.                
            </javadoc>
            <method name="StaticBin1D" type="constructor" line="49"/>
            <javadoc line="52">
                Adds the specified element to the receiver.                
                <param>
                    element element to be appended.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="56">
                <params>
                    <param name="element" type="double"/>
                </params>
            </method>
            <javadoc line="59">
                Adds the part of the specified list between indexes &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) to the receiver.                
                <param>
                    list the list of which elements shall be added.                    
                </param>
                <param>
                    from the index of the first element to be added (inclusive).                    
                </param>
                <param>
                    to the index of the last element to be added (inclusive).                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>list.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=list.size())</tt>.                    
                </throws>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="66">
                <params>
                    <param name="list" type="DoubleArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <scope line="67"/>
            </method>
            <javadoc line="80">
                Removes all elements from the receiver.
                  The receiver will be empty after this call returns.                
            </javadoc>
            <method name="clear" type="void" line="84"/>
            <javadoc line="88">
                Resets the values of all measures.                
            </javadoc>
            <method name="clearAllMeasures" type="void" line="91"/>
            <javadoc line="97">
                Returns &lt;tt&gt;false&lt;/tt&gt;.
                  Returns whether a client can obtain all elements added to the receiver.
                  In other words, tells whether the receiver internally preserves all added elements.
                  If the receiver is rebinnable, the elements can be obtained via &lt;tt&gt;elements()&lt;/tt&gt; methods.                
            </javadoc>
            <method name="isRebinnable" type="boolean" line="103"/>
            <javadoc line="106">
                Returns the maximum.                
            </javadoc>
            <method name="max" type="double" line="109"/>
            <javadoc line="112">
                Returns the minimum.                
            </javadoc>
            <method name="min" type="double" line="115"/>
            <javadoc line="118">
                Returns the number of elements contained in the receiver.                
                <returns>
                    the number of elements contained in the receiver.                    
                </returns>
            </javadoc>
            <method name="size" type="int" line="122"/>
            <javadoc line="125">
                Returns the sum of all elements, which is &lt;tt&gt;Sum( x[i] )&lt;/tt&gt;.                
            </javadoc>
            <method name="sum" type="double" line="128"/>
            <javadoc line="131">
                Returns the sum of squares, which is &lt;tt&gt;Sum( x[i]  x[i] )&lt;/tt&gt;.                
            </javadoc>
            <method name="sumOfSquares" type="double" line="134"/>
        </class>
    </source>