<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt">
        <class name="Timer" line="2">
            <extends class="PersistentObject"/>
            <javadoc line="2">
                A handy stopwatch for benchmarking.
                  Like a real stop watch used on ancient running tracks you can start the watch, stop it,
                  start it again, stop it again, display the elapsed time and reset the watch.                
            </javadoc>
            <declaration name="baseTime" type="long" line="8"/>
            <declaration name="elapsedTime" type="long" line="9"/>
            <declaration name="UNIT" type="long" line="10"/>
            <javadoc line="11">
                Constructs a new timer, initially not started. Use start() to start the timer.                
            </javadoc>
            <method name="Timer" type="constructor" line="14"/>
            <javadoc line="17">
                Prints the elapsed time on System.out                
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
            </javadoc>
            <method name="display" type="Timer" line="21"/>
            <javadoc line="25">
                Same as &lt;tt&gt;seconds()&lt;/tt&gt;.                
            </javadoc>
            <method name="elapsedTime" type="float" line="28"/>
            <javadoc line="31">
                Returns the elapsed time in milli seconds; does not stop the timer, if started.                
            </javadoc>
            <method name="millis" type="long" line="34">
                <declaration name="elapsed" type="long" line="35"/>
                <scope line="36"/>
            </method>
            <javadoc line="41">
                &lt;tt&gt;T = this - other&lt;/tt&gt;; Constructs and returns a new timer which is the difference of the receiver and the other timer.
                  The new timer is not started.                
                <param>
                    other the timer to subtract.                    
                </param>
                <return>
                    a new timer.                    
                </return>
            </javadoc>
            <method name="minus" type="Timer" line="47">
                <params>
                    <param name="other" type="Timer"/>
                </params>
                <declaration name="copy" type="Timer" line="48"/>
            </method>
            <javadoc line="52">
                Returns the elapsed time in minutes; does not stop the timer, if started.                
            </javadoc>
            <method name="minutes" type="float" line="55"/>
            <javadoc line="58">
                &lt;tt&gt;T = this + other&lt;/tt&gt;; Constructs and returns a new timer which is the sum of the receiver and the other timer.
                  The new timer is not started.                
                <param>
                    other the timer to add.                    
                </param>
                <return>
                    a new timer.                    
                </return>
            </javadoc>
            <method name="plus" type="Timer" line="64">
                <params>
                    <param name="other" type="Timer"/>
                </params>
                <declaration name="copy" type="Timer" line="65"/>
            </method>
            <javadoc line="69">
                Resets the timer.                
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
            </javadoc>
            <method name="reset" type="Timer" line="73"/>
            <javadoc line="78">
                Returns the elapsed time in seconds; does not stop the timer, if started.                
            </javadoc>
            <method name="seconds" type="float" line="81"/>
            <javadoc line="84">
                Starts the timer.                
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
            </javadoc>
            <method name="start" type="Timer" line="88"/>
            <javadoc line="92">
                Stops the timer. You can start it again later, if necessary.                
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
            </javadoc>
            <method name="stop" type="Timer" line="96">
                <scope line="97"/>
            </method>
            <javadoc line="103">
                Shows how to use a timer in convenient ways.                
            </javadoc>
            <method name="test" type="void" line="106">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="t" type="Timer" line="107"/>
                <declaration name="j" type="int" line="108"/>
                <scope line="109"/>
                <scope line="116"/>
                <scope line="121"/>
                <scope line="128"/>
            </method>
            <javadoc line="133">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="136"/>
        </class>
    </source>