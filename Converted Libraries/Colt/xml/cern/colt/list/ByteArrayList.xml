<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.list">
        <import package="cern.colt.function.ByteProcedure"/>
        <class name="ByteArrayList" line="3">
            <extends class="AbstractByteList"/>
            <javadoc line="3">
                Resizable list holding &lt;code&gt;byte&lt;/code&gt; elements; implemented with arrays.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.                
            </javadoc>
            <declaration name="elements" type="byte[]" line="8"/>
            <javadoc line="8">
                The array buffer into which the elements of the list are stored.
                  The capacity of the list is the length of this array buffer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="14">
                Constructs an empty list.                
            </javadoc>
            <method name="ByteArrayList" type="constructor" line="17"/>
            <javadoc line="20">
                Constructs a list containing the specified elements. 
                  The initial size and capacity of the list is the length of the array.
                  &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                  So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <param>
                    elements the array to be backed by the the constructed list                    
                </param>
            </javadoc>
            <method name="ByteArrayList" type="constructor" line="27">
                <params>
                    <param name="elements" type="byte[]"/>
                </params>
            </method>
            <javadoc line="30">
                Constructs an empty list with the specified initial capacity.                
                <param>
                    initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.                    
                </param>
            </javadoc>
            <method name="ByteArrayList" type="constructor" line="34">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="38">
                Appends the specified element to the end of this list.                
                <param>
                    element element to be appended to this list.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="42">
                <params>
                    <param name="element" type="byte"/>
                </params>
                <scope line="43"/>
            </method>
            <javadoc line="48">
                Inserts the specified element before the specified position into the receiver. 
                  Shifts the element currently at that position (if any) and
                  any subsequent elements to the right.                
                <param>
                    index index before which the specified element is to be inserted (must be in [0,size]).                    
                </param>
                <param>
                    element element to be inserted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).                    
                </exception>
            </javadoc>
            <method name="beforeInsert" type="void" line="56">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="byte"/>
                </params>
            </method>
            <javadoc line="63">
                Searches the receiver for the specified value using
                  the binary search algorithm.  The receiver must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the receiver contains multiple elements
                  equal to the specified object, there is no guarantee which instance
                  will be found.                
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the receiver;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the receiver: the index of the first
                      element greater than the key, or <tt>receiver.size()</tt>, if all
                      elements in the receiver are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    cern.colt.Sorting                    
                </see>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="85">
                <params>
                    <param name="key" type="byte"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                Returns a deep copy of the receiver.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="92">
                <declaration name="clone" type="ByteArrayList" line="93"/>
            </method>
            <javadoc line="97">
                Returns a deep copy of the receiver; uses &lt;code&gt;clone()&lt;/code&gt; and casts the result.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="copy" type="ByteArrayList" line="101"/>
            <javadoc line="104">
                Sorts the specified range of the receiver into ascending numerical order. 
                  The sorting algorithm is a count sort. This algorithm offers guaranteed
                  O(Max(n,256)) performance.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
            </javadoc>
            <method name="countSortFromTo" type="void" line="111">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="min" type="int" line="114"/>
                <declaration name="range" type="int" line="115"/>
                <declaration name="theElements" type="byte[]" line="116"/>
                <declaration name="counts" type="int[]" line="117"/>
                <declaration name="fromIndex" type="int" line="119"/>
                <declaration name="val" type="byte" line="120"/>
                <scope line="121">
                    <declaration name="c" type="int" line="122"/>
                    <scope line="123">
                        <scope line="125">
                            <declaration name="toIndex" type="int" line="126"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="133">
                Sorts the specified range of the receiver into ascending numerical order. 
                  The sorting algorithm is a count sort. This algorithm offers guaranteed
                  &lt;dt&gt;Performance: O(Max(n,max-min+1)).
                  &lt;dt&gt;Space requirements: int[max-min+1] buffer.
                  &lt;p&gt;This algorithm is only applicable if max-min+1 is not large!
                  But if applicable, it usually outperforms quicksort by a factor of 3-4.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <param>
                    min the smallest element contained in the range.                    
                </param>
                <param>
                    max the largest element contained in the range.                    
                </param>
            </javadoc>
            <method name="countSortFromTo" type="void" line="145">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="min" type="byte"/>
                    <param name="max" type="byte"/>
                </params>
                <declaration name="width" type="int" line="148"/>
                <declaration name="counts" type="int[]" line="149"/>
                <declaration name="theElements" type="byte[]" line="150"/>
                <declaration name="fromIndex" type="int" line="152"/>
                <declaration name="val" type="byte" line="153"/>
                <scope line="154">
                    <declaration name="c" type="int" line="155"/>
                    <scope line="156">
                        <scope line="158">
                            <declaration name="toIndex" type="int" line="159"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="166">
                Returns the elements currently stored, including invalid elements between size and capacity, if any.
                  &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                  So if subsequently you modify the returned array directly via the [] operator, be sure you know what you&apos;re doing.                
                <return>
                    the elements currently stored.                    
                </return>
            </javadoc>
            <method name="elements" type="byte[]" line="172"/>
            <javadoc line="175">
                Sets the receiver&apos;s elements to be the specified array (not a copy of it).
                  The size and capacity of the list is the length of the array.
                  &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                  So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <param>
                    elements the new elements to be stored.                    
                </param>
                <return>
                    the receiver itself.                    
                </return>
            </javadoc>
            <method name="elements" type="AbstractByteList" line="183">
                <params>
                    <param name="elements" type="byte[]"/>
                </params>
            </method>
            <javadoc line="188">
                Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
                  If necessary, allocates new internal memory and increases the capacity of the receiver.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="193">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="196">
                Compares the specified Object with the receiver.  
                  Returns true if and only if the specified Object is also an ArrayList of the same type, both Lists have the
                  same size, and all corresponding pairs of elements in the two Lists are identical.
                  In other words, two Lists are defined to be equal if they contain the
                  same elements in the same order.                
                <param>
                    otherObj the Object to be compared for equality with the receiver.                    
                </param>
                <return>
                    true if the specified Object is equal to the receiver.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="205">
                <params>
                    <param name="otherObj" type="Object"/>
                </params>
                <declaration name="other" type="ByteArrayList" line="209"/>
                <declaration name="theElements" type="byte[]" line="211"/>
                <declaration name="otherElements" type="byte[]" line="212"/>
                <scope line="213"/>
            </method>
            <javadoc line="218">
                Applies a procedure to each element of the receiver, if any.
                  Starts at index 0, moving rightwards.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="forEach" type="boolean" line="224">
                <params>
                    <param name="procedure" type="ByteProcedure"/>
                </params>
                <declaration name="theElements" type="byte[]" line="225"/>
                <declaration name="theSize" type="int" line="226"/>
            </method>
            <javadoc line="230">
                Returns the element at the specified position in the receiver.                
                <param>
                    index index of element to return.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (index
                      &lt; 0 || index &gt;= size()).                    
                </exception>
            </javadoc>
            <method name="get" type="byte" line="236">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="240">
                Returns the element at the specified position in the receiver; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
                  Provided with invalid parameters this method may return invalid elements without throwing any exception!
                  &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <param>
                    index index of element to return.                    
                </param>
            </javadoc>
            <method name="getQuick" type="byte" line="247">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="250">
                Returns the index of the first occurrence of the specified
                  element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                  Searches between &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.
                  Tests for identity.                
                <param>
                    element element to search for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    the index of the first occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </return>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="indexOfFromTo" type="int" line="261">
                <params>
                    <param name="element" type="byte"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="theElements" type="byte[]" line="264"/>
                <scope line="265">
                    <scope line="266"/>
                </scope>
            </method>
            <javadoc line="272">
                Returns the index of the last occurrence of the specified
                  element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                  Searches beginning at &lt;code&gt;to&lt;/code&gt;, inclusive until &lt;code&gt;from&lt;/code&gt;, inclusive.
                  Tests for identity.                
                <param>
                    element element to search for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    the index of the last occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </return>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="lastIndexOfFromTo" type="int" line="283">
                <params>
                    <param name="element" type="byte"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="theElements" type="byte[]" line="286"/>
                <scope line="287">
                    <scope line="288"/>
                </scope>
            </method>
            <javadoc line="294">
                Returns a new list of the part of the receiver between &lt;code&gt;from&lt;/code&gt;, inclusive, and &lt;code&gt;to&lt;/code&gt;, inclusive.                
                <param>
                    from the index of the first element (inclusive).                    
                </param>
                <param>
                    to the index of the last element (inclusive).                    
                </param>
                <return>
                    a new list                    
                </return>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="partFromTo" type="AbstractByteList" line="301">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="part" type="byte[]" line="304"/>
            </method>
            <javadoc line="308">
                Removes from the receiver all elements that are contained in the specified list.
                  Tests for identity.                
                <param>
                    other the other list.                    
                </param>
                <return>
                    <code>true</code> if the receiver changed as a result of the call.                    
                </return>
            </javadoc>
            <method name="removeAll" type="boolean" line="314">
                <params>
                    <param name="other" type="AbstractByteList"/>
                </params>
                <scope line="316"/>
                <declaration name="limit" type="int" line="319"/>
                <declaration name="j" type="int" line="320"/>
                <declaration name="theElements" type="byte[]" line="321"/>
                <declaration name="mySize" type="int" line="322"/>
                <declaration name="N" type="double" line="323"/>
                <declaration name="M" type="double" line="324"/>
                <scope line="325">
                    <declaration name="sortedList" type="ByteArrayList" line="326"/>
                    <scope line="328"/>
                </scope>
                <scope line="332">
                    <scope line="333"/>
                </scope>
                <declaration name="modified" type="boolean" line="337"/>
            </method>
            <javadoc line="341">
                Replaces a number of elements in the receiver with the same number of elements of another list.
                  Replaces elements in the receiver, between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive),
                  with elements of &lt;code&gt;other&lt;/code&gt;, starting from &lt;code&gt;otherFrom&lt;/code&gt; (inclusive).                
                <param>
                    from the position of the first element to be replaced in the receiver                    
                </param>
                <param>
                    to the position of the last element to be replaced in the receiver                    
                </param>
                <param>
                    other list holding elements to be copied into the receiver.                    
                </param>
                <param>
                    otherFrom position of first element within other list to be copied.                    
                </param>
            </javadoc>
            <method name="replaceFromToWithFrom" type="void" line="350">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="other" type="AbstractByteList"/>
                    <param name="otherFrom" type="int"/>
                </params>
                <scope line="351"/>
                <declaration name="length" type="int" line="355"/>
                <scope line="356"/>
            </method>
            <javadoc line="362">
                Retains (keeps) only the elements in the receiver that are contained in the specified other list.
                  In other words, removes from the receiver all of its elements that are not contained in the
                  specified other list.                
                <param>
                    other the other list to test against.                    
                </param>
                <return>
                    <code>true</code> if the receiver changed as a result of the call.                    
                </return>
            </javadoc>
            <method name="retainAll" type="boolean" line="369">
                <params>
                    <param name="other" type="AbstractByteList"/>
                </params>
                <declaration name="limit" type="int" line="371"/>
                <declaration name="j" type="int" line="372"/>
                <declaration name="theElements" type="byte[]" line="373"/>
                <declaration name="mySize" type="int" line="374"/>
                <declaration name="N" type="double" line="375"/>
                <declaration name="M" type="double" line="376"/>
                <scope line="377">
                    <declaration name="sortedList" type="ByteArrayList" line="378"/>
                    <scope line="380"/>
                </scope>
                <scope line="384">
                    <scope line="385"/>
                </scope>
                <declaration name="modified" type="boolean" line="389"/>
            </method>
            <javadoc line="393">
                Reverses the elements of the receiver.
                  Last becomes first, second last becomes second first, and so on.                
            </javadoc>
            <method name="reverse" type="void" line="397">
                <declaration name="tmp" type="byte" line="398"/>
                <declaration name="limit" type="int" line="399"/>
                <declaration name="j" type="int" line="400"/>
                <declaration name="theElements" type="byte[]" line="401"/>
                <scope line="402"/>
            </method>
            <javadoc line="408">
                Replaces the element at the specified position in the receiver with the specified element.                
                <param>
                    index index of element to replace.                    
                </param>
                <param>
                    element element to be stored at the specified position.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (index
                      &lt; 0 || index &gt;= size()).                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="415">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="byte"/>
                </params>
            </method>
            <javadoc line="419">
                Replaces the element at the specified position in the receiver with the specified element; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions.
                  Provided with invalid parameters this method may access invalid indexes without throwing any exception!
                  &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <param>
                    index index of element to replace.                    
                </param>
                <param>
                    element element to be stored at the specified position.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="427">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="byte"/>
                </params>
            </method>
            <javadoc line="430">
                Randomly permutes the part of the receiver between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive).                
                <param>
                    from the index of the first element (inclusive) to be permuted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be permuted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="shuffleFromTo" type="void" line="436">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <scope line="437"/>
                <declaration name="gen" type="cern.jet.random.Uniform" line="441"/>
                <declaration name="tmpElement" type="byte" line="442"/>
                <declaration name="theElements" type="byte[]" line="443"/>
                <declaration name="random" type="int" line="444"/>
                <scope line="445"/>
            </method>
            <javadoc line="452">
                Sorts the specified range of the receiver into ascending order. 
                  The sorting algorithm is countsort.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="sortFromTo" type="void" line="459">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="N" type="double" line="460"/>
                <declaration name="quickSortEstimate" type="double" line="461"/>
                <declaration name="width" type="double" line="462"/>
                <declaration name="countSortEstimate" type="double" line="463"/>
                <scope line="464"/>
                <scope line="467"/>
            </method>
            <javadoc line="471">
                Trims the capacity of the receiver to be the receiver&apos;s current 
                  size. Releases any superfluos internal memory. An application can use this operation to minimize the 
                  storage of the receiver.                
            </javadoc>
            <method name="trimToSize" type="void" line="476"/>
        </class>
    </source>