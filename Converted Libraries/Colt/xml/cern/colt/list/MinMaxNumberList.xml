<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.list">
        <import package="cern.colt.bitvector.BitVector"/>
        <import package="cern.colt.bitvector.QuickBitVector"/>
        <class name="MinMaxNumberList" line="4">
            <extends class="cern.colt.list.AbstractLongList"/>
            <javadoc line="4">
                Resizable compressed list holding numbers; based on the fact that a value in a given interval need not take more than &lt;tt&gt;log(max-min+1)&lt;/tt&gt; bits; implemented with a &lt;tt&gt;cern.colt.bitvector.BitVector&lt;/tt&gt;.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  Numbers can be compressed when minimum and maximum of all values ever to be stored in the list are known.
                  For example, if min=16, max=27, only 4 bits are needed to store a value.
                  No compression is achieved for &lt;tt&gt;float&lt;/tt&gt; and &lt;tt&gt;double&lt;/tt&gt; values.
                  &lt;p&gt;
                  You can add, get and set elements quite similar to &lt;tt&gt;java.util.ArrayList&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Applicability:&lt;/b&gt; Applicable if the data is non floating point, highly skewed without &quot;outliers&quot; and minimum and maximum known in advance.
                  &lt;p&gt;
                  &lt;b&gt;Performance:&lt;/b&gt; Basic operations like &lt;tt&gt;add()&lt;/tt&gt;, &lt;tt&gt;get()&lt;/tt&gt;, &lt;tt&gt;set()&lt;/tt&gt;, &lt;tt&gt;size()&lt;/tt&gt; and &lt;tt&gt;clear()&lt;/tt&gt; are &lt;tt&gt;O(1)&lt;/tt&gt;, i.e. run in constant time.
                  &lt;dt&gt;200Mhz Pentium Pro, JDK 1.2, NT:
                  &lt;dt&gt;&lt;tt&gt;10^6&lt;/tt&gt; calls to &lt;tt&gt;getQuick()&lt;/tt&gt; --&gt; &lt;tt&gt;0.5&lt;/tt&gt; seconds.
                  (50 times slower than reading from a primitive array of the appropriate type.)
                  &lt;dt&gt;&lt;tt&gt;10^6&lt;/tt&gt; calls to &lt;tt&gt;setQuick()&lt;/tt&gt; --&gt; &lt;tt&gt;0.8&lt;/tt&gt; seconds.
                  (15 times slower than writing to a primitive array of the appropriate type.)
                  &lt;p&gt;
                  This class can, for example, be useful when making large lists of numbers persistent.
                  Also useful when very large lists would otherwise consume too much main memory.
                  &lt;p&gt;
                  Upon instantiation a contract is signed that defines the interval values may fall into.
                  It is not legal to store values not contained in that interval.
                  WARNING: The contract is not checked. Be sure you do not store illegal values.
                  If you need to store &lt;tt&gt;float&lt;/tt&gt; or &lt;tt&gt;double&lt;/tt&gt; values, you must set the minimum and maximum to &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; or &lt;tt&gt;[Long.MIN_VALUE,Long.MAX_VALUE]&lt;/tt&gt;, respectively.
                  &lt;p&gt;
                  Although access methods are only defined on &lt;tt&gt;long&lt;/tt&gt; values you can also store
                  all other primitive data types: &lt;tt&gt;boolean&lt;/tt&gt;, &lt;tt&gt;byte&lt;/tt&gt;, &lt;tt&gt;short&lt;/tt&gt;, &lt;tt&gt;int&lt;/tt&gt;, &lt;tt&gt;long&lt;/tt&gt;, &lt;tt&gt;float&lt;/tt&gt;, &lt;tt&gt;double&lt;/tt&gt; and &lt;tt&gt;char&lt;/tt&gt;.
                  You can do this by explicitly representing them as &lt;tt&gt;long&lt;/tt&gt; values.
                  Use casts for discrete data types.
                  Use the methods of &lt;tt&gt;java.lang.Float&lt;/tt&gt; and &lt;tt&gt;java.lang.Double&lt;/tt&gt; for floating point data types:
                  Recall that with those methods you can convert any floating point value to a &lt;tt&gt;long&lt;/tt&gt; value and back &lt;b&gt;without losing any precision&lt;/b&gt;:
                  &lt;p&gt;
                  &lt;b&gt;Example usage:&lt;/b&gt;&lt;pre&gt;
                  MinMaxNumberList list = ... instantiation goes here
                  double d1 = 1.234;
                  list.add(Double.doubleToLongBits(d1));
                  double d2 = Double.longBitsToDouble(list.get(0));
                  if (d1!=d2) System.out.println(&quot;This is impossible!&quot;);
                  MinMaxNumberList list2 = ... instantiation goes here
                  float f1 = 1.234f;
                  list2.add((long) Float.floatToIntBits(f1));
                  float f2 = Float.intBitsToFloat((int)list2.get(0));
                  if (f1!=f2) System.out.println(&quot;This is impossible!&quot;);
                  &lt;/pre&gt;                
                <see>
                    LongArrayList                    
                </see>
                <see>
                    DistinctNumberList                    
                </see>
                <see>
                    java.lang.Float                    
                </see>
                <see>
                    java.lang.Double                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="minValue" type="long" line="58"/>
            <declaration name="bitsPerElement" type="int" line="59"/>
            <declaration name="bits" type="long[]" line="60"/>
            <declaration name="capacity" type="int" line="61"/>
            <javadoc line="62">
                Constructs an empty list with the specified initial capacity and the specified range of values allowed to be hold in this list.
                  Legal values are in the range [minimum,maximum], all inclusive.                
                <param>
                    minimum   the minimum of values allowed to be hold in this list.                    
                </param>
                <param>
                    maximum   the maximum of values allowed to be hold in this list.                    
                </param>
                <param>
                    initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.                    
                </param>
            </javadoc>
            <method name="MinMaxNumberList" type="constructor" line="69">
                <params>
                    <param name="minimum" type="long"/>
                    <param name="maximum" type="long"/>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Appends the specified element to the end of this list.                
                <param>
                    element element to be appended to this list.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="76">
                <params>
                    <param name="element" type="long"/>
                </params>
                <scope line="77"/>
                <declaration name="i" type="int" line="80"/>
            </method>
            <javadoc line="84">
                Appends the elements &lt;tt&gt;elements[from]&lt;/tt&gt; (inclusive), ..., &lt;tt&gt;elements[to]&lt;/tt&gt; (inclusive) to the receiver.                
                <param>
                    elements the elements to be appended to the receiver.                    
                </param>
                <param>
                    from the index of the first element to be appended (inclusive)                    
                </param>
                <param>
                    to the index of the last element to be appended (inclusive)                    
                </param>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="90">
                <params>
                    <param name="elements" type="long[]"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="bitsPerElem" type="int" line="91"/>
                <declaration name="bitsPerElemMinusOne" type="int" line="92"/>
                <declaration name="min" type="long" line="93"/>
                <declaration name="theBits" type="long[]" line="94"/>
                <declaration name="firstBit" type="int" line="96"/>
                <declaration name="i" type="int" line="97"/>
                <scope line="98"/>
            </method>
            <javadoc line="104">
                Returns the number of bits necessary to store a single element.                
            </javadoc>
            <method name="bitsPerElement" type="int" line="107"/>
            <javadoc line="110">
                Returns the number of bits necessary to store values in the range &lt;tt&gt;[minimum,maximum]&lt;/tt&gt;.                
            </javadoc>
            <method name="bitsPerElement" type="int" line="113">
                <params>
                    <param name="minimum" type="long"/>
                    <param name="maximum" type="long"/>
                </params>
                <declaration name="bits" type="int" line="114"/>
                <scope line="115"/>
                <scope line="118"/>
            </method>
            <javadoc line="123">
                Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
                  If necessary, allocates new internal memory and increases the capacity of the receiver.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="128">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="129"/>
                <scope line="130">
                    <declaration name="newCapacity" type="int" line="131"/>
                    <declaration name="vector" type="BitVector" line="133"/>
                </scope>
            </method>
            <javadoc line="139">
                Returns the element at the specified position in the receiver; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
                  Provided with invalid parameters this method may return invalid elements without throwing any exception!
                  &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <param>
                    index index of element to return.                    
                </param>
            </javadoc>
            <method name="getQuick" type="long" line="146">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="i" type="int" line="147"/>
            </method>
            <javadoc line="150">
                Copies all elements between index &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) into &lt;tt&gt;part&lt;/tt&gt;, starting at index &lt;tt&gt;partFrom&lt;/tt&gt; within &lt;tt&gt;part&lt;/tt&gt;.
                  Elements are only copied if a corresponding flag within &lt;tt&gt;qualificants&lt;/tt&gt; is set.
                  More precisely:&lt;pre&gt;
                  for (; from&lt;=to; from++, partFrom++, qualificantsFrom++) {
                  if (qualificants==null || qualificants.get(qualificantsFrom)) {
                  part[partFrom] = this.get(from);
                  }
                  }
                  &lt;/pre&gt;                
            </javadoc>
            <method name="partFromTo" type="void" line="161">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="qualificants" type="BitVector"/>
                    <param name="qualificantsFrom" type="int"/>
                    <param name="part" type="long[]"/>
                    <param name="partFrom" type="int"/>
                </params>
                <declaration name="width" type="int" line="162"/>
                <scope line="163"/>
                <scope line="166"/>
                <declaration name="minVal" type="long" line="169"/>
                <declaration name="bitsPerElem" type="int" line="170"/>
                <declaration name="theBits" type="long[]" line="171"/>
                <declaration name="q" type="int" line="172"/>
                <declaration name="p" type="int" line="173"/>
                <declaration name="j" type="int" line="174"/>
                <scope line="175">
                    <scope line="176"/>
                </scope>
            </method>
            <javadoc line="181">
                Replaces the element at the specified position in the receiver with the specified element; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
                  Provided with invalid parameters this method may access invalid indexes without throwing any exception!
                  &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <param>
                    index index of element to replace.                    
                </param>
                <param>
                    element element to be stored at the specified position.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="189">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="long"/>
                </params>
                <declaration name="i" type="int" line="190"/>
            </method>
            <javadoc line="193">
                Sets the size of the receiver without modifying it otherwise.
                  This method should not release or allocate new memory but simply set some instance variable like &lt;tt&gt;size&lt;/tt&gt;.                
            </javadoc>
            <method name="setSizeRaw" type="void" line="197">
                <params>
                    <param name="newSize" type="int"/>
                </params>
            </method>
            <javadoc line="200">
                Sets the receiver to an empty list with the specified initial capacity and the specified range of values allowed to be hold in this list.
                  Legal values are in the range [minimum,maximum], all inclusive.                
                <param>
                    minimum   the minimum of values allowed to be hold in this list.                    
                </param>
                <param>
                    maximum   the maximum of values allowed to be hold in this list.                    
                </param>
                <param>
                    initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.                    
                </param>
            </javadoc>
            <method name="setUp" type="void" line="207">
                <params>
                    <param name="minimum" type="long"/>
                    <param name="maximum" type="long"/>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="213">
                This method was created in VisualAge.                
                <param>
                    minValue long                    
                </param>
                <param>
                    maxValue long                    
                </param>
                <param>
                    initialCapacity int                    
                </param>
            </javadoc>
            <method name="setUpBitsPerEntry" type="void" line="219">
                <params>
                    <param name="minimum" type="long"/>
                    <param name="maximum" type="long"/>
                </params>
                <scope line="221"/>
                <scope line="224"/>
            </method>
            <javadoc line="229">
                Returns the receiver seen as bitvector.
                  WARNING: The bitvector and the receiver share the backing bits. Modifying one of them will affect the other.                
            </javadoc>
            <method name="toBitVector" type="BitVector" line="233"/>
            <javadoc line="236">
                Trims the capacity of the receiver to be the receiver&apos;s current 
                  size. An application can use this operation to minimize the 
                  storage of the receiver.                
            </javadoc>
            <method name="trimToSize" type="void" line="241">
                <declaration name="oldCapacity" type="int" line="242"/>
                <scope line="243">
                    <declaration name="vector" type="BitVector" line="244"/>
                </scope>
            </method>
            <javadoc line="250">
                deprecated
                  Returns the minimum element legal to the stored in the receiver.
                  Remark: This does not mean that such a minimum element is currently contained in the receiver.                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="xminimum" type="long" line="256"/>
        </class>
    </source>