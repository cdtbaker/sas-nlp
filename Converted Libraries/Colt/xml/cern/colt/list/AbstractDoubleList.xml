<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.list">
        <import package="cern.colt.function.DoubleComparator"/>
        <import package="cern.colt.function.DoubleProcedure"/>
        <class name="AbstractDoubleList" line="4">
            <extends class="AbstractList"/>
            <implements interface="cern.colt.buffer.DoubleBufferConsumer"/>
            <javadoc line="4">
                Abstract base class for resizable lists holding &lt;code&gt;double&lt;/code&gt; elements; abstract.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.                
            </javadoc>
            <declaration name="size" type="int" line="9"/>
            <javadoc line="9">
                The size of the list.
                  This is a READ_ONLY variable for all methods but setSizeRaw(int newSize) !!!
                  If you violate this principle in subclasses, you should exactly know what you are doing.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="16">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractDoubleList" type="constructor" line="19"/>
            <javadoc line="21">
                Appends the specified element to the end of this list.                
                <param>
                    element element to be appended to this list.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="25">
                <params>
                    <param name="element" type="double"/>
                </params>
            </method>
            <javadoc line="28">
                Appends all elements of the specified list to the receiver.                
                <param>
                    list the list of which all elements shall be appended.                    
                </param>
            </javadoc>
            <method name="addAllOf" type="void" line="32">
                <params>
                    <param name="other" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="35">
                Appends the part of the specified list between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive) to the receiver.                
                <param>
                    other the list to be added to the receiver.                    
                </param>
                <param>
                    from the index of the first element to be appended (inclusive).                    
                </param>
                <param>
                    to the index of the last element to be appended (inclusive).                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>other.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=other.size())</tt>).                    
                </exception>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="42">
                <params>
                    <param name="other" type="AbstractDoubleList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="45">
                Inserts the specified element before the specified position into the receiver. 
                  Shifts the element currently at that position (if any) and
                  any subsequent elements to the right.                
                <param>
                    index index before which the specified element is to be inserted (must be in [0,size]).                    
                </param>
                <param>
                    element element to be inserted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).                    
                </exception>
            </javadoc>
            <method name="beforeInsert" type="void" line="53">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="double"/>
                </params>
            </method>
            <javadoc line="57">
                Inserts the part of the specified list between &lt;code&gt;otherFrom&lt;/code&gt; (inclusive) and &lt;code&gt;otherTo&lt;/code&gt; (inclusive) before the specified position into the receiver. 
                  Shifts the element currently at that position (if any) and
                  any subsequent elements to the right.                
                <param>
                    index index before which to insert first element from the specified list (must be in [0,size])..                    
                </param>
                <param>
                    other list of which a part is to be inserted into the receiver.                    
                </param>
                <param>
                    from the index of the first element to be inserted (inclusive).                    
                </param>
                <param>
                    to the index of the last element to be inserted (inclusive).                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>other.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=other.size())</tt>).                    
                </exception>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).                    
                </exception>
            </javadoc>
            <method name="beforeInsertAllOfFromTo" type="void" line="68">
                <params>
                    <param name="index" type="int"/>
                    <param name="other" type="AbstractDoubleList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="length" type="int" line="69"/>
            </method>
            <javadoc line="73">
                Inserts &lt;tt&gt;length&lt;/tt&gt; dummy elements before the specified position into the receiver. 
                  Shifts the element currently at that position (if any) and
                  any subsequent elements to the right.
                  &lt;b&gt;This method must set the new size to be &lt;tt&gt;size()+length&lt;/tt&gt;.                
                <param>
                    index index before which to insert dummy elements (must be in [0,size])..                    
                </param>
                <param>
                    length number of dummy elements to be inserted.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt; size()</tt>.                    
                </throws>
            </javadoc>
            <method name="beforeInsertDummies" type="void" line="82">
                <params>
                    <param name="index" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="84"/>
            </method>
            <javadoc line="90">
                Searches the receiver for the specified value using
                  the binary search algorithm.  The receiver must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the receiver contains multiple elements
                  equal to the specified object, there is no guarantee which instance
                  will be found.                
                <param>
                    key the value to be searched for.                    
                </param>
                <return>
                    index of the search key, if it is contained in the receiver;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the receiver: the index of the first
                      element greater than the key, or <tt>receiver.size()</tt>, if all
                      elements in the receiver are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearch" type="int" line="109">
                <params>
                    <param name="key" type="double"/>
                </params>
            </method>
            <javadoc line="112">
                Searches the receiver for the specified value using
                  the binary search algorithm.  The receiver must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the receiver contains multiple elements
                  equal to the specified object, there is no guarantee which instance
                  will be found.                
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the receiver;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the receiver: the index of the first
                      element greater than the key, or <tt>receiver.size()</tt>, if all
                      elements in the receiver are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="133">
                <params>
                    <param name="key" type="double"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="low" type="int" line="134"/>
                <declaration name="high" type="int" line="135"/>
                <scope line="136">
                    <declaration name="mid" type="int" line="137"/>
                    <declaration name="midVal" type="double" line="138"/>
                </scope>
            </method>
            <javadoc line="145">
                Returns a deep copy of the receiver.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="149"/>
            <javadoc line="152">
                Returns true if the receiver contains the specified element.                
                <param>
                    element element whose presence in the receiver is to be tested.                    
                </param>
            </javadoc>
            <method name="contains" type="boolean" line="156">
                <params>
                    <param name="elem" type="double"/>
                </params>
            </method>
            <javadoc line="159">
                Deletes the first element from the receiver that is identical to the specified element.
                  Does nothing, if no such matching element is contained.                
                <param>
                    element the element to be deleted.                    
                </param>
            </javadoc>
            <method name="delete" type="void" line="164">
                <params>
                    <param name="element" type="double"/>
                </params>
                <declaration name="index" type="int" line="165"/>
            </method>
            <javadoc line="168">
                Returns the elements currently stored, possibly including invalid elements between size and capacity.
                  &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, this method may decide &lt;b&gt;not to copy the array&lt;/b&gt;.
                  So if subsequently you modify the returned array directly via the [] operator, be sure you know what you&apos;re doing.                
                <return>
                    the elements currently stored.                    
                </return>
            </javadoc>
            <method name="elements" type="double[]" line="174">
                <declaration name="myElements" type="double[]" line="175"/>
            </method>
            <javadoc line="179">
                Sets the receiver&apos;s elements to be the specified array.
                  The size and capacity of the list is the length of the array.
                  &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, this method may decide &lt;b&gt;not to copy the array&lt;/b&gt;.
                  So if subsequently you modify the returned array directly via the [] operator, be sure you know what you&apos;re doing.                
                <param>
                    elements the new elements to be stored.                    
                </param>
                <return>
                    the receiver itself.                    
                </return>
            </javadoc>
            <method name="elements" type="AbstractDoubleList" line="187">
                <params>
                    <param name="elements" type="double[]"/>
                </params>
            </method>
            <method name="ensureCapacity" type="void" line="192"/>
            <javadoc line="192">
                Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
                  If necessary, allocates new internal memory and increases the capacity of the receiver.                
                <param>
                    minCapacity   the desired minimum capacity.                    
                </param>
            </javadoc>
            <javadoc line="198">
                Compares the specified Object with the receiver.  
                  Returns true if and only if the specified Object is also an ArrayList of the same type, both Lists have the
                  same size, and all corresponding pairs of elements in the two Lists are identical.
                  In other words, two Lists are defined to be equal if they contain the
                  same elements in the same order.                
                <param>
                    otherObj the Object to be compared for equality with the receiver.                    
                </param>
                <return>
                    true if the specified Object is equal to the receiver.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="207">
                <params>
                    <param name="otherObj" type="Object"/>
                </params>
                <scope line="208"/>
                <declaration name="other" type="AbstractDoubleList" line="213"/>
                <scope line="215"/>
            </method>
            <javadoc line="220">
                Sets the specified range of elements in the specified array to the specified value.                
                <param>
                    from the index of the first element (inclusive) to be filled with the specified value.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be filled with the specified value.                    
                </param>
                <param>
                    val the value to be stored in the specified elements of the receiver.                    
                </param>
            </javadoc>
            <method name="fillFromToWith" type="void" line="226">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="val" type="double"/>
                </params>
            </method>
            <javadoc line="230">
                Applies a procedure to each element of the receiver, if any.
                  Starts at index 0, moving rightwards.                
                <param>
                    procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="forEach" type="boolean" line="236">
                <params>
                    <param name="procedure" type="DoubleProcedure"/>
                </params>
            </method>
            <javadoc line="240">
                Returns the element at the specified position in the receiver.                
                <param>
                    index index of element to return.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (index
                      &lt; 0 || index &gt;= size()).                    
                </exception>
            </javadoc>
            <method name="get" type="double" line="246">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getQuick" type="double" line="250"/>
            <javadoc line="250">
                Returns the element at the specified position in the receiver; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
                  Provided with invalid parameters this method may return invalid elements without throwing any exception!
                  &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.
                  This method is normally only used internally in large loops where bounds are explicitly checked before the loop and need no be rechecked within the loop.
                  However, when desperately, you can give this method &lt;tt&gt;public&lt;/tt&gt; visibility in subclasses.                
                <param>
                    index index of element to return.                    
                </param>
            </javadoc>
            <javadoc line="260">
                Returns the index of the first occurrence of the specified
                  element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.                
                <param>
                    element   the element to be searched for.                    
                </param>
                <return>
                    the index of the first occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="266">
                <params>
                    <param name="element" type="double"/>
                </params>
            </method>
            <javadoc line="269">
                Returns the index of the first occurrence of the specified
                  element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                  Searches between &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.
                  Tests for identity.                
                <param>
                    element element to search for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    the index of the first occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </return>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="indexOfFromTo" type="int" line="280">
                <params>
                    <param name="element" type="double"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <scope line="282"/>
            </method>
            <javadoc line="287">
                Returns the index of the last occurrence of the specified
                  element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.                
                <param>
                    element   the element to be searched for.                    
                </param>
                <return>
                    the index of the last occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </return>
            </javadoc>
            <method name="lastIndexOf" type="int" line="293">
                <params>
                    <param name="element" type="double"/>
                </params>
            </method>
            <javadoc line="296">
                Returns the index of the last occurrence of the specified
                  element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                  Searches beginning at &lt;code&gt;to&lt;/code&gt;, inclusive until &lt;code&gt;from&lt;/code&gt;, inclusive.
                  Tests for identity.                
                <param>
                    element element to search for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    the index of the last occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </return>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="lastIndexOfFromTo" type="int" line="307">
                <params>
                    <param name="element" type="double"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <scope line="309"/>
            </method>
            <javadoc line="314">
                Sorts the specified range of the receiver into ascending order. 
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.
                  &lt;p&gt;&lt;b&gt;You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set.&lt;/b&gt;
                  It is generally better to call &lt;tt&gt;sort()&lt;/tt&gt; or &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; instead, because those methods automatically choose the best sorting algorithm.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="mergeSortFromTo" type="void" line="327">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="mySize" type="int" line="328"/>
                <declaration name="myElements" type="double[]" line="330"/>
            </method>
            <javadoc line="335">
                Sorts the receiver according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    from the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the receiver.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="mergeSortFromTo" type="void" line="361">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="c" type="DoubleComparator"/>
                </params>
                <declaration name="mySize" type="int" line="362"/>
                <declaration name="myElements" type="double[]" line="364"/>
            </method>
            <javadoc line="369">
                Returns a new list of the part of the receiver between &lt;code&gt;from&lt;/code&gt;, inclusive, and &lt;code&gt;to&lt;/code&gt;, inclusive.                
                <param>
                    from the index of the first element (inclusive).                    
                </param>
                <param>
                    to the index of the last element (inclusive).                    
                </param>
                <return>
                    a new list                    
                </return>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="partFromTo" type="AbstractDoubleList" line="376">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="length" type="int" line="378"/>
                <declaration name="part" type="DoubleArrayList" line="379"/>
            </method>
            <javadoc line="383">
                Sorts the specified range of the receiver into
                  ascending numerical order.  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.
                  &lt;p&gt;&lt;b&gt;You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set.&lt;/b&gt;
                  It is generally better to call &lt;tt&gt;sort()&lt;/tt&gt; or &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; instead, because those methods automatically choose the best sorting algorithm.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="quickSortFromTo" type="void" line="397">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="mySize" type="int" line="398"/>
                <declaration name="myElements" type="double[]" line="400"/>
            </method>
            <javadoc line="405">
                Sorts the receiver according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.                
                <param>
                    from the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the receiver.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="quickSortFromTo" type="void" line="430">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="c" type="DoubleComparator"/>
                </params>
                <declaration name="mySize" type="int" line="431"/>
                <declaration name="myElements" type="double[]" line="433"/>
            </method>
            <javadoc line="438">
                Removes from the receiver all elements that are contained in the specified list.
                  Tests for identity.                
                <param>
                    other the other list.                    
                </param>
                <return>
                    <code>true</code> if the receiver changed as a result of the call.                    
                </return>
            </javadoc>
            <method name="removeAll" type="boolean" line="444">
                <params>
                    <param name="other" type="AbstractDoubleList"/>
                </params>
                <declaration name="limit" type="int" line="446"/>
                <declaration name="j" type="int" line="447"/>
                <scope line="448"/>
                <declaration name="modified" type="boolean" line="451"/>
            </method>
            <javadoc line="455">
                Removes from the receiver all elements whose index is between
                  &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.  Shifts any succeeding
                  elements to the left (reduces their index).
                  This call shortens the list by &lt;tt&gt;(to - from + 1)&lt;/tt&gt; elements.                
                <param>
                    from index of first element to be removed.                    
                </param>
                <param>
                    to index of last element to be removed.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="removeFromTo" type="void" line="464">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="numMoved" type="int" line="466"/>
                <scope line="467"/>
                <declaration name="width" type="int" line="470"/>
            </method>
            <javadoc line="473">
                Replaces a number of elements in the receiver with the same number of elements of another list.
                  Replaces elements in the receiver, between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive),
                  with elements of &lt;code&gt;other&lt;/code&gt;, starting from &lt;code&gt;otherFrom&lt;/code&gt; (inclusive).                
                <param>
                    from the position of the first element to be replaced in the receiver                    
                </param>
                <param>
                    to the position of the last element to be replaced in the receiver                    
                </param>
                <param>
                    other list holding elements to be copied into the receiver.                    
                </param>
                <param>
                    otherFrom position of first element within other list to be copied.                    
                </param>
            </javadoc>
            <method name="replaceFromToWithFrom" type="void" line="482">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="other" type="AbstractDoubleList"/>
                    <param name="otherFrom" type="int"/>
                </params>
                <declaration name="length" type="int" line="483"/>
                <scope line="484">
                    <scope line="487"/>
                    <scope line="490">
                        <declaration name="otherTo" type="int" line="491"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="496">
                Replaces the part between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive) with the other list&apos;s
                  part between &lt;code&gt;otherFrom&lt;/code&gt; and &lt;code&gt;otherTo&lt;/code&gt;. 
                  Powerful (and tricky) method!
                  Both parts need not be of the same size (part A can both be smaller or larger than part B).
                  Parts may overlap.
                  Receiver and other list may (but most not) be identical.
                  If &lt;code&gt;from &amp;gt; to&lt;/code&gt;, then inserts other part before &lt;code&gt;from&lt;/code&gt;.                
                <param>
                    from the first element of the receiver (inclusive)                    
                </param>
                <param>
                    to the last element of the receiver (inclusive)                    
                </param>
                <param>
                    other the other list (may be identical with receiver)                    
                </param>
                <param>
                    otherFrom the first element of the other list (inclusive)                    
                </param>
                <param>
                    otherTo the last element of the other list (inclusive)
                      <p><b>Examples:</b><pre>
                      a=[0, 1, 2, 3, 4, 5, 6, 7]
                      b=[50, 60, 70, 80, 90]
                      a.R(...)=a.replaceFromToWithFromTo(...)
                      a.R(3,5,b,0,4)-->[0, 1, 2, 50, 60, 70, 80, 90, 6, 7]
                      a.R(1,6,b,0,4)-->[0, 50, 60, 70, 80, 90, 7]
                      a.R(0,6,b,0,4)-->[50, 60, 70, 80, 90, 7]
                      a.R(3,5,b,1,2)-->[0, 1, 2, 60, 70, 6, 7]
                      a.R(1,6,b,1,2)-->[0, 60, 70, 7]
                      a.R(0,6,b,1,2)-->[60, 70, 7]
                      a.R(5,3,b,0,4)-->[0, 1, 2, 3, 4, 50, 60, 70, 80, 90, 5, 6, 7]
                      a.R(5,0,b,0,4)-->[0, 1, 2, 3, 4, 50, 60, 70, 80, 90, 5, 6, 7]
                      a.R(5,3,b,1,2)-->[0, 1, 2, 3, 4, 60, 70, 5, 6, 7]
                      a.R(5,0,b,1,2)-->[0, 1, 2, 3, 4, 60, 70, 5, 6, 7]
                      Extreme cases:
                      a.R(5,3,b,0,0)-->[0, 1, 2, 3, 4, 50, 5, 6, 7]
                      a.R(5,3,b,4,4)-->[0, 1, 2, 3, 4, 90, 5, 6, 7]
                      a.R(3,5,a,0,1)-->[0, 1, 2, 0, 1, 6, 7]
                      a.R(3,5,a,3,5)-->[0, 1, 2, 3, 4, 5, 6, 7]
                      a.R(3,5,a,4,4)-->[0, 1, 2, 4, 6, 7]
                      a.R(5,3,a,0,4)-->[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7]
                      a.R(0,-1,b,0,4)-->[50, 60, 70, 80, 90, 0, 1, 2, 3, 4, 5, 6, 7]
                      a.R(0,-1,a,0,4)-->[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7]
                      a.R(8,0,a,0,4)-->[0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4]
                      </pre>                    
                </param>
            </javadoc>
            <method name="replaceFromToWithFromTo" type="void" line="535">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="other" type="AbstractDoubleList"/>
                    <param name="otherFrom" type="int"/>
                    <param name="otherTo" type="int"/>
                </params>
                <scope line="536"/>
                <scope line="539"/>
                <declaration name="length" type="int" line="543"/>
                <declaration name="diff" type="int" line="544"/>
                <declaration name="theLast" type="int" line="545"/>
                <scope line="546"/>
                <scope line="550"/>
                <scope line="553">
                    <scope line="554"/>
                </scope>
                <scope line="558"/>
            </method>
            <javadoc line="562">
                Replaces the part of the receiver starting at &lt;code&gt;from&lt;/code&gt; (inclusive) with all the elements of the specified collection.
                  Does not alter the size of the receiver.
                  Replaces exactly &lt;tt&gt;Math.max(0,Math.min(size()-from, other.size()))&lt;/tt&gt; elements.                
                <param>
                    from the index at which to copy the first element from the specified collection.                    
                </param>
                <param>
                    other Collection to replace part of the receiver                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (index &lt; 0 || index &gt;= size()).                    
                </exception>
            </javadoc>
            <method name="replaceFromWith" type="void" line="570">
                <params>
                    <param name="from" type="int"/>
                    <param name="other" type="java.util.Collection"/>
                </params>
                <declaration name="e" type="java.util.Iterator" line="572"/>
                <declaration name="index" type="int" line="573"/>
                <declaration name="limit" type="int" line="574"/>
            </method>
            <javadoc line="577">
                Retains (keeps) only the elements in the receiver that are contained in the specified other list.
                  In other words, removes from the receiver all of its elements that are not contained in the
                  specified other list.                
                <param>
                    other the other list to test against.                    
                </param>
                <return>
                    <code>true</code> if the receiver changed as a result of the call.                    
                </return>
            </javadoc>
            <method name="retainAll" type="boolean" line="584">
                <params>
                    <param name="other" type="AbstractDoubleList"/>
                </params>
                <scope line="585"/>
                <declaration name="limit" type="int" line="590"/>
                <declaration name="j" type="int" line="591"/>
                <scope line="592"/>
                <declaration name="modified" type="boolean" line="595"/>
            </method>
            <javadoc line="599">
                Reverses the elements of the receiver.
                  Last becomes first, second last becomes second first, and so on.                
            </javadoc>
            <method name="reverse" type="void" line="603">
                <declaration name="tmp" type="double" line="604"/>
                <declaration name="limit" type="int" line="605"/>
                <declaration name="j" type="int" line="606"/>
                <scope line="607"/>
            </method>
            <javadoc line="613">
                Replaces the element at the specified position in the receiver with the specified element.                
                <param>
                    index index of element to replace.                    
                </param>
                <param>
                    element element to be stored at the specified position.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt;= size()</tt>.                    
                </throws>
            </javadoc>
            <method name="set" type="void" line="619">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="double"/>
                </params>
            </method>
            <method name="setQuick" type="void" line="623"/>
            <javadoc line="623">
                Replaces the element at the specified position in the receiver with the specified element; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions.
                  Provided with invalid parameters this method may access invalid indexes without throwing any exception!
                  &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.
                  This method is normally only used internally in large loops where bounds are explicitly checked before the loop and need no be rechecked within the loop.
                  However, when desperately, you can give this method &lt;tt&gt;public&lt;/tt&gt; visibility in subclasses.                
                <param>
                    index index of element to replace.                    
                </param>
                <param>
                    element element to be stored at the specified position.                    
                </param>
            </javadoc>
            <javadoc line="634">
                Sets the size of the receiver without modifying it otherwise.
                  This method should not release or allocate new memory but simply set some instance variable like &lt;tt&gt;size&lt;/tt&gt;.
                  If your subclass overrides and delegates size changing methods to some other object,
                  you must make sure that those overriding methods not only update the size of the delegate but also of this class.
                  For example:
                  public DatabaseList extends AbstractDoubleList {
                  ...
                  public void removeFromTo(int from,int to) {
                  myDatabase.removeFromTo(from,to);
                  this.setSizeRaw(size-(to-from+1));
                  }
                  }                
            </javadoc>
            <method name="setSizeRaw" type="void" line="648">
                <params>
                    <param name="newSize" type="int"/>
                </params>
            </method>
            <javadoc line="651">
                Randomly permutes the part of the receiver between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive).                
                <param>
                    from the index of the first element (inclusive) to be permuted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be permuted.                    
                </param>
                <exception>
                    IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </exception>
            </javadoc>
            <method name="shuffleFromTo" type="void" line="657">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="gen" type="cern.jet.random.Uniform" line="659"/>
                <scope line="660">
                    <declaration name="random" type="int" line="661"/>
                    <declaration name="tmpElement" type="double" line="662"/>
                </scope>
            </method>
            <javadoc line="667">
                Returns the number of elements contained in the receiver.                
                <returns>
                    the number of elements contained in the receiver.                    
                </returns>
            </javadoc>
            <method name="size" type="int" line="671"/>
            <javadoc line="674">
                Returns a list which is a concatenation of &lt;code&gt;times&lt;/code&gt; times the receiver.                
                <param>
                    times the number of times the receiver shall be copied.                    
                </param>
            </javadoc>
            <method name="times" type="AbstractDoubleList" line="678">
                <params>
                    <param name="times" type="int"/>
                </params>
                <declaration name="newList" type="AbstractDoubleList" line="679"/>
                <scope line="680"/>
            </method>
            <javadoc line="685">
                Returns a &lt;code&gt;java.util.ArrayList&lt;/code&gt; containing all the elements in the receiver.                
            </javadoc>
            <method name="toList" type="java.util.ArrayList" line="688">
                <declaration name="mySize" type="int" line="689"/>
                <declaration name="list" type="java.util.ArrayList" line="690"/>
            </method>
            <javadoc line="694">
                Returns a string representation of the receiver, containing
                  the String representation of each element.                
            </javadoc>
            <method name="toString" type="String" line="698"/>
        </class>
    </source>