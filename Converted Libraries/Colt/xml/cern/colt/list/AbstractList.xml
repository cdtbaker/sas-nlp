<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.list">
        <class name="AbstractList" line="11">
            <extends class="AbstractCollection"/>
            <javadoc line="11">
                Abstract base class for resizable lists holding objects or primitive data types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, etc.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    java.util.ArrayList                    
                </see>
                <see>
                    java.util.Vector                    
                </see>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <javadoc line="24">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractList" type="constructor" line="27"/>
            <javadoc line="28">
                Appends all of the elements of the specified Collection to the
                  receiver.                
                <exception>
                    ClassCastException if an element in the collection is not
                      of the same parameter type of the receiver.                    
                </exception>
            </javadoc>
            <method name="addAllOf" type="void" line="35">
                <params>
                    <param name="collection" type="java.util.Collection"/>
                </params>
            </method>
            <javadoc line="38">
                Inserts all elements of the specified collection before the specified position into the receiver. 
                  Shifts the element
                  currently at that position (if any) and any subsequent elements to
                  the right (increases their indices).                
                <param>
                    index index before which to insert first element from the specified collection.                    
                </param>
                <param>
                    collection the collection to be inserted                    
                </param>
                <exception>
                    ClassCastException if an element in the collection is not
                      of the same parameter type of the receiver.                    
                </exception>
                <throws>
                    IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt; size()</tt>.                    
                </throws>
            </javadoc>
            <method name="beforeInsertAllOf" type="void" line="49">
                <params>
                    <param name="index" type="int"/>
                    <param name="collection" type="java.util.Collection"/>
                </params>
            </method>
            <method name="beforeInsertDummies" type="void" line="53"/>
            <javadoc line="53">
                Inserts &lt;tt&gt;length&lt;/tt&gt; dummy elements before the specified position into the receiver. 
                  Shifts the element currently at that position (if any) and
                  any subsequent elements to the right.
                  &lt;b&gt;This method must set the new size to be &lt;tt&gt;size()+length&lt;/tt&gt;.                
                <param>
                    index index before which to insert dummy elements (must be in [0,size])..                    
                </param>
                <param>
                    length number of dummy elements to be inserted.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt; size()</tt>.                    
                </throws>
            </javadoc>
            <javadoc line="64">
                Checks if the given index is in range.                
            </javadoc>
            <method name="checkRange" type="void" line="67">
                <params>
                    <param name="index" type="int"/>
                    <param name="theSize" type="int"/>
                </params>
            </method>
            <javadoc line="71">
                Checks if the given range is within the contained array&apos;s bounds.                
                <throws>
                    IndexOutOfBoundsException if <tt>to!=from-1 || from&lt;0 || from&gt;to || to&gt;=size()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkRangeFromTo" type="void" line="75">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="theSize" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Removes all elements from the receiver.  The receiver will
                  be empty after this call returns, but keep its current capacity.                
            </javadoc>
            <method name="clear" type="void" line="84"/>
            <javadoc line="87">
                Sorts the receiver into ascending order.  
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.
                  &lt;p&gt;&lt;b&gt;You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set.&lt;/b&gt;
                  It is generally better to call &lt;tt&gt;sort()&lt;/tt&gt; or &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; instead, because those methods automatically choose the best sorting algorithm.                
            </javadoc>
            <method name="mergeSort" type="void" line="101"/>
            <method name="mergeSortFromTo" type="void" line="104"/>
            <javadoc line="104">
                Sorts the receiver into ascending order.  
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.
                  &lt;p&gt;&lt;b&gt;You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set.&lt;/b&gt;
                  It is generally better to call &lt;tt&gt;sort()&lt;/tt&gt; or &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; instead, because those methods automatically choose the best sorting algorithm.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>(from&lt;0 || from&gt;to || to&gt;=size()) && to!=from-1</tt>.                    
                </throws>
            </javadoc>
            <javadoc line="123">
                Sorts the receiver into
                  ascending order.  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.
                  &lt;p&gt;&lt;b&gt;You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set.&lt;/b&gt;
                  It is generally better to call &lt;tt&gt;sort()&lt;/tt&gt; or &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; instead, because those methods automatically choose the best sorting algorithm.                
            </javadoc>
            <method name="quickSort" type="void" line="135"/>
            <method name="quickSortFromTo" type="void" line="138"/>
            <javadoc line="138">
                Sorts the specified range of the receiver into
                  ascending order.  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.
                  &lt;p&gt;&lt;b&gt;You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set.&lt;/b&gt;
                  It is generally better to call &lt;tt&gt;sort()&lt;/tt&gt; or &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; instead, because those methods automatically choose the best sorting algorithm.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>(from&lt;0 || from&gt;to || to&gt;=size()) && to!=from-1</tt>.                    
                </throws>
            </javadoc>
            <javadoc line="155">
                Removes the element at the specified position from the receiver.
                  Shifts any subsequent elements to the left.                
                <param>
                    index the index of the element to removed.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt;= size()</tt>.                    
                </throws>
            </javadoc>
            <method name="remove" type="void" line="162">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="removeFromTo" type="void" line="165"/>
            <javadoc line="165">
                Removes from the receiver all elements whose index is between
                  &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.  Shifts any succeeding
                  elements to the left (reduces their index).
                  This call shortens the list by &lt;tt&gt;(to - from + 1)&lt;/tt&gt; elements.                
                <param>
                    from index of first element to be removed.                    
                </param>
                <param>
                    to index of last element to be removed.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>(from&lt;0 || from&gt;to || to&gt;=size()) && to!=from-1</tt>.                    
                </throws>
            </javadoc>
            <method name="replaceFromWith" type="void" line="176"/>
            <javadoc line="176">
                Replaces the part of the receiver starting at &lt;code&gt;from&lt;/code&gt; (inclusive) with all the elements of the specified collection.
                  Does not alter the size of the receiver.
                  Replaces exactly &lt;tt&gt;Math.max(0,Math.min(size()-from, other.size()))&lt;/tt&gt; elements.                
                <param>
                    from the index at which to copy the first element from the specified collection.                    
                </param>
                <param>
                    other Collection to replace part of the receiver                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt;= size()</tt>.                    
                </throws>
            </javadoc>
            <method name="reverse" type="void" line="186"/>
            <javadoc line="186">
                Reverses the elements of the receiver.
                  Last becomes first, second last becomes second first, and so on.                
            </javadoc>
            <javadoc line="191">
                Sets the size of the receiver.
                  If the new size is greater than the current size, new null or zero items are added to the end of the receiver.
                  If the new size is less than the current size, all components at index newSize and greater are discarded.
                  This method does not release any superfluos internal memory. Use method &lt;tt&gt;trimToSize&lt;/tt&gt; to release superfluos internal memory.                
                <param>
                    newSize the new size of the receiver.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>newSize &lt; 0</tt>.                    
                </throws>
            </javadoc>
            <method name="setSize" type="void" line="199">
                <params>
                    <param name="newSize" type="int"/>
                </params>
                <declaration name="currentSize" type="int" line="202"/>
                <scope line="203"/>
            </method>
            <javadoc line="208">
                Randomly permutes the receiver. After invocation, all elements will be at random positions.                
            </javadoc>
            <method name="shuffle" type="void" line="211"/>
            <method name="shuffleFromTo" type="void" line="214"/>
            <javadoc line="214">
                Randomly permutes the receiver between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive).                
                <param>
                    from the start position (inclusive)                    
                </param>
                <param>
                    to the end position (inclusive)                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>(from&lt;0 || from&gt;to || to&gt;=size()) && to!=from-1</tt>.                    
                </throws>
            </javadoc>
            <javadoc line="221">
                Sorts the receiver into ascending order. 
                  The sorting algorithm is dynamically chosen according to the characteristics of the data set.
                  This implementation simply calls &lt;tt&gt;sortFromTo(...)&lt;/tt&gt;.
                  Override &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; if you can determine which sort is most appropriate for the given data set.                
            </javadoc>
            <method name="sort" type="void" line="229"/>
            <javadoc line="232">
                Sorts the specified range of the receiver into ascending order. 
                  The sorting algorithm is dynamically chosen according to the characteristics of the data set.
                  This default implementation simply calls quickSort.
                  Override this method if you can determine which sort is most appropriate for the given data set.                
                <param>
                    from the index of the first element (inclusive) to be sorted.                    
                </param>
                <param>
                    to the index of the last element (inclusive) to be sorted.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>(from&lt;0 || from&gt;to || to&gt;=size()) && to!=from-1</tt>.                    
                </throws>
            </javadoc>
            <method name="sortFromTo" type="void" line="243">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="246">
                Trims the capacity of the receiver to be the receiver&apos;s current 
                  size. Releases any superfluos internal memory. An application can use this operation to minimize the 
                  storage of the receiver.
                  &lt;p&gt;
                  This default implementation does nothing. Override this method in space efficient implementations.                
            </javadoc>
            <method name="trimToSize" type="void" line="253"/>
        </class>
    </source>