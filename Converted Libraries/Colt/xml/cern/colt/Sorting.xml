<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt">
        <import package="java.util.Comparator"/>
        <import package="cern.colt.function.ByteComparator"/>
        <import package="cern.colt.function.CharComparator"/>
        <import package="cern.colt.function.DoubleComparator"/>
        <import package="cern.colt.function.FloatComparator"/>
        <import package="cern.colt.function.IntComparator"/>
        <import package="cern.colt.function.LongComparator"/>
        <import package="cern.colt.function.ShortComparator"/>
        <class name="Sorting" line="10">
            <extends class="Object"/>
            <javadoc line="10">
                Quicksorts, mergesorts and binary searches; complements &lt;tt&gt;java.util.Arrays&lt;/tt&gt;.
                  Contains, for example, the quicksort on Comparators and Comparables, which are still missing in &lt;tt&gt;java.util.Arrays&lt;/tt&gt; of JDK 1.2.
                  Also provides mergesorts for types not supported in &lt;tt&gt;java.util.Arrays&lt;/tt&gt;, as well as a couple of other methods for primitive arrays.
                  The quicksorts and mergesorts are the JDK 1.2 V1.26 algorithms, modified as necessary.                
                <see>
                    cern.colt.GenericSorting                    
                </see>
                <see>
                    cern.colt.matrix.doublealgo.Sorting                    
                </see>
                <see>
                    java.util.Arrays                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 03-Jul-99                    
                </version>
            </javadoc>
            <declaration name="SMALL" type="int" line="22"/>
            <declaration name="MEDIUM" type="int" line="23"/>
            <javadoc line="24">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Sorting" type="constructor" line="27"/>
            <javadoc line="29">
                Searches the list for the specified value using
                  the binary search algorithm.  The list must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the list contains multiple elements
                  equal to the specified key, there is no guarantee which of the multiple elements
                  will be found.                
                <param>
                    list the list to be searched.                    
                </param>
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the list;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the list: the index of the first
                      element greater than the key, or <tt>list.length</tt>, if all
                      elements in the list are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="51">
                <params>
                    <param name="list" type="byte[]"/>
                    <param name="key" type="byte"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="midVal" type="byte" line="52"/>
                <scope line="53">
                    <declaration name="mid" type="int" line="54"/>
                </scope>
            </method>
            <javadoc line="62">
                Searches the list for the specified value using
                  the binary search algorithm.  The list must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the list contains multiple elements
                  equal to the specified key, there is no guarantee which of the multiple elements
                  will be found.                
                <param>
                    list the list to be searched.                    
                </param>
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the list;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the list: the index of the first
                      element greater than the key, or <tt>list.length</tt>, if all
                      elements in the list are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="84">
                <params>
                    <param name="list" type="char[]"/>
                    <param name="key" type="char"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="midVal" type="char" line="85"/>
                <scope line="86">
                    <declaration name="mid" type="int" line="87"/>
                </scope>
            </method>
            <javadoc line="95">
                Searches the list for the specified value using
                  the binary search algorithm.  The list must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the list contains multiple elements
                  equal to the specified key, there is no guarantee which of the multiple elements
                  will be found.                
                <param>
                    list the list to be searched.                    
                </param>
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the list;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the list: the index of the first
                      element greater than the key, or <tt>list.length</tt>, if all
                      elements in the list are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="117">
                <params>
                    <param name="list" type="double[]"/>
                    <param name="key" type="double"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="midVal" type="double" line="118"/>
                <scope line="119">
                    <declaration name="mid" type="int" line="120"/>
                </scope>
            </method>
            <javadoc line="128">
                Searches the list for the specified value using
                  the binary search algorithm.  The list must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the list contains multiple elements
                  equal to the specified key, there is no guarantee which of the multiple elements
                  will be found.                
                <param>
                    list the list to be searched.                    
                </param>
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the list;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the list: the index of the first
                      element greater than the key, or <tt>list.length</tt>, if all
                      elements in the list are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="150">
                <params>
                    <param name="list" type="float[]"/>
                    <param name="key" type="float"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="midVal" type="float" line="151"/>
                <scope line="152">
                    <declaration name="mid" type="int" line="153"/>
                </scope>
            </method>
            <javadoc line="161">
                Searches the list for the specified value using
                  the binary search algorithm.  The list must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the list contains multiple elements
                  equal to the specified key, there is no guarantee which of the multiple elements
                  will be found.                
                <param>
                    list the list to be searched.                    
                </param>
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the list;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the list: the index of the first
                      element greater than the key, or <tt>list.length</tt>, if all
                      elements in the list are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="183">
                <params>
                    <param name="list" type="int[]"/>
                    <param name="key" type="int"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="midVal" type="int" line="184"/>
                <scope line="185">
                    <declaration name="mid" type="int" line="186"/>
                </scope>
            </method>
            <javadoc line="194">
                Searches the list for the specified value using
                  the binary search algorithm.  The list must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the list contains multiple elements
                  equal to the specified key, there is no guarantee which of the multiple elements
                  will be found.                
                <param>
                    list the list to be searched.                    
                </param>
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the list;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the list: the index of the first
                      element greater than the key, or <tt>list.length</tt>, if all
                      elements in the list are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="216">
                <params>
                    <param name="list" type="long[]"/>
                    <param name="key" type="long"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="midVal" type="long" line="217"/>
                <scope line="218">
                    <declaration name="mid" type="int" line="219"/>
                </scope>
            </method>
            <javadoc line="227">
                Searches the list for the specified value using
                  the binary search algorithm. The list must be sorted into ascending order
                  according to the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  If the list is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the list contains multiple elements
                  equal to the specified key, there is no guarantee which instance
                  will be found.                
                <param>
                    list the list to be searched.                    
                </param>
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <param>
                    comparator the comparator by which the list is sorted.                    
                </param>
                <throws>
                    ClassCastException if the list contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <return>
                    index of the search key, if it is contained in the list;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the list: the index of the first
                      element greater than the key, or <tt>list.length</tt>, if all
                      elements in the list are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
                <see>
                    java.util.Comparator                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="257">
                <params>
                    <param name="list" type="Object[]"/>
                    <param name="key" type="Object"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="comparator" type="java.util.Comparator"/>
                </params>
                <declaration name="midVal" type="Object" line="258"/>
                <scope line="259">
                    <declaration name="mid" type="int" line="260"/>
                    <declaration name="cmp" type="int" line="262"/>
                </scope>
            </method>
            <javadoc line="269">
                Searches the list for the specified value using
                  the binary search algorithm.  The list must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the list contains multiple elements
                  equal to the specified key, there is no guarantee which of the multiple elements
                  will be found.                
                <param>
                    list the list to be searched.                    
                </param>
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the list;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the list: the index of the first
                      element greater than the key, or <tt>list.length</tt>, if all
                      elements in the list are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="291">
                <params>
                    <param name="list" type="short[]"/>
                    <param name="key" type="short"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="midVal" type="short" line="292"/>
                <scope line="293">
                    <declaration name="mid" type="int" line="294"/>
                </scope>
            </method>
            <javadoc line="302">
                Generically searches the list for the specified value using
                  the binary search algorithm.  The list must &lt;strong&gt;must&lt;/strong&gt; be
                  sorted (as by the sort method) prior to making this call.  If
                  it is not sorted, the results are undefined: in particular, the call
                  may enter an infinite loop.  If the list contains multiple elements
                  equal to the specified key, there is no guarantee which of the multiple elements
                  will be found.                
                <param>
                    list the list to be searched.                    
                </param>
                <param>
                    key the value to be searched for.                    
                </param>
                <param>
                    from the leftmost search position, inclusive.                    
                </param>
                <param>
                    to the rightmost search position, inclusive.                    
                </param>
                <return>
                    index of the search key, if it is contained in the list;
                      otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                      point</i> is defined as the the point at which the value would
                      be inserted into the list: the index of the first
                      element greater than the key, or <tt>list.length</tt>, if all
                      elements in the list are less than the specified key.  Note
                      that this guarantees that the return value will be &gt;= 0 if
                      and only if the key is found.                    
                </return>
                <see>
                    java.util.Arrays                    
                </see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="324">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="comp" type="IntComparator"/>
                </params>
                <declaration name="dummy" type="int" line="325"/>
                <scope line="326">
                    <declaration name="mid" type="int" line="327"/>
                    <declaration name="comparison" type="int" line="328"/>
                </scope>
            </method>
            <method name="lower_bound" type="int" line="335">
                <params>
                    <param name="array" type="int[]"/>
                    <param name="first" type="int"/>
                    <param name="last" type="int"/>
                    <param name="x" type="int"/>
                </params>
                <declaration name="len" type="int" line="336"/>
                <scope line="337">
                    <declaration name="half" type="int" line="338"/>
                    <declaration name="middle" type="int" line="339"/>
                    <scope line="340"/>
                </scope>
            </method>
            <method name="upper_bound" type="int" line="348">
                <params>
                    <param name="array" type="int[]"/>
                    <param name="first" type="int"/>
                    <param name="last" type="int"/>
                    <param name="x" type="int"/>
                </params>
                <declaration name="len" type="int" line="349"/>
                <scope line="350">
                    <declaration name="half" type="int" line="351"/>
                    <declaration name="middle" type="int" line="352"/>
                    <scope line="354"/>
                </scope>
            </method>
            <method name="inplace_merge" type="void" line="361">
                <params>
                    <param name="array" type="int[]"/>
                    <param name="first" type="int"/>
                    <param name="middle" type="int"/>
                    <param name="last" type="int"/>
                </params>
                <scope line="363">
                    <scope line="364">
                        <declaration name="tmp" type="int" line="365"/>
                    </scope>
                </scope>
                <declaration name="firstCut" type="int" line="371"/>
                <declaration name="secondCut" type="int" line="372"/>
                <scope line="373"/>
                <scope line="377"/>
                <declaration name="first2" type="int" line="381"/>
                <declaration name="middle2" type="int" line="382"/>
                <declaration name="last2" type="int" line="383"/>
                <scope line="384">
                    <declaration name="first1" type="int" line="385"/>
                    <declaration name="last1" type="int" line="386"/>
                    <declaration name="tmp" type="int" line="387"/>
                    <scope line="388"/>
                    <scope line="395"/>
                    <scope line="402"/>
                </scope>
            </method>
            <javadoc line="412">
                Returns the index of the median of the three indexed chars.                
            </javadoc>
            <method name="med3" type="int" line="415">
                <params>
                    <param name="x" type="byte"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="comp" type="ByteComparator"/>
                </params>
                <declaration name="ab" type="int" line="416"/>
                <declaration name="ac" type="int" line="417"/>
                <declaration name="bc" type="int" line="418"/>
            </method>
            <javadoc line="421">
                Returns the index of the median of the three indexed chars.                
            </javadoc>
            <method name="med3" type="int" line="424">
                <params>
                    <param name="x" type="char"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="comp" type="CharComparator"/>
                </params>
                <declaration name="ab" type="int" line="425"/>
                <declaration name="ac" type="int" line="426"/>
                <declaration name="bc" type="int" line="427"/>
            </method>
            <javadoc line="430">
                Returns the index of the median of the three indexed chars.                
            </javadoc>
            <method name="med3" type="int" line="433">
                <params>
                    <param name="x" type="double"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="comp" type="DoubleComparator"/>
                </params>
                <declaration name="ab" type="int" line="434"/>
                <declaration name="ac" type="int" line="435"/>
                <declaration name="bc" type="int" line="436"/>
            </method>
            <javadoc line="439">
                Returns the index of the median of the three indexed chars.                
            </javadoc>
            <method name="med3" type="int" line="442">
                <params>
                    <param name="x" type="float"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="comp" type="FloatComparator"/>
                </params>
                <declaration name="ab" type="int" line="443"/>
                <declaration name="ac" type="int" line="444"/>
                <declaration name="bc" type="int" line="445"/>
            </method>
            <javadoc line="448">
                Returns the index of the median of the three indexed chars.                
            </javadoc>
            <method name="med3" type="int" line="451">
                <params>
                    <param name="x" type="int"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="comp" type="IntComparator"/>
                </params>
                <declaration name="ab" type="int" line="452"/>
                <declaration name="ac" type="int" line="453"/>
                <declaration name="bc" type="int" line="454"/>
            </method>
            <javadoc line="457">
                Returns the index of the median of the three indexed chars.                
            </javadoc>
            <method name="med3" type="int" line="460">
                <params>
                    <param name="x" type="long"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="comp" type="LongComparator"/>
                </params>
                <declaration name="ab" type="int" line="461"/>
                <declaration name="ac" type="int" line="462"/>
                <declaration name="bc" type="int" line="463"/>
            </method>
            <javadoc line="466">
                Returns the index of the median of the three indexed chars.                
            </javadoc>
            <method name="med3" type="int" line="469">
                <params>
                    <param name="x" type="Object"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="ab" type="int" line="470"/>
                <declaration name="ac" type="int" line="471"/>
                <declaration name="bc" type="int" line="472"/>
            </method>
            <javadoc line="475">
                Returns the index of the median of the three indexed chars.                
            </javadoc>
            <method name="med3" type="int" line="478">
                <params>
                    <param name="x" type="Object"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="comp" type="Comparator"/>
                </params>
                <declaration name="ab" type="int" line="479"/>
                <declaration name="ac" type="int" line="480"/>
                <declaration name="bc" type="int" line="481"/>
            </method>
            <javadoc line="484">
                Returns the index of the median of the three indexed chars.                
            </javadoc>
            <method name="med3" type="int" line="487">
                <params>
                    <param name="x" type="short"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="comp" type="ShortComparator"/>
                </params>
                <declaration name="ab" type="int" line="488"/>
                <declaration name="ac" type="int" line="489"/>
                <declaration name="bc" type="int" line="490"/>
            </method>
            <javadoc line="493">
                Sorts the specified range of the specified array of elements.
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="mergeSort" type="void" line="510">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="aux" type="byte" line="512"/>
            </method>
            <javadoc line="515">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="mergeSort" type="void" line="541">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="ByteComparator"/>
                </params>
                <declaration name="aux" type="byte" line="543"/>
            </method>
            <javadoc line="546">
                Sorts the specified range of the specified array of elements.
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="mergeSort" type="void" line="563">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="aux" type="char" line="565"/>
            </method>
            <javadoc line="568">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="mergeSort" type="void" line="594">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="CharComparator"/>
                </params>
                <declaration name="aux" type="char" line="596"/>
            </method>
            <javadoc line="599">
                Sorts the specified range of the specified array of elements.
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="mergeSort" type="void" line="616">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="619">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="mergeSort" type="void" line="645">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="DoubleComparator"/>
                </params>
                <declaration name="aux" type="double" line="647"/>
            </method>
            <javadoc line="650">
                Sorts the specified range of the specified array of elements.
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="mergeSort" type="void" line="667">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="670">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="mergeSort" type="void" line="696">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="FloatComparator"/>
                </params>
                <declaration name="aux" type="float" line="698"/>
            </method>
            <javadoc line="701">
                Sorts the specified range of the specified array of elements.
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="mergeSort" type="void" line="718">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="aux" type="int" line="720"/>
            </method>
            <javadoc line="723">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="mergeSort" type="void" line="749">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="IntComparator"/>
                </params>
                <declaration name="aux" type="int" line="751"/>
            </method>
            <javadoc line="754">
                Sorts the specified range of the specified array of elements.
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="mergeSort" type="void" line="771">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="aux" type="long" line="773"/>
            </method>
            <javadoc line="776">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="mergeSort" type="void" line="802">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="LongComparator"/>
                </params>
                <declaration name="aux" type="long" line="804"/>
            </method>
            <javadoc line="807">
                Sorts the specified range of the specified array of elements.
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="mergeSort" type="void" line="824">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="aux" type="short" line="826"/>
            </method>
            <javadoc line="829">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="mergeSort" type="void" line="855">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="ShortComparator"/>
                </params>
                <declaration name="aux" type="short" line="857"/>
            </method>
            <method name="mergeSort1" type="void" line="860">
                <params>
                    <param name="src" type="byte"/>
                    <param name="dest" type="byte"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                </params>
                <declaration name="length" type="int" line="861"/>
                <scope line="862"/>
                <declaration name="mid" type="int" line="866"/>
                <scope line="869"/>
                <scope line="873"/>
            </method>
            <method name="mergeSort1" type="void" line="878">
                <params>
                    <param name="src" type="byte"/>
                    <param name="dest" type="byte"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                    <param name="c" type="ByteComparator"/>
                </params>
                <declaration name="length" type="int" line="879"/>
                <scope line="880"/>
                <declaration name="mid" type="int" line="884"/>
                <scope line="887"/>
                <scope line="891"/>
            </method>
            <method name="mergeSort1" type="void" line="896">
                <params>
                    <param name="src" type="char"/>
                    <param name="dest" type="char"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                </params>
                <declaration name="length" type="int" line="897"/>
                <scope line="898"/>
                <declaration name="mid" type="int" line="902"/>
                <scope line="905"/>
                <scope line="909"/>
            </method>
            <method name="mergeSort1" type="void" line="914">
                <params>
                    <param name="src" type="char"/>
                    <param name="dest" type="char"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                    <param name="c" type="CharComparator"/>
                </params>
                <declaration name="length" type="int" line="915"/>
                <scope line="916"/>
                <declaration name="mid" type="int" line="920"/>
                <scope line="923"/>
                <scope line="927"/>
            </method>
            <method name="mergeSort1" type="void" line="932">
                <params>
                    <param name="src" type="double"/>
                    <param name="dest" type="double"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                </params>
                <declaration name="length" type="int" line="933"/>
                <scope line="934"/>
                <declaration name="mid" type="int" line="938"/>
                <scope line="941"/>
                <scope line="945"/>
            </method>
            <method name="mergeSort1" type="void" line="950">
                <params>
                    <param name="src" type="double"/>
                    <param name="dest" type="double"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                    <param name="c" type="DoubleComparator"/>
                </params>
                <declaration name="length" type="int" line="951"/>
                <scope line="952"/>
                <declaration name="mid" type="int" line="956"/>
                <scope line="959"/>
                <scope line="963"/>
            </method>
            <method name="mergeSort1" type="void" line="968">
                <params>
                    <param name="src" type="float"/>
                    <param name="dest" type="float"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                </params>
                <declaration name="length" type="int" line="969"/>
                <scope line="970"/>
                <declaration name="mid" type="int" line="974"/>
                <scope line="977"/>
                <scope line="981"/>
            </method>
            <method name="mergeSort1" type="void" line="986">
                <params>
                    <param name="src" type="float"/>
                    <param name="dest" type="float"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                    <param name="c" type="FloatComparator"/>
                </params>
                <declaration name="length" type="int" line="987"/>
                <scope line="988"/>
                <declaration name="mid" type="int" line="992"/>
                <scope line="995"/>
                <scope line="999"/>
            </method>
            <method name="mergeSort1" type="void" line="1004">
                <params>
                    <param name="src" type="int"/>
                    <param name="dest" type="int"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                </params>
                <declaration name="length" type="int" line="1005"/>
                <scope line="1006"/>
                <declaration name="mid" type="int" line="1010"/>
                <scope line="1013"/>
                <scope line="1017"/>
            </method>
            <method name="mergeSort1" type="void" line="1022">
                <params>
                    <param name="src" type="int"/>
                    <param name="dest" type="int"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                    <param name="c" type="IntComparator"/>
                </params>
                <declaration name="length" type="int" line="1023"/>
                <scope line="1024"/>
                <declaration name="mid" type="int" line="1028"/>
                <scope line="1031"/>
                <scope line="1035"/>
            </method>
            <method name="mergeSort1" type="void" line="1040">
                <params>
                    <param name="src" type="long"/>
                    <param name="dest" type="long"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                </params>
                <declaration name="length" type="int" line="1041"/>
                <scope line="1042"/>
                <declaration name="mid" type="int" line="1046"/>
                <scope line="1049"/>
                <scope line="1053"/>
            </method>
            <method name="mergeSort1" type="void" line="1058">
                <params>
                    <param name="src" type="long"/>
                    <param name="dest" type="long"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                    <param name="c" type="LongComparator"/>
                </params>
                <declaration name="length" type="int" line="1059"/>
                <scope line="1060"/>
                <declaration name="mid" type="int" line="1064"/>
                <scope line="1067"/>
                <scope line="1071"/>
            </method>
            <method name="mergeSort1" type="void" line="1076">
                <params>
                    <param name="src" type="short"/>
                    <param name="dest" type="short"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                </params>
                <declaration name="length" type="int" line="1077"/>
                <scope line="1078"/>
                <declaration name="mid" type="int" line="1082"/>
                <scope line="1085"/>
                <scope line="1089"/>
            </method>
            <method name="mergeSort1" type="void" line="1094">
                <params>
                    <param name="src" type="short"/>
                    <param name="dest" type="short"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                    <param name="c" type="ShortComparator"/>
                </params>
                <declaration name="length" type="int" line="1095"/>
                <scope line="1096"/>
                <declaration name="mid" type="int" line="1100"/>
                <scope line="1103"/>
                <scope line="1107"/>
            </method>
            <method name="mergeSort2" type="void" line="1112">
                <params>
                    <param name="a" type="double"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="NEG_ZERO_BITS" type="long" line="1114"/>
                <declaration name="numNegZeros" type="int" line="1115"/>
                <declaration name="i" type="int" line="1116"/>
                <scope line="1117">
                    <scope line="1118"/>
                    <scope line="1122">
                        <scope line="1123"/>
                    </scope>
                </scope>
                <declaration name="aux" type="double" line="1130"/>
                <scope line="1132">
                    <declaration name="j" type="int" line="1133"/>
                    <scope line="1134"/>
                </scope>
            </method>
            <method name="mergeSort2" type="void" line="1141">
                <params>
                    <param name="a" type="float"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="NEG_ZERO_BITS" type="int" line="1143"/>
                <declaration name="numNegZeros" type="int" line="1144"/>
                <declaration name="i" type="int" line="1145"/>
                <scope line="1146">
                    <scope line="1147"/>
                    <scope line="1151">
                        <scope line="1152"/>
                    </scope>
                </scope>
                <declaration name="aux" type="float" line="1159"/>
                <scope line="1161">
                    <declaration name="j" type="int" line="1162"/>
                    <scope line="1163"/>
                </scope>
            </method>
            <javadoc line="1170">
                Sorts the specified range of the specified array of elements.
                  &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="mergeSortInPlace" type="void" line="1187">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <declaration name="length" type="int" line="1189"/>
                <scope line="1190">
                    <scope line="1191">
                        <scope line="1192">
                            <declaration name="tmp" type="int" line="1193"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="mid" type="int" line="1200"/>
            </method>
            <javadoc line="1206">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="quickSort" type="void" line="1231">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="ByteComparator"/>
                </params>
            </method>
            <javadoc line="1235">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="quickSort" type="void" line="1260">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="CharComparator"/>
                </params>
            </method>
            <javadoc line="1264">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="quickSort" type="void" line="1289">
                <params>
                    <param name="a" type="double[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="DoubleComparator"/>
                </params>
            </method>
            <javadoc line="1293">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="quickSort" type="void" line="1318">
                <params>
                    <param name="a" type="float[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="FloatComparator"/>
                </params>
            </method>
            <javadoc line="1322">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="quickSort" type="void" line="1347">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="IntComparator"/>
                </params>
            </method>
            <javadoc line="1351">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="quickSort" type="void" line="1376">
                <params>
                    <param name="a" type="long[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="LongComparator"/>
                </params>
            </method>
            <javadoc line="1380">
                Sorts the specified range of the receiver into
                  ascending order, according to the &lt;i&gt;natural ordering&lt;/i&gt; of its
                  elements.  All elements in this range must implement the
                  &lt;tt&gt;Comparable&lt;/tt&gt; interface.  Furthermore, all elements in this range
                  must be &lt;i&gt;mutually comparable&lt;/i&gt; (that is, &lt;tt&gt;e1.compareTo(e2)&lt;/tt&gt;
                  must not throw a &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements
                  &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; in the array).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort, adapted from Jon
                  L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a Sort Function&quot;,
                  Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
                  1993).  This algorithm offers nlog(n) performance on many data sets
                  that cause other quicksorts to degrade to quadratic performance.                
                <param>
                    a the array to be sorted.                    
                </param>
            </javadoc>
            <method name="quickSort" type="void" line="1395">
                <params>
                    <param name="a" type="Object[]"/>
                </params>
            </method>
            <javadoc line="1398">
                Sorts the specified range of the receiver into
                  ascending order, according to the &lt;i&gt;natural ordering&lt;/i&gt; of its
                  elements.  All elements in this range must implement the
                  &lt;tt&gt;Comparable&lt;/tt&gt; interface.  Furthermore, all elements in this range
                  must be &lt;i&gt;mutually comparable&lt;/i&gt; (that is, &lt;tt&gt;e1.compareTo(e2)&lt;/tt&gt;
                  must not throw a &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements
                  &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; in the array).&lt;p&gt;                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
            </javadoc>
            <method name="quickSort" type="void" line="1414">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1418">
                Sorts the specified range of the specified array according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the receiver.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="quickSort" type="void" line="1443">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="Comparator"/>
                </params>
            </method>
            <javadoc line="1447">
                Sorts the specified array according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  The sorting algorithm is a tuned quicksort,
                  adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                  Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                  P. 1249-1265 (November 1993).  This algorithm offers nlog(n)
                  performance on many data sets that cause other quicksorts to degrade to
                  quadratic performance.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the receiver.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="quickSort" type="void" line="1469">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="c" type="Comparator"/>
                </params>
            </method>
            <javadoc line="1472">
                Sorts the specified range of the specified array of elements according
                  to the order induced by the specified comparator.  All elements in the
                  range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                  (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                  &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                  &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                  not be reordered as a result of the sort.&lt;p&gt;
                  The sorting algorithm is a modified mergesort (in which the merge is
                  omitted if the highest element in the low sublist is less than the
                  lowest element in the high sublist).  This algorithm offers guaranteed
                  nlog(n) performance, and can approach linear performance on nearly
                  sorted lists.                
                <param>
                    a the array to be sorted.                    
                </param>
                <param>
                    fromIndex the index of the first element (inclusive) to be
                      sorted.                    
                </param>
                <param>
                    toIndex the index of the last element (exclusive) to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order of the array.                    
                </param>
                <throws>
                    ClassCastException if the array contains elements that are not
                      <i>mutually comparable</i> using the specified comparator.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                      <tt>toIndex &gt; a.length</tt>                    
                </throws>
                <see>
                    Comparator                    
                </see>
            </javadoc>
            <method name="quickSort" type="void" line="1498">
                <params>
                    <param name="a" type="short[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="ShortComparator"/>
                </params>
            </method>
            <javadoc line="1502">
                Sorts the specified sub-array of chars into ascending order.                
            </javadoc>
            <method name="quickSort1" type="void" line="1505">
                <params>
                    <param name="x" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="comp" type="ByteComparator"/>
                </params>
                <scope line="1506"/>
                <declaration name="m" type="int" line="1510"/>
                <scope line="1511">
                    <declaration name="l" type="int" line="1512"/>
                    <declaration name="n" type="int" line="1513"/>
                    <scope line="1514">
                        <declaration name="s" type="int" line="1515"/>
                    </scope>
                </scope>
                <declaration name="v" type="byte" line="1522"/>
                <declaration name="a" type="int" line="1523"/>
                <scope line="1524">
                    <declaration name="comparison" type="int" line="1525"/>
                    <scope line="1526"/>
                    <scope line="1530"/>
                </scope>
                <declaration name="s" type="int" line="1537"/>
            </method>
            <javadoc line="1545">
                Sorts the specified sub-array of chars into ascending order.                
            </javadoc>
            <method name="quickSort1" type="void" line="1548">
                <params>
                    <param name="x" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="comp" type="CharComparator"/>
                </params>
                <scope line="1549"/>
                <declaration name="m" type="int" line="1553"/>
                <scope line="1554">
                    <declaration name="l" type="int" line="1555"/>
                    <declaration name="n" type="int" line="1556"/>
                    <scope line="1557">
                        <declaration name="s" type="int" line="1558"/>
                    </scope>
                </scope>
                <declaration name="v" type="char" line="1565"/>
                <declaration name="a" type="int" line="1566"/>
                <scope line="1567">
                    <declaration name="comparison" type="int" line="1568"/>
                    <scope line="1569"/>
                    <scope line="1573"/>
                </scope>
                <declaration name="s" type="int" line="1580"/>
            </method>
            <javadoc line="1588">
                Sorts the specified sub-array of chars into ascending order.                
            </javadoc>
            <method name="quickSort1" type="void" line="1591">
                <params>
                    <param name="x" type="double"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="comp" type="DoubleComparator"/>
                </params>
                <scope line="1592"/>
                <declaration name="m" type="int" line="1596"/>
                <scope line="1597">
                    <declaration name="l" type="int" line="1598"/>
                    <declaration name="n" type="int" line="1599"/>
                    <scope line="1600">
                        <declaration name="s" type="int" line="1601"/>
                    </scope>
                </scope>
                <declaration name="v" type="double" line="1608"/>
                <declaration name="a" type="int" line="1609"/>
                <scope line="1610">
                    <declaration name="comparison" type="int" line="1611"/>
                    <scope line="1612"/>
                    <scope line="1616"/>
                </scope>
                <declaration name="s" type="int" line="1623"/>
            </method>
            <javadoc line="1631">
                Sorts the specified sub-array of chars into ascending order.                
            </javadoc>
            <method name="quickSort1" type="void" line="1634">
                <params>
                    <param name="x" type="float"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="comp" type="FloatComparator"/>
                </params>
                <scope line="1635"/>
                <declaration name="m" type="int" line="1639"/>
                <scope line="1640">
                    <declaration name="l" type="int" line="1641"/>
                    <declaration name="n" type="int" line="1642"/>
                    <scope line="1643">
                        <declaration name="s" type="int" line="1644"/>
                    </scope>
                </scope>
                <declaration name="v" type="float" line="1651"/>
                <declaration name="a" type="int" line="1652"/>
                <scope line="1653">
                    <declaration name="comparison" type="int" line="1654"/>
                    <scope line="1655"/>
                    <scope line="1659"/>
                </scope>
                <declaration name="s" type="int" line="1666"/>
            </method>
            <javadoc line="1674">
                Sorts the specified sub-array of chars into ascending order.                
            </javadoc>
            <method name="quickSort1" type="void" line="1677">
                <params>
                    <param name="x" type="int"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="comp" type="IntComparator"/>
                </params>
                <scope line="1678"/>
                <declaration name="m" type="int" line="1682"/>
                <scope line="1683">
                    <declaration name="l" type="int" line="1684"/>
                    <declaration name="n" type="int" line="1685"/>
                    <scope line="1686">
                        <declaration name="s" type="int" line="1687"/>
                    </scope>
                </scope>
                <declaration name="v" type="int" line="1694"/>
                <declaration name="a" type="int" line="1695"/>
                <scope line="1696">
                    <declaration name="comparison" type="int" line="1697"/>
                    <scope line="1698"/>
                    <scope line="1702"/>
                </scope>
                <declaration name="s" type="int" line="1709"/>
            </method>
            <javadoc line="1717">
                Sorts the specified sub-array of chars into ascending order.                
            </javadoc>
            <method name="quickSort1" type="void" line="1720">
                <params>
                    <param name="x" type="long"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="comp" type="LongComparator"/>
                </params>
                <scope line="1721"/>
                <declaration name="m" type="int" line="1725"/>
                <scope line="1726">
                    <declaration name="l" type="int" line="1727"/>
                    <declaration name="n" type="int" line="1728"/>
                    <scope line="1729">
                        <declaration name="s" type="int" line="1730"/>
                    </scope>
                </scope>
                <declaration name="v" type="long" line="1737"/>
                <declaration name="a" type="int" line="1738"/>
                <scope line="1739">
                    <declaration name="comparison" type="int" line="1740"/>
                    <scope line="1741"/>
                    <scope line="1745"/>
                </scope>
                <declaration name="s" type="int" line="1752"/>
            </method>
            <javadoc line="1760">
                Sorts the specified sub-array of chars into ascending order.                
            </javadoc>
            <method name="quickSort1" type="void" line="1763">
                <params>
                    <param name="x" type="Object"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="1764"/>
                <declaration name="m" type="int" line="1768"/>
                <scope line="1769">
                    <declaration name="l" type="int" line="1770"/>
                    <declaration name="n" type="int" line="1771"/>
                    <scope line="1772">
                        <declaration name="s" type="int" line="1773"/>
                    </scope>
                </scope>
                <declaration name="v" type="Comparable" line="1780"/>
                <declaration name="a" type="int" line="1781"/>
                <scope line="1782">
                    <declaration name="comparison" type="int" line="1783"/>
                    <scope line="1784"/>
                    <scope line="1788"/>
                </scope>
                <declaration name="s" type="int" line="1795"/>
            </method>
            <javadoc line="1803">
                Sorts the specified sub-array of chars into ascending order.                
            </javadoc>
            <method name="quickSort1" type="void" line="1806">
                <params>
                    <param name="x" type="Object"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="comp" type="Comparator"/>
                </params>
                <scope line="1807"/>
                <declaration name="m" type="int" line="1811"/>
                <scope line="1812">
                    <declaration name="l" type="int" line="1813"/>
                    <declaration name="n" type="int" line="1814"/>
                    <scope line="1815">
                        <declaration name="s" type="int" line="1816"/>
                    </scope>
                </scope>
                <declaration name="v" type="Object" line="1823"/>
                <declaration name="a" type="int" line="1824"/>
                <scope line="1825">
                    <declaration name="comparison" type="int" line="1826"/>
                    <scope line="1827"/>
                    <scope line="1831"/>
                </scope>
                <declaration name="s" type="int" line="1838"/>
            </method>
            <javadoc line="1846">
                Sorts the specified sub-array of chars into ascending order.                
            </javadoc>
            <method name="quickSort1" type="void" line="1849">
                <params>
                    <param name="x" type="short"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="comp" type="ShortComparator"/>
                </params>
                <scope line="1850"/>
                <declaration name="m" type="int" line="1854"/>
                <scope line="1855">
                    <declaration name="l" type="int" line="1856"/>
                    <declaration name="n" type="int" line="1857"/>
                    <scope line="1858">
                        <declaration name="s" type="int" line="1859"/>
                    </scope>
                </scope>
                <declaration name="v" type="short" line="1866"/>
                <declaration name="a" type="int" line="1867"/>
                <scope line="1868">
                    <declaration name="comparison" type="int" line="1869"/>
                    <scope line="1870"/>
                    <scope line="1874"/>
                </scope>
                <declaration name="s" type="int" line="1881"/>
            </method>
            <javadoc line="1889">
                Check that fromIndex and toIndex are in range, and throw an
                  appropriate exception if they aren&apos;t.                
            </javadoc>
            <method name="rangeCheck" type="void" line="1893">
                <params>
                    <param name="arrayLen" type="int"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1898">
                Swaps x[a] with x[b].                
            </javadoc>
            <method name="swap" type="void" line="1901">
                <params>
                    <param name="x" type="byte"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="t" type="byte" line="1902"/>
            </method>
            <javadoc line="1906">
                Swaps x[a] with x[b].                
            </javadoc>
            <method name="swap" type="void" line="1909">
                <params>
                    <param name="x" type="char"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="t" type="char" line="1910"/>
            </method>
            <javadoc line="1914">
                Swaps x[a] with x[b].                
            </javadoc>
            <method name="swap" type="void" line="1917">
                <params>
                    <param name="x" type="double"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="t" type="double" line="1918"/>
            </method>
            <javadoc line="1922">
                Swaps x[a] with x[b].                
            </javadoc>
            <method name="swap" type="void" line="1925">
                <params>
                    <param name="x" type="float"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="t" type="float" line="1926"/>
            </method>
            <javadoc line="1930">
                Swaps x[a] with x[b].                
            </javadoc>
            <method name="swap" type="void" line="1933">
                <params>
                    <param name="x" type="int"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="t" type="int" line="1934"/>
            </method>
            <javadoc line="1938">
                Swaps x[a] with x[b].                
            </javadoc>
            <method name="swap" type="void" line="1941">
                <params>
                    <param name="x" type="long"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="t" type="long" line="1942"/>
            </method>
            <javadoc line="1946">
                Swaps x[a] with x[b].                
            </javadoc>
            <method name="swap" type="void" line="1949">
                <params>
                    <param name="x" type="Object"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="t" type="Object" line="1950"/>
            </method>
            <javadoc line="1954">
                Swaps x[a] with x[b].                
            </javadoc>
            <method name="swap" type="void" line="1957">
                <params>
                    <param name="x" type="short"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="t" type="short" line="1958"/>
            </method>
            <javadoc line="1962">
                Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)].                
            </javadoc>
            <method name="vecswap" type="void" line="1965">
                <params>
                    <param name="x" type="byte"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="1968">
                Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)].                
            </javadoc>
            <method name="vecswap" type="void" line="1971">
                <params>
                    <param name="x" type="char"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="1974">
                Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)].                
            </javadoc>
            <method name="vecswap" type="void" line="1977">
                <params>
                    <param name="x" type="double"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="1980">
                Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)].                
            </javadoc>
            <method name="vecswap" type="void" line="1983">
                <params>
                    <param name="x" type="float"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="1986">
                Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)].                
            </javadoc>
            <method name="vecswap" type="void" line="1989">
                <params>
                    <param name="x" type="int"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="1992">
                Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)].                
            </javadoc>
            <method name="vecswap" type="void" line="1995">
                <params>
                    <param name="x" type="long"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="1998">
                Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)].                
            </javadoc>
            <method name="vecswap" type="void" line="2001">
                <params>
                    <param name="x" type="Object"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="2004">
                Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)].                
            </javadoc>
            <method name="vecswap" type="void" line="2007">
                <params>
                    <param name="x" type="short"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
        </class>
    </source>