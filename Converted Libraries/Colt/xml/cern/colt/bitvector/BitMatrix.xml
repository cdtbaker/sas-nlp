<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.bitvector">
        <import package="java.awt.Rectangle"/>
        <class name="BitMatrix" line="3">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="3">
                Fixed sized (non resizable) nm bit matrix.
                  A bit matrix has a number of columns and rows, which are assigned upon instance construction - The matrix&apos;s size is then &lt;tt&gt;columns()rows()&lt;/tt&gt;.
                  Bits are accessed via &lt;tt&gt;(column,row)&lt;/tt&gt; coordinates.
                  &lt;p&gt;
                  Individual bits can be examined, set, or cleared.
                  Rectangular parts (boxes) can quickly be extracted, copied and replaced.
                  Quick iteration over boxes is provided by optimized internal iterators (&lt;tt&gt;forEach()&lt;/tt&gt; methods).
                  One &lt;code&gt;BitMatrix&lt;/code&gt; may be used to modify the contents of another 
                  &lt;code&gt;BitMatrix&lt;/code&gt; through logical AND, OR, XOR and other similar operations.
                  &lt;p&gt;
                  Legal coordinates range from &lt;tt&gt;[0,0]&lt;/tt&gt; to &lt;tt&gt;[columns()-1,rows()-1]&lt;/tt&gt;.
                  Any attempt to access a bit at a coordinate &lt;tt&gt;column&amp;lt;0 || column&amp;gt;=columns() || row&amp;lt;0 || row&amp;gt;=rows()&lt;/tt&gt; will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.
                  Operations involving two bit matrices (like AND, OR, XOR, etc.) will throw an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; if both bit matrices do not have the same number of columns and rows.
                  &lt;p&gt;
                  If you need extremely quick access to individual bits: Although getting and setting individual bits with methods &lt;tt&gt;get(...)&lt;/tt&gt; and &lt;tt&gt;put(...)&lt;/tt&gt; is quick, it is even quicker (&lt;b&gt;but not safe&lt;/b&gt;) to use &lt;tt&gt;getQuick(...)&lt;/tt&gt; and &lt;tt&gt;putQuick(...)&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt; that this implementation is not synchronized.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
                <see>
                    BitVector                    
                </see>
                <see>
                    QuickBitVector                    
                </see>
                <see>
                    java.util.BitSet                    
                </see>
            </javadoc>
            <declaration name="columns" type="int" line="28"/>
            <declaration name="rows" type="int" line="29"/>
            <declaration name="bits" type="long" line="30"/>
            <javadoc line="31">
                Constructs a bit matrix with a given number of columns and rows. All bits are initially &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>columns &lt; 0 || rows &lt; 0</tt>.                    
                </throws>
            </javadoc>
            <method name="BitMatrix" type="constructor" line="37">
                <params>
                    <param name="columns" type="int"/>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <javadoc line="40">
                Performs a logical &lt;b&gt;AND&lt;/b&gt; of the receiver with another bit matrix.
                  The receiver is modified so that a bit in it has the
                  value &lt;code&gt;true&lt;/code&gt; if and only if it already had the 
                  value &lt;code&gt;true&lt;/code&gt; and the corresponding bit in the other bit matrix
                  argument has the value &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    other   a bit matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>columns() != other.columns() || rows() != other.rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="and" type="void" line="49">
                <params>
                    <param name="other" type="BitMatrix"/>
                </params>
            </method>
            <javadoc line="53">
                Clears all of the bits in receiver whose corresponding
                  bit is set in the other bit matrix.
                  In other words, determines the difference (A\B) between two bit matrices.                
                <param>
                    other   a bit matrix with which to mask the receiver.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>columns() != other.columns() || rows() != other.rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="andNot" type="void" line="60">
                <params>
                    <param name="other" type="BitMatrix"/>
                </params>
            </method>
            <javadoc line="64">
                Returns the number of bits currently in the &lt;tt&gt;true&lt;/tt&gt; state.
                  Optimized for speed. Particularly quick if the receiver is either sparse or dense.                
            </javadoc>
            <method name="cardinality" type="int" line="68"/>
            <javadoc line="71">
                Sanity check for operations requiring matrices with the same number of columns and rows.                
            </javadoc>
            <method name="checkDimensionCompatibility" type="void" line="74">
                <params>
                    <param name="other" type="BitMatrix"/>
                </params>
            </method>
            <javadoc line="77">
                Clears all bits of the receiver.                
            </javadoc>
            <method name="clear" type="void" line="80"/>
            <javadoc line="83">
                Cloning this &lt;code&gt;BitMatrix&lt;/code&gt; produces a new &lt;code&gt;BitMatrix&lt;/code&gt; 
                  that is equal to it.
                  The clone of the bit matrix is another bit matrix that has exactly the 
                  same bits set to &lt;code&gt;true&lt;/code&gt; as this bit matrix and the same 
                  number of columns and rows.                
                <return>
                    a clone of this bit matrix.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="91">
                <declaration name="clone" type="BitMatrix" line="92"/>
            </method>
            <javadoc line="96">
                Returns the number of columns of the receiver.                
            </javadoc>
            <method name="columns" type="int" line="99"/>
            <javadoc line="102">
                Checks whether the receiver contains the given box.                
            </javadoc>
            <method name="containsBox" type="void" line="105">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="108">
                Returns a shallow clone of the receiver; calls &lt;code&gt;clone()&lt;/code&gt; and casts the result.                
                <return>
                    a shallow clone of the receiver.                    
                </return>
            </javadoc>
            <method name="copy" type="BitMatrix" line="112"/>
            <method name="elements" type="long[]" line="115"/>
            <javadoc line="118">
                You normally need not use this method. Use this method only if performance is critical. 
                  Sets the bit matrix&apos;s backing bits, columns and rows.
                  &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                  So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <throws>
                    IllegalArgumentException if <tt>columns &lt; 0 || rows &lt; 0 || columnsrows &gt; bits.length64</tt>                    
                </throws>
            </javadoc>
            <method name="elements" type="void" line="125">
                <params>
                    <param name="bits" type="long[]"/>
                    <param name="columns" type="int"/>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <javadoc line="131">
                Compares this object against the specified object.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is 
                  not &lt;code&gt;null&lt;/code&gt; and is a &lt;code&gt;BitMatrix&lt;/code&gt; object
                  that has the same number of columns and rows as the receiver and 
                  that has exactly the same bits set to &lt;code&gt;true&lt;/code&gt; as the receiver.                
                <param>
                    obj   the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="141">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="other" type="BitMatrix" line="144"/>
            </method>
            <javadoc line="148">
                Applies a procedure to each coordinate that holds a bit in the given state.
                  Iterates rowwise downwards from [columns()-1,rows()-1] to [0,0].
                  Useful, for example, if you want to copy bits into an image or somewhere else.
                  Optimized for speed. Particularly quick if one of the following conditions holds
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;state==true&lt;/tt&gt; and the receiver is sparse (&lt;tt&gt;cardinality()&lt;/tt&gt; is small compared to &lt;tt&gt;size()&lt;/tt&gt;).
                  &lt;li&gt;&lt;tt&gt;state==false&lt;/tt&gt; and the receiver is dense (&lt;tt&gt;cardinality()&lt;/tt&gt; is large compared to &lt;tt&gt;size()&lt;/tt&gt;).
                  &lt;/ul&gt;                
                <param>
                    state element to search for.                    
                </param>
                <param>
                    procedure a procedure object taking as first argument the current column and as second argument the current row. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="forEachCoordinateInState" type="boolean" line="161">
                <params>
                    <param name="state" type="boolean"/>
                    <param name="procedure" type="cern.colt.function.IntIntProcedure"/>
                </params>
                <declaration name="vector" type="BitVector" line="163"/>
                <declaration name="theBits" type="long[]" line="164"/>
                <declaration name="column" type="int" line="165"/>
                <declaration name="row" type="int" line="166"/>
                <declaration name="val" type="long" line="167"/>
                <scope line="168">
                    <declaration name="mask" type="long" line="169"/>
                    <scope line="170"/>
                    <scope line="173"/>
                </scope>
                <declaration name="bitsPerUnit" type="int" line="178"/>
                <declaration name="comparator" type="long" line="179"/>
                <scope line="182">
                    <scope line="184">
                        <scope line="185">
                            <scope line="186">
                                <scope line="187"/>
                                <scope line="190"/>
                            </scope>
                        </scope>
                        <scope line="196">
                            <scope line="197">
                                <scope line="198"/>
                                <scope line="201"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="208">
                        <scope line="210">
                            <scope line="212">
                                <scope line="213"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="223">
                Returns from the receiver the value of the bit at the specified coordinate.
                  The value is &lt;tt&gt;true&lt;/tt&gt; if this bit is currently set; otherwise, returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <return>
                    the value of the bit at the specified coordinate.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <tt>column&lt;0 || column&gt;=columns() || row&lt;0 || row&gt;=rows()</tt>                    
                </throws>
            </javadoc>
            <method name="get" type="boolean" line="231">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="235">
                Returns from the receiver the value of the bit at the specified coordinate; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions.
                  The value is &lt;tt&gt;true&lt;/tt&gt; if this bit is currently set; otherwise, returns &lt;tt&gt;false&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid values without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;column&amp;gt;=0 &amp;&amp; column&amp;lt;columns() &amp;&amp; row&amp;gt;=0 &amp;&amp; row&amp;lt;rows()&lt;/tt&gt;.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <return>
                    the value of the bit at the specified coordinate.                    
                </return>
            </javadoc>
            <method name="getQuick" type="boolean" line="245">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="248">
                Returns a hash code value for the receiver.                
            </javadoc>
            <method name="hashCode" type="int" line="251"/>
            <javadoc line="254">
                Performs a logical &lt;b&gt;NOT&lt;/b&gt; on the bits of the receiver.                
            </javadoc>
            <method name="not" type="void" line="257"/>
            <javadoc line="260">
                Performs a logical &lt;b&gt;OR&lt;/b&gt; of the receiver with another bit matrix.
                  The receiver is modified so that a bit in it has the
                  value &lt;code&gt;true&lt;/code&gt; if and only if it either already had the 
                  value &lt;code&gt;true&lt;/code&gt; or the corresponding bit in the other bit matrix
                  argument has the value &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    other   a bit matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>columns() != other.columns() || rows() != other.rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="or" type="void" line="269">
                <params>
                    <param name="other" type="BitMatrix"/>
                </params>
            </method>
            <javadoc line="273">
                Constructs and returns a new matrix with &lt;tt&gt;width&lt;/tt&gt; columns and &lt;tt&gt;height&lt;/tt&gt; rows which is a copy of the contents of the given box.
                  The box ranges from &lt;tt&gt;[column,row]&lt;/tt&gt; to &lt;tt&gt;[column+width-1,row+height-1]&lt;/tt&gt;, all inclusive.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    width   the width of the box.                    
                </param>
                <param>
                    height   the height of the box.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>column&lt;0 || column+width&gt;columns() || row&lt;0 || row+height&gt;rows()</tt>                    
                </throws>
            </javadoc>
            <method name="part" type="BitMatrix" line="282">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="subMatrix" type="BitMatrix" line="285"/>
            </method>
            <javadoc line="289">
                Sets the bit at the specified coordinate to the state specified by &lt;tt&gt;value&lt;/tt&gt;.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    value the value of the bit to be copied into the specified coordinate.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>column&lt;0 || column&gt;=columns() || row&lt;0 || row&gt;=rows()</tt>                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="296">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="300">
                Sets the bit at the specified coordinate to the state specified by &lt;tt&gt;value&lt;/tt&gt;; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid values without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;column&amp;gt;=0 &amp;&amp; column&amp;lt;columns() &amp;&amp; row&amp;gt;=0 &amp;&amp; row&amp;lt;rows()&lt;/tt&gt;.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    value the value of the bit to be copied into the specified coordinate.                    
                </param>
            </javadoc>
            <method name="putQuick" type="void" line="309">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="312">
                Replaces a box of the receiver with the contents of another matrix&apos;s box.
                  The source box ranges from &lt;tt&gt;[sourceColumn,sourceRow]&lt;/tt&gt; to &lt;tt&gt;[sourceColumn+width-1,sourceRow+height-1]&lt;/tt&gt;, all inclusive.
                  The destination box ranges from &lt;tt&gt;[column,row]&lt;/tt&gt; to &lt;tt&gt;[column+width-1,row+height-1]&lt;/tt&gt;, all inclusive.
                  Does nothing if &lt;tt&gt;width &amp;lt;= 0 || height &amp;lt;= 0&lt;/tt&gt;.
                  If &lt;tt&gt;source==this&lt;/tt&gt; and the source and destination box intersect in an ambiguous way, then replaces as if using an intermediate auxiliary copy of the receiver.                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    width   the width of the box.                    
                </param>
                <param>
                    height   the height of the box.                    
                </param>
                <param>
                    source   the source matrix to copy from(may be identical to the receiver).                    
                </param>
                <param>
                    sourceColumn   the index of the source column-coordinate.                    
                </param>
                <param>
                    sourceRow   the index of the source row-coordinate.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>column&lt;0 || column+width&gt;columns() || row&lt;0 || row+height&gt;rows()</tt>                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if <tt>sourceColumn&lt;0 || sourceColumn+width&gt;source.columns() || sourceRow&lt;0 || sourceRow+height&gt;source.rows()</tt>                    
                </throws>
            </javadoc>
            <method name="replaceBoxWith" type="void" line="328">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="source" type="BitMatrix"/>
                    <param name="sourceColumn" type="int"/>
                    <param name="sourceRow" type="int"/>
                </params>
                <scope line="332">
                    <declaration name="destRect" type="Rectangle" line="333"/>
                    <declaration name="sourceRect" type="Rectangle" line="334"/>
                    <scope line="335"/>
                </scope>
                <declaration name="sourceVector" type="BitVector" line="339"/>
                <declaration name="destVector" type="BitVector" line="340"/>
                <declaration name="sourceColumns" type="int" line="341"/>
                <scope line="342">
                    <declaration name="offset" type="int" line="343"/>
                    <declaration name="sourceOffset" type="int" line="344"/>
                </scope>
            </method>
            <javadoc line="348">
                Sets the bits in the given box to the state specified by &lt;tt&gt;value&lt;/tt&gt;.
                  The box ranges from &lt;tt&gt;[column,row]&lt;/tt&gt; to &lt;tt&gt;[column+width-1,row+height-1]&lt;/tt&gt;, all inclusive.
                  (Does nothing if &lt;tt&gt;width &amp;lt;= 0 || height &amp;lt;= 0&lt;/tt&gt;).                
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    width   the width of the box.                    
                </param>
                <param>
                    height   the height of the box.                    
                </param>
                <param>
                    value the value of the bit to be copied into the bits of the specified box.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>column&lt;0 || column+width&gt;columns() || row&lt;0 || row+height&gt;rows()</tt>                    
                </throws>
            </javadoc>
            <method name="replaceBoxWith" type="void" line="359">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="value" type="boolean"/>
                </params>
                <declaration name="destVector" type="BitVector" line="362"/>
                <scope line="363">
                    <declaration name="offset" type="int" line="364"/>
                </scope>
            </method>
            <javadoc line="368">
                Returns the number of rows of the receiver.                
            </javadoc>
            <method name="rows" type="int" line="371"/>
            <javadoc line="374">
                Returns the size of the receiver which is &lt;tt&gt;columns()rows()&lt;/tt&gt;.                
            </javadoc>
            <method name="size" type="int" line="377"/>
            <javadoc line="380">
                Converts the receiver to a bitvector. 
                  In many cases this method only makes sense on one-dimensional matrices.
                  &lt;b&gt;WARNING:&lt;/b&gt; The returned bitvector and the receiver share the &lt;b&gt;same&lt;/b&gt; backing bits.
                  Modifying either of them will affect the other.
                  If this behaviour is not what you want, you should first use &lt;tt&gt;copy()&lt;/tt&gt; to make sure both objects use separate internal storage.                
            </javadoc>
            <method name="toBitVector" type="BitVector" line="387"/>
            <javadoc line="390">
                Returns a (very crude) string representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="393"/>
            <javadoc line="396">
                Performs a logical &lt;b&gt;XOR&lt;/b&gt; of the receiver with another bit matrix.
                  The receiver is modified so that a bit in it has the
                  value &lt;code&gt;true&lt;/code&gt; if and only if one of the following statements holds:
                  &lt;ul&gt;
                  &lt;li&gt;The bit initially has the value &lt;code&gt;true&lt;/code&gt;, and the 
                  corresponding bit in the argument has the value &lt;code&gt;false&lt;/code&gt;.
                  &lt;li&gt;The bit initially has the value &lt;code&gt;false&lt;/code&gt;, and the 
                  corresponding bit in the argument has the value &lt;code&gt;true&lt;/code&gt;. 
                  &lt;/ul&gt;                
                <param>
                    other   a bit matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>columns() != other.columns() || rows() != other.rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="xor" type="void" line="409">
                <params>
                    <param name="other" type="BitMatrix"/>
                </params>
            </method>
        </class>
    </source>