<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix">
        <import package="cern.colt.matrix.impl.DenseObjectMatrix1D"/>
        <import package="cern.colt.matrix.impl.SparseObjectMatrix1D"/>
        <class name="ObjectFactory1D" line="13">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="13">
                Factory for convenient construction of 1-d matrices holding &lt;tt&gt;Object&lt;/tt&gt; cells.
                  Use idioms like &lt;tt&gt;ObjectFactory1D.dense.make(1000)&lt;/tt&gt; to construct dense matrices, 
                  &lt;tt&gt;ObjectFactory1D.sparse.make(1000)&lt;/tt&gt; to construct sparse matrices.
                  If the factory is used frequently it might be useful to streamline the notation. 
                  For example by aliasing:
                  &lt;table&gt;
                  &lt;td class=&quot;PRE&quot;&gt; 
                  &lt;pre&gt;
                  ObjectFactory1D F = ObjectFactory1D.dense;
                  F.make(1000);
                  ...
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;/table&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="dense" type="ObjectFactory1D" line="34"/>
            <javadoc line="34">
                A factory producing dense matrices.                
            </javadoc>
            <declaration name="sparse" type="ObjectFactory1D" line="39"/>
            <javadoc line="39">
                A factory producing sparse matrices.                
            </javadoc>
            <javadoc line="43">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="ObjectFactory1D" type="constructor" line="46"/>
            <javadoc line="47">
                C = A||B; Constructs a new matrix which is the concatenation of two other matrices.
                  Example: &lt;tt&gt;0 1&lt;/tt&gt; append &lt;tt&gt;3 4&lt;/tt&gt; --&gt; &lt;tt&gt;0 1 3 4&lt;/tt&gt;.                
            </javadoc>
            <method name="append" type="ObjectMatrix1D" line="51">
                <params>
                    <param name="A" type="ObjectMatrix1D"/>
                    <param name="B" type="ObjectMatrix1D"/>
                </params>
                <comment line="52">
                    concatenate                    
                </comment>
                <declaration name="matrix" type="ObjectMatrix1D" line="53"/>
            </method>
            <javadoc line="58">
                Constructs a matrix which is the concatenation of all given parts.
                  Cells are copied.                
            </javadoc>
            <method name="make" type="ObjectMatrix1D" line="62">
                <params>
                    <param name="parts" type="ObjectMatrix1D[]"/>
                </params>
                <declaration name="size" type="int" line="65"/>
                <declaration name="vector" type="ObjectMatrix1D" line="68"/>
                <scope line="70"/>
            </method>
            <javadoc line="77">
                Constructs a matrix with the given cell values.
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values The values to be filled into the new matrix.                    
                </param>
            </javadoc>
            <method name="make" type="ObjectMatrix1D" line="83">
                <params>
                    <param name="values" type="Object[]"/>
                </params>
            </method>
            <javadoc line="87">
                Constructs a matrix with the given shape, each cell initialized with zero.                
            </javadoc>
            <method name="make" type="ObjectMatrix1D" line="90">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="94">
                Constructs a matrix with the given shape, each cell initialized with the given value.                
            </javadoc>
            <method name="make" type="ObjectMatrix1D" line="97">
                <params>
                    <param name="size" type="int"/>
                    <param name="initialValue" type="Object"/>
                </params>
            </method>
            <javadoc line="100">
                Constructs a matrix from the values of the given list.
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values The values to be filled into the new matrix.                    
                </param>
                <return>
                    a new matrix.                    
                </return>
            </javadoc>
            <method name="make" type="ObjectMatrix1D" line="107">
                <params>
                    <param name="values" type="cern.colt.list.ObjectArrayList"/>
                </params>
                <declaration name="size" type="int" line="108"/>
                <declaration name="vector" type="ObjectMatrix1D" line="109"/>
            </method>
            <javadoc line="113">
                C = A||A||..||A; Constructs a new matrix which is concatenated &lt;tt&gt;repeat&lt;/tt&gt; times.
                  Example:
                  &lt;pre&gt;
                  0 1
                  repeat(3) --&gt;
                  0 1 0 1 0 1
                  &lt;/pre&gt;                
            </javadoc>
            <method name="repeat" type="ObjectMatrix1D" line="122">
                <params>
                    <param name="A" type="ObjectMatrix1D"/>
                    <param name="repeat" type="int"/>
                </params>
                <declaration name="size" type="int" line="123"/>
                <declaration name="matrix" type="ObjectMatrix1D" line="124"/>
                <scope line="125"/>
            </method>
            <javadoc line="130">
                Constructs a list from the given matrix.
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the list, and vice-versa.                
                <param>
                    values The values to be filled into the new list.                    
                </param>
                <return>
                    a new list.                    
                </return>
            </javadoc>
            <method name="toList" type="cern.colt.list.ObjectArrayList" line="137">
                <params>
                    <param name="values" type="ObjectMatrix1D"/>
                </params>
                <declaration name="size" type="int" line="138"/>
                <declaration name="list" type="cern.colt.list.ObjectArrayList" line="139"/>
            </method>
        </class>
    </source>