<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix">
        <import package="cern.colt.matrix.impl.DenseDoubleMatrix2D"/>
        <import package="cern.colt.matrix.impl.RCDoubleMatrix2D"/>
        <import package="cern.colt.matrix.impl.SparseDoubleMatrix2D"/>
        <class name="DoubleFactory2D" line="5">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="5">
                Factory for convenient construction of 2-d matrices holding &lt;tt&gt;double&lt;/tt&gt; 
                  cells. Also provides convenient methods to compose (concatenate) and decompose 
                  (split) matrices from/to constituent blocks. &lt;/p&gt;
                  &lt;p&gt;&amp;nbsp; &lt;/p&gt;
                  &lt;table border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt;Construction&lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use idioms like &lt;tt&gt;DoubleFactory2D.dense.make(4,4)&lt;/tt&gt; to construct 
                  dense matrices, &lt;tt&gt;DoubleFactory2D.sparse.make(4,4)&lt;/tt&gt; to construct sparse 
                  matrices.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt; Construction with initial values &lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use other &lt;tt&gt;make&lt;/tt&gt; methods to construct matrices with given initial 
                  values. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt; Appending rows and columns &lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use methods {@link #appendColumns(DoubleMatrix2D,DoubleMatrix2D) appendColumns}, {@link #appendColumns(DoubleMatrix2D,DoubleMatrix2D) appendRows} and {@link #repeat(DoubleMatrix2D,int,int) repeat} to append rows and columns. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt; General block matrices &lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use methods {@link #compose(DoubleMatrix2D[][]) compose} and {@link #decompose(DoubleMatrix2D[][],DoubleMatrix2D) 
                  decompose} to work with general block matrices. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt; Diagonal matrices &lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use methods {@link #diagonal(DoubleMatrix1D) diagonal(vector)}, {@link #diagonal(DoubleMatrix2D) diagonal(matrix)} and {@link #identity(int) identity} 
                  to work with diagonal matrices. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt; Diagonal block matrices &lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use method {@link #composeDiagonal(DoubleMatrix2D,DoubleMatrix2D,DoubleMatrix2D) 
                  composeDiagonal} to work with diagonal block matrices. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt;Random&lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use methods {@link #random(int,int) random} and {@link #sample(int,int,double,double) 
                  sample} to construct random matrices. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;&amp;nbsp;&lt;/p&gt;
                  &lt;p&gt;If the factory is used frequently it might be useful to streamline the notation. 
                  For example by aliasing: &lt;/p&gt;
                  &lt;table&gt;
                  &lt;td class=&quot;PRE&quot;&gt; 
                  &lt;pre&gt;
                  DoubleFactory2D F = DoubleFactory2D.dense;
                  F.make(4,4);
                  F.descending(10,20);
                  F.random(4,4);
                  ...
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;/table&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="dense" type="DoubleFactory2D" line="65"/>
            <javadoc line="65">
                A factory producing dense matrices.                
            </javadoc>
            <declaration name="sparse" type="DoubleFactory2D" line="69"/>
            <javadoc line="69">
                A factory producing sparse hash matrices.                
            </javadoc>
            <declaration name="rowCompressed" type="DoubleFactory2D" line="73"/>
            <javadoc line="73">
                A factory producing sparse row compressed matrices.                
            </javadoc>
            <javadoc line="77">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="DoubleFactory2D" type="constructor" line="80"/>
            <javadoc line="82">
                C = A||B; Constructs a new matrix which is the column-wise concatenation of two other matrices.
                  &lt;pre&gt;
                  0 1 2
                  3 4 5
                  appendColumns
                  6 7
                  8 9
                  --&gt;
                  0 1 2 6 7 
                  3 4 5 8 9
                  &lt;/pre&gt;                
            </javadoc>
            <method name="appendColumns" type="DoubleMatrix2D" line="95">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <declaration name="ac" type="int" line="98"/>
                <declaration name="bc" type="int" line="99"/>
                <declaration name="r" type="int" line="100"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="101"/>
            </method>
            <javadoc line="106">
                C = A||B; Constructs a new matrix which is the row-wise concatenation of two other matrices.
                  &lt;pre&gt;
                  0 1 
                  2 3 
                  4 5
                  appendRows
                  6 7
                  8 9
                  --&gt;
                  0 1 
                  2 3 
                  4 5
                  6 7
                  8 9
                  &lt;/pre&gt;                
            </javadoc>
            <method name="appendRows" type="DoubleMatrix2D" line="123">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <declaration name="ar" type="int" line="126"/>
                <declaration name="br" type="int" line="127"/>
                <declaration name="c" type="int" line="128"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="129"/>
            </method>
            <javadoc line="134">
                Constructs a matrix with cells having ascending values.
                  For debugging purposes.
                  Example:
                  &lt;pre&gt;
                  0 1 2 
                  3 4 5
                  &lt;/pre&gt;                
            </javadoc>
            <method name="ascending" type="DoubleMatrix2D" line="143">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="F" type="cern.jet.math.Functions" line="144"/>
            </method>
            <javadoc line="147">
                Checks whether the given array is rectangular, that is, whether all rows have the same number of columns.                
                <throws>
                    IllegalArgumentException if the array is not rectangular.                    
                </throws>
            </javadoc>
            <method name="checkRectangularShape" type="void" line="151">
                <params>
                    <param name="array" type="double[][]"/>
                </params>
                <declaration name="columns" type="int" line="152"/>
                <scope line="153">
                    <scope line="154"/>
                </scope>
            </method>
            <javadoc line="160">
                Checks whether the given array is rectangular, that is, whether all rows have the same number of columns.                
                <throws>
                    IllegalArgumentException if the array is not rectangular.                    
                </throws>
            </javadoc>
            <method name="checkRectangularShape" type="void" line="164">
                <params>
                    <param name="array" type="DoubleMatrix2D[][]"/>
                </params>
                <declaration name="columns" type="int" line="165"/>
                <scope line="166">
                    <scope line="167"/>
                </scope>
            </method>
            <javadoc line="173">
                Constructs a block matrix made from the given parts.
                  The inverse to method {@link #decompose(DoubleMatrix2D[][],DoubleMatrix2D)}.
                  &lt;p&gt;
                  All matrices of a given column within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of columns.
                  All matrices of a given row within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of rows.
                  Otherwise an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; is thrown. 
                  Note that &lt;tt&gt;null&lt;/tt&gt;s within &lt;tt&gt;parts[row,col]&lt;/tt&gt; are an exception to this rule: they are ignored.
                  Cells are copied.
                  Example:
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;Code&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;Result&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt; 
                  &lt;pre&gt;
                  DoubleMatrix2D[][] parts1 = 
                  {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,2,1), null        },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ make(4,4,2), null,        make(4,3,3) },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,2,4), null        }
                  };
                  System.out.println(compose(parts1));
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;8&amp;nbsp;x&amp;nbsp;9&amp;nbsp;matrix&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;4&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;4&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt; 
                  &lt;pre&gt;
                  DoubleMatrix2D[][] parts3 = 
                  {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ identity(3),               null,                        },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,                      identity(3).viewColumnFlip() },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ identity(3).viewRowFlip(), null                         }
                  };
                  System.out.println(&quot;\n&quot;+make(parts3));
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;9&amp;nbsp;x&amp;nbsp;6&amp;nbsp;matrix&lt;br&gt;
                  1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0 &lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt; 
                  &lt;pre&gt;
                  DoubleMatrix2D A = ascending(2,2);
                  DoubleMatrix2D B = descending(2,2);
                  DoubleMatrix2D _ = null;
                  DoubleMatrix2D[][] parts4 = 
                  {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ A, _, A, _ },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ _, A, _, B }
                  };
                  System.out.println(&quot;\n&quot;+make(parts4));
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;8&amp;nbsp;matrix&lt;br&gt;
                  1&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  3&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;2&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0 &lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt; 
                  &lt;pre&gt;
                  DoubleMatrix2D[][] parts2 = 
                  {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,2,1), null        },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ make(4,4,2), null,        make(4,3,3) },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,3,4), null        }
                  };
                  System.out.println(&quot;\n&quot;+Factory2D.make(parts2));
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;IllegalArgumentException&lt;br&gt;
                  A[0,1].cols != A[2,1].cols&lt;br&gt;
                  (2 != 3)&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <throws>
                    IllegalArgumentException subject to the conditions outlined above.                    
                </throws>
            </javadoc>
            <method name="compose" type="DoubleMatrix2D" line="272">
                <params>
                    <param name="parts" type="DoubleMatrix2D[][]"/>
                </params>
                <declaration name="rows" type="int" line="274"/>
                <declaration name="columns" type="int" line="275"/>
                <declaration name="empty" type="DoubleMatrix2D" line="277"/>
                <declaration name="maxWidths" type="int[]" line="279"/>
                <scope line="280">
                    <declaration name="maxWidth" type="int" line="281"/>
                    <scope line="282">
                        <declaration name="part" type="DoubleMatrix2D" line="283"/>
                        <scope line="284">
                            <declaration name="width" type="int" line="285"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="maxHeights" type="int[]" line="292"/>
                <scope line="293">
                    <declaration name="maxHeight" type="int" line="294"/>
                    <scope line="295">
                        <declaration name="part" type="DoubleMatrix2D" line="296"/>
                        <scope line="297">
                            <declaration name="height" type="int" line="298"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="resultRows" type="int" line="305"/>
                <declaration name="resultCols" type="int" line="307"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="309"/>
                <declaration name="r" type="int" line="310"/>
                <scope line="311">
                    <declaration name="c" type="int" line="312"/>
                    <scope line="313">
                        <declaration name="part" type="DoubleMatrix2D" line="314"/>
                        <scope line="315"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="324">
                Constructs a diagonal block matrix from the given parts (the &lt;i&gt;direct sum&lt;/i&gt; of two matrices).
                  That is the concatenation
                  &lt;pre&gt;
                  A 0
                  0 B
                  &lt;/pre&gt;
                  (The direct sum has &lt;tt&gt;A.rows()+B.rows()&lt;/tt&gt; rows and &lt;tt&gt;A.columns()+B.columns()&lt;/tt&gt; columns).
                  Cells are copied.                
                <return>
                    a new matrix which is the direct sum.                    
                </return>
            </javadoc>
            <method name="composeDiagonal" type="DoubleMatrix2D" line="335">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <declaration name="ar" type="int" line="336"/>
                <declaration name="ac" type="int" line="337"/>
                <declaration name="br" type="int" line="338"/>
                <declaration name="bc" type="int" line="339"/>
                <declaration name="sum" type="DoubleMatrix2D" line="340"/>
            </method>
            <javadoc line="345">
                Constructs a diagonal block matrix from the given parts.
                  The concatenation has the form
                  &lt;pre&gt;
                  A 0 0
                  0 B 0
                  0 0 C
                  &lt;/pre&gt;
                  from the given parts.
                  Cells are copied.                
            </javadoc>
            <method name="composeDiagonal" type="DoubleMatrix2D" line="356">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                    <param name="C" type="DoubleMatrix2D"/>
                </params>
                <declaration name="diag" type="DoubleMatrix2D" line="357"/>
            </method>
            <javadoc line="363">
                Splits a block matrix into its constituent blocks; Copies blocks of a matrix into the given parts.
                  The inverse to method {@link #compose(DoubleMatrix2D[][])}.
                  &lt;p&gt;
                  All matrices of a given column within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of columns.
                  All matrices of a given row within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of rows.
                  Otherwise an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; is thrown. 
                  Note that &lt;tt&gt;null&lt;/tt&gt;s within &lt;tt&gt;parts[row,col]&lt;/tt&gt; are an exception to this rule: they are ignored.
                  Cells are copied.
                  Example:
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;Code&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;matrix&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;--&amp;gt; parts &lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt; 
                  &lt;pre&gt;
                  DoubleMatrix2D matrix = ... ;
                  DoubleMatrix2D _ = null;
                  DoubleMatrix2D A,B,C,D;
                  A = make(2,2); B = make (4,4);
                  C = make(4,3); D = make (2,2);
                  DoubleMatrix2D[][] parts = 
                  {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ _, A, _ },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ B, _, C },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ _, D, _ }
                  };
                  decompose(parts,matrix);
                  System.out.println(&amp;quot;\nA = &amp;quot;+A);
                  System.out.println(&amp;quot;\nB = &amp;quot;+B);
                  System.out.println(&amp;quot;\nC = &amp;quot;+C);
                  System.out.println(&amp;quot;\nD = &amp;quot;+D);
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;8&amp;nbsp;x&amp;nbsp;9&amp;nbsp;matrix&lt;br&gt;
                  9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;1&amp;nbsp;1&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;br&gt;
                  9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;1&amp;nbsp;1&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;4&amp;nbsp;4&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;br&gt;
                  9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;4&amp;nbsp;4&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; 
                  &lt;p&gt;&lt;tt&gt;A = 2&amp;nbsp;x&amp;nbsp;2&amp;nbsp;matrix&lt;br&gt;
                  1&amp;nbsp;1&lt;br&gt;
                  1&amp;nbsp;1&lt;/tt&gt;&lt;/p&gt;
                  &lt;p&gt;&lt;tt&gt;B = 4&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;/tt&gt;&lt;/p&gt;
                  &lt;p&gt;&lt;tt&gt;C = 4&amp;nbsp;x&amp;nbsp;3&amp;nbsp;matrix&lt;br&gt;
                  3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  &lt;/tt&gt;&lt;tt&gt;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  &lt;/tt&gt;&lt;tt&gt;3&amp;nbsp;3&amp;nbsp;3&lt;/tt&gt;&lt;/p&gt;
                  &lt;p&gt;&lt;tt&gt;D = 2&amp;nbsp;x&amp;nbsp;2&amp;nbsp;matrix&lt;br&gt;
                  4&amp;nbsp;4&lt;br&gt;
                  4&amp;nbsp;4&lt;/tt&gt;&lt;/p&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <throws>
                    IllegalArgumentException subject to the conditions outlined above.                    
                </throws>
            </javadoc>
            <method name="decompose" type="void" line="431">
                <params>
                    <param name="parts" type="DoubleMatrix2D[][]"/>
                    <param name="matrix" type="DoubleMatrix2D"/>
                </params>
                <declaration name="rows" type="int" line="433"/>
                <declaration name="columns" type="int" line="434"/>
                <declaration name="maxWidths" type="int[]" line="437"/>
                <scope line="438">
                    <declaration name="maxWidth" type="int" line="439"/>
                    <scope line="440">
                        <declaration name="part" type="DoubleMatrix2D" line="441"/>
                        <scope line="442">
                            <declaration name="width" type="int" line="443"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="maxHeights" type="int[]" line="450"/>
                <scope line="451">
                    <declaration name="maxHeight" type="int" line="452"/>
                    <scope line="453">
                        <declaration name="part" type="DoubleMatrix2D" line="454"/>
                        <scope line="455">
                            <declaration name="height" type="int" line="456"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="resultRows" type="int" line="463"/>
                <declaration name="resultCols" type="int" line="465"/>
                <declaration name="r" type="int" line="468"/>
                <scope line="469">
                    <declaration name="c" type="int" line="470"/>
                    <scope line="471">
                        <declaration name="part" type="DoubleMatrix2D" line="472"/>
                        <scope line="473"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="481">
                Demonstrates usage of this class.                
            </javadoc>
            <method name="demo1" type="void" line="484">
                <declaration name="parts1" type="DoubleMatrix2D[][]" line="486"/>
                <declaration name="parts3" type="DoubleMatrix2D[][]" line="488"/>
                <declaration name="A" type="DoubleMatrix2D" line="490"/>
                <declaration name="B" type="DoubleMatrix2D" line="491"/>
                <declaration name="_" type="DoubleMatrix2D" line="492"/>
                <declaration name="parts4" type="DoubleMatrix2D[][]" line="493"/>
            </method>
            <javadoc line="496">
                Demonstrates usage of this class.                
            </javadoc>
            <method name="demo2" type="void" line="499">
                <declaration name="matrix" type="DoubleMatrix2D" line="501"/>
                <declaration name="A" type="DoubleMatrix2D" line="502"/>
                <declaration name="_" type="DoubleMatrix2D" line="503"/>
                <declaration name="parts1" type="DoubleMatrix2D[][]" line="508"/>
            </method>
            <javadoc line="521">
                Constructs a matrix with cells having descending values.
                  For debugging purposes.
                  Example:
                  &lt;pre&gt;
                  5 4 3 
                  2 1 0
                  &lt;/pre&gt;                
            </javadoc>
            <method name="descending" type="DoubleMatrix2D" line="530">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="matrix" type="DoubleMatrix2D" line="531"/>
                <declaration name="v" type="int" line="532"/>
                <scope line="533">
                    <scope line="534"/>
                </scope>
            </method>
            <javadoc line="540">
                Constructs a new diagonal matrix whose diagonal elements are the elements of &lt;tt&gt;vector&lt;/tt&gt;.
                  Cells values are copied. The new matrix is not a view.
                  Example:
                  &lt;pre&gt;
                  5 4 3 --&gt;
                  5 0 0
                  0 4 0
                  0 0 3
                  &lt;/pre&gt;                
                <return>
                    a new matrix.                    
                </return>
            </javadoc>
            <method name="diagonal" type="DoubleMatrix2D" line="552">
                <params>
                    <param name="vector" type="DoubleMatrix1D"/>
                </params>
                <declaration name="size" type="int" line="553"/>
                <declaration name="diag" type="DoubleMatrix2D" line="554"/>
                <scope line="555"/>
            </method>
            <javadoc line="560">
                Constructs a new vector consisting of the diagonal elements of &lt;tt&gt;A&lt;/tt&gt;.
                  Cells values are copied. The new vector is not a view.
                  Example:
                  &lt;pre&gt;
                  5 0 0 9
                  0 4 0 9
                  0 0 3 9
                  --&gt; 5 4 3
                  &lt;/pre&gt;                
                <param>
                    A the matrix, need not be square.                    
                </param>
                <return>
                    a new vector.                    
                </return>
            </javadoc>
            <method name="diagonal" type="DoubleMatrix1D" line="573">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="min" type="int" line="574"/>
                <declaration name="diag" type="DoubleMatrix1D" line="575"/>
                <scope line="576"/>
            </method>
            <javadoc line="581">
                Constructs an identity matrix (having ones on the diagonal and zeros elsewhere).                
            </javadoc>
            <method name="identity" type="DoubleMatrix2D" line="584">
                <params>
                    <param name="rowsAndColumns" type="int"/>
                </params>
                <declaration name="matrix" type="DoubleMatrix2D" line="585"/>
                <scope line="586"/>
            </method>
            <javadoc line="591">
                Constructs a matrix with the given cell values.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
                  and have exactly the same number of columns in every row.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values The values to be filled into the new matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values.length: values[row].length != values[row-1].length</tt>.                    
                </throws>
            </javadoc>
            <method name="make" type="DoubleMatrix2D" line="600">
                <params>
                    <param name="values" type="double[][]"/>
                </params>
            </method>
            <javadoc line="604">
                Construct a matrix from a one-dimensional column-major packed array, ala Fortran.
                  Has the form &lt;tt&gt;matrix.get(row,column) == values[row + columnrows]&lt;/tt&gt;.
                  The values are copied.                
                <param>
                    values One-dimensional array of doubles, packed by columns (ala Fortran).                    
                </param>
                <param>
                    rows  the number of rows.                    
                </param>
                <exception>
                    IllegalArgumentException <tt>values.length</tt> must be a multiple of <tt>rows</tt>.                    
                </exception>
            </javadoc>
            <method name="make" type="DoubleMatrix2D" line="612">
                <params>
                    <param name="values" type="double"/>
                    <param name="rows" type="int"/>
                </params>
                <declaration name="columns" type="int" line="613"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="615"/>
                <scope line="616">
                    <scope line="617"/>
                </scope>
            </method>
            <javadoc line="623">
                Constructs a matrix with the given shape, each cell initialized with zero.                
            </javadoc>
            <method name="make" type="DoubleMatrix2D" line="626">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="631">
                Constructs a matrix with the given shape, each cell initialized with the given value.                
            </javadoc>
            <method name="make" type="DoubleMatrix2D" line="634">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="initialValue" type="double"/>
                </params>
            </method>
            <javadoc line="638">
                Constructs a 1d matrix of the right dynamic type.                
            </javadoc>
            <method name="make1D" type="DoubleMatrix1D" line="641">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="644">
                Constructs a matrix with uniformly distributed values in &lt;tt&gt;(0,1)&lt;/tt&gt; (exclusive).                
            </javadoc>
            <method name="random" type="DoubleMatrix2D" line="647">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="650">
                C = A||A||..||A; Constructs a new matrix which is duplicated both along the row and column dimension.
                  Example:
                  &lt;pre&gt;
                  0 1
                  2 3
                  repeat(2,3) --&gt;
                  0 1 0 1 0 1
                  2 3 2 3 2 3
                  0 1 0 1 0 1
                  2 3 2 3 2 3
                  &lt;/pre&gt;                
            </javadoc>
            <method name="repeat" type="DoubleMatrix2D" line="663">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="rowRepeat" type="int"/>
                    <param name="columnRepeat" type="int"/>
                </params>
                <declaration name="r" type="int" line="664"/>
                <declaration name="c" type="int" line="665"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="666"/>
                <scope line="667">
                    <scope line="668"/>
                </scope>
            </method>
            <javadoc line="674">
                Constructs a randomly sampled matrix with the given shape.
                  Randomly picks exactly &lt;tt&gt;Math.round(rowscolumnsnonZeroFraction)&lt;/tt&gt; cells and initializes them to &lt;tt&gt;value&lt;/tt&gt;, all the rest will be initialized to zero.
                  Note that this is not the same as setting each cell with probability &lt;tt&gt;nonZeroFraction&lt;/tt&gt; to &lt;tt&gt;value&lt;/tt&gt;.
                  Note: The random seed is a constant.                
                <throws>
                    IllegalArgumentException if <tt>nonZeroFraction < 0 || nonZeroFraction > 1</tt>.                    
                </throws>
                <see>
                    cern.jet.random.sampling.RandomSampler                    
                </see>
            </javadoc>
            <method name="sample" type="DoubleMatrix2D" line="682">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="value" type="double"/>
                    <param name="nonZeroFraction" type="double"/>
                </params>
                <declaration name="matrix" type="DoubleMatrix2D" line="683"/>
            </method>
            <javadoc line="687">
                Modifies the given matrix to be a randomly sampled matrix.
                  Randomly picks exactly &lt;tt&gt;Math.round(rowscolumnsnonZeroFraction)&lt;/tt&gt; cells and initializes them to &lt;tt&gt;value&lt;/tt&gt;, all the rest will be initialized to zero.
                  Note that this is not the same as setting each cell with probability &lt;tt&gt;nonZeroFraction&lt;/tt&gt; to &lt;tt&gt;value&lt;/tt&gt;.
                  Note: The random seed is a constant.                
                <throws>
                    IllegalArgumentException if <tt>nonZeroFraction < 0 || nonZeroFraction > 1</tt>.                    
                </throws>
                <see>
                    cern.jet.random.sampling.RandomSampler                    
                </see>
            </javadoc>
            <method name="sample" type="DoubleMatrix2D" line="695">
                <params>
                    <param name="matrix" type="DoubleMatrix2D"/>
                    <param name="value" type="double"/>
                    <param name="nonZeroFraction" type="double"/>
                </params>
                <declaration name="rows" type="int" line="696"/>
                <declaration name="columns" type="int" line="697"/>
                <declaration name="epsilon" type="double" line="698"/>
                <declaration name="size" type="int" line="703"/>
                <declaration name="n" type="int" line="704"/>
                <declaration name="sampler" type="cern.jet.random.sampling.RandomSamplingAssistant" line="706"/>
                <scope line="707">
                    <scope line="708">
                        <declaration name="row" type="int" line="709"/>
                        <declaration name="column" type="int" line="710"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>