<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.doublealgo">
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <import package="cern.colt.matrix.DoubleMatrix2DProcedure"/>
        <import package="cern.colt.matrix.DoubleMatrix3D"/>
        <import package="cern.colt.matrix.DoubleMatrix3DProcedure"/>
        <class name="Stencil" line="6">
            <extends class="Object"/>
            <javadoc line="6">
                Stencil operations. For efficient finite difference operations.
                  Applies a function to a moving &lt;tt&gt;3 x 3&lt;/tt&gt; or &lt;tt&gt;3 x 3 x 3&lt;/tt&gt; window.
                  Build on top of &lt;tt&gt;matrix.zAssignXXXNeighbors(...)&lt;/tt&gt;.
                  You can specify how many iterations shall at most be done, a convergence condition when iteration shall be terminated, and how many iterations shall pass between convergence checks.
                  Always does two iterations at a time for efficiency.
                  These class is for convencience and efficiency.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 01/02/2000                    
                </version>
            </javadoc>
            <javadoc line="17">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Stencil" type="constructor" line="20"/>
            <javadoc line="22">
                27 point stencil operation.
                  Applies a function to a moving &lt;tt&gt;3 x 3 x 3&lt;/tt&gt; window.                
                <param>
                    A the matrix to operate on.                    
                </param>
                <param>
                    function the function to be applied to each window.                    
                </param>
                <param>
                    maxIterations the maximum number of times the stencil shall be applied to the matrix. 
                      Should be a multiple of 2 because two iterations are always done in one atomic step.                    
                </param>
                <param>
                    hasConverged Convergence condition; will return before maxIterations are done when <tt>hasConverged.apply(A)==true</tt>.
                      Set this parameter to <tt>null</tt> to indicate that no convergence checks shall be made.                    
                </param>
                <param>
                    convergenceIterations the number of iterations to pass between each convergence check.
                      (Since a convergence may be expensive, you may want to do it only every 2,4 or 8 iterations.)                    
                </param>
                <return>
                    the number of iterations actually executed.                    
                </return>
            </javadoc>
            <method name="stencil27" type="int" line="35">
                <params>
                    <param name="A" type="DoubleMatrix3D"/>
                    <param name="function" type="cern.colt.function.Double27Function"/>
                    <param name="maxIterations" type="int"/>
                    <param name="hasConverged" type="DoubleMatrix3DProcedure"/>
                    <param name="convergenceIterations" type="int"/>
                </params>
                <declaration name="B" type="DoubleMatrix3D" line="36"/>
                <declaration name="i" type="int" line="39"/>
                <scope line="40">
                    <scope line="44"/>
                </scope>
            </method>
            <javadoc line="50">
                9 point stencil operation.
                  Applies a function to a moving &lt;tt&gt;3 x 3&lt;/tt&gt; window.                
                <param>
                    A the matrix to operate on.                    
                </param>
                <param>
                    function the function to be applied to each window.                    
                </param>
                <param>
                    maxIterations the maximum number of times the stencil shall be applied to the matrix. 
                      Should be a multiple of 2 because two iterations are always done in one atomic step.                    
                </param>
                <param>
                    hasConverged Convergence condition; will return before maxIterations are done when <tt>hasConverged.apply(A)==true</tt>.
                      Set this parameter to <tt>null</tt> to indicate that no convergence checks shall be made.                    
                </param>
                <param>
                    convergenceIterations the number of iterations to pass between each convergence check.
                      (Since a convergence may be expensive, you may want to do it only every 2,4 or 8 iterations.)                    
                </param>
                <return>
                    the number of iterations actually executed.                    
                </return>
            </javadoc>
            <method name="stencil9" type="int" line="63">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="function" type="cern.colt.function.Double9Function"/>
                    <param name="maxIterations" type="int"/>
                    <param name="hasConverged" type="DoubleMatrix2DProcedure"/>
                    <param name="convergenceIterations" type="int"/>
                </params>
                <declaration name="B" type="DoubleMatrix2D" line="64"/>
                <declaration name="i" type="int" line="67"/>
                <scope line="68">
                    <scope line="72"/>
                </scope>
            </method>
        </class>
    </source>