<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.doublealgo">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <import package="cern.colt.matrix.DoubleMatrix3D"/>
        <import package="cern.colt.matrix.impl.AbstractFormatter"/>
        <import package="cern.colt.matrix.impl.AbstractMatrix1D"/>
        <import package="cern.colt.matrix.impl.AbstractMatrix2D"/>
        <import package="cern.colt.matrix.impl.DenseDoubleMatrix1D"/>
        <import package="cern.colt.matrix.impl.Former"/>
        <class name="Formatter" line="19">
            <extends class="AbstractFormatter"/>
            <javadoc line="19">
                Flexible, well human readable matrix print formatting; By default decimal point aligned. Build on top of the C-like &lt;i&gt;sprintf&lt;/i&gt; functionality 
                  provided by the {@link corejava.Format} class written by Cay Horstmann.
                  Currenly works on 1-d, 2-d and 3-d matrices.
                  Note that in most cases you will not need to get familiar with this class; just call &lt;tt&gt;matrix.toString()&lt;/tt&gt; and be happy with the default formatting.
                  This class is for advanced requirements.
                  &lt;p&gt; Can&apos;t exactly remember the syntax of printf format strings? See {@link corejava.Format} 
                  or &lt;a href=&quot;http://www.braju.com/docs/index.html&quot;&gt;Henrik 
                  Nordberg&apos;s documentation&lt;/a&gt;, or the &lt;a href=&quot;http://www.dinkumware.com/htm_cl/lib_prin.html#Print%20Functions&quot;&gt;Dinkumware&apos;s 
                  C Library Reference&lt;/a&gt;.
                  &lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;
                  &lt;p&gt;
                  Examples demonstrate usage on 2-d matrices. 1-d and 3-d matrices formatting works very similar.
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr align=&quot;center&quot;&gt; 
                  &lt;td&gt;Original matrix&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td&gt; 
                  &lt;p&gt;&lt;tt&gt;double[][] values = {&lt;br&gt;
                  {3, 0, -3.4, 0},&lt;br&gt;
                  {5.1 ,0, +3.0123456789, 0}, &lt;br&gt;
                  {16.37, 0.0, 2.5, 0}, &lt;br&gt;
                  {-16.3, 0, -3.012345678E-4, -1},&lt;br&gt;
                  {1236.3456789, 0, 7, -1.2}&lt;br&gt;
                  };&lt;br&gt;
                  matrix = new DenseDoubleMatrix2D(values);&lt;/tt&gt;&lt;/p&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;&amp;nbsp;&lt;/p&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr align=&quot;center&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;format&lt;/tt&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;tt&gt;Formatter.toString(matrix);&lt;/tt&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;tt&gt;Formatter.toSourceCode(matrix);&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td&gt;&lt;tt&gt;%G &lt;/tt&gt;&lt;br&gt;
                  (default)&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt;5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;3.012346&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;-0.000301&amp;nbsp;-1&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  1236.345679&amp;nbsp;0&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1.2 
                  &lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt;{&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;3.012346,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;-0.000301,&amp;nbsp;-1&amp;nbsp;&amp;nbsp;},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{1236.345679,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;-1.2}&lt;br&gt;
                  }; &lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td&gt;&lt;tt&gt;%1.10G&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt;5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;3.0123456789&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;-0.0003012346&amp;nbsp;-1&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  1236.3456789&amp;nbsp;0&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1.2 
                  &lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt;{&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;3.0123456789,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;-0.0003012346,&amp;nbsp;-1&amp;nbsp;&amp;nbsp;},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{1236.3456789,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;-1.2}&lt;br&gt;
                  }; &lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td&gt;&lt;tt&gt;%f&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt; &lt;tt&gt; 5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;3.000000&amp;nbsp;0.000000&amp;nbsp;-3.400000&amp;nbsp;&amp;nbsp;0.000000&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;5.100000&amp;nbsp;0.000000&amp;nbsp;&amp;nbsp;3.012346&amp;nbsp;&amp;nbsp;0.000000&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;16.370000&amp;nbsp;0.000000&amp;nbsp;&amp;nbsp;2.500000&amp;nbsp;&amp;nbsp;0.000000&lt;br&gt;
                  &amp;nbsp;-16.300000&amp;nbsp;0.000000&amp;nbsp;-0.000301&amp;nbsp;-1.000000&lt;br&gt;
                  1236.345679&amp;nbsp;0.000000&amp;nbsp;&amp;nbsp;7.000000&amp;nbsp;-1.200000 &lt;/tt&gt; &lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt; {&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;3.000000,&amp;nbsp;0.000000,&amp;nbsp;-3.400000,&amp;nbsp;&amp;nbsp;0.000000},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;5.100000,&amp;nbsp;0.000000,&amp;nbsp;&amp;nbsp;3.012346,&amp;nbsp;&amp;nbsp;0.000000},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;16.370000,&amp;nbsp;0.000000,&amp;nbsp;&amp;nbsp;2.500000,&amp;nbsp;&amp;nbsp;0.000000},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;-16.300000,&amp;nbsp;0.000000,&amp;nbsp;-0.000301,&amp;nbsp;-1.000000},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{1236.345679,&amp;nbsp;0.000000,&amp;nbsp;&amp;nbsp;7.000000,&amp;nbsp;-1.200000}&lt;br&gt;
                  }; &lt;/tt&gt; &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td&gt;&lt;tt&gt;%1.2f&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt;5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;3.00&amp;nbsp;0.00&amp;nbsp;-3.40&amp;nbsp;&amp;nbsp;0.00&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;5.10&amp;nbsp;0.00&amp;nbsp;&amp;nbsp;3.01&amp;nbsp;&amp;nbsp;0.00&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;16.37&amp;nbsp;0.00&amp;nbsp;&amp;nbsp;2.50&amp;nbsp;&amp;nbsp;0.00&lt;br&gt;
                  &amp;nbsp;-16.30&amp;nbsp;0.00&amp;nbsp;-0.00&amp;nbsp;-1.00&lt;br&gt;
                  1236.35&amp;nbsp;0.00&amp;nbsp;&amp;nbsp;7.00&amp;nbsp;-1.20 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt;{&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;3.00,&amp;nbsp;0.00,&amp;nbsp;-3.40,&amp;nbsp;&amp;nbsp;0.00},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;5.10,&amp;nbsp;0.00,&amp;nbsp;&amp;nbsp;3.01,&amp;nbsp;&amp;nbsp;0.00},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;16.37,&amp;nbsp;0.00,&amp;nbsp;&amp;nbsp;2.50,&amp;nbsp;&amp;nbsp;0.00},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;-16.30,&amp;nbsp;0.00,&amp;nbsp;-0.00,&amp;nbsp;-1.00},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{1236.35,&amp;nbsp;0.00,&amp;nbsp;&amp;nbsp;7.00,&amp;nbsp;-1.20}&lt;br&gt;
                  }; &lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td&gt;&lt;tt&gt;%0.2e&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt;5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
                  &amp;nbsp;3.00e+000&amp;nbsp;0.00e+000&amp;nbsp;-3.40e+000&amp;nbsp;&amp;nbsp;0.00e+000&lt;br&gt;
                  &amp;nbsp;5.10e+000&amp;nbsp;0.00e+000&amp;nbsp;&amp;nbsp;3.01e+000&amp;nbsp;&amp;nbsp;0.00e+000&lt;br&gt;
                  &amp;nbsp;1.64e+001&amp;nbsp;0.00e+000&amp;nbsp;&amp;nbsp;2.50e+000&amp;nbsp;&amp;nbsp;0.00e+000&lt;br&gt;
                  -1.63e+001&amp;nbsp;0.00e+000&amp;nbsp;-3.01e-004&amp;nbsp;-1.00e+000&lt;br&gt;
                  &amp;nbsp;1.24e+003&amp;nbsp;0.00e+000&amp;nbsp;&amp;nbsp;7.00e+000&amp;nbsp;-1.20e+000 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt;{&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;3.00e+000,&amp;nbsp;0.00e+000,&amp;nbsp;-3.40e+000,&amp;nbsp;&amp;nbsp;0.00e+000},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;5.10e+000,&amp;nbsp;0.00e+000,&amp;nbsp;&amp;nbsp;3.01e+000,&amp;nbsp;&amp;nbsp;0.00e+000},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;1.64e+001,&amp;nbsp;0.00e+000,&amp;nbsp;&amp;nbsp;2.50e+000,&amp;nbsp;&amp;nbsp;0.00e+000},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{-1.63e+001,&amp;nbsp;0.00e+000,&amp;nbsp;-3.01e-004,&amp;nbsp;-1.00e+000},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;1.24e+003,&amp;nbsp;0.00e+000,&amp;nbsp;&amp;nbsp;7.00e+000,&amp;nbsp;-1.20e+000}&lt;br&gt;
                  }; &lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td&gt;&lt;tt&gt;null&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt;5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix &lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;3.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&amp;nbsp;&amp;nbsp;3.0123456789&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&lt;br&gt;
                  &amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&amp;nbsp;-3.012345678E-4&amp;nbsp;-1.0&lt;br&gt;
                  1236.3456789&amp;nbsp;0.0&amp;nbsp;&amp;nbsp;7.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1.2 
                  &lt;/tt&gt; &lt;tt&gt; &lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;&lt;tt&gt; {&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;3.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0.0,&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0.0},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0.0,&amp;nbsp;&amp;nbsp;3.0123456789&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0.0},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0.0,&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0.0},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0.0,&amp;nbsp;-3.012345678E-4,&amp;nbsp;-1.0},&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{1236.3456789,&amp;nbsp;0.0,&amp;nbsp;&amp;nbsp;7.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;-1.2}&lt;br&gt;
                  }; &lt;/tt&gt; &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;Here are some more elaborate examples, adding labels for axes, rows, columns, 
                  title and some statistical aggregations.&lt;/p&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr&gt; 
                  &lt;td nowrap&gt; 
                  &lt;p&gt;&lt;tt&gt; double[][] values = {&lt;br&gt;
                  {5 ,10, 20, 40 },&lt;br&gt;
                  { 7, 8 , 6 , 7 },&lt;br&gt;
                  {12 ,10, 20, 19 },&lt;br&gt;
                  { 3, 1 , 5 , 6 }&lt;br&gt;
                  }; &lt;br&gt;
                  &lt;/tt&gt;&lt;tt&gt;String title = &quot;CPU performance over time [nops/sec]&quot;;&lt;br&gt;
                  String columnAxisName = &quot;Year&quot;;&lt;br&gt;
                  String rowAxisName = &quot;CPU&quot;; &lt;br&gt;
                  String[] columnNames = {&quot;1996&quot;, &quot;1997&quot;, &quot;1998&quot;, &quot;1999&quot;};&lt;br&gt;
                  String[] rowNames = { &quot;PowerBar&quot;, &quot;Benzol&quot;, &quot;Mercedes&quot;, &quot;Sparcling&quot;};&lt;br&gt;
                  hep.aida.bin.BinFunctions1D F = hep.aida.bin.BinFunctions1D.functions; // alias&lt;br&gt;
                  hep.aida.bin.BinFunction1D[] aggr = {F.mean, F.rms, F.quantile(0.25), F.median, F.quantile(0.75), F.stdDev, F.min, F.max};&lt;br&gt;
                  String format = &quot;%1.2G&quot;;&lt;br&gt;
                  DoubleMatrix2D matrix = new DenseDoubleMatrix2D(values); &lt;br&gt;
                  new Formatter(format).toTitleString(&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;matrix,rowNames,columnNames,rowAxisName,columnAxisName,title,aggr); &lt;/tt&gt; 
                  &lt;/p&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td&gt;&lt;tt&gt;
                  CPU&amp;nbsp;performance&amp;nbsp;over&amp;nbsp;time&amp;nbsp;[nops/sec]&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;Year&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;1996&amp;nbsp;&amp;nbsp;1997&amp;nbsp;&amp;nbsp;1998&amp;nbsp;&amp;nbsp;1999&amp;nbsp;&amp;nbsp;|&amp;nbsp;Mean&amp;nbsp;&amp;nbsp;RMS&amp;nbsp;&amp;nbsp;&amp;nbsp;25%&amp;nbsp;Q.&amp;nbsp;Median&amp;nbsp;75%&amp;nbsp;Q.&amp;nbsp;StdDev&amp;nbsp;Min&amp;nbsp;Max&lt;br&gt;
                  ---------------------------------------------------------------------------------------&lt;br&gt;
                  C&amp;nbsp;PowerBar&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;40&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;18.75&amp;nbsp;23.05&amp;nbsp;&amp;nbsp;8.75&amp;nbsp;&amp;nbsp;15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;25&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;15.48&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;40&amp;nbsp;&lt;br&gt;
                  P&amp;nbsp;Benzol&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7.04&amp;nbsp;&amp;nbsp;6.75&amp;nbsp;&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7.25&amp;nbsp;&amp;nbsp;&amp;nbsp;0.82&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;&lt;br&gt;
                  U&amp;nbsp;Mercedes&amp;nbsp;&amp;nbsp;|&amp;nbsp;12&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;19&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;15.25&amp;nbsp;15.85&amp;nbsp;11.5&amp;nbsp;&amp;nbsp;&amp;nbsp;15.5&amp;nbsp;&amp;nbsp;&amp;nbsp;19.25&amp;nbsp;&amp;nbsp;&amp;nbsp;4.99&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;20&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;Sparcling&amp;nbsp;|&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;3.75&amp;nbsp;&amp;nbsp;4.21&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5.25&amp;nbsp;&amp;nbsp;&amp;nbsp;2.22&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&lt;br&gt;
                  ---------------------------------------------------------------------------------------&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;Mean&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;6.75&amp;nbsp;&amp;nbsp;7.25&amp;nbsp;12.75&amp;nbsp;18&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;RMS&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;7.53&amp;nbsp;&amp;nbsp;8.14&amp;nbsp;14.67&amp;nbsp;22.62&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;25%&amp;nbsp;Q.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;4.5&amp;nbsp;&amp;nbsp;&amp;nbsp;6.25&amp;nbsp;&amp;nbsp;5.75&amp;nbsp;&amp;nbsp;6.75&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;Median&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;9&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;13&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;13&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;75%&amp;nbsp;Q.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;8.25&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;24.25&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;StdDev&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;3.86&amp;nbsp;&amp;nbsp;4.27&amp;nbsp;&amp;nbsp;8.38&amp;nbsp;15.81&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;Min&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;Max&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;12&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;19&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
                  &lt;/tt&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td nowrap&gt;&lt;tt&gt; same as above, but now without aggregations&lt;br&gt;
                  aggr=null; &lt;/tt&gt; &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td&gt;&lt;tt&gt; CPU&amp;nbsp;performance&amp;nbsp;over&amp;nbsp;time&amp;nbsp;[nops/sec]&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;Year&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;1996&amp;nbsp;1997&amp;nbsp;1998&amp;nbsp;1999&lt;br&gt;
                  ---------------------------------&lt;br&gt;
                  C&amp;nbsp;PowerBar&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;40&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  P&amp;nbsp;Benzol&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  U&amp;nbsp;Mercedes&amp;nbsp;&amp;nbsp;|&amp;nbsp;12&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;19&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;&amp;nbsp;Sparcling&amp;nbsp;|&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp; 
                  &lt;/tt&gt; &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td nowrap&gt;
                  &lt;p&gt;&lt;tt&gt; same as above, but now without rows labeled&lt;br&gt;
                  aggr=null;&lt;br&gt;
                  rowNames=null;&lt;br&gt;
                  rowAxisName=null; &lt;/tt&gt; &lt;/p&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt; 
                  &lt;td&gt;&lt;tt&gt;
                  CPU&amp;nbsp;performance&amp;nbsp;over&amp;nbsp;time&amp;nbsp;[nops/sec]&lt;br&gt;
                  Year&lt;br&gt;
                  1996&amp;nbsp;1997&amp;nbsp;1998&amp;nbsp;1999&lt;br&gt;
                  -------------------&lt;br&gt;
                  &amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;40&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  12&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;19&amp;nbsp;&amp;nbsp;&lt;br&gt;
                  &amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;
                  &lt;/tt&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;A column can be broader than specified by the parameter &lt;tt&gt;minColumnWidth&lt;/tt&gt; 
                  (because a cell may not fit into that width) but a column is never smaller than 
                  &lt;tt&gt;minColumnWidth&lt;/tt&gt;. Normally one does not need to specify &lt;tt&gt;minColumnWidth&lt;/tt&gt; 
                  (default is &lt;tt&gt;1&lt;/tt&gt;). This parameter is only interesting when wanting to 
                  print two distinct matrices such that both matrices have the same column width, 
                  for example, to make it easier to see which column of matrix A corresponds to 
                  which column of matrix B.&lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;Implementation:&lt;/b&gt;&lt;/p&gt;
                  &lt;p&gt;Note that this class is by no means ment to be used for high performance I/O (serialization is much quicker).
                  It is ment to produce well human readable output.&lt;/p&gt;
                  &lt;p&gt;Analyzes the entire matrix before producing output. Each cell is converted 
                  to a String as indicated by the given C-like format string. If &lt;tt&gt;null&lt;/tt&gt; 
                  is passed as format string, {@link java.lang.Double#toString(double)} is used 
                  instead, yielding full precision.&lt;/p&gt;
                  &lt;p&gt;Next, leading and trailing whitespaces are removed. For each column the maximum number of characters before 
                  and after the decimal point is determined. (No problem if decimal points are 
                  missing). Each cell is then padded with leading and trailing blanks, as necessary 
                  to achieve decimal point aligned, left justified formatting.&lt;/p&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.2, 11/30/99                    
                </version>
            </javadoc>
            <javadoc line="270">
                Constructs and returns a matrix formatter with format &lt;tt&gt;&quot;%G&quot;&lt;/tt&gt;.                
            </javadoc>
            <method name="Formatter" type="constructor" line="273"/>
            <javadoc line="276">
                Constructs and returns a matrix formatter.                
                <param>
                    format the given format used to convert a single cell value.                    
                </param>
            </javadoc>
            <method name="Formatter" type="constructor" line="280">
                <params>
                    <param name="format" type="String"/>
                </params>
            </method>
            <javadoc line="284">
                Demonstrates how to use this class.                
            </javadoc>
            <method name="demo1" type="void" line="287">
                <comment line="289">
                    parameters                    
                </comment>
                <comment line="300">
                    now the processing                    
                </comment>
                <comment line="313">
                    may not compile because of packages not included in the distribution
                    htmlStrings[i] = cern.colt.matrixpattern.Converting.toHTML(strings[i]);
                    htmlSourceCodes[i] = cern.colt.matrixpattern.Converting.toHTML(sourceCodes[i]);                    
                </comment>
                <comment line="320">
                    may not compile because of packages not included in the distribution                    
                </comment>
                <comment line="322">
                    System.out.println(&quot;\nhtmlString(&quot;+formats[i]+&quot;):\n&quot;+htmlStrings[i]);
                    System.out.println(&quot;\nhtmlSourceCode(&quot;+formats[i]+&quot;):\n&quot;+htmlSourceCodes[i]);                    
                </comment>
                <declaration name="values" type="double[][]" line="289"/>
                <declaration name="formats" type="String[]" line="296"/>
                <declaration name="size" type="int" line="300"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="301"/>
                <declaration name="strings" type="String[]" line="302"/>
                <declaration name="sourceCodes" type="String[]" line="303"/>
                <declaration name="htmlStrings" type="String[]" line="304"/>
                <declaration name="htmlSourceCodes" type="String[]" line="305"/>
                <scope line="307">
                    <declaration name="format" type="String" line="308"/>
                </scope>
                <scope line="320"/>
                <scope line="325"/>
            </method>
            <javadoc line="331">
                Demonstrates how to use this class.                
            </javadoc>
            <method name="demo2" type="void" line="334">
                <comment line="336">
                    parameters                    
                </comment>
                <comment line="338">
                    5, 0.0, -0.0, -Double.NaN, Double.NaN, 0.0/0.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.MIN_VALUE, Double.MAX_VALUE                    
                </comment>
                <comment line="340">
                    Double.MIN_VALUE, Double.MAX_VALUE //, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY                    
                </comment>
                <comment line="342">
                    String[] formats =         {&quot;%G&quot;, &quot;%1.10G&quot;, &quot;%f&quot;, &quot;%1.2f&quot;, &quot;%0.2e&quot;};                    
                </comment>
                <comment line="346">
                    now the processing                    
                </comment>
                <comment line="351">
                    String[] javaStrings = new String[size];                    
                </comment>
                <declaration name="values" type="double[]" line="336"/>
                <declaration name="formats" type="String[]" line="342"/>
                <declaration name="size" type="int" line="346"/>
                <declaration name="matrix" type="DoubleMatrix1D" line="347"/>
                <declaration name="strings" type="String[]" line="349"/>
                <scope line="352">
                    <declaration name="format" type="String" line="353"/>
                    <scope line="355"/>
                </scope>
                <scope line="362"/>
            </method>
            <javadoc line="367">
                Demonstrates how to use this class.                
            </javadoc>
            <method name="demo3" type="void" line="370">
                <params>
                    <param name="size" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <comment line="400">
                    System.out.println(s);                    
                </comment>
                <comment line="406">
                    System.out.println(s);                    
                </comment>
                <declaration name="timer" type="cern.colt.Timer" line="371"/>
                <declaration name="s" type="String" line="372"/>
                <declaration name="buf" type="StringBuffer" line="373"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="374"/>
                <scope line="378">
                    <scope line="379"/>
                </scope>
                <declaration name="format" type="cern.colt.matrix.impl.Former" line="387"/>
                <scope line="389">
                    <scope line="390"/>
                </scope>
            </method>
            <javadoc line="409">
                Demonstrates how to use this class.                
            </javadoc>
            <method name="demo4" type="void" line="412">
                <comment line="414">
                    parameters                    
                </comment>
                <comment line="422">
                    double[][] values = {
                    {3,     1,      },
                    {5.1   ,16.37,  }
                    };                    
                </comment>
                <comment line="428">
                    String[] columnNames = { &quot;he&quot;,   &quot;&quot;,  &quot;he&quot;, &quot;four&quot; };
                    String[] rowNames = { &quot;hello&quot;, &quot;du&quot;, null, &quot;abcdef&quot;, &quot;five&quot; };                    
                </comment>
                <comment line="432">
                    String[] columnNames = { &quot;0.1&quot;, &quot;0.3&quot; };
                    String[] rowNames = { &quot;SunJDK1.2.2 classic&quot;, &quot;IBMJDK1.1.8&quot;};                    
                </comment>
                <declaration name="values" type="double[][]" line="414"/>
                <declaration name="columnNames" type="String[]" line="429"/>
                <declaration name="rowNames" type="String[]" line="430"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="434"/>
            </method>
            <javadoc line="437">
                Demonstrates how to use this class.                
            </javadoc>
            <method name="demo5" type="void" line="440">
                <comment line="442">
                    parameters                    
                </comment>
                <comment line="450">
                    double[][] values = {
                    {3,     1,      },
                    {5.1   ,16.37,  }
                    };                    
                </comment>
                <comment line="456">
                    String[] columnNames = { &quot;he&quot;,   &quot;&quot;,  &quot;he&quot;, &quot;four&quot; };
                    String[] rowNames = { &quot;hello&quot;, &quot;du&quot;, null, &quot;abcdef&quot;, &quot;five&quot; };                    
                </comment>
                <comment line="460">
                    String[] columnNames = { &quot;0.1&quot;, &quot;0.3&quot; };
                    String[] rowNames = { &quot;SunJDK1.2.2 classic&quot;, &quot;IBMJDK1.1.8&quot;};                    
                </comment>
                <declaration name="values" type="double[][]" line="442"/>
                <declaration name="columnNames" type="String[]" line="457"/>
                <declaration name="rowNames" type="String[]" line="458"/>
            </method>
            <javadoc line="465">
                Demonstrates how to use this class.                
            </javadoc>
            <method name="demo6" type="void" line="468">
                <comment line="470">
                    parameters                    
                </comment>
                <comment line="478">
                    double[][] values = {
                    {3,     1,      },
                    {5.1   ,16.37,  }
                    };                    
                </comment>
                <comment line="484">
                    String[] columnNames = { &quot;he&quot;,   &quot;&quot;,  &quot;he&quot;, &quot;four&quot; };
                    String[] rowNames = { &quot;hello&quot;, &quot;du&quot;, null, &quot;abcdef&quot;, &quot;five&quot; };
                    String[] columnNames = { &quot;0.1&quot;, &quot;0.3&quot;, &quot;0.5&quot;, &quot;0.7&quot; };                    
                </comment>
                <comment line="489">
                    String[] columnNames = { &quot;0.1&quot;, &quot;0.3&quot; };
                    String[] rowNames = { &quot;SunJDK1.2.2 classic&quot;, &quot;IBMJDK1.1.8&quot;};                    
                </comment>
                <comment line="492">
                    System.out.println(cern.colt.matrix.DoubleFactory2D.dense.make(values));
                    System.out.println(new Formatter().toSourceCode(cern.colt.matrix.DoubleFactory2D.dense.make(values)));                    
                </comment>
                <declaration name="values" type="double[][]" line="470"/>
                <declaration name="columnNames" type="String[]" line="486"/>
                <declaration name="rowNames" type="String[]" line="487"/>
            </method>
            <javadoc line="496">
                Demonstrates how to use this class.                
            </javadoc>
            <method name="demo7" type="void" line="499">
                <comment line="501">
                    parameters                    
                </comment>
                <comment line="502">
                    double[][] values = {
                    {3,     0,        -3.4, 0},
                    {5.1   ,0,        +3.0123456789, 0},
                    {16.37, 0.0,       2.5, 0},
                    {-16.3, 0,        -3.012345678E-4, -1},
                    {1236.3456789, 0,  7, -1.2}
                    };                    
                </comment>
                <comment line="526">
                    String[] columnNames = { &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;, &quot;mean&quot;, &quot;median&quot;, &quot;sum&quot;};
                    String[] rowNames = { &quot;SunJDK1.2.2 classic&quot;, &quot;IBMJDK1.1.8&quot;, &quot;SunJDK1.3 Hotspot&quot;, &quot;other1&quot;, &quot;other2&quot;, &quot;mean&quot;, &quot;median&quot;, &quot;sum&quot; };
                    hep.aida.bin.BinFunction1D[] aggr = {F.mean, F.median, F.sum};                    
                </comment>
                <comment line="530">
                    System.out.println(cern.colt.matrix.DoubleFactory2D.dense.make(values));
                    System.out.println(new Formatter().toSourceCode(cern.colt.matrix.DoubleFactory2D.dense.make(values)));
                    System.out.println(new Formatter().toString(cern.colt.matrix.DoubleFactory2D.dense.make(values)));
                    System.out.println(new Formatter().toTitleString(cern.colt.matrix.DoubleFactory2D.dense.make(values),rowNames,columnNames,rowAxisName,columnAxisName,title));                    
                </comment>
                <comment line="535">
                    System.out.println(cern.colt.matrixpattern.Converting.toHTML(new Formatter(format).toTitleString(cern.colt.matrix.DoubleFactory2D.dense.make(values),rowNames,columnNames,rowAxisName,columnAxisName,title, aggr)));                    
                </comment>
                <declaration name="values" type="double[][]" line="510"/>
                <declaration name="columnNames" type="String[]" line="516"/>
                <declaration name="rowNames" type="String[]" line="517"/>
                <declaration name="rowAxisName" type="String" line="518"/>
                <declaration name="columnAxisName" type="String" line="519"/>
                <declaration name="title" type="String" line="520"/>
                <declaration name="F" type="hep.aida.bin.BinFunctions1D" line="521"/>
                <declaration name="aggr" type="hep.aida.bin.BinFunction1D[]" line="522"/>
                <declaration name="format" type="String" line="523"/>
            </method>
            <javadoc line="536">
                Converts a given cell to a String; no alignment considered.                
            </javadoc>
            <method name="form" type="String" line="539">
                <params>
                    <param name="matrix" type="DoubleMatrix1D"/>
                    <param name="index" type="int"/>
                    <param name="formatter" type="Former"/>
                </params>
            </method>
            <javadoc line="542">
                Converts a given cell to a String; no alignment considered.                
            </javadoc>
            <method name="form" type="String" line="545">
                <params>
                    <param name="matrix" type="AbstractMatrix1D"/>
                    <param name="index" type="int"/>
                    <param name="formatter" type="Former"/>
                </params>
            </method>
            <javadoc line="548">
                Returns a string representations of all cells; no alignment considered.                
            </javadoc>
            <method name="format" type="String[][]" line="551">
                <params>
                    <param name="matrix" type="DoubleMatrix2D"/>
                </params>
                <declaration name="strings" type="String[][]" line="552"/>
            </method>
            <javadoc line="556">
                Returns a string representations of all cells; no alignment considered.                
            </javadoc>
            <method name="format" type="String[][]" line="559">
                <params>
                    <param name="matrix" type="AbstractMatrix2D"/>
                </params>
            </method>
            <javadoc line="562">
                Returns the index of the decimal point.                
            </javadoc>
            <method name="indexOfDecimalPoint" type="int" line="565">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="i" type="int" line="566"/>
            </method>
            <javadoc line="572">
                Returns the number of characters before the decimal point.                
            </javadoc>
            <method name="lead" type="int" line="575">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="579">
                Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.                
                <param>
                    matrix the matrix to format.                    
                </param>
            </javadoc>
            <method name="toSourceCode" type="String" line="583">
                <params>
                    <param name="matrix" type="DoubleMatrix1D"/>
                </params>
                <declaration name="copy" type="Formatter" line="584"/>
                <declaration name="lead" type="String" line="587"/>
                <declaration name="trail" type="String" line="588"/>
            </method>
            <javadoc line="591">
                Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.                
                <param>
                    matrix the matrix to format.                    
                </param>
            </javadoc>
            <method name="toSourceCode" type="String" line="595">
                <params>
                    <param name="matrix" type="DoubleMatrix2D"/>
                </params>
                <declaration name="copy" type="Formatter" line="596"/>
                <declaration name="b3" type="String" line="597"/>
                <declaration name="lead" type="String" line="601"/>
                <declaration name="trail" type="String" line="602"/>
            </method>
            <javadoc line="605">
                Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.                
                <param>
                    matrix the matrix to format.                    
                </param>
            </javadoc>
            <method name="toSourceCode" type="String" line="609">
                <params>
                    <param name="matrix" type="DoubleMatrix3D"/>
                </params>
                <declaration name="copy" type="Formatter" line="610"/>
                <declaration name="b3" type="String" line="611"/>
                <declaration name="b6" type="String" line="612"/>
                <declaration name="lead" type="String" line="617"/>
                <declaration name="trail" type="String" line="618"/>
            </method>
            <javadoc line="621">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="625">
                <params>
                    <param name="matrix" type="DoubleMatrix1D"/>
                </params>
                <declaration name="easy" type="DoubleMatrix2D" line="626"/>
            </method>
            <javadoc line="630">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="634">
                <params>
                    <param name="matrix" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="637">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="641">
                <params>
                    <param name="matrix" type="DoubleMatrix3D"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="642"/>
                <declaration name="oldPrintShape" type="boolean" line="643"/>
                <scope line="645"/>
            </method>
            <javadoc line="653">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="657">
                <params>
                    <param name="matrix" type="AbstractMatrix2D"/>
                </params>
            </method>
            <javadoc line="660">
                Returns a string representation of the given matrix with axis as well as rows and columns labeled.
                  Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.                
                <param>
                    matrix The matrix to format.                    
                </param>
                <param>
                    rowNames The headers of all rows (to be put to the left of the matrix).                    
                </param>
                <param>
                    columnNames The headers of all columns (to be put to above the matrix).                    
                </param>
                <param>
                    rowAxisName The label of the y-axis.                    
                </param>
                <param>
                    columnAxisName The label of the x-axis.                    
                </param>
                <param>
                    title The overall title of the matrix to be formatted.                    
                </param>
                <return>
                    the matrix converted to a string.                    
                </return>
            </javadoc>
            <method name="toTitleString" type="String" line="672">
                <params>
                    <param name="matrix" type="DoubleMatrix2D"/>
                    <param name="rowNames" type="String[]"/>
                    <param name="columnNames" type="String[]"/>
                    <param name="rowAxisName" type="String"/>
                    <param name="columnAxisName" type="String"/>
                    <param name="title" type="String"/>
                </params>
                <comment line="676">
                    String oldAlignment = this.alignment;
                    this.alignment = DECIMAL;                    
                </comment>
                <comment line="679">
                    this.alignment = oldAlignment;                    
                </comment>
                <declaration name="s" type="String[][]" line="674"/>
            </method>
            <javadoc line="681">
                Same as &lt;tt&gt;toTitleString&lt;/tt&gt; except that additionally statistical aggregates (mean, median, sum, etc.) of rows and columns are printed.
                  Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.                
                <param>
                    matrix The matrix to format.                    
                </param>
                <param>
                    rowNames The headers of all rows (to be put to the left of the matrix).                    
                </param>
                <param>
                    columnNames The headers of all columns (to be put to above the matrix).                    
                </param>
                <param>
                    rowAxisName The label of the y-axis.                    
                </param>
                <param>
                    columnAxisName The label of the x-axis.                    
                </param>
                <param>
                    title The overall title of the matrix to be formatted.                    
                </param>
                <param>
                    aggr the aggregation functions to be applied to columns and rows.                    
                </param>
                <return>
                    the matrix converted to a string.                    
                </return>
                <see>
                    hep.aida.bin.BinFunction1D                    
                </see>
                <see>
                    hep.aida.bin.BinFunctions1D                    
                </see>
            </javadoc>
            <method name="toTitleString" type="String" line="696">
                <params>
                    <param name="matrix" type="DoubleMatrix2D"/>
                    <param name="rowNames" type="String[]"/>
                    <param name="columnNames" type="String[]"/>
                    <param name="rowAxisName" type="String"/>
                    <param name="columnAxisName" type="String"/>
                    <param name="title" type="String"/>
                    <param name="aggr" type="hep.aida.bin.BinFunction1D[]"/>
                </params>
                <comment line="701">
                    hold row aggregations                    
                </comment>
                <comment line="702">
                    hold column aggregations                    
                </comment>
                <comment line="704">
                    aggregate an entire column at a time                    
                </comment>
                <comment line="705">
                    aggregate an entire row at a time                    
                </comment>
                <comment line="707">
                    turn into strings
                     tmp holds &quot;matrix&quot; plus &quot;colStats&quot; below (needed so that numbers in a columns can be decimal point aligned)                    
                </comment>
                <comment line="717">
                    copy strings into a large matrix holding the source matrix and all aggregations                    
                </comment>
                <comment line="724">
                    append a vertical &quot;|&quot; separator plus names of aggregation functions to line holding columnNames                    
                </comment>
                <comment line="728">
                    add names of aggregation functions                    
                </comment>
                <comment line="733">
                    append names of aggregation functions to line holding rowNames                    
                </comment>
                <comment line="736">
                    add names of aggregation functions                    
                </comment>
                <comment line="741">
                    turn large matrix into string                    
                </comment>
                <comment line="744">
                    insert a horizontal &quot;----------------------&quot; separation line above the column stats
                     determine insertion position and line width                    
                </comment>
                <comment line="749">
                    scan &quot;aggr.length+1+v&quot; lines backwards                    
                </comment>
                <declaration name="rowStats" type="DoubleMatrix2D" line="700"/>
                <declaration name="colStats" type="DoubleMatrix2D" line="701"/>
                <declaration name="tmp" type="DoubleMatrix2D" line="708"/>
                <declaration name="s1" type="String[][]" line="713"/>
                <declaration name="s2" type="String[][]" line="714"/>
                <declaration name="allStats" type="cern.colt.matrix.ObjectMatrix2D" line="717"/>
                <scope line="724">
                    <declaration name="list" type="cern.colt.list.ObjectArrayList" line="725"/>
                </scope>
                <scope line="733">
                    <declaration name="list" type="cern.colt.list.ObjectArrayList" line="734"/>
                </scope>
                <declaration name="s" type="String" line="741"/>
                <declaration name="last" type="int" line="745"/>
                <declaration name="secondLast" type="int" line="746"/>
                <declaration name="v" type="int" line="747"/>
                <scope line="748"/>
                <declaration name="buf" type="StringBuffer" line="752"/>
            </method>
            <javadoc line="757">
                Returns a string representation of the given matrix with axis as well as rows and columns labeled.
                  Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.                
                <param>
                    matrix The matrix to format.                    
                </param>
                <param>
                    sliceNames The headers of all slices (to be put above each slice).                    
                </param>
                <param>
                    rowNames The headers of all rows (to be put to the left of the matrix).                    
                </param>
                <param>
                    columnNames The headers of all columns (to be put to above the matrix).                    
                </param>
                <param>
                    sliceAxisName The label of the z-axis (to be put above each slice).                    
                </param>
                <param>
                    rowAxisName The label of the y-axis.                    
                </param>
                <param>
                    columnAxisName The label of the x-axis.                    
                </param>
                <param>
                    title The overall title of the matrix to be formatted.                    
                </param>
                <param>
                    aggr the aggregation functions to be applied to columns, rows.                    
                </param>
                <return>
                    the matrix converted to a string.                    
                </return>
                <see>
                    hep.aida.bin.BinFunction1D                    
                </see>
                <see>
                    hep.aida.bin.BinFunctions1D                    
                </see>
            </javadoc>
            <method name="toTitleString" type="String" line="774">
                <params>
                    <param name="matrix" type="DoubleMatrix3D"/>
                    <param name="sliceNames" type="String[]"/>
                    <param name="rowNames" type="String[]"/>
                    <param name="columnNames" type="String[]"/>
                    <param name="sliceAxisName" type="String"/>
                    <param name="rowAxisName" type="String"/>
                    <param name="columnAxisName" type="String"/>
                    <param name="title" type="String"/>
                    <param name="aggr" type="hep.aida.bin.BinFunction1D[]"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="776"/>
                <scope line="777"/>
            </method>
            <javadoc line="783">
                Returns a string representation of the given matrix with axis as well as rows and columns labeled.
                  Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.                
                <param>
                    matrix The matrix to format.                    
                </param>
                <param>
                    sliceNames The headers of all slices (to be put above each slice).                    
                </param>
                <param>
                    rowNames The headers of all rows (to be put to the left of the matrix).                    
                </param>
                <param>
                    columnNames The headers of all columns (to be put to above the matrix).                    
                </param>
                <param>
                    sliceAxisName The label of the z-axis (to be put above each slice).                    
                </param>
                <param>
                    rowAxisName The label of the y-axis.                    
                </param>
                <param>
                    columnAxisName The label of the x-axis.                    
                </param>
                <param>
                    title The overall title of the matrix to be formatted.                    
                </param>
                <return>
                    the matrix converted to a string.                    
                </return>
            </javadoc>
            <method name="xtoTitleString" type="String" line="797">
                <params>
                    <param name="matrix" type="DoubleMatrix3D"/>
                    <param name="sliceNames" type="String[]"/>
                    <param name="rowNames" type="String[]"/>
                    <param name="columnNames" type="String[]"/>
                    <param name="sliceAxisName" type="String"/>
                    <param name="rowAxisName" type="String"/>
                    <param name="columnAxisName" type="String"/>
                    <param name="title" type="String"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="799"/>
                <scope line="800"/>
            </method>
        </class>
    </source>