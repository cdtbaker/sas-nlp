<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.linalg">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <import package="cern.colt.matrix.DoubleMatrix3D"/>
        <class name="Property" line="5">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="5">
                Tests matrices for linear algebraic properties (equality, tridiagonality, symmetry, singularity, etc).
                  &lt;p&gt;
                  Except where explicitly indicated, all methods involving equality tests (&lt;tt&gt;==&lt;/tt&gt;) allow for numerical instability, to a degree specified upon instance construction and returned by method {@link #tolerance()}.
                  The public static final variable &lt;tt&gt;DEFAULT&lt;/tt&gt; represents a default Property object with a tolerance of &lt;tt&gt;1.0E-9&lt;/tt&gt;.
                  The public static final variable &lt;tt&gt;ZERO&lt;/tt&gt; represents a Property object with a tolerance of &lt;tt&gt;0.0&lt;/tt&gt;.
                  The public static final variable &lt;tt&gt;TWELVE&lt;/tt&gt; represents a Property object with a tolerance of &lt;tt&gt;1.0E-12&lt;/tt&gt;.
                  As long as you are happy with these tolerances, there is no need to construct Property objects.
                  Simply use idioms like &lt;tt&gt;Property.DEFAULT.equals(A,B)&lt;/tt&gt;, &lt;tt&gt;Property.ZERO.equals(A,B)&lt;/tt&gt;, &lt;tt&gt;Property.TWELVE.equals(A,B)&lt;/tt&gt;.
                  &lt;p&gt;
                  To work with a different tolerance (e.g. &lt;tt&gt;1.0E-15&lt;/tt&gt; or &lt;tt&gt;1.0E-5&lt;/tt&gt;) use the constructor and/or method {@link #setTolerance(double)}.
                  Note that the public static final Property objects are immutable: Is is not possible to alter their tolerance. 
                  Any attempt to do so will throw an Exception.
                  &lt;p&gt;
                  Note that this implementation is not synchronized.
                  &lt;p&gt;
                  Example: &lt;tt&gt;equals(DoubleMatrix2D A, DoubleMatrix2D B)&lt;/tt&gt; is defined as follows
                  &lt;table&gt;
                  &lt;td class=&quot;PRE&quot;&gt; 
                  &lt;pre&gt;
                  { some other tests not related to tolerance go here }
                  double epsilon = tolerance();
                  for (int row=rows; --row &gt;= 0;) {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;for (int column=columns; --column &gt;= 0;) {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//if (!(A.getQuick(row,column) == B.getQuick(row,column))) return false;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (Math.abs(A.getQuick(row,column) - B.getQuick(row,column)) &gt; epsilon) return false;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;}
                  }
                  return true;
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;/table&gt;
                  Here are some example properties
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt;&lt;tt&gt;matrix&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; &lt;tt&gt;4&amp;nbsp;x&amp;nbsp;4&amp;nbsp;&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt; 4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt; 4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;1&amp;nbsp;1 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;1&lt;br&gt;
                  1&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1 &lt;/tt&gt;&lt;tt&gt; &lt;/tt&gt; &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1 &lt;/tt&gt; &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;upperBandwidth&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;1&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;3&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;1&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;2&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;lowerBandwidth&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;1&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;tt&gt;3&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;3&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;2&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;semiBandwidth&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;1&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;1&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;2&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;tt&gt;4&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;4&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;3&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;description&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;zero&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;diagonal&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;tridiagonal&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;upper triangular&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;tt&gt;lower triangular&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;unstructured&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;unstructured&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.1, 28/May/2000 (fixed strange bugs involving NaN, -inf, inf)                    
                </version>
            </javadoc>
            <declaration name="DEFAULT" type="Property" line="162"/>
            <javadoc line="162">
                The default Property object; currently has &lt;tt&gt;tolerance()==1.0E-9&lt;/tt&gt;.                
            </javadoc>
            <declaration name="ZERO" type="Property" line="166"/>
            <javadoc line="166">
                A Property object with &lt;tt&gt;tolerance()==0.0&lt;/tt&gt;.                
            </javadoc>
            <declaration name="TWELVE" type="Property" line="170"/>
            <javadoc line="170">
                A Property object with &lt;tt&gt;tolerance()==1.0E-12&lt;/tt&gt;.                
            </javadoc>
            <declaration name="tolerance" type="double" line="174"/>
            <javadoc line="175">
                Not instantiable by no-arg constructor.                
            </javadoc>
            <method name="Property" type="constructor" line="178"/>
            <javadoc line="181">
                Constructs an instance with a tolerance of &lt;tt&gt;Math.abs(newTolerance)&lt;/tt&gt;.                
            </javadoc>
            <method name="Property" type="constructor" line="184">
                <params>
                    <param name="newTolerance" type="double"/>
                </params>
            </method>
            <javadoc line="187">
                Returns a String with &lt;tt&gt;length&lt;/tt&gt; blanks.                
            </javadoc>
            <method name="blanks" type="String" line="190">
                <params>
                    <param name="length" type="int"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="192"/>
                <scope line="193"/>
            </method>
            <javadoc line="198">
                Checks whether the given matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;rectangular&lt;/i&gt;.                
                <throws>
                    IllegalArgumentException if <tt>A.rows() < A.columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkRectangular" type="void" line="202">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <scope line="203"/>
            </method>
            <javadoc line="207">
                Checks whether the given matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;square&lt;/i&gt;.                
                <throws>
                    IllegalArgumentException if <tt>A.rows() != A.columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkSquare" type="void" line="211">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="214">
                Returns the matrix&apos;s fraction of non-zero cells; &lt;tt&gt;A.cardinality() / A.size()&lt;/tt&gt;.                
            </javadoc>
            <method name="density" type="double" line="217">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="220">
                Returns whether all cells of the given matrix &lt;tt&gt;A&lt;/tt&gt; are equal to the given value.
                  The result is &lt;tt&gt;true&lt;/tt&gt; if and only if &lt;tt&gt;A != null&lt;/tt&gt; and
                  &lt;tt&gt;! (Math.abs(value - A[i]) &gt; tolerance())&lt;/tt&gt; holds for all coordinates.                
                <param>
                    A   the first matrix to compare.                    
                </param>
                <param>
                    value   the value to compare against.                    
                </param>
                <return>
                    <tt>true</tt> if the matrix is equal to the value;
                      <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="229">
                <params>
                    <param name="A" type="DoubleMatrix1D"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="epsilon" type="double" line="231"/>
                <scope line="232">
                    <declaration name="x" type="double" line="233"/>
                    <declaration name="diff" type="double" line="234"/>
                </scope>
            </method>
            <javadoc line="240">
                Returns whether both given matrices &lt;tt&gt;A&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; are equal.
                  The result is &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;A==B&lt;/tt&gt;. 
                  Otherwise, the result is &lt;tt&gt;true&lt;/tt&gt; if and only if both arguments are &lt;tt&gt;!= null&lt;/tt&gt;, 
                  have the same size and 
                  &lt;tt&gt;! (Math.abs(A[i] - B[i]) &gt; tolerance())&lt;/tt&gt; holds for all indexes.                
                <param>
                    A   the first matrix to compare.                    
                </param>
                <param>
                    B   the second matrix to compare.                    
                </param>
                <return>
                    <tt>true</tt> if both matrices are equal;
                      <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="251">
                <params>
                    <param name="A" type="DoubleMatrix1D"/>
                    <param name="B" type="DoubleMatrix1D"/>
                </params>
                <declaration name="size" type="int" line="254"/>
                <declaration name="epsilon" type="double" line="256"/>
                <scope line="257">
                    <declaration name="x" type="double" line="258"/>
                    <declaration name="value" type="double" line="259"/>
                    <declaration name="diff" type="double" line="260"/>
                </scope>
            </method>
            <javadoc line="266">
                Returns whether all cells of the given matrix &lt;tt&gt;A&lt;/tt&gt; are equal to the given value.
                  The result is &lt;tt&gt;true&lt;/tt&gt; if and only if &lt;tt&gt;A != null&lt;/tt&gt; and
                  &lt;tt&gt;! (Math.abs(value - A[row,col]) &gt; tolerance())&lt;/tt&gt; holds for all coordinates.                
                <param>
                    A   the first matrix to compare.                    
                </param>
                <param>
                    value   the value to compare against.                    
                </param>
                <return>
                    <tt>true</tt> if the matrix is equal to the value;
                      <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="275">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="rows" type="int" line="277"/>
                <declaration name="columns" type="int" line="278"/>
                <declaration name="epsilon" type="double" line="279"/>
                <scope line="280">
                    <scope line="281">
                        <declaration name="x" type="double" line="282"/>
                        <declaration name="diff" type="double" line="283"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="290">
                Returns whether both given matrices &lt;tt&gt;A&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; are equal.
                  The result is &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;A==B&lt;/tt&gt;. 
                  Otherwise, the result is &lt;tt&gt;true&lt;/tt&gt; if and only if both arguments are &lt;tt&gt;!= null&lt;/tt&gt;, 
                  have the same number of columns and rows and 
                  &lt;tt&gt;! (Math.abs(A[row,col] - B[row,col]) &gt; tolerance())&lt;/tt&gt; holds for all coordinates.                
                <param>
                    A   the first matrix to compare.                    
                </param>
                <param>
                    B   the second matrix to compare.                    
                </param>
                <return>
                    <tt>true</tt> if both matrices are equal;
                      <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="301">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <declaration name="rows" type="int" line="304"/>
                <declaration name="columns" type="int" line="305"/>
                <declaration name="epsilon" type="double" line="307"/>
                <scope line="308">
                    <scope line="309">
                        <declaration name="x" type="double" line="310"/>
                        <declaration name="value" type="double" line="311"/>
                        <declaration name="diff" type="double" line="312"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="319">
                Returns whether all cells of the given matrix &lt;tt&gt;A&lt;/tt&gt; are equal to the given value.
                  The result is &lt;tt&gt;true&lt;/tt&gt; if and only if &lt;tt&gt;A != null&lt;/tt&gt; and
                  &lt;tt&gt;! (Math.abs(value - A[slice,row,col]) &gt; tolerance())&lt;/tt&gt; holds for all coordinates.                
                <param>
                    A   the first matrix to compare.                    
                </param>
                <param>
                    value   the value to compare against.                    
                </param>
                <return>
                    <tt>true</tt> if the matrix is equal to the value;
                      <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="328">
                <params>
                    <param name="A" type="DoubleMatrix3D"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="rows" type="int" line="330"/>
                <declaration name="columns" type="int" line="331"/>
                <declaration name="epsilon" type="double" line="332"/>
                <scope line="333">
                    <scope line="334">
                        <scope line="335">
                            <declaration name="x" type="double" line="336"/>
                            <declaration name="diff" type="double" line="337"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="345">
                Returns whether both given matrices &lt;tt&gt;A&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; are equal.
                  The result is &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;A==B&lt;/tt&gt;. 
                  Otherwise, the result is &lt;tt&gt;true&lt;/tt&gt; if and only if both arguments are &lt;tt&gt;!= null&lt;/tt&gt;, 
                  have the same number of columns, rows and slices, and
                  &lt;tt&gt;! (Math.abs(A[slice,row,col] - B[slice,row,col]) &gt; tolerance())&lt;/tt&gt; holds for all coordinates.                
                <param>
                    A   the first matrix to compare.                    
                </param>
                <param>
                    B   the second matrix to compare.                    
                </param>
                <return>
                    <tt>true</tt> if both matrices are equal;
                      <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="356">
                <params>
                    <param name="A" type="DoubleMatrix3D"/>
                    <param name="B" type="DoubleMatrix3D"/>
                </params>
                <declaration name="slices" type="int" line="359"/>
                <declaration name="rows" type="int" line="360"/>
                <declaration name="columns" type="int" line="361"/>
                <declaration name="epsilon" type="double" line="363"/>
                <scope line="364">
                    <scope line="365">
                        <scope line="366">
                            <declaration name="x" type="double" line="367"/>
                            <declaration name="value" type="double" line="368"/>
                            <declaration name="diff" type="double" line="369"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="377">
                Modifies the given matrix square matrix &lt;tt&gt;A&lt;/tt&gt; such that it is diagonally dominant by row and column, hence non-singular, hence invertible.
                  For testing purposes only.                
                <param>
                    A the square matrix to modify.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>!isSquare(A)</tt>.                    
                </throws>
            </javadoc>
            <method name="generateNonSingular" type="void" line="383">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="F" type="cern.jet.math.Functions" line="385"/>
                <declaration name="min" type="int" line="386"/>
                <scope line="387"/>
                <scope line="390">
                    <declaration name="rowSum" type="double" line="391"/>
                    <declaration name="colSum" type="double" line="392"/>
                </scope>
            </method>
            <javadoc line="396">
                                
            </javadoc>
            <method name="get" type="String" line="398">
                <params>
                    <param name="list" type="cern.colt.list.ObjectArrayList"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="401">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;diagonal&lt;/i&gt; if &lt;tt&gt;A[i,j] == 0&lt;/tt&gt; whenever &lt;tt&gt;i != j&lt;/tt&gt;.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isDiagonal" type="boolean" line="405">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="406"/>
                <declaration name="rows" type="int" line="407"/>
                <declaration name="columns" type="int" line="408"/>
                <scope line="409">
                    <scope line="410"/>
                </scope>
            </method>
            <javadoc line="416">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;diagonally dominant by column&lt;/i&gt; if the absolute value of each diagonal element is larger than the sum of the absolute values of the off-diagonal elements in the corresponding column.
                  &lt;tt&gt;returns true if for all i: abs(A[i,i]) &amp;gt; Sum(abs(A[j,i])); j != i.&lt;/tt&gt;
                  Matrix may but need not be square.
                  &lt;p&gt;
                  Note: Ignores tolerance.                
            </javadoc>
            <method name="isDiagonallyDominantByColumn" type="boolean" line="423">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="F" type="cern.jet.math.Functions" line="424"/>
                <declaration name="epsilon" type="double" line="425"/>
                <declaration name="min" type="int" line="426"/>
                <scope line="427">
                    <declaration name="diag" type="double" line="428"/>
                </scope>
            </method>
            <javadoc line="434">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;diagonally dominant by row&lt;/i&gt; if the absolute value of each diagonal element is larger than the sum of the absolute values of the off-diagonal elements in the corresponding row.
                  &lt;tt&gt;returns true if for all i: abs(A[i,i]) &amp;gt; Sum(abs(A[i,j])); j != i.&lt;/tt&gt; 
                  Matrix may but need not be square.
                  &lt;p&gt;
                  Note: Ignores tolerance.                
            </javadoc>
            <method name="isDiagonallyDominantByRow" type="boolean" line="441">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="F" type="cern.jet.math.Functions" line="442"/>
                <declaration name="epsilon" type="double" line="443"/>
                <declaration name="min" type="int" line="444"/>
                <scope line="445">
                    <declaration name="diag" type="double" line="446"/>
                </scope>
            </method>
            <javadoc line="452">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is an &lt;i&gt;identity&lt;/i&gt; matrix if &lt;tt&gt;A[i,i] == 1&lt;/tt&gt; and all other cells are zero.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isIdentity" type="boolean" line="456">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="457"/>
                <declaration name="rows" type="int" line="458"/>
                <declaration name="columns" type="int" line="459"/>
                <scope line="460">
                    <scope line="461">
                        <declaration name="v" type="double" line="462"/>
                        <scope line="463"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="471">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;lower bidiagonal&lt;/i&gt; if &lt;tt&gt;A[i,j]==0&lt;/tt&gt; unless &lt;tt&gt;i==j || i==j+1&lt;/tt&gt;.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isLowerBidiagonal" type="boolean" line="475">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="476"/>
                <declaration name="rows" type="int" line="477"/>
                <declaration name="columns" type="int" line="478"/>
                <scope line="479">
                    <scope line="480">
                        <scope line="481"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="488">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;lower triangular&lt;/i&gt; if &lt;tt&gt;A[i,j]==0&lt;/tt&gt; whenever &lt;tt&gt;i &amp;lt; j&lt;/tt&gt;.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isLowerTriangular" type="boolean" line="492">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="493"/>
                <declaration name="rows" type="int" line="494"/>
                <declaration name="columns" type="int" line="495"/>
                <scope line="496">
                    <scope line="497"/>
                </scope>
            </method>
            <javadoc line="503">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;non-negative&lt;/i&gt; if &lt;tt&gt;A[i,j] &amp;gt;= 0&lt;/tt&gt; holds for all cells.
                  &lt;p&gt;
                  Note: Ignores tolerance.                
            </javadoc>
            <method name="isNonNegative" type="boolean" line="508">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="rows" type="int" line="509"/>
                <declaration name="columns" type="int" line="510"/>
                <scope line="511">
                    <scope line="512"/>
                </scope>
            </method>
            <javadoc line="518">
                A square matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;orthogonal&lt;/i&gt; if &lt;tt&gt;Atranspose(A) = I&lt;/tt&gt;.                
                <throws>
                    IllegalArgumentException if <tt>!isSquare(A)</tt>.                    
                </throws>
            </javadoc>
            <method name="isOrthogonal" type="boolean" line="522">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="526">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;positive&lt;/i&gt; if &lt;tt&gt;A[i,j] &amp;gt; 0&lt;/tt&gt; holds for all cells.
                  &lt;p&gt;
                  Note: Ignores tolerance.                
            </javadoc>
            <method name="isPositive" type="boolean" line="531">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="rows" type="int" line="532"/>
                <declaration name="columns" type="int" line="533"/>
                <scope line="534">
                    <scope line="535"/>
                </scope>
            </method>
            <javadoc line="541">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;singular&lt;/i&gt; if it has no inverse, that is, iff &lt;tt&gt;det(A)==0&lt;/tt&gt;.                
            </javadoc>
            <method name="isSingular" type="boolean" line="544">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="547">
                A square matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;skew-symmetric&lt;/i&gt; if &lt;tt&gt;A = -transpose(A)&lt;/tt&gt;, that is &lt;tt&gt;A[i,j] == -A[j,i]&lt;/tt&gt;.                
                <throws>
                    IllegalArgumentException if <tt>!isSquare(A)</tt>.                    
                </throws>
            </javadoc>
            <method name="isSkewSymmetric" type="boolean" line="551">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="553"/>
                <declaration name="rows" type="int" line="554"/>
                <declaration name="columns" type="int" line="555"/>
                <scope line="556">
                    <scope line="557"/>
                </scope>
            </method>
            <javadoc line="563">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;square&lt;/i&gt; if it has the same number of rows and columns.                
            </javadoc>
            <method name="isSquare" type="boolean" line="566">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="569">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;strictly lower triangular&lt;/i&gt; if &lt;tt&gt;A[i,j]==0&lt;/tt&gt; whenever &lt;tt&gt;i &amp;lt;= j&lt;/tt&gt;.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isStrictlyLowerTriangular" type="boolean" line="573">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="574"/>
                <declaration name="rows" type="int" line="575"/>
                <declaration name="columns" type="int" line="576"/>
                <scope line="577">
                    <scope line="578"/>
                </scope>
            </method>
            <javadoc line="584">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;strictly triangular&lt;/i&gt; if it is triangular and its diagonal elements all equal 0.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isStrictlyTriangular" type="boolean" line="588">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="590"/>
                <scope line="591"/>
            </method>
            <javadoc line="596">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;strictly upper triangular&lt;/i&gt; if &lt;tt&gt;A[i,j]==0&lt;/tt&gt; whenever &lt;tt&gt;i &amp;gt;= j&lt;/tt&gt;.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isStrictlyUpperTriangular" type="boolean" line="600">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="601"/>
                <declaration name="rows" type="int" line="602"/>
                <declaration name="columns" type="int" line="603"/>
                <scope line="604">
                    <scope line="605"/>
                </scope>
            </method>
            <javadoc line="611">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;symmetric&lt;/i&gt; if &lt;tt&gt;A = tranpose(A)&lt;/tt&gt;, that is &lt;tt&gt;A[i,j] == A[j,i]&lt;/tt&gt;.                
                <throws>
                    IllegalArgumentException if <tt>!isSquare(A)</tt>.                    
                </throws>
            </javadoc>
            <method name="isSymmetric" type="boolean" line="615">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="619">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;triangular&lt;/i&gt; iff it is either upper or lower triangular.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isTriangular" type="boolean" line="623">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="626">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;tridiagonal&lt;/i&gt; if &lt;tt&gt;A[i,j]==0&lt;/tt&gt; whenever &lt;tt&gt;Math.abs(i-j) &gt; 1&lt;/tt&gt;.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isTridiagonal" type="boolean" line="630">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="631"/>
                <declaration name="rows" type="int" line="632"/>
                <declaration name="columns" type="int" line="633"/>
                <scope line="634">
                    <scope line="635">
                        <scope line="636"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="643">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;unit triangular&lt;/i&gt; if it is triangular and its diagonal elements all equal 1.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isUnitTriangular" type="boolean" line="647">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="649"/>
                <scope line="650"/>
            </method>
            <javadoc line="655">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;upper bidiagonal&lt;/i&gt; if &lt;tt&gt;A[i,j]==0&lt;/tt&gt; unless &lt;tt&gt;i==j || i==j-1&lt;/tt&gt;.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isUpperBidiagonal" type="boolean" line="659">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="660"/>
                <declaration name="rows" type="int" line="661"/>
                <declaration name="columns" type="int" line="662"/>
                <scope line="663">
                    <scope line="664">
                        <scope line="665"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="672">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;upper triangular&lt;/i&gt; if &lt;tt&gt;A[i,j]==0&lt;/tt&gt; whenever &lt;tt&gt;i &amp;gt; j&lt;/tt&gt;.
                  Matrix may but need not be square.                
            </javadoc>
            <method name="isUpperTriangular" type="boolean" line="676">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="677"/>
                <declaration name="rows" type="int" line="678"/>
                <declaration name="columns" type="int" line="679"/>
                <scope line="680">
                    <scope line="681"/>
                </scope>
            </method>
            <javadoc line="687">
                A matrix &lt;tt&gt;A&lt;/tt&gt; is &lt;i&gt;zero&lt;/i&gt; if all its cells are zero.                
            </javadoc>
            <method name="isZero" type="boolean" line="690">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="693">
                The &lt;i&gt;lower bandwidth&lt;/i&gt; of a square matrix &lt;tt&gt;A&lt;/tt&gt; is the maximum &lt;tt&gt;i-j&lt;/tt&gt; for which &lt;tt&gt;A[i,j]&lt;/tt&gt; is nonzero and &lt;tt&gt;i &amp;gt; j&lt;/tt&gt;.
                  A &lt;i&gt;banded&lt;/i&gt; matrix has a &quot;band&quot; about the diagonal.
                  Diagonal, tridiagonal and triangular matrices are special cases.                
                <param>
                    A the square matrix to analyze.                    
                </param>
                <return>
                    the lower bandwith.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>!isSquare(A)</tt>.                    
                </throws>
                <see>
                    #semiBandwidth(DoubleMatrix2D)                    
                </see>
                <see>
                    #upperBandwidth(DoubleMatrix2D)                    
                </see>
            </javadoc>
            <method name="lowerBandwidth" type="int" line="703">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="705"/>
                <declaration name="rows" type="int" line="706"/>
                <scope line="707">
                    <scope line="708">
                        <declaration name="j" type="int" line="709"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="715">
                Returns the &lt;i&gt;semi-bandwidth&lt;/i&gt; of the given square matrix &lt;tt&gt;A&lt;/tt&gt;.
                  A &lt;i&gt;banded&lt;/i&gt; matrix has a &quot;band&quot; about the diagonal.
                  It is a matrix with all cells equal to zero, 
                  with the possible exception of the cells along the diagonal line,
                  the &lt;tt&gt;k&lt;/tt&gt; diagonal lines above the diagonal, and the &lt;tt&gt;k&lt;/tt&gt; diagonal lines below the diagonal.
                  The &lt;i&gt;semi-bandwith l&lt;/i&gt; is the number &lt;tt&gt;k+1&lt;/tt&gt;.
                  The &lt;i&gt;bandwidth p&lt;/i&gt; is the number &lt;tt&gt;2k + 1&lt;/tt&gt;.
                  For example, a tridiagonal matrix corresponds to &lt;tt&gt;k=1, l=2, p=3&lt;/tt&gt;, 
                  a diagonal or zero matrix corresponds to &lt;tt&gt;k=0, l=1, p=1&lt;/tt&gt;, 
                  &lt;p&gt;
                  The &lt;i&gt;upper bandwidth&lt;/i&gt; is the maximum &lt;tt&gt;j-i&lt;/tt&gt; for which &lt;tt&gt;A[i,j]&lt;/tt&gt; is nonzero and &lt;tt&gt;j &amp;gt; i&lt;/tt&gt;.
                  The &lt;i&gt;lower bandwidth&lt;/i&gt; is the maximum &lt;tt&gt;i-j&lt;/tt&gt; for which &lt;tt&gt;A[i,j]&lt;/tt&gt; is nonzero and &lt;tt&gt;i &amp;gt; j&lt;/tt&gt;. 
                  Diagonal, tridiagonal and triangular matrices are special cases.
                  &lt;p&gt;
                  Examples:
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td valign=&quot;middle&quot; align=&quot;left&quot;&gt;&lt;tt&gt;matrix&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; &lt;tt&gt;4&amp;nbsp;x&amp;nbsp;4&amp;nbsp;&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt; 4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt; 4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;1&amp;nbsp;1 &lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;1&lt;br&gt;
                  1&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1 &lt;/tt&gt;&lt;tt&gt; &lt;/tt&gt; &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;4&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1 &lt;/tt&gt; &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;upperBandwidth&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;1&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;3&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;1&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;2&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;lowerBandwidth&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;1&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;0&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;tt&gt;3&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;3&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;2&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;semiBandwidth&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;1&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;1&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;2&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;tt&gt;4&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;4&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;3&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;description&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;zero&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;diagonal&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;tridiagonal&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;upper triangular&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;tt&gt;lower triangular&lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;unstructured&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;&lt;tt&gt;unstructured&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    A the square matrix to analyze.                    
                </param>
                <return>
                    the semi-bandwith <tt>l</tt>.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>!isSquare(A)</tt>.                    
                </throws>
                <see>
                    #lowerBandwidth(DoubleMatrix2D)                    
                </see>
                <see>
                    #upperBandwidth(DoubleMatrix2D)                    
                </see>
            </javadoc>
            <method name="semiBandwidth" type="int" line="857">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="859"/>
                <declaration name="rows" type="int" line="860"/>
                <scope line="861">
                    <scope line="862">
                        <declaration name="j" type="int" line="863"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="870">
                Sets the tolerance to &lt;tt&gt;Math.abs(newTolerance)&lt;/tt&gt;.                
                <throws>
                    UnsupportedOperationException if <tt>this==DEFAULT || this==ZERO || this==TWELVE</tt>.                    
                </throws>
            </javadoc>
            <method name="setTolerance" type="void" line="874">
                <params>
                    <param name="newTolerance" type="double"/>
                </params>
                <scope line="875"/>
            </method>
            <javadoc line="880">
                Returns the current tolerance.                
            </javadoc>
            <method name="tolerance" type="double" line="883"/>
            <javadoc line="886">
                Returns summary information about the given matrix &lt;tt&gt;A&lt;/tt&gt;.
                  That is a String with (propertyName, propertyValue) pairs.
                  Useful for debugging or to quickly get the rough picture of a matrix.
                  For example,
                  &lt;pre&gt;
                  density                      : 0.9
                  isDiagonal                   : false
                  isDiagonallyDominantByRow    : false
                  isDiagonallyDominantByColumn : false
                  isIdentity                   : false
                  isLowerBidiagonal            : false
                  isLowerTriangular            : false
                  isNonNegative                : true
                  isOrthogonal                 : Illegal operation or error: Matrix must be square.
                  isPositive                   : true
                  isSingular                   : Illegal operation or error: Matrix must be square.
                  isSkewSymmetric              : Illegal operation or error: Matrix must be square.
                  isSquare                     : false
                  isStrictlyLowerTriangular    : false
                  isStrictlyTriangular         : false
                  isStrictlyUpperTriangular    : false
                  isSymmetric                  : Illegal operation or error: Matrix must be square.
                  isTriangular                 : false
                  isTridiagonal                : false
                  isUnitTriangular             : false
                  isUpperBidiagonal            : false
                  isUpperTriangular            : false
                  isZero                       : false
                  lowerBandwidth               : Illegal operation or error: Matrix must be square.
                  semiBandwidth                : Illegal operation or error: Matrix must be square.
                  upperBandwidth               : Illegal operation or error: Matrix must be square.
                  &lt;/pre&gt;                
            </javadoc>
            <method name="toString" type="String" line="920">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="names" type="cern.colt.list.ObjectArrayList" line="921"/>
                <declaration name="values" type="cern.colt.list.ObjectArrayList" line="922"/>
                <declaration name="unknown" type="String" line="923"/>
                <scope line="925"/>
                <scope line="928"/>
                <scope line="932"/>
                <scope line="935"/>
                <scope line="939"/>
                <scope line="942"/>
                <scope line="946"/>
                <scope line="949"/>
                <scope line="953"/>
                <scope line="956"/>
                <scope line="960"/>
                <scope line="963"/>
                <scope line="967"/>
                <scope line="970"/>
                <scope line="974"/>
                <scope line="977"/>
                <scope line="981"/>
                <scope line="984"/>
                <scope line="988"/>
                <scope line="991"/>
                <scope line="995"/>
                <scope line="998"/>
                <scope line="1002"/>
                <scope line="1005"/>
                <scope line="1009"/>
                <scope line="1012"/>
                <scope line="1016"/>
                <scope line="1019"/>
                <scope line="1023"/>
                <scope line="1026"/>
                <scope line="1030"/>
                <scope line="1033"/>
                <scope line="1037"/>
                <scope line="1040"/>
                <scope line="1044"/>
                <scope line="1047"/>
                <scope line="1051"/>
                <scope line="1054"/>
                <scope line="1058"/>
                <scope line="1061"/>
                <scope line="1065"/>
                <scope line="1068"/>
                <scope line="1072"/>
                <scope line="1075"/>
                <scope line="1079"/>
                <scope line="1082"/>
                <scope line="1086"/>
                <scope line="1089"/>
                <scope line="1093"/>
                <scope line="1096"/>
                <scope line="1100"/>
                <scope line="1103"/>
                <anonymous_class line="1106">
                    <method name="compare" type="int" line="1107">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="comp" type="cern.colt.function.IntComparator" line="1106"/>
                <anonymous_class line="1112">
                    <method name="swap" type="void" line="1113">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                        <declaration name="tmp" type="Object" line="1114"/>
                    </method>
                </anonymous_class>
                <declaration name="swapper" type="cern.colt.Swapper" line="1112"/>
                <declaration name="maxLength" type="int" line="1125"/>
                <scope line="1126">
                    <declaration name="length" type="int" line="1127"/>
                </scope>
                <declaration name="buf" type="StringBuffer" line="1130"/>
                <scope line="1131">
                    <declaration name="name" type="String" line="1132"/>
                </scope>
            </method>
            <javadoc line="1141">
                The &lt;i&gt;upper bandwidth&lt;/i&gt; of a square matrix &lt;tt&gt;A&lt;/tt&gt; is the 
                  maximum &lt;tt&gt;j-i&lt;/tt&gt; for which &lt;tt&gt;A[i,j]&lt;/tt&gt; is nonzero and &lt;tt&gt;j &amp;gt; i&lt;/tt&gt;.
                  A &lt;i&gt;banded&lt;/i&gt; matrix has a &quot;band&quot; about the diagonal. 
                  Diagonal, tridiagonal and triangular matrices are special cases.                
                <param>
                    A the square matrix to analyze.                    
                </param>
                <return>
                    the upper bandwith.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>!isSquare(A)</tt>.                    
                </throws>
                <see>
                    #semiBandwidth(DoubleMatrix2D)                    
                </see>
                <see>
                    #lowerBandwidth(DoubleMatrix2D)                    
                </see>
            </javadoc>
            <method name="upperBandwidth" type="int" line="1152">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="epsilon" type="double" line="1154"/>
                <declaration name="rows" type="int" line="1155"/>
                <scope line="1156">
                    <scope line="1157">
                        <declaration name="j" type="int" line="1158"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>