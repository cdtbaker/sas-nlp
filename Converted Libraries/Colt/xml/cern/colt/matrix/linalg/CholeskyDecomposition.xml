<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.linalg">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="CholeskyDecomposition" line="4">
            <implements interface="java.io.Serializable"/>
            <javadoc line="4">
                For a symmetric, positive definite matrix &lt;tt&gt;A&lt;/tt&gt;, the Cholesky decomposition
                  is a lower triangular matrix &lt;tt&gt;L&lt;/tt&gt; so that &lt;tt&gt;A = LL&apos;&lt;/tt&gt;;
                  If the matrix is not symmetric or positive definite, the constructor
                  returns a partial decomposition and sets an internal flag that may
                  be queried by the &lt;tt&gt;isSymmetricPositiveDefinite()&lt;/tt&gt; method.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="12"/>
            <declaration name="L" type="DoubleMatrix2D" line="13"/>
            <javadoc line="13">
                Array for internal storage of decomposition.                
                <serial>
                    internal array storage.                    
                </serial>
            </javadoc>
            <declaration name="n" type="int" line="18"/>
            <javadoc line="18">
                Row and column dimension (square matrix).                
                <serial>
                    matrix dimension.                    
                </serial>
            </javadoc>
            <declaration name="isSymmetricPositiveDefinite" type="boolean" line="23"/>
            <javadoc line="23">
                Symmetric and positive definite flag.                
                <serial>
                    is symmetric and positive definite flag.                    
                </serial>
            </javadoc>
            <javadoc line="28">
                Constructs and returns a new Cholesky decomposition object for a symmetric and positive definite matrix; 
                  The decomposed matrices can be retrieved via instance methods of the returned decomposition object.                
                <param>
                    A   Square, symmetric matrix.                    
                </param>
                <return>
                    Structure to access <tt>L</tt> and <tt>isSymmetricPositiveDefinite</tt> flag.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>A</tt> is not square.                    
                </throws>
            </javadoc>
            <method name="CholeskyDecomposition" type="constructor" line="35">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="Lrows" type="DoubleMatrix1D[]" line="40"/>
                <scope line="42">
                    <declaration name="d" type="double" line="43"/>
                    <scope line="44">
                        <declaration name="s" type="double" line="45"/>
                    </scope>
                    <scope line="54"/>
                </scope>
            </method>
            <javadoc line="59">
                Returns the triangular factor, &lt;tt&gt;L&lt;/tt&gt;.                
                <return>
                    <tt>L</tt>                    
                </return>
            </javadoc>
            <method name="getL" type="DoubleMatrix2D" line="63"/>
            <javadoc line="66">
                Returns whether the matrix &lt;tt&gt;A&lt;/tt&gt; is symmetric and positive definite.                
                <return>
                    true if <tt>A</tt> is symmetric and positive definite; false otherwise                    
                </return>
            </javadoc>
            <method name="isSymmetricPositiveDefinite" type="boolean" line="70"/>
            <javadoc line="73">
                Solves &lt;tt&gt;AX = B&lt;/tt&gt;; returns &lt;tt&gt;X&lt;/tt&gt;.                
                <param>
                    B   A Matrix with as many rows as <tt>A</tt> and any number of columns.                    
                </param>
                <return>
                    <tt>X</tt> so that <tt>LL'X = B</tt>.                    
                </return>
                <exception>
                    IllegalArgumentException  if <tt>B.rows() != A.rows()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if <tt>!isSymmetricPositiveDefinite()</tt>.                    
                </exception>
            </javadoc>
            <method name="solve" type="DoubleMatrix2D" line="80">
                <params>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <declaration name="X" type="DoubleMatrix2D" line="81"/>
                <declaration name="nx" type="int" line="82"/>
                <scope line="83">
                    <scope line="84">
                        <declaration name="sum" type="double" line="85"/>
                        <scope line="86"/>
                    </scope>
                    <scope line="91">
                        <declaration name="sum" type="double" line="92"/>
                        <scope line="93"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="101">
                Solves &lt;tt&gt;AX = B&lt;/tt&gt;; returns &lt;tt&gt;X&lt;/tt&gt;.                
                <param>
                    B   A Matrix with as many rows as <tt>A</tt> and any number of columns.                    
                </param>
                <return>
                    <tt>X</tt> so that <tt>LL'X = B</tt>.                    
                </return>
                <exception>
                    IllegalArgumentException  if <tt>B.rows() != A.rows()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if <tt>!isSymmetricPositiveDefinite()</tt>.                    
                </exception>
            </javadoc>
            <method name="XXXsolveBuggy" type="DoubleMatrix2D" line="108">
                <params>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <declaration name="F" type="cern.jet.math.Functions" line="109"/>
                <scope line="110"/>
                <scope line="113"/>
                <declaration name="X" type="DoubleMatrix2D" line="116"/>
                <declaration name="nx" type="int" line="117"/>
                <declaration name="Xrows" type="DoubleMatrix1D[]" line="118"/>
                <scope line="120">
                    <scope line="121"/>
                </scope>
                <scope line="126">
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="134">
                Returns a String with (propertyName, propertyValue) pairs.
                  Useful for debugging or to quickly get the rough picture.
                  For example,
                  &lt;pre&gt;
                  rank          : 3
                  trace         : 0
                  &lt;/pre&gt;                
            </javadoc>
            <method name="toString" type="String" line="143">
                <declaration name="buf" type="StringBuffer" line="144"/>
                <declaration name="unknown" type="String" line="145"/>
                <scope line="150"/>
                <scope line="153"/>
                <scope line="157"/>
                <scope line="160"/>
                <scope line="164"/>
                <scope line="167"/>
            </method>
        </class>
    </source>