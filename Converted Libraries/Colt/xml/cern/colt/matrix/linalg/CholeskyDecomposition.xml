<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.linalg">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="CholeskyDecomposition" line="13">
            <implements interface="java.io.Serializable"/>
            <javadoc line="13">
                For a symmetric, positive definite matrix &lt;tt&gt;A&lt;/tt&gt;, the Cholesky decomposition
                  is a lower triangular matrix &lt;tt&gt;L&lt;/tt&gt; so that &lt;tt&gt;A = LL&apos;&lt;/tt&gt;;
                  If the matrix is not symmetric or positive definite, the constructor
                  returns a partial decomposition and sets an internal flag that may
                  be queried by the &lt;tt&gt;isSymmetricPositiveDefinite()&lt;/tt&gt; method.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="21"/>
            <declaration name="L" type="DoubleMatrix2D" line="22"/>
            <javadoc line="22">
                Array for internal storage of decomposition.                
                <serial>
                    internal array storage.                    
                </serial>
            </javadoc>
            <declaration name="n" type="int" line="28"/>
            <javadoc line="28">
                Row and column dimension (square matrix).                
                <serial>
                    matrix dimension.                    
                </serial>
            </javadoc>
            <declaration name="isSymmetricPositiveDefinite" type="boolean" line="33"/>
            <javadoc line="33">
                Symmetric and positive definite flag.                
                <serial>
                    is symmetric and positive definite flag.                    
                </serial>
            </javadoc>
            <javadoc line="37">
                Constructs and returns a new Cholesky decomposition object for a symmetric and positive definite matrix; 
                  The decomposed matrices can be retrieved via instance methods of the returned decomposition object.                
                <param>
                    A   Square, symmetric matrix.                    
                </param>
                <return>
                    Structure to access <tt>L</tt> and <tt>isSymmetricPositiveDefinite</tt> flag.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>A</tt> is not square.                    
                </throws>
            </javadoc>
            <method name="CholeskyDecomposition" type="constructor" line="45">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <comment line="48">
                    Initialize.
                    double[][] A = Arg.getArray();                    
                </comment>
                <comment line="52">
                    L = new double[n][n];                    
                </comment>
                <comment line="56">
                    precompute and cache some views to avoid regenerating them time and again                    
                </comment>
                <comment line="60">
                    Main loop.                    
                </comment>
                <comment line="62">
                    double[] Lrowj = L[j];
                    DoubleMatrix1D Lrowj = L.viewRow(j);                    
                </comment>
                <comment line="66">
                    double[] Lrowk = L[k];                    
                </comment>
                <comment line="68">
                    DoubleMatrix1D Lrowk = L.viewRow(k);
                    double s = 0.0;
                    for (int i = 0; i &lt; k; i++) {
                    s += Lrowk.getQuick(i)Lrowj.getQuick(i);
                    }                    
                </comment>
                <declaration name="Lrows" type="DoubleMatrix1D[]" line="56"/>
                <scope line="60">
                    <declaration name="d" type="double" line="63"/>
                    <scope line="64">
                        <declaration name="s" type="double" line="66"/>
                    </scope>
                    <scope line="83"/>
                </scope>
            </method>
            <javadoc line="88">
                Returns the triangular factor, &lt;tt&gt;L&lt;/tt&gt;.                
                <return>
                    <tt>L</tt>                    
                </return>
            </javadoc>
            <method name="getL" type="DoubleMatrix2D" line="92"/>
            <javadoc line="95">
                Returns whether the matrix &lt;tt&gt;A&lt;/tt&gt; is symmetric and positive definite.                
                <return>
                    true if <tt>A</tt> is symmetric and positive definite; false otherwise                    
                </return>
            </javadoc>
            <method name="isSymmetricPositiveDefinite" type="boolean" line="99"/>
            <javadoc line="102">
                Solves &lt;tt&gt;AX = B&lt;/tt&gt;; returns &lt;tt&gt;X&lt;/tt&gt;.                
                <param>
                    B   A Matrix with as many rows as <tt>A</tt> and any number of columns.                    
                </param>
                <return>
                    <tt>X</tt> so that <tt>LL'X = B</tt>.                    
                </return>
                <exception>
                    IllegalArgumentException  if <tt>B.rows() != A.rows()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if <tt>!isSymmetricPositiveDefinite()</tt>.                    
                </exception>
            </javadoc>
            <method name="solve" type="DoubleMatrix2D" line="109">
                <params>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <comment line="111">
                    Copy right hand side.                    
                </comment>
                <comment line="115">
                    fix by MG Ferreira &lt;mgf@webmail.co.za&gt;
                     old code is in method xxxSolveBuggy()                    
                </comment>
                <comment line="118">
                    Solve L*Y = B;                    
                </comment>
                <comment line="127">
                    Solve L&apos;*X = Y;                    
                </comment>
                <declaration name="X" type="DoubleMatrix2D" line="111"/>
                <declaration name="nx" type="int" line="112"/>
                <scope line="116">
                    <scope line="118">
                        <declaration name="sum" type="double" line="119"/>
                        <scope line="120"/>
                    </scope>
                    <scope line="127">
                        <declaration name="sum" type="double" line="128"/>
                        <scope line="129"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="138">
                Solves &lt;tt&gt;AX = B&lt;/tt&gt;; returns &lt;tt&gt;X&lt;/tt&gt;.                
                <param>
                    B   A Matrix with as many rows as <tt>A</tt> and any number of columns.                    
                </param>
                <return>
                    <tt>X</tt> so that <tt>LL'X = B</tt>.                    
                </return>
                <exception>
                    IllegalArgumentException  if <tt>B.rows() != A.rows()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if <tt>!isSymmetricPositiveDefinite()</tt>.                    
                </exception>
            </javadoc>
            <method name="XXXsolveBuggy" type="DoubleMatrix2D" line="145">
                <params>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <comment line="155">
                    Copy right hand side.                    
                </comment>
                <comment line="159">
                    precompute and cache some views to avoid regenerating them time and again                    
                </comment>
                <comment line="163">
                    Solve L*Y = B;                    
                </comment>
                <comment line="166">
                    X[i,j] -= X[k,j]*L[i,k]                    
                </comment>
                <comment line="172">
                    Solve L&apos;*X = Y;                    
                </comment>
                <comment line="176">
                    X[i,j] -= X[k,j]*L[k,i]                    
                </comment>
                <declaration name="F" type="cern.jet.math.Functions" line="146"/>
                <scope line="147"/>
                <scope line="150"/>
                <declaration name="X" type="DoubleMatrix2D" line="155"/>
                <declaration name="nx" type="int" line="156"/>
                <declaration name="Xrows" type="DoubleMatrix1D[]" line="159"/>
                <scope line="163">
                    <scope line="164"/>
                </scope>
                <scope line="172">
                    <scope line="174"/>
                </scope>
            </method>
            <javadoc line="182">
                Returns a String with (propertyName, propertyValue) pairs.
                  Useful for debugging or to quickly get the rough picture.
                  For example,
                  &lt;pre&gt;
                  rank          : 3
                  trace         : 0
                  &lt;/pre&gt;                
            </javadoc>
            <method name="toString" type="String" line="191">
                <declaration name="buf" type="StringBuffer" line="192"/>
                <declaration name="unknown" type="String" line="193"/>
                <scope line="200"/>
                <scope line="201"/>
                <scope line="204"/>
                <scope line="205"/>
                <scope line="208"/>
                <scope line="209"/>
            </method>
        </class>
    </source>