<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.linalg">
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="LUDecomposition" line="3">
            <implements interface="java.io.Serializable"/>
            <javadoc line="3">
                For an &lt;tt&gt;m x n&lt;/tt&gt; matrix &lt;tt&gt;A&lt;/tt&gt; with &lt;tt&gt;m &gt;= n&lt;/tt&gt;, the LU decomposition is an &lt;tt&gt;m x n&lt;/tt&gt;
                  unit lower triangular matrix &lt;tt&gt;L&lt;/tt&gt;, an &lt;tt&gt;n x n&lt;/tt&gt; upper triangular matrix &lt;tt&gt;U&lt;/tt&gt;,
                  and a permutation vector &lt;tt&gt;piv&lt;/tt&gt; of length &lt;tt&gt;m&lt;/tt&gt; so that &lt;tt&gt;A(piv,:) = LU&lt;/tt&gt;;
                  If &lt;tt&gt;m &lt; n&lt;/tt&gt;, then &lt;tt&gt;L&lt;/tt&gt; is &lt;tt&gt;m x m&lt;/tt&gt; and &lt;tt&gt;U&lt;/tt&gt; is &lt;tt&gt;m x n&lt;/tt&gt;.
                  &lt;P&gt;
                  The LU decomposition with pivoting always exists, even if the matrix is
                  singular, so the constructor will never fail.  The primary use of the
                  LU decomposition is in the solution of square systems of simultaneous
                  linear equations.  This will fail if &lt;tt&gt;isNonsingular()&lt;/tt&gt; returns false.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="15"/>
            <declaration name="quick" type="LUDecompositionQuick" line="16"/>
            <javadoc line="17">
                Constructs and returns a new LU Decomposition object; 
                  The decomposed matrices can be retrieved via instance methods of the returned decomposition object.                
                <param>
                    A   Rectangular matrix                    
                </param>
                <return>
                    Structure to access L, U and piv.                    
                </return>
            </javadoc>
            <method name="LUDecomposition" type="constructor" line="23">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="27">
                Returns the determinant, &lt;tt&gt;det(A)&lt;/tt&gt;.                
                <exception>
                    IllegalArgumentException  Matrix must be square                    
                </exception>
            </javadoc>
            <method name="det" type="double" line="31"/>
            <javadoc line="34">
                Returns pivot permutation vector as a one-dimensional double array                
                <return>
                    (double) piv                    
                </return>
            </javadoc>
            <method name="getDoublePivot" type="double[]" line="38"/>
            <javadoc line="41">
                Returns the lower triangular factor, &lt;tt&gt;L&lt;/tt&gt;.                
                <return>
                    <tt>L</tt>                    
                </return>
            </javadoc>
            <method name="getL" type="DoubleMatrix2D" line="45"/>
            <javadoc line="48">
                Returns a copy of the pivot permutation vector.                
                <return>
                    piv                    
                </return>
            </javadoc>
            <method name="getPivot" type="int[]" line="52"/>
            <javadoc line="55">
                Returns the upper triangular factor, &lt;tt&gt;U&lt;/tt&gt;.                
                <return>
                    <tt>U</tt>                    
                </return>
            </javadoc>
            <method name="getU" type="DoubleMatrix2D" line="59"/>
            <javadoc line="62">
                Returns whether the matrix is nonsingular (has an inverse).                
                <return>
                    true if <tt>U</tt>, and hence <tt>A</tt>, is nonsingular; false otherwise.                    
                </return>
            </javadoc>
            <method name="isNonsingular" type="boolean" line="66"/>
            <javadoc line="69">
                Solves &lt;tt&gt;AX = B&lt;/tt&gt;.                
                <param>
                    B   A matrix with as many rows as <tt>A</tt> and any number of columns.                    
                </param>
                <return>
                    <tt>X</tt> so that <tt>LUX = B(piv,:)</tt>.                    
                </return>
                <exception>
                    IllegalArgumentException if </tt>B.rows() != A.rows()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if A is singular, that is, if <tt>!this.isNonsingular()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if <tt>A.rows() < A.columns()</tt>.                    
                </exception>
            </javadoc>
            <method name="solve" type="DoubleMatrix2D" line="77">
                <params>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <declaration name="X" type="DoubleMatrix2D" line="78"/>
            </method>
            <javadoc line="82">
                Returns a String with (propertyName, propertyValue) pairs.
                  Useful for debugging or to quickly get the rough picture.
                  For example,
                  &lt;pre&gt;
                  rank          : 3
                  trace         : 0
                  &lt;/pre&gt;                
            </javadoc>
            <method name="toString" type="String" line="91"/>
        </class>
    </source>