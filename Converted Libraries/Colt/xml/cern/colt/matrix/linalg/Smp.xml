<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.linalg">
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <import package="EDU.oswego.cs.dl.util.concurrent.FJTask"/>
        <import package="EDU.oswego.cs.dl.util.concurrent.FJTaskRunnerGroup"/>
        <class name="Smp" line="16">
            <comment line="18">
                a very efficient and light weight thread pool                
            </comment>
            <declaration name="taskGroup" type="FJTaskRunnerGroup" line="17"/>
            <declaration name="maxThreads" type="int" line="19"/>
            <javadoc line="20">
                Constructs a new Smp using a maximum of &lt;tt&gt;maxThreads&lt;tt&gt; threads.                
            </javadoc>
            <method name="Smp" type="constructor" line="23">
                <params>
                    <param name="maxThreads" type="int"/>
                </params>
                <comment line="30">
                    avoid parallel overhead                    
                </comment>
                <scope line="26"/>
                <scope line="29"/>
            </method>
            <javadoc line="33">
                Clean up deamon threads, if necessary.                
            </javadoc>
            <method name="finalize" type="void" line="36"/>
            <method name="run" type="void" line="39">
                <params>
                    <param name="blocksA" type="DoubleMatrix2D[]"/>
                    <param name="blocksB" type="DoubleMatrix2D[]"/>
                    <param name="results" type="double[]"/>
                    <param name="function" type="Matrix2DMatrix2DFunction"/>
                </params>
                <comment line="48">
                    System.out.print(&quot;.&quot;);                    
                </comment>
                <comment line="53">
                    run tasks and wait for completion                    
                </comment>
                <declaration name="subTasks" type="FJTask[]" line="40"/>
                <scope line="41">
                    <declaration name="k" type="int" line="42"/>
                    <anonymous_class line="43">
                        <method name="run" type="void" line="44">
                            <comment line="48">
                                System.out.print(&quot;.&quot;);                                
                            </comment>
                            <declaration name="result" type="double" line="45"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="53">
                    <anonymous_class line="55">
                        <method name="run" type="void" line="56"/>
                    </anonymous_class>
                </scope>
                <scope line="61"/>
            </method>
            <method name="splitBlockedNN" type="DoubleMatrix2D[]" line="63">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="threshold" type="int"/>
                    <param name="flops" type="long"/>
                </params>
                <comment line="65">
                    determine how to split and parallelize best into blocks
                    if more B.columns than tasks --&gt; split B.columns, as follows:
                    
                    xx|xx|xxx B
                    xx|xx|xxx
                    xx|xx|xxx
                    A
                    xxx     xx|xx|xxx C
                    xxx		xx|xx|xxx
                    xxx		xx|xx|xxx
                    xxx		xx|xx|xxx
                    xxx		xx|xx|xxx
                    
                    if less B.columns than tasks --&gt; split A.rows, as follows:
                    
                    xxxxxxx B
                    xxxxxxx
                    xxxxxxx
                    A
                    xxx     xxxxxxx C
                    xxx     xxxxxxx
                    ---     -------
                    xxx     xxxxxxx
                    xxx     xxxxxxx
                    ---     -------
                    xxx     xxxxxxx                    
                </comment>
                <comment line="94">
                    long flops = 2L*A.rows()*A.columns()*A.columns();                    
                </comment>
                <comment line="95">
                    each thread should process at least 30000 flops                    
                </comment>
                <comment line="97">
                    boolean splitHoriz = (A.columns() &gt;= noOfTasks);                    
                </comment>
                <comment line="101">
                    parallelization doesn&apos;t pay off (too much start up overhead)                    
                </comment>
                <comment line="105">
                    set up concurrent tasks                    
                </comment>
                <comment line="110">
                    last span may be a bit larger                    
                </comment>
                <comment line="113">
                    split B along columns into blocks                    
                </comment>
                <comment line="116">
                    split A along rows into blocks                    
                </comment>
                <declaration name="noOfTasks" type="int" line="94"/>
                <declaration name="splitHoriz" type="boolean" line="95"/>
                <declaration name="p" type="int" line="97"/>
                <scope line="100"/>
                <declaration name="span" type="int" line="105"/>
                <declaration name="blocks" type="DoubleMatrix2D[]" line="106"/>
                <scope line="107">
                    <declaration name="offset" type="int" line="108"/>
                    <declaration name="AA" type="DoubleMatrix2D" line="111"/>
                    <scope line="112"/>
                    <scope line="115"/>
                </scope>
            </method>
            <method name="splitBlockedNN" type="DoubleMatrix2D[][]" line="121">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                    <param name="threshold" type="int"/>
                    <param name="flops" type="long"/>
                </params>
                <declaration name="blocksA" type="DoubleMatrix2D[]" line="122"/>
                <declaration name="blocksB" type="DoubleMatrix2D[]" line="124"/>
                <declaration name="blocks" type="DoubleMatrix2D[][]" line="126"/>
            </method>
            <method name="splitStridedNN" type="DoubleMatrix2D[]" line="129">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="threshold" type="int"/>
                    <param name="flops" type="long"/>
                </params>
                <comment line="131">
                    determine how to split and parallelize best into blocks
                    if more B.columns than tasks --&gt; split B.columns, as follows:
                    
                    xx|xx|xxx B
                    xx|xx|xxx
                    xx|xx|xxx
                    A
                    xxx     xx|xx|xxx C
                    xxx		xx|xx|xxx
                    xxx		xx|xx|xxx
                    xxx		xx|xx|xxx
                    xxx		xx|xx|xxx
                    
                    if less B.columns than tasks --&gt; split A.rows, as follows:
                    
                    xxxxxxx B
                    xxxxxxx
                    xxxxxxx
                    A
                    xxx     xxxxxxx C
                    xxx     xxxxxxx
                    ---     -------
                    xxx     xxxxxxx
                    xxx     xxxxxxx
                    ---     -------
                    xxx     xxxxxxx                    
                </comment>
                <comment line="160">
                    long flops = 2L*A.rows()*A.columns()*A.columns();                    
                </comment>
                <comment line="161">
                    each thread should process at least 30000 flops                    
                </comment>
                <comment line="163">
                    boolean splitHoriz = (A.columns() &gt;= noOfTasks);                    
                </comment>
                <comment line="167">
                    parallelization doesn&apos;t pay off (too much start up overhead)                    
                </comment>
                <comment line="171">
                    set up concurrent tasks                    
                </comment>
                <comment line="176">
                    last span may be a bit larger                    
                </comment>
                <comment line="180">
                    split B along columns into blocks                    
                </comment>
                <comment line="184">
                    split A along rows into blocks                    
                </comment>
                <declaration name="noOfTasks" type="int" line="160"/>
                <declaration name="splitHoriz" type="boolean" line="161"/>
                <declaration name="p" type="int" line="163"/>
                <scope line="166"/>
                <declaration name="span" type="int" line="171"/>
                <declaration name="blocks" type="DoubleMatrix2D[]" line="172"/>
                <scope line="173">
                    <declaration name="offset" type="int" line="174"/>
                    <declaration name="AA" type="DoubleMatrix2D" line="177"/>
                    <scope line="178"/>
                    <scope line="182"/>
                </scope>
            </method>
            <javadoc line="189">
                Prints various snapshot statistics to System.out; Simply delegates to {@link EDU.oswego.cs.dl.util.concurrent.FJTaskRunnerGroup#stats}.                
            </javadoc>
            <method name="stats" type="void" line="192"/>
        </class>
    </source>