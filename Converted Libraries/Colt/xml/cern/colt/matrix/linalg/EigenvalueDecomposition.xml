<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.linalg">
        <import package="cern.colt.matrix.DoubleFactory1D"/>
        <import package="cern.colt.matrix.DoubleFactory2D"/>
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="EigenvalueDecomposition" line="15">
            <comment line="65">
                Complex scalar division.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="15">
                Eigenvalues and eigenvectors of a real matrix &lt;tt&gt;A&lt;/tt&gt;. 
                  &lt;P&gt;
                  If &lt;tt&gt;A&lt;/tt&gt; is symmetric, then &lt;tt&gt;A = VDV&apos;&lt;/tt&gt; where the eigenvalue matrix &lt;tt&gt;D&lt;/tt&gt; is
                  diagonal and the eigenvector matrix &lt;tt&gt;V&lt;/tt&gt; is orthogonal.
                  I.e. &lt;tt&gt;A = V.mult(D.mult(transpose(V)))&lt;/tt&gt; and 
                  &lt;tt&gt;V.mult(transpose(V))&lt;/tt&gt; equals the identity matrix.
                  &lt;P&gt;
                  If &lt;tt&gt;A&lt;/tt&gt; is not symmetric, then the eigenvalue matrix &lt;tt&gt;D&lt;/tt&gt; is block diagonal
                  with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
                  &lt;tt&gt;lambda + imu&lt;/tt&gt;, in 2-by-2 blocks, &lt;tt&gt;[lambda, mu; -mu, lambda]&lt;/tt&gt;. 
                  The columns of &lt;tt&gt;V&lt;/tt&gt; represent the eigenvectors in the sense that &lt;tt&gt;AV = VD&lt;/tt&gt;,
                  i.e. &lt;tt&gt;A.mult(V) equals V.mult(D)&lt;/tt&gt;.  The matrix &lt;tt&gt;V&lt;/tt&gt; may be badly
                  conditioned, or even singular, so the validity of the equation
                  &lt;tt&gt;A = VDinverse(V)&lt;/tt&gt; depends upon &lt;tt&gt;Algebra.cond(V)&lt;/tt&gt;.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="33"/>
            <declaration name="n" type="int" line="34"/>
            <javadoc line="34">
                Row and column dimension (square matrix).                
                <serial>
                    matrix dimension.                    
                </serial>
            </javadoc>
            <declaration name="issymmetric" type="boolean" line="39"/>
            <javadoc line="39">
                Symmetry flag.                
                <serial>
                    internal symmetry flag.                    
                </serial>
            </javadoc>
            <declaration name="d" type="double[]" line="44"/>
            <javadoc line="44">
                Arrays for internal storage of eigenvalues.                
                <serial>
                    internal storage of eigenvalues.                    
                </serial>
            </javadoc>
            <declaration name="V" type="double[][]" line="49"/>
            <javadoc line="49">
                Array for internal storage of eigenvectors.                
                <serial>
                    internal storage of eigenvectors.                    
                </serial>
            </javadoc>
            <declaration name="H" type="double[][]" line="54"/>
            <javadoc line="54">
                Array for internal storage of nonsymmetric Hessenberg form.                
                <serial>
                    internal storage of nonsymmetric Hessenberg form.                    
                </serial>
            </javadoc>
            <declaration name="ort" type="double[]" line="59"/>
            <javadoc line="59">
                Working storage for nonsymmetric algorithm.                
                <serial>
                    working storage for nonsymmetric algorithm.                    
                </serial>
            </javadoc>
            <declaration name="cdivr" type="double" line="66"/>
            <javadoc line="67">
                Constructs and returns a new eigenvalue decomposition object; 
                  The decomposed matrices can be retrieved via instance methods of the returned decomposition object.
                  Checks for symmetry, then constructs the eigenvalue decomposition.                
                <param>
                    A    A square matrix.                    
                </param>
                <return>
                    A decomposition object to access <tt>D</tt> and <tt>V</tt>.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>A</tt> is not square.                    
                </throws>
            </javadoc>
            <method name="EigenvalueDecomposition" type="constructor" line="75">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <comment line="92">
                    Tridiagonalize.                    
                </comment>
                <comment line="95">
                    Diagonalize.                    
                </comment>
                <comment line="109">
                    Reduce to Hessenberg form.                    
                </comment>
                <comment line="112">
                    Reduce Hessenberg to real Schur form.                    
                </comment>
                <scope line="85">
                    <scope line="86">
                        <scope line="87"/>
                    </scope>
                </scope>
                <scope line="99">
                    <scope line="103">
                        <scope line="104"/>
                    </scope>
                </scope>
            </method>
            <method name="cdiv" type="void" line="116">
                <params>
                    <param name="xr" type="double"/>
                    <param name="xi" type="double"/>
                    <param name="yr" type="double"/>
                    <param name="yi" type="double"/>
                </params>
                <declaration name="r" type="double" line="117"/>
                <scope line="118"/>
                <scope line="124"/>
            </method>
            <javadoc line="131">
                Returns the block diagonal eigenvalue matrix, &lt;tt&gt;D&lt;/tt&gt;.                
                <return>
                    <tt>D</tt>                    
                </return>
            </javadoc>
            <method name="getD" type="DoubleMatrix2D" line="135">
                <declaration name="D" type="double[][]" line="136"/>
                <scope line="137">
                    <scope line="138"/>
                    <scope line="142"/>
                    <scope line="145"/>
                </scope>
            </method>
            <javadoc line="151">
                Returns the imaginary parts of the eigenvalues.                
                <return>
                    imag(diag(D))                    
                </return>
            </javadoc>
            <method name="getImagEigenvalues" type="DoubleMatrix1D" line="155"/>
            <javadoc line="158">
                Returns the real parts of the eigenvalues.                
                <return>
                    real(diag(D))                    
                </return>
            </javadoc>
            <method name="getRealEigenvalues" type="DoubleMatrix1D" line="162"/>
            <javadoc line="165">
                Returns the eigenvector matrix, &lt;tt&gt;V&lt;/tt&gt;                
                <return>
                    <tt>V</tt>                    
                </return>
            </javadoc>
            <method name="getV" type="DoubleMatrix2D" line="169"/>
            <javadoc line="172">
                Nonsymmetric reduction from Hessenberg to real Schur form.                
            </javadoc>
            <method name="hqr2" type="void" line="175">
                <comment line="176">
                    This is derived from the Algol procedure hqr2,                    
                </comment>
                <comment line="177">
                    by Martin and Wilkinson, Handbook for Auto. Comp.,                    
                </comment>
                <comment line="178">
                    Vol.ii-Linear Algebra, and the corresponding                    
                </comment>
                <comment line="179">
                    Fortran subroutine in EISPACK.                    
                </comment>
                <comment line="181">
                    Initialize                    
                </comment>
                <comment line="191">
                    Store roots isolated by balanc and compute matrix norm                    
                </comment>
                <comment line="204">
                    Outer loop over eigenvalue index                    
                </comment>
                <comment line="209">
                    Look for single small sub-diagonal element                    
                </comment>
                <comment line="223">
                    Check for convergence                    
                </comment>
                <comment line="224">
                    One root found                    
                </comment>
                <comment line="233">
                    Two roots found                    
                </comment>
                <comment line="244">
                    Real pair                    
                </comment>
                <comment line="267">
                    Row modification                    
                </comment>
                <comment line="275">
                    Column modification                    
                </comment>
                <comment line="283">
                    Accumulate transformations                    
                </comment>
                <comment line="291">
                    Complex pair                    
                </comment>
                <comment line="302">
                    No convergence yet                    
                </comment>
                <comment line="306">
                    Form shift                    
                </comment>
                <comment line="316">
                    Wilkinson&apos;s original ad hoc shift                    
                </comment>
                <comment line="328">
                    MATLAB&apos;s new ad hoc shift                    
                </comment>
                <comment line="347">
                    (Could check iteration count here.)                    
                </comment>
                <comment line="349">
                    Look for two consecutive small sub-diagonal elements                    
                </comment>
                <comment line="381">
                    Double QR step involving rows l:n and columns m:n                    
                </comment>
                <comment line="416">
                    Row modification                    
                </comment>
                <comment line="428">
                    Column modification                    
                </comment>
                <comment line="440">
                    Accumulate transformations                    
                </comment>
                <comment line="451">
                    (s != 0)                    
                </comment>
                <comment line="452">
                    k loop                    
                </comment>
                <comment line="453">
                    check convergence                    
                </comment>
                <comment line="454">
                    while (n &gt;= low)                    
                </comment>
                <comment line="456">
                    Backsubstitute to find vectors of upper triangular form                    
                </comment>
                <comment line="466">
                    Real vector                    
                </comment>
                <comment line="489">
                    Solve real equations                    
                </comment>
                <comment line="504">
                    Overflow control                    
                </comment>
                <comment line="515">
                    Complex vector                    
                </comment>
                <comment line="520">
                    Last vector component imaginary so matrix is triangular                    
                </comment>
                <comment line="554">
                    Solve complex equations                    
                </comment>
                <comment line="577">
                    Overflow control                    
                </comment>
                <comment line="591">
                    Vectors of isolated roots                    
                </comment>
                <comment line="601">
                    Back transformation to get eigenvectors of original matrix                    
                </comment>
                <declaration name="nn" type="int" line="183"/>
                <declaration name="n" type="int" line="184"/>
                <declaration name="low" type="int" line="185"/>
                <declaration name="high" type="int" line="186"/>
                <declaration name="eps" type="double" line="187"/>
                <declaration name="exshift" type="double" line="188"/>
                <declaration name="p" type="double" line="189"/>
                <declaration name="norm" type="double" line="193"/>
                <scope line="194">
                    <scope line="195"/>
                    <scope line="199"/>
                </scope>
                <declaration name="iter" type="int" line="206"/>
                <scope line="207">
                    <declaration name="l" type="int" line="211"/>
                    <scope line="212">
                        <scope line="214"/>
                        <scope line="217"/>
                    </scope>
                    <scope line="226"/>
                    <scope line="235">
                        <scope line="246">
                            <scope line="247"/>
                            <scope line="249"/>
                            <scope line="254"/>
                            <scope line="269"/>
                            <scope line="277"/>
                            <scope line="285"/>
                        </scope>
                        <scope line="293"/>
                    </scope>
                    <scope line="304">
                        <scope line="311"/>
                        <scope line="318">
                            <scope line="320"/>
                        </scope>
                        <scope line="330">
                            <scope line="333">
                                <scope line="335"/>
                                <scope line="339"/>
                            </scope>
                        </scope>
                        <declaration name="m" type="int" line="351"/>
                        <scope line="352">
                            <scope line="363"/>
                            <scope line="368"/>
                        </scope>
                        <scope line="374">
                            <scope line="376"/>
                        </scope>
                        <scope line="383">
                            <declaration name="notlast" type="boolean" line="384"/>
                            <scope line="385">
                                <scope line="390"/>
                            </scope>
                            <scope line="396"/>
                            <scope line="400"/>
                            <scope line="403">
                                <scope line="404"/>
                                <scope line="406"/>
                                <scope line="418">
                                    <scope line="420"/>
                                </scope>
                                <scope line="430">
                                    <scope line="432"/>
                                </scope>
                                <scope line="442">
                                    <scope line="444"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="458"/>
                <scope line="462">
                    <scope line="468">
                        <declaration name="l" type="int" line="469"/>
                        <scope line="471">
                            <scope line="474"/>
                            <scope line="477"/>
                            <scope line="480">
                                <scope line="482">
                                    <scope line="483"/>
                                    <scope line="485"/>
                                </scope>
                                <scope line="491">
                                    <scope line="497"/>
                                    <scope line="499"/>
                                </scope>
                                <scope line="507">
                                    <scope line="508"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="517">
                        <declaration name="l" type="int" line="518"/>
                        <scope line="522"/>
                        <scope line="525"/>
                        <scope line="532">
                            <declaration name="ra" type="double" line="533"/>
                            <scope line="536"/>
                            <scope line="542"/>
                            <scope line="546">
                                <scope line="548"/>
                                <scope line="552">
                                    <scope line="560"/>
                                    <scope line="567"/>
                                    <scope line="570"/>
                                </scope>
                                <scope line="580">
                                    <scope line="581"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="593">
                    <scope line="594">
                        <scope line="595"/>
                    </scope>
                </scope>
                <scope line="603">
                    <scope line="604">
                        <scope line="606"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="613">
                Nonsymmetric reduction to Hessenberg form.                
            </javadoc>
            <method name="orthes" type="void" line="616">
                <comment line="617">
                    This is derived from the Algol procedures orthes and ortran,                    
                </comment>
                <comment line="618">
                    by Martin and Wilkinson, Handbook for Auto. Comp.,                    
                </comment>
                <comment line="619">
                    Vol.ii-Linear Algebra, and the corresponding                    
                </comment>
                <comment line="620">
                    Fortran subroutines in EISPACK.                    
                </comment>
                <comment line="627">
                    Scale column.                    
                </comment>
                <comment line="635">
                    Compute Householder transformation.                    
                </comment>
                <comment line="649">
                    Apply Householder similarity transformation                    
                </comment>
                <comment line="650">
                    H = (I-u*u&apos;/h)*H*(I-u*u&apos;)/h)                    
                </comment>
                <comment line="678">
                    Accumulate transformations (Algol&apos;s ortran).                    
                </comment>
                <comment line="696">
                    Double division avoids possible underflow                    
                </comment>
                <declaration name="low" type="int" line="622"/>
                <declaration name="high" type="int" line="623"/>
                <scope line="625">
                    <declaration name="scale" type="double" line="629"/>
                    <scope line="630"/>
                    <scope line="633">
                        <declaration name="h" type="double" line="637"/>
                        <scope line="638"/>
                        <declaration name="g" type="double" line="642"/>
                        <scope line="643"/>
                        <scope line="652">
                            <declaration name="f" type="double" line="653"/>
                            <scope line="654"/>
                            <scope line="658"/>
                        </scope>
                        <scope line="663">
                            <declaration name="f" type="double" line="664"/>
                            <scope line="665"/>
                            <scope line="669"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="680">
                    <scope line="681"/>
                </scope>
                <scope line="686">
                    <scope line="687">
                        <scope line="688"/>
                        <scope line="691">
                            <declaration name="g" type="double" line="692"/>
                            <scope line="693"/>
                            <scope line="698"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="705">
                Returns a String with (propertyName, propertyValue) pairs.
                  Useful for debugging or to quickly get the rough picture.
                  For example,
                  &lt;pre&gt;
                  rank          : 3
                  trace         : 0
                  &lt;/pre&gt;                
            </javadoc>
            <method name="toString" type="String" line="714">
                <declaration name="buf" type="StringBuffer" line="715"/>
                <declaration name="unknown" type="String" line="716"/>
                <scope line="723"/>
                <scope line="724"/>
                <scope line="727"/>
                <scope line="728"/>
                <scope line="731"/>
                <scope line="732"/>
                <scope line="735"/>
                <scope line="736"/>
            </method>
            <javadoc line="740">
                Symmetric tridiagonal QL algorithm.                
            </javadoc>
            <method name="tql2" type="void" line="743">
                <comment line="745">
                    This is derived from the Algol procedures tql2, by                    
                </comment>
                <comment line="746">
                    Bowdler, Martin, Reinsch, and Wilkinson, Handbook for                    
                </comment>
                <comment line="747">
                    Auto. Comp., Vol.ii-Linear Algebra, and the corresponding                    
                </comment>
                <comment line="748">
                    Fortran subroutine in EISPACK.                    
                </comment>
                <comment line="760">
                    Find small subdiagonal element                    
                </comment>
                <comment line="771">
                    If m == l, d[l] is an eigenvalue,                    
                </comment>
                <comment line="772">
                    otherwise, iterate.                    
                </comment>
                <comment line="777">
                    (Could check iteration count here.)                    
                </comment>
                <comment line="779">
                    Compute implicit shift                    
                </comment>
                <comment line="796">
                    Implicit QL transformation.                    
                </comment>
                <comment line="818">
                    Accumulate transformation.                    
                </comment>
                <comment line="830">
                    Check for convergence.                    
                </comment>
                <comment line="838">
                    Sort eigenvalues and corresponding vectors.                    
                </comment>
                <scope line="750"/>
                <declaration name="f" type="double" line="755"/>
                <declaration name="tst1" type="double" line="756"/>
                <declaration name="eps" type="double" line="757"/>
                <scope line="758">
                    <declaration name="m" type="int" line="763"/>
                    <scope line="764">
                        <scope line="765"/>
                    </scope>
                    <scope line="774">
                        <declaration name="iter" type="int" line="775"/>
                        <scope line="776">
                            <declaration name="g" type="double" line="781"/>
                            <declaration name="p" type="double" line="782"/>
                            <declaration name="r" type="double" line="783"/>
                            <scope line="784"/>
                            <declaration name="dl1" type="double" line="789"/>
                            <declaration name="h" type="double" line="790"/>
                            <scope line="791"/>
                            <declaration name="c" type="double" line="799"/>
                            <declaration name="c2" type="double" line="800"/>
                            <declaration name="c3" type="double" line="801"/>
                            <declaration name="el1" type="double" line="802"/>
                            <declaration name="s" type="double" line="803"/>
                            <declaration name="s2" type="double" line="804"/>
                            <scope line="805">
                                <scope line="820"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="840">
                    <declaration name="k" type="int" line="841"/>
                    <declaration name="p" type="double" line="842"/>
                    <scope line="843">
                        <scope line="844"/>
                    </scope>
                    <scope line="849">
                        <scope line="852"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="860">
                Symmetric Householder reduction to tridiagonal form.                
            </javadoc>
            <method name="tred2" type="void" line="863">
                <comment line="864">
                    This is derived from the Algol procedures tred2 by                    
                </comment>
                <comment line="865">
                    Bowdler, Martin, Reinsch, and Wilkinson, Handbook for                    
                </comment>
                <comment line="866">
                    Auto. Comp., Vol.ii-Linear Algebra, and the corresponding                    
                </comment>
                <comment line="867">
                    Fortran subroutine in EISPACK.                    
                </comment>
                <comment line="875">
                    Householder reduction to tridiagonal form.                    
                </comment>
                <comment line="879">
                    Scale to avoid under/overflow.                    
                </comment>
                <comment line="895">
                    Generate Householder vector.                    
                </comment>
                <comment line="913">
                    Apply similarity transformation to remaining columns.                    
                </comment>
                <comment line="947">
                    Accumulate transformations.                    
                </comment>
                <scope line="870"/>
                <scope line="877">
                    <declaration name="scale" type="double" line="881"/>
                    <declaration name="h" type="double" line="882"/>
                    <scope line="883"/>
                    <scope line="886">
                        <scope line="888"/>
                    </scope>
                    <scope line="893">
                        <scope line="897"/>
                        <declaration name="f" type="double" line="901"/>
                        <declaration name="g" type="double" line="902"/>
                        <scope line="903"/>
                        <scope line="909"/>
                        <scope line="915">
                            <scope line="919"/>
                        </scope>
                        <scope line="926"/>
                        <declaration name="hh" type="double" line="930"/>
                        <scope line="931"/>
                        <scope line="934">
                            <scope line="937"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="949">
                    <declaration name="h" type="double" line="952"/>
                    <scope line="953">
                        <scope line="954"/>
                        <scope line="957">
                            <declaration name="g" type="double" line="958"/>
                            <scope line="959"/>
                            <scope line="962"/>
                        </scope>
                    </scope>
                    <scope line="967"/>
                </scope>
                <scope line="971"/>
            </method>
        </class>
    </source>