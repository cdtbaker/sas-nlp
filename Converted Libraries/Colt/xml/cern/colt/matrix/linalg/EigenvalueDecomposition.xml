<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.linalg">
        <import package="cern.colt.matrix.DoubleFactory1D"/>
        <import package="cern.colt.matrix.DoubleFactory2D"/>
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="EigenvalueDecomposition" line="6">
            <implements interface="java.io.Serializable"/>
            <javadoc line="6">
                Eigenvalues and eigenvectors of a real matrix &lt;tt&gt;A&lt;/tt&gt;. 
                  &lt;P&gt;
                  If &lt;tt&gt;A&lt;/tt&gt; is symmetric, then &lt;tt&gt;A = VDV&apos;&lt;/tt&gt; where the eigenvalue matrix &lt;tt&gt;D&lt;/tt&gt; is
                  diagonal and the eigenvector matrix &lt;tt&gt;V&lt;/tt&gt; is orthogonal.
                  I.e. &lt;tt&gt;A = V.mult(D.mult(transpose(V)))&lt;/tt&gt; and 
                  &lt;tt&gt;V.mult(transpose(V))&lt;/tt&gt; equals the identity matrix.
                  &lt;P&gt;
                  If &lt;tt&gt;A&lt;/tt&gt; is not symmetric, then the eigenvalue matrix &lt;tt&gt;D&lt;/tt&gt; is block diagonal
                  with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
                  &lt;tt&gt;lambda + imu&lt;/tt&gt;, in 2-by-2 blocks, &lt;tt&gt;[lambda, mu; -mu, lambda]&lt;/tt&gt;. 
                  The columns of &lt;tt&gt;V&lt;/tt&gt; represent the eigenvectors in the sense that &lt;tt&gt;AV = VD&lt;/tt&gt;,
                  i.e. &lt;tt&gt;A.mult(V) equals V.mult(D)&lt;/tt&gt;.  The matrix &lt;tt&gt;V&lt;/tt&gt; may be badly
                  conditioned, or even singular, so the validity of the equation
                  &lt;tt&gt;A = VDinverse(V)&lt;/tt&gt; depends upon &lt;tt&gt;Algebra.cond(V)&lt;/tt&gt;.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="23"/>
            <declaration name="n" type="int" line="24"/>
            <javadoc line="24">
                Row and column dimension (square matrix).                
                <serial>
                    matrix dimension.                    
                </serial>
            </javadoc>
            <declaration name="issymmetric" type="boolean" line="29"/>
            <javadoc line="29">
                Symmetry flag.                
                <serial>
                    internal symmetry flag.                    
                </serial>
            </javadoc>
            <declaration name="d" type="double[]" line="34"/>
            <javadoc line="34">
                Arrays for internal storage of eigenvalues.                
                <serial>
                    internal storage of eigenvalues.                    
                </serial>
            </javadoc>
            <declaration name="V" type="double[][]" line="39"/>
            <javadoc line="39">
                Array for internal storage of eigenvectors.                
                <serial>
                    internal storage of eigenvectors.                    
                </serial>
            </javadoc>
            <declaration name="H" type="double[][]" line="44"/>
            <javadoc line="44">
                Array for internal storage of nonsymmetric Hessenberg form.                
                <serial>
                    internal storage of nonsymmetric Hessenberg form.                    
                </serial>
            </javadoc>
            <declaration name="ort" type="double[]" line="49"/>
            <javadoc line="49">
                Working storage for nonsymmetric algorithm.                
                <serial>
                    working storage for nonsymmetric algorithm.                    
                </serial>
            </javadoc>
            <declaration name="cdivr" type="double" line="54"/>
            <javadoc line="55">
                Constructs and returns a new eigenvalue decomposition object; 
                  The decomposed matrices can be retrieved via instance methods of the returned decomposition object.
                  Checks for symmetry, then constructs the eigenvalue decomposition.                
                <param>
                    A    A square matrix.                    
                </param>
                <return>
                    A decomposition object to access <tt>D</tt> and <tt>V</tt>.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>A</tt> is not square.                    
                </throws>
            </javadoc>
            <method name="EigenvalueDecomposition" type="constructor" line="63">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <scope line="70">
                    <scope line="71">
                        <scope line="72"/>
                    </scope>
                </scope>
                <scope line="79">
                    <scope line="82">
                        <scope line="83"/>
                    </scope>
                </scope>
            </method>
            <method name="cdiv" type="void" line="91">
                <params>
                    <param name="xr" type="double"/>
                    <param name="xi" type="double"/>
                    <param name="yr" type="double"/>
                    <param name="yi" type="double"/>
                </params>
                <declaration name="r" type="double" line="92"/>
                <scope line="93"/>
                <scope line="99"/>
            </method>
            <javadoc line="106">
                Returns the block diagonal eigenvalue matrix, &lt;tt&gt;D&lt;/tt&gt;.                
                <return>
                    <tt>D</tt>                    
                </return>
            </javadoc>
            <method name="getD" type="DoubleMatrix2D" line="110">
                <declaration name="D" type="double[][]" line="111"/>
                <scope line="112">
                    <scope line="113"/>
                    <scope line="117"/>
                    <scope line="120"/>
                </scope>
            </method>
            <javadoc line="126">
                Returns the imaginary parts of the eigenvalues.                
                <return>
                    imag(diag(D))                    
                </return>
            </javadoc>
            <method name="getImagEigenvalues" type="DoubleMatrix1D" line="130"/>
            <javadoc line="133">
                Returns the real parts of the eigenvalues.                
                <return>
                    real(diag(D))                    
                </return>
            </javadoc>
            <method name="getRealEigenvalues" type="DoubleMatrix1D" line="137"/>
            <javadoc line="140">
                Returns the eigenvector matrix, &lt;tt&gt;V&lt;/tt&gt;                
                <return>
                    <tt>V</tt>                    
                </return>
            </javadoc>
            <method name="getV" type="DoubleMatrix2D" line="144"/>
            <javadoc line="147">
                Nonsymmetric reduction from Hessenberg to real Schur form.                
            </javadoc>
            <method name="hqr2" type="void" line="150">
                <declaration name="nn" type="int" line="151"/>
                <declaration name="n" type="int" line="152"/>
                <declaration name="low" type="int" line="153"/>
                <declaration name="high" type="int" line="154"/>
                <declaration name="eps" type="double" line="155"/>
                <declaration name="exshift" type="double" line="156"/>
                <declaration name="p" type="double" line="157"/>
                <declaration name="norm" type="double" line="158"/>
                <scope line="159">
                    <scope line="160"/>
                    <scope line="164"/>
                </scope>
                <declaration name="iter" type="int" line="168"/>
                <scope line="169">
                    <declaration name="l" type="int" line="170"/>
                    <scope line="171">
                        <scope line="173"/>
                        <scope line="176"/>
                    </scope>
                    <scope line="181"/>
                    <scope line="188">
                        <scope line="196">
                            <scope line="197"/>
                            <scope line="200"/>
                            <scope line="205"/>
                            <scope line="217"/>
                            <scope line="222"/>
                            <scope line="227"/>
                        </scope>
                        <scope line="233"/>
                    </scope>
                    <scope line="242">
                        <scope line="246"/>
                        <scope line="250">
                            <scope line="252"/>
                        </scope>
                        <scope line="259">
                            <scope line="262">
                                <scope line="264"/>
                                <scope line="268"/>
                            </scope>
                        </scope>
                        <declaration name="m" type="int" line="276"/>
                        <scope line="277">
                            <scope line="288"/>
                            <scope line="291"/>
                        </scope>
                        <scope line="296">
                            <scope line="298"/>
                        </scope>
                        <scope line="302">
                            <declaration name="notlast" type="boolean" line="303"/>
                            <scope line="304">
                                <scope line="309"/>
                            </scope>
                            <scope line="315"/>
                            <scope line="319"/>
                            <scope line="322">
                                <scope line="323"/>
                                <scope line="326"/>
                                <scope line="335">
                                    <scope line="337"/>
                                </scope>
                                <scope line="344">
                                    <scope line="346"/>
                                </scope>
                                <scope line="353">
                                    <scope line="355"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="366"/>
                <scope line="369">
                    <scope line="372">
                        <declaration name="l" type="int" line="373"/>
                        <scope line="375">
                            <scope line="378"/>
                            <scope line="381"/>
                            <scope line="385">
                                <scope line="387">
                                    <scope line="388"/>
                                    <scope line="391"/>
                                </scope>
                                <scope line="395">
                                    <scope line="401"/>
                                    <scope line="404"/>
                                </scope>
                                <scope line="409">
                                    <scope line="410"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="417">
                        <declaration name="l" type="int" line="418"/>
                        <scope line="419"/>
                        <scope line="423"/>
                        <scope line="430">
                            <declaration name="ra" type="double" line="431"/>
                            <scope line="434"/>
                            <scope line="439"/>
                            <scope line="444">
                                <scope line="446"/>
                                <scope line="451">
                                    <scope line="456"/>
                                    <scope line="462"/>
                                    <scope line="466"/>
                                </scope>
                                <scope line="473">
                                    <scope line="474"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="483">
                    <scope line="484">
                        <scope line="485"/>
                    </scope>
                </scope>
                <scope line="490">
                    <scope line="491">
                        <scope line="493"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="500">
                Nonsymmetric reduction to Hessenberg form.                
            </javadoc>
            <method name="orthes" type="void" line="503">
                <declaration name="low" type="int" line="504"/>
                <declaration name="high" type="int" line="505"/>
                <scope line="506">
                    <declaration name="scale" type="double" line="507"/>
                    <scope line="508"/>
                    <scope line="511">
                        <declaration name="h" type="double" line="512"/>
                        <scope line="513"/>
                        <declaration name="g" type="double" line="517"/>
                        <scope line="518"/>
                        <scope line="523">
                            <declaration name="f" type="double" line="524"/>
                            <scope line="525"/>
                            <scope line="529"/>
                        </scope>
                        <scope line="533">
                            <declaration name="f" type="double" line="534"/>
                            <scope line="535"/>
                            <scope line="539"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="547">
                    <scope line="548"/>
                </scope>
                <scope line="552">
                    <scope line="553">
                        <scope line="554"/>
                        <scope line="557">
                            <declaration name="g" type="double" line="558"/>
                            <scope line="559"/>
                            <scope line="563"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="570">
                Returns a String with (propertyName, propertyValue) pairs.
                  Useful for debugging or to quickly get the rough picture.
                  For example,
                  &lt;pre&gt;
                  rank          : 3
                  trace         : 0
                  &lt;/pre&gt;                
            </javadoc>
            <method name="toString" type="String" line="579">
                <declaration name="buf" type="StringBuffer" line="580"/>
                <declaration name="unknown" type="String" line="581"/>
                <scope line="586"/>
                <scope line="589"/>
                <scope line="593"/>
                <scope line="596"/>
                <scope line="600"/>
                <scope line="603"/>
                <scope line="607"/>
                <scope line="610"/>
            </method>
            <javadoc line="615">
                Symmetric tridiagonal QL algorithm.                
            </javadoc>
            <method name="tql2" type="void" line="618">
                <scope line="619"/>
                <declaration name="f" type="double" line="623"/>
                <declaration name="tst1" type="double" line="624"/>
                <declaration name="eps" type="double" line="625"/>
                <scope line="626">
                    <declaration name="m" type="int" line="628"/>
                    <scope line="629">
                        <scope line="630"/>
                    </scope>
                    <scope line="635">
                        <declaration name="iter" type="int" line="636"/>
                        <scope line="637">
                            <declaration name="g" type="double" line="639"/>
                            <declaration name="p" type="double" line="640"/>
                            <declaration name="r" type="double" line="641"/>
                            <scope line="642"/>
                            <declaration name="dl1" type="double" line="647"/>
                            <declaration name="h" type="double" line="648"/>
                            <scope line="649"/>
                            <declaration name="c" type="double" line="654"/>
                            <declaration name="c2" type="double" line="655"/>
                            <declaration name="c3" type="double" line="656"/>
                            <declaration name="el1" type="double" line="657"/>
                            <declaration name="s" type="double" line="658"/>
                            <declaration name="s2" type="double" line="659"/>
                            <scope line="660">
                                <scope line="672"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="687">
                    <declaration name="k" type="int" line="688"/>
                    <declaration name="p" type="double" line="689"/>
                    <scope line="690">
                        <scope line="691"/>
                    </scope>
                    <scope line="696">
                        <scope line="699"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="707">
                Symmetric Householder reduction to tridiagonal form.                
            </javadoc>
            <method name="tred2" type="void" line="710">
                <scope line="711"/>
                <scope line="714">
                    <declaration name="scale" type="double" line="715"/>
                    <declaration name="h" type="double" line="716"/>
                    <scope line="717"/>
                    <scope line="720">
                        <scope line="722"/>
                    </scope>
                    <scope line="728">
                        <scope line="729"/>
                        <declaration name="f" type="double" line="733"/>
                        <declaration name="g" type="double" line="734"/>
                        <scope line="735"/>
                        <scope line="741"/>
                        <scope line="744">
                            <scope line="748"/>
                        </scope>
                        <scope line="755"/>
                        <declaration name="hh" type="double" line="759"/>
                        <scope line="760"/>
                        <scope line="763">
                            <scope line="766"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="775">
                    <declaration name="h" type="double" line="778"/>
                    <scope line="779">
                        <scope line="780"/>
                        <scope line="783">
                            <declaration name="g" type="double" line="784"/>
                            <scope line="785"/>
                            <scope line="788"/>
                        </scope>
                    </scope>
                    <scope line="793"/>
                </scope>
                <scope line="797"/>
            </method>
        </class>
    </source>