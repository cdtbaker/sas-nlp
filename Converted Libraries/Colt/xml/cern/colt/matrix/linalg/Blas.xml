<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.linalg">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <interface name="Blas">
            <javadoc line="4">
                &lt;p&gt;
                  Subset of the &lt;A HREF=&quot;http://netlib2.cs.utk.edu/blas/faq.html&quot;&gt;BLAS&lt;/A&gt; (Basic Linear Algebra System); 
                  High quality &quot;building block&quot; routines for performing basic vector and matrix operations. 
                  Because the BLAS are efficient, portable, and widely available, they&apos;re commonly used in the development
                  of high quality linear algebra software.
                  &lt;p&gt;
                  Mostly for compatibility with legacy notations. Most operations actually just delegate to the appropriate 
                  methods directly defined on matrices and vectors. &lt;/p&gt;
                  &lt;p&gt;
                  This class implements the BLAS functions for operations on matrices from the 
                  matrix package. It follows the spirit of the &lt;A HREF=&quot;http://math.nist.gov/javanumerics/blas.html&quot;&gt;Draft Proposal for Java BLAS Interface&lt;/A&gt;, 
                  by Roldan Pozo of the National Institute of Standards and Technology. Interface 
                  definitions are also identical to the Ninja interface. Because the matrix package 
                  supports sections, the interface is actually simpler. &lt;/p&gt;
                  &lt;p&gt;Currently, the following operations are supported: &lt;/p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;BLAS Level 1: Vector-Vector operations &lt;/li&gt;
                  &lt;ul&gt;
                  &lt;li&gt;ddot  : dot product of two vectors &lt;/li&gt;
                  &lt;li&gt;daxpy : scalar times a vector plus a vector &lt;/li&gt;
                  &lt;li&gt;drotg : construct a Givens plane rotation &lt;/li&gt;
                  &lt;li&gt;drot  : apply a plane rotation &lt;/li&gt;
                  &lt;li&gt;dcopy : copy vector X into vector Y &lt;/li&gt;
                  &lt;li&gt;dswap : interchange vectors X and Y &lt;/li&gt;
                  &lt;li&gt;dnrm2 : Euclidean norm of a vector &lt;/li&gt;
                  &lt;li&gt;dasum : sum of absolute values of vector components &lt;/li&gt;
                  &lt;li&gt;dscal : scale a vector by a scalar &lt;/li&gt;
                  &lt;li&gt;idamax: index of element with maximum absolute value &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;li&gt;2.BLAS Level 2: Matrix-Vector operations &lt;/li&gt;
                  &lt;ul&gt;
                  &lt;li&gt;dgemv : matrix-vector multiply with general matrix &lt;/li&gt;
                  &lt;li&gt;dger  : rank-1 update on general matrix &lt;/li&gt;
                  &lt;li&gt;dsymv : matrix-vector multiply with symmetric matrix &lt;/li&gt;
                  &lt;li&gt;dtrmv : matrix-vector multiply with triangular matrix &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;li&gt;3.BLAS Level 3: Matrix-Matrix operations 
                  &lt;ul&gt;
                  &lt;li&gt;dgemm : matrix-matrix multiply with general matrices &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;/ol&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    0.9, 16/04/2000                    
                </version>
            </javadoc>
            <method name="assign" type="void" line="51"/>
            <javadoc line="51">
                Assigns the result of a function to each cell; &lt;tt&gt;x[row,col] = function(x[row,col])&lt;/tt&gt;.                
                <param>
                    A the matrix to modify.                    
                </param>
                <param>
                    function a function object taking as argument the current cell's value.                    
                </param>
                <see>
                    cern.jet.math.Functions                    
                </see>
            </javadoc>
            <method name="assign" type="void" line="58"/>
            <javadoc line="58">
                Assigns the result of a function to each cell; &lt;tt&gt;x[row,col] = function(x[row,col],y[row,col])&lt;/tt&gt;.                
                <param>
                    x the matrix to modify.                    
                </param>
                <param>
                    y the secondary matrix to operate on.                    
                </param>
                <param>
                    function a function object taking as first argument the current cell's value of <tt>this</tt>,
                      and as second argument the current cell's value of <tt>y</tt>,                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>x.columns() != y.columns() || x.rows() != y.rows()</tt>                    
                </throws>
                <see>
                    cern.jet.math.Functions                    
                </see>
            </javadoc>
            <method name="dasum" type="double" line="69"/>
            <javadoc line="69">
                Returns the sum of absolute values; &lt;tt&gt;|x[0]| + |x[1]| + ... &lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;x.aggregate(cern.jet.math.Functions.plus, cern.jet.math.Functions.abs)&lt;/tt&gt;.                
                <param>
                    x the first vector.                    
                </param>
            </javadoc>
            <method name="daxpy" type="void" line="75"/>
            <javadoc line="75">
                Combined vector scaling; &lt;tt&gt;y = y + alphax&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;y.assign(x,cern.jet.math.Functions.plusMult(alpha))&lt;/tt&gt;.                
                <param>
                    alpha a scale factor.                    
                </param>
                <param>
                    x the first source vector.                    
                </param>
                <param>
                    y the second source vector, this is also the vector where results are stored.                    
                </param>
                <throws>
                    IllegalArgumentException <tt>x.size() != y.size()</tt>..                    
                </throws>
            </javadoc>
            <method name="daxpy" type="void" line="84"/>
            <javadoc line="84">
                Combined matrix scaling; &lt;tt&gt;B = B + alphaA&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;B.assign(A,cern.jet.math.Functions.plusMult(alpha))&lt;/tt&gt;.                
                <param>
                    alpha a scale factor.                    
                </param>
                <param>
                    A the first source matrix.                    
                </param>
                <param>
                    B the second source matrix, this is also the matrix where results are stored.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>A.columns() != B.columns() || A.rows() != B.rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="dcopy" type="void" line="93"/>
            <javadoc line="93">
                Vector assignment (copying); &lt;tt&gt;y = x&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;y.assign(x)&lt;/tt&gt;.                
                <param>
                    x the source vector.                    
                </param>
                <param>
                    y the destination vector.                    
                </param>
                <throws>
                    IllegalArgumentException <tt>x.size() != y.size()</tt>.                    
                </throws>
            </javadoc>
            <method name="dcopy" type="void" line="101"/>
            <javadoc line="101">
                Matrix assignment (copying); &lt;tt&gt;B = A&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;B.assign(A)&lt;/tt&gt;.                
                <param>
                    A the source matrix.                    
                </param>
                <param>
                    B the destination matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>A.columns() != B.columns() || A.rows() != B.rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="ddot" type="double" line="109"/>
            <javadoc line="109">
                Returns the dot product of two vectors x and y, which is &lt;tt&gt;Sum(x[i]y[i])&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;x.zDotProduct(y)&lt;/tt&gt;.                
                <param>
                    x the first vector.                    
                </param>
                <param>
                    y the second vector.                    
                </param>
                <return>
                    the sum of products.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>x.size() != y.size()</tt>.                    
                </throws>
            </javadoc>
            <method name="dgemm" type="void" line="118"/>
            <javadoc line="118">
                Generalized linear algebraic matrix-matrix multiply; &lt;tt&gt;C = alphaAB + betaC&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;A.zMult(B,C,alpha,beta,transposeA,transposeB)&lt;/tt&gt;.
                  Note: Matrix shape conformance is checked &lt;i&gt;after&lt;/i&gt; potential transpositions.                
                <param>
                    transposeA set this flag to indicate that the multiplication shall be performed on A'.                    
                </param>
                <param>
                    transposeB set this flag to indicate that the multiplication shall be performed on B'.                    
                </param>
                <param>
                    alpha a scale factor.                    
                </param>
                <param>
                    A the first source matrix.                    
                </param>
                <param>
                    B the second source matrix.                    
                </param>
                <param>
                    beta a scale factor.                    
                </param>
                <param>
                    C the third source matrix, this is also the matrix where results are stored.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>B.rows() != A.columns()</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>C.rows() != A.rows() || C.columns() != B.columns()</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>A == C || B == C</tt>.                    
                </throws>
            </javadoc>
            <method name="dgemv" type="void" line="134"/>
            <javadoc line="134">
                Generalized linear algebraic matrix-vector multiply; &lt;tt&gt;y = alphaAx + betay&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;A.zMult(x,y,alpha,beta,transposeA)&lt;/tt&gt;.
                  Note: Matrix shape conformance is checked &lt;i&gt;after&lt;/i&gt; potential transpositions.                
                <param>
                    transposeA set this flag to indicate that the multiplication shall be performed on A'.                    
                </param>
                <param>
                    alpha a scale factor.                    
                </param>
                <param>
                    A the source matrix.                    
                </param>
                <param>
                    x the first source vector.                    
                </param>
                <param>
                    beta a scale factor.                    
                </param>
                <param>
                    y the second source vector, this is also the vector where results are stored.                    
                </param>
                <throws>
                    IllegalArgumentException <tt>A.columns() != x.size() || A.rows() != y.size())</tt>..                    
                </throws>
            </javadoc>
            <method name="dger" type="void" line="147"/>
            <javadoc line="147">
                Performs a rank 1 update; &lt;tt&gt;A = A + alphaxy&apos;&lt;/tt&gt;.
                  Example:
                  &lt;pre&gt;
                  A = { {6,5}, {7,6} }, x = {1,2}, y = {3,4}, alpha = 1 --&gt;
                  A = { {9,9}, {13,14} }
                  &lt;/pre&gt;                
                <param>
                    alpha a scalar.                    
                </param>
                <param>
                    x an m element vector.                    
                </param>
                <param>
                    y an n element vector.                    
                </param>
                <param>
                    A an m by n matrix.                    
                </param>
            </javadoc>
            <method name="dnrm2" type="double" line="160"/>
            <javadoc line="160">
                Return the 2-norm; &lt;tt&gt;sqrt(x[0]^2 + x[1]^2 + ...)&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;Math.sqrt(Algebra.DEFAULT.norm2(x))&lt;/tt&gt;.                
                <param>
                    x the vector.                    
                </param>
            </javadoc>
            <method name="drot" type="void" line="166"/>
            <javadoc line="166">
                Applies a givens plane rotation to (x,y); &lt;tt&gt;x = cx + sy; y = cy - sx&lt;/tt&gt;.                
                <param>
                    x the first vector.                    
                </param>
                <param>
                    y the second vector.                    
                </param>
                <param>
                    c the cosine of the angle of rotation.                    
                </param>
                <param>
                    s the sine of the angle of rotation.                    
                </param>
            </javadoc>
            <method name="drotg" type="void" line="174"/>
            <javadoc line="174">
                Constructs a Givens plane rotation for &lt;tt&gt;(a,b)&lt;/tt&gt;.
                  Taken from the LINPACK translation from FORTRAN to Java, interface slightly modified.
                  In the LINPACK listing DROTG is attributed to Jack Dongarra                
                <param>
                    a  rotational elimination parameter a.                    
                </param>
                <param>
                    b  rotational elimination parameter b.                    
                </param>
                <param>
                    rotvec[]  Must be at least of length 4. On output contains the values <tt>{a,b,c,s}</tt>.                    
                </param>
            </javadoc>
            <method name="dscal" type="void" line="183"/>
            <javadoc line="183">
                Vector scaling; &lt;tt&gt;x = alphax&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;x.assign(cern.jet.math.Functions.mult(alpha))&lt;/tt&gt;.                
                <param>
                    alpha a scale factor.                    
                </param>
                <param>
                    x the first vector.                    
                </param>
            </javadoc>
            <method name="dscal" type="void" line="190"/>
            <javadoc line="190">
                Matrix scaling; &lt;tt&gt;A = alphaA&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;A.assign(cern.jet.math.Functions.mult(alpha))&lt;/tt&gt;.                
                <param>
                    alpha a scale factor.                    
                </param>
                <param>
                    A the matrix.                    
                </param>
            </javadoc>
            <method name="dswap" type="void" line="197"/>
            <javadoc line="197">
                Swaps the elements of two vectors; &lt;tt&gt;y &lt;==&gt; x&lt;/tt&gt;.
                  In fact equivalent to &lt;tt&gt;y.swap(x)&lt;/tt&gt;.                
                <param>
                    x the first vector.                    
                </param>
                <param>
                    y the second vector.                    
                </param>
                <throws>
                    IllegalArgumentException <tt>x.size() != y.size()</tt>.                    
                </throws>
            </javadoc>
            <method name="dswap" type="void" line="205"/>
            <javadoc line="205">
                Swaps the elements of two matrices; &lt;tt&gt;B &lt;==&gt; A&lt;/tt&gt;.                
                <param>
                    A the first matrix.                    
                </param>
                <param>
                    B the second matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>A.columns() != B.columns() || A.rows() != B.rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="dsymv" type="void" line="212"/>
            <javadoc line="212">
                Symmetric matrix-vector multiplication; &lt;tt&gt;y = alphaAx + betay&lt;/tt&gt;.
                  Where alpha and beta are scalars, x and y are n element vectors and
                  A is an n by n symmetric matrix.
                  A can be in upper or lower triangular format.                
                <param>
                    isUpperTriangular is A upper triangular or lower triangular part to be used?                    
                </param>
                <param>
                    alpha scaling factor.                    
                </param>
                <param>
                    A the source matrix.                    
                </param>
                <param>
                    x the first source vector.                    
                </param>
                <param>
                    beta scaling factor.                    
                </param>
                <param>
                    y the second vector holding source and destination.                    
                </param>
            </javadoc>
            <method name="dtrmv" type="void" line="225"/>
            <javadoc line="225">
                Triangular matrix-vector multiplication; &lt;tt&gt;x = Ax&lt;/tt&gt; or &lt;tt&gt;x = A&apos;x&lt;/tt&gt;.
                  Where x is an n element vector and A is an n by n unit, or non-unit,
                  upper or lower triangular matrix.                
                <param>
                    isUpperTriangular is A upper triangular or lower triangular?                    
                </param>
                <param>
                    transposeA set this flag to indicate that the multiplication shall be performed on A'.                    
                </param>
                <param>
                    isUnitTriangular true --> A is assumed to be unit triangular; false --> A is not assumed to be unit triangular                    
                </param>
                <param>
                    A the source matrix.                    
                </param>
                <param>
                    x the vector holding source and destination.                    
                </param>
            </javadoc>
            <method name="idamax" type="int" line="236"/>
            <javadoc line="236">
                Returns the index of largest absolute value; &lt;tt&gt;i such that |x[i]| == max(|x[0]|,|x[1]|,...).&lt;/tt&gt;.                
                <param>
                    x the vector to search through.                    
                </param>
                <return>
                    the index of largest absolute value (-1 if x is empty).                    
                </return>
            </javadoc>
        </interface>
    </source>