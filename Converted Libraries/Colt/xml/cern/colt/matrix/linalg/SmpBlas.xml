<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.linalg">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <import package="EDU.oswego.cs.dl.util.concurrent.FJTask"/>
        <class name="SmpBlas" line="5">
            <implements interface="Blas"/>
            <javadoc line="5">
                Parallel implementation of the Basic Linear Algebra System for symmetric multi processing boxes.
                  Currently only a few algorithms are parallelised; the others are fully functional, but run in sequential mode.
                  Parallelised are:
                  &lt;ul&gt;
                  &lt;li&gt;{@link #dgemm dgemm} (matrix-matrix multiplication)&lt;/li&gt;
                  &lt;li&gt;{@link #dgemv dgemv} (matrix-vector multiplication)&lt;/li&gt;
                  &lt;li&gt;{@link #assign(DoubleMatrix2D,cern.colt.function.DoubleFunction) assign(A,function)} (generalized matrix scaling/transform): Strong speedup only for expensive functions like logarithm, sin, etc.&lt;/li&gt;
                  &lt;li&gt;{@link #assign(DoubleMatrix2D,DoubleMatrix2D,cern.colt.function.DoubleDoubleFunction) assign(A,B,function)} (generalized matrix scaling/transform): Strong speedup only for expensive functions like pow etc.&lt;/li&gt;
                  &lt;/ul&gt;
                  In all cases, no or only marginal speedup is seen for small problem sizes; they are detected and the sequential algorithm is used.
                  &lt;h4&gt;Usage&lt;/h4&gt;
                  Call the static method {@link #allocateBlas} at the very beginning of your program, supplying the main parameter for SmpBlas, the number of available CPUs.
                  The method sets the public global variable &lt;tt&gt;SmpBlas.smpBlas&lt;/tt&gt; to a blas using a maximum of &lt;tt&gt;CPUs&lt;/tt&gt; threads, each concurrently processing matrix blocks with the given sequential blas algorithms.
                  Normally there is no need to call &lt;tt&gt;allocateBlas&lt;/tt&gt; more than once.
                  Then use &lt;tt&gt;SmpBlas.smpBlas.someRoutine(...)&lt;/tt&gt; to run &lt;tt&gt;someRoutine&lt;/tt&gt; in parallel.
                  E.g.
                  &lt;table&gt;
                  &lt;td class=&quot;PRE&quot;&gt; 
                  &lt;pre&gt;
                  int cpu_s = 4;
                  SmpBlas.allocateBlas(cpu_s, SeqBlas.seqBlas);
                  ...
                  SmpBlas.smpBlas.dgemm(...)
                  SmpBlas.smpBlas.dgemv(...)
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;/table&gt;
                  Even if you don&apos;t call a blas routine yourself, it often makes sense to allocate a SmpBlas, because other matrix library routines sometimes call the blas.
                  So if you&apos;re lucky, you get parallel performance for free.
                  &lt;h4&gt;Notes&lt;/h4&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Unfortunately, there is no portable means of automatically detecting the
                  number of CPUs on a JVM, so there is no good way to automate defaults.&lt;/li&gt;
                  &lt;li&gt;Only improves performance on boxes with &gt; 1 CPUs and VMs with &lt;b&gt;native threads&lt;/b&gt;.&lt;/li&gt;
                  &lt;li&gt;Currently only improves performance when working on dense matrix types. On sparse types, performance is likely to degrade (because of the implementation of sub-range views)!&lt;/li&gt;
                  &lt;li&gt;Implemented using Doug Lea&apos;s fast lightweight task framework ({@link EDU.oswego.cs.dl.util.concurrent}) built upon Java threads, and geared for parallel computation.&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    EDU.oswego.cs.dl.util.concurrent.FJTaskRunnerGroup                    
                </see>
                <see>
                    EDU.oswego.cs.dl.util.concurrent.FJTask                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    0.9, 16/04/2000                    
                </version>
            </javadoc>
            <declaration name="smpBlas" type="Blas" line="49"/>
            <javadoc line="49">
                The public global parallel blas; initialized via {@link #allocateBlas}.
                  Do not modify this variable via other means (it is public).                
            </javadoc>
            <declaration name="seqBlas" type="Blas" line="54"/>
            <declaration name="smp" type="Smp" line="55"/>
            <declaration name="maxThreads" type="int" line="56"/>
            <declaration name="NN_THRESHOLD" type="int" line="57"/>
            <javadoc line="58">
                Constructs a blas using a maximum of &lt;tt&gt;maxThreads&lt;tt&gt; threads; each executing the given sequential algos.                
            </javadoc>
            <method name="SmpBlas" type="constructor" line="61">
                <params>
                    <param name="maxThreads" type="int"/>
                    <param name="seqBlas" type="Blas"/>
                </params>
            </method>
            <javadoc line="66">
                Sets the public global variable &lt;tt&gt;SmpBlas.smpBlas&lt;/tt&gt; to a blas using a maximum of &lt;tt&gt;maxThreads&lt;/tt&gt; threads, each executing the given sequential algorithm; &lt;tt&gt;maxThreads&lt;/tt&gt; is normally the number of CPUs.
                  Call this method at the very beginning of your program. 
                  Normally there is no need to call this method more than once.                
                <param>
                    maxThreads the maximum number of threads (= CPUs) to be used                    
                </param>
                <param>
                    seqBlas the sequential blas algorithms to be used on concurrently processed matrix blocks.                    
                </param>
            </javadoc>
            <method name="allocateBlas" type="void" line="73">
                <params>
                    <param name="maxThreads" type="int"/>
                    <param name="seqBlas" type="Blas"/>
                </params>
                <scope line="74">
                    <declaration name="s" type="SmpBlas" line="75"/>
                </scope>
                <scope line="79"/>
            </method>
            <method name="assign" type="void" line="83">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="function" type="cern.colt.function.DoubleFunction"/>
                </params>
                <anonymous_class line="84">
                    <method name="apply" type="double" line="85">
                        <params>
                            <param name="AA" type="DoubleMatrix2D"/>
                            <param name="BB" type="DoubleMatrix2D"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="assign" type="void" line="92">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                    <param name="function" type="cern.colt.function.DoubleDoubleFunction"/>
                </params>
                <anonymous_class line="93">
                    <method name="apply" type="double" line="94">
                        <params>
                            <param name="AA" type="DoubleMatrix2D"/>
                            <param name="BB" type="DoubleMatrix2D"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="dasum" type="double" line="101">
                <params>
                    <param name="x" type="DoubleMatrix1D"/>
                </params>
            </method>
            <method name="daxpy" type="void" line="104">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="DoubleMatrix1D"/>
                    <param name="y" type="DoubleMatrix1D"/>
                </params>
            </method>
            <method name="daxpy" type="void" line="107">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
            </method>
            <method name="dcopy" type="void" line="110">
                <params>
                    <param name="x" type="DoubleMatrix1D"/>
                    <param name="y" type="DoubleMatrix1D"/>
                </params>
            </method>
            <method name="dcopy" type="void" line="113">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
            </method>
            <method name="ddot" type="double" line="116">
                <params>
                    <param name="x" type="DoubleMatrix1D"/>
                    <param name="y" type="DoubleMatrix1D"/>
                </params>
            </method>
            <method name="dgemm" type="void" line="119">
                <params>
                    <param name="transposeA" type="boolean"/>
                    <param name="transposeB" type="boolean"/>
                    <param name="alpha" type="double"/>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                    <param name="beta" type="double"/>
                    <param name="C" type="DoubleMatrix2D"/>
                </params>
                <scope line="120"/>
                <scope line="124"/>
                <declaration name="m" type="int" line="128"/>
                <declaration name="n" type="int" line="129"/>
                <declaration name="p" type="int" line="130"/>
                <declaration name="flops" type="long" line="134"/>
                <declaration name="noOfTasks" type="int" line="135"/>
                <declaration name="splitB" type="boolean" line="136"/>
                <declaration name="width" type="int" line="137"/>
                <scope line="139"/>
                <declaration name="span" type="int" line="143"/>
                <declaration name="subTasks" type="FJTask[]" line="144"/>
                <scope line="145">
                    <declaration name="offset" type="int" line="146"/>
                    <declaration name="AA" type="DoubleMatrix2D" line="148"/>
                    <scope line="149"/>
                    <scope line="154"/>
                    <anonymous_class line="159">
                        <method name="run" type="void" line="160"/>
                    </anonymous_class>
                </scope>
                <scope line="166">
                    <anonymous_class line="167">
                        <method name="run" type="void" line="168"/>
                    </anonymous_class>
                </scope>
                <scope line="174"/>
            </method>
            <method name="dgemv" type="void" line="177">
                <params>
                    <param name="transposeA" type="boolean"/>
                    <param name="alpha" type="double"/>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="x" type="DoubleMatrix1D"/>
                    <param name="beta" type="double"/>
                    <param name="y" type="DoubleMatrix1D"/>
                </params>
                <scope line="178"/>
                <declaration name="m" type="int" line="182"/>
                <declaration name="n" type="int" line="183"/>
                <declaration name="flops" type="long" line="184"/>
                <declaration name="noOfTasks" type="int" line="185"/>
                <declaration name="width" type="int" line="186"/>
                <scope line="188"/>
                <declaration name="span" type="int" line="192"/>
                <declaration name="subTasks" type="FJTask[]" line="193"/>
                <scope line="194">
                    <declaration name="offset" type="int" line="195"/>
                    <declaration name="AA" type="DoubleMatrix2D" line="197"/>
                    <declaration name="yy" type="DoubleMatrix1D" line="198"/>
                    <anonymous_class line="199">
                        <method name="run" type="void" line="200"/>
                    </anonymous_class>
                </scope>
                <scope line="206">
                    <anonymous_class line="207">
                        <method name="run" type="void" line="208"/>
                    </anonymous_class>
                </scope>
                <scope line="214"/>
            </method>
            <method name="dger" type="void" line="217">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="DoubleMatrix1D"/>
                    <param name="y" type="DoubleMatrix1D"/>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <method name="dnrm2" type="double" line="220">
                <params>
                    <param name="x" type="DoubleMatrix1D"/>
                </params>
            </method>
            <method name="drot" type="void" line="223">
                <params>
                    <param name="x" type="DoubleMatrix1D"/>
                    <param name="y" type="DoubleMatrix1D"/>
                    <param name="c" type="double"/>
                    <param name="s" type="double"/>
                </params>
            </method>
            <method name="drotg" type="void" line="226">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="rotvec" type="double"/>
                </params>
            </method>
            <method name="dscal" type="void" line="229">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="DoubleMatrix1D"/>
                </params>
            </method>
            <method name="dscal" type="void" line="232">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
            </method>
            <method name="dswap" type="void" line="235">
                <params>
                    <param name="x" type="DoubleMatrix1D"/>
                    <param name="y" type="DoubleMatrix1D"/>
                </params>
            </method>
            <method name="dswap" type="void" line="238">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
            </method>
            <method name="dsymv" type="void" line="241">
                <params>
                    <param name="isUpperTriangular" type="boolean"/>
                    <param name="alpha" type="double"/>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="x" type="DoubleMatrix1D"/>
                    <param name="beta" type="double"/>
                    <param name="y" type="DoubleMatrix1D"/>
                </params>
            </method>
            <method name="dtrmv" type="void" line="244">
                <params>
                    <param name="isUpperTriangular" type="boolean"/>
                    <param name="transposeA" type="boolean"/>
                    <param name="isUnitTriangular" type="boolean"/>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="x" type="DoubleMatrix1D"/>
                </params>
            </method>
            <method name="idamax" type="int" line="247">
                <params>
                    <param name="x" type="DoubleMatrix1D"/>
                </params>
            </method>
            <method name="run" type="double[]" line="250">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="B" type="DoubleMatrix2D"/>
                    <param name="collectResults" type="boolean"/>
                    <param name="fun" type="Matrix2DMatrix2DFunction"/>
                </params>
                <declaration name="blocks" type="DoubleMatrix2D[][]" line="251"/>
                <declaration name="b" type="int" line="253"/>
                <declaration name="results" type="double[]" line="254"/>
                <scope line="255">
                    <declaration name="result" type="double" line="256"/>
                </scope>
                <scope line="260"/>
            </method>
            <method name="run" type="double[]" line="265">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="collectResults" type="boolean"/>
                    <param name="fun" type="Matrix2DMatrix2DFunction"/>
                </params>
                <declaration name="blocks" type="DoubleMatrix2D[]" line="266"/>
                <declaration name="b" type="int" line="268"/>
                <declaration name="results" type="double[]" line="269"/>
                <scope line="270">
                    <declaration name="result" type="double" line="271"/>
                </scope>
                <scope line="275"/>
            </method>
            <javadoc line="280">
                Prints various snapshot statistics to System.out; Simply delegates to {@link EDU.oswego.cs.dl.util.concurrent.FJTaskRunnerGroup#stats}.                
            </javadoc>
            <method name="stats" type="void" line="283"/>
            <method name="xsum" type="double" line="286">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <anonymous_class line="287">
                    <method name="apply" type="double" line="288">
                        <params>
                            <param name="AA" type="DoubleMatrix2D"/>
                            <param name="BB" type="DoubleMatrix2D"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="sums" type="double[]" line="287"/>
                <declaration name="sum" type="double" line="293"/>
            </method>
        </class>
    </source>