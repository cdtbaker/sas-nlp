<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.linalg">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="LUDecompositionQuick" line="4">
            <implements interface="java.io.Serializable"/>
            <javadoc line="4">
                A low level version of {@link LUDecomposition}, avoiding unnecessary memory allocation and copying.
                  The input to &lt;tt&gt;decompose&lt;/tt&gt; methods is overriden with the result (LU).
                  The input to &lt;tt&gt;solve&lt;/tt&gt; methods is overriden with the result (X).
                  In addition to &lt;tt&gt;LUDecomposition&lt;/tt&gt;, this class also includes a faster variant of the decomposition, specialized for tridiagonal (and hence also diagonal) matrices,
                  as well as a solver tuned for vectors.
                  Its disadvantage is that it is a bit more difficult to use than &lt;tt&gt;LUDecomposition&lt;/tt&gt;. 
                  Thus, you may want to disregard this class and come back later, if a need for speed arises.
                  &lt;p&gt;
                  An instance of this class remembers the result of its last decomposition.
                  Usage pattern is as follows: Create an instance of this class, call a decompose method, 
                  then retrieve the decompositions, determinant, and/or solve as many equation problems as needed.
                  Once another matrix needs to be LU-decomposed, you need not create a new instance of this class. 
                  Start again by calling a decompose method, then retrieve the decomposition and/or solve your equations, and so on.
                  In case a &lt;tt&gt;LU&lt;/tt&gt; matrix is already available, call method &lt;tt&gt;setLU&lt;/tt&gt; instead of &lt;tt&gt;decompose&lt;/tt&gt; and proceed with solving et al.
                  &lt;p&gt;
                  If a matrix shall not be overriden, use &lt;tt&gt;matrix.copy()&lt;/tt&gt; and hand the the copy to methods.
                  &lt;p&gt;
                  For an &lt;tt&gt;m x n&lt;/tt&gt; matrix &lt;tt&gt;A&lt;/tt&gt; with &lt;tt&gt;m &gt;= n&lt;/tt&gt;, the LU decomposition is an &lt;tt&gt;m x n&lt;/tt&gt;
                  unit lower triangular matrix &lt;tt&gt;L&lt;/tt&gt;, an &lt;tt&gt;n x n&lt;/tt&gt; upper triangular matrix &lt;tt&gt;U&lt;/tt&gt;,
                  and a permutation vector &lt;tt&gt;piv&lt;/tt&gt; of length &lt;tt&gt;m&lt;/tt&gt; so that &lt;tt&gt;A(piv,:) = LU&lt;/tt&gt;;
                  If &lt;tt&gt;m &lt; n&lt;/tt&gt;, then &lt;tt&gt;L&lt;/tt&gt; is &lt;tt&gt;m x m&lt;/tt&gt; and &lt;tt&gt;U&lt;/tt&gt; is &lt;tt&gt;m x n&lt;/tt&gt;.
                  &lt;P&gt;
                  The LU decomposition with pivoting always exists, even if the matrix is
                  singular, so the decompose methods will never fail.  The primary use of the
                  LU decomposition is in the solution of square systems of simultaneous
                  linear equations.
                  Attempting to solve such a system will throw an exception if &lt;tt&gt;isNonsingular()&lt;/tt&gt; returns false.
                  &lt;p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="35"/>
            <declaration name="LU" type="DoubleMatrix2D" line="36"/>
            <javadoc line="36">
                Array for internal storage of decomposition.                
                <serial>
                    internal array storage.                    
                </serial>
            </javadoc>
            <declaration name="pivsign" type="int" line="41"/>
            <javadoc line="41">
                pivot sign.                
                <serial>
                    pivot sign.                    
                </serial>
            </javadoc>
            <declaration name="piv" type="int[]" line="46"/>
            <javadoc line="46">
                Internal storage of pivot vector.                
                <serial>
                    pivot vector.                    
                </serial>
            </javadoc>
            <declaration name="isNonSingular" type="boolean" line="51"/>
            <declaration name="algebra" type="Algebra" line="52"/>
            <declaration name="workDouble" type="double[]" line="53"/>
            <declaration name="work1" type="int[]" line="54"/>
            <declaration name="work2" type="int[]" line="55"/>
            <javadoc line="56">
                Constructs and returns a new LU Decomposition object with default tolerance &lt;tt&gt;1.0E-9&lt;/tt&gt; for singularity detection.                
            </javadoc>
            <method name="LUDecompositionQuick" type="constructor" line="59"/>
            <javadoc line="62">
                Constructs and returns a new LU Decomposition object which uses the given tolerance for singularity detection;                
            </javadoc>
            <method name="LUDecompositionQuick" type="constructor" line="65">
                <params>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="68">
                Decomposes matrix &lt;tt&gt;A&lt;/tt&gt; into &lt;tt&gt;L&lt;/tt&gt; and &lt;tt&gt;U&lt;/tt&gt; (in-place).
                  Upon return &lt;tt&gt;A&lt;/tt&gt; is overridden with the result &lt;tt&gt;LU&lt;/tt&gt;, such that &lt;tt&gt;LU = A&lt;/tt&gt;.
                  Uses a &quot;left-looking&quot;, dot-product, Crout/Doolittle algorithm.                
                <param>
                    A   any matrix.                    
                </param>
            </javadoc>
            <method name="decompose" type="void" line="74">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="CUT_OFF" type="int" line="75"/>
                <declaration name="m" type="int" line="77"/>
                <declaration name="n" type="int" line="78"/>
                <scope line="82"/>
                <declaration name="LUrows" type="DoubleMatrix1D[]" line="86"/>
                <declaration name="nonZeroIndexes" type="cern.colt.list.IntArrayList" line="88"/>
                <declaration name="LUcolj" type="DoubleMatrix1D" line="89"/>
                <declaration name="multFunction" type="cern.jet.math.Mult" line="90"/>
                <scope line="91">
                    <declaration name="maxCardinality" type="int" line="93"/>
                    <declaration name="cardinality" type="int" line="95"/>
                    <declaration name="sparse" type="boolean" line="96"/>
                    <scope line="97">
                        <declaration name="kmax" type="int" line="98"/>
                        <declaration name="s" type="double" line="99"/>
                        <scope line="100"/>
                        <scope line="103"/>
                        <declaration name="before" type="double" line="106"/>
                        <declaration name="after" type="double" line="107"/>
                        <scope line="110">
                            <scope line="111">
                                <declaration name="pos" type="int" line="112"/>
                            </scope>
                            <scope line="116"/>
                        </scope>
                    </scope>
                    <declaration name="p" type="int" line="121"/>
                    <scope line="122">
                        <declaration name="max" type="double" line="123"/>
                        <scope line="124">
                            <declaration name="v" type="double" line="125"/>
                            <scope line="126"/>
                        </scope>
                    </scope>
                    <scope line="132">
                        <declaration name="k" type="int" line="134"/>
                    </scope>
                    <declaration name="jj" type="double" line="139"/>
                    <scope line="140"/>
                </scope>
            </method>
            <javadoc line="147">
                Decomposes the banded and square matrix &lt;tt&gt;A&lt;/tt&gt; into &lt;tt&gt;L&lt;/tt&gt; and &lt;tt&gt;U&lt;/tt&gt; (in-place).
                  Upon return &lt;tt&gt;A&lt;/tt&gt; is overridden with the result &lt;tt&gt;LU&lt;/tt&gt;, such that &lt;tt&gt;LU = A&lt;/tt&gt;.
                  Currently supports diagonal and tridiagonal matrices, all other cases fall through to {@link #decompose(DoubleMatrix2D)}.                
                <param>
                    semiBandwidth == 1 --> A is diagonal, == 2 --> A is tridiagonal.                    
                </param>
                <param>
                    A   any matrix.                    
                </param>
            </javadoc>
            <method name="decompose" type="void" line="154">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                    <param name="semiBandwidth" type="int"/>
                </params>
                <scope line="155"/>
                <declaration name="m" type="int" line="160"/>
                <declaration name="n" type="int" line="161"/>
                <scope line="165"/>
                <scope line="169">
                    <scope line="171">
                        <declaration name="ei" type="double" line="172"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="179">
                Returns the determinant, &lt;tt&gt;det(A)&lt;/tt&gt;.                
                <exception>
                    IllegalArgumentException  if <tt>A.rows() != A.columns()</tt> (Matrix must be square).                    
                </exception>
            </javadoc>
            <method name="det" type="double" line="183">
                <declaration name="m" type="int" line="184"/>
                <declaration name="n" type="int" line="185"/>
                <declaration name="det" type="double" line="188"/>
                <scope line="189"/>
            </method>
            <javadoc line="194">
                Returns pivot permutation vector as a one-dimensional double array                
                <return>
                    (double) piv                    
                </return>
            </javadoc>
            <method name="getDoublePivot" type="double[]" line="198">
                <declaration name="m" type="int" line="199"/>
                <declaration name="vals" type="double[]" line="200"/>
                <scope line="201"/>
            </method>
            <javadoc line="206">
                Returns the lower triangular factor, &lt;tt&gt;L&lt;/tt&gt;.                
                <return>
                    <tt>L</tt>                    
                </return>
            </javadoc>
            <method name="getL" type="DoubleMatrix2D" line="210"/>
            <javadoc line="213">
                Returns a copy of the combined lower and upper triangular factor, &lt;tt&gt;LU&lt;/tt&gt;.                
                <return>
                    <tt>LU</tt>                    
                </return>
            </javadoc>
            <method name="getLU" type="DoubleMatrix2D" line="217"/>
            <javadoc line="220">
                Returns the pivot permutation vector (not a copy of it).                
                <return>
                    piv                    
                </return>
            </javadoc>
            <method name="getPivot" type="int[]" line="224"/>
            <javadoc line="227">
                Returns the upper triangular factor, &lt;tt&gt;U&lt;/tt&gt;.                
                <return>
                    <tt>U</tt>                    
                </return>
            </javadoc>
            <method name="getU" type="DoubleMatrix2D" line="231"/>
            <javadoc line="234">
                Returns whether the matrix is nonsingular (has an inverse).                
                <return>
                    true if <tt>U</tt>, and hence <tt>A</tt>, is nonsingular; false otherwise.                    
                </return>
            </javadoc>
            <method name="isNonsingular" type="boolean" line="238"/>
            <javadoc line="241">
                Returns whether the matrix is nonsingular.                
                <return>
                    true if <tt>matrix</tt> is nonsingular; false otherwise.                    
                </return>
            </javadoc>
            <method name="isNonsingular" type="boolean" line="245">
                <params>
                    <param name="matrix" type="DoubleMatrix2D"/>
                </params>
                <declaration name="m" type="int" line="246"/>
                <declaration name="n" type="int" line="247"/>
                <declaration name="epsilon" type="double" line="248"/>
                <scope line="249"/>
            </method>
            <javadoc line="254">
                Modifies the matrix to be a lower triangular matrix.
                  &lt;p&gt;
                  &lt;b&gt;Examples:&lt;/b&gt; 
                  &lt;table border=&quot;0&quot;&gt;
                  &lt;tr nowrap&gt; 
                  &lt;td valign=&quot;top&quot;&gt;3 x 5 matrix:&lt;br&gt;
                  9, 9, 9, 9, 9&lt;br&gt;
                  9, 9, 9, 9, 9&lt;br&gt;
                  9, 9, 9, 9, 9 &lt;/td&gt;
                  &lt;td align=&quot;center&quot;&gt;triang.Upper&lt;br&gt;
                  ==&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;3 x 5 matrix:&lt;br&gt;
                  9, 9, 9, 9, 9&lt;br&gt;
                  0, 9, 9, 9, 9&lt;br&gt;
                  0, 0, 9, 9, 9&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr nowrap&gt; 
                  &lt;td valign=&quot;top&quot;&gt;5 x 3 matrix:&lt;br&gt;
                  9, 9, 9&lt;br&gt;
                  9, 9, 9&lt;br&gt;
                  9, 9, 9&lt;br&gt;
                  9, 9, 9&lt;br&gt;
                  9, 9, 9 &lt;/td&gt;
                  &lt;td align=&quot;center&quot;&gt;triang.Upper&lt;br&gt;
                  ==&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;5 x 3 matrix:&lt;br&gt;
                  9, 9, 9&lt;br&gt;
                  0, 9, 9&lt;br&gt;
                  0, 0, 9&lt;br&gt;
                  0, 0, 0&lt;br&gt;
                  0, 0, 0&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr nowrap&gt; 
                  &lt;td valign=&quot;top&quot;&gt;3 x 5 matrix:&lt;br&gt;
                  9, 9, 9, 9, 9&lt;br&gt;
                  9, 9, 9, 9, 9&lt;br&gt;
                  9, 9, 9, 9, 9 &lt;/td&gt;
                  &lt;td align=&quot;center&quot;&gt;triang.Lower&lt;br&gt;
                  ==&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;3 x 5 matrix:&lt;br&gt;
                  1, 0, 0, 0, 0&lt;br&gt;
                  9, 1, 0, 0, 0&lt;br&gt;
                  9, 9, 1, 0, 0&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr nowrap&gt; 
                  &lt;td valign=&quot;top&quot;&gt;5 x 3 matrix:&lt;br&gt;
                  9, 9, 9&lt;br&gt;
                  9, 9, 9&lt;br&gt;
                  9, 9, 9&lt;br&gt;
                  9, 9, 9&lt;br&gt;
                  9, 9, 9 &lt;/td&gt;
                  &lt;td align=&quot;center&quot;&gt;triang.Lower&lt;br&gt;
                  ==&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;5 x 3 matrix:&lt;br&gt;
                  1, 0, 0&lt;br&gt;
                  9, 1, 0&lt;br&gt;
                  9, 9, 1&lt;br&gt;
                  9, 9, 9&lt;br&gt;
                  9, 9, 9&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <return>
                    <tt>A</tt> (for convenience only).                    
                </return>
                <see>
                    #triangulateUpper(DoubleMatrix2D)                    
                </see>
            </javadoc>
            <method name="lowerTriangular" type="DoubleMatrix2D" line="319">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="rows" type="int" line="320"/>
                <declaration name="columns" type="int" line="321"/>
                <declaration name="min" type="int" line="322"/>
                <scope line="323">
                    <scope line="324"/>
                </scope>
            </method>
            <javadoc line="332">
                                
            </javadoc>
            <method name="m" type="int" line="334"/>
            <javadoc line="337">
                                
            </javadoc>
            <method name="n" type="int" line="339"/>
            <javadoc line="342">
                Sets the combined lower and upper triangular factor, &lt;tt&gt;LU&lt;/tt&gt;.
                  The parameter is not checked; make sure it is indeed a proper LU decomposition.                
            </javadoc>
            <method name="setLU" type="void" line="346">
                <params>
                    <param name="LU" type="DoubleMatrix2D"/>
                </params>
            </method>
            <javadoc line="350">
                Solves the system of equations &lt;tt&gt;AX = B&lt;/tt&gt; (in-place).
                  Upon return &lt;tt&gt;B&lt;/tt&gt; is overridden with the result &lt;tt&gt;X&lt;/tt&gt;, such that &lt;tt&gt;LUX = B(piv)&lt;/tt&gt;.                
                <param>
                    B   A vector with <tt>B.size() == A.rows()</tt>.                    
                </param>
                <exception>
                    IllegalArgumentException if </tt>B.size() != A.rows()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if A is singular, that is, if <tt>!isNonsingular()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if <tt>A.rows() < A.columns()</tt>.                    
                </exception>
            </javadoc>
            <method name="solve" type="void" line="358">
                <params>
                    <param name="B" type="DoubleMatrix1D"/>
                </params>
                <declaration name="m" type="int" line="360"/>
                <declaration name="n" type="int" line="361"/>
                <scope line="367">
                    <declaration name="f" type="double" line="368"/>
                    <scope line="369">
                        <scope line="370">
                            <declaration name="v" type="double" line="371"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="376">
                    <declaration name="f" type="double" line="378"/>
                    <scope line="379">
                        <scope line="380">
                            <declaration name="v" type="double" line="381"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="387">
                Solves the system of equations &lt;tt&gt;AX = B&lt;/tt&gt; (in-place).
                  Upon return &lt;tt&gt;B&lt;/tt&gt; is overridden with the result &lt;tt&gt;X&lt;/tt&gt;, such that &lt;tt&gt;LUX = B(piv,:)&lt;/tt&gt;.                
                <param>
                    B   A matrix with as many rows as <tt>A</tt> and any number of columns.                    
                </param>
                <exception>
                    IllegalArgumentException if </tt>B.rows() != A.rows()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if A is singular, that is, if <tt>!isNonsingular()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if <tt>A.rows() < A.columns()</tt>.                    
                </exception>
            </javadoc>
            <method name="solve" type="void" line="395">
                <params>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <declaration name="CUT_OFF" type="int" line="396"/>
                <declaration name="m" type="int" line="398"/>
                <declaration name="n" type="int" line="399"/>
                <declaration name="nx" type="int" line="405"/>
                <declaration name="Brows" type="DoubleMatrix1D[]" line="406"/>
                <declaration name="div" type="cern.jet.math.Mult" line="408"/>
                <declaration name="minusMult" type="cern.jet.math.PlusMult" line="409"/>
                <declaration name="nonZeroIndexes" type="cern.colt.list.IntArrayList" line="410"/>
                <declaration name="Browk" type="DoubleMatrix1D" line="411"/>
                <scope line="412">
                    <declaration name="maxCardinality" type="int" line="414"/>
                    <declaration name="cardinality" type="int" line="416"/>
                    <declaration name="sparse" type="boolean" line="417"/>
                    <scope line="418">
                        <scope line="420">
                            <scope line="421"/>
                            <scope line="424"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="430">
                    <declaration name="maxCardinality" type="int" line="435"/>
                    <declaration name="cardinality" type="int" line="437"/>
                    <declaration name="sparse" type="boolean" line="438"/>
                    <scope line="439">
                        <scope line="441">
                            <scope line="442"/>
                            <scope line="445"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="452">
                Solves &lt;tt&gt;AX = B&lt;/tt&gt;.                
                <param>
                    B   A matrix with as many rows as <tt>A</tt> and any number of columns.                    
                </param>
                <return>
                    <tt>X</tt> so that <tt>LUX = B(piv,:)</tt>.                    
                </return>
                <exception>
                    IllegalArgumentException if </tt>B.rows() != A.rows()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if A is singular, that is, if <tt>!this.isNonsingular()</tt>.                    
                </exception>
                <exception>
                    IllegalArgumentException  if <tt>A.rows() < A.columns()</tt>.                    
                </exception>
            </javadoc>
            <method name="solveOld" type="void" line="460">
                <params>
                    <param name="B" type="DoubleMatrix2D"/>
                </params>
                <declaration name="m" type="int" line="462"/>
                <declaration name="n" type="int" line="463"/>
                <declaration name="nx" type="int" line="466"/>
                <scope line="469">
                    <scope line="470">
                        <declaration name="mult" type="double" line="471"/>
                        <scope line="472">
                            <scope line="473"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="479">
                    <declaration name="mult" type="double" line="480"/>
                    <scope line="481">
                        <scope line="482"/>
                    </scope>
                    <scope line="486">
                        <scope line="488">
                            <scope line="489"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="496">
                Returns a String with (propertyName, propertyValue) pairs.
                  Useful for debugging or to quickly get the rough picture.
                  For example,
                  &lt;pre&gt;
                  rank          : 3
                  trace         : 0
                  &lt;/pre&gt;                
            </javadoc>
            <method name="toString" type="String" line="505">
                <declaration name="buf" type="StringBuffer" line="506"/>
                <declaration name="unknown" type="String" line="507"/>
                <scope line="512"/>
                <scope line="515"/>
                <scope line="519"/>
                <scope line="522"/>
                <scope line="526"/>
                <scope line="529"/>
                <scope line="533"/>
                <scope line="536"/>
                <scope line="540"/>
                <scope line="543"/>
                <declaration name="identity" type="DoubleMatrix2D" line="547"/>
                <scope line="548"/>
                <scope line="552"/>
            </method>
            <javadoc line="557">
                Modifies the matrix to be an upper triangular matrix.                
                <return>
                    <tt>A</tt> (for convenience only).                    
                </return>
                <see>
                    #triangulateLower(DoubleMatrix2D)                    
                </see>
            </javadoc>
            <method name="upperTriangular" type="DoubleMatrix2D" line="562">
                <params>
                    <param name="A" type="DoubleMatrix2D"/>
                </params>
                <declaration name="rows" type="int" line="563"/>
                <declaration name="columns" type="int" line="564"/>
                <declaration name="min" type="int" line="565"/>
                <scope line="566">
                    <scope line="567"/>
                </scope>
            </method>
            <javadoc line="574">
                Returns pivot permutation vector as a one-dimensional double array                
                <return>
                    (double) piv                    
                </return>
            </javadoc>
            <method name="xgetDoublePivot" type="double[]" line="578">
                <declaration name="m" type="int" line="579"/>
                <declaration name="vals" type="double[]" line="580"/>
                <scope line="581"/>
            </method>
        </class>
    </source>