<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.objectalgo">
        <import package="cern.colt.function.IntComparator"/>
        <import package="cern.colt.matrix.ObjectMatrix1D"/>
        <import package="cern.colt.matrix.ObjectMatrix2D"/>
        <import package="cern.colt.matrix.ObjectMatrix3D"/>
        <class name="Sorting" line="15">
            <extends class="cern.colt.PersistentObject"/>
            <comment line="44">
                already has quicksort implemented                
            </comment>
            <javadoc line="15">
                Matrix quicksorts and mergesorts.
                  Use idioms like &lt;tt&gt;Sorting.quickSort.sort(...)&lt;/tt&gt; and &lt;tt&gt;Sorting.mergeSort.sort(...)&lt;/tt&gt;.
                  &lt;p&gt;
                  This is another case demonstrating one primary goal of this library: Delivering easy to use, yet very efficient APIs.
                  The sorts return convenient &lt;i&gt;sort views&lt;/i&gt;.
                  This enables the usage of algorithms which scale well with the problem size:
                  For example, sorting a 1000000 x 10000 or a 1000000 x 100 x 100 matrix performs just as fast as sorting a 1000000 x 1 matrix.
                  This is so, because internally the algorithms only move around integer indexes, they do not physically move around entire rows or slices.
                  The original matrix is left unaffected.
                  &lt;p&gt;
                  The quicksort is a derivative of the JDK 1.2 V1.26 algorithms (which are, in turn, based on Bentley&apos;s and McIlroy&apos;s fine work).
                  The mergesort is a derivative of the JAL algorithms, with optimisations taken from the JDK algorithms.
                  Mergesort is &lt;i&gt;stable&lt;/i&gt; (by definition), while quicksort is not.
                  A stable sort is, for example, helpful, if matrices are sorted successively 
                  by multiple columns. It preserves the relative position of equal elements.                
                <see>
                    cern.colt.GenericSorting                    
                </see>
                <see>
                    cern.colt.Sorting                    
                </see>
                <see>
                    java.util.Arrays                    
                </see>
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.1, 25/May/2000                    
                </version>
            </javadoc>
            <declaration name="quickSort" type="Sorting" line="40"/>
            <javadoc line="40">
                A prefabricated quicksort.                
            </javadoc>
            <declaration name="mergeSort" type="Sorting" line="45"/>
            <javadoc line="45">
                A prefabricated mergesort.                
            </javadoc>
            <anonymous_class line="48">
                <method name="runSort" type="void" line="49">
                    <params>
                        <param name="a" type="int[]"/>
                        <param name="fromIndex" type="int"/>
                        <param name="toIndex" type="int"/>
                        <param name="c" type="IntComparator"/>
                    </params>
                </method>
                <method name="runSort" type="void" line="52">
                    <params>
                        <param name="fromIndex" type="int"/>
                        <param name="toIndex" type="int"/>
                        <param name="c" type="IntComparator"/>
                        <param name="swapper" type="cern.colt.Swapper"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="56">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Sorting" type="constructor" line="59"/>
            <method name="runSort" type="void" line="60">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="IntComparator"/>
                </params>
            </method>
            <method name="runSort" type="void" line="63">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                    <param name="c" type="IntComparator"/>
                    <param name="swapper" type="cern.colt.Swapper"/>
                </params>
            </method>
            <javadoc line="66">
                Sorts the vector into ascending order, according to the &lt;i&gt;natural ordering&lt;/i&gt;.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  To sort ranges use sub-ranging views. To sort descending, use flip views ...
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt; 
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr nowrap&gt; 
                  &lt;td valign=&quot;top&quot;&gt;&lt;tt&gt; 7, 1, 3, 1&lt;br&gt;
                  &lt;/tt&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt; 
                  &lt;p&gt;&lt;tt&gt; ==&amp;gt; 1, 1, 3, 7&lt;br&gt;
                  The vector IS NOT SORTED.&lt;br&gt;
                  The new VIEW IS SORTED.&lt;/tt&gt;&lt;/p&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    vector the vector to be sorted.                    
                </param>
                <return>
                    a new sorted vector (matrix) view. 
                      &lt;b&gt;Note that the original matrix is left unaffected.&lt;/b&gt;                    
                </return>
            </javadoc>
            <method name="sort" type="ObjectMatrix1D" line="88">
                <params>
                    <param name="vector" type="ObjectMatrix1D"/>
                </params>
                <comment line="90">
                    row indexes to reorder instead of matrix itself                    
                </comment>
                <declaration name="indexes" type="int[]" line="89"/>
                <anonymous_class line="92">
                    <method name="compare" type="int" line="93">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                        <declaration name="av" type="Comparable" line="94"/>
                        <declaration name="bv" type="Comparable" line="95"/>
                        <declaration name="r" type="int" line="96"/>
                    </method>
                </anonymous_class>
                <declaration name="comp" type="IntComparator" line="92"/>
            </method>
            <javadoc line="105">
                Sorts the vector into ascending order, according to the order induced by the specified comparator.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  The algorithm compares two cells at a time, determinining whether one is smaller, equal or larger than the other.
                  To sort ranges use sub-ranging views. To sort descending, use flip views ...
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  // sort by sinus of cells
                  ObjectComparator comp = new ObjectComparator() {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;public int compare(Object a, Object b) {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object as = Math.sin(a); Object bs = Math.sin(b);
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return as &lt; bs ? -1 : as == bs ? 0 : 1;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;}
                  };
                  sorted = quickSort(vector,comp);
                  &lt;/pre&gt;                
                <param>
                    vector the vector to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order.                    
                </param>
                <return>
                    a new matrix view sorted as specified.
                      &lt;b&gt;Note that the original vector (matrix) is left unaffected.&lt;/b&gt;                    
                </return>
            </javadoc>
            <method name="sort" type="ObjectMatrix1D" line="128">
                <params>
                    <param name="vector" type="ObjectMatrix1D"/>
                    <param name="c" type="java.util.Comparator"/>
                </params>
                <comment line="130">
                    row indexes to reorder instead of matrix itself                    
                </comment>
                <declaration name="indexes" type="int[]" line="129"/>
                <anonymous_class line="132">
                    <method name="compare" type="int" line="133">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="comp" type="IntComparator" line="132"/>
            </method>
            <javadoc line="142">
                Sorts the matrix rows into ascending order, according to the &lt;i&gt;natural ordering&lt;/i&gt; of the matrix values in the given column.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  To sort ranges use sub-ranging views. To sort columns by rows, use dice views. To sort descending, use flip views ...
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt; 
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr nowrap&gt; 
                  &lt;td valign=&quot;top&quot;&gt;&lt;tt&gt;4 x 2 matrix: &lt;br&gt;
                  7, 6&lt;br&gt;
                  5, 4&lt;br&gt;
                  3, 2&lt;br&gt;
                  1, 0 &lt;br&gt;
                  &lt;/tt&gt;&lt;/td&gt;
                  &lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;p&gt;&lt;tt&gt;column = 0;&lt;br&gt;
                  view = quickSort(matrix,column);&lt;br&gt;
                  System.out.println(view); &lt;/tt&gt;&lt;tt&gt;&lt;br&gt;
                  ==&gt; &lt;/tt&gt;&lt;/p&gt;
                  &lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt; 
                  &lt;p&gt;&lt;tt&gt;4 x 2 matrix:&lt;br&gt;
                  1, 0&lt;br&gt;
                  3, 2&lt;br&gt;
                  5, 4&lt;br&gt;
                  7, 6&lt;/tt&gt;&lt;br&gt;
                  The matrix IS NOT SORTED.&lt;br&gt;
                  The new VIEW IS SORTED.&lt;/p&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    matrix the matrix to be sorted.                    
                </param>
                <param>
                    column the index of the column inducing the order.                    
                </param>
                <return>
                    a new matrix view having rows sorted by the given column.
                      &lt;b&gt;Note that the original matrix is left unaffected.&lt;/b&gt;                    
                </return>
                <throws>
                    IndexOutOfBoundsException if &lt;tt&gt;column &lt; 0 || column &gt;= matrix.columns()&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="sort" type="ObjectMatrix2D" line="180">
                <params>
                    <param name="matrix" type="ObjectMatrix2D"/>
                    <param name="column" type="int"/>
                </params>
                <comment line="184">
                    row indexes to reorder instead of matrix itself                    
                </comment>
                <comment line="199">
                    view the matrix according to the reordered row indexes
                     take all columns in the original order                    
                </comment>
                <declaration name="rowIndexes" type="int[]" line="183"/>
                <declaration name="col" type="ObjectMatrix1D" line="186"/>
                <anonymous_class line="187">
                    <method name="compare" type="int" line="188">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                        <declaration name="av" type="Comparable" line="189"/>
                        <declaration name="bv" type="Comparable" line="190"/>
                        <declaration name="r" type="int" line="191"/>
                    </method>
                </anonymous_class>
                <declaration name="comp" type="IntComparator" line="187"/>
            </method>
            <javadoc line="202">
                Sorts the matrix rows according to the order induced by the specified comparator.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  The algorithm compares two rows (1-d matrices) at a time, determinining whether one is smaller, equal or larger than the other.
                  To sort ranges use sub-ranging views. To sort columns by rows, use dice views. To sort descending, use flip views ...
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  // sort by sum of values in a row
                  ObjectMatrix1DComparator comp = new ObjectMatrix1DComparator() {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;public int compare(ObjectMatrix1D a, ObjectMatrix1D b) {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object as = a.zSum(); Object bs = b.zSum();
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return as &lt; bs ? -1 : as == bs ? 0 : 1;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;}
                  };
                  sorted = quickSort(matrix,comp);
                  &lt;/pre&gt;                
                <param>
                    matrix the matrix to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order.                    
                </param>
                <return>
                    a new matrix view having rows sorted as specified.
                      &lt;b&gt;Note that the original matrix is left unaffected.&lt;/b&gt;                    
                </return>
            </javadoc>
            <method name="sort" type="ObjectMatrix2D" line="225">
                <params>
                    <param name="matrix" type="ObjectMatrix2D"/>
                    <param name="c" type="ObjectMatrix1DComparator"/>
                </params>
                <comment line="227">
                    row indexes to reorder instead of matrix itself                    
                </comment>
                <comment line="230">
                    precompute views for speed                    
                </comment>
                <comment line="235">
                    return c.compare(matrix.viewRow(a), matrix.viewRow(b));                    
                </comment>
                <comment line="242">
                    view the matrix according to the reordered row indexes
                     take all columns in the original order                    
                </comment>
                <declaration name="rowIndexes" type="int[]" line="226"/>
                <declaration name="views" type="ObjectMatrix1D[]" line="229"/>
                <anonymous_class line="232">
                    <method name="compare" type="int" line="233">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                        <comment line="235">
                            return c.compare(matrix.viewRow(a), matrix.viewRow(b));                            
                        </comment>
                    </method>
                </anonymous_class>
                <declaration name="comp" type="IntComparator" line="232"/>
            </method>
            <javadoc line="245">
                Sorts the matrix slices into ascending order, according to the &lt;i&gt;natural ordering&lt;/i&gt; of the matrix values in the given &lt;tt&gt;[row,column]&lt;/tt&gt; position.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  To sort ranges use sub-ranging views. To sort by other dimensions, use dice views. To sort descending, use flip views ...
                  &lt;p&gt;
                  The algorithm compares two 2-d slices at a time, determinining whether one is smaller, equal or larger than the other.
                  Comparison is based on the cell &lt;tt&gt;[row,column]&lt;/tt&gt; within a slice.
                  Let &lt;tt&gt;A&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; be two 2-d slices. Then we have the following rules
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;A &amp;lt;  B  iff A.get(row,column) &amp;lt;  B.get(row,column)&lt;/tt&gt;
                  &lt;li&gt;&lt;tt&gt;A == B iff A.get(row,column) == B.get(row,column)&lt;/tt&gt;
                  &lt;li&gt;&lt;tt&gt;A &amp;gt;  B  iff A.get(row,column) &amp;gt;  B.get(row,column)&lt;/tt&gt;
                  &lt;/ul&gt;                
                <param>
                    matrix the matrix to be sorted.                    
                </param>
                <param>
                    row the index of the row inducing the order.                    
                </param>
                <param>
                    column the index of the column inducing the order.                    
                </param>
                <return>
                    a new matrix view having slices sorted by the values of the slice view &lt;tt&gt;matrix.viewRow(row).viewColumn(column)&lt;/tt&gt;.
                      &lt;b&gt;Note that the original matrix is left unaffected.&lt;/b&gt;                    
                </return>
                <throws>
                    IndexOutOfBoundsException if &lt;tt&gt;row &lt; 0 || row &gt;= matrix.rows() || column &lt; 0 || column &gt;= matrix.columns()&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="sort" type="ObjectMatrix3D" line="266">
                <params>
                    <param name="matrix" type="ObjectMatrix3D"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <comment line="271">
                    indexes to reorder instead of matrix itself                    
                </comment>
                <comment line="286">
                    view the matrix according to the reordered slice indexes
                     take all rows and columns in the original order                    
                </comment>
                <declaration name="sliceIndexes" type="int[]" line="270"/>
                <declaration name="sliceView" type="ObjectMatrix1D" line="273"/>
                <anonymous_class line="274">
                    <method name="compare" type="int" line="275">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                        <declaration name="av" type="Comparable" line="276"/>
                        <declaration name="bv" type="Comparable" line="277"/>
                        <declaration name="r" type="int" line="278"/>
                    </method>
                </anonymous_class>
                <declaration name="comp" type="IntComparator" line="274"/>
            </method>
            <javadoc line="289">
                Sorts the matrix slices according to the order induced by the specified comparator.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  The algorithm compares two slices (2-d matrices) at a time, determinining whether one is smaller, equal or larger than the other.
                  To sort ranges use sub-ranging views. To sort by other dimensions, use dice views. To sort descending, use flip views ...
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  // sort by sum of values in a slice
                  ObjectMatrix2DComparator comp = new ObjectMatrix2DComparator() {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;public int compare(ObjectMatrix2D a, ObjectMatrix2D b) {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object as = a.zSum(); Object bs = b.zSum();
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return as &lt; bs ? -1 : as == bs ? 0 : 1;
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;}
                  };
                  sorted = quickSort(matrix,comp);
                  &lt;/pre&gt;                
                <param>
                    matrix the matrix to be sorted.                    
                </param>
                <param>
                    c the comparator to determine the order.                    
                </param>
                <return>
                    a new matrix view having slices sorted as specified.
                      &lt;b&gt;Note that the original matrix is left unaffected.&lt;/b&gt;                    
                </return>
            </javadoc>
            <method name="sort" type="ObjectMatrix3D" line="312">
                <params>
                    <param name="matrix" type="ObjectMatrix3D"/>
                    <param name="c" type="ObjectMatrix2DComparator"/>
                </params>
                <comment line="314">
                    indexes to reorder instead of matrix itself                    
                </comment>
                <comment line="317">
                    precompute views for speed                    
                </comment>
                <comment line="322">
                    return c.compare(matrix.viewSlice(a), matrix.viewSlice(b));                    
                </comment>
                <comment line="329">
                    view the matrix according to the reordered slice indexes
                     take all rows and columns in the original order                    
                </comment>
                <declaration name="sliceIndexes" type="int[]" line="313"/>
                <declaration name="views" type="ObjectMatrix2D[]" line="316"/>
                <anonymous_class line="319">
                    <method name="compare" type="int" line="320">
                        <params>
                            <param name="a" type="int"/>
                            <param name="b" type="int"/>
                        </params>
                        <comment line="322">
                            return c.compare(matrix.viewSlice(a), matrix.viewSlice(b));                            
                        </comment>
                    </method>
                </anonymous_class>
                <declaration name="comp" type="IntComparator" line="319"/>
            </method>
        </class>
    </source>