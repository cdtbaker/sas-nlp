<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.objectalgo">
        <import package="cern.colt.matrix.ObjectMatrix1D"/>
        <import package="cern.colt.matrix.ObjectMatrix2D"/>
        <import package="cern.colt.matrix.ObjectMatrix3D"/>
        <import package="cern.colt.matrix.impl.AbstractFormatter"/>
        <import package="cern.colt.matrix.impl.AbstractMatrix1D"/>
        <import package="cern.colt.matrix.impl.AbstractMatrix2D"/>
        <import package="cern.colt.matrix.impl.Former"/>
        <class name="Formatter" line="18">
            <extends class="AbstractFormatter"/>
            <javadoc line="18">
                Flexible, well human readable matrix print formatting.
                  Each cell is converted using {@link Object#toString()}.
                  For examples see {@link cern.colt.matrix.doublealgo.Formatter doublealgo.Formatter} which is just the same except that it operates on doubles.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.1, 11/22/99                    
                </version>
            </javadoc>
            <javadoc line="27">
                Constructs and returns a matrix formatter with alignment &lt;tt&gt;LEFT&lt;/tt&gt;.                
            </javadoc>
            <method name="Formatter" type="constructor" line="30"/>
            <javadoc line="33">
                Constructs and returns a matrix formatter.                
                <param>
                    alignment the given alignment used to align a column.                    
                </param>
            </javadoc>
            <method name="Formatter" type="constructor" line="37">
                <params>
                    <param name="alignment" type="String"/>
                </params>
            </method>
            <javadoc line="40">
                Converts a given cell to a String; no alignment considered.                
            </javadoc>
            <method name="form" type="String" line="43">
                <params>
                    <param name="matrix" type="AbstractMatrix1D"/>
                    <param name="index" type="int"/>
                    <param name="formatter" type="Former"/>
                </params>
            </method>
            <javadoc line="46">
                Converts a given cell to a String; no alignment considered.                
            </javadoc>
            <method name="form" type="String" line="49">
                <params>
                    <param name="matrix" type="ObjectMatrix1D"/>
                    <param name="index" type="int"/>
                    <param name="formatter" type="Former"/>
                </params>
                <declaration name="value" type="Object" line="50"/>
            </method>
            <javadoc line="54">
                Returns a string representations of all cells; no alignment considered.                
            </javadoc>
            <method name="format" type="String[][]" line="57">
                <params>
                    <param name="matrix" type="AbstractMatrix2D"/>
                </params>
            </method>
            <javadoc line="60">
                Returns a string representations of all cells; no alignment considered.                
            </javadoc>
            <method name="format" type="String[][]" line="63">
                <params>
                    <param name="matrix" type="ObjectMatrix2D"/>
                </params>
                <declaration name="strings" type="String[][]" line="64"/>
            </method>
            <javadoc line="68">
                Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.                
                <param>
                    matrix the matrix to format.                    
                </param>
            </javadoc>
            <method name="toSourceCode" type="String" line="72">
                <params>
                    <param name="matrix" type="ObjectMatrix1D"/>
                </params>
                <declaration name="copy" type="Formatter" line="73"/>
                <declaration name="lead" type="String" line="76"/>
                <declaration name="trail" type="String" line="77"/>
            </method>
            <javadoc line="80">
                Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.                
                <param>
                    matrix the matrix to format.                    
                </param>
            </javadoc>
            <method name="toSourceCode" type="String" line="84">
                <params>
                    <param name="matrix" type="ObjectMatrix2D"/>
                </params>
                <declaration name="copy" type="Formatter" line="85"/>
                <declaration name="b3" type="String" line="86"/>
                <declaration name="lead" type="String" line="90"/>
                <declaration name="trail" type="String" line="91"/>
            </method>
            <javadoc line="94">
                Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.                
                <param>
                    matrix the matrix to format.                    
                </param>
            </javadoc>
            <method name="toSourceCode" type="String" line="98">
                <params>
                    <param name="matrix" type="ObjectMatrix3D"/>
                </params>
                <declaration name="copy" type="Formatter" line="99"/>
                <declaration name="b3" type="String" line="100"/>
                <declaration name="b6" type="String" line="101"/>
                <declaration name="lead" type="String" line="106"/>
                <declaration name="trail" type="String" line="107"/>
            </method>
            <javadoc line="110">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="114">
                <params>
                    <param name="matrix" type="AbstractMatrix2D"/>
                </params>
            </method>
            <javadoc line="117">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="121">
                <params>
                    <param name="matrix" type="ObjectMatrix1D"/>
                </params>
                <declaration name="easy" type="ObjectMatrix2D" line="122"/>
            </method>
            <javadoc line="126">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="130">
                <params>
                    <param name="matrix" type="ObjectMatrix2D"/>
                </params>
            </method>
            <javadoc line="133">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="137">
                <params>
                    <param name="matrix" type="ObjectMatrix3D"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="138"/>
                <declaration name="oldPrintShape" type="boolean" line="139"/>
                <scope line="141"/>
            </method>
            <javadoc line="149">
                Returns a string representation of the given matrix with axis as well as rows and columns labeled.
                  Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.                
                <param>
                    matrix The matrix to format.                    
                </param>
                <param>
                    rowNames The headers of all rows (to be put to the left of the matrix).                    
                </param>
                <param>
                    columnNames The headers of all columns (to be put to above the matrix).                    
                </param>
                <param>
                    rowAxisName The label of the y-axis.                    
                </param>
                <param>
                    columnAxisName The label of the x-axis.                    
                </param>
                <param>
                    title The overall title of the matrix to be formatted.                    
                </param>
                <return>
                    the matrix converted to a string.                    
                </return>
            </javadoc>
            <method name="toTitleString" type="String" line="161">
                <params>
                    <param name="matrix" type="ObjectMatrix2D"/>
                    <param name="rowNames" type="String[]"/>
                    <param name="columnNames" type="String[]"/>
                    <param name="rowAxisName" type="String"/>
                    <param name="columnAxisName" type="String"/>
                    <param name="title" type="String"/>
                </params>
                <comment line="170">
                    determine how many rows and columns are needed                    
                </comment>
                <comment line="181">
                    make larger matrix holding original matrix and naming strings                    
                </comment>
                <comment line="184">
                    insert original matrix into larger matrix                    
                </comment>
                <comment line="187">
                    insert column axis name in leading row                    
                </comment>
                <comment line="190">
                    insert row axis name in leading column                    
                </comment>
                <comment line="196">
                    insert row names in next leading columns                    
                </comment>
                <comment line="199">
                    insert vertical &quot;---------&quot; separator line in next leading column                    
                </comment>
                <comment line="202">
                    convert the large matrix to a string                    
                </comment>
                <comment line="208">
                    insert horizontal &quot;--------------&quot; separator line                    
                </comment>
                <comment line="219">
                    insert line for column axis name                    
                </comment>
                <comment line="229">
                    insert title                    
                </comment>
                <declaration name="oldFormat" type="String" line="163"/>
                <declaration name="rows" type="int" line="166"/>
                <declaration name="columns" type="int" line="167"/>
                <declaration name="r" type="int" line="170"/>
                <declaration name="c" type="int" line="171"/>
                <declaration name="height" type="int" line="177"/>
                <declaration name="width" type="int" line="178"/>
                <declaration name="titleMatrix" type="cern.colt.matrix.ObjectMatrix2D" line="181"/>
                <scope line="190">
                    <declaration name="rowAxisStrings" type="String[]" line="191"/>
                </scope>
                <declaration name="oldPrintShape" type="boolean" line="202"/>
                <declaration name="str" type="String" line="204"/>
                <declaration name="total" type="StringBuffer" line="208"/>
                <scope line="209">
                    <declaration name="i" type="int" line="210"/>
                </scope>
                <scope line="213">
                    <declaration name="i" type="int" line="214"/>
                </scope>
                <scope line="219">
                    <declaration name="j" type="int" line="220"/>
                    <declaration name="s" type="String" line="222"/>
                </scope>
            </method>
            <javadoc line="235">
                Returns a string representation of the given matrix with axis as well as rows and columns labeled.
                  Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.                
                <param>
                    matrix The matrix to format.                    
                </param>
                <param>
                    sliceNames The headers of all slices (to be put above each slice).                    
                </param>
                <param>
                    rowNames The headers of all rows (to be put to the left of the matrix).                    
                </param>
                <param>
                    columnNames The headers of all columns (to be put to above the matrix).                    
                </param>
                <param>
                    sliceAxisName The label of the z-axis (to be put above each slice).                    
                </param>
                <param>
                    rowAxisName The label of the y-axis.                    
                </param>
                <param>
                    columnAxisName The label of the x-axis.                    
                </param>
                <param>
                    title The overall title of the matrix to be formatted.                    
                </param>
                <return>
                    the matrix converted to a string.                    
                </return>
            </javadoc>
            <method name="toTitleString" type="String" line="249">
                <params>
                    <param name="matrix" type="ObjectMatrix3D"/>
                    <param name="sliceNames" type="String[]"/>
                    <param name="rowNames" type="String[]"/>
                    <param name="columnNames" type="String[]"/>
                    <param name="sliceAxisName" type="String"/>
                    <param name="rowAxisName" type="String"/>
                    <param name="columnAxisName" type="String"/>
                    <param name="title" type="String"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="251"/>
                <scope line="252"/>
            </method>
        </class>
    </source>