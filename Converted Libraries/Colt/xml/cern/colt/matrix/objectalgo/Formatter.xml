<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.objectalgo">
        <import package="cern.colt.matrix.ObjectMatrix1D"/>
        <import package="cern.colt.matrix.ObjectMatrix2D"/>
        <import package="cern.colt.matrix.ObjectMatrix3D"/>
        <import package="cern.colt.matrix.impl.AbstractFormatter"/>
        <import package="cern.colt.matrix.impl.AbstractMatrix1D"/>
        <import package="cern.colt.matrix.impl.AbstractMatrix2D"/>
        <import package="cern.colt.matrix.impl.Former"/>
        <class name="Formatter" line="9">
            <extends class="AbstractFormatter"/>
            <javadoc line="9">
                Flexible, well human readable matrix print formatting.
                  Each cell is converted using {@link Object#toString()}.
                  For examples see {@link cern.colt.matrix.doublealgo.Formatter doublealgo.Formatter} which is just the same except that it operates on doubles.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.1, 11/22/99                    
                </version>
            </javadoc>
            <javadoc line="17">
                Constructs and returns a matrix formatter with alignment &lt;tt&gt;LEFT&lt;/tt&gt;.                
            </javadoc>
            <method name="Formatter" type="constructor" line="20"/>
            <javadoc line="23">
                Constructs and returns a matrix formatter.                
                <param>
                    alignment the given alignment used to align a column.                    
                </param>
            </javadoc>
            <method name="Formatter" type="constructor" line="27">
                <params>
                    <param name="alignment" type="String"/>
                </params>
            </method>
            <javadoc line="30">
                Converts a given cell to a String; no alignment considered.                
            </javadoc>
            <method name="form" type="String" line="33">
                <params>
                    <param name="matrix" type="AbstractMatrix1D"/>
                    <param name="index" type="int"/>
                    <param name="formatter" type="Former"/>
                </params>
            </method>
            <javadoc line="36">
                Converts a given cell to a String; no alignment considered.                
            </javadoc>
            <method name="form" type="String" line="39">
                <params>
                    <param name="matrix" type="ObjectMatrix1D"/>
                    <param name="index" type="int"/>
                    <param name="formatter" type="Former"/>
                </params>
                <declaration name="value" type="Object" line="40"/>
            </method>
            <javadoc line="44">
                Returns a string representations of all cells; no alignment considered.                
            </javadoc>
            <method name="format" type="String[][]" line="47">
                <params>
                    <param name="matrix" type="AbstractMatrix2D"/>
                </params>
            </method>
            <javadoc line="50">
                Returns a string representations of all cells; no alignment considered.                
            </javadoc>
            <method name="format" type="String[][]" line="53">
                <params>
                    <param name="matrix" type="ObjectMatrix2D"/>
                </params>
                <declaration name="strings" type="String[][]" line="54"/>
            </method>
            <javadoc line="58">
                Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.                
                <param>
                    matrix the matrix to format.                    
                </param>
            </javadoc>
            <method name="toSourceCode" type="String" line="62">
                <params>
                    <param name="matrix" type="ObjectMatrix1D"/>
                </params>
                <declaration name="copy" type="Formatter" line="63"/>
                <declaration name="lead" type="String" line="66"/>
                <declaration name="trail" type="String" line="67"/>
            </method>
            <javadoc line="70">
                Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.                
                <param>
                    matrix the matrix to format.                    
                </param>
            </javadoc>
            <method name="toSourceCode" type="String" line="74">
                <params>
                    <param name="matrix" type="ObjectMatrix2D"/>
                </params>
                <declaration name="copy" type="Formatter" line="75"/>
                <declaration name="b3" type="String" line="76"/>
                <declaration name="lead" type="String" line="80"/>
                <declaration name="trail" type="String" line="81"/>
            </method>
            <javadoc line="84">
                Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.                
                <param>
                    matrix the matrix to format.                    
                </param>
            </javadoc>
            <method name="toSourceCode" type="String" line="88">
                <params>
                    <param name="matrix" type="ObjectMatrix3D"/>
                </params>
                <declaration name="copy" type="Formatter" line="89"/>
                <declaration name="b3" type="String" line="90"/>
                <declaration name="b6" type="String" line="91"/>
                <declaration name="lead" type="String" line="96"/>
                <declaration name="trail" type="String" line="97"/>
            </method>
            <javadoc line="100">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="104">
                <params>
                    <param name="matrix" type="AbstractMatrix2D"/>
                </params>
            </method>
            <javadoc line="107">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="111">
                <params>
                    <param name="matrix" type="ObjectMatrix1D"/>
                </params>
                <declaration name="easy" type="ObjectMatrix2D" line="112"/>
            </method>
            <javadoc line="116">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="120">
                <params>
                    <param name="matrix" type="ObjectMatrix2D"/>
                </params>
            </method>
            <javadoc line="123">
                Returns a string representation of the given matrix.                
                <param>
                    matrix the matrix to convert.                    
                </param>
            </javadoc>
            <method name="toString" type="String" line="127">
                <params>
                    <param name="matrix" type="ObjectMatrix3D"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="128"/>
                <declaration name="oldPrintShape" type="boolean" line="129"/>
                <scope line="131"/>
            </method>
            <javadoc line="139">
                Returns a string representation of the given matrix with axis as well as rows and columns labeled.
                  Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.                
                <param>
                    matrix The matrix to format.                    
                </param>
                <param>
                    rowNames The headers of all rows (to be put to the left of the matrix).                    
                </param>
                <param>
                    columnNames The headers of all columns (to be put to above the matrix).                    
                </param>
                <param>
                    rowAxisName The label of the y-axis.                    
                </param>
                <param>
                    columnAxisName The label of the x-axis.                    
                </param>
                <param>
                    title The overall title of the matrix to be formatted.                    
                </param>
                <return>
                    the matrix converted to a string.                    
                </return>
            </javadoc>
            <method name="toTitleString" type="String" line="150">
                <params>
                    <param name="matrix" type="ObjectMatrix2D"/>
                    <param name="rowNames" type="String[]"/>
                    <param name="columnNames" type="String[]"/>
                    <param name="rowAxisName" type="String"/>
                    <param name="columnAxisName" type="String"/>
                    <param name="title" type="String"/>
                </params>
                <declaration name="oldFormat" type="String" line="152"/>
                <declaration name="rows" type="int" line="154"/>
                <declaration name="columns" type="int" line="155"/>
                <declaration name="r" type="int" line="156"/>
                <declaration name="c" type="int" line="157"/>
                <declaration name="height" type="int" line="162"/>
                <declaration name="width" type="int" line="163"/>
                <declaration name="titleMatrix" type="cern.colt.matrix.ObjectMatrix2D" line="164"/>
                <scope line="167">
                    <declaration name="rowAxisStrings" type="String[]" line="168"/>
                </scope>
                <declaration name="oldPrintShape" type="boolean" line="174"/>
                <declaration name="str" type="String" line="176"/>
                <declaration name="total" type="StringBuffer" line="178"/>
                <scope line="179">
                    <declaration name="i" type="int" line="180"/>
                </scope>
                <scope line="183">
                    <declaration name="i" type="int" line="184"/>
                </scope>
                <scope line="187">
                    <declaration name="j" type="int" line="188"/>
                    <declaration name="s" type="String" line="190"/>
                </scope>
            </method>
            <javadoc line="199">
                Returns a string representation of the given matrix with axis as well as rows and columns labeled.
                  Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.                
                <param>
                    matrix The matrix to format.                    
                </param>
                <param>
                    sliceNames The headers of all slices (to be put above each slice).                    
                </param>
                <param>
                    rowNames The headers of all rows (to be put to the left of the matrix).                    
                </param>
                <param>
                    columnNames The headers of all columns (to be put to above the matrix).                    
                </param>
                <param>
                    sliceAxisName The label of the z-axis (to be put above each slice).                    
                </param>
                <param>
                    rowAxisName The label of the y-axis.                    
                </param>
                <param>
                    columnAxisName The label of the x-axis.                    
                </param>
                <param>
                    title The overall title of the matrix to be formatted.                    
                </param>
                <return>
                    the matrix converted to a string.                    
                </return>
            </javadoc>
            <method name="toTitleString" type="String" line="212">
                <params>
                    <param name="matrix" type="ObjectMatrix3D"/>
                    <param name="sliceNames" type="String[]"/>
                    <param name="rowNames" type="String[]"/>
                    <param name="columnNames" type="String[]"/>
                    <param name="sliceAxisName" type="String"/>
                    <param name="rowAxisName" type="String"/>
                    <param name="columnAxisName" type="String"/>
                    <param name="title" type="String"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="214"/>
                <scope line="215"/>
            </method>
        </class>
    </source>