<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix">
        <import package="cern.colt.matrix.impl.DenseObjectMatrix2D"/>
        <import package="cern.colt.matrix.impl.SparseObjectMatrix2D"/>
        <class name="ObjectFactory2D" line="13">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="13">
                Factory for convenient construction of 2-d matrices holding &lt;tt&gt;Object&lt;/tt&gt; 
                  cells. Also provides convenient methods to compose (concatenate) and decompose 
                  (split) matrices from/to constituent blocks. &lt;/p&gt;
                  &lt;p&gt;&amp;nbsp; &lt;/p&gt;
                  &lt;table border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt;Construction&lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use idioms like &lt;tt&gt;ObjectFactory2D.dense.make(4,4)&lt;/tt&gt; to construct 
                  dense matrices, &lt;tt&gt;ObjectFactory2D.sparse.make(4,4)&lt;/tt&gt; to construct sparse 
                  matrices.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt; Construction with initial values &lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use other &lt;tt&gt;make&lt;/tt&gt; methods to construct matrices with given initial 
                  values. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt; Appending rows and columns &lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use methods {@link #appendColumns(ObjectMatrix2D,ObjectMatrix2D) appendColumns}, {@link #appendColumns(ObjectMatrix2D,ObjectMatrix2D) appendRows} and {@link #repeat(ObjectMatrix2D,int,int) repeat} to append rows and columns. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt; General block matrices &lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use methods {@link #compose(ObjectMatrix2D[][]) compose} and {@link #decompose(ObjectMatrix2D[][],ObjectMatrix2D) 
                  decompose} to work with general block matrices. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;i&gt; Diagonal block matrices &lt;/i&gt;&lt;/td&gt;
                  &lt;td&gt;Use method {@link #composeDiagonal(ObjectMatrix2D,ObjectMatrix2D,ObjectMatrix2D) 
                  composeDiagonal} to work with diagonal block matrices. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;&amp;nbsp;&lt;/p&gt;
                  &lt;p&gt;If the factory is used frequently it might be useful to streamline the notation. 
                  For example by aliasing: &lt;/p&gt;
                  &lt;table&gt;
                  &lt;td class=&quot;PRE&quot;&gt; 
                  &lt;pre&gt;
                  ObjectFactory2D F = ObjectFactory2D.dense;
                  F.make(4,4);
                  ...
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;/table&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="dense" type="ObjectFactory2D" line="64"/>
            <javadoc line="64">
                A factory producing dense matrices.                
            </javadoc>
            <declaration name="sparse" type="ObjectFactory2D" line="69"/>
            <javadoc line="69">
                A factory producing sparse matrices.                
            </javadoc>
            <javadoc line="73">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="ObjectFactory2D" type="constructor" line="76"/>
            <javadoc line="77">
                C = A||B; Constructs a new matrix which is the column-wise concatenation of two other matrices.
                  &lt;pre&gt;
                  0 1 2
                  3 4 5
                  appendColumns
                  6 7
                  8 9
                  --&gt;
                  0 1 2 6 7 
                  3 4 5 8 9
                  &lt;/pre&gt;                
            </javadoc>
            <method name="appendColumns" type="ObjectMatrix2D" line="90">
                <params>
                    <param name="A" type="ObjectMatrix2D"/>
                    <param name="B" type="ObjectMatrix2D"/>
                </params>
                <comment line="92">
                    force both to have maximal shared number of rows.                    
                </comment>
                <comment line="96">
                    concatenate                    
                </comment>
                <declaration name="ac" type="int" line="96"/>
                <declaration name="bc" type="int" line="97"/>
                <declaration name="r" type="int" line="98"/>
                <declaration name="matrix" type="ObjectMatrix2D" line="99"/>
            </method>
            <javadoc line="104">
                C = A||B; Constructs a new matrix which is the row-wise concatenation of two other matrices.
                  &lt;pre&gt;
                  0 1 
                  2 3 
                  4 5
                  appendRows
                  6 7
                  8 9
                  --&gt;
                  0 1 
                  2 3 
                  4 5
                  6 7
                  8 9
                  &lt;/pre&gt;                
            </javadoc>
            <method name="appendRows" type="ObjectMatrix2D" line="121">
                <params>
                    <param name="A" type="ObjectMatrix2D"/>
                    <param name="B" type="ObjectMatrix2D"/>
                </params>
                <comment line="123">
                    force both to have maximal shared number of columns.                    
                </comment>
                <comment line="127">
                    concatenate                    
                </comment>
                <declaration name="ar" type="int" line="127"/>
                <declaration name="br" type="int" line="128"/>
                <declaration name="c" type="int" line="129"/>
                <declaration name="matrix" type="ObjectMatrix2D" line="130"/>
            </method>
            <javadoc line="135">
                Checks whether the given array is rectangular, that is, whether all rows have the same number of columns.                
                <throws>
                    IllegalArgumentException if the array is not rectangular.                    
                </throws>
            </javadoc>
            <method name="checkRectangularShape" type="void" line="139">
                <params>
                    <param name="array" type="ObjectMatrix2D[][]"/>
                </params>
                <declaration name="columns" type="int" line="140"/>
                <scope line="141">
                    <scope line="142"/>
                </scope>
            </method>
            <javadoc line="148">
                Checks whether the given array is rectangular, that is, whether all rows have the same number of columns.                
                <throws>
                    IllegalArgumentException if the array is not rectangular.                    
                </throws>
            </javadoc>
            <method name="checkRectangularShape" type="void" line="152">
                <params>
                    <param name="array" type="Object[][]"/>
                </params>
                <declaration name="columns" type="int" line="153"/>
                <scope line="154">
                    <scope line="155"/>
                </scope>
            </method>
            <javadoc line="161">
                Constructs a block matrix made from the given parts.
                  The inverse to method {@link #decompose(ObjectMatrix2D[][],ObjectMatrix2D)}.
                  &lt;p&gt;
                  All matrices of a given column within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of columns.
                  All matrices of a given row within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of rows.
                  Otherwise an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; is thrown. 
                  Note that &lt;tt&gt;null&lt;/tt&gt;s within &lt;tt&gt;parts[row,col]&lt;/tt&gt; are an exception to this rule: they are ignored.
                  Cells are copied.
                  Example:
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;Code&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;Result&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt; 
                  &lt;pre&gt;
                  ObjectMatrix2D[][] parts1 = 
                  {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,2,1), null        },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ make(4,4,2), null,        make(4,3,3) },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,2,4), null        }
                  };
                  System.out.println(compose(parts1));
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;8&amp;nbsp;x&amp;nbsp;9&amp;nbsp;matrix&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;4&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;4&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt; 
                  &lt;pre&gt;
                  ObjectMatrix2D[][] parts3 = 
                  {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ identity(3),               null,                        },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,                      identity(3).viewColumnFlip() },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ identity(3).viewRowFlip(), null                         }
                  };
                  System.out.println(&quot;\n&quot;+make(parts3));
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;9&amp;nbsp;x&amp;nbsp;6&amp;nbsp;matrix&lt;br&gt;
                  1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0 &lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt; 
                  &lt;pre&gt;
                  ObjectMatrix2D A = ascending(2,2);
                  ObjectMatrix2D B = descending(2,2);
                  ObjectMatrix2D _ = null;
                  ObjectMatrix2D[][] parts4 = 
                  {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ A, _, A, _ },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ _, A, _, B }
                  };
                  System.out.println(&quot;\n&quot;+make(parts4));
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;8&amp;nbsp;matrix&lt;br&gt;
                  1&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  3&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;2&lt;br&gt;
                  0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0 &lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt; 
                  &lt;pre&gt;
                  ObjectMatrix2D[][] parts2 = 
                  {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,2,1), null        },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ make(4,4,2), null,        make(4,3,3) },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,3,4), null        }
                  };
                  System.out.println(&quot;\n&quot;+Factory2D.make(parts2));
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;IllegalArgumentException&lt;br&gt;
                  A[0,1].cols != A[2,1].cols&lt;br&gt;
                  (2 != 3)&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <throws>
                    IllegalArgumentException subject to the conditions outlined above.                    
                </throws>
            </javadoc>
            <method name="compose" type="ObjectMatrix2D" line="261">
                <params>
                    <param name="parts" type="ObjectMatrix2D[][]"/>
                </params>
                <comment line="271">
                    determine maximum column width of each column                    
                </comment>
                <comment line="286">
                    determine row height of each row                    
                </comment>
                <comment line="302">
                    shape of result                    
                </comment>
                <comment line="310">
                    copy                    
                </comment>
                <declaration name="rows" type="int" line="263"/>
                <declaration name="columns" type="int" line="264"/>
                <declaration name="empty" type="ObjectMatrix2D" line="266"/>
                <declaration name="maxWidths" type="int[]" line="271"/>
                <scope line="272">
                    <declaration name="maxWidth" type="int" line="273"/>
                    <scope line="274">
                        <declaration name="part" type="ObjectMatrix2D" line="275"/>
                        <scope line="276">
                            <declaration name="width" type="int" line="277"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="maxHeights" type="int[]" line="286"/>
                <scope line="287">
                    <declaration name="maxHeight" type="int" line="288"/>
                    <scope line="289">
                        <declaration name="part" type="ObjectMatrix2D" line="290"/>
                        <scope line="291">
                            <declaration name="height" type="int" line="292"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="resultRows" type="int" line="302"/>
                <declaration name="resultCols" type="int" line="304"/>
                <declaration name="matrix" type="ObjectMatrix2D" line="307"/>
                <declaration name="r" type="int" line="310"/>
                <scope line="311">
                    <declaration name="c" type="int" line="312"/>
                    <scope line="313">
                        <declaration name="part" type="ObjectMatrix2D" line="314"/>
                        <scope line="315"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="325">
                Constructs a diagonal block matrix from the given parts (the &lt;i&gt;direct sum&lt;/i&gt; of two matrices).
                  That is the concatenation
                  &lt;pre&gt;
                  A 0
                  0 B
                  &lt;/pre&gt;
                  (The direct sum has &lt;tt&gt;A.rows()+B.rows()&lt;/tt&gt; rows and &lt;tt&gt;A.columns()+B.columns()&lt;/tt&gt; columns).
                  Cells are copied.                
                <return>
                    a new matrix which is the direct sum.                    
                </return>
            </javadoc>
            <method name="composeDiagonal" type="ObjectMatrix2D" line="336">
                <params>
                    <param name="A" type="ObjectMatrix2D"/>
                    <param name="B" type="ObjectMatrix2D"/>
                </params>
                <declaration name="ar" type="int" line="337"/>
                <declaration name="ac" type="int" line="337"/>
                <declaration name="br" type="int" line="338"/>
                <declaration name="bc" type="int" line="338"/>
                <declaration name="sum" type="ObjectMatrix2D" line="339"/>
            </method>
            <javadoc line="344">
                Constructs a diagonal block matrix from the given parts.
                  The concatenation has the form
                  &lt;pre&gt;
                  A 0 0
                  0 B 0
                  0 0 C
                  &lt;/pre&gt;
                  from the given parts.
                  Cells are copied.                
            </javadoc>
            <method name="composeDiagonal" type="ObjectMatrix2D" line="355">
                <params>
                    <param name="A" type="ObjectMatrix2D"/>
                    <param name="B" type="ObjectMatrix2D"/>
                    <param name="C" type="ObjectMatrix2D"/>
                </params>
                <declaration name="diag" type="ObjectMatrix2D" line="356"/>
            </method>
            <javadoc line="362">
                Splits a block matrix into its constituent blocks; Copies blocks of a matrix into the given parts.
                  The inverse to method {@link #compose(ObjectMatrix2D[][])}.
                  &lt;p&gt;
                  All matrices of a given column within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of columns.
                  All matrices of a given row within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of rows.
                  Otherwise an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; is thrown. 
                  Note that &lt;tt&gt;null&lt;/tt&gt;s within &lt;tt&gt;parts[row,col]&lt;/tt&gt; are an exception to this rule: they are ignored.
                  Cells are copied.
                  Example:
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt;&lt;tt&gt;Code&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;matrix&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;--&amp;gt; parts &lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                  &lt;td&gt; 
                  &lt;pre&gt;
                  ObjectMatrix2D matrix = ... ;
                  ObjectMatrix2D _ = null;
                  ObjectMatrix2D A,B,C,D;
                  A = make(2,2); B = make (4,4);
                  C = make(4,3); D = make (2,2);
                  ObjectMatrix2D[][] parts = 
                  {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ _, A, _ },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ B, _, C },
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;{ _, D, _ }
                  };
                  decompose(parts,matrix);
                  System.out.println(&amp;quot;\nA = &amp;quot;+A);
                  System.out.println(&amp;quot;\nB = &amp;quot;+B);
                  System.out.println(&amp;quot;\nC = &amp;quot;+C);
                  System.out.println(&amp;quot;\nD = &amp;quot;+D);
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;8&amp;nbsp;x&amp;nbsp;9&amp;nbsp;matrix&lt;br&gt;
                  9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;1&amp;nbsp;1&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;br&gt;
                  9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;1&amp;nbsp;1&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;4&amp;nbsp;4&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;br&gt;
                  9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;4&amp;nbsp;4&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; 
                  &lt;p&gt;&lt;tt&gt;A = 2&amp;nbsp;x&amp;nbsp;2&amp;nbsp;matrix&lt;br&gt;
                  1&amp;nbsp;1&lt;br&gt;
                  1&amp;nbsp;1&lt;/tt&gt;&lt;/p&gt;
                  &lt;p&gt;&lt;tt&gt;B = 4&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;br&gt;
                  2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;/tt&gt;&lt;/p&gt;
                  &lt;p&gt;&lt;tt&gt;C = 4&amp;nbsp;x&amp;nbsp;3&amp;nbsp;matrix&lt;br&gt;
                  3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  &lt;/tt&gt;&lt;tt&gt;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                  &lt;/tt&gt;&lt;tt&gt;3&amp;nbsp;3&amp;nbsp;3&lt;/tt&gt;&lt;/p&gt;
                  &lt;p&gt;&lt;tt&gt;D = 2&amp;nbsp;x&amp;nbsp;2&amp;nbsp;matrix&lt;br&gt;
                  4&amp;nbsp;4&lt;br&gt;
                  4&amp;nbsp;4&lt;/tt&gt;&lt;/p&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <throws>
                    IllegalArgumentException subject to the conditions outlined above.                    
                </throws>
            </javadoc>
            <method name="decompose" type="void" line="430">
                <params>
                    <param name="parts" type="ObjectMatrix2D[][]"/>
                    <param name="matrix" type="ObjectMatrix2D"/>
                </params>
                <comment line="438">
                    determine maximum column width of each column                    
                </comment>
                <comment line="453">
                    determine row height of each row                    
                </comment>
                <comment line="469">
                    shape of result parts                    
                </comment>
                <comment line="477">
                    copy                    
                </comment>
                <declaration name="rows" type="int" line="432"/>
                <declaration name="columns" type="int" line="433"/>
                <declaration name="maxWidths" type="int[]" line="438"/>
                <scope line="439">
                    <declaration name="maxWidth" type="int" line="440"/>
                    <scope line="441">
                        <declaration name="part" type="ObjectMatrix2D" line="442"/>
                        <scope line="443">
                            <declaration name="width" type="int" line="444"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="maxHeights" type="int[]" line="453"/>
                <scope line="454">
                    <declaration name="maxHeight" type="int" line="455"/>
                    <scope line="456">
                        <declaration name="part" type="ObjectMatrix2D" line="457"/>
                        <scope line="458">
                            <declaration name="height" type="int" line="459"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="resultRows" type="int" line="469"/>
                <declaration name="resultCols" type="int" line="471"/>
                <declaration name="r" type="int" line="477"/>
                <scope line="478">
                    <declaration name="c" type="int" line="479"/>
                    <scope line="480">
                        <declaration name="part" type="ObjectMatrix2D" line="481"/>
                        <scope line="482"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="491">
                Constructs a new diagonal matrix whose diagonal elements are the elements of &lt;tt&gt;vector&lt;/tt&gt;.
                  Cells values are copied. The new matrix is not a view.
                  Example:
                  &lt;pre&gt;
                  5 4 3 --&gt;
                  5 0 0
                  0 4 0
                  0 0 3
                  &lt;/pre&gt;                
                <return>
                    a new matrix.                    
                </return>
            </javadoc>
            <method name="diagonal" type="ObjectMatrix2D" line="503">
                <params>
                    <param name="vector" type="ObjectMatrix1D"/>
                </params>
                <declaration name="size" type="int" line="504"/>
                <declaration name="diag" type="ObjectMatrix2D" line="505"/>
                <scope line="506"/>
            </method>
            <javadoc line="511">
                Constructs a new vector consisting of the diagonal elements of &lt;tt&gt;A&lt;/tt&gt;.
                  Cells values are copied. The new vector is not a view.
                  Example:
                  &lt;pre&gt;
                  5 0 0 9
                  0 4 0 9
                  0 0 3 9
                  --&gt; 5 4 3
                  &lt;/pre&gt;                
                <param>
                    A the matrix, need not be square.                    
                </param>
                <return>
                    a new vector.                    
                </return>
            </javadoc>
            <method name="diagonal" type="ObjectMatrix1D" line="524">
                <params>
                    <param name="A" type="ObjectMatrix2D"/>
                </params>
                <declaration name="min" type="int" line="525"/>
                <declaration name="diag" type="ObjectMatrix1D" line="526"/>
                <scope line="527"/>
            </method>
            <javadoc line="532">
                Constructs a matrix with the given cell values.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
                  and have exactly the same number of columns in every row.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values The values to be filled into the new matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;for any 1 &amp;lt;= row &amp;lt; values.length: values[row].length != values[row-1].length&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="make" type="ObjectMatrix2D" line="542">
                <params>
                    <param name="values" type="Object[][]"/>
                </params>
            </method>
            <javadoc line="546">
                Construct a matrix from a one-dimensional column-major packed array, ala Fortran.
                  Has the form &lt;tt&gt;matrix.get(row,column) == values[row + columnrows]&lt;/tt&gt;.
                  The values are copied.                
                <param>
                    values One-dimensional array of Objects, packed by columns (ala Fortran).                    
                </param>
                <param>
                    rows  the number of rows.                    
                </param>
                <exception>
                    IllegalArgumentException &lt;tt&gt;values.length&lt;/tt&gt; must be a multiple of &lt;tt&gt;rows&lt;/tt&gt;.                    
                </exception>
            </javadoc>
            <method name="make" type="ObjectMatrix2D" line="555">
                <params>
                    <param name="values" type="Object"/>
                    <param name="rows" type="int"/>
                </params>
                <declaration name="columns" type="int" line="556"/>
                <declaration name="matrix" type="ObjectMatrix2D" line="560"/>
                <scope line="561">
                    <scope line="562"/>
                </scope>
            </method>
            <javadoc line="568">
                Constructs a matrix with the given shape, each cell initialized with zero.                
            </javadoc>
            <method name="make" type="ObjectMatrix2D" line="571">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="575">
                Constructs a matrix with the given shape, each cell initialized with the given value.                
            </javadoc>
            <method name="make" type="ObjectMatrix2D" line="578">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="initialValue" type="Object"/>
                </params>
            </method>
            <javadoc line="582">
                Constructs a 1d matrix of the right dynamic type.                
            </javadoc>
            <method name="make1D" type="ObjectMatrix1D" line="585">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="588">
                C = A||A||..||A; Constructs a new matrix which is duplicated both along the row and column dimension.
                  Example:
                  &lt;pre&gt;
                  0 1
                  2 3
                  repeat(2,3) --&gt;
                  0 1 0 1 0 1
                  2 3 2 3 2 3
                  0 1 0 1 0 1
                  2 3 2 3 2 3
                  &lt;/pre&gt;                
            </javadoc>
            <method name="repeat" type="ObjectMatrix2D" line="601">
                <params>
                    <param name="A" type="ObjectMatrix2D"/>
                    <param name="rowRepeat" type="int"/>
                    <param name="columnRepeat" type="int"/>
                </params>
                <declaration name="r" type="int" line="602"/>
                <declaration name="c" type="int" line="603"/>
                <declaration name="matrix" type="ObjectMatrix2D" line="604"/>
                <scope line="605">
                    <scope line="606"/>
                </scope>
            </method>
        </class>
    </source>