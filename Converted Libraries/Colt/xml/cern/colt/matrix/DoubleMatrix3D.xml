<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.colt.list.IntArrayList"/>
        <import package="cern.colt.matrix.impl.AbstractMatrix3D"/>
        <class name="DoubleMatrix3D" line="14">
            <extends class="AbstractMatrix3D"/>
            <javadoc line="14">
                Abstract base class for 3-d matrices holding &lt;tt&gt;double&lt;/tt&gt; elements.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  A matrix has a number of slices, rows and columns, which are assigned upon instance construction - The matrix&apos;s size is then &lt;tt&gt;slices()rows()columns()&lt;/tt&gt;.
                  Elements are accessed via &lt;tt&gt;[slice,row,column]&lt;/tt&gt; coordinates.
                  Legal coordinates range from &lt;tt&gt;[0,0,0]&lt;/tt&gt; to &lt;tt&gt;[slices()-1,rows()-1,columns()-1]&lt;/tt&gt;.
                  Any attempt to access an element at a coordinate &lt;tt&gt;slice&amp;lt;0 || slice&amp;gt;=slices() || row&amp;lt;0 || row&amp;gt;=rows() || column&amp;lt;0 || column&amp;gt;=column()&lt;/tt&gt; will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt; that this implementation is not synchronized.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <javadoc line="29">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="DoubleMatrix3D" type="constructor" line="32"/>
            <javadoc line="33">
                Applies a function to each cell and aggregates the results.
                  Returns a value &lt;tt&gt;v&lt;/tt&gt; such that &lt;tt&gt;v==a(size())&lt;/tt&gt; where &lt;tt&gt;a(i) == aggr( a(i-1), f(get(slice,row,column)) )&lt;/tt&gt; and terminators are &lt;tt&gt;a(1) == f(get(0,0,0)), a(0)==Double.NaN&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  cern.jet.math.Functions F = cern.jet.math.Functions.functions;
                  2 x 2 x 2 matrix
                  0 1
                  2 3
                  4 5
                  6 7
                  // Sum( x[slice,row,col]x[slice,row,col] ) 
                  matrix.aggregate(F.plus,F.square);
                  --&gt; 140
                  &lt;/pre&gt;
                  For further examples, see the &lt;a href=&quot;package-summary.html#FunctionObjects&quot;&gt;package doc&lt;/a&gt;.                
                <param>
                    aggr an aggregation function taking as first argument the current aggregation and as second argument the transformed current cell value.                    
                </param>
                <param>
                    f a function transforming the current cell value.                    
                </param>
                <return>
                    the aggregated measure.                    
                </return>
                <see>
                    cern.jet.math.Functions                    
                </see>
            </javadoc>
            <method name="aggregate" type="double" line="58">
                <params>
                    <param name="aggr" type="cern.colt.function.DoubleDoubleFunction"/>
                    <param name="f" type="cern.colt.function.DoubleFunction"/>
                </params>
                <comment line="62">
                    last cell already done                    
                </comment>
                <declaration name="a" type="double" line="60"/>
                <declaration name="d" type="int" line="61"/>
                <scope line="62">
                    <scope line="63">
                        <scope line="64"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="72">
                Applies a function to each corresponding cell of two matrices and aggregates the results.
                  Returns a value &lt;tt&gt;v&lt;/tt&gt; such that &lt;tt&gt;v==a(size())&lt;/tt&gt; where &lt;tt&gt;a(i) == aggr( a(i-1), f(get(slice,row,column),other.get(slice,row,column)) )&lt;/tt&gt; and terminators are &lt;tt&gt;a(1) == f(get(0,0,0),other.get(0,0,0)), a(0)==Double.NaN&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  cern.jet.math.Functions F = cern.jet.math.Functions.functions;
                  x = 2 x 2 x 2 matrix
                  0 1
                  2 3
                  4 5
                  6 7
                  y = 2 x 2 x 2 matrix
                  0 1
                  2 3
                  4 5
                  6 7
                  // Sum( x[slice,row,col]  y[slice,row,col] ) 
                  x.aggregate(y, F.plus, F.mult);
                  --&gt; 140
                  // Sum( (x[slice,row,col] + y[slice,row,col])^2 )
                  x.aggregate(y, F.plus, F.chain(F.square,F.plus));
                  --&gt; 560
                  &lt;/pre&gt;
                  For further examples, see the &lt;a href=&quot;package-summary.html#FunctionObjects&quot;&gt;package doc&lt;/a&gt;.                
                <param>
                    aggr an aggregation function taking as first argument the current aggregation and as second argument the transformed current cell values.                    
                </param>
                <param>
                    f a function transforming the current cell values.                    
                </param>
                <return>
                    the aggregated measure.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>slices() != other.slices() || rows() != other.rows() || columns() != other.columns()</tt>                    
                </throws>
                <see>
                    cern.jet.math.Functions                    
                </see>
            </javadoc>
            <method name="aggregate" type="double" line="109">
                <params>
                    <param name="other" type="DoubleMatrix3D"/>
                    <param name="aggr" type="cern.colt.function.DoubleDoubleFunction"/>
                    <param name="f" type="cern.colt.function.DoubleDoubleFunction"/>
                </params>
                <comment line="114">
                    last cell already done                    
                </comment>
                <declaration name="a" type="double" line="112"/>
                <declaration name="d" type="int" line="113"/>
                <scope line="114">
                    <scope line="115">
                        <scope line="116"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="124">
                Sets all cells to the state specified by &lt;tt&gt;values&lt;/tt&gt;.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[slice][row][column]&lt;/tt&gt;
                  and have exactly the same number of slices, rows and columns as the receiver.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values the values to be filled into the cells.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>values.length != slices() || for any 0 &lt;= slice &lt; slices(): values[slice].length != rows()</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>for any 0 &lt;= column &lt; columns(): values[slice][row].length != columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="assign" type="DoubleMatrix3D" line="136">
                <params>
                    <param name="values" type="double[][][]"/>
                </params>
                <scope line="138">
                    <declaration name="currentSlice" type="double[][]" line="139"/>
                    <scope line="141">
                        <declaration name="currentRow" type="double[]" line="142"/>
                        <scope line="144"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="151">
                Sets all cells to the state specified by &lt;tt&gt;value&lt;/tt&gt;.                
                <param>
                    value the value to be filled into the cells.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
            </javadoc>
            <method name="assign" type="DoubleMatrix3D" line="156">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="157">
                    <scope line="158">
                        <scope line="159"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="166">
                Assigns the result of a function to each cell; &lt;tt&gt;x[slice,row,col] = function(x[slice,row,col])&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  matrix = 1 x 2 x 2 matrix
                  0.5 1.5      
                  2.5 3.5
                  // change each cell to its sine
                  matrix.assign(cern.jet.math.Functions.sin);
                  --&gt;
                  1 x 2 x 2 matrix
                  0.479426  0.997495 
                  0.598472 -0.350783
                  &lt;/pre&gt;
                  For further examples, see the &lt;a href=&quot;package-summary.html#FunctionObjects&quot;&gt;package doc&lt;/a&gt;.                
                <param>
                    function a function object taking as argument the current cell's value.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <see>
                    cern.jet.math.Functions                    
                </see>
            </javadoc>
            <method name="assign" type="DoubleMatrix3D" line="188">
                <params>
                    <param name="function" type="cern.colt.function.DoubleFunction"/>
                </params>
                <scope line="189">
                    <scope line="190">
                        <scope line="191"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="198">
                Replaces all cell values of the receiver with the values of another matrix.
                  Both matrices must have the same number of slices, rows and columns.
                  If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.                
                <param>
                    other   the source matrix to copy from (may be identical to the receiver).                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>slices() != other.slices() || rows() != other.rows() || columns() != other.columns()</tt>                    
                </throws>
            </javadoc>
            <method name="assign" type="DoubleMatrix3D" line="207">
                <params>
                    <param name="other" type="DoubleMatrix3D"/>
                </params>
                <scope line="212">
                    <scope line="213">
                        <scope line="214"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="221">
                Assigns the result of a function to each cell; &lt;tt&gt;x[row,col] = function(x[row,col],y[row,col])&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  // assign x[row,col] = x[row,col]&lt;sup&gt;y[row,col]&lt;/sup&gt;
                  m1 = 1 x 2 x 2 matrix 
                  0 1 
                  2 3
                  m2 = 1 x 2 x 2 matrix 
                  0 2 
                  4 6
                  m1.assign(m2, cern.jet.math.Functions.pow);
                  --&gt;
                  m1 == 1 x 2 x 2 matrix
                  1   1 
                  16 729
                  &lt;/pre&gt;
                  For further examples, see the &lt;a href=&quot;package-summary.html#FunctionObjects&quot;&gt;package doc&lt;/a&gt;.                
                <param>
                    y the secondary matrix to operate on.                    
                </param>
                <param>
                    function a function object taking as first argument the current cell's value of <tt>this</tt>,
                      and as second argument the current cell's value of <tt>y</tt>,                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>slices() != other.slices() || rows() != other.rows() || columns() != other.columns()</tt>                    
                </throws>
                <see>
                    cern.jet.math.Functions                    
                </see>
            </javadoc>
            <method name="assign" type="DoubleMatrix3D" line="250">
                <params>
                    <param name="y" type="DoubleMatrix3D"/>
                    <param name="function" type="cern.colt.function.DoubleDoubleFunction"/>
                </params>
                <scope line="252">
                    <scope line="253">
                        <scope line="254"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="261">
                Returns the number of cells having non-zero values; ignores tolerance.                
            </javadoc>
            <method name="cardinality" type="int" line="264">
                <declaration name="cardinality" type="int" line="265"/>
                <scope line="266">
                    <scope line="267">
                        <scope line="268"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="275">
                Constructs and returns a deep copy of the receiver.
                  &lt;p&gt;
                  &lt;b&gt;Note that the returned matrix is an independent deep copy.&lt;/b&gt;
                  The returned matrix is not backed by this matrix, so changes in the returned matrix are not reflected in this matrix, and vice-versa.                
                <return>
                    a deep copy of the receiver.                    
                </return>
            </javadoc>
            <method name="copy" type="DoubleMatrix3D" line="283"/>
            <javadoc line="286">
                Returns whether all cells are equal to the given value.                
                <param>
                    value the value to test against.                    
                </param>
                <return>
                    <tt>true</tt> if all cells are equal to the given value, <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="292">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="295">
                Compares this object against the specified object.
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is 
                  not &lt;code&gt;null&lt;/code&gt; and is at least a &lt;code&gt;DoubleMatrix3D&lt;/code&gt; object
                  that has the same number of slices, rows and columns as the receiver and 
                  has exactly the same values at the same coordinates.                
                <param>
                    obj   the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="305">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="312">
                Returns the matrix cell value at coordinate &lt;tt&gt;[slice,row,column]&lt;/tt&gt;.                
                <param>
                    slice   the index of the slice-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <return>
                    the value of the specified cell.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <tt>slice&lt;0 || slice&gt;=slices() || row&lt;0 || row&gt;=rows() || column&lt;0 || column&gt;=column()</tt>.                    
                </throws>
            </javadoc>
            <method name="get" type="double" line="321">
                <params>
                    <param name="slice" type="int"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="325">
                Returns the content of this matrix if it is a wrapper; or &lt;tt&gt;this&lt;/tt&gt; otherwise.
                  Override this method in wrappers.                
            </javadoc>
            <method name="getContent" type="DoubleMatrix3D" line="329"/>
            <javadoc line="332">
                Fills the coordinates and values of cells having non-zero values into the specified lists.
                  Fills into the lists, starting at index 0.
                  After this call returns the specified lists all have a new size, the number of non-zero values.
                  &lt;p&gt;
                  In general, fill order is &lt;i&gt;unspecified&lt;/i&gt;.
                  This implementation fill like: &lt;tt&gt;for (slice = 0..slices-1) for (row = 0..rows-1) for (column = 0..colums-1) do ... &lt;/tt&gt;.
                  However, subclasses are free to us any other order, even an order that may change over time as cell values are changed.
                  (Of course, result lists indexes are guaranteed to correspond to the same cell).
                  For an example, see {@link DoubleMatrix2D#getNonZeros(IntArrayList,IntArrayList,DoubleArrayList)}.                
                <param>
                    sliceList the list to be filled with slice indexes, can have any size.                    
                </param>
                <param>
                    rowList the list to be filled with row indexes, can have any size.                    
                </param>
                <param>
                    columnList the list to be filled with column indexes, can have any size.                    
                </param>
                <param>
                    valueList the list to be filled with values, can have any size.                    
                </param>
            </javadoc>
            <method name="getNonZeros" type="void" line="348">
                <params>
                    <param name="sliceList" type="IntArrayList"/>
                    <param name="rowList" type="IntArrayList"/>
                    <param name="columnList" type="IntArrayList"/>
                    <param name="valueList" type="DoubleArrayList"/>
                </params>
                <declaration name="s" type="int" line="353"/>
                <declaration name="r" type="int" line="354"/>
                <declaration name="c" type="int" line="355"/>
                <scope line="356">
                    <scope line="357">
                        <scope line="358">
                            <declaration name="value" type="double" line="359"/>
                            <scope line="360"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getQuick" type="double" line="370"/>
            <javadoc line="370">
                Returns the matrix cell value at coordinate &lt;tt&gt;[slice,row,column]&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;slice&amp;lt;0 || slice&amp;gt;=slices() || row&amp;lt;0 || row&amp;gt;=rows() || column&amp;lt;0 || column&amp;gt;=column()&lt;/tt&gt;.                
                <param>
                    slice   the index of the slice-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <return>
                    the value at the specified coordinate.                    
                </return>
            </javadoc>
            <javadoc line="383">
                Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share at least one identical cell.                
            </javadoc>
            <method name="haveSharedCells" type="boolean" line="386">
                <params>
                    <param name="other" type="DoubleMatrix3D"/>
                </params>
            </method>
            <javadoc line="391">
                Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share at least one identical cell.                
            </javadoc>
            <method name="haveSharedCellsRaw" type="boolean" line="394">
                <params>
                    <param name="other" type="DoubleMatrix3D"/>
                </params>
            </method>
            <javadoc line="397">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the same number of slices, rows and columns.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix3D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix3D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like" type="DoubleMatrix3D" line="405"/>
            <method name="like" type="DoubleMatrix3D" line="408"/>
            <javadoc line="408">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of slices, rows and columns.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix3D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix3D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <param>
                    slices the number of slices the matrix shall have.                    
                </param>
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like2D" type="DoubleMatrix2D" line="420"/>
            <javadoc line="420">
                Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, sharing the same cells.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <param>
                    rowZero the position of the first element.                    
                </param>
                <param>
                    columnZero the position of the first element.                    
                </param>
                <param>
                    rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.                    
                </param>
                <param>
                    columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <javadoc line="434">
                Sets the matrix cell at coordinate &lt;tt&gt;[slice,row,column]&lt;/tt&gt; to the specified value.                
                <param>
                    slice   the index of the slice-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>row&lt;0 || row&gt;=rows() || slice&lt;0 || slice&gt;=slices() || column&lt;0 || column&gt;=column()</tt>.                    
                </throws>
            </javadoc>
            <method name="set" type="void" line="443">
                <params>
                    <param name="slice" type="int"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="setQuick" type="void" line="447"/>
            <javadoc line="447">
                Sets the matrix cell at coordinate &lt;tt&gt;[slice,row,column]&lt;/tt&gt; to the specified value.
                  &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;slice&amp;lt;0 || slice&amp;gt;=slices() || row&amp;lt;0 || row&amp;gt;=rows() || column&amp;lt;0 || column&amp;gt;=column()&lt;/tt&gt;.                
                <param>
                    slice   the index of the slice-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
            </javadoc>
            <javadoc line="460">
                Constructs and returns a 2-dimensional array containing the cell values.
                  The returned array &lt;tt&gt;values&lt;/tt&gt; has the form &lt;tt&gt;values[slice][row][column]&lt;/tt&gt;
                  and has the same number of slices, rows and columns as the receiver.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <return>
                    an array filled with the values of the cells.                    
                </return>
            </javadoc>
            <method name="toArray" type="double[][][]" line="469">
                <declaration name="values" type="double[][][]" line="470"/>
                <scope line="471">
                    <declaration name="currentSlice" type="double[][]" line="472"/>
                    <scope line="473">
                        <declaration name="currentRow" type="double[]" line="474"/>
                        <scope line="475"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="482">
                Returns a string representation using default formatting.                
                <see>
                    cern.colt.matrix.doublealgo.Formatter                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="486"/>
            <javadoc line="489">
                Constructs and returns a new view equal to the receiver.
                  The view is a shallow clone. Calls &lt;code&gt;clone()&lt;/code&gt; and casts the result.
                  &lt;p&gt;
                  &lt;b&gt;Note that the view is not a deep copy.&lt;/b&gt;
                  The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa. 
                  &lt;p&gt;
                  Use {@link #copy()} if you want to construct an independent deep copy rather than a new view.                
                <return>
                    a new view of the receiver.                    
                </return>
            </javadoc>
            <method name="view" type="DoubleMatrix3D" line="500"/>
            <javadoc line="503">
                Constructs and returns a new 2-dimensional &lt;i&gt;slice view&lt;/i&gt; representing the slices and rows of the given column.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  &lt;p&gt;
                  To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;view().part(...)&lt;/tt&gt;), then apply this method to the sub-range view.
                  To obtain 1-dimensional views, apply this method, then apply another slice view (methods &lt;tt&gt;viewColumn&lt;/tt&gt;, &lt;tt&gt;viewRow&lt;/tt&gt;) on the intermediate 2-dimensional view.
                  To obtain 1-dimensional views on subranges, apply both steps.                
                <param>
                    column the index of the column to fix.                    
                </param>
                <return>
                    a new 2-dimensional slice view.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <tt>column < 0 || column >= columns()</tt>.                    
                </throws>
                <see>
                    #viewSlice(int)                    
                </see>
                <see>
                    #viewRow(int)                    
                </see>
            </javadoc>
            <method name="viewColumn" type="DoubleMatrix2D" line="517">
                <params>
                    <param name="column" type="int"/>
                </params>
                <comment line="523">
                    int sliceOffset = index(0,0,column);                    
                </comment>
                <declaration name="sliceRows" type="int" line="519"/>
                <declaration name="sliceColumns" type="int" line="520"/>
                <declaration name="sliceRowZero" type="int" line="523"/>
                <declaration name="sliceColumnZero" type="int" line="524"/>
                <declaration name="sliceRowStride" type="int" line="526"/>
                <declaration name="sliceColumnStride" type="int" line="527"/>
            </method>
            <javadoc line="530">
                Constructs and returns a new &lt;i&gt;flip view&lt;/i&gt; along the column axis.
                  What used to be column &lt;tt&gt;0&lt;/tt&gt; is now column &lt;tt&gt;columns()-1&lt;/tt&gt;, ..., what used to be column &lt;tt&gt;columns()-1&lt;/tt&gt; is now column &lt;tt&gt;0&lt;/tt&gt;.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.                
                <return>
                    a new flip view.                    
                </return>
                <see>
                    #viewSliceFlip()                    
                </see>
                <see>
                    #viewRowFlip()                    
                </see>
            </javadoc>
            <method name="viewColumnFlip" type="DoubleMatrix3D" line="539"/>
            <javadoc line="542">
                Constructs and returns a new &lt;i&gt;dice view&lt;/i&gt;; Swaps dimensions (axes); Example: 3 x 4 x 5 matrix --&gt; 4 x 3 x 5 matrix.
                  The view has dimensions exchanged; what used to be one axis is now another, in all desired permutations.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.                
                <param>
                    axis0 the axis that shall become axis 0 (legal values 0..2).                    
                </param>
                <param>
                    axis1 the axis that shall become axis 1 (legal values 0..2).                    
                </param>
                <param>
                    axis2 the axis that shall become axis 2 (legal values 0..2).                    
                </param>
                <return>
                    a new dice view.                    
                </return>
                <throws>
                    IllegalArgumentException if some of the parameters are equal or not in range 0..2.                    
                </throws>
            </javadoc>
            <method name="viewDice" type="DoubleMatrix3D" line="553">
                <params>
                    <param name="axis0" type="int"/>
                    <param name="axis1" type="int"/>
                    <param name="axis2" type="int"/>
                </params>
            </method>
            <javadoc line="556">
                Constructs and returns a new &lt;i&gt;sub-range view&lt;/i&gt; that is a &lt;tt&gt;depth x height x width&lt;/tt&gt; sub matrix starting at &lt;tt&gt;[slice,row,column]&lt;/tt&gt;;
                  Equivalent to &lt;tt&gt;view().part(slice,row,column,depth,height,width)&lt;/tt&gt;; Provided for convenience only.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.                
                <param>
                    slice   The index of the slice-coordinate.                    
                </param>
                <param>
                    row   The index of the row-coordinate.                    
                </param>
                <param>
                    column   The index of the column-coordinate.                    
                </param>
                <param>
                    depth   The depth of the box.                    
                </param>
                <param>
                    height   The height of the box.                    
                </param>
                <param>
                    width   The width of the box.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>slice<0 || depth<0 || slice+depth>slices() || row<0 || height<0 || row+height>rows() || column<0 || width<0 || column+width>columns()</tt>                    
                </throws>
                <return>
                    the new view.                    
                </return>
            </javadoc>
            <method name="viewPart" type="DoubleMatrix3D" line="571">
                <params>
                    <param name="slice" type="int"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="depth" type="int"/>
                    <param name="height" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="574">
                Constructs and returns a new 2-dimensional &lt;i&gt;slice view&lt;/i&gt; representing the slices and columns of the given row.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  &lt;p&gt;
                  To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;view().part(...)&lt;/tt&gt;), then apply this method to the sub-range view.
                  To obtain 1-dimensional views, apply this method, then apply another slice view (methods &lt;tt&gt;viewColumn&lt;/tt&gt;, &lt;tt&gt;viewRow&lt;/tt&gt;) on the intermediate 2-dimensional view.
                  To obtain 1-dimensional views on subranges, apply both steps.                
                <param>
                    row the index of the row to fix.                    
                </param>
                <return>
                    a new 2-dimensional slice view.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <tt>row < 0 || row >= row()</tt>.                    
                </throws>
                <see>
                    #viewSlice(int)                    
                </see>
                <see>
                    #viewColumn(int)                    
                </see>
            </javadoc>
            <method name="viewRow" type="DoubleMatrix2D" line="588">
                <params>
                    <param name="row" type="int"/>
                </params>
                <comment line="594">
                    int sliceOffset = index(0,row,0);                    
                </comment>
                <declaration name="sliceRows" type="int" line="590"/>
                <declaration name="sliceColumns" type="int" line="591"/>
                <declaration name="sliceRowZero" type="int" line="594"/>
                <declaration name="sliceColumnZero" type="int" line="595"/>
                <declaration name="sliceRowStride" type="int" line="597"/>
                <declaration name="sliceColumnStride" type="int" line="598"/>
            </method>
            <javadoc line="601">
                Constructs and returns a new &lt;i&gt;flip view&lt;/i&gt; along the row axis.
                  What used to be row &lt;tt&gt;0&lt;/tt&gt; is now row &lt;tt&gt;rows()-1&lt;/tt&gt;, ..., what used to be row &lt;tt&gt;rows()-1&lt;/tt&gt; is now row &lt;tt&gt;0&lt;/tt&gt;.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.                
                <return>
                    a new flip view.                    
                </return>
                <see>
                    #viewSliceFlip()                    
                </see>
                <see>
                    #viewColumnFlip()                    
                </see>
            </javadoc>
            <method name="viewRowFlip" type="DoubleMatrix3D" line="610"/>
            <javadoc line="613">
                Constructs and returns a new &lt;i&gt;selection view&lt;/i&gt; that is a matrix holding the indicated cells.
                  There holds &lt;tt&gt;view.slices() == sliceIndexes.length, view.rows() == rowIndexes.length, view.columns() == columnIndexes.length&lt;/tt&gt; and 
                  &lt;tt&gt;view.get(k,i,j) == this.get(sliceIndexes[k],rowIndexes[i],columnIndexes[j])&lt;/tt&gt;.
                  Indexes can occur multiple times and can be in arbitrary order.
                  For an example see {@link DoubleMatrix2D#viewSelection(int[],int[])}.
                  &lt;p&gt;
                  Note that modifying the index arguments after this call has returned has no effect on the view.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.                
                <param>
                    sliceIndexes   The slices of the cells that shall be visible in the new view. To indicate that <i>all</i> slices shall be visible, simply set this parameter to <tt>null</tt>.                    
                </param>
                <param>
                    rowIndexes   The rows of the cells that shall be visible in the new view. To indicate that <i>all</i> rows shall be visible, simply set this parameter to <tt>null</tt>.                    
                </param>
                <param>
                    columnIndexes   The columns of the cells that shall be visible in the new view. To indicate that <i>all</i> columns shall be visible, simply set this parameter to <tt>null</tt>.                    
                </param>
                <return>
                    the new view.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <tt>!(0 <= sliceIndexes[i] < slices())</tt> for any <tt>i=0..sliceIndexes.length()-1</tt>.                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if <tt>!(0 <= rowIndexes[i] < rows())</tt> for any <tt>i=0..rowIndexes.length()-1</tt>.                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if <tt>!(0 <= columnIndexes[i] < columns())</tt> for any <tt>i=0..columnIndexes.length()-1</tt>.                    
                </throws>
            </javadoc>
            <method name="viewSelection" type="DoubleMatrix3D" line="631">
                <params>
                    <param name="sliceIndexes" type="int[]"/>
                    <param name="rowIndexes" type="int[]"/>
                    <param name="columnIndexes" type="int[]"/>
                </params>
                <comment line="633">
                    check for &quot;all&quot;                    
                </comment>
                <scope line="633"/>
                <scope line="637"/>
                <scope line="641"/>
                <declaration name="sliceOffsets" type="int[]" line="650"/>
                <declaration name="rowOffsets" type="int[]" line="651"/>
                <declaration name="columnOffsets" type="int[]" line="652"/>
                <scope line="654"/>
                <scope line="657"/>
                <scope line="660"/>
            </method>
            <javadoc line="666">
                Constructs and returns a new &lt;i&gt;selection view&lt;/i&gt; that is a matrix holding all &lt;b&gt;slices&lt;/b&gt; matching the given condition.
                  Applies the condition to each slice and takes only those where &lt;tt&gt;condition.apply(viewSlice(i))&lt;/tt&gt; yields &lt;tt&gt;true&lt;/tt&gt;.
                  To match rows or columns, use a dice view.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;br&gt;
                  &lt;pre&gt;
                  // extract and view all slices which have an aggregate sum &gt; 1000
                  matrix.viewSelection( 
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;new DoubleMatrix2DProcedure() {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public final boolean apply(DoubleMatrix2D m) { return m.zSum &gt; 1000; }
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;}
                  );
                  &lt;/pre&gt;
                  For further examples, see the &lt;a href=&quot;package-summary.html#FunctionObjects&quot;&gt;package doc&lt;/a&gt;.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.                
                <param>
                    condition The condition to be matched.                    
                </param>
                <return>
                    the new view.                    
                </return>
            </javadoc>
            <method name="viewSelection" type="DoubleMatrix3D" line="687">
                <params>
                    <param name="condition" type="DoubleMatrix2DProcedure"/>
                </params>
                <comment line="695">
                    take all rows and columns                    
                </comment>
                <declaration name="matches" type="IntArrayList" line="688"/>
                <scope line="689"/>
            </method>
            <method name="viewSelectionLike" type="DoubleMatrix3D" line="696"/>
            <javadoc line="696">
                Construct and returns a new selection view.                
                <param>
                    sliceOffsets the offsets of the visible elements.                    
                </param>
                <param>
                    rowOffsets the offsets of the visible elements.                    
                </param>
                <param>
                    columnOffsets the offsets of the visible elements.                    
                </param>
                <return>
                    a new view.                    
                </return>
            </javadoc>
            <javadoc line="705">
                Constructs and returns a new 2-dimensional &lt;i&gt;slice view&lt;/i&gt; representing the rows and columns of the given slice.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  &lt;p&gt;
                  To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;view().part(...)&lt;/tt&gt;), then apply this method to the sub-range view.
                  To obtain 1-dimensional views, apply this method, then apply another slice view (methods &lt;tt&gt;viewColumn&lt;/tt&gt;, &lt;tt&gt;viewRow&lt;/tt&gt;) on the intermediate 2-dimensional view.
                  To obtain 1-dimensional views on subranges, apply both steps.                
                <param>
                    slice the index of the slice to fix.                    
                </param>
                <return>
                    a new 2-dimensional slice view.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <tt>slice < 0 || slice >= slices()</tt>.                    
                </throws>
                <see>
                    #viewRow(int)                    
                </see>
                <see>
                    #viewColumn(int)                    
                </see>
            </javadoc>
            <method name="viewSlice" type="DoubleMatrix2D" line="719">
                <params>
                    <param name="slice" type="int"/>
                </params>
                <comment line="725">
                    int sliceOffset = index(slice,0,0);                    
                </comment>
                <declaration name="sliceRows" type="int" line="721"/>
                <declaration name="sliceColumns" type="int" line="722"/>
                <declaration name="sliceRowZero" type="int" line="725"/>
                <declaration name="sliceColumnZero" type="int" line="726"/>
                <declaration name="sliceRowStride" type="int" line="728"/>
                <declaration name="sliceColumnStride" type="int" line="729"/>
            </method>
            <javadoc line="732">
                Constructs and returns a new &lt;i&gt;flip view&lt;/i&gt; along the slice axis.
                  What used to be slice &lt;tt&gt;0&lt;/tt&gt; is now slice &lt;tt&gt;slices()-1&lt;/tt&gt;, ..., what used to be slice &lt;tt&gt;slices()-1&lt;/tt&gt; is now slice &lt;tt&gt;0&lt;/tt&gt;.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.                
                <return>
                    a new flip view.                    
                </return>
                <see>
                    #viewRowFlip()                    
                </see>
                <see>
                    #viewColumnFlip()                    
                </see>
            </javadoc>
            <method name="viewSliceFlip" type="DoubleMatrix3D" line="741"/>
            <javadoc line="744">
                Sorts the matrix slices into ascending order, according to the &lt;i&gt;natural ordering&lt;/i&gt; of the matrix values in the given &lt;tt&gt;[row,column]&lt;/tt&gt; position.
                  This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;.
                  For further information, see {@link cern.colt.matrix.doublealgo.Sorting#sort(DoubleMatrix3D,int,int)}.
                  For more advanced sorting functionality, see {@link cern.colt.matrix.doublealgo.Sorting}.                
                <return>
                    a new sorted vector (matrix) view.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <tt>row < 0 || row >= rows() || column < 0 || column >= columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="viewSorted" type="DoubleMatrix3D" line="752">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="755">
                Constructs and returns a new &lt;i&gt;stride view&lt;/i&gt; which is a sub matrix consisting of every i-th cell.
                  More specifically, the view has &lt;tt&gt;this.slices()/sliceStride&lt;/tt&gt; slices and &lt;tt&gt;this.rows()/rowStride&lt;/tt&gt; rows and &lt;tt&gt;this.columns()/columnStride&lt;/tt&gt; columns 
                  holding cells &lt;tt&gt;this.get(ksliceStride,irowStride,jcolumnStride)&lt;/tt&gt; for all &lt;tt&gt;k = 0..slices()/sliceStride - 1, i = 0..rows()/rowStride - 1, j = 0..columns()/columnStride - 1&lt;/tt&gt;.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.                
                <param>
                    sliceStride the slice step factor.                    
                </param>
                <param>
                    rowStride the row step factor.                    
                </param>
                <param>
                    columnStride the column step factor.                    
                </param>
                <return>
                    a new view.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <tt>sliceStride<=0 || rowStride<=0 || columnStride<=0</tt>.                    
                </throws>
            </javadoc>
            <method name="viewStrides" type="DoubleMatrix3D" line="767">
                <params>
                    <param name="sliceStride" type="int"/>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                </params>
            </method>
            <javadoc line="770">
                Applies a procedure to each cell&apos;s value.
                  Iterates downwards from &lt;tt&gt;[slices()-1,rows()-1,columns()-1]&lt;/tt&gt; to &lt;tt&gt;[0,0,0]&lt;/tt&gt;,
                  as demonstrated by this snippet:
                  &lt;pre&gt;
                  for (int slice=slices; --slice &gt;=0;) {
                  for (int row=rows; --row &gt;= 0;) {
                  for (int column=columns; --column &gt;= 0;) {
                  if (!procedure.apply(get(slice,row,column))) return false;
                  }
                  }
                  }
                  return true;
                  &lt;/pre&gt;
                  Note that an implementation may use more efficient techniques, but must not use any other order.                
                <param>
                    procedure a procedure object taking as argument the current cell's value. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="xforEach" type="boolean" line="789">
                <params>
                    <param name="procedure" type="cern.colt.function.DoubleProcedure"/>
                </params>
                <scope line="790">
                    <scope line="791">
                        <scope line="792"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="799">
                Applies a procedure to each cell&apos;s coordinate.
                  Iterates downwards from &lt;tt&gt;[slices()-1,rows()-1,columns()-1]&lt;/tt&gt; to &lt;tt&gt;[0,0,0]&lt;/tt&gt;,
                  as demonstrated by this snippet:
                  &lt;pre&gt;
                  for (int slice=slices; --slice &gt;=0;) {
                  for (int row=rows; --row &gt;= 0;) {
                  for (int column=columns; --column &gt;= 0;) {
                  if (!procedure.apply(slice,row,column)) return false;
                  }
                  }
                  }
                  return true;
                  &lt;/pre&gt;
                  Note that an implementation may use more efficient techniques, but must not use any other order.                
                <param>
                    procedure a procedure object taking as first argument the current slice, as second argument the current row, and as third argument the current column. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </param>
                <return>
                    <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="xforEachCoordinate" type="boolean" line="818">
                <params>
                    <param name="procedure" type="cern.colt.function.IntIntIntProcedure"/>
                </params>
                <scope line="819">
                    <scope line="820">
                        <scope line="821"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="828">
                27 neighbor stencil transformation. For efficient finite difference operations.
                  Applies a function to a moving &lt;tt&gt;3 x 3 x 3&lt;/tt&gt; window.
                  Does nothing if &lt;tt&gt;rows() &lt; 3 || columns() &lt; 3 || slices() &lt; 3&lt;/tt&gt;.
                  &lt;pre&gt;
                  B[k,i,j] = function.apply(
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;A[k-1,i-1,j-1], A[k-1,i-1,j], A[k-1,i-1,j+1],
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;A[k-1,i,  j-1], A[k-1,i,  j], A[k-1,i,  j+1],
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;A[k-1,i+1,j-1], A[k-1,i+1,j], A[k-1,i+1,j+1],
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;A[k  ,i-1,j-1], A[k  ,i-1,j], A[k  ,i-1,j+1],
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;A[k  ,i,  j-1], A[k  ,i,  j], A[k  ,i,  j+1],
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;A[k  ,i+1,j-1], A[k  ,i+1,j], A[k  ,i+1,j+1],
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;A[k+1,i-1,j-1], A[k+1,i-1,j], A[k+1,i-1,j+1],
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;A[k+1,i,  j-1], A[k+1,i,  j], A[k+1,i,  j+1],
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;A[k+1,i+1,j-1], A[k+1,i+1,j], A[k+1,i+1,j+1]
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;)
                  x x x - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x x x &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - 
                  x o x - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x o x &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - 
                  x x x - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x x x ... - x x x 
                  - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x o x 
                  - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x x x 
                  &lt;/pre&gt;
                  Make sure that cells of &lt;tt&gt;this&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; do not overlap.
                  In case of overlapping views, behaviour is unspecified.
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  final double alpha = 0.25;
                  final double beta = 0.75;
                  cern.colt.function.Double27Function f = new cern.colt.function.Double27Function() {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;public final double apply(
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a000, double a001, double a002,
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a010, double a011, double a012,
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a020, double a021, double a022,
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a100, double a101, double a102,
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a110, double a111, double a112,
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a120, double a121, double a122,
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a200, double a201, double a202,
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a210, double a211, double a212,
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a220, double a221, double a222) {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return betaa111 + alpha(a000 + ... + a222);
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
                  };
                  A.zAssign27Neighbors(B,f);
                  &lt;/pre&gt;                
                <param>
                    B the matrix to hold the results.                    
                </param>
                <param>
                    function the function to be applied to the 27 cells.                    
                </param>
                <throws>
                    NullPointerException if <tt>function==null</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>rows() != B.rows() || columns() != B.columns() || slices() != B.slices() </tt>.                    
                </throws>
            </javadoc>
            <method name="zAssign27Neighbors" type="void" line="886">
                <params>
                    <param name="B" type="DoubleMatrix3D"/>
                    <param name="function" type="cern.colt.function.Double27Function"/>
                </params>
                <comment line="890">
                    nothing to do                    
                </comment>
                <comment line="920">
                    in each step 18 cells can be remembered in registers - they don&apos;t need to be reread from slow memory
                     in each step 9 instead of 27 cells need to be read from memory.                    
                </comment>
                <declaration name="r" type="int" line="890"/>
                <declaration name="c" type="int" line="891"/>
                <declaration name="a000" type="double" line="892"/>
                <declaration name="a010" type="double" line="893"/>
                <declaration name="a020" type="double" line="894"/>
                <declaration name="a100" type="double" line="896"/>
                <declaration name="a110" type="double" line="897"/>
                <declaration name="a120" type="double" line="898"/>
                <declaration name="a200" type="double" line="900"/>
                <declaration name="a210" type="double" line="901"/>
                <declaration name="a220" type="double" line="902"/>
                <scope line="904">
                    <scope line="905">
                        <scope line="918"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="961">
                Returns the sum of all cells; &lt;tt&gt;Sum( x[i,j,k] )&lt;/tt&gt;.                
                <return>
                    the sum.                    
                </return>
            </javadoc>
            <method name="zSum" type="double" line="965"/>
        </class>
    </source>