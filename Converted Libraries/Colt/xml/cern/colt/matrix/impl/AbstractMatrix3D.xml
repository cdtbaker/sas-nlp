<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <class name="AbstractMatrix3D" line="11">
            <extends class="AbstractMatrix"/>
            <comment line="43">
                this.isNoView implies: offset==0, sliceStride==rows*slices, rowStride==columns, columnStride==1                
            </comment>
            <javadoc line="11">
                Abstract base class for 3-d matrices holding objects or primitive data types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, etc.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="slices" type="int" line="21"/>
            <javadoc line="21">
                the number of slices this matrix (view) has                
            </javadoc>
            <declaration name="rows" type="int" line="24"/>
            <javadoc line="24">
                the number of rows this matrix (view) has                
            </javadoc>
            <declaration name="columns" type="int" line="27"/>
            <javadoc line="27">
                the number of columns this matrix (view) has                
            </javadoc>
            <declaration name="sliceStride" type="int" line="31"/>
            <javadoc line="31">
                the number of elements between two slices, i.e. &lt;tt&gt;index(k+1,i,j) - index(k,i,j)&lt;/tt&gt;.                
            </javadoc>
            <declaration name="rowStride" type="int" line="34"/>
            <javadoc line="34">
                the number of elements between two rows, i.e. &lt;tt&gt;index(k,i+1,j) - index(k,i,j)&lt;/tt&gt;.                
            </javadoc>
            <declaration name="columnStride" type="int" line="37"/>
            <javadoc line="37">
                the number of elements between two columns, i.e. &lt;tt&gt;index(k,i,j+1) - index(k,i,j)&lt;/tt&gt;.                
            </javadoc>
            <declaration name="sliceZero" type="int" line="40"/>
            <javadoc line="40">
                the index of the first element                
            </javadoc>
            <javadoc line="43">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractMatrix3D" type="constructor" line="46"/>
            <javadoc line="47">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <param>
                    rank   the absolute rank of the element.                    
                </param>
                <return>
                    the position.                    
                </return>
            </javadoc>
            <method name="_columnOffset" type="int" line="54">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                Returns the absolute rank of the given relative rank.                
                <param>
                    rank   the relative rank of the element.                    
                </param>
                <return>
                    the absolute rank of the element.                    
                </return>
            </javadoc>
            <method name="_columnRank" type="int" line="63">
                <params>
                    <param name="rank" type="int"/>
                </params>
            </method>
            <javadoc line="66">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <param>
                    rank   the absolute rank of the element.                    
                </param>
                <return>
                    the position.                    
                </return>
            </javadoc>
            <method name="_rowOffset" type="int" line="73">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="76">
                Returns the absolute rank of the given relative rank.                
                <param>
                    rank   the relative rank of the element.                    
                </param>
                <return>
                    the absolute rank of the element.                    
                </return>
            </javadoc>
            <method name="_rowRank" type="int" line="82">
                <params>
                    <param name="rank" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <param>
                    rank   the absolute rank of the element.                    
                </param>
                <return>
                    the position.                    
                </return>
            </javadoc>
            <method name="_sliceOffset" type="int" line="92">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                Returns the absolute rank of the given relative rank.                
                <param>
                    rank   the relative rank of the element.                    
                </param>
                <return>
                    the absolute rank of the element.                    
                </return>
            </javadoc>
            <method name="_sliceRank" type="int" line="101">
                <params>
                    <param name="rank" type="int"/>
                </params>
            </method>
            <javadoc line="104">
                Checks whether the receiver contains the given box and throws an exception, if necessary.                
                <throws>
                    IndexOutOfBoundsException if <tt>row<0 || height<0 || row+height>rows || slice<0 || depth<0 || slice+depth>slices  || column<0 || width<0 || column+width>columns</tt>                    
                </throws>
            </javadoc>
            <method name="checkBox" type="void" line="108">
                <params>
                    <param name="slice" type="int"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="depth" type="int"/>
                    <param name="height" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="111">
                Sanity check for operations requiring a column index to be within bounds.                
                <throws>
                    IndexOutOfBoundsException if <tt>column < 0 || column >= columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkColumn" type="void" line="115">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                Checks whether indexes are legal and throws an exception, if necessary.                
                <throws>
                    IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < columns())</tt> for any i=0..indexes.length()-1.                    
                </throws>
            </javadoc>
            <method name="checkColumnIndexes" type="void" line="122">
                <params>
                    <param name="indexes" type="int[]"/>
                </params>
                <scope line="123">
                    <declaration name="index" type="int" line="124"/>
                </scope>
            </method>
            <javadoc line="128">
                Sanity check for operations requiring a row index to be within bounds.                
                <throws>
                    IndexOutOfBoundsException if <tt>row < 0 || row >= rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkRow" type="void" line="132">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="135">
                Checks whether indexes are legal and throws an exception, if necessary.                
                <throws>
                    IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < rows())</tt> for any i=0..indexes.length()-1.                    
                </throws>
            </javadoc>
            <method name="checkRowIndexes" type="void" line="139">
                <params>
                    <param name="indexes" type="int[]"/>
                </params>
                <scope line="140">
                    <declaration name="index" type="int" line="141"/>
                </scope>
            </method>
            <javadoc line="145">
                Sanity check for operations requiring two matrices with the same number of slices, rows and columns.                
                <throws>
                    IllegalArgumentException if <tt>slices() != B.slices() || rows() != B.rows() || columns() != B.columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkShape" type="void" line="149">
                <params>
                    <param name="B" type="AbstractMatrix3D"/>
                </params>
            </method>
            <javadoc line="152">
                Sanity check for operations requiring matrices with the same number of slices, rows and columns.                
                <throws>
                    IllegalArgumentException if <tt>slices() != B.slices() || rows() != B.rows() || columns() != B.columns() || slices() != C.slices() || rows() != C.rows() || columns() != C.columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkShape" type="void" line="156">
                <params>
                    <param name="B" type="AbstractMatrix3D"/>
                    <param name="C" type="AbstractMatrix3D"/>
                </params>
            </method>
            <javadoc line="159">
                Sanity check for operations requiring a slice index to be within bounds.                
                <throws>
                    IndexOutOfBoundsException if <tt>slice < 0 || slice >= slices()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkSlice" type="void" line="163">
                <params>
                    <param name="slice" type="int"/>
                </params>
            </method>
            <javadoc line="166">
                Checks whether indexes are legal and throws an exception, if necessary.                
                <throws>
                    IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < slices())</tt> for any i=0..indexes.length()-1.                    
                </throws>
            </javadoc>
            <method name="checkSliceIndexes" type="void" line="170">
                <params>
                    <param name="indexes" type="int[]"/>
                </params>
                <scope line="171">
                    <declaration name="index" type="int" line="172"/>
                </scope>
            </method>
            <javadoc line="176">
                Returns the number of columns.                
            </javadoc>
            <method name="columns" type="int" line="179"/>
            <javadoc line="182">
                Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.                
                <param>
                    slice   the index of the slice-coordinate.                    
                </param>
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the third-coordinate.                    
                </param>
            </javadoc>
            <method name="index" type="int" line="189">
                <params>
                    <param name="slice" type="int"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="192">
                Returns the number of rows.                
            </javadoc>
            <method name="rows" type="int" line="195"/>
            <javadoc line="198">
                Sets up a matrix with a given number of slices and rows.                
                <param>
                    slices the number of slices the matrix shall have.                    
                </param>
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>(double)rowsslices > Integer.MAX_VALUE</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.                    
                </throws>
            </javadoc>
            <method name="setUp" type="void" line="206">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="209">
                Sets up a matrix with a given number of slices and rows and the given strides.                
                <param>
                    slices the number of slices the matrix shall have.                    
                </param>
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <param>
                    sliceZero the position of the first element.                    
                </param>
                <param>
                    rowZero the position of the first element.                    
                </param>
                <param>
                    columnZero the position of the first element.                    
                </param>
                <param>
                    sliceStride the number of elements between two slices, i.e. <tt>index(k+1,i,j)-index(k,i,j)</tt>.                    
                </param>
                <param>
                    rowStride the number of elements between two rows, i.e. <tt>index(k,i+1,j)-index(k,i,j)</tt>.                    
                </param>
                <param>
                    columnnStride the number of elements between two columns, i.e. <tt>index(k,i,j+1)-index(k,i,j)</tt>.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>(double)slicesrowscolumnss > Integer.MAX_VALUE</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.                    
                </throws>
            </javadoc>
            <method name="setUp" type="void" line="223">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="sliceZero" type="int"/>
                    <param name="rowZero" type="int"/>
                    <param name="columnZero" type="int"/>
                    <param name="sliceStride" type="int"/>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                </params>
            </method>
            <method name="shape" type="int[]" line="241">
                <declaration name="shape" type="int[]" line="242"/>
            </method>
            <javadoc line="248">
                Returns the number of cells which is &lt;tt&gt;slices()rows()columns()&lt;/tt&gt;.                
            </javadoc>
            <method name="size" type="int" line="251"/>
            <javadoc line="254">
                Returns the number of slices.                
            </javadoc>
            <method name="slices" type="int" line="257"/>
            <javadoc line="260">
                Returns a string representation of the receiver&apos;s shape.                
            </javadoc>
            <method name="toStringShort" type="String" line="263"/>
            <javadoc line="266">
                Self modifying version of viewColumnFlip().                
            </javadoc>
            <method name="vColumnFlip" type="AbstractMatrix3D" line="269">
                <scope line="270"/>
            </method>
            <javadoc line="277">
                Self modifying version of viewDice().                
                <throws>
                    IllegalArgumentException if some of the parameters are equal or not in range 0..2.                    
                </throws>
            </javadoc>
            <method name="vDice" type="AbstractMatrix3D" line="281">
                <params>
                    <param name="axis0" type="int"/>
                    <param name="axis1" type="int"/>
                    <param name="axis2" type="int"/>
                </params>
                <comment line="289">
                    swap shape                    
                </comment>
                <comment line="296">
                    swap strides                    
                </comment>
                <declaration name="d" type="int" line="282"/>
                <scope line="284"/>
                <declaration name="shape" type="int[]" line="289"/>
                <declaration name="strides" type="int[]" line="296"/>
            </method>
            <javadoc line="308">
                Self modifying version of viewPart().                
                <throws>
                    IndexOutOfBoundsException if <tt>slice<0 || depth<0 || slice+depth>slices() || row<0 || height<0 || row+height>rows() || column<0 || width<0 || column+width>columns()</tt>                    
                </throws>
            </javadoc>
            <method name="vPart" type="AbstractMatrix3D" line="312">
                <params>
                    <param name="slice" type="int"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="depth" type="int"/>
                    <param name="height" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="326">
                Self modifying version of viewRowFlip().                
            </javadoc>
            <method name="vRowFlip" type="AbstractMatrix3D" line="329">
                <scope line="330"/>
            </method>
            <javadoc line="337">
                Self modifying version of viewSliceFlip().                
            </javadoc>
            <method name="vSliceFlip" type="AbstractMatrix3D" line="340">
                <scope line="341"/>
            </method>
            <javadoc line="348">
                Self modifying version of viewStrides().                
                <throws>
                    IndexOutOfBoundsException if <tt>sliceStride<=0 || rowStride<=0 || columnStride<=0</tt>.                    
                </throws>
            </javadoc>
            <method name="vStrides" type="AbstractMatrix3D" line="352">
                <params>
                    <param name="sliceStride" type="int"/>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                </params>
            </method>
        </class>
    </source>