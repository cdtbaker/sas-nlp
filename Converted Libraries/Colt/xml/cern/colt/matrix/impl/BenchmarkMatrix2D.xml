<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="BenchmarkMatrix2D" line="3">
            <javadoc line="3">
                Benchmarks the performance of matrices. Here are the results of some encouraging 
                  measurements. Note that all benchmarks only measure the time spent in accessing 
                  a matrix element; they exclude the loop itself. 
                  &lt;p&gt; 
                  &lt;center&gt;
                  &lt;table border cellpadding=&quot;3&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#33CC66&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap colspan=&quot;7&quot;&gt; &lt;font size=&quot;+2&quot;&gt;Iteration Performance [million method 
                  calls per second]&lt;/font&gt;&lt;br&gt;
                  &lt;font size=&quot;-1&quot;&gt;Pentium Pro 200 Mhz, SunJDK 1.2.2, NT, java -classic,&lt;br&gt;
                  60 times repeating the same iteration &lt;/font&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#33CC66&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap&gt; 
                  &lt;div align=&quot;left&quot;&gt; Element type&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td nowrap colspan=&quot;6&quot;&gt; Matrix2D type &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap bgcolor=&quot;#FF9966&quot; rowspan=&quot;2&quot;&gt; 
                  &lt;div align=&quot;left&quot;&gt; .&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot; colspan=&quot;2&quot;&gt; 
                  &lt;p&gt;&lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;&lt;br&gt;
                  1000 x 1000 &lt;/p&gt;
                  &lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot; colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot; colspan=&quot;2&quot;&gt; 
                  &lt;p&gt;&lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;&lt;br&gt;
                  100 x 1000,&lt;br&gt;
                  &lt;font size=&quot;-1&quot;&gt; minLoadFactor=0.2, maxLoadFactor=0.5, initialCapacity 
                  = 0&lt;/font&gt;&lt;/p&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt; getQuick&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt; setQuick&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt; getQuick&lt;/td&gt;
                  &lt;td bgcolor=&quot;#FF9966&quot;&gt;setQuick&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap bgcolor=&quot;#FF9966&quot;&gt;double&lt;/td&gt;
                  &lt;td nowrap&gt;5&lt;/td&gt;
                  &lt;td nowrap&gt;5&lt;/td&gt;
                  &lt;td nowrap&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td nowrap&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td nowrap&gt;1&lt;/td&gt;
                  &lt;td nowrap&gt;0.27&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td nowrap bgcolor=&quot;#FF9966&quot;&gt; int&lt;/td&gt;
                  &lt;td nowrap&gt;5 &lt;/td&gt;
                  &lt;td nowrap&gt;5.5 &lt;/td&gt;
                  &lt;td nowrap&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td nowrap&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td nowrap&gt;1 &lt;/td&gt;
                  &lt;td nowrap&gt;0.3&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/center&gt;
                  &lt;p align=&quot;left&quot;&gt; As can be seen, sparse matrices are certainly not quite as quick 
                  as dense ones, but not really slow either. Considering their minimal footprint 
                  they can be a real alternative. 
                  &lt;p&gt; Comparing the OO abstractions to zero-abstraction primitive Java arrays may 
                  or may not be useful. Still, the table below provides some interesting information. 
                  For example, access to &lt;tt&gt;Type_T_Matrix2D&lt;/tt&gt; is quicker than naive usage 
                  of &lt;tt&gt;Type_T_[]&lt;/tt&gt;. Primitive arrays should only be considered if the optimized 
                  form can be applied. Note again that all benchmarks only measure the time spent 
                  in accessing a matrix element; they exclude the loop itself. 
                  &lt;p&gt; 
                  &lt;center&gt;
                  &lt;table border cellpadding=&quot;3&quot; cellspacing=&quot;0&quot; align=&quot;center&quot; width=&quot;617&quot;&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#33CC66&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td height=&quot;30&quot; nowrap colspan=&quot;7&quot;&gt; &lt;font size=&quot;+2&quot;&gt;Iteration Performance 
                  [million element accesses per second]&lt;/font&gt;&lt;br&gt;
                  &lt;font size=&quot;-1&quot;&gt;Pentium Pro 200 Mhz, SunJDK 1.2.2, NT, java -classic,&lt;br&gt;
                  200 times repeating the same iteration &lt;/font&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#33CC66&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td width=&quot;78&quot; height=&quot;30&quot; nowrap&gt; 
                  &lt;div align=&quot;left&quot;&gt; Element type&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td height=&quot;30&quot; nowrap colspan=&quot;6&quot;&gt; 
                  &lt;div align=&quot;center&quot;&gt;Matrix2D type = Java array &lt;tt&gt;double[][]&lt;/tt&gt;&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td width=&quot;78&quot; height=&quot;60&quot; nowrap bgcolor=&quot;#FF9966&quot; rowspan=&quot;2&quot;&gt; 
                  &lt;div align=&quot;left&quot;&gt; .&lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td height=&quot;132&quot; bgcolor=&quot;#FF9966&quot; colspan=&quot;2&quot;&gt; 
                  &lt;p&gt;Unoptimized Form&lt;br&gt;
                  1000 x 1000&lt;br&gt;
                  &lt;div align=&quot;left&quot;&gt; &lt;font size=&quot;-1&quot;&gt; 
                  &lt;pre&gt;
                  for (int row=0; row &lt; rows; row++) { 
                  for (int col=0; col &lt; columns; ) { 
                  value = m[row][col++];
                  ...
                  }
                  }
                  &lt;/pre&gt;
                  &lt;/font&gt; &lt;/div&gt;
                  &lt;/td&gt;
                  &lt;td height=&quot;132&quot; bgcolor=&quot;#FF9966&quot; colspan=&quot;4&quot;&gt; Optimized Form&lt;br&gt;
                  1000 x 1000 
                  &lt;div align=&quot;left&quot;&gt; &lt;font size=&quot;-1&quot;&gt; 
                  &lt;pre&gt;
                  for (int row=0; row &lt; rows; row++) { 
                  int[] r = matrix[row]; 
                  for (int col=0; col &lt; columns; ) { 
                  value = r[col++];
                  ...
                  }
                  }
                  &lt;/pre&gt;
                  &lt;/font&gt; &lt;/div&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td width=&quot;152&quot; height=&quot;30&quot; bgcolor=&quot;#FF9966&quot;&gt; getting&lt;/td&gt;
                  &lt;td width=&quot;144&quot; height=&quot;30&quot; bgcolor=&quot;#FF9966&quot;&gt; setting&lt;/td&gt;
                  &lt;td width=&quot;150&quot; height=&quot;30&quot; bgcolor=&quot;#FF9966&quot;&gt; getting&lt;/td&gt;
                  &lt;td width=&quot;138&quot; height=&quot;30&quot; bgcolor=&quot;#FF9966&quot; colspan=&quot;3&quot;&gt; setting&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td width=&quot;78&quot; height=&quot;30&quot; nowrap bgcolor=&quot;#FF9966&quot;&gt;double&lt;/td&gt;
                  &lt;td width=&quot;152&quot; height=&quot;30&quot; nowrap&gt;1.6&lt;/td&gt;
                  &lt;td width=&quot;144&quot; height=&quot;30&quot; nowrap&gt;1.8&lt;/td&gt;
                  &lt;td width=&quot;150&quot; height=&quot;30&quot; nowrap&gt;18&lt;/td&gt;
                  &lt;td width=&quot;138&quot; height=&quot;30&quot; nowrap colspan=&quot;3&quot;&gt;11&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;middle&quot; bgcolor=&quot;#66CCFF&quot; nowrap align=&quot;center&quot;&gt; 
                  &lt;td width=&quot;78&quot; height=&quot;30&quot; nowrap bgcolor=&quot;#FF9966&quot;&gt; int&lt;/td&gt;
                  &lt;td width=&quot;152&quot; height=&quot;30&quot; nowrap&gt;1.5 &lt;/td&gt;
                  &lt;td width=&quot;144&quot; height=&quot;30&quot; nowrap&gt;1.8&lt;/td&gt;
                  &lt;td width=&quot;150&quot; height=&quot;30&quot; nowrap&gt;28&lt;/td&gt;
                  &lt;td width=&quot;138&quot; height=&quot;30&quot; nowrap colspan=&quot;3&quot;&gt;26&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/center&gt;
                  &lt;left&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <javadoc line="152">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="BenchmarkMatrix2D" type="constructor" line="155"/>
            <javadoc line="158">
                Runs a bench on matrices holding double elements.                
            </javadoc>
            <method name="doubleBenchmark" type="void" line="161">
                <params>
                    <param name="runs" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="kind" type="String"/>
                    <param name="print" type="boolean"/>
                    <param name="initialCapacity" type="int"/>
                    <param name="minLoadFactor" type="double"/>
                    <param name="maxLoadFactor" type="double"/>
                </params>
                <declaration name="timer1" type="cern.colt.Timer" line="163"/>
                <declaration name="timer2" type="cern.colt.Timer" line="164"/>
                <declaration name="timer3" type="cern.colt.Timer" line="165"/>
                <declaration name="timer4" type="cern.colt.Timer" line="166"/>
                <declaration name="emptyLoop" type="cern.colt.Timer" line="167"/>
                <declaration name="emptyLoop2" type="cern.colt.Timer" line="168"/>
                <declaration name="dummy" type="int" line="170"/>
                <scope line="171">
                    <scope line="172">
                        <scope line="173"/>
                    </scope>
                </scope>
                <declaration name="dummy2" type="double" line="182"/>
                <scope line="183">
                    <scope line="184">
                        <scope line="185"/>
                    </scope>
                </scope>
                <declaration name="before" type="long" line="192"/>
                <declaration name="size" type="long" line="193"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="194"/>
                <scope line="199">
                    <declaration name="value" type="int" line="204"/>
                    <scope line="205">
                        <scope line="206"/>
                    </scope>
                </scope>
                <scope line="216"/>
                <scope line="219"/>
                <declaration name="after" type="long" line="222"/>
                <scope line="225"/>
                <declaration name="element" type="double" line="231"/>
                <scope line="232">
                    <scope line="233">
                        <scope line="234"/>
                    </scope>
                </scope>
                <declaration name="view" type="DoubleMatrix2D" line="245"/>
                <scope line="248">
                    <scope line="249">
                        <scope line="250"/>
                    </scope>
                </scope>
                <scope line="262">
                    <scope line="263">
                        <scope line="264"/>
                    </scope>
                    <scope line="269">
                        <scope line="270"/>
                    </scope>
                </scope>
                <scope line="280"/>
                <scope line="283"/>
            </method>
            <javadoc line="292">
                Runs a bench on matrices holding double elements.                
            </javadoc>
            <method name="doubleBenchmarkMult" type="void" line="295">
                <params>
                    <param name="runs" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="kind" type="String"/>
                    <param name="print" type="boolean"/>
                    <param name="initialCapacity" type="int"/>
                    <param name="minLoadFactor" type="double"/>
                    <param name="maxLoadFactor" type="double"/>
                </params>
                <declaration name="timer1" type="cern.colt.Timer" line="297"/>
                <declaration name="timer2" type="cern.colt.Timer" line="298"/>
                <declaration name="size" type="long" line="299"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="300"/>
                <scope line="306"/>
                <scope line="313"/>
                <scope line="318"/>
                <scope line="325"/>
            </method>
            <javadoc line="330">
                Runs a bench on matrices holding double elements.                
            </javadoc>
            <method name="doubleBenchmarkPrimitive" type="void" line="333">
                <params>
                    <param name="runs" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="print" type="boolean"/>
                </params>
                <declaration name="timer1" type="cern.colt.Timer" line="334"/>
                <declaration name="timer2" type="cern.colt.Timer" line="335"/>
                <declaration name="timer3" type="cern.colt.Timer" line="336"/>
                <declaration name="emptyLoop" type="cern.colt.Timer" line="337"/>
                <declaration name="emptyLoop2" type="cern.colt.Timer" line="338"/>
                <declaration name="dummy" type="int" line="340"/>
                <scope line="341">
                    <scope line="342">
                        <scope line="343"/>
                    </scope>
                </scope>
                <declaration name="dummy2" type="double" line="352"/>
                <scope line="353">
                    <scope line="354">
                        <scope line="355"/>
                    </scope>
                </scope>
                <declaration name="before" type="long" line="362"/>
                <declaration name="size" type="long" line="363"/>
                <declaration name="matrix" type="double[][]" line="364"/>
                <scope line="366">
                    <declaration name="value" type="int" line="368"/>
                    <scope line="369">
                        <scope line="370"/>
                    </scope>
                </scope>
                <scope line="380"/>
                <scope line="383"/>
                <declaration name="after" type="long" line="386"/>
                <scope line="388">
                    <declaration name="m" type="DenseDoubleMatrix2D" line="389"/>
                </scope>
                <declaration name="element" type="double" line="395"/>
                <scope line="396">
                    <scope line="397">
                        <scope line="398"/>
                    </scope>
                </scope>
                <scope line="406">
                    <declaration name="m" type="DenseDoubleMatrix2D" line="407"/>
                </scope>
                <scope line="414">
                    <scope line="416">
                        <scope line="417"/>
                    </scope>
                </scope>
                <scope line="427"/>
                <scope line="430"/>
                <scope line="436">
                    <declaration name="m" type="DenseDoubleMatrix2D" line="437"/>
                </scope>
            </method>
            <javadoc line="443">
                Runs a bench on matrices holding double elements.                
            </javadoc>
            <method name="doubleBenchmarkPrimitiveOptimized" type="void" line="446">
                <params>
                    <param name="runs" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="print" type="boolean"/>
                </params>
                <declaration name="timer1" type="cern.colt.Timer" line="447"/>
                <declaration name="timer2" type="cern.colt.Timer" line="448"/>
                <declaration name="timer3" type="cern.colt.Timer" line="449"/>
                <declaration name="emptyLoop" type="cern.colt.Timer" line="450"/>
                <declaration name="emptyLoop2" type="cern.colt.Timer" line="451"/>
                <declaration name="dummy" type="int" line="453"/>
                <scope line="454">
                    <scope line="455">
                        <scope line="456"/>
                    </scope>
                </scope>
                <declaration name="dummy2" type="double" line="465"/>
                <scope line="466">
                    <scope line="467">
                        <scope line="468"/>
                    </scope>
                </scope>
                <declaration name="before" type="long" line="475"/>
                <declaration name="size" type="long" line="476"/>
                <declaration name="matrix" type="double[][]" line="477"/>
                <scope line="479">
                    <declaration name="value" type="int" line="481"/>
                    <scope line="482">
                        <declaration name="r" type="double[]" line="483"/>
                        <scope line="484"/>
                    </scope>
                </scope>
                <scope line="494"/>
                <scope line="497"/>
                <declaration name="after" type="long" line="500"/>
                <scope line="502">
                    <declaration name="m" type="DenseDoubleMatrix2D" line="503"/>
                </scope>
                <declaration name="element" type="double" line="509"/>
                <scope line="510">
                    <scope line="511">
                        <declaration name="r" type="double[]" line="512"/>
                        <scope line="513"/>
                    </scope>
                </scope>
                <scope line="521">
                    <declaration name="m" type="DenseDoubleMatrix2D" line="522"/>
                </scope>
                <scope line="529">
                    <scope line="531">
                        <declaration name="r" type="double[]" line="532"/>
                        <scope line="533"/>
                    </scope>
                </scope>
                <scope line="543"/>
                <scope line="546"/>
                <scope line="552">
                    <declaration name="m" type="DenseDoubleMatrix2D" line="553"/>
                </scope>
            </method>
            <javadoc line="559">
                Runs a bench on matrices holding int elements.                
            </javadoc>
            <method name="intBenchmark" type="void" line="562">
                <params>
                    <param name="runs" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="kind" type="String"/>
                    <param name="print" type="boolean"/>
                    <param name="initialCapacity" type="int"/>
                    <param name="minLoadFactor" type="double"/>
                    <param name="maxLoadFactor" type="double"/>
                </params>
            </method>
            <javadoc line="565">
                Runs a bench on matrices holding int elements.                
            </javadoc>
            <method name="intBenchmarkPrimitive" type="void" line="568">
                <params>
                    <param name="runs" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="print" type="boolean"/>
                </params>
            </method>
            <javadoc line="571">
                Runs a bench on matrices holding int elements.                
            </javadoc>
            <method name="intBenchmarkPrimitiveOptimized" type="void" line="574">
                <params>
                    <param name="runs" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="print" type="boolean"/>
                </params>
            </method>
            <javadoc line="577">
                Benchmarks various methods of this class.                
            </javadoc>
            <method name="main" type="void" line="580">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="runs" type="int" line="581"/>
                <declaration name="rows" type="int" line="582"/>
                <declaration name="columns" type="int" line="583"/>
                <declaration name="kind" type="String" line="584"/>
                <declaration name="initialCapacity" type="int" line="585"/>
                <declaration name="minLoadFactor" type="double" line="586"/>
                <declaration name="maxLoadFactor" type="double" line="587"/>
                <declaration name="print" type="boolean" line="588"/>
                <declaration name="type" type="String" line="589"/>
                <declaration name="command" type="String" line="590"/>
                <scope line="591"/>
                <scope line="596"/>
            </method>
        </class>
    </source>