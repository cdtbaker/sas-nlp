<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="DenseDoubleMatrix1D" line="4">
            <extends class="DoubleMatrix1D"/>
            <javadoc line="4">
                Dense 1-d matrix (aka &lt;i&gt;vector&lt;/i&gt;) holding &lt;tt&gt;double&lt;/tt&gt; elements.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  &lt;p&gt;
                  Internally holds one single contigous one-dimensional array. 
                  Note that this implementation is not synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Memory requirements:&lt;/b&gt;
                  &lt;p&gt;
                  &lt;tt&gt;memory [bytes] = 8size()&lt;/tt&gt;.
                  Thus, a 1000000 matrix uses 8 MB.
                  &lt;p&gt;
                  &lt;b&gt;Time complexity:&lt;/b&gt;
                  &lt;p&gt;
                  &lt;tt&gt;O(1)&lt;/tt&gt; (i.e. constant time) for the basic operations
                  &lt;tt&gt;get&lt;/tt&gt;, &lt;tt&gt;getQuick&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;, &lt;tt&gt;setQuick&lt;/tt&gt; and &lt;tt&gt;size&lt;/tt&gt;,
                  &lt;p&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="elements" type="double[]" line="27"/>
            <javadoc line="27">
                The elements of this matrix.                
            </javadoc>
            <javadoc line="31">
                Constructs a matrix with a copy of the given values.
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values The values to be filled into the new matrix.                    
                </param>
            </javadoc>
            <method name="DenseDoubleMatrix1D" type="constructor" line="36">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="40">
                Constructs a matrix with a given number of cells.
                  All entries are initially &lt;tt&gt;0&lt;/tt&gt;.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>size<0</tt>.                    
                </throws>
            </javadoc>
            <method name="DenseDoubleMatrix1D" type="constructor" line="46">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="50">
                Constructs a matrix view with the given parameters.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <param>
                    elements the cells.                    
                </param>
                <param>
                    zero the index of the first element.                    
                </param>
                <param>
                    stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>size<0</tt>.                    
                </throws>
            </javadoc>
            <method name="DenseDoubleMatrix1D" type="constructor" line="58">
                <params>
                    <param name="size" type="int"/>
                    <param name="elements" type="double[]"/>
                    <param name="zero" type="int"/>
                    <param name="stride" type="int"/>
                </params>
            </method>
            <javadoc line="63">
                Sets all cells to the state specified by &lt;tt&gt;values&lt;/tt&gt;.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the same number of cells as the receiver.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values the values to be filled into the cells.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>values.length != size()</tt>.                    
                </throws>
            </javadoc>
            <method name="assign" type="DoubleMatrix1D" line="72">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <scope line="73"/>
                <scope line="77"/>
            </method>
            <javadoc line="82">
                Sets all cells to the state specified by &lt;tt&gt;value&lt;/tt&gt;.                
                <param>
                    value the value to be filled into the cells.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
            </javadoc>
            <method name="assign" type="DoubleMatrix1D" line="87">
                <params>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="88"/>
                <declaration name="s" type="int" line="89"/>
                <declaration name="elems" type="double[]" line="90"/>
                <scope line="91"/>
            </method>
            <javadoc line="97">
                Assigns the result of a function to each cell; &lt;tt&gt;x[i] = function(x[i])&lt;/tt&gt;.
                  (Iterates downwards from &lt;tt&gt;[size()-1]&lt;/tt&gt; to &lt;tt&gt;[0]&lt;/tt&gt;).
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  // change each cell to its sine
                  matrix =   0.5      1.5      2.5       3.5 
                  matrix.assign(cern.jet.math.Functions.sin);
                  --&gt;
                  matrix ==  0.479426 0.997495 0.598472 -0.350783
                  &lt;/pre&gt;
                  For further examples, see the &lt;a href=&quot;package-summary.html#FunctionObjects&quot;&gt;package doc&lt;/a&gt;.                
                <param>
                    function a function object taking as argument the current cell's value.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <see>
                    cern.jet.math.Functions                    
                </see>
            </javadoc>
            <method name="assign" type="DoubleMatrix1D" line="114">
                <params>
                    <param name="function" type="cern.colt.function.DoubleFunction"/>
                </params>
                <declaration name="s" type="int" line="115"/>
                <declaration name="i" type="int" line="116"/>
                <declaration name="elems" type="double[]" line="117"/>
                <scope line="119">
                    <declaration name="multiplicator" type="double" line="120"/>
                    <scope line="122"/>
                </scope>
                <scope line="127">
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="135">
                Replaces all cell values of the receiver with the values of another matrix.
                  Both matrices must have the same size.
                  If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.                
                <param>
                    source   the source matrix to copy from (may be identical to the receiver).                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>size() != other.size()</tt>.                    
                </throws>
            </javadoc>
            <method name="assign" type="DoubleMatrix1D" line="143">
                <params>
                    <param name="source" type="DoubleMatrix1D"/>
                </params>
                <scope line="144"/>
                <declaration name="other" type="DenseDoubleMatrix1D" line="147"/>
                <scope line="150"/>
                <scope line="154">
                    <declaration name="c" type="DoubleMatrix1D" line="155"/>
                    <scope line="156"/>
                </scope>
                <declaration name="elems" type="double[]" line="161"/>
                <declaration name="otherElems" type="double[]" line="162"/>
                <declaration name="s" type="int" line="164"/>
                <declaration name="ys" type="int" line="165"/>
                <declaration name="index" type="int" line="166"/>
                <declaration name="otherIndex" type="int" line="167"/>
                <scope line="168"/>
            </method>
            <javadoc line="175">
                Assigns the result of a function to each cell; &lt;tt&gt;x[i] = function(x[i],y[i])&lt;/tt&gt;.
                  (Iterates downwards from &lt;tt&gt;[size()-1]&lt;/tt&gt; to &lt;tt&gt;[0]&lt;/tt&gt;).
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;pre&gt;
                  // assign x[i] = x[i]&lt;sup&gt;y[i]&lt;/sup&gt;
                  m1 = 0 1 2 3;
                  m2 = 0 2 4 6;
                  m1.assign(m2, cern.jet.math.Functions.pow);
                  --&gt;
                  m1 == 1 1 16 729
                  // for non-standard functions there is no shortcut: 
                  m1.assign(m2,
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;new DoubleDoubleFunction() {
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public double apply(double x, double y) { return Math.pow(x,y); }
                  &amp;nbsp;&amp;nbsp;&amp;nbsp;}
                  );
                  &lt;/pre&gt;
                  For further examples, see the &lt;a href=&quot;package-summary.html#FunctionObjects&quot;&gt;package doc&lt;/a&gt;.                
                <param>
                    y the secondary matrix to operate on.                    
                </param>
                <param>
                    function a function object taking as first argument the current cell's value of <tt>this</tt>,
                      and as second argument the current cell's value of <tt>y</tt>,                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>size() != y.size()</tt>.                    
                </throws>
                <see>
                    cern.jet.math.Functions                    
                </see>
            </javadoc>
            <method name="assign" type="DoubleMatrix1D" line="202">
                <params>
                    <param name="y" type="DoubleMatrix1D"/>
                    <param name="function" type="cern.colt.function.DoubleDoubleFunction"/>
                </params>
                <scope line="203"/>
                <declaration name="other" type="DenseDoubleMatrix1D" line="206"/>
                <declaration name="elems" type="double[]" line="208"/>
                <declaration name="otherElems" type="double[]" line="209"/>
                <declaration name="s" type="int" line="211"/>
                <declaration name="ys" type="int" line="212"/>
                <declaration name="index" type="int" line="213"/>
                <declaration name="otherIndex" type="int" line="214"/>
                <scope line="215">
                    <scope line="216"/>
                </scope>
                <scope line="222">
                    <scope line="223"/>
                </scope>
                <scope line="229">
                    <declaration name="multiplicator" type="double" line="230"/>
                    <scope line="231"/>
                    <scope line="234">
                        <scope line="235"/>
                    </scope>
                    <scope line="241">
                        <scope line="242"/>
                    </scope>
                    <scope line="248">
                        <scope line="249"/>
                    </scope>
                </scope>
                <scope line="256">
                    <scope line="257"/>
                </scope>
            </method>
            <javadoc line="265">
                Returns the number of cells having non-zero values, but at most maxCardinality; ignores tolerance.                
            </javadoc>
            <method name="cardinality" type="int" line="268">
                <params>
                    <param name="maxCardinality" type="int"/>
                </params>
                <declaration name="cardinality" type="int" line="269"/>
                <declaration name="index" type="int" line="270"/>
                <declaration name="s" type="int" line="271"/>
                <declaration name="elems" type="double[]" line="272"/>
                <declaration name="i" type="int" line="273"/>
                <scope line="274"/>
            </method>
            <javadoc line="280">
                Returns the matrix cell value at coordinate &lt;tt&gt;index&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.                
                <param>
                    index   the index of the cell.                    
                </param>
                <return>
                    the value of the specified cell.                    
                </return>
            </javadoc>
            <method name="getQuick" type="double" line="288">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="291">
                Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share at least one identical cell.                
            </javadoc>
            <method name="haveSharedCellsRaw" type="boolean" line="294">
                <params>
                    <param name="other" type="DoubleMatrix1D"/>
                </params>
                <scope line="295">
                    <declaration name="otherMatrix" type="SelectedDenseDoubleMatrix1D" line="296"/>
                </scope>
                <scope line="299">
                    <declaration name="otherMatrix" type="DenseDoubleMatrix1D" line="300"/>
                </scope>
            </method>
            <javadoc line="305">
                Returns the position of the element with the given relative rank within the (virtual or non-virtual) internal 1-dimensional array.
                  You may want to override this method for performance.                
                <param>
                    rank   the rank of the element.                    
                </param>
            </javadoc>
            <method name="index" type="int" line="310">
                <params>
                    <param name="rank" type="int"/>
                </params>
            </method>
            <javadoc line="313">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified size.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <param>
                    size the number of cell the matrix shall have.                    
                </param>
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like" type="DoubleMatrix1D" line="321">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="324">
                Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like2D" type="DoubleMatrix2D" line="332">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="335">
                Sets the matrix cell at coordinate &lt;tt&gt;index&lt;/tt&gt; to the specified value.
                  &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.                
                <param>
                    index   the index of the cell.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="343">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="346">
                Swaps each element &lt;tt&gt;this[i]&lt;/tt&gt; with &lt;tt&gt;other[i]&lt;/tt&gt;.                
                <throws>
                    IllegalArgumentException if <tt>size() != other.size()</tt>.                    
                </throws>
            </javadoc>
            <method name="swap" type="void" line="350">
                <params>
                    <param name="other" type="DoubleMatrix1D"/>
                </params>
                <scope line="351"/>
                <declaration name="y" type="DenseDoubleMatrix1D" line="354"/>
                <declaration name="elems" type="double[]" line="357"/>
                <declaration name="otherElems" type="double[]" line="358"/>
                <declaration name="s" type="int" line="360"/>
                <declaration name="ys" type="int" line="361"/>
                <declaration name="index" type="int" line="362"/>
                <declaration name="otherIndex" type="int" line="363"/>
                <scope line="364">
                    <declaration name="tmp" type="double" line="365"/>
                </scope>
            </method>
            <javadoc line="373">
                Fills the cell values into the specified 1-dimensional array.
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.
                  After this call returns the array &lt;tt&gt;values&lt;/tt&gt; has the form 
                  &lt;br&gt;
                  &lt;tt&gt;for (int i=0; i &lt; size(); i++) values[i] = get(i);&lt;/tt&gt;                
                <throws>
                    IllegalArgumentException if <tt>values.length < size()</tt>.                    
                </throws>
            </javadoc>
            <method name="toArray" type="void" line="381">
                <params>
                    <param name="values" type="double[]"/>
                </params>
            </method>
            <javadoc line="386">
                Construct and returns a new selection view.                
                <param>
                    offsets the offsets of the visible elements.                    
                </param>
                <return>
                    a new view.                    
                </return>
            </javadoc>
            <method name="viewSelectionLike" type="DoubleMatrix1D" line="391">
                <params>
                    <param name="offsets" type="int[]"/>
                </params>
            </method>
            <javadoc line="394">
                Returns the dot product of two vectors x and y, which is &lt;tt&gt;Sum(x[i]y[i])&lt;/tt&gt;.
                  Where &lt;tt&gt;x == this&lt;/tt&gt;.
                  Operates on cells at indexes &lt;tt&gt;from .. Min(size(),y.size(),from+length)-1&lt;/tt&gt;.                
                <param>
                    y the second vector.                    
                </param>
                <param>
                    from the first index to be considered.                    
                </param>
                <param>
                    length the number of cells to be considered.                    
                </param>
                <return>
                    the sum of products; zero if <tt>from<0 || length<0</tt>.                    
                </return>
            </javadoc>
            <method name="zDotProduct" type="double" line="403">
                <params>
                    <param name="y" type="DoubleMatrix1D"/>
                    <param name="from" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="404"/>
                <declaration name="yy" type="DenseDoubleMatrix1D" line="407"/>
                <declaration name="tail" type="int" line="408"/>
                <declaration name="min" type="int" line="412"/>
                <declaration name="i" type="int" line="413"/>
                <declaration name="j" type="int" line="414"/>
                <declaration name="s" type="int" line="415"/>
                <declaration name="ys" type="int" line="416"/>
                <declaration name="elems" type="double[]" line="417"/>
                <declaration name="yElems" type="double[]" line="418"/>
                <declaration name="sum" type="double" line="420"/>
                <scope line="423"/>
                <scope line="426"/>
            </method>
            <javadoc line="431">
                Returns the sum of all cells; &lt;tt&gt;Sum( x[i] )&lt;/tt&gt;.                
                <return>
                    the sum.                    
                </return>
            </javadoc>
            <method name="zSum" type="double" line="435">
                <declaration name="sum" type="double" line="436"/>
                <declaration name="s" type="int" line="437"/>
                <declaration name="i" type="int" line="438"/>
                <declaration name="elems" type="double[]" line="439"/>
                <scope line="441"/>
            </method>
        </class>
    </source>