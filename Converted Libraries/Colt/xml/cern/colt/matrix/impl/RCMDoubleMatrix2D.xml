<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.colt.list.IntArrayList"/>
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="RCMDoubleMatrix2D" line="6">
            <extends class="WrapperDoubleMatrix2D"/>
            <javadoc line="6">
                Sparse row-compressed-modified 2-d matrix holding &lt;tt&gt;double&lt;/tt&gt; elements.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    0.9, 04/14/2000                    
                </version>
            </javadoc>
            <declaration name="indexes" type="IntArrayList[]" line="12"/>
            <declaration name="values" type="DoubleArrayList[]" line="13"/>
            <javadoc line="14">
                Constructs a matrix with a copy of the given values.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
                  and have exactly the same number of columns in every row.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values The values to be filled into the new matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values.length: values[row].length != values[row-1].length</tt>.                    
                </throws>
            </javadoc>
            <method name="RCMDoubleMatrix2D" type="constructor" line="23">
                <params>
                    <param name="values" type="double[][]"/>
                </params>
            </method>
            <javadoc line="27">
                Constructs a matrix with a given number of rows and columns.
                  All entries are initially &lt;tt&gt;0&lt;/tt&gt;.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>rows<0 || columns<0 || (double)columnsrows > Integer.MAX_VALUE</tt>.                    
                </throws>
            </javadoc>
            <method name="RCMDoubleMatrix2D" type="constructor" line="34">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="40">
                Sets all cells to the state specified by &lt;tt&gt;value&lt;/tt&gt;.                
                <param>
                    value the value to be filled into the cells.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
            </javadoc>
            <method name="assign" type="DoubleMatrix2D" line="45">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="46">
                    <scope line="47"/>
                </scope>
            </method>
            <javadoc line="55">
                Returns the content of this matrix if it is a wrapper; or &lt;tt&gt;this&lt;/tt&gt; otherwise.
                  Override this method in wrappers.                
            </javadoc>
            <method name="getContent" type="DoubleMatrix2D" line="59"/>
            <javadoc line="62">
                Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <return>
                    the value at the specified coordinate.                    
                </return>
            </javadoc>
            <method name="getQuick" type="double" line="71">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="k" type="int" line="72"/>
            </method>
            <javadoc line="77">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like" type="DoubleMatrix2D" line="86">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="89">
                Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like1D" type="DoubleMatrix1D" line="96">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
                  &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="108">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="i" type="int" line="109"/>
                <declaration name="j" type="int" line="110"/>
                <declaration name="k" type="int" line="111"/>
                <declaration name="indexList" type="IntArrayList" line="112"/>
                <scope line="114">
                    <scope line="115">
                        <declaration name="valueList" type="DoubleArrayList" line="116"/>
                        <declaration name="s" type="int" line="119"/>
                        <scope line="120"/>
                    </scope>
                    <scope line="129"/>
                </scope>
                <scope line="133">
                    <scope line="136"/>
                </scope>
            </method>
            <javadoc line="144">
                Linear algebraic matrix-vector multiplication; &lt;tt&gt;z = A  y&lt;/tt&gt;.
                  &lt;tt&gt;z[i] = alphaSum(A[i,j]  y[j]) + betaz[i], i=0..A.rows()-1, j=0..y.size()-1&lt;/tt&gt;.
                  Where &lt;tt&gt;A == this&lt;/tt&gt;.                
                <param>
                    y the source vector.                    
                </param>
                <param>
                    z the vector where results are to be stored.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>A.columns() != y.size() || A.rows() > z.size())</tt>.                    
                </throws>
            </javadoc>
            <method name="zMult" type="void" line="152">
                <params>
                    <param name="y" type="DoubleMatrix1D"/>
                    <param name="z" type="DoubleMatrix1D"/>
                    <param name="nonZeroIndexes" type="cern.colt.list.IntArrayList"/>
                    <param name="allRows" type="DoubleMatrix1D[]"/>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                </params>
                <scope line="155">
                    <scope line="156">
                        <scope line="157">
                            <declaration name="j" type="int" line="158"/>
                            <declaration name="value" type="double" line="159"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>