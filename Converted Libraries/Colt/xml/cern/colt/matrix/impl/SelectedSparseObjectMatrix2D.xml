<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.map.AbstractIntObjectMap"/>
        <import package="cern.colt.matrix.ObjectMatrix1D"/>
        <import package="cern.colt.matrix.ObjectMatrix2D"/>
        <class name="SelectedSparseObjectMatrix2D" line="5">
            <extends class="ObjectMatrix2D"/>
            <javadoc line="5">
                Selection view on sparse 2-d matrices holding &lt;tt&gt;Object&lt;/tt&gt; elements.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  &lt;p&gt;
                  Objects of this class are typically constructed via &lt;tt&gt;viewIndexes&lt;/tt&gt; methods on some source matrix.
                  The interface introduced in abstract super classes defines everything a user can do.
                  From a user point of view there is nothing special about this class; it presents the same functionality with the same signatures and semantics as its abstract superclass(es) while introducing no additional functionality.
                  Thus, this class need not be visible to users.
                  By the way, the same principle applies to concrete DenseXXX and SparseXXX classes: they presents the same functionality with the same signatures and semantics as abstract superclass(es) while introducing no additional functionality.
                  Thus, they need not be visible to users, either. 
                  Factory methods could hide all these concrete types.
                  &lt;p&gt;
                  This class uses no delegation. 
                  Its instances point directly to the data. 
                  Cell addressing overhead is 1 additional int addition and 2 additional array index accesses per get/set.
                  &lt;p&gt;
                  Note that this implementation is not synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Memory requirements:&lt;/b&gt;
                  &lt;p&gt;
                  &lt;tt&gt;memory [bytes] = 4(rowIndexes.length+columnIndexes.length)&lt;/tt&gt;.
                  Thus, an index view with 1000 x 1000 indexes additionally uses 8 KB.
                  &lt;p&gt;
                  &lt;b&gt;Time complexity:&lt;/b&gt;
                  &lt;p&gt;
                  Depends on the parent view holding cells.
                  &lt;p&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="elements" type="AbstractIntObjectMap" line="38"/>
            <declaration name="rowOffsets" type="int[]" line="39"/>
            <javadoc line="39">
                The offsets of the visible cells of this matrix.                
            </javadoc>
            <declaration name="columnOffsets" type="int[]" line="43"/>
            <declaration name="offset" type="int" line="44"/>
            <javadoc line="44">
                The offset.                
            </javadoc>
            <javadoc line="48">
                Constructs a matrix view with the given parameters.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <param>
                    elements the cells.                    
                </param>
                <param>
                    rowZero the position of the first element.                    
                </param>
                <param>
                    columnZero the position of the first element.                    
                </param>
                <param>
                    rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.                    
                </param>
                <param>
                    columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.                    
                </param>
                <param>
                    rowOffsets   The row offsets of the cells that shall be visible.                    
                </param>
                <param>
                    columnOffsets   The column offsets of the cells that shall be visible.                    
                </param>
                <param>
                    offset                    
                </param>
            </javadoc>
            <method name="SelectedSparseObjectMatrix2D" type="constructor" line="61">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="elements" type="AbstractIntObjectMap"/>
                    <param name="rowZero" type="int"/>
                    <param name="columnZero" type="int"/>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                    <param name="rowOffsets" type="int[]"/>
                    <param name="columnOffsets" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="69">
                Constructs a matrix view with the given parameters.                
                <param>
                    elements the cells.                    
                </param>
                <param>
                    rowOffsets   The row offsets of the cells that shall be visible.                    
                </param>
                <param>
                    columnOffsets   The column offsets of the cells that shall be visible.                    
                </param>
                <param>
                    offset                    
                </param>
            </javadoc>
            <method name="SelectedSparseObjectMatrix2D" type="constructor" line="76">
                <params>
                    <param name="elements" type="AbstractIntObjectMap"/>
                    <param name="rowOffsets" type="int[]"/>
                    <param name="columnOffsets" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="79">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <param>
                    rank   the absolute rank of the element.                    
                </param>
                <return>
                    the position.                    
                </return>
            </javadoc>
            <method name="_columnOffset" type="int" line="85">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <param>
                    rank   the absolute rank of the element.                    
                </param>
                <return>
                    the position.                    
                </return>
            </javadoc>
            <method name="_rowOffset" type="int" line="94">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="97">
                Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <return>
                    the value at the specified coordinate.                    
                </return>
            </javadoc>
            <method name="getQuick" type="Object" line="106">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="109">
                Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share common cells.
                  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;other != null&lt;/tt&gt; and at least one of the following conditions is met
                  &lt;ul&gt;
                  &lt;li&gt;the receiver is a view of the other matrix
                  &lt;li&gt;the other matrix is a view of the receiver
                  &lt;li&gt;&lt;tt&gt;this == other&lt;/tt&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="haveSharedCellsRaw" type="boolean" line="118">
                <params>
                    <param name="other" type="ObjectMatrix2D"/>
                </params>
                <scope line="119">
                    <declaration name="otherMatrix" type="SelectedSparseObjectMatrix2D" line="120"/>
                </scope>
                <scope line="123">
                    <declaration name="otherMatrix" type="SparseObjectMatrix2D" line="124"/>
                </scope>
            </method>
            <javadoc line="129">
                Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
            </javadoc>
            <method name="index" type="int" line="134">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="137">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like" type="ObjectMatrix2D" line="146">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="149">
                Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseObjectMatrix1D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseObjectMatrix1D&lt;/tt&gt;, etc.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like1D" type="ObjectMatrix1D" line="156">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="159">
                Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, sharing the same cells.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseObjectMatrix1D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseObjectMatrix1D&lt;/tt&gt;, etc.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <param>
                    zero the index of the first element.                    
                </param>
                <param>
                    stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like1D" type="ObjectMatrix1D" line="168">
                <params>
                    <param name="size" type="int"/>
                    <param name="zero" type="int"/>
                    <param name="stride" type="int"/>
                </params>
            </method>
            <javadoc line="171">
                Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
                  &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="180">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="index" type="int" line="181"/>
            </method>
            <javadoc line="185">
                Sets up a matrix with a given number of rows and columns.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>(Object)columnsrows > Integer.MAX_VALUE</tt>.                    
                </throws>
            </javadoc>
            <method name="setUp" type="void" line="191">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="197">
                Self modifying version of viewDice().                
            </javadoc>
            <method name="vDice" type="AbstractMatrix2D" line="200">
                <declaration name="tmp" type="int[]" line="202"/>
            </method>
            <javadoc line="208">
                Constructs and returns a new &lt;i&gt;slice view&lt;/i&gt; representing the rows of the given column.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;viewPart(...)&lt;/tt&gt;), then apply this method to the sub-range view.
                  &lt;p&gt; 
                  &lt;b&gt;Example:&lt;/b&gt; 
                  &lt;table border=&quot;0&quot;&gt;
                  &lt;tr nowrap&gt; 
                  &lt;td valign=&quot;top&quot;&gt;2 x 3 matrix: &lt;br&gt;
                  1, 2, 3&lt;br&gt;
                  4, 5, 6 &lt;/td&gt;
                  &lt;td&gt;viewColumn(0) ==&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;Matrix1D of size 2:&lt;br&gt;
                  1, 4&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    the column to fix.                    
                </param>
                <return>
                    a new slice view.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>column < 0 || column >= columns()</tt>.                    
                </throws>
                <see>
                    #viewRow(int)                    
                </see>
            </javadoc>
            <method name="viewColumn" type="ObjectMatrix1D" line="229">
                <params>
                    <param name="column" type="int"/>
                </params>
                <declaration name="viewSize" type="int" line="231"/>
                <declaration name="viewZero" type="int" line="232"/>
                <declaration name="viewStride" type="int" line="233"/>
                <declaration name="viewOffsets" type="int[]" line="234"/>
                <declaration name="viewOffset" type="int" line="235"/>
            </method>
            <javadoc line="238">
                Constructs and returns a new &lt;i&gt;slice view&lt;/i&gt; representing the columns of the given row.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                  To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;viewPart(...)&lt;/tt&gt;), then apply this method to the sub-range view.
                  &lt;p&gt; 
                  &lt;b&gt;Example:&lt;/b&gt; 
                  &lt;table border=&quot;0&quot;&gt;
                  &lt;tr nowrap&gt; 
                  &lt;td valign=&quot;top&quot;&gt;2 x 3 matrix: &lt;br&gt;
                  1, 2, 3&lt;br&gt;
                  4, 5, 6 &lt;/td&gt;
                  &lt;td&gt;viewRow(0) ==&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;Matrix1D of size 3:&lt;br&gt;
                  1, 2, 3&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    the row to fix.                    
                </param>
                <return>
                    a new slice view.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <tt>row < 0 || row >= rows()</tt>.                    
                </throws>
                <see>
                    #viewColumn(int)                    
                </see>
            </javadoc>
            <method name="viewRow" type="ObjectMatrix1D" line="259">
                <params>
                    <param name="row" type="int"/>
                </params>
                <declaration name="viewSize" type="int" line="261"/>
                <declaration name="viewZero" type="int" line="262"/>
                <declaration name="viewStride" type="int" line="263"/>
                <declaration name="viewOffsets" type="int[]" line="264"/>
                <declaration name="viewOffset" type="int" line="265"/>
            </method>
            <javadoc line="268">
                Construct and returns a new selection view.                
                <param>
                    rowOffsets the offsets of the visible elements.                    
                </param>
                <param>
                    columnOffsets the offsets of the visible elements.                    
                </param>
                <return>
                    a new view.                    
                </return>
            </javadoc>
            <method name="viewSelectionLike" type="ObjectMatrix2D" line="274">
                <params>
                    <param name="rowOffsets" type="int[]"/>
                    <param name="columnOffsets" type="int[]"/>
                </params>
            </method>
        </class>
    </source>