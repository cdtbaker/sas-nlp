<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="TridiagonalDoubleMatrix2D" line="4">
            <extends class="WrapperDoubleMatrix2D"/>
            <javadoc line="4">
                Tridiagonal 2-d matrix holding &lt;tt&gt;double&lt;/tt&gt; elements.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt;
                  TODO.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    0.9, 04/14/2000                    
                </version>
            </javadoc>
            <declaration name="values" type="double[]" line="14"/>
            <declaration name="dims" type="int[]" line="15"/>
            <declaration name="NONZERO" type="int" line="16"/>
            <javadoc line="17">
                Constructs a matrix with a copy of the given values.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
                  and have exactly the same number of columns in every row.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <param>
                    values The values to be filled into the new matrix.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values.length: values[row].length != values[row-1].length</tt>.                    
                </throws>
            </javadoc>
            <method name="TridiagonalDoubleMatrix2D" type="constructor" line="26">
                <params>
                    <param name="values" type="double[][]"/>
                </params>
            </method>
            <javadoc line="30">
                Constructs a matrix with a given number of rows and columns.
                  All entries are initially &lt;tt&gt;0&lt;/tt&gt;.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>rows<0 || columns<0 || (double)columnsrows > Integer.MAX_VALUE</tt>.                    
                </throws>
            </javadoc>
            <method name="TridiagonalDoubleMatrix2D" type="constructor" line="37">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="d" type="int" line="40"/>
                <declaration name="u" type="int" line="41"/>
                <declaration name="l" type="int" line="42"/>
                <declaration name="dimensions" type="int[]" line="46"/>
            </method>
            <javadoc line="49">
                Sets all cells to the state specified by &lt;tt&gt;value&lt;/tt&gt;.                
                <param>
                    value the value to be filled into the cells.                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
            </javadoc>
            <method name="assign" type="DoubleMatrix2D" line="54">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="55"/>
            </method>
            <method name="assign" type="DoubleMatrix2D" line="62">
                <params>
                    <param name="function" type="cern.colt.function.DoubleFunction"/>
                </params>
                <scope line="63">
                    <declaration name="alpha" type="double" line="64"/>
                    <anonymous_class line="68">
                        <method name="apply" type="double" line="69">
                            <params>
                                <param name="i" type="int"/>
                                <param name="j" type="int"/>
                                <param name="value" type="double"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="75"/>
            </method>
            <javadoc line="80">
                Replaces all cell values of the receiver with the values of another matrix.
                  Both matrices must have the same number of rows and columns.
                  If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.                
                <param>
                    source   the source matrix to copy from (may be identical to the receiver).                    
                </param>
                <return>
                    <tt>this</tt> (for convenience only).                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>columns() != source.columns() || rows() != source.rows()</tt>                    
                </throws>
            </javadoc>
            <method name="assign" type="DoubleMatrix2D" line="88">
                <params>
                    <param name="source" type="DoubleMatrix2D"/>
                </params>
                <scope line="91">
                    <declaration name="other" type="TridiagonalDoubleMatrix2D" line="92"/>
                </scope>
                <scope line="97">
                    <anonymous_class line="99">
                        <method name="apply" type="double" line="100">
                            <params>
                                <param name="i" type="int"/>
                                <param name="j" type="int"/>
                                <param name="value" type="double"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="assign" type="DoubleMatrix2D" line="110">
                <params>
                    <param name="y" type="DoubleMatrix2D"/>
                    <param name="function" type="cern.colt.function.DoubleDoubleFunction"/>
                </params>
                <scope line="112">
                    <declaration name="alpha" type="double" line="113"/>
                    <anonymous_class line="115">
                        <method name="apply" type="double" line="116">
                            <params>
                                <param name="i" type="int"/>
                                <param name="j" type="int"/>
                                <param name="value" type="double"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="124">
                    <anonymous_class line="125">
                        <method name="apply" type="double" line="126">
                            <params>
                                <param name="i" type="int"/>
                                <param name="j" type="int"/>
                                <param name="value" type="double"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="134">
                    <anonymous_class line="135">
                        <method name="apply" type="double" line="136">
                            <params>
                                <param name="i" type="int"/>
                                <param name="j" type="int"/>
                                <param name="value" type="double"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="forEachNonZero" type="DoubleMatrix2D" line="146">
                <params>
                    <param name="function" type="cern.colt.function.IntIntDoubleFunction"/>
                </params>
                <scope line="147">
                    <declaration name="i" type="int" line="148"/>
                    <scope line="151"/>
                    <scope line="155"/>
                    <declaration name="low" type="int" line="159"/>
                    <declaration name="high" type="int" line="160"/>
                    <scope line="161">
                        <declaration name="value" type="double" line="162"/>
                        <scope line="163">
                            <declaration name="r" type="double" line="164"/>
                            <scope line="165"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="174">
                Returns the content of this matrix if it is a wrapper; or &lt;tt&gt;this&lt;/tt&gt; otherwise.
                  Override this method in wrappers.                
            </javadoc>
            <method name="getContent" type="DoubleMatrix2D" line="178"/>
            <javadoc line="181">
                Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <return>
                    the value at the specified coordinate.                    
                </return>
            </javadoc>
            <method name="getQuick" type="double" line="190">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="i" type="int" line="191"/>
                <declaration name="j" type="int" line="192"/>
                <declaration name="k" type="int" line="193"/>
                <declaration name="q" type="int" line="194"/>
                <scope line="196"/>
            </method>
            <javadoc line="201">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like" type="DoubleMatrix2D" line="210">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="213">
                Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like1D" type="DoubleMatrix1D" line="220">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="223">
                Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
                  &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="232">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="i" type="int" line="233"/>
                <declaration name="j" type="int" line="234"/>
                <declaration name="isZero" type="boolean" line="235"/>
                <declaration name="k" type="int" line="236"/>
                <declaration name="q" type="int" line="237"/>
                <scope line="239">
                    <declaration name="index" type="int" line="240"/>
                    <scope line="241"/>
                    <scope line="244"/>
                </scope>
            </method>
            <method name="zMult" type="DoubleMatrix1D" line="252">
                <params>
                    <param name="y" type="DoubleMatrix1D"/>
                    <param name="z" type="DoubleMatrix1D"/>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                    <param name="transposeA" type="boolean"/>
                </params>
                <declaration name="m" type="int" line="253"/>
                <declaration name="n" type="int" line="254"/>
                <scope line="255"/>
                <declaration name="ignore" type="boolean" line="259"/>
                <scope line="261"/>
                <declaration name="zz" type="DenseDoubleMatrix1D" line="266"/>
                <declaration name="zElements" type="double[]" line="267"/>
                <declaration name="zStride" type="int" line="268"/>
                <declaration name="zi" type="int" line="269"/>
                <declaration name="yy" type="DenseDoubleMatrix1D" line="270"/>
                <declaration name="yElements" type="double[]" line="271"/>
                <declaration name="yStride" type="int" line="272"/>
                <declaration name="yi" type="int" line="273"/>
                <anonymous_class line="275">
                    <method name="apply" type="double" line="276">
                        <params>
                            <param name="i" type="int"/>
                            <param name="j" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                        <scope line="277">
                            <declaration name="tmp" type="int" line="278"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="zMult" type="DoubleMatrix2D" line="290">
                <params>
                    <param name="B" type="DoubleMatrix2D"/>
                    <param name="C" type="DoubleMatrix2D"/>
                    <param name="alpha" type="double"/>
                    <param name="beta" type="double"/>
                    <param name="transposeA" type="boolean"/>
                    <param name="transposeB" type="boolean"/>
                </params>
                <declaration name="m" type="int" line="292"/>
                <declaration name="n" type="int" line="293"/>
                <scope line="294"/>
                <declaration name="p" type="int" line="298"/>
                <declaration name="ignore" type="boolean" line="299"/>
                <declaration name="Brows" type="DoubleMatrix1D[]" line="305"/>
                <declaration name="Crows" type="DoubleMatrix1D[]" line="307"/>
                <declaration name="fun" type="cern.jet.math.PlusMult" line="309"/>
                <anonymous_class line="310">
                    <method name="apply" type="double" line="311">
                        <params>
                            <param name="i" type="int"/>
                            <param name="j" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>