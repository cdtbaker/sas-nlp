<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <class name="AbstractMatrix1D" line="2">
            <extends class="AbstractMatrix"/>
            <javadoc line="2">
                Abstract base class for 1-d matrices (aka &lt;i&gt;vectors&lt;/i&gt;) holding objects or primitive data types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, etc.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="size" type="int" line="11"/>
            <javadoc line="11">
                the number of cells this matrix (view) has                
            </javadoc>
            <declaration name="zero" type="int" line="15"/>
            <javadoc line="15">
                the index of the first element                
            </javadoc>
            <declaration name="stride" type="int" line="19"/>
            <javadoc line="19">
                the number of indexes between any two elements, i.e. &lt;tt&gt;index(i+1) - index(i)&lt;/tt&gt;.                
            </javadoc>
            <javadoc line="23">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractMatrix1D" type="constructor" line="26"/>
            <javadoc line="28">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <param>
                    rank   the absolute rank of the element.                    
                </param>
                <return>
                    the position.                    
                </return>
            </javadoc>
            <method name="_offset" type="int" line="34">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="37">
                Returns the absolute rank of the given relative rank.                
                <param>
                    rank   the relative rank of the element.                    
                </param>
                <return>
                    the absolute rank of the element.                    
                </return>
            </javadoc>
            <method name="_rank" type="int" line="42">
                <params>
                    <param name="rank" type="int"/>
                </params>
            </method>
            <javadoc line="45">
                Sanity check for operations requiring an index to be within bounds.                
                <throws>
                    IndexOutOfBoundsException if <tt>index < 0 || index >= size()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkIndex" type="void" line="49">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="52">
                Checks whether indexes are legal and throws an exception, if necessary.                
                <throws>
                    IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < size())</tt> for any i=0..indexes.length()-1.                    
                </throws>
            </javadoc>
            <method name="checkIndexes" type="void" line="56">
                <params>
                    <param name="indexes" type="int[]"/>
                </params>
                <scope line="57">
                    <declaration name="index" type="int" line="58"/>
                </scope>
            </method>
            <javadoc line="62">
                Checks whether the receiver contains the given range and throws an exception, if necessary.                
                <throws>
                    IndexOutOfBoundsException if <tt>index<0 || index+width>size()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkRange" type="void" line="66">
                <params>
                    <param name="index" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="69">
                Sanity check for operations requiring two matrices with the same size.                
                <throws>
                    IllegalArgumentException if <tt>size() != B.size()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkSize" type="void" line="73">
                <params>
                    <param name="B" type="double[]"/>
                </params>
            </method>
            <javadoc line="76">
                Sanity check for operations requiring two matrices with the same size.                
                <throws>
                    IllegalArgumentException if <tt>size() != B.size()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkSize" type="void" line="80">
                <params>
                    <param name="B" type="AbstractMatrix1D"/>
                </params>
            </method>
            <javadoc line="83">
                Returns the position of the element with the given relative rank within the (virtual or non-virtual) internal 1-dimensional array.
                  You may want to override this method for performance.                
                <param>
                    rank   the rank of the element.                    
                </param>
            </javadoc>
            <method name="index" type="int" line="88">
                <params>
                    <param name="rank" type="int"/>
                </params>
            </method>
            <javadoc line="91">
                Sets up a matrix with a given number of cells.                
                <param>
                    size the number of cells the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>size<0</tt>.                    
                </throws>
            </javadoc>
            <method name="setUp" type="void" line="96">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Sets up a matrix with the given parameters.                
                <param>
                    size the number of elements the matrix shall have.                    
                </param>
                <param>
                    zero the index of the first element.                    
                </param>
                <param>
                    stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>size<0</tt>.                    
                </throws>
            </javadoc>
            <method name="setUp" type="void" line="106">
                <params>
                    <param name="size" type="int"/>
                    <param name="zero" type="int"/>
                    <param name="stride" type="int"/>
                </params>
            </method>
            <javadoc line="113">
                Returns the number of cells.                
            </javadoc>
            <method name="size" type="int" line="116"/>
            <javadoc line="119">
                Returns the stride of the given dimension (axis, rank).                
                <dimension>
                    the index of the dimension.                    
                </dimension>
                <return>
                    the stride in the given dimension.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>dimension != 0</tt>.                    
                </throws>
            </javadoc>
            <method name="stride" type="int" line="125">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="129">
                Returns a string representation of the receiver&apos;s shape.                
            </javadoc>
            <method name="toStringShort" type="String" line="132"/>
            <javadoc line="135">
                Self modifying version of viewFlip().
                  What used to be index &lt;tt&gt;0&lt;/tt&gt; is now index &lt;tt&gt;size()-1&lt;/tt&gt;, ..., what used to be index &lt;tt&gt;size()-1&lt;/tt&gt; is now index &lt;tt&gt;0&lt;/tt&gt;.                
            </javadoc>
            <method name="vFlip" type="AbstractMatrix1D" line="139">
                <scope line="140"/>
            </method>
            <javadoc line="147">
                Self modifying version of viewPart().                
                <throws>
                    IndexOutOfBoundsException if <tt>index<0 || index+width>size()</tt>.                    
                </throws>
            </javadoc>
            <method name="vPart" type="AbstractMatrix1D" line="151">
                <params>
                    <param name="index" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="158">
                Self modifying version of viewStrides().                
                <throws>
                    IndexOutOfBoundsException if <tt>stride <= 0</tt>.                    
                </throws>
            </javadoc>
            <method name="vStrides" type="AbstractMatrix1D" line="162">
                <params>
                    <param name="stride" type="int"/>
                </params>
            </method>
        </class>
    </source>