<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="WrapperDoubleMatrix1D" line="4">
            <extends class="DoubleMatrix1D"/>
            <javadoc line="4">
                1-d matrix holding &lt;tt&gt;double&lt;/tt&gt; elements; either a view wrapping another matrix or a matrix whose views are wrappers.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="content" type="DoubleMatrix1D" line="10"/>
            <method name="WrapperDoubleMatrix1D" type="constructor" line="11">
                <params>
                    <param name="newContent" type="DoubleMatrix1D"/>
                </params>
            </method>
            <javadoc line="15">
                Returns the content of this matrix if it is a wrapper; or &lt;tt&gt;this&lt;/tt&gt; otherwise.
                  Override this method in wrappers.                
            </javadoc>
            <method name="getContent" type="DoubleMatrix1D" line="19"/>
            <javadoc line="22">
                Returns the matrix cell value at coordinate &lt;tt&gt;index&lt;/tt&gt;.
                  &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.                
                <param>
                    index   the index of the cell.                    
                </param>
                <return>
                    the value of the specified cell.                    
                </return>
            </javadoc>
            <method name="getQuick" type="double" line="30">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="33">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified size.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.
                  In general, the new matrix should have internal parametrization as similar as possible.                
                <param>
                    size the number of cell the matrix shall have.                    
                </param>
                <return>
                    a new empty matrix of the same dynamic type.                    
                </return>
            </javadoc>
            <method name="like" type="DoubleMatrix1D" line="41">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="44">
                Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
                  For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
                  if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <return>
                    a new matrix of the corresponding dynamic type.                    
                </return>
            </javadoc>
            <method name="like2D" type="DoubleMatrix2D" line="52">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="55">
                Sets the matrix cell at coordinate &lt;tt&gt;index&lt;/tt&gt; to the specified value.
                  &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                  &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                  Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.                
                <param>
                    index   the index of the cell.                    
                </param>
                <param>
                    value the value to be filled into the specified cell.                    
                </param>
            </javadoc>
            <method name="setQuick" type="void" line="63">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="66">
                Constructs and returns a new &lt;i&gt;flip view&lt;/i&gt;.
                  What used to be index &lt;tt&gt;0&lt;/tt&gt; is now index &lt;tt&gt;size()-1&lt;/tt&gt;, ..., what used to be index &lt;tt&gt;size()-1&lt;/tt&gt; is now index &lt;tt&gt;0&lt;/tt&gt;.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.                
                <return>
                    a new flip view.                    
                </return>
            </javadoc>
            <method name="viewFlip" type="DoubleMatrix1D" line="72">
                <anonymous_class line="73">
                    <method name="getQuick" type="double" line="74">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                    </method>
                    <method name="setQuick" type="void" line="77">
                        <params>
                            <param name="index" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="view" type="DoubleMatrix1D" line="73"/>
            </method>
            <javadoc line="84">
                Constructs and returns a new &lt;i&gt;sub-range view&lt;/i&gt; that is a &lt;tt&gt;width&lt;/tt&gt; sub matrix starting at &lt;tt&gt;index&lt;/tt&gt;.
                  Operations on the returned view can only be applied to the restricted range.
                  Any attempt to access coordinates not contained in the view will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note that the view is really just a range restriction:&lt;/b&gt; 
                  The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa. 
                  &lt;p&gt;
                  The view contains the cells from &lt;tt&gt;index..index+width-1&lt;/tt&gt;.
                  and has &lt;tt&gt;view.size() == width&lt;/tt&gt;.
                  A view&apos;s legal coordinates are again zero based, as usual.
                  In other words, legal coordinates of the view are &lt;tt&gt;0 .. view.size()-1==width-1&lt;/tt&gt;.
                  As usual, any attempt to access a cell at other coordinates will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.                
                <param>
                    index   The index of the first cell.                    
                </param>
                <param>
                    width   The width of the range.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>index<0 || width<0 || index+width>size()</tt>.                    
                </throws>
                <return>
                    the new view.                    
                </return>
            </javadoc>
            <method name="viewPart" type="DoubleMatrix1D" line="102">
                <params>
                    <param name="index" type="int"/>
                    <param name="width" type="int"/>
                </params>
                <anonymous_class line="104">
                    <method name="getQuick" type="double" line="105">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <method name="setQuick" type="void" line="108">
                        <params>
                            <param name="i" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="view" type="DoubleMatrix1D" line="104"/>
            </method>
            <javadoc line="116">
                Constructs and returns a new &lt;i&gt;selection view&lt;/i&gt; that is a matrix holding the indicated cells.
                  There holds &lt;tt&gt;view.size() == indexes.length&lt;/tt&gt; and &lt;tt&gt;view.get(i) == this.get(indexes[i])&lt;/tt&gt;.
                  Indexes can occur multiple times and can be in arbitrary order.
                  &lt;p&gt;
                  &lt;b&gt;Example:&lt;/b&gt;
                  &lt;br&gt;
                  &lt;pre&gt;
                  this     = (0,0,8,0,7)
                  indexes  = (0,2,4,2)
                  --&gt;
                  view     = (0,8,7,8)
                  &lt;/pre&gt;
                  Note that modifying &lt;tt&gt;indexes&lt;/tt&gt; after this call has returned has no effect on the view.
                  The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.                
                <param>
                    indexes   The indexes of the cells that shall be visible in the new view. To indicate that <i>all</i> cells shall be visible, simply set this parameter to <tt>null</tt>.                    
                </param>
                <return>
                    the new view.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if <tt>!(0 <= indexes[i] < size())</tt> for any <tt>i=0..indexes.length()-1</tt>.                    
                </throws>
            </javadoc>
            <method name="viewSelection" type="DoubleMatrix1D" line="135">
                <params>
                    <param name="indexes" type="int[]"/>
                </params>
                <scope line="136"/>
                <declaration name="idx" type="int[]" line="141"/>
                <anonymous_class line="142">
                    <method name="getQuick" type="double" line="143">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <method name="setQuick" type="void" line="146">
                        <params>
                            <param name="i" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="view" type="DoubleMatrix1D" line="142"/>
            </method>
            <javadoc line="154">
                Construct and returns a new selection view.                
                <param>
                    offsets the offsets of the visible elements.                    
                </param>
                <return>
                    a new view.                    
                </return>
            </javadoc>
            <method name="viewSelectionLike" type="DoubleMatrix1D" line="159">
                <params>
                    <param name="offsets" type="int[]"/>
                </params>
            </method>
            <javadoc line="162">
                Constructs and returns a new &lt;i&gt;stride view&lt;/i&gt; which is a sub matrix consisting of every i-th cell.
                  More specifically, the view has size &lt;tt&gt;this.size()/stride&lt;/tt&gt; holding cells &lt;tt&gt;this.get(istride)&lt;/tt&gt; for all &lt;tt&gt;i = 0..size()/stride - 1&lt;/tt&gt;.                
                <param>
                    stride  the step factor.                    
                </param>
                <throws>
                    IndexOutOfBoundsException if <tt>stride <= 0</tt>.                    
                </throws>
                <return>
                    the new view.                    
                </return>
            </javadoc>
            <method name="viewStrides" type="DoubleMatrix1D" line="169">
                <params>
                    <param name="_stride" type="int"/>
                </params>
                <anonymous_class line="171">
                    <method name="getQuick" type="double" line="172">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                    </method>
                    <method name="setQuick" type="void" line="175">
                        <params>
                            <param name="index" type="int"/>
                            <param name="value" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="view" type="DoubleMatrix1D" line="171"/>
            </method>
        </class>
    </source>