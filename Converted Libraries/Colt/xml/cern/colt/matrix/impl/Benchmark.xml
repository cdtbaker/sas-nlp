<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.matrix.DoubleFactory2D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="Benchmark" line="13">
            <javadoc line="13">
                Benchmarks the performance of matrix algorithms.                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <javadoc line="20">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Benchmark" type="constructor" line="23"/>
            <javadoc line="26">
                Runs a bench on matrices holding double elements.                
            </javadoc>
            <method name="benchmark" type="void" line="29">
                <params>
                    <param name="runs" type="int"/>
                    <param name="size" type="int"/>
                    <param name="kind" type="String"/>
                    <param name="print" type="boolean"/>
                    <param name="initialCapacity" type="int"/>
                    <param name="minLoadFactor" type="double"/>
                    <param name="maxLoadFactor" type="double"/>
                    <param name="percentNonZero" type="double"/>
                </params>
                <comment line="31">
                    certain loops need to be constructed so that the jitter can&apos;t optimize them away and we get fantastic numbers.
                     this involves primarly read-loops                    
                </comment>
                <comment line="44">
                    else if (kind.equals(&quot;denseArray&quot;)) matrix = new DoubleArrayMatrix2D(size,size);                    
                </comment>
                <comment line="48">
                    Matrix AJ = new Matrix(columnwise,3);
                    Basic.random(matrix, new cern.jet.random.Uniform(new cern.jet.random.engine.MersenneTwister()));                    
                </comment>
                <comment line="54">
                    long NN = matrix.size();
                    int nn = (int) (NNpercentNonZero);
                    long[] nonZeroIndexes = new long[nn];
                    cern.jet.random.sampling.RandomSampler sampler = new cern.jet.random.sampling.RandomSampler(nn,NN,0,new cern.jet.random.engine.MersenneTwister());
                    sampler.nextBlock(nn,nonZeroIndexes,0);
                    for (int i=nn; --i &gt;=0; ) {
                    int row = (int) (nonZeroIndexes[i]size);
                    int column = (int) (nonZeroIndexes[i]%size);
                    matrix.set(row,column, value);
                    }                    
                </comment>
                <comment line="67">
                    timer1.start();
                    for (int i=0; i&lt;runs; i++) {
                    LUDecomposition LU = new LUDecomposition(matrix);
                    }
                    timer1.stop();
                    timer1.display();
                    
                    {
                    Jama.Matrix jmatrix = new Jama.Matrix(matrix.toArray());
                    timer2.start();
                    for (int i=0; i&lt;runs; i++) {
                    Jama.LUDecomposition LU = new Jama.LUDecomposition(jmatrix);
                    }
                    timer2.stop();
                    timer2.display();
                    }                    
                </comment>
                <comment line="95">
                    {
                    timer6.start();
                    double a = cubicLoop(runs,size);
                    timer6.stop();
                    timer6.display();
                    System.out.println(a);
                    }                    
                </comment>
                <comment line="109">
                    DoubleMatrix2D C = Basic.product(A,B);                    
                </comment>
                <comment line="130">
                    {
                    DoubleMatrix2D A = matrix.like().assign(value);
                    DoubleMatrix2D B = matrix.like().assign(value);
                    DoubleMatrix2D C = Basic.product(A,B);
                    timer5.start();
                    for (int i=0; i&lt;runs; i++) {
                    cern.colt.matrix.Blas.matrixMultiply(A,B,C);
                    }
                    timer5.stop();
                    timer5.display();
                    }                    
                </comment>
                <comment line="145">
                    {
                    Jama.Matrix A = new Jama.Matrix(size,size);
                    Jama.Matrix B = new Jama.Matrix(size,size);
                    Jama.Matrix C;
                    timer4.start();
                    for (int i=0; i&lt;runs; i++) {
                    C = A.times(B);
                    }
                    timer4.stop();
                    timer4.display();
                    }                    
                </comment>
                <declaration name="timer1" type="cern.colt.Timer" line="33"/>
                <declaration name="timer2" type="cern.colt.Timer" line="34"/>
                <declaration name="timer3" type="cern.colt.Timer" line="35"/>
                <declaration name="timer4" type="cern.colt.Timer" line="36"/>
                <declaration name="timer5" type="cern.colt.Timer" line="37"/>
                <declaration name="timer6" type="cern.colt.Timer" line="38"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="40"/>
                <declaration name="value" type="double" line="49"/>
                <declaration name="tmp" type="DoubleMatrix2D" line="50"/>
                <declaration name="dense" type="DoubleMatrix2D" line="86"/>
                <declaration name="ADense" type="DoubleMatrix2D" line="89"/>
                <declaration name="BDense" type="DoubleMatrix2D" line="90"/>
                <declaration name="CDense" type="DoubleMatrix2D" line="91"/>
                <scope line="105">
                    <declaration name="A" type="DoubleMatrix2D" line="106"/>
                    <declaration name="B" type="DoubleMatrix2D" line="107"/>
                    <declaration name="C" type="DoubleMatrix2D" line="109"/>
                    <scope line="116"/>
                    <declaration name="m" type="int" line="121"/>
                    <declaration name="n" type="int" line="122"/>
                    <declaration name="p" type="int" line="123"/>
                    <declaration name="reps" type="int" line="124"/>
                    <declaration name="mflops" type="double" line="125"/>
                </scope>
            </method>
            <javadoc line="162">
                                
            </javadoc>
            <method name="cubicLoop" type="double" line="165">
                <params>
                    <param name="runs" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <declaration name="a" type="double" line="166"/>
                <declaration name="b" type="double" line="167"/>
                <scope line="168">
                    <scope line="169">
                        <scope line="170">
                            <scope line="171"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="179">
                Benchmarks various matrix methods.                
            </javadoc>
            <method name="main" type="void" line="182">
                <params>
                    <param name="args" type="String"/>
                </params>
                <comment line="187">
                    int size = Integer.parseInt(args[3]);
                    boolean isSparse = args[4].equals(&quot;sparse&quot;);                    
                </comment>
                <declaration name="runs" type="int" line="183"/>
                <declaration name="rows" type="int" line="184"/>
                <declaration name="columns" type="int" line="185"/>
                <declaration name="kind" type="String" line="188"/>
                <declaration name="initialCapacity" type="int" line="189"/>
                <declaration name="minLoadFactor" type="double" line="190"/>
                <declaration name="maxLoadFactor" type="double" line="191"/>
                <declaration name="print" type="boolean" line="192"/>
                <declaration name="initialValue" type="double" line="193"/>
                <declaration name="size" type="int" line="194"/>
            </method>
        </class>
    </source>