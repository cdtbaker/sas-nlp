<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <class name="AbstractMatrix2D" line="2">
            <extends class="AbstractMatrix"/>
            <javadoc line="2">
                Abstract base class for 2-d matrices holding objects or primitive data types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, etc.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt;                
                <author>
                    wolfgang.hoschek@cern.ch                    
                </author>
                <version>
                    1.0, 09/24/99                    
                </version>
            </javadoc>
            <declaration name="columns" type="int" line="11"/>
            <javadoc line="11">
                the number of colums and rows this matrix (view) has                
            </javadoc>
            <declaration name="rowStride" type="int" line="15"/>
            <javadoc line="15">
                the number of elements between two rows, i.e. &lt;tt&gt;index(i+1,j,k) - index(i,j,k)&lt;/tt&gt;.                
            </javadoc>
            <declaration name="columnStride" type="int" line="19"/>
            <javadoc line="19">
                the number of elements between two columns, i.e. &lt;tt&gt;index(i,j+1,k) - index(i,j,k)&lt;/tt&gt;.                
            </javadoc>
            <declaration name="rowZero" type="int" line="23"/>
            <javadoc line="23">
                the index of the first element                
            </javadoc>
            <javadoc line="27">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractMatrix2D" type="constructor" line="30"/>
            <javadoc line="32">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <param>
                    rank   the absolute rank of the element.                    
                </param>
                <return>
                    the position.                    
                </return>
            </javadoc>
            <method name="_columnOffset" type="int" line="38">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="41">
                Returns the absolute rank of the given relative rank.                
                <param>
                    rank   the relative rank of the element.                    
                </param>
                <return>
                    the absolute rank of the element.                    
                </return>
            </javadoc>
            <method name="_columnRank" type="int" line="46">
                <params>
                    <param name="rank" type="int"/>
                </params>
            </method>
            <javadoc line="49">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <param>
                    rank   the absolute rank of the element.                    
                </param>
                <return>
                    the position.                    
                </return>
            </javadoc>
            <method name="_rowOffset" type="int" line="55">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="58">
                Returns the absolute rank of the given relative rank.                
                <param>
                    rank   the relative rank of the element.                    
                </param>
                <return>
                    the absolute rank of the element.                    
                </return>
            </javadoc>
            <method name="_rowRank" type="int" line="63">
                <params>
                    <param name="rank" type="int"/>
                </params>
            </method>
            <javadoc line="66">
                Checks whether the receiver contains the given box and throws an exception, if necessary.                
                <throws>
                    IndexOutOfBoundsException if <tt>column<0 || width<0 || column+width>columns() || row<0 || height<0 || row+height>rows()</tt>                    
                </throws>
            </javadoc>
            <method name="checkBox" type="void" line="70">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="height" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="73">
                Sanity check for operations requiring a column index to be within bounds.                
                <throws>
                    IndexOutOfBoundsException if <tt>column < 0 || column >= columns()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkColumn" type="void" line="77">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Checks whether indexes are legal and throws an exception, if necessary.                
                <throws>
                    IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < columns())</tt> for any i=0..indexes.length()-1.                    
                </throws>
            </javadoc>
            <method name="checkColumnIndexes" type="void" line="84">
                <params>
                    <param name="indexes" type="int[]"/>
                </params>
                <scope line="85">
                    <declaration name="index" type="int" line="86"/>
                </scope>
            </method>
            <javadoc line="90">
                Sanity check for operations requiring a row index to be within bounds.                
                <throws>
                    IndexOutOfBoundsException if <tt>row < 0 || row >= rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkRow" type="void" line="94">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="97">
                Checks whether indexes are legal and throws an exception, if necessary.                
                <throws>
                    IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < rows())</tt> for any i=0..indexes.length()-1.                    
                </throws>
            </javadoc>
            <method name="checkRowIndexes" type="void" line="101">
                <params>
                    <param name="indexes" type="int[]"/>
                </params>
                <scope line="102">
                    <declaration name="index" type="int" line="103"/>
                </scope>
            </method>
            <javadoc line="107">
                Sanity check for operations requiring two matrices with the same number of columns and rows.                
                <throws>
                    IllegalArgumentException if <tt>columns() != B.columns() || rows() != B.rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkShape" type="void" line="111">
                <params>
                    <param name="B" type="AbstractMatrix2D"/>
                </params>
            </method>
            <javadoc line="114">
                Sanity check for operations requiring matrices with the same number of columns and rows.                
                <throws>
                    IllegalArgumentException if <tt>columns() != B.columns() || rows() != B.rows() || columns() != C.columns() || rows() != C.rows()</tt>.                    
                </throws>
            </javadoc>
            <method name="checkShape" type="void" line="118">
                <params>
                    <param name="B" type="AbstractMatrix2D"/>
                    <param name="C" type="AbstractMatrix2D"/>
                </params>
            </method>
            <javadoc line="121">
                Returns the number of columns.                
            </javadoc>
            <method name="columns" type="int" line="124"/>
            <javadoc line="127">
                Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.                
                <param>
                    row   the index of the row-coordinate.                    
                </param>
                <param>
                    column   the index of the column-coordinate.                    
                </param>
            </javadoc>
            <method name="index" type="int" line="132">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="135">
                Returns the number of rows.                
            </javadoc>
            <method name="rows" type="int" line="138"/>
            <javadoc line="141">
                Sets up a matrix with a given number of rows and columns.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>rows<0 || columns<0 || (double)columnsrows > Integer.MAX_VALUE</tt>.                    
                </throws>
            </javadoc>
            <method name="setUp" type="void" line="147">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="150">
                Sets up a matrix with a given number of rows and columns and the given strides.                
                <param>
                    rows the number of rows the matrix shall have.                    
                </param>
                <param>
                    columns the number of columns the matrix shall have.                    
                </param>
                <param>
                    rowZero the position of the first element.                    
                </param>
                <param>
                    columnZero the position of the first element.                    
                </param>
                <param>
                    rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.                    
                </param>
                <param>
                    columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.                    
                </param>
                <throws>
                    IllegalArgumentException if <tt>rows<0 || columns<0 || (double)columnsrows > Integer.MAX_VALUE</tt> or flip's are illegal.                    
                </throws>
            </javadoc>
            <method name="setUp" type="void" line="160">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="rowZero" type="int"/>
                    <param name="columnZero" type="int"/>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                </params>
            </method>
            <javadoc line="171">
                Returns the number of cells which is &lt;tt&gt;rows()columns()&lt;/tt&gt;.                
            </javadoc>
            <method name="size" type="int" line="174"/>
            <javadoc line="177">
                Returns a string representation of the receiver&apos;s shape.                
            </javadoc>
            <method name="toStringShort" type="String" line="180"/>
            <javadoc line="183">
                Self modifying version of viewColumnFlip().                
            </javadoc>
            <method name="vColumnFlip" type="AbstractMatrix2D" line="186">
                <scope line="187"/>
            </method>
            <javadoc line="194">
                Self modifying version of viewDice().                
            </javadoc>
            <method name="vDice" type="AbstractMatrix2D" line="197">
                <declaration name="tmp" type="int" line="198"/>
            </method>
            <javadoc line="211">
                Self modifying version of viewPart().                
                <throws>
                    IndexOutOfBoundsException if <tt>column<0 || width<0 || column+width>columns() || row<0 || height<0 || row+height>rows()</tt>                    
                </throws>
            </javadoc>
            <method name="vPart" type="AbstractMatrix2D" line="215">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="height" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="224">
                Self modifying version of viewRowFlip().                
            </javadoc>
            <method name="vRowFlip" type="AbstractMatrix2D" line="227">
                <scope line="228"/>
            </method>
            <javadoc line="235">
                Self modifying version of viewStrides().                
                <throws>
                    IndexOutOfBoundsException if <tt>rowStride<=0 || columnStride<=0</tt>.                    
                </throws>
            </javadoc>
            <method name="vStrides" type="AbstractMatrix2D" line="239">
                <params>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                </params>
            </method>
        </class>
    </source>